/*
@license

dhtmlxRichText v.1.1.3 Professional

This software is covered by DHTMLX Commercial License.
Usage without proper license is prohibited.

(c) XB Software.

*/
if (window.dhx){ window.dhx_legacy = dhx; delete window.dhx; }(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["dhx"] = factory();
	else
		root["dhx"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/codebase/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/domvm/dist/dev/domvm.dev.js":
/*!***************************************************!*\
  !*** ../node_modules/domvm/dist/dev/domvm.dev.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
* Copyright (c) 2017, Leon Sorokin
* All rights reserved. (MIT Licensed)
*
* domvm.js (DOM ViewModel)
* A thin, fast, dependency-free vdom view layer
* @preserve https://github.com/leeoniya/domvm (v3.2.6, dev build)
*/

(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

// NOTE: if adding a new *VNode* type, make it < COMMENT and renumber rest.
// There are some places that test <= COMMENT to assert if node is a VNode

// VNode types
var ELEMENT	= 1;
var TEXT		= 2;
var COMMENT	= 3;

// placeholder types
var VVIEW		= 4;
var VMODEL		= 5;

var ENV_DOM = typeof window !== "undefined";
var win = ENV_DOM ? window : {};
var rAF = win.requestAnimationFrame;

var emptyObj = {};

function noop() {}

var isArr = Array.isArray;

function isSet(val) {
	return val != null;
}

function isPlainObj(val) {
	return val != null && val.constructor === Object;		//  && typeof val === "object"
}

function insertArr(targ, arr, pos, rem) {
	targ.splice.apply(targ, [pos, rem].concat(arr));
}

function isVal(val) {
	var t = typeof val;
	return t === "string" || t === "number";
}

function isFunc(val) {
	return typeof val === "function";
}

function isProm(val) {
	return typeof val === "object" && isFunc(val.then);
}



function assignObj(targ) {
	var args = arguments;

	for (var i = 1; i < args.length; i++)
		{ for (var k in args[i])
			{ targ[k] = args[i][k]; } }

	return targ;
}

// export const defProp = Object.defineProperty;

function deepSet(targ, path, val) {
	var seg;

	while (seg = path.shift()) {
		if (path.length === 0)
			{ targ[seg] = val; }
		else
			{ targ[seg] = targ = targ[seg] || {}; }
	}
}

/*
export function deepUnset(targ, path) {
	var seg;

	while (seg = path.shift()) {
		if (path.length === 0)
			targ[seg] = val;
		else
			targ[seg] = targ = targ[seg] || {};
	}
}
*/

function sliceArgs(args, offs) {
	var arr = [];
	for (var i = offs; i < args.length; i++)
		{ arr.push(args[i]); }
	return arr;
}

function cmpObj(a, b) {
	for (var i in a)
		{ if (a[i] !== b[i])
			{ return false; } }

	return true;
}

function cmpArr(a, b) {
	var alen = a.length;

	if (b.length !== alen)
		{ return false; }

	for (var i = 0; i < alen; i++)
		{ if (a[i] !== b[i])
			{ return false; } }

	return true;
}

// https://github.com/darsain/raft
// rAF throttler, aggregates multiple repeated redraw calls within single animframe
function raft(fn) {
	if (!rAF)
		{ return fn; }

	var id, ctx, args;

	function call() {
		id = 0;
		fn.apply(ctx, args);
	}

	return function() {
		ctx = this;
		args = arguments;
		if (!id) { id = rAF(call); }
	};
}

function curry(fn, args, ctx) {
	return function() {
		return fn.apply(ctx, args);
	};
}

/*
export function prop(val, cb, ctx, args) {
	return function(newVal, execCb) {
		if (newVal !== undefined && newVal !== val) {
			val = newVal;
			execCb !== false && isFunc(cb) && cb.apply(ctx, args);
		}

		return val;
	};
}
*/

/*
// adapted from https://github.com/Olical/binary-search
export function binaryKeySearch(list, item) {
    var min = 0;
    var max = list.length - 1;
    var guess;

	var bitwise = (max <= 2147483647) ? true : false;
	if (bitwise) {
		while (min <= max) {
			guess = (min + max) >> 1;
			if (list[guess].key === item) { return guess; }
			else {
				if (list[guess].key < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	} else {
		while (min <= max) {
			guess = Math.floor((min + max) / 2);
			if (list[guess].key === item) { return guess; }
			else {
				if (list[guess].key < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	}

    return -1;
}
*/

// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
// impl borrowed from https://github.com/ivijs/ivi
function longestIncreasingSubsequence(a) {
	var p = a.slice();
	var result = [];
	result.push(0);
	var u;
	var v;

	for (var i = 0, il = a.length; i < il; ++i) {
		var j = result[result.length - 1];
		if (a[j] < a[i]) {
			p[i] = j;
			result.push(i);
			continue;
		}

		u = 0;
		v = result.length - 1;

		while (u < v) {
			var c = ((u + v) / 2) | 0;
			if (a[result[c]] < a[i]) {
				u = c + 1;
			} else {
				v = c;
			}
		}

		if (a[i] < a[result[u]]) {
			if (u > 0) {
				p[i] = result[u - 1];
			}
			result[u] = i;
		}
	}

	u = result.length;
	v = result[u - 1];

	while (u-- > 0) {
		result[u] = v;
		v = p[v];
	}

	return result;
}

// based on https://github.com/Olical/binary-search
function binaryFindLarger(item, list) {
	var min = 0;
	var max = list.length - 1;
	var guess;

	var bitwise = (max <= 2147483647) ? true : false;
	if (bitwise) {
		while (min <= max) {
			guess = (min + max) >> 1;
			if (list[guess] === item) { return guess; }
			else {
				if (list[guess] < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	} else {
		while (min <= max) {
			guess = Math.floor((min + max) / 2);
			if (list[guess] === item) { return guess; }
			else {
				if (list[guess] < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	}

	return (min == list.length) ? null : min;

//	return -1;
}

function isEvProp(name) {
	return name[0] === "o" && name[1] === "n";
}

function isSplProp(name) {
	return name[0] === "_";
}

function isStyleProp(name) {
	return name === "style";
}

function repaint(node) {
	node && node.el && node.el.offsetHeight;
}

function isHydrated(vm) {
	return vm.node != null && vm.node.el != null;
}

// tests interactive props where real val should be compared
function isDynProp(tag, attr) {
//	switch (tag) {
//		case "input":
//		case "textarea":
//		case "select":
//		case "option":
			switch (attr) {
				case "value":
				case "checked":
				case "selected":
//				case "selectedIndex":
					return true;
			}
//	}

	return false;
}

function getVm(n) {
	n = n || emptyObj;
	while (n.vm == null && n.parent)
		{ n = n.parent; }
	return n.vm;
}

function VNode() {}

var VNodeProto = VNode.prototype = {
	constructor: VNode,

	type:	null,

	vm:		null,

	// all this stuff can just live in attrs (as defined) just have getters here for it
	key:	null,
	ref:	null,
	data:	null,
	hooks:	null,
	ns:		null,

	el:		null,

	tag:	null,
	attrs:	null,
	body:	null,

	flags:	0,

	_class:	null,
	_diff:	null,

	// pending removal on promise resolution
	_dead:	false,
	// part of longest increasing subsequence?
	_lis:	false,

	idx:	null,
	parent:	null,

	/*
	// break out into optional fluent module
	key:	function(val) { this.key	= val; return this; },
	ref:	function(val) { this.ref	= val; return this; },		// deep refs
	data:	function(val) { this.data	= val; return this; },
	hooks:	function(val) { this.hooks	= val; return this; },		// h("div").hooks()
	html:	function(val) { this.html	= true; return this.body(val); },

	body:	function(val) { this.body	= val; return this; },
	*/
};

function defineText(body) {
	var node = new VNode;
	node.type = TEXT;
	node.body = body;
	return node;
}

var isStream = function() { return false };

var streamVal = noop;
var subStream = noop;
var unsubStream = noop;

function streamCfg(cfg) {
	isStream	= cfg.is;
	streamVal	= cfg.val;
	subStream	= cfg.sub;
	unsubStream	= cfg.unsub;
}

// creates a one-shot self-ending stream that redraws target vm
// TODO: if it's already registered by any parent vm, then ignore to avoid simultaneous parent & child refresh
function hookStream(s, vm) {
	var redrawStream = subStream(s, function (val) {
		// this "if" ignores the initial firing during subscription (there's no redrawable vm yet)
		if (redrawStream) {
			// if vm fully is formed (or mounted vm.node.el?)
			if (vm.node != null)
				{ vm.redraw(); }
			unsubStream(redrawStream);
		}
	});

	return streamVal(s);
}

function hookStream2(s, vm) {
	var redrawStream = subStream(s, function (val) {
		// this "if" ignores the initial firing during subscription (there's no redrawable vm yet)
		if (redrawStream) {
			// if vm fully is formed (or mounted vm.node.el?)
			if (vm.node != null)
				{ vm.redraw(); }
		}
	});

	return redrawStream;
}

var tagCache = {};

var RE_ATTRS = /\[(\w+)(?:=(\w+))?\]/g;

function cssTag(raw) {
	{
		var cached = tagCache[raw];

		if (cached == null) {
			var tag, id, cls, attr;

			tagCache[raw] = cached = {
				tag:	(tag	= raw.match( /^[-\w]+/))		?	tag[0]						: "div",
				id:		(id		= raw.match( /#([-\w]+)/))		? 	id[1]						: null,
				class:	(cls	= raw.match(/\.([-\w.]+)/))		?	cls[1].replace(/\./g, " ")	: null,
				attrs:	null,
			};

			while (attr = RE_ATTRS.exec(raw)) {
				if (cached.attrs == null)
					{ cached.attrs = {}; }
				cached.attrs[attr[1]] = attr[2] || "";
			}
		}

		return cached;
	}
}

var DEVMODE = {
	syncRedraw: false,

	warnings: true,

	verbose: true,

	mutations: true,

	DATA_REPLACED: function(vm, oldData, newData) {
		if (isFunc(vm.view) && vm.view.length > 1) {
			var msg = "A view's data was replaced. The data originally passed to the view closure during init is now stale. You may want to rely only on the data passed to render() or vm.data.";
			return [msg, vm, oldData, newData];
		}
	},

	UNKEYED_INPUT: function(vnode) {
		return ["Unkeyed <input> detected. Consider adding a name, id, _key, or _ref attr to avoid accidental DOM recycling between different <input> types.", vnode];
	},

	UNMOUNTED_REDRAW: function(vm) {
		return ["Invoking redraw() of an unmounted (sub)view may result in errors.", vm];
	},

	INLINE_HANDLER: function(vnode, oval, nval) {
		return ["Anonymous event handlers get re-bound on each redraw, consider defining them outside of templates for better reuse.", vnode, oval, nval];
	},

	MISMATCHED_HANDLER: function(vnode, oval, nval) {
		return ["Patching of different event handler styles is not fully supported for performance reasons. Ensure that handlers are defined using the same style.", vnode, oval, nval];
	},

	SVG_WRONG_FACTORY: function(vnode) {
		return ["<svg> defined using domvm.defineElement. Use domvm.defineSvgElement for <svg> & child nodes.", vnode];
	},

	FOREIGN_ELEMENT: function(el) {
		return ["domvm stumbled upon an element in its DOM that it didn't create, which may be problematic. You can inject external elements into the vtree using domvm.injectElement.", el];
	},

	REUSED_ATTRS: function(vnode) {
		return ["Attrs objects may only be reused if they are truly static, as a perf optimization. Mutating & reusing them will have no effect on the DOM due to 0 diff.", vnode];
	},

	ADJACENT_TEXT: function(vnode, text1, text2) {
		return ["Adjacent text nodes will be merged. Consider concatentating them yourself in the template for improved perf.", vnode, text1, text2];
	},

	ARRAY_FLATTENED: function(vnode, array) {
		return ["Arrays within templates will be flattened. When they are leading or trailing, it's easy and more performant to just .concat() them in the template.", vnode, array];
	},

	ALREADY_HYDRATED: function(vm) {
		return ["A child view failed to mount because it was already hydrated. Make sure not to invoke vm.redraw() or vm.update() on unmounted views.", vm];
	},

	ATTACH_IMPLICIT_TBODY: function(vnode, vchild) {
		return ["<table><tr> was detected in the vtree, but the DOM will be <table><tbody><tr> after HTML's implicit parsing. You should create the <tbody> vnode explicitly to avoid SSR/attach() failures.", vnode, vchild];
	}
};

function devNotify(key, args) {
	if (DEVMODE.warnings && isFunc(DEVMODE[key])) {
		var msgArgs = DEVMODE[key].apply(null, args);

		if (msgArgs) {
			msgArgs[0] = key + ": " + (DEVMODE.verbose ? msgArgs[0] : "");
			console.warn.apply(console, msgArgs);
		}
	}
}

// (de)optimization flags

// forces slow bottom-up removeChild to fire deep willRemove/willUnmount hooks,
var DEEP_REMOVE = 1;
// prevents inserting/removing/reordering of children
var FIXED_BODY = 2;
// enables fast keyed lookup of children via binary search, expects homogeneous keyed body
var KEYED_LIST = 4;
// indicates an vnode match/diff/recycler function for body
var LAZY_LIST = 8;

function initElementNode(tag, attrs, body, flags) {
	var node = new VNode;

	node.type = ELEMENT;

	if (isSet(flags))
		{ node.flags = flags; }

	node.attrs = attrs;

	var parsed = cssTag(tag);

	node.tag = parsed.tag;

	// meh, weak assertion, will fail for id=0, etc.
	if (parsed.id || parsed.class || parsed.attrs) {
		var p = node.attrs || {};

		if (parsed.id && !isSet(p.id))
			{ p.id = parsed.id; }

		if (parsed.class) {
			node._class = parsed.class;		// static class
			p.class = parsed.class + (isSet(p.class) ? (" " + p.class) : "");
		}
		if (parsed.attrs) {
			for (var key in parsed.attrs)
				{ if (!isSet(p[key]))
					{ p[key] = parsed.attrs[key]; } }
		}

//		if (node.attrs !== p)
			node.attrs = p;
	}

	var mergedAttrs = node.attrs;

	if (isSet(mergedAttrs)) {
		if (isSet(mergedAttrs._key))
			{ node.key = mergedAttrs._key; }

		if (isSet(mergedAttrs._ref))
			{ node.ref = mergedAttrs._ref; }

		if (isSet(mergedAttrs._hooks))
			{ node.hooks = mergedAttrs._hooks; }

		if (isSet(mergedAttrs._data))
			{ node.data = mergedAttrs._data; }

		if (isSet(mergedAttrs._flags))
			{ node.flags = mergedAttrs._flags; }

		if (!isSet(node.key)) {
			if (isSet(node.ref))
				{ node.key = node.ref; }
			else if (isSet(mergedAttrs.id))
				{ node.key = mergedAttrs.id; }
			else if (isSet(mergedAttrs.name))
				{ node.key = mergedAttrs.name + (mergedAttrs.type === "radio" || mergedAttrs.type === "checkbox" ? mergedAttrs.value : ""); }
		}
	}

	if (body != null)
		{ node.body = body; }

	{
		if (node.tag === "svg") {
			setTimeout(function() {
				node.ns == null && devNotify("SVG_WRONG_FACTORY", [node]);
			}, 16);
		}
		// todo: attrs.contenteditable === "true"?
		else if (/^(?:input|textarea|select|datalist|keygen|output)$/.test(node.tag) && node.key == null)
			{ devNotify("UNKEYED_INPUT", [node]); }
	}

	return node;
}

function setRef(vm, name, node) {
	var path = ["refs"].concat(name.split("."));
	deepSet(vm, path, node);
}

function setDeepRemove(node) {
	while (node = node.parent)
		{ node.flags |= DEEP_REMOVE; }
}

// vnew, vold
function preProc(vnew, parent, idx, ownVm) {
	if (vnew.type === VMODEL || vnew.type === VVIEW)
		{ return; }

	vnew.parent = parent;
	vnew.idx = idx;
	vnew.vm = ownVm;

	if (vnew.ref != null)
		{ setRef(getVm(vnew), vnew.ref, vnew); }

	var nh = vnew.hooks,
		vh = ownVm && ownVm.hooks;

	if (nh && (nh.willRemove || nh.didRemove) ||
		vh && (vh.willUnmount || vh.didUnmount))
		{ setDeepRemove(vnew); }

	if (isArr(vnew.body))
		{ preProcBody(vnew); }
	else {
		if (isStream(vnew.body))
			{ vnew.body = hookStream(vnew.body, getVm(vnew)); }
	}
}

function preProcBody(vnew) {
	var body = vnew.body;

	for (var i = 0; i < body.length; i++) {
		var node2 = body[i];

		// remove false/null/undefined
		if (node2 === false || node2 == null)
			{ body.splice(i--, 1); }
		// flatten arrays
		else if (isArr(node2)) {
			{
				if (i === 0 || i === body.length - 1)
					{ devNotify("ARRAY_FLATTENED", [vnew, node2]); }
			}
			insertArr(body, node2, i--, 1);
		}
		else {
			if (node2.type == null)
				{ body[i] = node2 = defineText(""+node2); }

			if (node2.type === TEXT) {
				// remove empty text nodes
				if (node2.body == null || node2.body === "")
					{ body.splice(i--, 1); }
				// merge with previous text node
				else if (i > 0 && body[i-1].type === TEXT) {
					{
						devNotify("ADJACENT_TEXT", [vnew, body[i-1].body, node2.body]);
					}
					body[i-1].body += node2.body;
					body.splice(i--, 1);
				}
				else
					{ preProc(node2, vnew, i, null); }
			}
			else
				{ preProc(node2, vnew, i, null); }
		}
	}
}

var unitlessProps = {
	animationIterationCount: true,
	boxFlex: true,
	boxFlexGroup: true,
	boxOrdinalGroup: true,
	columnCount: true,
	flex: true,
	flexGrow: true,
	flexPositive: true,
	flexShrink: true,
	flexNegative: true,
	flexOrder: true,
	gridRow: true,
	gridColumn: true,
	order: true,
	lineClamp: true,

	borderImageOutset: true,
	borderImageSlice: true,
	borderImageWidth: true,
	fontWeight: true,
	lineHeight: true,
	opacity: true,
	orphans: true,
	tabSize: true,
	widows: true,
	zIndex: true,
	zoom: true,

	fillOpacity: true,
	floodOpacity: true,
	stopOpacity: true,
	strokeDasharray: true,
	strokeDashoffset: true,
	strokeMiterlimit: true,
	strokeOpacity: true,
	strokeWidth: true
};

function autoPx(name, val) {
	{
		// typeof val === 'number' is faster but fails for numeric strings
		return !isNaN(val) && !unitlessProps[name] ? (val + "px") : val;
	}
}

// assumes if styles exist both are objects or both are strings
function patchStyle(n, o) {
	var ns =     (n.attrs || emptyObj).style;
	var os = o ? (o.attrs || emptyObj).style : null;

	// replace or remove in full
	if (ns == null || isVal(ns))
		{ n.el.style.cssText = ns; }
	else {
		for (var nn in ns) {
			var nv = ns[nn];

			{
				if (isStream(nv))
					{ nv = hookStream(nv, getVm(n)); }
			}

			if (os == null || nv != null && nv !== os[nn])
				{ n.el.style[nn] = autoPx(nn, nv); }
		}

		// clean old
		if (os) {
			for (var on in os) {
				if (ns[on] == null)
					{ n.el.style[on] = ""; }
			}
		}
	}
}

var didQueue = [];

function fireHook(hooks, name, o, n, immediate) {
	if (hooks != null) {
		var fn = o.hooks[name];

		if (fn) {
			if (name[0] === "d" && name[1] === "i" && name[2] === "d") {	// did*
				//	console.log(name + " should queue till repaint", o, n);
				immediate ? repaint(o.parent) && fn(o, n) : didQueue.push([fn, o, n]);
			}
			else {		// will*
				//	console.log(name + " may delay by promise", o, n);
				return fn(o, n);		// or pass  done() resolver
			}
		}
	}
}

function drainDidHooks(vm) {
	if (didQueue.length) {
		repaint(vm.node);

		var item;
		while (item = didQueue.shift())
			{ item[0](item[1], item[2]); }
	}
}

var doc = ENV_DOM ? document : null;

function closestVNode(el) {
	while (el._node == null)
		{ el = el.parentNode; }
	return el._node;
}

function createElement(tag, ns) {
	if (ns != null)
		{ return doc.createElementNS(ns, tag); }
	return doc.createElement(tag);
}

function createTextNode(body) {
	return doc.createTextNode(body);
}

function createComment(body) {
	return doc.createComment(body);
}

// ? removes if !recycled
function nextSib(sib) {
	return sib.nextSibling;
}

// ? removes if !recycled
function prevSib(sib) {
	return sib.previousSibling;
}

// TODO: this should collect all deep proms from all hooks and return Promise.all()
function deepNotifyRemove(node) {
	var vm = node.vm;

	var wuRes = vm != null && fireHook(vm.hooks, "willUnmount", vm, vm.data);

	var wrRes = fireHook(node.hooks, "willRemove", node);

	if ((node.flags & DEEP_REMOVE) === DEEP_REMOVE && isArr(node.body)) {
		for (var i = 0; i < node.body.length; i++)
			{ deepNotifyRemove(node.body[i]); }
	}

	return wuRes || wrRes;
}

function _removeChild(parEl, el, immediate) {
	var node = el._node, vm = node.vm;

	if (isArr(node.body)) {
		if ((node.flags & DEEP_REMOVE) === DEEP_REMOVE) {
			for (var i = 0; i < node.body.length; i++)
				{ _removeChild(el, node.body[i].el); }
		}
		else
			{ deepUnref(node); }
	}

	delete el._node;

	parEl.removeChild(el);

	fireHook(node.hooks, "didRemove", node, null, immediate);

	if (vm != null) {
		fireHook(vm.hooks, "didUnmount", vm, vm.data, immediate);
		vm.node = null;
	}
}

// todo: should delay parent unmount() by returning res prom?
function removeChild(parEl, el) {
	var node = el._node;

	// already marked for removal
	if (node._dead) { return; }

	var res = deepNotifyRemove(node);

	if (res != null && isProm(res)) {
		node._dead = true;
		res.then(curry(_removeChild, [parEl, el, true]));
	}
	else
		{ _removeChild(parEl, el); }
}

function deepUnref(node) {
	var obody = node.body;

	for (var i = 0; i < obody.length; i++) {
		var o2 = obody[i];
		delete o2.el._node;

		if (o2.vm != null)
			{ o2.vm.node = null; }

		if (isArr(o2.body))
			{ deepUnref(o2); }
	}
}

function clearChildren(parent) {
	var parEl = parent.el;

	if ((parent.flags & DEEP_REMOVE) === 0) {
		isArr(parent.body) && deepUnref(parent);
		parEl.textContent = null;
	}
	else {
		var el = parEl.firstChild;

		do {
			var next = nextSib(el);
			removeChild(parEl, el);
		} while (el = next);
	}
}

// todo: hooks
function insertBefore(parEl, el, refEl) {
	var node = el._node, inDom = el.parentNode != null;

	// el === refEl is asserted as a no-op insert called to fire hooks
	var vm = (el === refEl || !inDom) ? node.vm : null;

	if (vm != null)
		{ fireHook(vm.hooks, "willMount", vm, vm.data); }

	fireHook(node.hooks, inDom ? "willReinsert" : "willInsert", node);
	parEl.insertBefore(el, refEl);
	fireHook(node.hooks, inDom ? "didReinsert" : "didInsert", node);

	if (vm != null)
		{ fireHook(vm.hooks, "didMount", vm, vm.data); }
}

function insertAfter(parEl, el, refEl) {
	insertBefore(parEl, el, refEl ? nextSib(refEl) : null);
}

var onemit = {};

function emitCfg(cfg) {
	assignObj(onemit, cfg);
}

function emit(evName) {
	var targ = this,
		src = targ;

	var args = sliceArgs(arguments, 1).concat(src, src.data);

	do {
		var evs = targ.onemit;
		var fn = evs ? evs[evName] : null;

		if (fn) {
			fn.apply(targ, args);
			break;
		}
	} while (targ = targ.parent());

	if (onemit[evName])
		{ onemit[evName].apply(targ, args); }
}

var onevent = noop;

function config(newCfg) {
	onevent = newCfg.onevent || onevent;

	{
		if (newCfg.onemit)
			{ emitCfg(newCfg.onemit); }
	}

	{
		if (newCfg.stream)
			{ streamCfg(newCfg.stream); }
	}
}

function bindEv(el, type, fn) {
	el[type] = fn;
}

function exec(fn, args, e, node, vm) {
	var out = fn.apply(vm, args.concat([e, node, vm, vm.data]));

	// should these respect out === false?
	vm.onevent(e, node, vm, vm.data, args);
	onevent.call(null, e, node, vm, vm.data, args);

	if (out === false) {
		e.preventDefault();
		e.stopPropagation();
	}
}

function handle(e) {
	var node = closestVNode(e.target);
	var vm = getVm(node);

	var evDef = e.currentTarget._node.attrs["on" + e.type], fn, args;

	if (isArr(evDef)) {
		fn = evDef[0];
		args = evDef.slice(1);
		exec(fn, args, e, node, vm);
	}
	else {
		for (var sel in evDef) {
			if (e.target.matches(sel)) {
				var evDef2 = evDef[sel];

				if (isArr(evDef2)) {
					fn = evDef2[0];
					args = evDef2.slice(1);
				}
				else {
					fn = evDef2;
					args = [];
				}

				exec(fn, args, e, node, vm);
			}
		}
	}
}

function patchEvent(node, name, nval, oval) {
	if (nval === oval)
		{ return; }

	{
		if (isFunc(nval) && isFunc(oval) && oval.name == nval.name)
			{ devNotify("INLINE_HANDLER", [node, oval, nval]); }

		if (oval != null && nval != null &&
			(
				isArr(oval) != isArr(nval) ||
				isPlainObj(oval) != isPlainObj(nval) ||
				isFunc(oval) != isFunc(nval)
			)
		) { devNotify("MISMATCHED_HANDLER", [node, oval, nval]); }
	}

	var el = node.el;

	if (nval == null || isFunc(nval))
		{ bindEv(el, name, nval); }
	else if (oval == null)
		{ bindEv(el, name, handle); }
}

function remAttr(node, name, asProp) {
	if (name[0] === ".") {
		name = name.substr(1);
		asProp = true;
	}

	if (asProp)
		{ node.el[name] = ""; }
	else
		{ node.el.removeAttribute(name); }
}

// setAttr
// diff, ".", "on*", bool vals, skip _*, value/checked/selected selectedIndex
function setAttr(node, name, val, asProp, initial) {
	var el = node.el;

	if (val == null)
		{ !initial && remAttr(node, name, false); }		// will also removeAttr of style: null
	else if (node.ns != null)
		{ el.setAttribute(name, val); }
	else if (name === "class")
		{ el.className = val; }
	else if (name === "id" || typeof val === "boolean" || asProp)
		{ el[name] = val; }
	else if (name[0] === ".")
		{ el[name.substr(1)] = val; }
	else
		{ el.setAttribute(name, val); }
}

function patchAttrs(vnode, donor, initial) {
	var nattrs = vnode.attrs || emptyObj;
	var oattrs = donor.attrs || emptyObj;

	if (nattrs === oattrs) {
		{ devNotify("REUSED_ATTRS", [vnode]); }
	}
	else {
		for (var key in nattrs) {
			var nval = nattrs[key];
			var isDyn = isDynProp(vnode.tag, key);
			var oval = isDyn ? vnode.el[key] : oattrs[key];

			{
				if (isStream(nval))
					{ nattrs[key] = nval = hookStream(nval, getVm(vnode)); }
			}

			if (nval === oval) {}
			else if (isStyleProp(key))
				{ patchStyle(vnode, donor); }
			else if (isSplProp(key)) {}
			else if (isEvProp(key))
				{ patchEvent(vnode, key, nval, oval); }
			else
				{ setAttr(vnode, key, nval, isDyn, initial); }
		}

		// TODO: bench style.cssText = "" vs removeAttribute("style")
		for (var key in oattrs) {
			!(key in nattrs) &&
			!isSplProp(key) &&
			remAttr(vnode, key, isDynProp(vnode.tag, key) || isEvProp(key));
		}
	}
}

function createView(view, data, key, opts) {
	if (view.type === VVIEW) {
		data	= view.data;
		key		= view.key;
		opts	= view.opts;
		view	= view.view;
	}

	return new ViewModel(view, data, key, opts);
}

//import { XML_NS, XLINK_NS } from './defineSvgElement';
function hydrateBody(vnode) {
	for (var i = 0; i < vnode.body.length; i++) {
		var vnode2 = vnode.body[i];
		var type2 = vnode2.type;

		// ELEMENT,TEXT,COMMENT
		if (type2 <= COMMENT)
			{ insertBefore(vnode.el, hydrate(vnode2)); }		// vnode.el.appendChild(hydrate(vnode2))
		else if (type2 === VVIEW) {
			var vm = createView(vnode2.view, vnode2.data, vnode2.key, vnode2.opts)._redraw(vnode, i, false);		// todo: handle new data updates
			type2 = vm.node.type;
			insertBefore(vnode.el, hydrate(vm.node));
		}
		else if (type2 === VMODEL) {
			var vm = vnode2.vm;
			vm._redraw(vnode, i);					// , false
			type2 = vm.node.type;
			insertBefore(vnode.el, vm.node.el);		// , hydrate(vm.node)
		}
	}
}

//  TODO: DRY this out. reusing normal patch here negatively affects V8's JIT
function hydrate(vnode, withEl) {
	if (vnode.el == null) {
		if (vnode.type === ELEMENT) {
			vnode.el = withEl || createElement(vnode.tag, vnode.ns);

		//	if (vnode.tag === "svg")
		//		vnode.el.setAttributeNS(XML_NS, 'xmlns:xlink', XLINK_NS);

			if (vnode.attrs != null)
				{ patchAttrs(vnode, emptyObj, true); }

			if ((vnode.flags & LAZY_LIST) === LAZY_LIST)	// vnode.body instanceof LazyList
				{ vnode.body.body(vnode); }

			if (isArr(vnode.body))
				{ hydrateBody(vnode); }
			else if (vnode.body != null && vnode.body !== "")
				{ vnode.el.textContent = vnode.body; }
		}
		else if (vnode.type === TEXT)
			{ vnode.el = withEl || createTextNode(vnode.body); }
		else if (vnode.type === COMMENT)
			{ vnode.el = withEl || createComment(vnode.body); }
	}

	vnode.el._node = vnode;

	return vnode.el;
}

// prevent GCC from inlining some large funcs (which negatively affects Chrome's JIT)
//window.syncChildren = syncChildren;
window.lisMove = lisMove;

function nextNode(node, body) {
	return body[node.idx + 1];
}

function prevNode(node, body) {
	return body[node.idx - 1];
}

function parentNode(node) {
	return node.parent;
}

var BREAK = 1;
var BREAK_ALL = 2;

function syncDir(advSib, advNode, insert, sibName, nodeName, invSibName, invNodeName, invInsert) {
	return function(node, parEl, body, state, convTest, lis) {
		var sibNode, tmpSib;

		if (state[sibName] != null) {
			// skip dom elements not created by domvm
			if ((sibNode = state[sibName]._node) == null) {
				{ devNotify("FOREIGN_ELEMENT", [state[sibName]]); }

				state[sibName] = advSib(state[sibName]);
				return;
			}

			if (parentNode(sibNode) !== node) {
				tmpSib = advSib(state[sibName]);
				sibNode.vm != null ? sibNode.vm.unmount(true) : removeChild(parEl, state[sibName]);
				state[sibName] = tmpSib;
				return;
			}
		}

		if (state[nodeName] == convTest)
			{ return BREAK_ALL; }
		else if (state[nodeName].el == null) {
			insert(parEl, hydrate(state[nodeName]), state[sibName]);	// should lis be updated here?
			state[nodeName] = advNode(state[nodeName], body);		// also need to advance sib?
		}
		else if (state[nodeName].el === state[sibName]) {
			state[nodeName] = advNode(state[nodeName], body);
			state[sibName] = advSib(state[sibName]);
		}
		// head->tail or tail->head
		else if (!lis && sibNode === state[invNodeName]) {
			tmpSib = state[sibName];
			state[sibName] = advSib(tmpSib);
			invInsert(parEl, tmpSib, state[invSibName]);
			state[invSibName] = tmpSib;
		}
		else {
			{
				if (state[nodeName].vm != null)
					{ devNotify("ALREADY_HYDRATED", [state[nodeName].vm]); }
			}

			if (lis && state[sibName] != null)
				{ return lisMove(advSib, advNode, insert, sibName, nodeName, parEl, body, sibNode, state); }

			return BREAK;
		}
	};
}

function lisMove(advSib, advNode, insert, sibName, nodeName, parEl, body, sibNode, state) {
	if (sibNode._lis) {
		insert(parEl, state[nodeName].el, state[sibName]);
		state[nodeName] = advNode(state[nodeName], body);
	}
	else {
		// find closest tomb
		var t = binaryFindLarger(sibNode.idx, state.tombs);
		sibNode._lis = true;
		var tmpSib = advSib(state[sibName]);
		insert(parEl, state[sibName], t != null ? body[state.tombs[t]].el : t);

		if (t == null)
			{ state.tombs.push(sibNode.idx); }
		else
			{ state.tombs.splice(t, 0, sibNode.idx); }

		state[sibName] = tmpSib;
	}
}

var syncLft = syncDir(nextSib, nextNode, insertBefore, "lftSib", "lftNode", "rgtSib", "rgtNode", insertAfter);
var syncRgt = syncDir(prevSib, prevNode, insertAfter, "rgtSib", "rgtNode", "lftSib", "lftNode", insertBefore);

function syncChildren(node, donor) {
	var obody	= donor.body,
		parEl	= node.el,
		body	= node.body,
		state = {
			lftNode:	body[0],
			rgtNode:	body[body.length - 1],
			lftSib:		((obody)[0] || emptyObj).el,
			rgtSib:		(obody[obody.length - 1] || emptyObj).el,
		};

	converge:
	while (1) {
//		from_left:
		while (1) {
			var l = syncLft(node, parEl, body, state, null, false);
			if (l === BREAK) { break; }
			if (l === BREAK_ALL) { break converge; }
		}

//		from_right:
		while (1) {
			var r = syncRgt(node, parEl, body, state, state.lftNode, false);
			if (r === BREAK) { break; }
			if (r === BREAK_ALL) { break converge; }
		}

		sortDOM(node, parEl, body, state);
		break;
	}
}

// TODO: also use the state.rgtSib and state.rgtNode bounds, plus reduce LIS range
function sortDOM(node, parEl, body, state) {
	var kids = Array.prototype.slice.call(parEl.childNodes);
	var domIdxs = [];

	for (var k = 0; k < kids.length; k++) {
		var n = kids[k]._node;

		if (n.parent === node)
			{ domIdxs.push(n.idx); }
	}

	// list of non-movable vnode indices (already in correct order in old dom)
	var tombs = longestIncreasingSubsequence(domIdxs).map(function (i) { return domIdxs[i]; });

	for (var i = 0; i < tombs.length; i++)
		{ body[tombs[i]]._lis = true; }

	state.tombs = tombs;

	while (1) {
		var r = syncLft(node, parEl, body, state, null, true);
		if (r === BREAK_ALL) { break; }
	}
}

function alreadyAdopted(vnode) {
	return vnode.el._node.parent !== vnode.parent;
}

function takeSeqIndex(n, obody, fromIdx) {
	return obody[fromIdx];
}

function findSeqThorough(n, obody, fromIdx) {		// pre-tested isView?
	for (; fromIdx < obody.length; fromIdx++) {
		var o = obody[fromIdx];

		if (o.vm != null) {
			// match by key & viewFn || vm
			if (n.type === VVIEW && o.vm.view === n.view && o.vm.key === n.key || n.type === VMODEL && o.vm === n.vm)
				{ return o; }
		}
		else if (!alreadyAdopted(o) && n.tag === o.tag && n.type === o.type && n.key === o.key && (n.flags & ~DEEP_REMOVE) === (o.flags & ~DEEP_REMOVE))
			{ return o; }
	}

	return null;
}

function findHashKeyed(n, obody, fromIdx) {
	return obody[obody._keys[n.key]];
}

/*
// list must be a sorted list of vnodes by key
function findBinKeyed(n, list) {
	var idx = binaryKeySearch(list, n.key);
	return idx > -1 ? list[idx] : null;
}
*/

// have it handle initial hydrate? !donor?
// types (and tags if ELEM) are assumed the same, and donor exists
function patch(vnode, donor) {
	fireHook(donor.hooks, "willRecycle", donor, vnode);

	var el = vnode.el = donor.el;

	var obody = donor.body;
	var nbody = vnode.body;

	el._node = vnode;

	// "" => ""
	if (vnode.type === TEXT && nbody !== obody) {
		el.nodeValue = nbody;
		return;
	}

	if (vnode.attrs != null || donor.attrs != null)
		{ patchAttrs(vnode, donor, false); }

	// patch events

	var oldIsArr = isArr(obody);
	var newIsArr = isArr(nbody);
	var lazyList = (vnode.flags & LAZY_LIST) === LAZY_LIST;

//	var nonEqNewBody = nbody != null && nbody !== obody;

	if (oldIsArr) {
		// [] => []
		if (newIsArr || lazyList)
			{ patchChildren(vnode, donor); }
		// [] => "" | null
		else if (nbody !== obody) {
			if (nbody != null)
				{ el.textContent = nbody; }
			else
				{ clearChildren(donor); }
		}
	}
	else {
		// "" | null => []
		if (newIsArr) {
			clearChildren(donor);
			hydrateBody(vnode);
		}
		// "" | null => "" | null
		else if (nbody !== obody) {
			if (el.firstChild)
				{ el.firstChild.nodeValue = nbody; }
			else
				{ el.textContent = nbody; }
		}
	}

	fireHook(donor.hooks, "didRecycle", donor, vnode);
}

// larger qtys of KEYED_LIST children will use binary search
//const SEQ_FAILS_MAX = 100;

// TODO: modify vtree matcher to work similar to dom reconciler for keyed from left -> from right -> head/tail -> binary
// fall back to binary if after failing nri - nli > SEQ_FAILS_MAX
// while-advance non-keyed fromIdx
// [] => []
function patchChildren(vnode, donor) {
	var nbody		= vnode.body,
		nlen		= nbody.length,
		obody		= donor.body,
		olen		= obody.length,
		isLazy		= (vnode.flags & LAZY_LIST) === LAZY_LIST,
		isFixed		= (vnode.flags & FIXED_BODY) === FIXED_BODY,
		isKeyed		= (vnode.flags & KEYED_LIST) === KEYED_LIST,
		domSync		= !isFixed && vnode.type === ELEMENT,
		doFind		= true,
		find		= (
			isKeyed ? findHashKeyed :				// keyed lists/lazyLists
			isFixed || isLazy ? takeSeqIndex :		// unkeyed lazyLists and FIXED_BODY
			findSeqThorough							// more complex stuff
		);

	if (isKeyed) {
		var keys = {};
		for (var i = 0; i < obody.length; i++)
			{ keys[obody[i].key] = i; }
		obody._keys = keys;
	}

	if (domSync && nlen === 0) {
		clearChildren(donor);
		if (isLazy)
			{ vnode.body = []; }	// nbody.tpl(all);
		return;
	}

	var donor2,
		node2,
		foundIdx,
		patched = 0,
		everNonseq = false,
		fromIdx = 0;		// first unrecycled node (search head)

	if (isLazy) {
		var fnode2 = {key: null};
		var nbodyNew = Array(nlen);
	}

	for (var i = 0; i < nlen; i++) {
		if (isLazy) {
			var remake = false;
			var diffRes = null;

			if (doFind) {
				if (isKeyed)
					{ fnode2.key = nbody.key(i); }

				donor2 = find(fnode2, obody, fromIdx);
			}

			if (donor2 != null) {
                foundIdx = donor2.idx;
				diffRes = nbody.diff(i, donor2);

				// diff returns same, so cheaply adopt vnode without patching
				if (diffRes === true) {
					node2 = donor2;
					node2.parent = vnode;
					node2.idx = i;
					node2._lis = false;
				}
				// diff returns new diffVals, so generate new vnode & patch
				else
					{ remake = true; }
			}
			else
				{ remake = true; }

			if (remake) {
				node2 = nbody.tpl(i);			// what if this is a VVIEW, VMODEL, injected element?
				preProc(node2, vnode, i);

				node2._diff = diffRes != null ? diffRes : nbody.diff(i);

				if (donor2 != null)
					{ patch(node2, donor2); }
			}
			else {
				// TODO: flag tmp FIXED_BODY on unchanged nodes?

				// domSync = true;		if any idx changes or new nodes added/removed
			}

			nbodyNew[i] = node2;
		}
		else {
			var node2 = nbody[i];
			var type2 = node2.type;

			// ELEMENT,TEXT,COMMENT
			if (type2 <= COMMENT) {
				if (donor2 = doFind && find(node2, obody, fromIdx)) {
					patch(node2, donor2);
					foundIdx = donor2.idx;
				}
			}
			else if (type2 === VVIEW) {
				if (donor2 = doFind && find(node2, obody, fromIdx)) {		// update/moveTo
					foundIdx = donor2.idx;
					var vm = donor2.vm._update(node2.data, vnode, i);		// withDOM
				}
				else
					{ var vm = createView(node2.view, node2.data, node2.key, node2.opts)._redraw(vnode, i, false); }	// createView, no dom (will be handled by sync below)

				type2 = vm.node.type;
			}
			else if (type2 === VMODEL) {
				// if the injected vm has never been rendered, this vm._update() serves as the
				// initial vtree creator, but must avoid hydrating (creating .el) because syncChildren()
				// which is responsible for mounting below (and optionally hydrating), tests .el presence
				// to determine if hydration & mounting are needed
				var withDOM = isHydrated(node2.vm);

				var vm = node2.vm._update(node2.data, vnode, i, withDOM);
				type2 = vm.node.type;
			}
		}

		// found donor & during a sequential search ...at search head
		if (!isKeyed && donor2 != null) {
			if (foundIdx === fromIdx) {
				// advance head
				fromIdx++;
				// if all old vnodes adopted and more exist, stop searching
				if (fromIdx === olen && nlen > olen) {
					// short-circuit find, allow loop just create/init rest
					donor2 = null;
					doFind = false;
				}
			}
			else
				{ everNonseq = true; }

			if (olen > 100 && everNonseq && ++patched % 10 === 0)
				{ while (fromIdx < olen && alreadyAdopted(obody[fromIdx]))
					{ fromIdx++; } }
		}
	}

	// replace List w/ new body
	if (isLazy)
		{ vnode.body = nbodyNew; }

	domSync && syncChildren(vnode, donor);
}

function DOMInstr(withTime) {
	var isEdge = navigator.userAgent.indexOf("Edge") !== -1;
	var isIE = navigator.userAgent.indexOf("Trident/") !== -1;
	var getDescr = Object.getOwnPropertyDescriptor;
	var defProp = Object.defineProperty;

	var nodeProto = Node.prototype;
	var textContent = getDescr(nodeProto, "textContent");
	var nodeValue = getDescr(nodeProto, "nodeValue");

	var htmlProto = HTMLElement.prototype;
	var innerText = getDescr(htmlProto, "innerText");

	var elemProto	= Element.prototype;
	var innerHTML	= getDescr(!isIE ? elemProto : htmlProto, "innerHTML");
	var className	= getDescr(!isIE ? elemProto : htmlProto, "className");
	var id			= getDescr(!isIE ? elemProto : htmlProto, "id");

	var styleProto	= CSSStyleDeclaration.prototype;

	var cssText		= getDescr(styleProto, "cssText");

	var inpProto = HTMLInputElement.prototype;
	var areaProto = HTMLTextAreaElement.prototype;
	var selProto = HTMLSelectElement.prototype;
	var optProto = HTMLOptionElement.prototype;

	var inpChecked = getDescr(inpProto, "checked");
	var inpVal = getDescr(inpProto, "value");

	var areaVal = getDescr(areaProto, "value");

	var selVal = getDescr(selProto, "value");
	var selIndex = getDescr(selProto, "selectedIndex");

	var optSel = getDescr(optProto, "selected");

	// onclick, onkey*, etc..

	// var styleProto = CSSStyleDeclaration.prototype;
	// var setProperty = getDescr(styleProto, "setProperty");

	var origOps = {
		"document.createElement": null,
		"document.createElementNS": null,
		"document.createTextNode": null,
		"document.createComment": null,
		"document.createDocumentFragment": null,

		"DocumentFragment.prototype.insertBefore": null,		// appendChild

		"Element.prototype.appendChild": null,
		"Element.prototype.removeChild": null,
		"Element.prototype.insertBefore": null,
		"Element.prototype.replaceChild": null,
		"Element.prototype.remove": null,

		"Element.prototype.setAttribute": null,
		"Element.prototype.setAttributeNS": null,
		"Element.prototype.removeAttribute": null,
		"Element.prototype.removeAttributeNS": null,

		// assign?
		// dataset, classlist, any props like .onchange

		// .style.setProperty, .style.cssText
	};

	var counts = {};
	var start = null;

	function ctxName(opName) {
		var opPath = opName.split(".");
		var o = window;
		while (opPath.length > 1)
			{ o = o[opPath.shift()]; }

		return {ctx: o, last: opPath[0]};
	}

	for (var opName in origOps) {
		var p = ctxName(opName);

		if (origOps[opName] === null)
			{ origOps[opName] = p.ctx[p.last]; }

		(function(opName, opShort) {
			counts[opShort] = 0;
			p.ctx[opShort] = function() {
				counts[opShort]++;
				return origOps[opName].apply(this, arguments);
			};
		})(opName, p.last);
	}

	counts.textContent = 0;
	defProp(nodeProto, "textContent", {
		set: function(s) {
			counts.textContent++;
			textContent.set.call(this, s);
		},
	});

	counts.nodeValue = 0;
	defProp(nodeProto, "nodeValue", {
		set: function(s) {
			counts.nodeValue++;
			nodeValue.set.call(this, s);
		},
	});

	counts.innerText = 0;
	defProp(htmlProto, "innerText", {
		set: function(s) {
			counts.innerText++;
			innerText.set.call(this, s);
		},
	});

	counts.innerHTML = 0;
	defProp(!isIE ? elemProto : htmlProto, "innerHTML", {
		set: function(s) {
			counts.innerHTML++;
			innerHTML.set.call(this, s);
		},
	});

	counts.className = 0;
	defProp(!isIE ? elemProto : htmlProto, "className", {
		set: function(s) {
			counts.className++;
			className.set.call(this, s);
		},
	});

	counts.cssText = 0;
	defProp(styleProto, "cssText", {
		set: function(s) {
			counts.cssText++;
			cssText.set.call(this, s);
		},
	});

	counts.id = 0;
	defProp(!isIE ? elemProto : htmlProto, "id", {
		set: function(s) {
			counts.id++;
			id.set.call(this, s);
		},
	});

	counts.checked = 0;
	defProp(inpProto, "checked", {
		set: function(s) {
			counts.checked++;
			inpChecked.set.call(this, s);
		},
	});

	counts.value = 0;
	defProp(inpProto, "value", {
		set: function(s) {
			counts.value++;
			inpVal.set.call(this, s);
		},
	});

	defProp(areaProto, "value", {
		set: function(s) {
			counts.value++;
			areaVal.set.call(this, s);
		},
	});

	defProp(selProto, "value", {
		set: function(s) {
			counts.value++;
			selVal.set.call(this, s);
		},
	});

	counts.selectedIndex = 0;
	defProp(selProto, "selectedIndex", {
		set: function(s) {
			counts.selectedIndex++;
			selIndex.set.call(this, s);
		},
	});

	counts.selected = 0;
	defProp(optProto, "selected", {
		set: function(s) {
			counts.selected++;
			optSel.set.call(this, s);
		},
	});

	/*
	counts.setProperty = 0;
	defProp(styleProto, "setProperty", {
		set: function(s) {
			counts.setProperty++;
			setProperty.set.call(this, s);
		},
	});
	*/

	function reset() {
		for (var i in counts)
			{ counts[i] = 0; }
	}

	this.start = function() {
		start = +new Date;
	};

	this.end = function() {
		var _time = +new Date - start;
		start = null;
/*
		for (var opName in origOps) {
			var p = ctxName(opName);
			p.ctx[p.last] = origOps[opName];
		}

		defProp(nodeProto, "textContent", textContent);
		defProp(nodeProto, "nodeValue", nodeValue);
		defProp(htmlProto, "innerText", innerText);
		defProp(!isIE ? elemProto : htmlProto, "innerHTML", innerHTML);
		defProp(!isIE ? elemProto : htmlProto, "className", className);
		defProp(!isIE ? elemProto : htmlProto, "id", id);
		defProp(inpProto,  "checked", inpChecked);
		defProp(inpProto,  "value", inpVal);
		defProp(areaProto, "value", areaVal);
		defProp(selProto,  "value", selVal);
		defProp(selProto,  "selectedIndex", selIndex);
		defProp(optProto,  "selected", optSel);
	//	defProp(styleProto, "setProperty", setProperty);
		defProp(styleProto, "cssText", cssText);
*/
		var out = {};

		for (var i in counts)
			{ if (counts[i] > 0)
				{ out[i] = counts[i]; } }

		reset();

		if (withTime)
			{ out._time = _time; }

		return out;
	};
}

var instr = null;

{
	if (DEVMODE.mutations) {
		instr = new DOMInstr(true);
	}
}

// view + key serve as the vm's unique identity
function ViewModel(view, data, key, opts) {
	var vm = this;

	vm.view = view;
	vm.data = data;
	vm.key = key;

	{
		if (isStream(data))
			{ vm._stream = hookStream2(data, vm); }
	}

	if (opts) {
		vm.opts = opts;
		vm.config(opts);
	}

	var out = isPlainObj(view) ? view : view.call(vm, vm, data, key, opts);

	if (isFunc(out))
		{ vm.render = out; }
	else {
		vm.render = out.render;
		vm.config(out);
	}

	// these must be wrapped here since they're debounced per view
	vm._redrawAsync = raft(function (_) { return vm.redraw(true); });
	vm._updateAsync = raft(function (newData) { return vm.update(newData, true); });

	vm.init && vm.init.call(vm, vm, vm.data, vm.key, opts);
}

var ViewModelProto = ViewModel.prototype = {
	constructor: ViewModel,

	_diff:	null,	// diff cache

	init:	null,
	view:	null,
	key:	null,
	data:	null,
	state:	null,
	api:	null,
	opts:	null,
	node:	null,
	hooks:	null,
	onevent: noop,
	refs:	null,
	render:	null,

	mount: mount,
	unmount: unmount,
	config: function(opts) {
		var t = this;

		if (opts.init)
			{ t.init = opts.init; }
		if (opts.diff)
			{ t.diff = opts.diff; }
		if (opts.onevent)
			{ t.onevent = opts.onevent; }

		// maybe invert assignment order?
		if (opts.hooks)
			{ t.hooks = assignObj(t.hooks || {}, opts.hooks); }

		{
			if (opts.onemit)
				{ t.onemit = assignObj(t.onemit || {}, opts.onemit); }
		}
	},
	parent: function() {
		return getVm(this.node.parent);
	},
	root: function() {
		var p = this.node;

		while (p.parent)
			{ p = p.parent; }

		return p.vm;
	},
	redraw: function(sync) {
		{
			if (DEVMODE.syncRedraw) {
				sync = true;
			}
		}
		var vm = this;
		sync ? vm._redraw(null, null, isHydrated(vm)) : vm._redrawAsync();
		return vm;
	},
	update: function(newData, sync) {
		{
			if (DEVMODE.syncRedraw) {
				sync = true;
			}
		}
		var vm = this;
		sync ? vm._update(newData, null, null, isHydrated(vm)) : vm._updateAsync(newData);
		return vm;
	},

	_update: updateSync,
	_redraw: redrawSync,
	_redrawAsync: null,
	_updateAsync: null,
};

function mount(el, isRoot) {
	var vm = this;

	{
		if (DEVMODE.mutations)
			{ instr.start(); }
	}

	if (isRoot) {
		clearChildren({el: el, flags: 0});

		vm._redraw(null, null, false);

		// if placeholder node doesnt match root tag
		if (el.nodeName.toLowerCase() !== vm.node.tag) {
			hydrate(vm.node);
			insertBefore(el.parentNode, vm.node.el, el);
			el.parentNode.removeChild(el);
		}
		else
			{ insertBefore(el.parentNode, hydrate(vm.node, el), el); }
	}
	else {
		vm._redraw(null, null);

		if (el)
			{ insertBefore(el, vm.node.el); }
	}

	if (el)
		{ drainDidHooks(vm); }

	{
		if (DEVMODE.mutations)
			{ console.log(instr.end()); }
	}

	return vm;
}

// asSub means this was called from a sub-routine, so don't drain did* hook queue
function unmount(asSub) {
	var vm = this;

	{
		if (isStream(vm._stream))
			{ unsubStream(vm._stream); }
	}

	var node = vm.node;
	var parEl = node.el.parentNode;

	// edge bug: this could also be willRemove promise-delayed; should .then() or something to make sure hooks fire in order
	removeChild(parEl, node.el);

	if (!asSub)
		{ drainDidHooks(vm); }
}

function reParent(vm, vold, newParent, newIdx) {
	if (newParent != null) {
		newParent.body[newIdx] = vold;
		vold.idx = newIdx;
		vold.parent = newParent;
		vold._lis = false;
	}
	return vm;
}

function redrawSync(newParent, newIdx, withDOM) {
	var isRedrawRoot = newParent == null;
	var vm = this;
	var isMounted = vm.node && vm.node.el && vm.node.el.parentNode;

	{
		// was mounted (has node and el), but el no longer has parent (unmounted)
		if (isRedrawRoot && vm.node && vm.node.el && !vm.node.el.parentNode)
			{ devNotify("UNMOUNTED_REDRAW", [vm]); }

		if (isRedrawRoot && DEVMODE.mutations && isMounted)
			{ instr.start(); }
	}

	var vold = vm.node, oldDiff, newDiff;

	if (vm.diff != null) {
		oldDiff = vm._diff;
		vm._diff = newDiff = vm.diff(vm, vm.data);

		if (vold != null) {
			var cmpFn = isArr(oldDiff) ? cmpArr : cmpObj;
			var isSame = oldDiff === newDiff || cmpFn(oldDiff, newDiff);

			if (isSame)
				{ return reParent(vm, vold, newParent, newIdx); }
		}
	}

	isMounted && fireHook(vm.hooks, "willRedraw", vm, vm.data);

	var vnew = vm.render.call(vm, vm, vm.data, oldDiff, newDiff);

	if (vnew === vold)
		{ return reParent(vm, vold, newParent, newIdx); }

	// todo: test result of willRedraw hooks before clearing refs
	vm.refs = null;

	// always assign vm key to root vnode (this is a de-opt)
	if (vm.key != null && vnew.key !== vm.key)
		{ vnew.key = vm.key; }

	vm.node = vnew;

	if (newParent) {
		preProc(vnew, newParent, newIdx, vm);
		newParent.body[newIdx] = vnew;
	}
	else if (vold && vold.parent) {
		preProc(vnew, vold.parent, vold.idx, vm);
		vold.parent.body[vold.idx] = vnew;
	}
	else
		{ preProc(vnew, null, null, vm); }

	if (withDOM !== false) {
		if (vold) {
			// root node replacement
			if (vold.tag !== vnew.tag || vold.key !== vnew.key) {
				// hack to prevent the replacement from triggering mount/unmount
				vold.vm = vnew.vm = null;

				var parEl = vold.el.parentNode;
				var refEl = nextSib(vold.el);
				removeChild(parEl, vold.el);
				insertBefore(parEl, hydrate(vnew), refEl);

				// another hack that allows any higher-level syncChildren to set
				// reconciliation bounds using a live node
				vold.el = vnew.el;

				// restore
				vnew.vm = vm;
			}
			else
				{ patch(vnew, vold); }
		}
		else
			{ hydrate(vnew); }
	}

	isMounted && fireHook(vm.hooks, "didRedraw", vm, vm.data);

	if (isRedrawRoot && isMounted)
		{ drainDidHooks(vm); }

	{
		if (isRedrawRoot && DEVMODE.mutations && isMounted)
			{ console.log(instr.end()); }
	}

	return vm;
}

// this also doubles as moveTo
// TODO? @withRedraw (prevent redraw from firing)
function updateSync(newData, newParent, newIdx, withDOM) {
	var vm = this;

	if (newData != null) {
		if (vm.data !== newData) {
			{
				devNotify("DATA_REPLACED", [vm, vm.data, newData]);
			}
			fireHook(vm.hooks, "willUpdate", vm, newData);
			vm.data = newData;

			{
				if (isStream(vm._stream))
					{ unsubStream(vm._stream); }
				if (isStream(newData))
					{ vm._stream = hookStream2(newData, vm); }
			}
		}
	}

	return vm._redraw(newParent, newIdx, withDOM);
}

function defineElement(tag, arg1, arg2, flags) {
	var attrs, body;

	if (arg2 == null) {
		if (isPlainObj(arg1))
			{ attrs = arg1; }
		else
			{ body = arg1; }
	}
	else {
		attrs = arg1;
		body = arg2;
	}

	return initElementNode(tag, attrs, body, flags);
}

//export const XML_NS = "http://www.w3.org/2000/xmlns/";
var SVG_NS = "http://www.w3.org/2000/svg";

function defineSvgElement(tag, arg1, arg2, flags) {
	var n = defineElement(tag, arg1, arg2, flags);
	n.ns = SVG_NS;
	return n;
}

function defineComment(body) {
	var node = new VNode;
	node.type = COMMENT;
	node.body = body;
	return node;
}

// placeholder for declared views
function VView(view, data, key, opts) {
	this.view = view;
	this.data = data;
	this.key = key;
	this.opts = opts;
}

VView.prototype = {
	constructor: VView,

	type: VVIEW,
	view: null,
	data: null,
	key: null,
	opts: null,
};

function defineView(view, data, key, opts) {
	return new VView(view, data, key, opts);
}

// placeholder for injected ViewModels
function VModel(vm) {
	this.vm = vm;
}

VModel.prototype = {
	constructor: VModel,

	type: VMODEL,
	vm: null,
};

function injectView(vm) {
//	if (vm.node == null)
//		vm._redraw(null, null, false);

//	return vm.node;

	return new VModel(vm);
}

function injectElement(el) {
	var node = new VNode;
	node.type = ELEMENT;
	node.el = node.key = el;
	return node;
}

function lazyList(items, cfg) {
	var len = items.length;

	var self = {
		items: items,
		length: len,
		// defaults to returning item identity (or position?)
		key: function(i) {
			return cfg.key(items[i], i);
		},
		// default returns 0?
		diff: function(i, donor) {
			var newVals = cfg.diff(items[i], i);
			if (donor == null)
				{ return newVals; }
			var oldVals = donor._diff;
			var same = newVals === oldVals || isArr(oldVals) ? cmpArr(newVals, oldVals) : cmpObj(newVals, oldVals);
			return same || newVals;
		},
		tpl: function(i) {
			return cfg.tpl(items[i], i);
		},
		map: function(tpl) {
			cfg.tpl = tpl;
			return self;
		},
		body: function(vnode) {
			var nbody = Array(len);

			for (var i = 0; i < len; i++) {
				var vnode2 = self.tpl(i);

			//	if ((vnode.flags & KEYED_LIST) === KEYED_LIST && self. != null)
			//		vnode2.key = getKey(item);

				vnode2._diff = self.diff(i);			// holds oldVals for cmp

				nbody[i] = vnode2;

				// run preproc pass (should this be just preProc in above loop?) bench
				preProc(vnode2, vnode, i);
			}

			// replace List with generated body
			vnode.body = nbody;
		}
	};

	return self;
}

var nano = {
	config: config,

	ViewModel: ViewModel,
	VNode: VNode,

	createView: createView,

	defineElement: defineElement,
	defineSvgElement: defineSvgElement,
	defineText: defineText,
	defineComment: defineComment,
	defineView: defineView,

	injectView: injectView,
	injectElement: injectElement,

	lazyList: lazyList,

	FIXED_BODY: FIXED_BODY,
	DEEP_REMOVE: DEEP_REMOVE,
	KEYED_LIST: KEYED_LIST,
	LAZY_LIST: LAZY_LIST,
};

function protoPatch(n, doRepaint) {
	patch$1(this, n, doRepaint);
}

// newNode can be either {class: style: } or full new VNode
// will/didPatch hooks?
function patch$1(o, n, doRepaint) {
	if (n.type != null) {
		// no full patching of view roots, just use redraw!
		if (o.vm != null)
			{ return; }

		preProc(n, o.parent, o.idx, null);
		o.parent.body[o.idx] = n;
		patch(n, o);
		doRepaint && repaint(n);
		drainDidHooks(getVm(n));
	}
	else {
		// TODO: re-establish refs

		// shallow-clone target
		var donor = Object.create(o);
		// fixate orig attrs
		donor.attrs = assignObj({}, o.attrs);
		// assign new attrs into live targ node
		var oattrs = assignObj(o.attrs, n);
		// prepend any fixed shorthand class
		if (o._class != null) {
			var aclass = oattrs.class;
			oattrs.class = aclass != null && aclass !== "" ? o._class + " " + aclass : o._class;
		}

		patchAttrs(o, donor);

		doRepaint && repaint(o);
	}
}

VNodeProto.patch = protoPatch;

function nextSubVms(n, accum) {
	var body = n.body;

	if (isArr(body)) {
		for (var i = 0; i < body.length; i++) {
			var n2 = body[i];

			if (n2.vm != null)
				{ accum.push(n2.vm); }
			else
				{ nextSubVms(n2, accum); }
		}
	}

	return accum;
}

function defineElementSpread(tag) {
	var args = arguments;
	var len = args.length;
	var body, attrs;

	if (len > 1) {
		var bodyIdx = 1;

		if (isPlainObj(args[1])) {
			attrs = args[1];
			bodyIdx = 2;
		}

		if (len === bodyIdx + 1 && (isVal(args[bodyIdx]) || isArr(args[bodyIdx]) || attrs && (attrs._flags & LAZY_LIST) === LAZY_LIST))
			{ body = args[bodyIdx]; }
		else
			{ body = sliceArgs(args, bodyIdx); }
	}

	return initElementNode(tag, attrs, body);
}

function defineSvgElementSpread() {
	var n = defineElementSpread.apply(null, arguments);
	n.ns = SVG_NS;
	return n;
}

ViewModelProto.emit = emit;
ViewModelProto.onemit = null;

ViewModelProto.body = function() {
	return nextSubVms(this.node, []);
};

nano.defineElementSpread = defineElementSpread;
nano.defineSvgElementSpread = defineSvgElementSpread;

ViewModelProto._stream = null;

function protoAttach(el) {
	var vm = this;
	if (vm.node == null)
		{ vm._redraw(null, null, false); }

	attach(vm.node, el);

	return vm;
}

// very similar to hydrate, TODO: dry
function attach(vnode, withEl) {
	vnode.el = withEl;
	withEl._node = vnode;

	var nattrs = vnode.attrs;

	for (var key in nattrs) {
		var nval = nattrs[key];
		var isDyn = isDynProp(vnode.tag, key);

		if (isStyleProp(key) || isSplProp(key)) {}
		else if (isEvProp(key))
			{ patchEvent(vnode, key, nval); }
		else if (nval != null && isDyn)
			{ setAttr(vnode, key, nval, isDyn); }
	}

	if ((vnode.flags & LAZY_LIST) === LAZY_LIST)
		{ vnode.body.body(vnode); }

	if (isArr(vnode.body) && vnode.body.length > 0) {
		var c = withEl.firstChild;
		var i = 0;
		var v = vnode.body[i];
		do {
			if (v.type === VVIEW)
				{ v = createView(v.view, v.data, v.key, v.opts)._redraw(vnode, i, false).node; }
			else if (v.type === VMODEL)
				{ v = v.node || v._redraw(vnode, i, false).node; }

			{
				if (vnode.tag === "table" && v.tag === "tr") {
					devNotify("ATTACH_IMPLICIT_TBODY", [vnode, v]);
				}
			}

			attach(v, c);
		} while ((c = c.nextSibling) && (v = vnode.body[++i]))
	}
}

function vmProtoHtml(dynProps) {
	var vm = this;

	if (vm.node == null)
		{ vm._redraw(null, null, false); }

	return html(vm.node, dynProps);
}

function vProtoHtml(dynProps) {
	return html(this, dynProps);
}

function camelDash(val) {
	return val.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}

function styleStr(css) {
	var style = "";

	for (var pname in css) {
		if (css[pname] != null)
			{ style += camelDash(pname) + ": " + autoPx(pname, css[pname]) + '; '; }
	}

	return style;
}

function toStr(val) {
	return val == null ? '' : ''+val;
}

var voidTags = {
    area: true,
    base: true,
    br: true,
    col: true,
    command: true,
    embed: true,
    hr: true,
    img: true,
    input: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
	wbr: true
};

function escHtml(s) {
	s = toStr(s);

	for (var i = 0, out = ''; i < s.length; i++) {
		switch (s[i]) {
			case '&': out += '&amp;';  break;
			case '<': out += '&lt;';   break;
			case '>': out += '&gt;';   break;
		//	case '"': out += '&quot;'; break;
		//	case "'": out += '&#039;'; break;
		//	case '/': out += '&#x2f;'; break;
			default:  out += s[i];
		}
	}

	return out;
}

function escQuotes(s) {
	s = toStr(s);

	for (var i = 0, out = ''; i < s.length; i++)
		{ out += s[i] === '"' ? '&quot;' : s[i]; }		// also &?

	return out;
}

function eachHtml(arr, dynProps) {
	var buf = '';
	for (var i = 0; i < arr.length; i++)
		{ buf += html(arr[i], dynProps); }
	return buf;
}

var innerHTML = ".innerHTML";

function html(node, dynProps) {
	var out, style;

	switch (node.type) {
		case VVIEW:
			out = createView(node.view, node.data, node.key, node.opts).html(dynProps);
			break;
		case VMODEL:
			out = node.vm.html();
			break;
		case ELEMENT:
			if (node.el != null && node.tag == null) {
				out = node.el.outerHTML;		// pre-existing dom elements (does not currently account for any props applied to them)
				break;
			}

			var buf = "";

			buf += "<" + node.tag;

			var attrs = node.attrs,
				hasAttrs = attrs != null;

			if (hasAttrs) {
				for (var pname in attrs) {
					if (isEvProp(pname) || pname[0] === "." || pname[0] === "_" || dynProps === false && isDynProp(node.tag, pname))
						{ continue; }

					var val = attrs[pname];

					if (pname === "style" && val != null) {
						style = typeof val === "object" ? styleStr(val) : val;
						continue;
					}

					if (val === true)
						{ buf += " " + escHtml(pname) + '=""'; }
					else if (val === false) {}
					else if (val != null)
						{ buf += " " + escHtml(pname) + '="' + escQuotes(val) + '"'; }
				}

				if (style != null)
					{ buf += ' style="' + escQuotes(style.trim()) + '"'; }
			}

			// if body-less svg node, auto-close & return
			if (node.body == null && node.ns != null && node.tag !== "svg")
				{ return buf + "/>"; }
			else
				{ buf += ">"; }

			if (!voidTags[node.tag]) {
				if (hasAttrs && attrs[innerHTML] != null)
					{ buf += attrs[innerHTML]; }
				else if (isArr(node.body))
					{ buf += eachHtml(node.body, dynProps); }
				else if ((node.flags & LAZY_LIST) === LAZY_LIST) {
					node.body.body(node);
					buf += eachHtml(node.body, dynProps);
				}
				else
					{ buf += escHtml(node.body); }

				buf += "</" + node.tag + ">";
			}
			out = buf;
			break;
		case TEXT:
			out = escHtml(node.body);
			break;
		case COMMENT:
			out = "<!--" + escHtml(node.body) + "-->";
			break;
	}

	return out;
}

ViewModelProto.attach = protoAttach;

ViewModelProto.html = vmProtoHtml;
VNodeProto.html = vProtoHtml;

nano.DEVMODE = DEVMODE;

return nano;

})));
//# sourceMappingURL=domvm.dev.js.map


/***/ }),

/***/ "../node_modules/marked/lib/marked.js":
/*!********************************************!*\
  !*** ../node_modules/marked/lib/marked.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * marked - a markdown parser
 * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */

;(function(root) {
'use strict';

/**
 * Block-Level Grammar
 */

var block = {
  newline: /^\n+/,
  code: /^( {4}[^\n]+\n*)+/,
  fences: noop,
  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
  heading: /^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,
  nptable: noop,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
  html: '^ {0,3}(?:' // optional indentation
    + '<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
    + '|comment[^\\n]*(\\n+|$)' // (2)
    + '|<\\?[\\s\\S]*?\\?>\\n*' // (3)
    + '|<![A-Z][\\s\\S]*?>\\n*' // (4)
    + '|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*' // (5)
    + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)' // (6)
    + '|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=\\h*\\n)[\\s\\S]*?(?:\\n{2,}|$)' // (7) open tag
    + '|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=\\h*\\n)[\\s\\S]*?(?:\\n{2,}|$)' // (7) closing tag
    + ')',
  def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
  table: noop,
  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
  paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading| {0,3}>|<\/?(?:tag)(?: +|\n|\/?>)|<(?:script|pre|style|!--))[^\n]+)*)/,
  text: /^[^\n]+/
};

block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def)
  .replace('label', block._label)
  .replace('title', block._title)
  .getRegex();

block.bullet = /(?:[*+-]|\d+\.)/;
block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
block.item = edit(block.item, 'gm')
  .replace(/bull/g, block.bullet)
  .getRegex();

block.list = edit(block.list)
  .replace(/bull/g, block.bullet)
  .replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))')
  .replace('def', '\\n+(?=' + block.def.source + ')')
  .getRegex();

block._tag = 'address|article|aside|base|basefont|blockquote|body|caption'
  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'
  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'
  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'
  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'
  + '|track|ul';
block._comment = /<!--(?!-?>)[\s\S]*?-->/;
block.html = edit(block.html, 'i')
  .replace('comment', block._comment)
  .replace('tag', block._tag)
  .replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/)
  .getRegex();

block.paragraph = edit(block.paragraph)
  .replace('hr', block.hr)
  .replace('heading', block.heading)
  .replace('lheading', block.lheading)
  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
  .getRegex();

block.blockquote = edit(block.blockquote)
  .replace('paragraph', block.paragraph)
  .getRegex();

/**
 * Normal Block Grammar
 */

block.normal = merge({}, block);

/**
 * GFM Block Grammar
 */

block.gfm = merge({}, block.normal, {
  fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\n? *\1 *(?:\n+|$)/,
  paragraph: /^/,
  heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
});

block.gfm.paragraph = edit(block.paragraph)
  .replace('(?!', '(?!'
    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
    + block.list.source.replace('\\1', '\\3') + '|')
  .getRegex();

/**
 * GFM + Tables Block Grammar
 */

block.tables = merge({}, block.gfm, {
  nptable: /^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,
  table: /^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/
});

/**
 * Pedantic grammar
 */

block.pedantic = merge({}, block.normal, {
  html: edit(
    '^ *(?:comment *(?:\\n|\\s*$)'
    + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
    + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))')
    .replace('comment', block._comment)
    .replace(/tag/g, '(?!(?:'
      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'
      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'
      + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b')
    .getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/
});

/**
 * Block Lexer
 */

function Lexer(options) {
  this.tokens = [];
  this.tokens.links = Object.create(null);
  this.options = options || marked.defaults;
  this.rules = block.normal;

  if (this.options.pedantic) {
    this.rules = block.pedantic;
  } else if (this.options.gfm) {
    if (this.options.tables) {
      this.rules = block.tables;
    } else {
      this.rules = block.gfm;
    }
  }
}

/**
 * Expose Block Rules
 */

Lexer.rules = block;

/**
 * Static Lex Method
 */

Lexer.lex = function(src, options) {
  var lexer = new Lexer(options);
  return lexer.lex(src);
};

/**
 * Preprocessing
 */

Lexer.prototype.lex = function(src) {
  src = src
    .replace(/\r\n|\r/g, '\n')
    .replace(/\t/g, '    ')
    .replace(/\u00a0/g, ' ')
    .replace(/\u2424/g, '\n');

  return this.token(src, true);
};

/**
 * Lexing
 */

Lexer.prototype.token = function(src, top) {
  src = src.replace(/^ +$/gm, '');
  var next,
      loose,
      cap,
      bull,
      b,
      item,
      listStart,
      listItems,
      t,
      space,
      i,
      tag,
      l,
      isordered,
      istask,
      ischecked;

  while (src) {
    // newline
    if (cap = this.rules.newline.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[0].length > 1) {
        this.tokens.push({
          type: 'space'
        });
      }
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      cap = cap[0].replace(/^ {4}/gm, '');
      this.tokens.push({
        type: 'code',
        text: !this.options.pedantic
          ? rtrim(cap, '\n')
          : cap
      });
      continue;
    }

    // fences (gfm)
    if (cap = this.rules.fences.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'code',
        lang: cap[2],
        text: cap[3] || ''
      });
      continue;
    }

    // heading
    if (cap = this.rules.heading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[1].length,
        text: cap[2]
      });
      continue;
    }

    // table no leading pipe (gfm)
    if (top && (cap = this.rules.nptable.exec(src))) {
      item = {
        type: 'table',
        header: splitCells(cap[1].replace(/^ *| *\| *$/g, '')),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
      };

      if (item.header.length === item.align.length) {
        src = src.substring(cap[0].length);

        for (i = 0; i < item.align.length; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = 'right';
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = 'center';
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = 'left';
          } else {
            item.align[i] = null;
          }
        }

        for (i = 0; i < item.cells.length; i++) {
          item.cells[i] = splitCells(item.cells[i], item.header.length);
        }

        this.tokens.push(item);

        continue;
      }
    }

    // hr
    if (cap = this.rules.hr.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'hr'
      });
      continue;
    }

    // blockquote
    if (cap = this.rules.blockquote.exec(src)) {
      src = src.substring(cap[0].length);

      this.tokens.push({
        type: 'blockquote_start'
      });

      cap = cap[0].replace(/^ *> ?/gm, '');

      // Pass `top` to keep the current
      // "toplevel" state. This is exactly
      // how markdown.pl works.
      this.token(cap, top);

      this.tokens.push({
        type: 'blockquote_end'
      });

      continue;
    }

    // list
    if (cap = this.rules.list.exec(src)) {
      src = src.substring(cap[0].length);
      bull = cap[2];
      isordered = bull.length > 1;

      listStart = {
        type: 'list_start',
        ordered: isordered,
        start: isordered ? +bull : '',
        loose: false
      };

      this.tokens.push(listStart);

      // Get each top-level item.
      cap = cap[0].match(this.rules.item);

      listItems = [];
      next = false;
      l = cap.length;
      i = 0;

      for (; i < l; i++) {
        item = cap[i];

        // Remove the list item's bullet
        // so it is seen as the next token.
        space = item.length;
        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

        // Outdent whatever the
        // list item contains. Hacky.
        if (~item.indexOf('\n ')) {
          space -= item.length;
          item = !this.options.pedantic
            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
            : item.replace(/^ {1,4}/gm, '');
        }

        // Determine whether the next list item belongs here.
        // Backpedal if it does not belong in this list.
        if (this.options.smartLists && i !== l - 1) {
          b = block.bullet.exec(cap[i + 1])[0];
          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
            src = cap.slice(i + 1).join('\n') + src;
            i = l - 1;
          }
        }

        // Determine whether item is loose or not.
        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
        // for discount behavior.
        loose = next || /\n\n(?!\s*$)/.test(item);
        if (i !== l - 1) {
          next = item.charAt(item.length - 1) === '\n';
          if (!loose) loose = next;
        }

        if (loose) {
          listStart.loose = true;
        }

        // Check for task list items
        istask = /^\[[ xX]\] /.test(item);
        ischecked = undefined;
        if (istask) {
          ischecked = item[1] !== ' ';
          item = item.replace(/^\[[ xX]\] +/, '');
        }

        t = {
          type: 'list_item_start',
          task: istask,
          checked: ischecked,
          loose: loose
        };

        listItems.push(t);
        this.tokens.push(t);

        // Recurse.
        this.token(item, false);

        this.tokens.push({
          type: 'list_item_end'
        });
      }

      if (listStart.loose) {
        l = listItems.length;
        i = 0;
        for (; i < l; i++) {
          listItems[i].loose = true;
        }
      }

      this.tokens.push({
        type: 'list_end'
      });

      continue;
    }

    // html
    if (cap = this.rules.html.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: this.options.sanitize
          ? 'paragraph'
          : 'html',
        pre: !this.options.sanitizer
          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
        text: cap[0]
      });
      continue;
    }

    // def
    if (top && (cap = this.rules.def.exec(src))) {
      src = src.substring(cap[0].length);
      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
      tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
      if (!this.tokens.links[tag]) {
        this.tokens.links[tag] = {
          href: cap[2],
          title: cap[3]
        };
      }
      continue;
    }

    // table (gfm)
    if (top && (cap = this.rules.table.exec(src))) {
      item = {
        type: 'table',
        header: splitCells(cap[1].replace(/^ *| *\| *$/g, '')),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3] ? cap[3].replace(/(?: *\| *)?\n$/, '').split('\n') : []
      };

      if (item.header.length === item.align.length) {
        src = src.substring(cap[0].length);

        for (i = 0; i < item.align.length; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = 'right';
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = 'center';
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = 'left';
          } else {
            item.align[i] = null;
          }
        }

        for (i = 0; i < item.cells.length; i++) {
          item.cells[i] = splitCells(
            item.cells[i].replace(/^ *\| *| *\| *$/g, ''),
            item.header.length);
        }

        this.tokens.push(item);

        continue;
      }
    }

    // lheading
    if (cap = this.rules.lheading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[2] === '=' ? 1 : 2,
        text: cap[1]
      });
      continue;
    }

    // top-level paragraph
    if (top && (cap = this.rules.paragraph.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'paragraph',
        text: cap[1].charAt(cap[1].length - 1) === '\n'
          ? cap[1].slice(0, -1)
          : cap[1]
      });
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      // Top-level should never reach here.
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'text',
        text: cap[0]
      });
      continue;
    }

    if (src) {
      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return this.tokens;
};

/**
 * Inline-Level Grammar
 */

var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noop,
  tag: '^comment'
    + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
    + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
    + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
    + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
    + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>', // CDATA section
  link: /^!?\[(label)\]\(href(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
  nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
  strong: /^__([^\s])__(?!_)|^\*\*([^\s])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,
  em: /^_([^\s_])_(?!_)|^\*([^\s*"<\[])\*(?!\*)|^_([^\s][\s\S]*?[^\s_])_(?!_|[^\s.])|^_([^\s_][\s\S]*?[^\s])_(?!_|[^\s.])|^\*([^\s"<\[][\s\S]*?[^\s*])\*(?!\*)|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noop,
  text: /^(`+|[^`])[\s\S]*?(?=[\\<!\[`*]|\b_| {2,}\n|$)/
};

inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;

inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink)
  .replace('scheme', inline._scheme)
  .replace('email', inline._email)
  .getRegex();

inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;

inline.tag = edit(inline.tag)
  .replace('comment', block._comment)
  .replace('attribute', inline._attribute)
  .getRegex();

inline._label = /(?:\[[^\[\]]*\]|\\[\[\]]?|`[^`]*`|[^\[\]\\])*?/;
inline._href = /\s*(<(?:\\[<>]?|[^\s<>\\])*>|(?:\\[()]?|\([^\s\x00-\x1f\\]*\)|[^\s\x00-\x1f()\\])*?)/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;

inline.link = edit(inline.link)
  .replace('label', inline._label)
  .replace('href', inline._href)
  .replace('title', inline._title)
  .getRegex();

inline.reflink = edit(inline.reflink)
  .replace('label', inline._label)
  .getRegex();

/**
 * Normal Inline Grammar
 */

inline.normal = merge({}, inline);

/**
 * Pedantic Inline Grammar
 */

inline.pedantic = merge({}, inline.normal, {
  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,
  link: edit(/^!?\[(label)\]\((.*?)\)/)
    .replace('label', inline._label)
    .getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/)
    .replace('label', inline._label)
    .getRegex()
});

/**
 * GFM Inline Grammar
 */

inline.gfm = merge({}, inline.normal, {
  escape: edit(inline.escape).replace('])', '~|])').getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
  del: /^~+(?=\S)([\s\S]*?\S)~+/,
  text: edit(inline.text)
    .replace(']|', '~]|')
    .replace('|$', '|https?://|ftp://|www\\.|[a-zA-Z0-9.!#$%&\'*+/=?^_`{\\|}~-]+@|$')
    .getRegex()
});

inline.gfm.url = edit(inline.gfm.url)
  .replace('email', inline.gfm._extended_email)
  .getRegex();
/**
 * GFM + Line Breaks Inline Grammar
 */

inline.breaks = merge({}, inline.gfm, {
  br: edit(inline.br).replace('{2,}', '*').getRegex(),
  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()
});

/**
 * Inline Lexer & Compiler
 */

function InlineLexer(links, options) {
  this.options = options || marked.defaults;
  this.links = links;
  this.rules = inline.normal;
  this.renderer = this.options.renderer || new Renderer();
  this.renderer.options = this.options;

  if (!this.links) {
    throw new Error('Tokens array requires a `links` property.');
  }

  if (this.options.pedantic) {
    this.rules = inline.pedantic;
  } else if (this.options.gfm) {
    if (this.options.breaks) {
      this.rules = inline.breaks;
    } else {
      this.rules = inline.gfm;
    }
  }
}

/**
 * Expose Inline Rules
 */

InlineLexer.rules = inline;

/**
 * Static Lexing/Compiling Method
 */

InlineLexer.output = function(src, links, options) {
  var inline = new InlineLexer(links, options);
  return inline.output(src);
};

/**
 * Lexing/Compiling
 */

InlineLexer.prototype.output = function(src) {
  var out = '',
      link,
      text,
      href,
      title,
      cap,
      prevCapZero;

  while (src) {
    // escape
    if (cap = this.rules.escape.exec(src)) {
      src = src.substring(cap[0].length);
      out += cap[1];
      continue;
    }

    // autolink
    if (cap = this.rules.autolink.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[2] === '@') {
        text = escape(this.mangle(cap[1]));
        href = 'mailto:' + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      out += this.renderer.link(href, null, text);
      continue;
    }

    // url (gfm)
    if (!this.inLink && (cap = this.rules.url.exec(src))) {
      if (cap[2] === '@') {
        text = escape(cap[0]);
        href = 'mailto:' + text;
      } else {
        // do extended autolink path validation
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape(cap[0]);
        if (cap[1] === 'www.') {
          href = 'http://' + text;
        } else {
          href = text;
        }
      }
      src = src.substring(cap[0].length);
      out += this.renderer.link(href, null, text);
      continue;
    }

    // tag
    if (cap = this.rules.tag.exec(src)) {
      if (!this.inLink && /^<a /i.test(cap[0])) {
        this.inLink = true;
      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
        this.inLink = false;
      }
      if (!this.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.inRawBlock = true;
      } else if (this.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.inRawBlock = false;
      }

      src = src.substring(cap[0].length);
      out += this.options.sanitize
        ? this.options.sanitizer
          ? this.options.sanitizer(cap[0])
          : escape(cap[0])
        : cap[0];
      continue;
    }

    // link
    if (cap = this.rules.link.exec(src)) {
      src = src.substring(cap[0].length);
      this.inLink = true;
      href = cap[2];
      if (this.options.pedantic) {
        link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

        if (link) {
          href = link[1];
          title = link[3];
        } else {
          title = '';
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : '';
      }
      href = href.trim().replace(/^<([\s\S]*)>$/, '$1');
      out += this.outputLink(cap, {
        href: InlineLexer.escapes(href),
        title: InlineLexer.escapes(title)
      });
      this.inLink = false;
      continue;
    }

    // reflink, nolink
    if ((cap = this.rules.reflink.exec(src))
        || (cap = this.rules.nolink.exec(src))) {
      src = src.substring(cap[0].length);
      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = this.links[link.toLowerCase()];
      if (!link || !link.href) {
        out += cap[0].charAt(0);
        src = cap[0].substring(1) + src;
        continue;
      }
      this.inLink = true;
      out += this.outputLink(cap, link);
      this.inLink = false;
      continue;
    }

    // strong
    if (cap = this.rules.strong.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));
      continue;
    }

    // em
    if (cap = this.rules.em.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));
      continue;
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.codespan(escape(cap[2].trim(), true));
      continue;
    }

    // br
    if (cap = this.rules.br.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.br();
      continue;
    }

    // del (gfm)
    if (cap = this.rules.del.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.del(this.output(cap[1]));
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      src = src.substring(cap[0].length);
      if (this.inRawBlock) {
        out += this.renderer.text(cap[0]);
      } else {
        out += this.renderer.text(escape(this.smartypants(cap[0])));
      }
      continue;
    }

    if (src) {
      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return out;
};

InlineLexer.escapes = function(text) {
  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;
};

/**
 * Compile Link
 */

InlineLexer.prototype.outputLink = function(cap, link) {
  var href = link.href,
      title = link.title ? escape(link.title) : null;

  return cap[0].charAt(0) !== '!'
    ? this.renderer.link(href, title, this.output(cap[1]))
    : this.renderer.image(href, title, escape(cap[1]));
};

/**
 * Smartypants Transformations
 */

InlineLexer.prototype.smartypants = function(text) {
  if (!this.options.smartypants) return text;
  return text
    // em-dashes
    .replace(/---/g, '\u2014')
    // en-dashes
    .replace(/--/g, '\u2013')
    // opening singles
    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
    // closing singles & apostrophes
    .replace(/'/g, '\u2019')
    // opening doubles
    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
    // closing doubles
    .replace(/"/g, '\u201d')
    // ellipses
    .replace(/\.{3}/g, '\u2026');
};

/**
 * Mangle Links
 */

InlineLexer.prototype.mangle = function(text) {
  if (!this.options.mangle) return text;
  var out = '',
      l = text.length,
      i = 0,
      ch;

  for (; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = 'x' + ch.toString(16);
    }
    out += '&#' + ch + ';';
  }

  return out;
};

/**
 * Renderer
 */

function Renderer(options) {
  this.options = options || marked.defaults;
}

Renderer.prototype.code = function(code, lang, escaped) {
  if (this.options.highlight) {
    var out = this.options.highlight(code, lang);
    if (out != null && out !== code) {
      escaped = true;
      code = out;
    }
  }

  if (!lang) {
    return '<pre><code>'
      + (escaped ? code : escape(code, true))
      + '</code></pre>';
  }

  return '<pre><code class="'
    + this.options.langPrefix
    + escape(lang, true)
    + '">'
    + (escaped ? code : escape(code, true))
    + '</code></pre>\n';
};

Renderer.prototype.blockquote = function(quote) {
  return '<blockquote>\n' + quote + '</blockquote>\n';
};

Renderer.prototype.html = function(html) {
  return html;
};

Renderer.prototype.heading = function(text, level, raw) {
  if (this.options.headerIds) {
    return '<h'
      + level
      + ' id="'
      + this.options.headerPrefix
      + raw.toLowerCase().replace(/[^\w]+/g, '-')
      + '">'
      + text
      + '</h'
      + level
      + '>\n';
  }
  // ignore IDs
  return '<h' + level + '>' + text + '</h' + level + '>\n';
};

Renderer.prototype.hr = function() {
  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
};

Renderer.prototype.list = function(body, ordered, start) {
  var type = ordered ? 'ol' : 'ul',
      startatt = (ordered && start !== 1) ? (' start="' + start + '"') : '';
  return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
};

Renderer.prototype.listitem = function(text) {
  return '<li>' + text + '</li>\n';
};

Renderer.prototype.checkbox = function(checked) {
  return '<input '
    + (checked ? 'checked="" ' : '')
    + 'disabled="" type="checkbox"'
    + (this.options.xhtml ? ' /' : '')
    + '> ';
};

Renderer.prototype.paragraph = function(text) {
  return '<p>' + text + '</p>\n';
};

Renderer.prototype.table = function(header, body) {
  if (body) body = '<tbody>' + body + '</tbody>';

  return '<table>\n'
    + '<thead>\n'
    + header
    + '</thead>\n'
    + body
    + '</table>\n';
};

Renderer.prototype.tablerow = function(content) {
  return '<tr>\n' + content + '</tr>\n';
};

Renderer.prototype.tablecell = function(content, flags) {
  var type = flags.header ? 'th' : 'td';
  var tag = flags.align
    ? '<' + type + ' align="' + flags.align + '">'
    : '<' + type + '>';
  return tag + content + '</' + type + '>\n';
};

// span level renderer
Renderer.prototype.strong = function(text) {
  return '<strong>' + text + '</strong>';
};

Renderer.prototype.em = function(text) {
  return '<em>' + text + '</em>';
};

Renderer.prototype.codespan = function(text) {
  return '<code>' + text + '</code>';
};

Renderer.prototype.br = function() {
  return this.options.xhtml ? '<br/>' : '<br>';
};

Renderer.prototype.del = function(text) {
  return '<del>' + text + '</del>';
};

Renderer.prototype.link = function(href, title, text) {
  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
  if (href === null) {
    return text;
  }
  var out = '<a href="' + escape(href) + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += '>' + text + '</a>';
  return out;
};

Renderer.prototype.image = function(href, title, text) {
  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
  if (href === null) {
    return text;
  }

  var out = '<img src="' + href + '" alt="' + text + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += this.options.xhtml ? '/>' : '>';
  return out;
};

Renderer.prototype.text = function(text) {
  return text;
};

/**
 * TextRenderer
 * returns only the textual part of the token
 */

function TextRenderer() {}

// no need for block level renderers

TextRenderer.prototype.strong =
TextRenderer.prototype.em =
TextRenderer.prototype.codespan =
TextRenderer.prototype.del =
TextRenderer.prototype.text = function (text) {
  return text;
};

TextRenderer.prototype.link =
TextRenderer.prototype.image = function(href, title, text) {
  return '' + text;
};

TextRenderer.prototype.br = function() {
  return '';
};

/**
 * Parsing & Compiling
 */

function Parser(options) {
  this.tokens = [];
  this.token = null;
  this.options = options || marked.defaults;
  this.options.renderer = this.options.renderer || new Renderer();
  this.renderer = this.options.renderer;
  this.renderer.options = this.options;
}

/**
 * Static Parse Method
 */

Parser.parse = function(src, options) {
  var parser = new Parser(options);
  return parser.parse(src);
};

/**
 * Parse Loop
 */

Parser.prototype.parse = function(src) {
  this.inline = new InlineLexer(src.links, this.options);
  // use an InlineLexer with a TextRenderer to extract pure text
  this.inlineText = new InlineLexer(
    src.links,
    merge({}, this.options, {renderer: new TextRenderer()})
  );
  this.tokens = src.reverse();

  var out = '';
  while (this.next()) {
    out += this.tok();
  }

  return out;
};

/**
 * Next Token
 */

Parser.prototype.next = function() {
  return this.token = this.tokens.pop();
};

/**
 * Preview Next Token
 */

Parser.prototype.peek = function() {
  return this.tokens[this.tokens.length - 1] || 0;
};

/**
 * Parse Text Tokens
 */

Parser.prototype.parseText = function() {
  var body = this.token.text;

  while (this.peek().type === 'text') {
    body += '\n' + this.next().text;
  }

  return this.inline.output(body);
};

/**
 * Parse Current Token
 */

Parser.prototype.tok = function() {
  switch (this.token.type) {
    case 'space': {
      return '';
    }
    case 'hr': {
      return this.renderer.hr();
    }
    case 'heading': {
      return this.renderer.heading(
        this.inline.output(this.token.text),
        this.token.depth,
        unescape(this.inlineText.output(this.token.text)));
    }
    case 'code': {
      return this.renderer.code(this.token.text,
        this.token.lang,
        this.token.escaped);
    }
    case 'table': {
      var header = '',
          body = '',
          i,
          row,
          cell,
          j;

      // header
      cell = '';
      for (i = 0; i < this.token.header.length; i++) {
        cell += this.renderer.tablecell(
          this.inline.output(this.token.header[i]),
          { header: true, align: this.token.align[i] }
        );
      }
      header += this.renderer.tablerow(cell);

      for (i = 0; i < this.token.cells.length; i++) {
        row = this.token.cells[i];

        cell = '';
        for (j = 0; j < row.length; j++) {
          cell += this.renderer.tablecell(
            this.inline.output(row[j]),
            { header: false, align: this.token.align[j] }
          );
        }

        body += this.renderer.tablerow(cell);
      }
      return this.renderer.table(header, body);
    }
    case 'blockquote_start': {
      body = '';

      while (this.next().type !== 'blockquote_end') {
        body += this.tok();
      }

      return this.renderer.blockquote(body);
    }
    case 'list_start': {
      body = '';
      var ordered = this.token.ordered,
          start = this.token.start;

      while (this.next().type !== 'list_end') {
        body += this.tok();
      }

      return this.renderer.list(body, ordered, start);
    }
    case 'list_item_start': {
      body = '';
      var loose = this.token.loose;

      if (this.token.task) {
        body += this.renderer.checkbox(this.token.checked);
      }

      while (this.next().type !== 'list_item_end') {
        body += !loose && this.token.type === 'text'
          ? this.parseText()
          : this.tok();
      }

      return this.renderer.listitem(body);
    }
    case 'html': {
      // TODO parse inline content if parameter markdown=1
      return this.renderer.html(this.token.text);
    }
    case 'paragraph': {
      return this.renderer.paragraph(this.inline.output(this.token.text));
    }
    case 'text': {
      return this.renderer.paragraph(this.parseText());
    }
  }
};

/**
 * Helpers
 */

function escape(html, encode) {
  if (encode) {
    if (escape.escapeTest.test(html)) {
      return html.replace(escape.escapeReplace, function (ch) { return escape.replacements[ch]; });
    }
  } else {
    if (escape.escapeTestNoEncode.test(html)) {
      return html.replace(escape.escapeReplaceNoEncode, function (ch) { return escape.replacements[ch]; });
    }
  }

  return html;
}

escape.escapeTest = /[&<>"']/;
escape.escapeReplace = /[&<>"']/g;
escape.replacements = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};

escape.escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
escape.escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;

function unescape(html) {
  // explicitly match decimal, hex, and named HTML entities
  return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig, function(_, n) {
    n = n.toLowerCase();
    if (n === 'colon') return ':';
    if (n.charAt(0) === '#') {
      return n.charAt(1) === 'x'
        ? String.fromCharCode(parseInt(n.substring(2), 16))
        : String.fromCharCode(+n.substring(1));
    }
    return '';
  });
}

function edit(regex, opt) {
  regex = regex.source || regex;
  opt = opt || '';
  return {
    replace: function(name, val) {
      val = val.source || val;
      val = val.replace(/(^|[^\[])\^/g, '$1');
      regex = regex.replace(name, val);
      return this;
    },
    getRegex: function() {
      return new RegExp(regex, opt);
    }
  };
}

function cleanUrl(sanitize, base, href) {
  if (sanitize) {
    try {
      var prot = decodeURIComponent(unescape(href))
        .replace(/[^\w:]/g, '')
        .toLowerCase();
    } catch (e) {
      return null;
    }
    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
      return null;
    }
  }
  if (base && !originIndependentUrl.test(href)) {
    href = resolveUrl(base, href);
  }
  try {
    href = encodeURI(href).replace(/%25/g, '%');
  } catch (e) {
    return null;
  }
  return href;
}

function resolveUrl(base, href) {
  if (!baseUrls[' ' + base]) {
    // we can ignore everything in base after the last slash of its path component,
    // but we might need to add _that_
    // https://tools.ietf.org/html/rfc3986#section-3
    if (/^[^:]+:\/*[^/]*$/.test(base)) {
      baseUrls[' ' + base] = base + '/';
    } else {
      baseUrls[' ' + base] = rtrim(base, '/', true);
    }
  }
  base = baseUrls[' ' + base];

  if (href.slice(0, 2) === '//') {
    return base.replace(/:[\s\S]*/, ':') + href;
  } else if (href.charAt(0) === '/') {
    return base.replace(/(:\/*[^/]*)[\s\S]*/, '$1') + href;
  } else {
    return base + href;
  }
}
var baseUrls = {};
var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;

function noop() {}
noop.exec = noop;

function merge(obj) {
  var i = 1,
      target,
      key;

  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }

  return obj;
}

function splitCells(tableRow, count) {
  // ensure that every cell-delimiting pipe has a space
  // before it to distinguish it from an escaped pipe
  var row = tableRow.replace(/\|/g, function (match, offset, str) {
        var escaped = false,
            curr = offset;
        while (--curr >= 0 && str[curr] === '\\') escaped = !escaped;
        if (escaped) {
          // odd number of slashes means | is escaped
          // so we leave it alone
          return '|';
        } else {
          // add space before unescaped |
          return ' |';
        }
      }),
      cells = row.split(/ \|/),
      i = 0;

  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count) cells.push('');
  }

  for (; i < cells.length; i++) {
    // leading or trailing whitespace is ignored per the gfm spec
    cells[i] = cells[i].trim().replace(/\\\|/g, '|');
  }
  return cells;
}

// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
// /c*$/ is vulnerable to REDOS.
// invert: Remove suffix of non-c chars instead. Default falsey.
function rtrim(str, c, invert) {
  if (str.length === 0) {
    return '';
  }

  // Length of suffix matching the invert condition.
  var suffLen = 0;

  // Step left until we fail to match the invert condition.
  while (suffLen < str.length) {
    var currChar = str.charAt(str.length - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }

  return str.substr(0, str.length - suffLen);
}

/**
 * Marked
 */

function marked(src, opt, callback) {
  // throw error in case of non string input
  if (typeof src === 'undefined' || src === null) {
    throw new Error('marked(): input parameter is undefined or null');
  }
  if (typeof src !== 'string') {
    throw new Error('marked(): input parameter is of type '
      + Object.prototype.toString.call(src) + ', string expected');
  }

  if (callback || typeof opt === 'function') {
    if (!callback) {
      callback = opt;
      opt = null;
    }

    opt = merge({}, marked.defaults, opt || {});

    var highlight = opt.highlight,
        tokens,
        pending,
        i = 0;

    try {
      tokens = Lexer.lex(src, opt);
    } catch (e) {
      return callback(e);
    }

    pending = tokens.length;

    var done = function(err) {
      if (err) {
        opt.highlight = highlight;
        return callback(err);
      }

      var out;

      try {
        out = Parser.parse(tokens, opt);
      } catch (e) {
        err = e;
      }

      opt.highlight = highlight;

      return err
        ? callback(err)
        : callback(null, out);
    };

    if (!highlight || highlight.length < 3) {
      return done();
    }

    delete opt.highlight;

    if (!pending) return done();

    for (; i < tokens.length; i++) {
      (function(token) {
        if (token.type !== 'code') {
          return --pending || done();
        }
        return highlight(token.text, token.lang, function(err, code) {
          if (err) return done(err);
          if (code == null || code === token.text) {
            return --pending || done();
          }
          token.text = code;
          token.escaped = true;
          --pending || done();
        });
      })(tokens[i]);
    }

    return;
  }
  try {
    if (opt) opt = merge({}, marked.defaults, opt);
    return Parser.parse(Lexer.lex(src, opt), opt);
  } catch (e) {
    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
    if ((opt || marked.defaults).silent) {
      return '<p>An error occurred:</p><pre>'
        + escape(e.message + '', true)
        + '</pre>';
    }
    throw e;
  }
}

/**
 * Options
 */

marked.options =
marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  return marked;
};

marked.getDefaults = function () {
  return {
    baseUrl: null,
    breaks: false,
    gfm: true,
    headerIds: true,
    headerPrefix: '',
    highlight: null,
    langPrefix: 'language-',
    mangle: true,
    pedantic: false,
    renderer: new Renderer(),
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartLists: false,
    smartypants: false,
    tables: true,
    xhtml: false
  };
};

marked.defaults = marked.getDefaults();

/**
 * Expose
 */

marked.Parser = Parser;
marked.parser = Parser.parse;

marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;

marked.Lexer = Lexer;
marked.lexer = Lexer.lex;

marked.InlineLexer = InlineLexer;
marked.inlineLexer = InlineLexer.output;

marked.parse = marked;

if (true) {
  module.exports = marked;
} else {}
})(this || (typeof window !== 'undefined' ? window : global));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/process/browser.js":
/*!******************************************!*\
  !*** ../node_modules/process/browser.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../node_modules/promiz/promiz.js":
/*!****************************************!*\
  !*** ../node_modules/promiz/promiz.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, setImmediate) {(function () {
  global = this

  var queueId = 1
  var queue = {}
  var isRunningTask = false

  if (!global.setImmediate)
    global.addEventListener('message', function (e) {
      if (e.source == global){
        if (isRunningTask)
          nextTick(queue[e.data])
        else {
          isRunningTask = true
          try {
            queue[e.data]()
          } catch (e) {}

          delete queue[e.data]
          isRunningTask = false
        }
      }
    })

  function nextTick(fn) {
    if (global.setImmediate) setImmediate(fn)
    // if inside of web worker
    else if (global.importScripts) setTimeout(fn)
    else {
      queueId++
      queue[queueId] = fn
      global.postMessage(queueId, '*')
    }
  }

  Deferred.resolve = function (value) {
    if (!(this._d == 1))
      throw TypeError()

    if (value instanceof Deferred)
      return value

    return new Deferred(function (resolve) {
        resolve(value)
    })
  }

  Deferred.reject = function (value) {
    if (!(this._d == 1))
      throw TypeError()

    return new Deferred(function (resolve, reject) {
        reject(value)
    })
  }

  Deferred.all = function (arr) {
    if (!(this._d == 1))
      throw TypeError()

    if (!(arr instanceof Array))
      return Deferred.reject(TypeError())

    var d = new Deferred()

    function done(e, v) {
      if (v)
        return d.resolve(v)

      if (e)
        return d.reject(e)

      var unresolved = arr.reduce(function (cnt, v) {
        if (v && v.then)
          return cnt + 1
        return cnt
      }, 0)

      if(unresolved == 0)
        d.resolve(arr)

      arr.map(function (v, i) {
        if (v && v.then)
          v.then(function (r) {
            arr[i] = r
            done()
            return r
          }, done)
      })
    }

    done()

    return d
  }

  Deferred.race = function (arr) {
    if (!(this._d == 1))
      throw TypeError()

    if (!(arr instanceof Array))
      return Deferred.reject(TypeError())

    if (arr.length == 0)
      return new Deferred()

    var d = new Deferred()

    function done(e, v) {
      if (v)
        return d.resolve(v)

      if (e)
        return d.reject(e)

      var unresolved = arr.reduce(function (cnt, v) {
        if (v && v.then)
          return cnt + 1
        return cnt
      }, 0)

      if(unresolved == 0)
        d.resolve(arr)

      arr.map(function (v, i) {
        if (v && v.then)
          v.then(function (r) {
            done(null, r)
          }, done)
      })
    }

    done()

    return d
  }

  Deferred._d = 1


  /**
   * @constructor
   */
  function Deferred(resolver) {
    'use strict'
    if (typeof resolver != 'function' && resolver != undefined)
      throw TypeError()

    if (typeof this != 'object' || (this && this.then))
      throw TypeError()

    // states
    // 0: pending
    // 1: resolving
    // 2: rejecting
    // 3: resolved
    // 4: rejected
    var self = this,
      state = 0,
      val = 0,
      next = [],
      fn, er;

    self['promise'] = self

    self['resolve'] = function (v) {
      fn = self.fn
      er = self.er
      if (!state) {
        val = v
        state = 1

        nextTick(fire)
      }
      return self
    }

    self['reject'] = function (v) {
      fn = self.fn
      er = self.er
      if (!state) {
        val = v
        state = 2

        nextTick(fire)

      }
      return self
    }

    self['_d'] = 1

    self['then'] = function (_fn, _er) {
      if (!(this._d == 1))
        throw TypeError()

      var d = new Deferred()

      d.fn = _fn
      d.er = _er
      if (state == 3) {
        d.resolve(val)
      }
      else if (state == 4) {
        d.reject(val)
      }
      else {
        next.push(d)
      }

      return d
    }

    self['catch'] = function (_er) {
      return self['then'](null, _er)
    }

    var finish = function (type) {
      state = type || 4
      next.map(function (p) {
        state == 3 && p.resolve(val) || p.reject(val)
      })
    }

    try {
      if (typeof resolver == 'function')
        resolver(self['resolve'], self['reject'])
    } catch (e) {
      self['reject'](e)
    }

    return self

    // ref : reference to 'then' function
    // cb, ec, cn : successCallback, failureCallback, notThennableCallback
    function thennable (ref, cb, ec, cn) {
      // Promises can be rejected with other promises, which should pass through
      if (state == 2) {
        return cn()
      }
      if ((typeof val == 'object' || typeof val == 'function') && typeof ref == 'function') {
        try {

          // cnt protects against abuse calls from spec checker
          var cnt = 0
          ref.call(val, function (v) {
            if (cnt++) return
            val = v
            cb()
          }, function (v) {
            if (cnt++) return
            val = v
            ec()
          })
        } catch (e) {
          val = e
          ec()
        }
      } else {
        cn()
      }
    };

    function fire() {

      // check if it's a thenable
      var ref;
      try {
        ref = val && val.then
      } catch (e) {
        val = e
        state = 2
        return fire()
      }

      thennable(ref, function () {
        state = 1
        fire()
      }, function () {
        state = 2
        fire()
      }, function () {
        try {
          if (state == 1 && typeof fn == 'function') {
            val = fn(val)
          }

          else if (state == 2 && typeof er == 'function') {
            val = er(val)
            state = 1
          }
        } catch (e) {
          val = e
          return finish()
        }

        if (val == self) {
          val = TypeError()
          finish()
        } else thennable(ref, function () {
            finish(3)
          }, finish, function () {
            finish(state == 1 && 3)
          })

      })
    }


  }

  // Export our library object, either for node.js or as a globally scoped variable
  if (true) {
    module['exports'] = Deferred
  } else {}
})()

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../timers-browserify/main.js */ "../node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "../node_modules/setimmediate/setImmediate.js":
/*!****************************************************!*\
  !*** ../node_modules/setimmediate/setImmediate.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/timers-browserify/main.js":
/*!*************************************************!*\
  !*** ../node_modules/timers-browserify/main.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "../node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),

/***/ "../styles/richtext.scss":
/*!*******************************!*\
  !*** ../styles/richtext.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "../ts-calendar/index.ts":
/*!*******************************!*\
  !*** ../ts-calendar/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Calendar */ "../ts-calendar/sources/Calendar.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-calendar/sources/types.ts"));


/***/ }),

/***/ "../ts-calendar/sources/Calendar.ts":
/*!******************************************!*\
  !*** ../ts-calendar/sources/Calendar.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_timepicker_1 = __webpack_require__(/*! @dhx/ts-timepicker */ "../ts-timepicker/index.ts");
var helper_1 = __webpack_require__(/*! ./helper */ "../ts-calendar/sources/helper.ts");
var date_1 = __webpack_require__(/*! @dhx/ts-common/date */ "../ts-common/date.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-calendar/sources/types.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var Calendar = /** @class */ (function (_super) {
    __extends(Calendar, _super);
    function Calendar(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, core_1.extend({
            weekStart: "sunday",
            thisMonthOnly: false,
            dateFormat: window && window.dhx && window.dhx.dateFormat,
            width: "250px",
        }, config)) || this;
        _this._selected = [];
        _this.events = new events_1.EventSystem();
        _this.config.disabledDates = _this.config.disabledDates || _this.config.block; // TODO: remove suite_7.0
        _this.config.mode = _this.config.mode || _this.config.view; // TODO: remove suite_7.0
        if (!_this.config.dateFormat) {
            if (_this.config.timePicker) {
                if (_this.config.timeFormat === 12) {
                    _this.config.dateFormat = "%d/%m/%y %h:%i %A";
                }
                else {
                    _this.config.dateFormat = "%d/%m/%y %H:%i";
                }
            }
            else {
                _this.config.dateFormat = "%d/%m/%y";
            }
        }
        if (_this.config.value) {
            _this._setSelected(_this.config.value);
        }
        if (_this.config.date) {
            _this._currentDate = date_1.DateHelper.toDateObject(_this.config.date, _this.config.dateFormat);
        }
        else if (_this._getSelected()) {
            _this._currentDate = date_1.DateHelper.copy(_this._getSelected());
        }
        else {
            _this._currentDate = new Date();
        }
        switch (_this.config.mode) {
            case "month":
                _this._currentViewMode = "month";
                break;
            case "year":
                _this._currentViewMode = "year";
                break;
            default:
                _this._currentViewMode = "calendar";
        }
        _this._initHandlers();
        if (_this.config.timePicker) {
            _this._timepicker = new ts_timepicker_1.Timepicker(null, {
                timeFormat: _this.config.timeFormat,
                controls: true,
            });
            var initTime = _this._getSelected() || new Date();
            _this._timepicker.setValue(initTime);
            _this._time = _this._timepicker.getValue();
            _this._timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterClose, function () {
                _this._timepicker.setValue(_this._time);
                _this.showDate(null, "calendar");
            });
            _this._timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterApply, function () {
                var _a = _this._timepicker.getValue(true), hour = _a.hour, minute = _a.minute, AM = _a.AM;
                var oldDate = _this._getSelected();
                var newDate = date_1.DateHelper.withHoursAndMinutes(_this._getSelected() || new Date(), hour, minute, AM);
                if (_this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                    _this._selected[_this._selected.length - 1] = newDate;
                    _this.events.fire(types_1.CalendarEvents.change, [newDate, oldDate, true]);
                }
                _this._time = _this._timepicker.getValue();
                _this.showDate(null, "calendar");
            });
        }
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    Calendar.prototype.setValue = function (value) {
        if (!value || (value instanceof Array && value.length === 0)) {
            return false;
        }
        this._selected = [];
        var currentDate = value instanceof Array ? value[0] : value;
        var date = date_1.DateHelper.toDateObject(currentDate, this.config.dateFormat);
        var oldDate = date_1.DateHelper.copy(this._getSelected());
        if (!this.events.fire(types_1.CalendarEvents.beforeChange, [date, oldDate, false])) {
            return false;
        }
        this._setSelected(value);
        if (this._timepicker) {
            this._timepicker.setValue(date);
            this._time = this._timepicker.getValue();
        }
        this.showDate(this._getSelected());
        this.events.fire(types_1.CalendarEvents.change, [date, oldDate, false]);
        this.paint();
        return true;
    };
    Calendar.prototype.getValue = function (asDateObject) {
        var _this = this;
        if (asDateObject === void 0) { asDateObject = false; }
        if (!this._selected[0]) {
            return "";
        }
        if (this.config.range) {
            return asDateObject
                ? this._selected.map(function (date) { return date_1.DateHelper.copy(date); })
                : this._selected.map(function (date) { return date_1.getFormattedDate(_this.config.dateFormat, date); });
        }
        return asDateObject
            ? date_1.DateHelper.copy(this._selected[0])
            : date_1.getFormattedDate(this.config.dateFormat, this._selected[0]);
    };
    Calendar.prototype.getCurrentMode = function () {
        return this._currentViewMode;
    };
    Calendar.prototype.showDate = function (date, mode) {
        if (date) {
            this._currentDate = date_1.DateHelper.copy(date);
        }
        if (mode) {
            this._currentViewMode = mode;
        }
        this.paint();
    };
    Calendar.prototype.destructor = function () {
        this._linkedCalendar && this._unlink();
        this._timepicker && this._timepicker.destructor();
        this.events && this.events.clear();
        this.config = this.events = null;
        this._uid = this._selected = this._currentDate = this._currentViewMode = this._handlers = this._timepicker = this._time = null;
        this.unmount();
    };
    Calendar.prototype.clear = function () {
        var oldDate = this.getValue(true);
        if (this.config.timePicker) {
            this._timepicker.clear();
            this._time = this._timepicker.getValue();
        }
        this._selected = [];
        this.showDate(null, this.config.mode);
        this.events.fire(types_1.CalendarEvents.change, [this.getValue(true), oldDate, false]);
    };
    Calendar.prototype.link = function (targetCalendar) {
        var _this = this;
        if (this._linkedCalendar) {
            this._unlink();
        }
        this._linkedCalendar = targetCalendar;
        var rawLowerDate = this.getValue(true);
        var rawUpperDate = targetCalendar.getValue(true);
        var lowerDate = rawLowerDate && date_1.DateHelper.dayStart(rawLowerDate);
        var upperDate = rawUpperDate && date_1.DateHelper.dayStart(rawUpperDate);
        var getRangeClass = function (date) {
            if (date_1.DateHelper.isSameDay(upperDate, lowerDate)) {
                return null;
            }
            var positionInRange = "dhx_calendar-day--in-range";
            if (date_1.DateHelper.isSameDay(date, lowerDate)) {
                positionInRange += " dhx_calendar-day--first-date";
            }
            if (date_1.DateHelper.isSameDay(date, upperDate)) {
                positionInRange += " dhx_calendar-day--last-date";
            }
            return positionInRange;
        };
        var rangeMark = function (date) {
            if (lowerDate && upperDate) {
                return date >= lowerDate && date <= upperDate && getRangeClass(date);
            }
        };
        if (!this.config.$rangeMark || !this._linkedCalendar.config.$rangeMark) {
            this.config.$rangeMark = this._linkedCalendar.config.$rangeMark = rangeMark;
        }
        if (!this.config.disabledDates || !this._linkedCalendar.config.disabledDates) {
            this.config.disabledDates = function (date) {
                if (upperDate) {
                    return date > upperDate;
                }
            };
            this._linkedCalendar.config.disabledDates = function (date) {
                if (lowerDate) {
                    return date < lowerDate;
                }
            };
        }
        this.config.thisMonthOnly = true;
        targetCalendar.config.thisMonthOnly = true;
        this.events.on(types_1.CalendarEvents.change, function (date) {
            lowerDate = date_1.DateHelper.dayStart(date);
            _this._linkedCalendar.paint();
        }, "link");
        this._linkedCalendar.events.on(types_1.CalendarEvents.change, function (date) {
            upperDate = date_1.DateHelper.dayStart(date);
            _this.paint();
        }, "link");
        this._linkedCalendar.paint();
        this.paint();
    };
    Calendar.prototype._unlink = function () {
        if (this._linkedCalendar) {
            this.config.$rangeMark = this._linkedCalendar.config.$rangeMark = null;
            this.config.disabledDates = this._linkedCalendar.config.disabledDates = null;
            this.events.detach(types_1.CalendarEvents.change, "link");
            this._linkedCalendar.events.detach(types_1.CalendarEvents.change, "link");
            this._linkedCalendar.paint();
            this._linkedCalendar = null;
        }
    };
    Calendar.prototype._setSelected = function (value) {
        var _this = this;
        var currentDate = value instanceof Array ? value[0] : value;
        var date = date_1.DateHelper.toDateObject(currentDate, this.config.dateFormat);
        if (value instanceof Array && this.config.range) {
            var filterDate_1 = [];
            value.forEach(function (element, index) {
                if (index < 2) {
                    filterDate_1.push(date_1.DateHelper.toDateObject(element, _this.config.dateFormat));
                }
            });
            if (filterDate_1.length === 2 && filterDate_1[0] < filterDate_1[1]) {
                filterDate_1.forEach(function (element) { return _this._selected.push(element); });
            }
            else {
                this._selected[0] = filterDate_1[0];
            }
        }
        else {
            this._selected[0] = date;
        }
    };
    Calendar.prototype._getSelected = function () {
        return this._selected[this._selected.length - 1];
    };
    Calendar.prototype._draw = function () {
        switch (this._currentViewMode) {
            case "calendar":
                this.events.fire(types_1.CalendarEvents.modeChange, ["calendar"]);
                return this._drawCalendar();
            case "month":
                this.events.fire(types_1.CalendarEvents.modeChange, ["month"]);
                return this._drawMonthSelector();
            case "year":
                this.events.fire(types_1.CalendarEvents.modeChange, ["year"]);
                return this._drawYearSelector();
            case "timepicker":
                this.events.fire(types_1.CalendarEvents.modeChange, ["timepicker"]);
                return this._drawTimepicker();
        }
    };
    Calendar.prototype._initHandlers = function () {
        var _this = this;
        var ie_key_map = {
            Up: "ArrowUp",
            Down: "ArrowDown",
            Right: "ArrowRight",
            Left: "ArrowLeft",
            Esc: "Escape",
            Spacebar: "Space",
        };
        var getKey = function (e) {
            var key;
            if ((e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90)) {
                key = String.fromCharCode(e.which);
            }
            else {
                var keyName = e.which === 32 ? e.code : e.key;
                key = html_1.isIE() ? ie_key_map[keyName] || keyName : keyName;
            }
            return key;
        };
        var getVerticalRange = function (decrease) {
            if (decrease === void 0) { decrease = false; }
            var range = 0;
            switch (_this._currentViewMode) {
                case "calendar":
                    range = decrease ? -7 : 7;
                    break;
                case "month":
                    range = decrease ? -4 : 4;
                    break;
                case "year":
                    range = decrease ? -4 : 4;
            }
            return range;
        };
        this._handlers = {
            onkeydown: {
                ".dhx_calendar-year, .dhx_calendar-month, .dhx_calendar-day": function (_e, vn) {
                    switch (getKey(_e)) {
                        case "Enter":
                            _this._selectDate(_e, vn);
                            break;
                        case "ArrowLeft":
                            _this._moveBrowseFocus(_e, vn, -1);
                            break;
                        case "ArrowRight":
                            _this._moveBrowseFocus(_e, vn, 1);
                            break;
                        case "ArrowUp":
                            _this._moveBrowseFocus(_e, vn, getVerticalRange(true));
                            break;
                        case "ArrowDown":
                            _this._moveBrowseFocus(_e, vn, getVerticalRange());
                            break;
                    }
                },
            },
            onclick: {
                ".dhx_calendar-year, .dhx_calendar-month, .dhx_calendar-day": function (_e, vn) {
                    _this._selectDate(_e, vn);
                },
                ".dhx_calendar-action__cancel": function () {
                    _this.showDate(_this._getSelected(), "calendar");
                    _this.events.fire(types_1.CalendarEvents.cancelClick, []);
                },
                ".dhx_calendar-action__show-month": function () { return _this.showDate(null, "month"); },
                ".dhx_calendar-action__show-year": function () { return _this.showDate(null, "year"); },
                ".dhx_calendar-action__next": function () {
                    var newDate;
                    switch (_this._currentViewMode) {
                        case "calendar":
                            newDate = date_1.DateHelper.addMonth(_this._currentDate, 1);
                            break;
                        case "month":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, 1);
                            break;
                        case "year":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, 12);
                    }
                    _this.showDate(newDate);
                },
                ".dhx_calendar-action__prev": function () {
                    var newDate;
                    switch (_this._currentViewMode) {
                        case "calendar":
                            newDate = date_1.DateHelper.addMonth(_this._currentDate, -1);
                            break;
                        case "month":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, -1);
                            break;
                        case "year":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, -12);
                    }
                    _this.showDate(newDate);
                },
                ".dhx_calendar-action__show-timepicker": function () {
                    _this._currentViewMode = "timepicker";
                    _this.paint();
                },
            },
            onmouseover: {
                ".dhx_calendar-day": function (event, node) {
                    _this.events.fire(types_1.CalendarEvents.dateMouseOver, [new Date(node.attrs._date), event]);
                    _this.events.fire(types_1.CalendarEvents.dateHover, [new Date(node.attrs._date), event]); // TODO: remove suite_7.0
                },
            },
        };
    };
    Calendar.prototype._getData = function (date) {
        var _this = this;
        this._isSelectedInCurrentRange = false;
        var firstDay = this.config.weekStart === "monday" ? 1 : 0;
        var first = date_1.DateHelper.weekStart(date_1.DateHelper.monthStart(date), firstDay);
        var data = [];
        var weeksCount = 6;
        var currentDate = first;
        while (weeksCount--) {
            var currentWeek = date_1.DateHelper.getWeekNumber(currentDate);
            var disabledDays = 0;
            var daysCount = 7;
            var days = [];
            var _loop_1 = function () {
                var isDateWeekEnd = date_1.DateHelper.isWeekEnd(currentDate);
                var isCurrentMonth = date.getMonth() === currentDate.getMonth();
                var isBlocked = this_1.config.disabledDates && this_1.config.disabledDates(currentDate);
                var css = [];
                if (this_1.config.range && this_1._selected[0] && this_1._selected[1]) {
                    var getRangeClass_1 = function () {
                        if (date_1.DateHelper.isSameDay(_this._selected[0], _this._selected[1])) {
                            return null;
                        }
                        return "dhx_calendar-day--in-range";
                    };
                    var rangeMark = function () {
                        if (_this._selected[0] && _this._selected[1]) {
                            var firstDate = date_1.DateHelper.dayStart(_this._selected[0]);
                            var lastDate = date_1.DateHelper.dayStart(_this._selected[1]);
                            return currentDate >= firstDate && currentDate <= lastDate && getRangeClass_1();
                        }
                    };
                    this_1.config.$rangeMark = rangeMark;
                }
                if (isDateWeekEnd && isCurrentMonth) {
                    css.push("dhx_calendar-day--weekend");
                }
                if (!isCurrentMonth) {
                    if (this_1.config.thisMonthOnly) {
                        disabledDays++;
                        css.push("dhx_calendar-day--hidden");
                    }
                    else {
                        css.push("dhx_calendar-day--muffled");
                    }
                }
                if (this_1.config.mark) {
                    var markedCss = this_1.config.mark(currentDate);
                    if (markedCss) {
                        css.push(markedCss);
                    }
                }
                if (this_1.config.$rangeMark) {
                    var rangeMark = this_1.config.$rangeMark(currentDate);
                    if (rangeMark) {
                        css.push(rangeMark);
                    }
                }
                if (isBlocked) {
                    if (isDateWeekEnd) {
                        css.push("dhx_calendar-day--weekend-disabled");
                    }
                    else {
                        css.push("dhx_calendar-day--disabled");
                    }
                }
                this_1._selected.forEach(function (selected, index) {
                    if (selected && date_1.DateHelper.isSameDay(selected, currentDate)) {
                        _this._isSelectedInCurrentRange = true;
                        var dayCss = "dhx_calendar-day--selected";
                        if (_this.config.range) {
                            dayCss += " dhx_calendar-day--selected-" + (index === 0 ? "first " : "last");
                        }
                        css.push(dayCss);
                    }
                });
                days.push({
                    date: currentDate,
                    day: currentDate.getDate(),
                    css: css.join(" "),
                });
                currentDate = date_1.DateHelper.addDay(currentDate);
            };
            var this_1 = this;
            while (daysCount--) {
                _loop_1();
            }
            data.push({
                weekNumber: currentWeek,
                days: days,
                disabledWeekNumber: disabledDays === 7,
            });
        }
        return data;
    };
    Calendar.prototype._drawCalendar = function () {
        var _this = this;
        var date = this._currentDate;
        var _a = this.config, weekStart = _a.weekStart, thisMonthOnly = _a.thisMonthOnly, css = _a.css, timePicker = _a.timePicker, width = _a.width;
        var weekDays = weekStart === "monday" ? __spreadArrays(date_1.locale.daysShort.slice(1), [date_1.locale.daysShort[0]]) : date_1.locale.daysShort;
        var weekDaysHeader = weekDays.map(function (day) { return dom_1.el(".dhx_calendar-weekday", day); });
        var data = this._getData(date);
        var isFirstItem = true;
        var selectedDate = this._getSelected();
        var isDateSelected = function (date) {
            return date && selectedDate && date.getTime() === selectedDate.getTime();
        };
        var getCellAriaAttrs = function (item) {
            var attrs = {
                role: "button",
                tabindex: -1,
                "aria-pressed": "false",
            };
            if (item) {
                if (_this._isSelectedInCurrentRange) {
                    // it is correct that conditions are separated
                    if (isDateSelected(item.date)) {
                        attrs["tabindex"] = 0;
                        attrs["aria-pressed"] = "true";
                    }
                }
                else if (isFirstItem) {
                    attrs["tabindex"] = 0;
                }
                isFirstItem = false;
            }
            return attrs;
        };
        var content = [];
        var weekNumbers = [];
        var weekNumbersWrapper;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var week = data_1[_i];
            var weekRow = week.days.map(function (item) {
                return dom_1.el("div.dhx_calendar-day", __assign({ class: item.css, _date: item.date }, getCellAriaAttrs(item)), item.day);
            });
            if (this.config.weekNumbers && !(week.disabledWeekNumber && thisMonthOnly)) {
                weekNumbers.push(dom_1.el("div", {
                    class: "dhx_calendar-week-number",
                }, week.weekNumber));
            }
            content = content.concat(weekRow);
        }
        if (this.config.weekNumbers) {
            weekNumbersWrapper = dom_1.el(".dhx_calendar__week-numbers", weekNumbers);
        }
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (this.config.weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        return dom_1.el("div", __assign({ class: widgetClass, style: {
                width: this.config.weekNumbers ? "calc(" + width + " + 48px )" : width,
            } }, this._handlers), [
            dom_1.el(".dhx_calendar__wrapper", [
                this._drawHeader(dom_1.el("button.dhx_calendar-action__show-month.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                    "aria-live": "polite",
                    type: "button",
                }, date_1.locale.months[date.getMonth()] + " " + date.getFullYear())),
                this.config.weekNumbers &&
                    dom_1.el(".dhx_calendar__dates-wrapper", [
                        dom_1.el(".dhx_calendar__weekdays", weekDaysHeader),
                        dom_1.el(".dhx_calendar__days", content),
                        weekNumbersWrapper,
                    ]),
                !this.config.weekNumbers && dom_1.el(".dhx_calendar__weekdays", weekDaysHeader),
                !this.config.weekNumbers && dom_1.el(".dhx_calendar__days", content),
                timePicker
                    ? dom_1.el(".dhx_timepicker__actions", [
                        dom_1.el("button.dhx_calendar__timepicker-button." +
                            "dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__show-timepicker", { type: "button" }, [
                            dom_1.el("span.dhx_button__icon.dxi.dxi-clock-outline"),
                            dom_1.el("span.dhx_button__text", this._time),
                        ]),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawMonthSelector = function () {
        var date = this._currentDate;
        var currentMonth = date.getMonth();
        var currentYear = this._getSelected() ? this._getSelected().getFullYear() : null;
        var _a = this.config, css = _a.css, timePicker = _a.timePicker, weekNumbers = _a.weekNumbers, width = _a.width, mode = _a.mode;
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        var isFirstItem = true;
        var isCurrentYear = currentYear === date.getFullYear();
        var isMonthSelected = function (i) { return isCurrentYear && currentMonth === i; };
        var getCellAriaAttrs = function (item, i) {
            var attrs = {
                role: "button",
                tabindex: -1,
                "aria-pressed": "false",
            };
            if (item) {
                if (isCurrentYear) {
                    // it is correct that conditions are separated
                    if (isMonthSelected(i)) {
                        attrs["tabindex"] = 0;
                        attrs["aria-pressed"] = "true";
                    }
                }
                else if (isFirstItem) {
                    attrs["tabindex"] = 0;
                }
                isFirstItem = false;
            }
            return attrs;
        };
        return dom_1.el("div", __assign({ class: widgetClass, style: {
                width: weekNumbers ? "calc(" + width + " + 48px)" : width,
            } }, this._handlers), [
            dom_1.el(".dhx_calendar__wrapper", [
                this._drawHeader(dom_1.el("button.dhx_calendar-action__show-year.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                    "aria-live": "polite",
                    type: "button",
                }, date.getFullYear())),
                dom_1.el(".dhx_calendar__months", date_1.locale.monthsShort.map(function (item, i) {
                    return dom_1.el("div", __assign(__assign({ class: "dhx_calendar-month" +
                            (isMonthSelected(i) ? " dhx_calendar-month--selected" : "") }, getCellAriaAttrs(item, i)), { _date: i }), item);
                })),
                mode !== "month"
                    ? dom_1.el(".dhx_calendar__actions", [
                        dom_1.el("button.dhx_button.dhx_button--color_primary.dhx_button--view_link.dhx_button--size_small.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__cancel", { type: "button" }, date_1.locale.cancel),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawYearSelector = function () {
        var _this = this;
        var date = this._currentDate;
        var yearsDiapason = date_1.DateHelper.getTwelweYears(date);
        var _a = this.config, css = _a.css, timePicker = _a.timePicker, weekNumbers = _a.weekNumbers, width = _a.width, mode = _a.mode;
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        var isFirstItem = true;
        var isSelectedYearInRange = this._getSelected() && yearsDiapason.includes(this._getSelected().getFullYear());
        var isYearSelected = function (item) { return _this._getSelected() && item === _this._getSelected().getFullYear(); };
        var getCellAriaAttrs = function (item) {
            var attrs = {
                role: "button",
                tabindex: -1,
                "aria-pressed": "false",
            };
            if (item) {
                if (isSelectedYearInRange) {
                    // it is correct that conditions are separated
                    if (isYearSelected(item)) {
                        attrs["tabindex"] = 0;
                        attrs["aria-pressed"] = "true";
                    }
                }
                else if (isFirstItem) {
                    attrs["tabindex"] = 0;
                }
                isFirstItem = false;
            }
            return attrs;
        };
        return dom_1.el("div", __assign({ class: widgetClass, style: { width: weekNumbers ? "calc(" + width + " + 48px)" : width } }, this._handlers), [
            dom_1.el(".dhx_calendar__wrapper", [
                this._drawHeader(dom_1.el("button.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                    "aria-live": "polite",
                    type: "button",
                }, yearsDiapason[0] + "-" + yearsDiapason[yearsDiapason.length - 1])),
                dom_1.el(".dhx_calendar__years", yearsDiapason.map(function (item) {
                    return dom_1.el("div", __assign({ class: "dhx_calendar-year" +
                            (isYearSelected(item) ? " dhx_calendar-year--selected" : ""), _date: item }, getCellAriaAttrs(item)), item);
                })),
                mode !== "year" && mode !== "month"
                    ? dom_1.el(".dhx_calendar__actions", [
                        dom_1.el("button.dhx_button.dhx_button--color_primary.dhx_button--view_link.dhx_button--size_small.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__cancel", { type: "button" }, date_1.locale.cancel),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawHeader = function (actionContent) {
        return dom_1.el(".dhx_calendar__navigation", [
            dom_1.el("button.dhx_calendar-navigation__button.dhx_calendar-action__prev" +
                helper_1.linkButtonClasses +
                ".dhx_button--icon.dhx_button--circle", {
                "aria-label": "prev",
                type: "button",
            }, [dom_1.el(".dhx_button__icon.dxi.dxi-chevron-left")]),
            actionContent,
            dom_1.el("button.dhx_calendar-navigation__button.dhx_calendar-action__next" +
                helper_1.linkButtonClasses +
                ".dhx_button--icon.dhx_button--circle", {
                "aria-label": "next",
                type: "button",
            }, [dom_1.el(".dhx_button__icon.dxi.dxi-chevron-right")]),
        ]);
    };
    Calendar.prototype._drawTimepicker = function () {
        var _a = this.config, css = _a.css, weekNumbers = _a.weekNumbers, width = _a.width;
        return dom_1.el(".dhx_widget.dhx-calendar", {
            class: css ? " " + css : "",
            style: { width: weekNumbers ? "calc(" + width + " + 48px)" : width },
        }, [dom_1.inject(this._timepicker.getRootView())]);
    };
    Calendar.prototype._selectDate = function (_e, vn) {
        var date = vn.attrs._date;
        var oldDate = date_1.DateHelper.copy(this._getSelected());
        switch (this._currentViewMode) {
            case "calendar": {
                var mergedDate = this.config.timePicker
                    ? date_1.DateHelper.mergeHoursAndMinutes(date, this._getSelected() || this._currentDate)
                    : date;
                if (!this.events.fire(types_1.CalendarEvents.beforeChange, [mergedDate, oldDate, true])) {
                    return;
                }
                if (this.config.range && this._selected.length === 1 && this._selected[0] < mergedDate) {
                    this._selected.push(mergedDate);
                }
                else {
                    this._selected = [];
                    this._selected[0] = mergedDate;
                }
                vn.el.blur();
                this.showDate(this._getSelected());
                this.events.fire(types_1.CalendarEvents.change, [date, oldDate, true]);
                break;
            }
            case "month":
                if (this.config.mode !== "month") {
                    date_1.DateHelper.setMonth(this._currentDate, date);
                    this.showDate(null, "calendar");
                    this.events.fire(types_1.CalendarEvents.monthSelected, [date]);
                }
                else {
                    var newDate = date_1.DateHelper.fromYearAndMonth(this._currentDate.getFullYear() || this._getSelected().getFullYear(), date);
                    if (!this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                        return;
                    }
                    this._currentDate = newDate;
                    this._selected[0] = newDate;
                    this.events.fire(types_1.CalendarEvents.change, [this._getSelected(), oldDate, true]);
                    this.events.fire(types_1.CalendarEvents.monthSelected, [date]);
                    this.paint();
                }
                break;
            case "year":
                if (this.config.mode !== "year") {
                    date_1.DateHelper.setYear(this._currentDate, date);
                    this.showDate(null, "month");
                    this.events.fire(types_1.CalendarEvents.yearSelected, [date]);
                }
                else {
                    var newDate = date_1.DateHelper.fromYear(date);
                    if (!this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                        return;
                    }
                    this._currentDate = newDate;
                    this._selected[0] = newDate;
                    this.events.fire(types_1.CalendarEvents.change, [this._getSelected(), oldDate, true]);
                    this.events.fire(types_1.CalendarEvents.yearSelected, [date]);
                    this.paint();
                }
        }
    };
    Calendar.prototype._moveBrowseFocus = function (e, node, range) {
        if (node) {
            var nextNode = node.parent.body[node.idx + range];
            if (nextNode) {
                var $nextNode = nextNode.el;
                if ($nextNode) {
                    e.target.tabIndex = -1;
                    $nextNode.tabIndex = 0;
                    $nextNode.focus({ preventScroll: true });
                }
            }
        }
    };
    return Calendar;
}(view_1.View));
exports.Calendar = Calendar;


/***/ }),

/***/ "../ts-calendar/sources/helper.ts":
/*!****************************************!*\
  !*** ../ts-calendar/sources/helper.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.linkButtonClasses = ".dhx_button.dhx_button--view_link.dhx_button--icon.dhx_button--size_medium.dhx_button--color_secondary";


/***/ }),

/***/ "../ts-calendar/sources/types.ts":
/*!***************************************!*\
  !*** ../ts-calendar/sources/types.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CalendarEvents;
(function (CalendarEvents) {
    CalendarEvents["change"] = "change";
    CalendarEvents["beforeChange"] = "beforechange";
    CalendarEvents["modeChange"] = "modeChange";
    CalendarEvents["monthSelected"] = "monthSelected";
    CalendarEvents["yearSelected"] = "yearSelected";
    CalendarEvents["cancelClick"] = "cancelClick";
    CalendarEvents["dateMouseOver"] = "dateMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    CalendarEvents["dateHover"] = "dateHover";
})(CalendarEvents = exports.CalendarEvents || (exports.CalendarEvents = {}));


/***/ }),

/***/ "../ts-colorpicker/index.ts":
/*!**********************************!*\
  !*** ../ts-colorpicker/index.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Colorpicker */ "../ts-colorpicker/sources/Colorpicker.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-colorpicker/sources/types.ts"));
__export(__webpack_require__(/*! ./sources/colors */ "../ts-colorpicker/sources/colors.ts"));
__export(__webpack_require__(/*! ./sources/helpers/color */ "../ts-colorpicker/sources/helpers/color.ts"));
var en_1 = __webpack_require__(/*! ./sources/locales/en */ "../ts-colorpicker/sources/locales/en.ts");
exports.locale = en_1.default;


/***/ }),

/***/ "../ts-colorpicker/sources/Colorpicker.ts":
/*!************************************************!*\
  !*** ../ts-colorpicker/sources/Colorpicker.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var color_1 = __webpack_require__(/*! ./helpers/color */ "../ts-colorpicker/sources/helpers/color.ts");
var colors_1 = __webpack_require__(/*! ./colors */ "../ts-colorpicker/sources/colors.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-colorpicker/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-colorpicker/sources/types.ts");
// tslint:disable-next-line
var tooltip_1 = __webpack_require__(/*! @dhx/ts-message/sources/tooltip */ "../ts-message/sources/tooltip.ts");
// tslint:disable-next-line
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message/ */ "../ts-message/index.ts");
var picker_1 = __webpack_require__(/*! ./picker */ "../ts-colorpicker/sources/picker.ts");
var calculations_1 = __webpack_require__(/*! ./helpers/calculations */ "../ts-colorpicker/sources/helpers/calculations.ts");
var KeyManager_1 = __webpack_require__(/*! @dhx/ts-common/KeyManager */ "../ts-common/KeyManager.ts");
var FocusManager_1 = __webpack_require__(/*! @dhx/ts-common/FocusManager */ "../ts-common/FocusManager.ts");
var core_2 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var Colorpicker = /** @class */ (function (_super) {
    __extends(Colorpicker, _super);
    function Colorpicker(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._setPaletteGrip = function (e) {
            var paletteRect = _this.getRootView().refs.picker_palette.el.getBoundingClientRect();
            var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
            var clientY = e.targetTouches ? e.targetTouches[0].clientY : e.clientY;
            var top = clientY - paletteRect.top;
            var left = clientX - paletteRect.left;
            var _a = calculations_1.calculatePaletteGrip(paletteRect, top, left), s = _a.s, v = _a.v;
            _this._pickerState.hsv.s = s;
            _this._pickerState.hsv.v = v;
            _this.paint();
        };
        _this._setRangeGrip = function (e) {
            var rangeRect = _this.getRootView().refs.hue_range.el.getBoundingClientRect();
            var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
            var left = clientX - rangeRect.left;
            var _a = calculations_1.calculateRangeGrip(rangeRect, left), h = _a.h, rangeLeft = _a.rangeLeft;
            _this._pickerState.hsv.h = h;
            _this._pickerState.rangeLeft = rangeLeft;
            _this.paint();
        };
        _this._onColorClick = function (_e, node) {
            _this._selected = node.data.color.toUpperCase();
            _this.events.fire(types_1.ColorpickerEvents.change, [_this._selected]);
            _this.events.fire(types_1.ColorpickerEvents.colorChange, [_this._selected]); // TODO: remove suite_7.0
        };
        _this._container = container;
        _this.config = core_1.extend({
            css: "",
            grayShades: true,
            pickerOnly: false,
            paletteOnly: false,
            customColors: [],
            palette: colors_1.palette,
            width: "238px",
            mode: "palette",
        }, _this.config);
        if (!_this.config.palette) {
            _this.config.palette = colors_1.palette;
        }
        if (_this.config.customColors) {
            _this.config.customColors = _this.config.customColors.map(function (color) { return color.toUpperCase(); });
        }
        _this._pickerState = {
            hsv: { h: 0, s: 1, v: 1 },
            customHex: "",
        };
        _this.events = new events_1.EventSystem(_this);
        _this._setHandlers();
        _this._keyManager = new KeyManager_1.KeyManager(function (e, focusId) { return focusId === _this._uid; });
        _this._initHotKey();
        var view = dom_1.create({ render: function () { return _this._getContent(); } });
        _this.mount(_this._container, view);
        return _this;
    }
    Colorpicker.prototype.destructor = function () {
        this.events && this.events.clear();
        this.config = this.events = this._selected = this._handlers = this._pickerState = this._inputTimeout = null;
        this.unmount();
    };
    Colorpicker.prototype.clear = function () {
        this._selected = "";
        this.events.fire(types_1.ColorpickerEvents.change, [this._selected]);
        this.paint();
    };
    Colorpicker.prototype.setValue = function (value) {
        if (this._focusColor(value) || FocusManager_1.focusManager.getFocusId() === this._uid) {
            this.paint();
            this.events.fire(types_1.ColorpickerEvents.change, [this._selected]);
            this.events.fire(types_1.ColorpickerEvents.colorChange, [this._selected]); // TODO: remove suite_7.0
        }
    };
    Colorpicker.prototype.setFocus = function (value) {
        if (this._focusColor(value)) {
            this.paint();
        }
    };
    Colorpicker.prototype.getValue = function () {
        return this._selected || "";
    };
    Colorpicker.prototype.getCustomColors = function () {
        return this.config.customColors;
    };
    Colorpicker.prototype.setCustomColors = function (customColors) {
        this.config.customColors = customColors.map(function (color) { return color.toUpperCase(); });
        this.paint();
    };
    Colorpicker.prototype.setCurrentMode = function (mode) {
        if (mode === "palette" || mode === "picker") {
            this.config.mode = mode;
            this.events.fire(types_1.ColorpickerEvents.modeChange, [mode]);
            this.events.fire(types_1.ColorpickerEvents.viewChange, [mode]); // TODO: remove suite_7.0
            this.paint();
        }
    };
    Colorpicker.prototype.getCurrentMode = function () {
        return this.config.mode;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.getView = function () {
        return this.getCurrentMode();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.setView = function (mode) {
        this.setCurrentMode(mode);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.focusValue = function (value) {
        this.setFocus(value);
    };
    Colorpicker.prototype._setHandlers = function () {
        var _this = this;
        this._handlers = {
            click: {
                ".dhx_palette__cell": this._onColorClick,
            },
            mousedown: function (e) {
                _this._pickerMove(e);
            },
            touchstart: function (e) {
                _this._pickerMove(e);
            },
            buttonsClick: function (button) {
                _this.setCurrentMode("palette");
                if (button === "cancel") {
                    _this.events.fire(types_1.ColorpickerEvents.cancelClick, []);
                    return;
                }
                if (button === "apply" && !_this.config.customColors.includes(_this._pickerState.background)) {
                    _this.setValue(_this._pickerState.background);
                    _this.events.fire(types_1.ColorpickerEvents.apply, []);
                    _this.events.fire(types_1.ColorpickerEvents.selectClick, []); // TODO: remove suite_7.0
                }
            },
            customColorClick: function () {
                _this.setView("picker");
            },
            oninput: function (e) {
                if (_this._inputTimeout) {
                    clearTimeout(_this._inputTimeout);
                }
                _this._inputTimeout = setTimeout(function () {
                    var val = e.target.value;
                    if (val.indexOf("#") === -1) {
                        val = "#" + val;
                    }
                    _this._pickerState.customHex = val;
                    if (color_1.isHex(val)) {
                        _this._pickerState.hsv = color_1.HexToHSV(val);
                        _this.paint();
                    }
                }, 100);
            },
            contextmenu: {
                ".dhx_palette__cell": function (e, node) {
                    e.preventDefault();
                    var index = _this.config.customColors.indexOf(node.data.color);
                    if (index !== -1) {
                        _this._removeCustomColor(index);
                    }
                    _this.paint();
                    return;
                },
            },
            mouseover: {
                ".dhx_palette__cell": function (e) {
                    if (e.target) {
                        tooltip_1.tooltip(en_1.default.rightClickToDelete, {
                            node: e.target,
                            position: ts_message_1.Position.bottom,
                        });
                    }
                },
                ".dhx_colorpicker-custom-colors__picker": function (e) {
                    if (e.target) {
                        tooltip_1.tooltip(en_1.default.addNewColor, {
                            node: e.target,
                            position: ts_message_1.Position.bottom,
                        });
                    }
                },
            },
        };
        this.events.on(types_1.ColorpickerEvents.change, function () {
            _this.paint();
        });
        // TODO: remove suite_7.0
        this.events.on(types_1.ColorpickerEvents.colorChange, function () {
            _this.paint();
        });
    };
    Colorpicker.prototype._pickerMove = function (e) {
        var name = html_1.locate(e);
        this._pickerState.customHex = "";
        if (name === "picker_palette") {
            this._setPaletteGrip(e);
        }
        else {
            this._setRangeGrip(e);
        }
        var handler = name === "picker_palette" ? this._setPaletteGrip : this._setRangeGrip;
        var move = e.targetTouches ? "touchmove" : "mousemove";
        var up = e.targetTouches ? "touchend" : "mouseup";
        document.addEventListener(move, handler);
        document.addEventListener(up, function () {
            document.removeEventListener(move, handler);
        });
        this.paint();
    };
    Colorpicker.prototype._focusColor = function (value) {
        if (value === undefined || value.length < 4) {
            return false;
        }
        var hex = value.toUpperCase();
        if (!color_1.isHex(hex)) {
            return false;
        }
        var isInPalette = this.config.palette.reduce(function (state, col) {
            if (state) {
                return state;
            }
            col.forEach(function (color) {
                if (color.toUpperCase() === hex) {
                    state = true;
                    return;
                }
            });
            return state;
        }, false);
        var isInGrayShades = colors_1.grayShades.includes(hex);
        if (!isInPalette && !isInGrayShades) {
            var colors = this.getCustomColors();
            if (!colors.includes(hex.toUpperCase())) {
                colors.push(hex.toUpperCase());
            }
        }
        this._selected = hex || null;
        this._pickerState.hsv = color_1.HexToHSV(hex);
        return true;
    };
    Colorpicker.prototype._removeCustomColor = function (index) {
        this.config.customColors.splice(index, 1);
    };
    Colorpicker.prototype._getCells = function (colors, cellClass) {
        var _this = this;
        if (cellClass === void 0) { cellClass = ""; }
        return colors.reduce(function (cells, color) {
            var selected = (_this._selected || "").toUpperCase() === color.toUpperCase()
                ? "dhx_palette__cell--selected"
                : "";
            cells.push(dom_1.el(".dhx_palette__cell", {
                class: selected + " " + cellClass,
                _data: { color: color },
                style: "background:" + color,
                tabindex: 0,
            }));
            return cells;
        }, []);
    };
    Colorpicker.prototype._getGrayShades = function () {
        return dom_1.el(".dhx_palette__row", this._getCells(colors_1.grayShades));
    };
    Colorpicker.prototype._getPalette = function () {
        var _this = this;
        return this.config.palette.reduce(function (total, row) {
            total.push(dom_1.el(".dhx_palette__col", _this._getCells(row)));
            return total;
        }, []);
    };
    Colorpicker.prototype._getContent = function () {
        var view;
        if (this.config.pickerOnly) {
            view = [picker_1.getPicker(this, this._pickerState, this._handlers)];
        }
        else {
            view =
                this.config.mode === "palette"
                    ? __spreadArrays([
                        this.config.grayShades && this._getGrayShades()
                    ], this._getPalette(), [
                        !this.config.paletteOnly &&
                            dom_1.el(".dhx_colorpicker-custom-colors", {
                                onmouseover: this._handlers.mouseover,
                            }, [
                                dom_1.el(".dhx_colorpicker-custom-colors__header", [en_1.default.customColors]),
                                dom_1.el(".dhx_palette--custom.dhx_palette__row", __spreadArrays(this._getCells(this.config.customColors, "dhx_custom-color__cell"), [
                                    dom_1.el(".dhx_colorpicker-custom-colors__picker", {
                                        class: "dxi dxi-plus",
                                        onclick: this._handlers.customColorClick,
                                        onmouseover: this._handlers.mouseover,
                                        tabindex: 0,
                                    }),
                                ])),
                            ]),
                    ]) : [picker_1.getPicker(this, this._pickerState, this._handlers)];
        }
        return dom_1.el(".dhx_widget.dhx_colorpicker", {
            class: this.config.css,
            style: { width: this.config.width },
            dhx_widget_id: this._uid,
        }, [
            dom_1.el(".dhx_palette", {
                onclick: this._handlers.click,
                oncontextmenu: this._handlers.contextmenu,
            }, view),
        ]);
    };
    Colorpicker.prototype._initHotKey = function () {
        var _this = this;
        var handlers = {
            enter: function (e) {
                if (html_1.locateNodeByClassName(e, "dhx_palette__cell")) {
                    _this._selected = core_2.rgbToHex(e.target.style.background);
                    _this.events.fire(types_1.ColorpickerEvents.change, [_this._selected]);
                    _this.events.fire(types_1.ColorpickerEvents.colorChange, [_this._selected]); // TODO: remove suite_7.0
                }
                if (html_1.locateNodeByClassName(e, "dhx_colorpicker-custom-colors__picker")) {
                    _this.setCurrentMode("picker");
                }
            },
        };
        for (var key in handlers) {
            this._keyManager.addHotKey(key, handlers[key]);
        }
    };
    return Colorpicker;
}(view_1.View));
exports.Colorpicker = Colorpicker;


/***/ }),

/***/ "../ts-colorpicker/sources/colors.ts":
/*!*******************************************!*\
  !*** ../ts-colorpicker/sources/colors.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.grayShades = [
    "#000000",
    "#4C4C4C",
    "#666666",
    "#808080",
    "#999999",
    "#B3B3B3",
    "#CCCCCC",
    "#E6E6E6",
    "#F2F2F2",
    "#FFFFFF",
];
exports.palette = [
    ["#D4DAE4", "#B0B8CD", "#949DB1", "#727A8C", "#5E6677", "#3F4757", "#1D2534"],
    ["#FFCDD2", "#FE9998", "#F35C4E", "#E94633", "#D73C2D", "#CA3626", "#BB2B1A"],
    ["#F9E6AD", "#F4D679", "#EDB90F", "#EAA100", "#EA8F00", "#EA7E00", "#EA5D00"],
    ["#BCE4CE", "#90D2AF", "#33B579", "#36955F", "#247346", "#1D5B38", "#17492D"],
    ["#BDF0E9", "#92E7DC", "#02D7C5", "#11B3A5", "#018B80", "#026B60", "#024F43"],
    ["#B3E5FC", "#81D4FA", "#29B6F6", "#039BE5", "#0288D1", "#0277BD", "#01579B"],
    ["#AEC1FF", "#88A3F9", "#5874CD", "#2349AE", "#163FA2", "#083596", "#002381"],
    ["#C5C0DA", "#9F97C1", "#7E6BAD", "#584A8F", "#4F4083", "#473776", "#3A265F"],
    ["#D6BDCC", "#C492AC", "#A9537C", "#963A64", "#81355A", "#6E3051", "#4C2640"],
    ["#D2C5C1", "#B4A09A", "#826358", "#624339", "#5D4037", "#4E342E", "#3E2723"],
];


/***/ }),

/***/ "../ts-colorpicker/sources/helpers/calculations.ts":
/*!*********************************************************!*\
  !*** ../ts-colorpicker/sources/helpers/calculations.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function calculatePaletteGrip(clientRect, top, left) {
    var bottom = clientRect.height;
    var right = clientRect.width;
    top = top < 0 ? 0 : top > bottom ? bottom : top;
    left = left < 0 ? 0 : left > right ? right : left;
    var pLeft = Math.round(left / (right / 100));
    var pTop = 100 - Math.round(top / (bottom / 100));
    return {
        s: pLeft / 100,
        v: pTop / 100,
    };
}
exports.calculatePaletteGrip = calculatePaletteGrip;
function calculateRangeGrip(clientRect, left) {
    var right = clientRect.width;
    left = left < 0 ? 0 : left > right ? right : left;
    return {
        h: Math.round(360 * (left / right)),
        rangeLeft: left,
    };
}
exports.calculateRangeGrip = calculateRangeGrip;


/***/ }),

/***/ "../ts-colorpicker/sources/helpers/color.ts":
/*!**************************************************!*\
  !*** ../ts-colorpicker/sources/helpers/color.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function HSVtoRGB(hsv) {
    var rgb = { r: 0, g: 0, b: 0 };
    var h = hsv.h / 60;
    var s = hsv.s;
    var v = hsv.v;
    var i = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (i) {
        case 0:
            rgb.r = v;
            rgb.g = t;
            rgb.b = p;
            break;
        case 1:
            rgb.r = q;
            rgb.g = v;
            rgb.b = p;
            break;
        case 2:
            rgb.r = p;
            rgb.g = v;
            rgb.b = t;
            break;
        case 3:
            rgb.r = p;
            rgb.g = q;
            rgb.b = v;
            break;
        case 4:
            rgb.r = t;
            rgb.g = p;
            rgb.b = v;
            break;
        case 5:
            rgb.r = v;
            rgb.g = p;
            rgb.b = q;
            break;
    }
    for (var key in rgb) {
        rgb[key] = Math.round(rgb[key]);
    }
    return rgb;
}
exports.HSVtoRGB = HSVtoRGB;
function RGBToHex(rgb) {
    return Object.keys(rgb).reduce(function (hex, c) {
        var h = rgb[c].toString(16).toUpperCase();
        h = h.length === 1 ? "0" + h : h;
        return (hex += h);
    }, "#");
}
exports.RGBToHex = RGBToHex;
function HexToRGB(hex) {
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (_m, r, g, b) { return r + r + g + g + b + b; });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
        }
        : null;
}
exports.HexToRGB = HexToRGB;
function RGBToHSV(rgb) {
    var h;
    var s;
    var r = rgb.r / 255;
    var g = rgb.g / 255;
    var b = rgb.b / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function (c) {
        return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
        h = s = 0;
    }
    else {
        s = diff / v;
        var rdif = diffc(r);
        var gdif = diffc(g);
        var bdif = diffc(b);
        if (r === v) {
            h = bdif - gdif;
        }
        else if (g === v) {
            h = 1 / 3 + rdif - bdif;
        }
        else if (b === v) {
            h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
            h += 1;
        }
        else if (h > 1) {
            h -= 1;
        }
    }
    return {
        h: Math.floor(h * 360),
        s: s,
        v: v,
    };
}
exports.RGBToHSV = RGBToHSV;
function HexToHSV(hex) {
    return RGBToHSV(HexToRGB(hex));
}
exports.HexToHSV = HexToHSV;
function isHex(hex) {
    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
}
exports.isHex = isHex;


/***/ }),

/***/ "../ts-colorpicker/sources/locales/en.ts":
/*!***********************************************!*\
  !*** ../ts-colorpicker/sources/locales/en.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var en = {
    cancel: "Cancel",
    select: "Select",
    rightClickToDelete: "Right click to delete",
    customColors: "Custom colors",
    addNewColor: "Add new color",
};
exports.default = en;


/***/ }),

/***/ "../ts-colorpicker/sources/picker.ts":
/*!*******************************************!*\
  !*** ../ts-colorpicker/sources/picker.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = __webpack_require__(/*! ./helpers/color */ "../ts-colorpicker/sources/helpers/color.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-colorpicker/sources/locales/en.ts");
function getPicker(colorpicker, pickerState, handlers) {
    var rgb = color_1.HSVtoRGB(pickerState.hsv);
    pickerState.background = color_1.RGBToHex(rgb);
    var currentBackground = color_1.RGBToHex(color_1.HSVtoRGB({ h: pickerState.hsv.h, s: 1, v: 1 }));
    var root = colorpicker.getRootView();
    var box = root.refs
        ? root.refs.picker_palette.el.getBoundingClientRect()
        : { height: 200, width: 218, x: 0, y: 0 };
    var height = box.height - 2;
    var width = box.width - 2;
    var gripTop = height - pickerState.hsv.v * height - 4;
    var gripLeft = pickerState.hsv.s * width - 4;
    var rangeWidth = box.width - 6;
    var rangeGripLeft = rangeWidth - ((360 - pickerState.hsv.h) / 360) * rangeWidth;
    var inputValue = color_1.isHex(pickerState.customHex)
        ? pickerState.customHex.replace("#", "")
        : pickerState.background.replace("#", "");
    return dom_1.el(".dhx_colorpicker-picker", {}, [
        dom_1.el(".dhx_colorpicker-picker__palette", {
            style: {
                height: 132,
                background: currentBackground,
            },
            onmousedown: handlers.mousedown,
            ontouchstart: handlers.touchstart,
            dhx_id: "picker_palette",
            _ref: "picker_palette",
        }, [
            dom_1.el(".dhx_palette_grip", {
                style: {
                    top: gripTop,
                    left: gripLeft,
                },
                tabindex: 0,
            }),
        ]),
        dom_1.el(".dhx_colorpicker-hue-range", {
            style: { height: 16 },
            onmousedown: handlers.mousedown,
            ontouchstart: handlers.touchstart,
            dhx_id: "hue_range",
            _key: "hue_range",
            _ref: "hue_range",
        }, [
            dom_1.el(".dhx_colorpicker-hue-range__grip", {
                style: { left: rangeGripLeft },
                tabindex: 0,
            }),
        ]),
        dom_1.el(".dhx_colorpicker-value", [
            dom_1.el(".dhx_colorpicker-value__color", {
                style: { background: pickerState.background },
            }),
            dom_1.el(".dhx_colorpicker-value__input__wrapper", [
                dom_1.el("input", {
                    class: "dhx_colorpicker-value__input",
                    value: inputValue,
                    oninput: handlers.oninput,
                    maxlength: "7",
                    _key: "hex_input",
                    "aria-label": "type color in HEX format",
                }),
            ]),
        ]),
        dom_1.el(".dhx_colorpicker-picker__buttons", [
            !colorpicker.config.pickerOnly &&
                dom_1.el("button", {
                    class: "dhx_button dhx_button--size_medium dhx_button--view_link dhx_button--color_primary",
                    onclick: [handlers.buttonsClick, "cancel"],
                }, en_1.default.cancel),
            dom_1.el("button", {
                class: "dhx_button dhx_button--size_medium dhx_button--view_flat dhx_button--color_primary",
                onclick: [handlers.buttonsClick, "apply"],
            }, en_1.default.select),
        ]),
    ]);
}
exports.getPicker = getPicker;
function calculatePaletteGrip(rootView, top, left) {
    var paletteRect = rootView.refs.picker_palette.el.getBoundingClientRect();
    var bottom = paletteRect.height;
    var right = paletteRect.width;
    top = top < 0 ? 0 : top > bottom ? bottom : top;
    left = left < 0 ? 0 : left > right ? right : left;
    var pLeft = Math.round(left / (right / 100));
    var pTop = 100 - Math.round(top / (bottom / 100));
    this._pickerState.hsv.s = pLeft / 100;
    this._pickerState.hsv.v = pTop / 100;
}
exports.calculatePaletteGrip = calculatePaletteGrip;


/***/ }),

/***/ "../ts-colorpicker/sources/types.ts":
/*!******************************************!*\
  !*** ../ts-colorpicker/sources/types.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ColorpickerEvents;
(function (ColorpickerEvents) {
    ColorpickerEvents["change"] = "change";
    ColorpickerEvents["apply"] = "apply";
    ColorpickerEvents["cancelClick"] = "cancelClick";
    ColorpickerEvents["modeChange"] = "modeChange";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["selectClick"] = "selectClick";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["colorChange"] = "colorChange";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["viewChange"] = "viewChange";
})(ColorpickerEvents = exports.ColorpickerEvents || (exports.ColorpickerEvents = {}));


/***/ }),

/***/ "../ts-combobox/index.ts":
/*!*******************************!*\
  !*** ../ts-combobox/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Combobox */ "../ts-combobox/sources/Combobox.ts"));
__export(__webpack_require__(/*! ./sources/ProCombobox */ "../ts-combobox/sources/ProCombobox.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-combobox/sources/types.ts"));


/***/ }),

/***/ "../ts-combobox/sources/Combobox.ts":
/*!******************************************!*\
  !*** ../ts-combobox/sources/Combobox.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var keycodes_1 = __webpack_require__(/*! @dhx/ts-common/keycodes */ "../ts-common/keycodes.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var ts_list_1 = __webpack_require__(/*! @dhx/ts-list */ "../ts-list/index.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var keyListener_1 = __webpack_require__(/*! ./keyListener */ "../ts-combobox/sources/keyListener.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-combobox/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! @dhx/ts-common/types */ "../ts-common/types.ts");
var helper_1 = __webpack_require__(/*! ./helper */ "../ts-combobox/sources/helper.ts");
var types_2 = __webpack_require__(/*! ./types */ "../ts-combobox/sources/types.ts");
function itemsCountTemplate(count, templateFN) {
    if (typeof templateFN === "function") {
        return templateFN(count);
    }
    else {
        return count + " " + en_1.default.selectedItems;
    }
}
var template = function (item) {
    if (item.icon) {
        return "<span class=\"" + item.icon + " dhx_combobox-options__icon\"></span> <span class=\"dhx_combobox-options__value\">" + item.value + "</span>";
    }
    if (item.src) {
        return "<img src=\"" + item.src + "\" class=\"dhx_combobox-options__image\" alt=" + item.value + "></img> <span class=\"dhx_combobox-options__value\">" + item.value + "</span>";
    }
    return "<span class=\"dhx_combobox-options__value\">" + item.value + "</span>";
};
var Combobox = /** @class */ (function (_super) {
    __extends(Combobox, _super);
    function Combobox(element, config) {
        var _this = _super.call(this, element, core_1.extend({
            template: template,
            listHeight: 224,
            itemHeight: 36,
            disabled: false,
            readOnly: false,
        }, config)) || this;
        _this.config.itemsCount = _this.config.itemsCount || _this.config.showItemsCount; // TODO: remove suite_7.0
        _this.config.helpMessage = _this.config.helpMessage || _this.config.help; // TODO: remove suite_7.0
        if (_this.config.cellHeight && _this.config.itemHeight === 36) {
            _this.config.itemHeight = _this.config.cellHeight; // TODO: remove suite_7.0
        }
        if (_this.config.labelInline) {
            _this.config.labelPosition = "left"; // TODO: remove suite_7.0
        }
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({});
            _this.data.parse(_this.config.data);
        }
        else if (_this.config.data) {
            _this.data = _this.config.data;
            _this.events = new events_1.EventSystem(_this);
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({});
        }
        _this.popup = new ts_popup_1.Popup();
        _this.popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            _this.paint();
        });
        _this.popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            if (_this.config.multiselection) {
                _this._state.value = "";
            }
            _this.paint();
        });
        _this.popup.events.on(ts_popup_1.PopupEvents.beforeHide, function (fromOuterClick) {
            fromOuterClick && _this._hideOptions();
        });
        if (_this.config.readonly || _this.config.readOnly) {
            _this.config.readOnly = _this.config.readOnly || _this.config.readonly;
            _this._keyListener = new keyListener_1.KeyListener();
        }
        _this._state = {
            value: "",
            ignoreNext: false,
            canDelete: false,
            unselectActive: false,
            currentState: types_2.ComboState.default,
        };
        _this._initHandlers();
        _this._createLayout();
        if (_this.config.value) {
            _this._setValue(_this.config.value, true);
        }
        _this._initEvents();
        var vnode = dom_1.create({
            render: function () { return _this._draw(); },
            hooks: {
                didRedraw: function () {
                    if (_this.popup.isVisible()) {
                        _this.focus();
                        _this._configurePopup();
                    }
                },
            },
        });
        // const container = toNode(element);
        _this.mount(element, vnode);
        return _this;
    }
    Combobox.prototype.focus = function () {
        if (this.config.disabled)
            return false;
        var rootView = this.getRootView();
        rootView.refs.input.el.focus();
    };
    Combobox.prototype.blur = function () {
        if (this.config.disabled)
            return false;
        var rootView = this.getRootView();
        rootView.refs.input.el.blur();
        this.popup.hide();
    };
    Combobox.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    Combobox.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Combobox.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    Combobox.prototype.clear = function () {
        if (this.config.disabled) {
            return false;
        }
        this.list.selection.remove();
        this._state.value = "";
        this._filter();
        this.paint();
    };
    Combobox.prototype.getValue = function (asArray) {
        var ids = this.list.selection.getId();
        if (asArray) {
            return core_1.wrapBox(ids);
        }
        return Array.isArray(ids) ? ids.join(",") : ids;
    };
    Combobox.prototype.setValue = function (ids) {
        return this._setValue(ids);
    };
    Combobox.prototype.destructor = function () {
        this.popup && this.popup.destructor();
        this.events && this.events.clear();
        this.list && this.list.destructor();
        this._helper && this._helper.destructor();
        this._layout && this._layout.destructor();
        this.config = this.events = this.list = this.popup = null;
        this._helper = this._keyListener = this._handlers = this._state = this._uid = this._isPopupConfiqureted = null;
        this.unmount();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Combobox.prototype.setState = function (state) {
        switch (state) {
            case "success":
                this._state.currentState = types_2.ComboState.success;
                break;
            case "error":
                this._state.currentState = types_2.ComboState.error;
                break;
            default:
                this._state.currentState = types_2.ComboState.default;
                break;
        }
        this.paint();
    };
    Combobox.prototype._setValue = function (ids, silent) {
        var _this = this;
        if (silent === void 0) { silent = false; }
        if (this.config.disabled || !this._exsistId(ids)) {
            return false;
        }
        this._filter();
        if (!this.config.multiselection) {
            this.list.selection.remove();
            this._state.value = "";
        }
        if (this.config.multiselection) {
            if (typeof ids === "string") {
                ids = ids.split(",");
            }
            if (typeof ids === "number") {
                ids = [ids];
            }
            ids.forEach(function (id) {
                _this.list.selection.add(id, false, false, silent);
            });
        }
        else {
            var id = core_1.unwrapBox(ids);
            this.list.selection.add(id, false, false, silent);
            var item = this.data.getItem(id);
            if (item) {
                this._state.value = this._getItemText(item);
            }
        }
        this.paint();
    };
    Combobox.prototype._createLayout = function () {
        var list = (this.list = new ts_list_1.List(null, {
            template: this.config.template,
            virtual: this.config.virtual,
            keyNavigation: false,
            multiselection: this.config.multiselection,
            itemHeight: this.config.itemHeight,
            height: this.config.listHeight,
            data: this.data,
        }));
        var layout = (this._layout = new ts_layout_1.Layout(this.popup.getContainer(), {
            css: "dhx_combobox-options dhx_combobox__options",
            rows: [
                {
                    id: "select-unselect-all",
                    hidden: !this.config.multiselection || !this.config.selectAllButton,
                },
                { id: "list", height: "content" },
                {
                    id: "not-found",
                    hidden: true,
                },
            ],
            on: {
                click: {
                    ".dhx_combobox__action-select-all": this._handlers.selectAll,
                },
            },
        }));
        layout.getCell("list").attach(list);
        if (this.config.multiselection && this.config.selectAllButton) {
            layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
        }
    };
    Combobox.prototype._initHandlers = function () {
        var _this = this;
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        this._handlers = {
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target, {
                    mode: _this.config.labelPosition === "left" ? "bottom" : "right",
                });
            },
            selectAll: function () {
                if (_this._state.unselectActive) {
                    _this.list.selection.remove();
                    if (_this.config.selectAllButton) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                        _this._state.unselectActive = false;
                    }
                }
                else {
                    _this.data.filter();
                    _this.list.selection.add();
                    if (_this.config.selectAllButton) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.unselectAllView);
                        _this._state.unselectActive = true;
                    }
                }
                _this._changePopupPosition();
                _this.paint();
            },
            onkeydown: function (e) {
                if (e.key === "Tab" && _this.popup.isVisible()) {
                    _this._hideOptions();
                }
                else {
                    if (!_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.DOWN_ARROW) {
                        _this._showOptions();
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.RIGHT_ARROW) {
                        if (_this.config.readOnly && !_this.config.multiselection) {
                            _this.list.moveFocus(ts_list_1.MOVE_DOWN);
                            e.preventDefault();
                        }
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.LEFT_ARROW) {
                        if (_this.config.readOnly && !_this.config.multiselection) {
                            _this.list.moveFocus(ts_list_1.MOVE_UP);
                            e.preventDefault();
                        }
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.DOWN_ARROW) {
                        _this.list.moveFocus(ts_list_1.MOVE_DOWN);
                        e.preventDefault();
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.UP_ARROW) {
                        _this.list.moveFocus(ts_list_1.MOVE_UP);
                        e.preventDefault();
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.ESC) {
                        _this._hideOptions();
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.ENTER) {
                        _this.setValue(_this.list.getFocus());
                        if (!_this.config.multiselection)
                            _this._hideOptions();
                    }
                }
                _this.events.fire(types_2.ComboboxEvents.keydown, [e, _this.popup.isVisible() && _this.list.getFocus()]);
            },
            onkeyup: function (e) {
                if (!_this.config.multiselection || _this.config.itemsCount) {
                    return;
                }
                if (_this._state.ignoreNext) {
                    _this._state.ignoreNext = false;
                    return;
                }
                if (e.which === keycodes_1.KEY_CODES.BACKSPACE &&
                    !_this._state.value &&
                    _this.config.multiselection &&
                    _this.list.selection.getId().length) {
                    var selected = _this.list.selection.getId();
                    var id = selected[selected.length - 1];
                    _this.list.selection.remove(id);
                    _this._changePopupPosition();
                    _this.paint();
                }
            },
            oninput: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                var input = e.target;
                var value = input.value;
                _this.events.fire(types_2.ComboboxEvents.input, [value]);
                _this._state.value = value;
                _this._filter();
                if (!value.length) {
                    _this._state.ignoreNext = true;
                    _this._state.canDelete = true;
                }
                else {
                    _this._state.canDelete = false;
                }
                if (!_this.config.multiselection) {
                    _this.list.selection.remove();
                    _this.paint();
                }
                if (!_this.popup.isVisible()) {
                    _this._showOptions();
                }
                _this._updatePopup();
            },
            oninputclick: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                _this.focus();
                if (e.target.classList.contains("dhx_combobox__action-remove")) {
                    var id = html_1.locate(e);
                    if (!id) {
                        return;
                    }
                    _this.list.selection.remove(id);
                    _this._changePopupPosition();
                    _this.paint();
                    return;
                }
                if (e.target.classList.contains("dhx_combobox__action-clear-all")) {
                    _this.list.selection.getId().forEach(function (id) { return _this.list.selection.remove(id); });
                    if (_this.config.selectAllButton && _this._state.unselectActive) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                        _this._state.unselectActive = false;
                    }
                    _this.paint();
                    return;
                }
                e.preventDefault();
                if (!_this.popup.isVisible()) {
                    _this._showOptions();
                    return;
                }
                _this.focus();
            },
            toggleIcon: function () {
                _this.focus();
                if (_this.popup.isVisible()) {
                    _this._hideOptions();
                }
                else {
                    _this._showOptions();
                }
            },
            onfocus: function () { var _a; return (_a = _this.events) === null || _a === void 0 ? void 0 : _a.fire(types_2.ComboboxEvents.focus, []); },
            onblur: function () { var _a; return (_a = _this.events) === null || _a === void 0 ? void 0 : _a.fire(types_2.ComboboxEvents.blur, []); },
        };
    };
    Combobox.prototype._initEvents = function () {
        var _this = this;
        this.data.events.on(ts_data_1.DataEvents.load, function () {
            if (_this.config.value) {
                _this._setValue(_this.config.value, true);
            }
        });
        this.list.events.on(ts_list_1.ListEvents.click, function () {
            if (!_this.config.multiselection) {
                _this._hideOptions();
            }
            _this._changePopupPosition();
        });
        this.list.selection.events.on(types_1.SelectionEvents.afterSelect, function () {
            var value = _this.getValue(_this.config.multiselection);
            _this.events.fire(types_2.ComboboxEvents.change, [value]);
            _this._updateSelectedItem(value);
        });
        this.list.selection.events.on(types_1.SelectionEvents.afterUnSelect, function () {
            var multi = _this.config.multiselection;
            if (_this.config.readOnly && !multi)
                return;
            var value = _this.getValue(multi);
            _this.events.fire(types_2.ComboboxEvents.change, [value]);
            if (multi)
                _this._updateSelectedItem(value);
        });
        this.popup.events.on(ts_popup_1.PopupEvents.beforeShow, function () {
            if (!_this.popup.isVisible() && !_this._isPopupConfiqureted) {
                _this._configurePopup();
                return false;
            }
        });
        if (this.config.readOnly) {
            this.popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
                if (_this._state.value) {
                    var id = _this.list.selection.getId();
                    _this.list.setFocus(id);
                }
                else {
                    _this.list.setFocus(_this.data.getId(0));
                }
                _this._keyListener.startNewListen(function (val) { return _this._findBest(val); });
            });
        }
    };
    Combobox.prototype._showOptions = function () {
        if (!this.events.fire(types_2.ComboboxEvents.beforeOpen)) {
            return;
        }
        if (this._state.value.length) {
            this._state.canDelete = true;
        }
        this._filter();
        if (this._configurePopup()) {
            this.events.fire(types_2.ComboboxEvents.open);
            this.events.fire(types_2.ComboboxEvents.afterOpen);
        }
    };
    Combobox.prototype._configurePopup = function () {
        this._isPopupConfiqureted = true;
        var rootView = this.getRootView();
        if (!rootView || !rootView.refs || !rootView.refs.holder) {
            return false;
        }
        if (!this.popup.isVisible()) {
            this._updatePopup();
        }
        return true;
    };
    Combobox.prototype._hideOptions = function () {
        var _this = this;
        if (!this.events.fire(types_2.ComboboxEvents.beforeClose)) {
            return;
        }
        if (this.config.readOnly) {
            this._keyListener.endListen();
        }
        this.list.setFocus(this.data.getId(0));
        if (!this.config.multiselection && !this.config.readOnly && !this.list.selection.contains()) {
            this._state.value = "";
        }
        dom_1.awaitRedraw().then(function () { return _this.popup.isVisible() && _this.popup.hide(); });
        this.events.fire(types_2.ComboboxEvents.afterClose);
        this.events.fire(types_2.ComboboxEvents.close); // TODO: remove suite_7.0
        this._filter();
        this.paint();
    };
    Combobox.prototype._filter = function () {
        var _this = this;
        if (this.config.readOnly) {
            return;
        }
        this.data.filter(function (item) {
            return _this.config.filter
                ? _this.config.filter(item, _this._state.value)
                : core_1.isEqualString(_this._state.value, _this._getItemText(item));
        });
        if (this.config.multiselection) {
            this.list.setFocus(this.data.getId(0));
        }
        else {
            var index = this.data.getIndex(this.list.selection.getId());
            this.list.setFocus(this.data.getId(index > -1 ? index : 0));
        }
        if (this.data.getLength() === 0) {
            if (this.config.multiselection && this.config.selectAllButton) {
                this._layout.getCell("select-unselect-all").hide();
            }
            this._layout.getCell("list").hide();
            this._layout.getCell("not-found").attach(helper_1.emptyListView);
            this._layout.getCell("not-found").show();
        }
        else {
            if (this.config.multiselection && this.config.selectAllButton) {
                this._layout.getCell("select-unselect-all").show();
            }
            if (this._layout.getCell("not-found").isVisible()) {
                this._layout.getCell("list").show();
                this._layout.getCell("not-found").hide();
            }
        }
    };
    Combobox.prototype._findBest = function (value) {
        var _this = this;
        var best = this.data.find(function (item) { return core_1.isEqualString(value, _this._getItemText(item)); });
        if (!best) {
            return;
        }
        if (this.list.selection.getId() === best.id) {
            return;
        }
        this.list.setFocus(best.id);
        this.paint();
    };
    Combobox.prototype._exsistId = function (id) {
        var _this = this;
        if (id instanceof Array) {
            return id.every(function (i) { return _this.data.exists(i); });
        }
        return this.data.exists(id);
    };
    Combobox.prototype._draw = function () {
        if (!this.config)
            return dom_1.el("div");
        var _a = this.config, multiselection = _a.multiselection, labelPosition = _a.labelPosition, hiddenLabel = _a.hiddenLabel, required = _a.required, disabled = _a.disabled, css = _a.css, helpMessage = _a.helpMessage, readOnly = _a.readOnly, placeholder = _a.placeholder;
        var item = multiselection ? null : this.data.getItem(this.list.selection.getId());
        var showPlaceholder = !this.list.selection.getId() ||
            (typeof this.list.selection.getId() === "object" &&
                this.list.selection.getId().length === 0);
        var labelStyle = html_1.getLabelStyle(this.config);
        return dom_1.el("div", {
            dhx_widget_id: this._uid,
            onkeydown: this._handlers.onkeydown,
            onkeyup: this._handlers.onkeyup,
            class: "dhx_widget dhx_combobox" +
                (labelPosition === "left" ? " dhx_combobox--label-inline" : "") +
                (hiddenLabel ? " dhx_combobox--sr_only" : "") +
                (required ? " dhx_combobox--required" : "") +
                (disabled ? " dhx_combobox--disabled" : "") +
                (css ? " " + css : ""),
        }, [
            labelStyle
                ? dom_1.el("label.dhx_label.dhx_combobox__label", {
                    style: labelStyle.style,
                    class: helpMessage ? "dhx_label--with-help" : "",
                    onclick: this._handlers.oninputclick,
                }, helpMessage
                    ? [
                        (labelStyle.label || required) &&
                            dom_1.el("span.dhx_label__holder", labelStyle.label),
                        dom_1.el("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                            tabindex: "0",
                            role: "button",
                            onclick: this._handlers.showHelper,
                            id: "dhx_label__help_" + this._uid,
                        }),
                    ]
                    : labelStyle.label)
                : null,
            dom_1.el("div.dhx_combobox-input-box" +
                // (this.popup.isVisible() ? ".dhx_combobox-input-box" : "") +
                (disabled ? ".dhx_combobox-input-box--disabled" : "") +
                (readOnly ? ".dhx_combobox-input-box--readonly" : "") +
                (this._state.currentState === types_2.ComboState.error
                    ? ".dhx_combobox-input-box--state_error"
                    : "") +
                (this._state.currentState === types_2.ComboState.success
                    ? ".dhx_combobox-input-box--state_success"
                    : ""), {
                _ref: "holder",
            }, [
                dom_1.el("div.dhx_combobox-input__icon", {
                    onclick: this._handlers.toggleIcon,
                }, [
                    dom_1.el("span" +
                        (this.popup.isVisible() ? ".dxi.dxi-menu-up" : ".dxi.dxi-menu-down")),
                ]),
                dom_1.el("div.dhx_combobox-input-list-wrapper", {
                    onclick: this._handlers.oninputclick,
                }, [
                    dom_1.el("ul.dhx_combobox-input-list", __spreadArrays(this._drawSelectedItems(), [
                        dom_1.el("li.dhx_combobox-input-list__item.dhx_combobox-input-list__item--input", [
                            dom_1.el("input.dhx_combobox-input", {
                                oninput: this._handlers.oninput,
                                onfocus: this._handlers.onfocus,
                                onblur: this._handlers.onblur,
                                _ref: "input",
                                _key: this._uid,
                                type: "text",
                                placeHolder: showPlaceholder && placeholder ? placeholder : undefined,
                                value: readOnly && item
                                    ? this._getItemText(item)
                                    : this._state.value,
                                readOnly: readOnly || disabled,
                                required: required,
                                "aria-label": readOnly
                                    ? "Select value"
                                    : "Type or select value",
                                "aria-describedby": helpMessage
                                    ? "dhx_label__help_" + this._uid
                                    : null,
                                "aria-expanded": true,
                            }),
                        ]),
                    ])),
                ]),
            ]),
        ]);
    };
    Combobox.prototype._drawSelectedItems = function () {
        var _this = this;
        if (!this.config.multiselection) {
            return [];
        }
        if (this.config.itemsCount) {
            var count = this.list.selection.getId().length;
            return count
                ? [
                    dom_1.el("li.dhx_combobox-input-list__item.dhx_combobox-tag", [
                        dom_1.el("span.dhx_combobox-tag__value", itemsCountTemplate(count, this.config.itemsCount)),
                        dom_1.el("button.dhx_button.dhx_combobox-tag__action.dhx_combobox__action-clear-all", { "aria-label": "clear all" }, [dom_1.el("span.dhx_button__icon.dxi.dxi-close-circle")]),
                    ]),
                ]
                : [];
        }
        return this.list.selection.getId().map(function (id) {
            var item = _this.data.getItem(id);
            if (!item) {
                return null;
            }
            return dom_1.el("li.dhx_combobox-input-list__item.dhx_combobox-tag", { dhx_id: id }, [
                _this._drawImageOrIcon(item),
                dom_1.el("span.dhx_combobox-tag__value", _this._getItemText(item)),
                dom_1.el("button.dhx_button.dhx_button--icon.dhx_combobox-tag__action.dhx_combobox__action-remove", {
                    type: "button",
                    "aria-label": "remove",
                }, [dom_1.el("span.dhx_button__icon.dxi.dxi-close-circle")]),
            ]);
        });
    };
    Combobox.prototype._drawImageOrIcon = function (item) {
        if (item.src) {
            return dom_1.el("img.dhx_combobox-tag__image", { src: item.src, alt: "" });
        }
        else if (item.icon) {
            return dom_1.el("span.dhx_combobox-tag__icon", { class: item.icon });
        }
        return null;
    };
    Combobox.prototype._getItemText = function (item) {
        if (!item) {
            return null;
        }
        return item.value;
    };
    Combobox.prototype._updateSelectedItem = function (id) {
        var _a;
        if (this.config.multiselection) {
            if (this.config.selectAllButton &&
                !this._state.unselectActive &&
                this.data.getLength() === id.length) {
                this._layout.getCell("select-unselect-all").attach(helper_1.unselectAllView);
                this._state.unselectActive = true;
            }
            else if (this.config.selectAllButton && this._state.unselectActive) {
                this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                this._state.unselectActive = false;
            }
            if (this._state.value) {
                this._state.value = "";
                this._state.canDelete = id.length === 0;
                this._filter();
            }
        }
        else {
            this._state.value = (_a = this._getItemText(this.data.getItem(id))) !== null && _a !== void 0 ? _a : "";
        }
        this.paint();
    };
    Combobox.prototype._changePopupPosition = function () {
        var _this = this;
        if (this.config.multiselection) {
            dom_1.awaitRedraw().then(function () {
                _this._updatePopup();
            });
        }
    };
    Combobox.prototype._updatePopup = function () {
        var holderNode = this.getRootView().refs.holder.el;
        this.popup.getContainer().style.width = holderNode.offsetWidth + "px";
        var itemsHeight = this.data.getLength() * (this.config.itemHeight || 36);
        if (typeof this.config.listHeight === "string" && this.config.listHeight.includes("px")) {
            this.config.listHeight = this.config.listHeight.replace("px", "");
        }
        var listHeight = itemsHeight < this.config.listHeight ? itemsHeight : this.config.listHeight;
        this.popup.getContainer().style.height =
            (this.config.selectAllButton && this.config.multiselection
                ? listHeight + 33
                : listHeight) + "px";
        this.popup.show(holderNode, { mode: "bottom" });
    };
    return Combobox;
}(view_1.View));
exports.Combobox = Combobox;


/***/ }),

/***/ "../ts-combobox/sources/ProCombobox.ts":
/*!*********************************************!*\
  !*** ../ts-combobox/sources/ProCombobox.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Combobox_1 = __webpack_require__(/*! ./Combobox */ "../ts-combobox/sources/Combobox.ts");
var ts_list_1 = __webpack_require__(/*! @dhx/ts-list */ "../ts-list/index.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var helper_1 = __webpack_require__(/*! ./helper */ "../ts-combobox/sources/helper.ts");
var ProCombobox = /** @class */ (function (_super) {
    __extends(ProCombobox, _super);
    function ProCombobox(element, config) {
        return _super.call(this, element, config) || this;
    }
    ProCombobox.prototype._createLayout = function () {
        var list = (this.list = new ts_list_1.ProList(null, {
            template: this.config.template,
            virtual: this.config.virtual,
            keyNavigation: false,
            multiselection: this.config.multiselection,
            itemHeight: this.config.itemHeight,
            height: this.config.listHeight,
            data: this.data,
        }));
        var layout = (this._layout = new ts_layout_1.ProLayout(this.popup.getContainer(), {
            css: "dhx_combobox-options dhx_combobox__options",
            rows: [
                {
                    id: "select-unselect-all",
                    hidden: !this.config.multiselection || !this.config.selectAllButton,
                },
                { id: "list", height: "content" },
                {
                    id: "not-found",
                    hidden: true,
                },
            ],
            on: {
                click: {
                    ".dhx_combobox__action-select-all": this._handlers.selectAll,
                },
            },
        }));
        layout.getCell("list").attach(list);
        if (this.config.multiselection && this.config.selectAllButton) {
            layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
        }
    };
    return ProCombobox;
}(Combobox_1.Combobox));
exports.ProCombobox = ProCombobox;


/***/ }),

/***/ "../ts-combobox/sources/helper.ts":
/*!****************************************!*\
  !*** ../ts-combobox/sources/helper.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-combobox/sources/locales/en.ts");
function selectAllView() {
    return dom_1.el(".dhx_list-item.dhx_combobox-options__item.dhx_combobox-options__item--select-all.dhx_combobox__action-select-all", en_1.default.selectAll);
}
exports.selectAllView = selectAllView;
function unselectAllView() {
    return dom_1.el(".dhx_list-item.dhx_combobox-options__item.dhx_combobox-options__item--select-all.dhx_combobox__action-select-all", en_1.default.unselectAll);
}
exports.unselectAllView = unselectAllView;
function emptyListView() {
    return dom_1.el("ul.dhx_list", [dom_1.el("li.dhx_list-item.dhx_combobox-options__item", {}, en_1.default.notFound)]);
}
exports.emptyListView = emptyListView;


/***/ }),

/***/ "../ts-combobox/sources/keyListener.ts":
/*!*********************************************!*\
  !*** ../ts-combobox/sources/keyListener.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CLEAR_TIMEOUT = 2000;
var KeyListener = /** @class */ (function () {
    function KeyListener() {
        var _this = this;
        this._sequence = "";
        document.addEventListener("keydown", function (e) {
            if (!_this._isActive) {
                return;
            }
            var key = e.key;
            if (key === "Backspace" && _this._sequence.length > 0) {
                _this._sequence = _this._sequence.slice(0, _this._sequence.length - 1);
                _this._change();
            }
            if (key.length < 2) {
                // handle only single key value
                _this._sequence += key;
                _this._change();
            }
        });
    }
    KeyListener.prototype.startNewListen = function (action) {
        this._isActive = true;
        this._sequence = "";
        this._currentAction = action;
    };
    KeyListener.prototype.endListen = function () {
        this._currentAction = null;
        this.reset();
        this._isActive = false;
    };
    KeyListener.prototype.reset = function () {
        this._sequence = "";
    };
    KeyListener.prototype._change = function () {
        this._currentAction(this._sequence);
        this._addClearTimeout();
    };
    KeyListener.prototype._addClearTimeout = function () {
        var _this = this;
        if (this._clearTimeout) {
            clearTimeout(this._clearTimeout);
        }
        this._clearTimeout = setTimeout(function () {
            _this.reset();
            _this._clearTimeout = null;
        }, CLEAR_TIMEOUT);
    };
    return KeyListener;
}());
exports.KeyListener = KeyListener;


/***/ }),

/***/ "../ts-combobox/sources/locales/en.ts":
/*!********************************************!*\
  !*** ../ts-combobox/sources/locales/en.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    notFound: "Not Found",
    selectAll: "Select All",
    unselectAll: "Unselect All",
    selectedItems: "selected items",
};


/***/ }),

/***/ "../ts-combobox/sources/types.ts":
/*!***************************************!*\
  !*** ../ts-combobox/sources/types.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ComboboxEvents;
(function (ComboboxEvents) {
    ComboboxEvents["change"] = "change";
    ComboboxEvents["focus"] = "focus";
    ComboboxEvents["blur"] = "blur";
    ComboboxEvents["keydown"] = "keydown";
    ComboboxEvents["input"] = "input";
    ComboboxEvents["beforeOpen"] = "beforeOpen";
    ComboboxEvents["afterOpen"] = "afterOpen";
    ComboboxEvents["beforeClose"] = "beforeClose";
    ComboboxEvents["afterClose"] = "afterClose";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ComboboxEvents["open"] = "open";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ComboboxEvents["close"] = "close";
})(ComboboxEvents = exports.ComboboxEvents || (exports.ComboboxEvents = {}));
var ComboState;
(function (ComboState) {
    ComboState[ComboState["default"] = 0] = "default";
    ComboState[ComboState["error"] = 1] = "error";
    ComboState[ComboState["success"] = 2] = "success";
})(ComboState = exports.ComboState || (exports.ComboState = {}));


/***/ }),

/***/ "../ts-common/FocusManager.ts":
/*!************************************!*\
  !*** ../ts-common/FocusManager.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! ./html */ "../ts-common/html.ts");
var FocusManager = /** @class */ (function () {
    function FocusManager() {
        var _this = this;
        this._initHandler = function (e) { return (_this._activeWidgetId = html_1.locate(e, "dhx_widget_id")); };
        document.addEventListener("focusin", this._initHandler);
        document.addEventListener("click", this._initHandler);
    }
    FocusManager.prototype.getFocusId = function () {
        return this._activeWidgetId;
    };
    FocusManager.prototype.setFocusId = function (id) {
        this._activeWidgetId = id;
    };
    return FocusManager;
}());
exports.focusManager = new FocusManager();


/***/ }),

/***/ "../ts-common/KeyManager.ts":
/*!**********************************!*\
  !*** ../ts-common/KeyManager.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FocusManager_1 = __webpack_require__(/*! ./FocusManager */ "../ts-common/FocusManager.ts");
var html_1 = __webpack_require__(/*! ./html */ "../ts-common/html.ts");
function getHotKeyCode(code) {
    var matches = code.toLowerCase().match(/\w+/g);
    var comp = 0;
    var key = "";
    for (var i = 0; i < matches.length; i++) {
        var check = matches[i];
        if (check === "ctrl") {
            comp += 4;
        }
        else if (check === "shift") {
            comp += 2;
        }
        else if (check === "alt") {
            comp += 1;
        }
        else {
            key = check;
        }
    }
    return comp + key;
}
var ie_key_map = {
    Up: "arrowUp",
    Down: "arrowDown",
    Right: "arrowRight",
    Left: "arrowLeft",
    Esc: "escape",
    Spacebar: "space",
};
var KeyManager = /** @class */ (function () {
    function KeyManager(beforeCall) {
        var _this = this;
        this._keysStorage = {};
        this._initHandler = function (e) {
            var key;
            if ((e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90)) {
                key = String.fromCharCode(e.which);
            }
            else {
                var keyName = e.which === 32 ? e.code : e.key;
                key = html_1.isIE() ? ie_key_map[keyName] || keyName : keyName;
            }
            var actions = _this._keysStorage[(e.ctrlKey || e.metaKey ? 4 : 0) +
                (e.shiftKey ? 2 : 0) +
                (e.altKey ? 1 : 0) +
                (key && key.toLowerCase())];
            if (actions) {
                for (var i = 0; i < actions.length; i++) {
                    if (_this._beforeCall && _this._beforeCall(e, FocusManager_1.focusManager.getFocusId()) === false) {
                        return;
                    }
                    actions[i].handler(e);
                }
            }
        };
        if (beforeCall) {
            this._beforeCall = beforeCall;
        }
        document.addEventListener("keydown", this._initHandler);
    }
    KeyManager.prototype.destructor = function () {
        document.removeEventListener("keydown", this._initHandler);
        this.removeHotKey();
    };
    KeyManager.prototype.addHotKey = function (key, handler) {
        var code = getHotKeyCode(key);
        if (!this._keysStorage[code]) {
            this._keysStorage[code] = [];
        }
        this._keysStorage[code].push({ handler: handler });
    };
    KeyManager.prototype.removeHotKey = function (key, handler) {
        var _this = this;
        if (key) {
            if (key && handler) {
                var code_1 = getHotKeyCode(key);
                var functionToString_1 = function (fun) {
                    return fun
                        .toString()
                        .replace(/\n/g, "")
                        .replace(/\s/g, "");
                };
                this._keysStorage[code_1].forEach(function (existHotKey, i) {
                    if (functionToString_1(existHotKey.handler) === functionToString_1(handler)) {
                        delete _this._keysStorage[code_1][i];
                        _this._keysStorage[code_1] = _this._keysStorage[code_1].filter(function (el) { return el; });
                    }
                });
            }
            else {
                var code = getHotKeyCode(key);
                delete this._keysStorage[code];
            }
        }
        else {
            this._keysStorage = {};
        }
    };
    KeyManager.prototype.exist = function (key) {
        var code = getHotKeyCode(key);
        return !!this._keysStorage[code];
    };
    return KeyManager;
}());
exports.KeyManager = KeyManager;


/***/ }),

/***/ "../ts-common/ScrollView.ts":
/*!**********************************!*\
  !*** ../ts-common/ScrollView.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! ./core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! ./dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! ./html */ "../ts-common/html.ts");
exports.scrollViewConfig = {
    enable: false,
    autoHide: true,
    timeout: 1000,
    scrollHandler: function () { },
};
var ScrollView = /** @class */ (function () {
    function ScrollView(getRootView, config) {
        var _a;
        var _this = this;
        if (config === void 0) { config = {}; }
        this.config = core_1.extend({
            enable: exports.scrollViewConfig.enable,
            autoHide: exports.scrollViewConfig.autoHide,
            timeout: exports.scrollViewConfig.timeout,
            scrollHandler: exports.scrollViewConfig.scrollHandler,
        }, config);
        this._wheelName = html_1.isIE() ? "onmousewheel" : "onwheel";
        this._getRootView = getRootView;
        this._scrollYTop = this._scrollXLeft = this._runnerYTop = this._runnerXLeft = this._runnerHeight = this._runnerWidth = 0;
        this._visibleYArea = this._visibleXArea = 1;
        this._scrollWidth = html_1.getScrollbarWidth();
        this._scrollHeight = html_1.getScrollbarHeight();
        this._handlers = (_a = {
                onscroll: function (e) {
                    _this.config.scrollHandler(e);
                    _this.update();
                }
            },
            _a[this._wheelName] = function (e) {
                var isY = !!html_1.locateNodeByClassName(e.target, "y-scroll");
                e.preventDefault();
                var sign = (e.deltaY || -e.wheelDelta) > 0 ? 1 : -1;
                var delta = sign * 40;
                var area = _this._getRefs().area;
                if (isY) {
                    var maxBottom = area.scrollHeight - _this._runnerHeight;
                    var newScrollTop = _this._scrollYTop + delta;
                    if (newScrollTop < 0) {
                        area.scrollTop = 0;
                    }
                    else if (newScrollTop > maxBottom) {
                        area.scrollTop = maxBottom;
                    }
                    else {
                        area.scrollTop = newScrollTop;
                    }
                }
                else {
                    var maxRight = area.scrollWidth - _this._runnerWidth;
                    var newScrollLeft = _this._scrollXLeft + delta;
                    if (newScrollLeft < 0) {
                        area.scrollLeft = 0;
                    }
                    else if (newScrollLeft > maxRight) {
                        area.scrollLeft = maxRight;
                    }
                    else {
                        area.scrollLeft = newScrollLeft;
                    }
                }
                _this.update();
            },
            _a.onmousedownRunner = function (mouseDownEv) {
                mouseDownEv.preventDefault();
                var isY = !!html_1.locateNodeByClassName(mouseDownEv.target, "y-scroll");
                var _a = _this._getRefs(), area = _a.area, runnerY = _a.runnerY, runnerX = _a.runnerX;
                var rect = area.getBoundingClientRect();
                var top = rect.top + window.pageYOffset;
                var bottom = rect.bottom + window.pageYOffset;
                var maxBottom = area.scrollHeight - _this._runnerHeight;
                var deltaY = mouseDownEv.pageY - runnerY.getBoundingClientRect().top - window.pageYOffset;
                var left = rect.left + window.pageXOffset;
                var right = rect.right + window.pageXOffset;
                var maxRight = area.scrollWidth - _this._runnerWidth;
                var deltaX = mouseDownEv.pageX - runnerX.getBoundingClientRect().left - window.pageXOffset;
                var mouseMove = function (e) {
                    if (isY) {
                        var y = e.pageY - deltaY;
                        if (y <= top) {
                            area.scrollTop = 0;
                        }
                        else if (y > bottom) {
                            area.scrollTop = maxBottom;
                        }
                        else {
                            area.scrollTop = (y - top) / _this._visibleYArea;
                        }
                    }
                    else {
                        var x = e.pageX - deltaX;
                        if (x <= left) {
                            area.scrollLeft = 0;
                        }
                        else if (x > right) {
                            area.scrollLeft = maxRight;
                        }
                        else {
                            area.scrollLeft = (x - left) / _this._visibleXArea;
                        }
                    }
                    _this.update();
                };
                var mouseUp = function () {
                    document.removeEventListener("mousemove", mouseMove);
                    document.removeEventListener("mouseup", mouseUp);
                    document.body.classList.remove("dhx-no-select");
                };
                document.body.classList.add("dhx-no-select");
                document.addEventListener("mousemove", mouseMove);
                document.addEventListener("mouseup", mouseUp);
            },
            _a.onmousedownArea = function (e) {
                if (html_1.locateNodeByClassName(e, "scroll-runner"))
                    return;
                e.preventDefault();
                var isY = !!html_1.locateNodeByClassName(e.target, "y-scroll");
                var _a = _this._getRefs(), area = _a.area, runnerY = _a.runnerY, runnerX = _a.runnerX;
                if (isY) {
                    area.scrollTop += (e.pageY - runnerY.getBoundingClientRect().top) / _this._visibleYArea;
                }
                else {
                    area.scrollLeft += (e.pageX - runnerX.getBoundingClientRect().left) / _this._visibleXArea;
                }
                _this.update();
            },
            _a.onmouseenter = function (e) {
                if (html_1.locateNodeByClassName(e, "scroll-runner"))
                    return;
                var refs = _this._getRefs();
                if (!refs) {
                    return;
                }
                var isY = !!html_1.locateNodeByClassName(e.target, "y-scroll");
                var areaX = refs.areaX, areaY = refs.areaY;
                if (isY && _this._runnerHeight > 0) {
                    areaY.style.background = "#eee";
                }
                else if (!isY && _this._runnerWidth > 0) {
                    areaX.style.background = "#eee";
                }
            },
            _a.onmouseleave = function (e) {
                if (html_1.locateNodeByClassName(e, "scroll-runner"))
                    return;
                var refs = _this._getRefs();
                if (!refs) {
                    return;
                }
                var isY = !!html_1.locateNodeByClassName(e.target, "y-scroll");
                var areaX = refs.areaX, areaY = refs.areaY;
                if (isY && _this._runnerHeight > 0) {
                    areaY.style.background = "transparent";
                }
                else if (!isY && _this._runnerWidth > 0) {
                    areaX.style.background = "transparent";
                }
            },
            _a);
    }
    ScrollView.prototype.enable = function () {
        this.config.enable = true;
        this._getRootView().redraw();
    };
    ScrollView.prototype.disable = function () {
        this.config.enable = false;
        this._getRootView().redraw();
    };
    ScrollView.prototype.render = function (element, uid) {
        var _a, _b;
        var _this = this;
        if (uid === void 0) { uid = ""; }
        if (this._scrollWidth === 0 || !this.config.enable || !element.length) {
            return element;
        }
        if (uid)
            this._uid = uid;
        var scrollView = this.config.enable
            ? [
                dom_1.el(".y-scroll", (_a = {},
                    _a[this._wheelName] = this._handlers[this._wheelName],
                    _a._ref = uid ? "scroll-y-area-" + uid : "scroll-y-area",
                    _a.onmousedown = this._handlers.onmousedownArea,
                    _a.onmouseenter = this._handlers.onmouseenter,
                    _a.onmouseleave = this._handlers.onmouseleave,
                    _a.style = {
                        width: "6px",
                        height: "100%",
                        right: 0,
                        top: 0,
                        position: "absolute",
                    },
                    _a), [
                    dom_1.el(".scroll-runner", {
                        _ref: uid ? "scroll-y-runner-" + uid : "scroll-y-runner",
                        onmousedown: this._handlers.onmousedownRunner,
                        style: {
                            height: this._runnerHeight + "px",
                            top: this._runnerYTop,
                        },
                    }),
                ]),
                dom_1.el(".x-scroll", (_b = {},
                    _b[this._wheelName] = this._handlers[this._wheelName],
                    _b._ref = uid ? "scroll-x-area-" + uid : "scroll-x-area",
                    _b.onmousedown = this._handlers.onmousedownArea,
                    _b.onmouseenter = this._handlers.onmouseenter,
                    _b.onmouseleave = this._handlers.onmouseleave,
                    _b.style = {
                        width: "100%",
                        height: "6px",
                        left: 0,
                        bottom: 0,
                        position: "absolute",
                    },
                    _b), [
                    dom_1.el(".scroll-runner", {
                        _ref: uid ? "scroll-x-runner-" + uid : "scroll-x-runner",
                        onmousedown: this._handlers.onmousedownRunner,
                        style: {
                            width: this._runnerWidth + "px",
                            left: this._runnerXLeft,
                        },
                    }),
                ]),
            ]
            : null;
        return dom_1.el(".scroll-view-wrapper", [
            dom_1.el(".scroll-view", {
                onscroll: this._handlers.onscroll,
                _ref: uid ? "scroll-view-" + uid : "scroll-view",
                _hooks: {
                    didInsert: function () {
                        _this.update();
                    },
                    didRecycle: function () {
                        _this.update();
                    },
                },
                style: {
                    width: "calc(100% + " + this._scrollWidth + "px)",
                    height: "calc(100% + " + this._scrollHeight + "px)",
                },
            }, element),
        ].concat(scrollView));
    };
    ScrollView.prototype.update = function () {
        var refs = this._getRefs();
        if (!refs) {
            return;
        }
        var area = refs.area, areaX = refs.areaX, areaY = refs.areaY, runnerY = refs.runnerY, runnerX = refs.runnerX;
        this._visibleYArea = area.clientHeight / area.scrollHeight;
        this._visibleXArea = area.clientWidth / area.scrollWidth;
        this._scrollYTop = area.scrollTop;
        this._scrollXLeft = area.scrollLeft;
        this._runnerYTop = this._scrollYTop * this._visibleYArea;
        this._runnerXLeft = this._scrollXLeft * this._visibleXArea;
        this._runnerHeight = this._visibleYArea < 1 ? area.clientHeight * this._visibleYArea : 0;
        this._runnerWidth = this._visibleXArea < 1 ? area.clientWidth * this._visibleXArea : 0;
        var initialTop = runnerY.style.top;
        var initialLeft = runnerX.style.left;
        // update dom
        runnerY.style.opacity = 1;
        runnerY.style.top = this._runnerYTop + "px";
        runnerY.style.height = this._runnerHeight + "px";
        runnerX.style.opacity = 1;
        runnerX.style.left = this._runnerXLeft + "px";
        runnerX.style.width = this._runnerWidth + "px";
        if (initialTop !== runnerY.style.top) {
            areaY.style.opacity = 0.9;
            areaY.style.width = "10px";
        }
        if (initialLeft !== runnerX.style.left) {
            areaX.style.opacity = 0.9;
            areaX.style.height = "10px";
        }
        if (this.config.autoHide) {
            !this._autoHideFunc &&
                (this._autoHideFunc = core_1.debounce(function () {
                    runnerY.style.opacity = 0;
                    areaY.style.width = "6px";
                    runnerX.style.opacity = 0;
                    areaX.style.height = "6px";
                }, this.config.timeout));
        }
        else {
            this._autoHideFunc = core_1.debounce(function () {
                areaY.style.width = "6px";
                areaX.style.height = "6px";
            }, this.config.timeout);
        }
        this._autoHideFunc();
    };
    ScrollView.prototype._getRefs = function () {
        var rootView = this._getRootView();
        var refsCheck = !!(rootView.refs["scroll-view"] &&
            (rootView.refs["scroll-x-runner"] || rootView.refs["scroll-y-runner"]));
        var refsIdCheck = !!(this._uid &&
            rootView.refs["scroll-view-" + this._uid] &&
            (rootView.refs["scroll-x-runner-" + this._uid] || rootView.refs["scroll-y-runner-" + this._uid]));
        if (rootView.refs) {
            if (refsCheck) {
                return {
                    area: rootView.refs["scroll-view"].el,
                    areaY: rootView.refs["scroll-y-area"].el,
                    areaX: rootView.refs["scroll-x-area"].el,
                    runnerY: rootView.refs["scroll-y-runner"].el,
                    runnerX: rootView.refs["scroll-x-runner"].el,
                };
            }
            else if (refsIdCheck) {
                return {
                    area: rootView.refs["scroll-view-" + this._uid].el,
                    areaY: rootView.refs["scroll-y-area-" + this._uid].el,
                    areaX: rootView.refs["scroll-x-area-" + this._uid].el,
                    runnerY: rootView.refs["scroll-y-runner-" + this._uid].el,
                    runnerX: rootView.refs["scroll-x-runner-" + this._uid].el,
                };
            }
        }
    };
    return ScrollView;
}());
exports.ScrollView = ScrollView;


/***/ }),

/***/ "../ts-common/core.ts":
/*!****************************!*\
  !*** ../ts-common/core.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! ./html */ "../ts-common/html.ts");
var counter = new Date().valueOf();
function uid() {
    return "u" + counter++;
}
exports.uid = uid;
function extend(target, source, deep) {
    if (deep === void 0) { deep = true; }
    if (source) {
        for (var key in source) {
            var sobj = source[key];
            var tobj = target[key];
            if (sobj === undefined) {
                delete target[key];
            }
            else if (deep &&
                typeof tobj === "object" &&
                !(tobj instanceof Date) &&
                !(tobj instanceof Array)) {
                extend(tobj, sobj);
            }
            else {
                target[key] = sobj;
            }
        }
    }
    return target;
}
exports.extend = extend;
function copy(source, withoutInner) {
    var result = {};
    for (var key in source) {
        if (!withoutInner || !key.startsWith("$")) {
            result[key] = source[key];
        }
    }
    return result;
}
exports.copy = copy;
function naturalSort(arr) {
    return arr.sort(function (a, b) {
        var nn = typeof a === "string" ? a.localeCompare(b) : a - b;
        return nn;
    });
}
exports.naturalSort = naturalSort;
function findIndex(arr, predicate) {
    var len = arr.length;
    for (var i = 0; i < len; i++) {
        if (predicate(arr[i])) {
            return i;
        }
    }
    return -1;
}
exports.findIndex = findIndex;
function isEqualString(from, to) {
    from = from.toString();
    to = to.toString();
    if (from.length > to.length) {
        return false;
    }
    for (var i = 0; i < from.length; i++) {
        if (from[i].toLowerCase() !== to[i].toLowerCase()) {
            return false;
        }
    }
    return true;
}
exports.isEqualString = isEqualString;
function singleOuterClick(fn) {
    var click = function (e) {
        if (fn(e)) {
            document.removeEventListener("click", click);
        }
    };
    document.addEventListener("click", click);
}
exports.singleOuterClick = singleOuterClick;
function detectWidgetClick(widgetId, cb) {
    var click = function (e) { return cb(html_1.locate(e, "dhx_widget_id") === widgetId); };
    document.addEventListener("click", click);
    return function () { return document.removeEventListener("click", click); };
}
exports.detectWidgetClick = detectWidgetClick;
function unwrapBox(box) {
    if (Array.isArray(box)) {
        return box[0];
    }
    return box;
}
exports.unwrapBox = unwrapBox;
function wrapBox(unboxed) {
    if (Array.isArray(unboxed)) {
        return unboxed;
    }
    return [unboxed];
}
exports.wrapBox = wrapBox;
function isDefined(some) {
    return some !== null && some !== undefined;
}
exports.isDefined = isDefined;
function range(from, to) {
    if (from > to) {
        return [];
    }
    var result = [];
    while (from <= to) {
        result.push(from++);
    }
    return result;
}
exports.range = range;
function isNumeric(val) {
    return !isNaN(val - parseFloat(val));
}
exports.isNumeric = isNumeric;
function downloadFile(data, filename, mimeType) {
    if (mimeType === void 0) { mimeType = "text/plain"; }
    var file = new Blob([data], { type: mimeType });
    if (window.navigator.msSaveOrOpenBlob) {
        // IE10+
        window.navigator.msSaveOrOpenBlob(file, filename);
    }
    else {
        var a_1 = document.createElement("a");
        var url_1 = URL.createObjectURL(file);
        a_1.href = url_1;
        a_1.download = filename;
        document.body.appendChild(a_1);
        a_1.click();
        setTimeout(function () {
            document.body.removeChild(a_1);
            window.URL.revokeObjectURL(url_1);
        }, 0);
    }
}
exports.downloadFile = downloadFile;
function debounce(func, wait, immediate) {
    var timeout;
    return function executedFunction() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var later = function () {
            timeout = null;
            if (!immediate) {
                func.apply(_this, args);
            }
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) {
            func.apply(this, args);
        }
    };
}
exports.debounce = debounce;
function compare(obj1, obj2) {
    for (var p in obj1) {
        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {
            return false;
        }
        switch (typeof obj1[p]) {
            case "object":
                if (!compare(obj1[p], obj2[p])) {
                    return false;
                }
                break;
            case "function":
                if (typeof obj2[p] === "undefined" ||
                    (p !== "compare" && obj1[p].toString() !== obj2[p].toString())) {
                    return false;
                }
                break;
            default:
                if (obj1[p] !== obj2[p]) {
                    return false;
                }
        }
    }
    for (var p in obj2) {
        if (typeof obj1[p] === "undefined") {
            return false;
        }
    }
    return true;
}
exports.compare = compare;
exports.isType = function (value) {
    var regex = /^\[object (\S+?)\]$/;
    var matches = Object.prototype.toString.call(value).match(regex) || [];
    return (matches[1] || "undefined").toLowerCase();
};
exports.isEmptyObj = function (obj) {
    for (var key in obj) {
        return false;
    }
    return true;
};
exports.getMaxArrayNymber = function (array) {
    if (!array.length)
        return;
    var maxNumber = -Infinity;
    var index = 0;
    var length = array.length;
    for (index; index < length; index++) {
        if (array[index] > maxNumber)
            maxNumber = array[index];
    }
    return maxNumber;
};
exports.getMinArrayNymber = function (array) {
    if (!array.length)
        return;
    var minNumber = +Infinity;
    var index = 0;
    var length = array.length;
    for (index; index < length; index++) {
        if (array[index] < minNumber)
            minNumber = array[index];
    }
    return minNumber;
};
exports.getStringWidth = function (value, config) {
    config = __assign({ font: "normal 14px Roboto", lineHeight: 20 }, config);
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    if (config.font)
        ctx.font = config.font;
    var width = ctx.measureText(value).width;
    canvas.remove();
    return width;
};
exports.rgbToHex = function (color) {
    if (color.substr(0, 1) === "#") {
        return color;
    }
    var digits = /(.*?)rgb[a]?\((\d+), *(\d+), *(\d+),* *([\d+.]*)\)/.exec(color);
    var red = parseInt(digits[2], 10)
        .toString(16)
        .padStart(2, "0");
    var green = parseInt(digits[3], 10)
        .toString(16)
        .padStart(2, "0");
    var blue = parseInt(digits[4], 10)
        .toString(16)
        .padStart(2, "0");
    return "#" + red + green + blue;
};


/***/ }),

/***/ "../ts-common/date.ts":
/*!****************************!*\
  !*** ../ts-common/date.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var core_2 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
exports.locale = {
    monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
    ],
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Monday"],
    cancel: "Cancel",
};
/*
    %d	day as a number with leading zero, 01..31
    %j	day as a number, 1..31
    %D	short name of the day, Su Mo Tu...
    %l	full name of the day, Sunday Monday Tuesday...
    %m	month as a number with leading zero, 01..12
    %n	month as a number, 1..12
    %M	short name of the month, Jan Feb Mar...
    %F	full name of the month, January February March...
    %y	year as a number, 2 digits
    %Y	year as a number, 4 digits
    %h	hours 12-format with leading zero, 01..12)
    %g	hours 12-format, 1..12)
    %H	hours 24-format with leading zero, 01..24
    %G	hours 24-format, 1..24
    %i	minutes with leading zero, 01..59
    %s	seconds with leading zero, 01..59
    %a	am or pm
    %A	AM or PM
    %u	milliseconds
*/
var formatters = {
    "%d": function (date) {
        var day = date.getDate();
        return day < 10 ? "0" + day : day;
    },
    "%j": function (date) { return date.getDate(); },
    "%l": function (date) {
        return exports.locale.days[date.getDay()];
    },
    "%D": function (date) {
        return exports.locale.daysShort[date.getDay()];
    },
    "%m": function (date) {
        var month = date.getMonth() + 1;
        return month < 10 ? "0" + month : month;
    },
    "%n": function (date) { return date.getMonth() + 1; },
    "%M": function (date) { return exports.locale.monthsShort[date.getMonth()]; },
    "%F": function (date) { return exports.locale.months[date.getMonth()]; },
    "%y": function (date) {
        return date
            .getFullYear()
            .toString()
            .slice(2);
    },
    "%Y": function (date) { return date.getFullYear(); },
    "%h": function (date) {
        var hours = date.getHours() % 12;
        if (hours === 0) {
            hours = 12;
        }
        return hours < 10 ? "0" + hours : hours;
    },
    "%g": function (date) {
        var hours = date.getHours() % 12;
        if (hours === 0) {
            hours = 12;
        }
        return hours;
    },
    "%H": function (date) {
        var hours = date.getHours();
        return hours < 10 ? "0" + hours : hours;
    },
    "%G": function (date) { return date.getHours(); },
    "%i": function (date) {
        var minutes = date.getMinutes();
        return minutes < 10 ? "0" + minutes : minutes;
    },
    "%s": function (date) {
        var seconds = date.getSeconds();
        return seconds < 10 ? "0" + seconds : seconds;
    },
    "%a": function (date) {
        return date.getHours() >= 12 ? "pm" : "am";
    },
    "%A": function (date) {
        return date.getHours() >= 12 ? "PM" : "AM";
    },
    "%u": function (date) { return date.getMilliseconds(); },
};
var setFormatters = {
    "%d": function (date, value) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        check ? date.setDate(Number(value)) : date.setDate(Number(1));
    },
    "%j": function (date, value) {
        var check = /(^([0-9]?[0-9])$)/i.test(value);
        check ? date.setDate(Number(value)) : date.setDate(Number(1));
    },
    "%m": function (date, value) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        check ? date.setMonth(Number(value) - 1) : date.setMonth(Number(0));
        if (check && date.getMonth() !== Number(value) - 1)
            date.setMonth(Number(value) - 1);
    },
    "%n": function (date, value) {
        var check = /(^([0-9]?[0-9])$)/i.test(value);
        check ? date.setMonth(Number(value) - 1) : date.setMonth(Number(0));
        if (check && date.getMonth() !== Number(value) - 1)
            date.setMonth(Number(value) - 1);
    },
    "%M": function (date, value) {
        var index = core_2.findIndex(exports.locale.monthsShort, function (v) { return v === value; });
        index === -1 ? date.setMonth(0) : date.setMonth(index);
        if (index !== -1 && date.getMonth() !== index)
            date.setMonth(index);
    },
    "%F": function (date, value) {
        var index = core_2.findIndex(exports.locale.months, function (v) { return v === value; });
        index === -1 ? date.setMonth(0) : date.setMonth(index);
        if (index !== -1 && date.getMonth() !== index)
            date.setMonth(index);
    },
    "%y": function (date, value) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        check ? date.setFullYear(Number("20" + value)) : date.setFullYear(Number("2000"));
    },
    "%Y": function (date, value) {
        var check = /(^([0-9][0-9][0-9][0-9])$)/i.test(value);
        check ? date.setFullYear(Number(value)) : date.setFullYear(Number("2000"));
    },
    "%h": function (date, value, dateFormat) {
        var check = /(^0[1-9]|1[0-2]$)/i.test(value);
        (check && dateFormat === "pm") || dateFormat === "PM"
            ? date.setHours(Number(value))
            : date.setHours(Number(0));
    },
    "%g": function (date, value, dateFormat) {
        var check = /(^[1-9]$)|(^0[1-9]|1[0-2]$)/i.test(value);
        (check && dateFormat === "pm") || dateFormat === "PM"
            ? date.setHours(Number(value))
            : date.setHours(Number(0));
    },
    "%H": function (date, value) {
        var check = /(^[0-2][0-9]$)/i.test(value);
        check ? date.setHours(Number(value)) : date.setHours(Number(0));
    },
    "%G": function (date, value) {
        var check = /(^[1-9][0-9]?$)/i.test(value);
        check ? date.setHours(Number(value)) : date.setHours(Number(0));
    },
    "%i": function (date, value) {
        var check = /(^([0-5][0-9])$)/i.test(value);
        check ? date.setMinutes(Number(value)) : date.setMinutes(Number(0));
    },
    "%s": function (date, value) {
        var check = /(^([0-5][0-9])$)/i.test(value);
        check ? date.setSeconds(Number(value)) : date.setSeconds(Number(0));
    },
    "%a": function (date, value) {
        if (value === "pm") {
            date.setHours(date.getHours() + 12);
        }
    },
    "%A": function (date, value) {
        if (value === "PM") {
            date.setHours(date.getHours() + 12);
        }
    },
};
var TokenType;
(function (TokenType) {
    TokenType[TokenType["separator"] = 0] = "separator";
    TokenType[TokenType["datePart"] = 1] = "datePart";
})(TokenType || (TokenType = {}));
function tokenizeFormat(format) {
    var tokens = [];
    var currentSeparator = "";
    for (var i = 0; i < format.length; i++) {
        if (format[i] === "%") {
            if (currentSeparator.length > 0) {
                tokens.push({
                    type: TokenType.separator,
                    value: currentSeparator,
                });
                currentSeparator = "";
            }
            tokens.push({
                type: TokenType.datePart,
                value: format[i] + format[i + 1],
            });
            i++;
        }
        else {
            currentSeparator += format[i];
        }
    }
    if (currentSeparator.length > 0) {
        tokens.push({
            type: TokenType.separator,
            value: currentSeparator,
        });
    }
    return tokens;
}
function getFormattedDate(format, date) {
    return tokenizeFormat(format).reduce(function (res, token) {
        if (token.type === TokenType.separator) {
            return res + token.value;
        }
        else {
            if (!formatters[token.value]) {
                return res;
            }
            return res + formatters[token.value](date);
        }
    }, "");
}
exports.getFormattedDate = getFormattedDate;
function stringToDate(str, format, validate) {
    if (typeof str !== "string") {
        return;
    }
    var tokens = tokenizeFormat(format);
    var dateParts = [];
    var index = 0;
    var formatter = null;
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        if (token.type === TokenType.separator) {
            var sepratorIndex = str.indexOf(token.value, index);
            if (sepratorIndex === -1) {
                if (validate) {
                    return false;
                }
                throw new Error("Incorrect date, see docs: https://docs.dhtmlx.com/suite/calendar__api__calendar_dateformat_config.html");
            }
            if (formatter) {
                dateParts.push({
                    formatter: formatter,
                    value: str.slice(index, sepratorIndex),
                });
                formatter = null;
            }
            index = sepratorIndex + token.value.length;
        }
        else if (token.type === TokenType.datePart) {
            formatter = token.value;
        }
    }
    if (formatter === "%A" || formatter === "%a") {
        dateParts.unshift({
            formatter: formatter,
            value: str.slice(index),
        });
    }
    else if (formatter) {
        dateParts.push({
            formatter: formatter,
            value: str.slice(index),
        });
    }
    dateParts.reverse();
    var dateFormat;
    for (var _a = 0, dateParts_1 = dateParts; _a < dateParts_1.length; _a++) {
        var datePart = dateParts_1[_a];
        if (datePart.formatter === "%A" || datePart.formatter === "%a") {
            dateFormat = datePart.value;
        }
    }
    var date = new Date(0);
    for (var _b = 0, dateParts_2 = dateParts; _b < dateParts_2.length; _b++) {
        var datePart = dateParts_2[_b];
        if (setFormatters[datePart.formatter]) {
            setFormatters[datePart.formatter](date, datePart.value, dateFormat);
        }
    }
    return validate ? true : date;
}
exports.stringToDate = stringToDate;
var DateHelper = /** @class */ (function () {
    function DateHelper() {
    }
    DateHelper.copy = function (d) {
        return new Date(d);
    };
    DateHelper.fromYear = function (year) {
        return new Date(year, 0, 1);
    };
    DateHelper.fromYearAndMonth = function (year, month) {
        return new Date(year, month, 1);
    };
    DateHelper.weekStart = function (d, firstWeekday) {
        var diff = (d.getDay() + 7 - firstWeekday) % 7;
        return new Date(d.getFullYear(), d.getMonth(), d.getDate() - diff);
    };
    DateHelper.monthStart = function (d) {
        return new Date(d.getFullYear(), d.getMonth(), 1);
    };
    DateHelper.yearStart = function (d) {
        return new Date(d.getFullYear(), 0, 1);
    };
    DateHelper.dayStart = function (d) {
        return new Date(d.getFullYear(), d.getMonth(), d.getDate());
    };
    DateHelper.addDay = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear(), d.getMonth(), d.getDate() + count);
    };
    DateHelper.addMonth = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear(), d.getMonth() + count);
    };
    DateHelper.addYear = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear() + count, d.getMonth());
    };
    DateHelper.withHoursAndMinutes = function (d, hours, minutes, dateFormat) {
        if (dateFormat === undefined || (!dateFormat && hours === 12) || (dateFormat && hours !== 12)) {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hours, minutes);
        }
        else if (dateFormat && hours === 12) {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, minutes);
        }
        else {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hours + 12, minutes);
        }
    };
    DateHelper.setMonth = function (d, month) {
        d.setMonth(month);
    };
    DateHelper.setYear = function (d, year) {
        d.setFullYear(year);
    };
    DateHelper.mergeHoursAndMinutes = function (source, target) {
        return new Date(source.getFullYear(), source.getMonth(), source.getDate(), target.getHours(), target.getMinutes());
    };
    DateHelper.isWeekEnd = function (d) {
        return d.getDay() === 0 || d.getDay() === 6;
    };
    DateHelper.getTwelweYears = function (d) {
        var y = d.getFullYear();
        var firstYear = y - (y % 12);
        return core_1.range(firstYear, firstYear + 11);
    };
    DateHelper.getWeekNumber = function (d) {
        if (d.getDay() !== 6) {
            d = DateHelper.addDay(d, 6 - d.getDay());
        }
        var dayMS = 24 * 60 * 60 * 1000;
        var ordinal = (d.valueOf() - DateHelper.yearStart(d).valueOf()) / dayMS;
        return Math.floor((ordinal - d.getDay() + 10) / 7);
    };
    DateHelper.isSameDay = function (d1, d2) {
        return (d1.getFullYear() === d2.getFullYear() &&
            d1.getMonth() === d2.getMonth() &&
            d1.getDate() === d2.getDate());
    };
    DateHelper.toDateObject = function (date, dateFormat) {
        if (typeof date === "string") {
            return stringToDate(date, dateFormat);
        }
        else {
            return new Date(date);
        }
    };
    DateHelper.nullTimestampDate = new Date(0);
    return DateHelper;
}());
exports.DateHelper = DateHelper;


/***/ }),

/***/ "../ts-common/dom.ts":
/*!***************************!*\
  !*** ../ts-common/dom.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var dom = __webpack_require__(/*! domvm/dist/dev/domvm.dev.js */ "../node_modules/domvm/dist/dev/domvm.dev.js");
exports.el = dom.defineElement;
exports.sv = dom.defineSvgElement;
exports.view = dom.defineView;
exports.create = dom.createView;
exports.inject = dom.injectView;
exports.KEYED_LIST = dom.KEYED_LIST;
function disableHelp() {
    dom.DEVMODE.mutations = false;
    dom.DEVMODE.warnings = false;
    dom.DEVMODE.verbose = false;
    dom.DEVMODE.UNKEYED_INPUT = false;
}
exports.disableHelp = disableHelp;
function resizer(handler) {
    var resize = window.ResizeObserver;
    var activeHandler = function (node) {
        var height = node.el.offsetHeight;
        var width = node.el.offsetWidth;
        handler(width, height);
    };
    if (resize) {
        return exports.el("div.dhx-resize-observer", {
            _hooks: {
                didInsert: function (node) {
                    new resize(function () { return activeHandler(node); }).observe(node.el);
                },
            },
        });
    }
    return exports.el("iframe.dhx-resize-observer", {
        _hooks: {
            didInsert: function (node) {
                node.el.contentWindow.onresize = function () { return activeHandler(node); };
                activeHandler(node);
            },
        },
    });
}
exports.resizer = resizer;
function resizeHandler(container, handler) {
    return exports.create({
        render: function () {
            return resizer(handler);
        },
    }).mount(container);
}
exports.resizeHandler = resizeHandler;
function awaitRedraw() {
    return new Promise(function (res) {
        requestAnimationFrame(function () {
            res();
        });
    });
}
exports.awaitRedraw = awaitRedraw;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-common/events.ts":
/*!******************************!*\
  !*** ../ts-common/events.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var EventSystem = /** @class */ (function () {
    function EventSystem(context) {
        this.events = {};
        this.context = context || this;
    }
    EventSystem.prototype.on = function (name, callback, context) {
        var event = name.toLowerCase();
        this.events[event] = this.events[event] || [];
        this.events[event].push({ callback: callback, context: context || this.context });
    };
    EventSystem.prototype.detach = function (name, context) {
        var event = name.toLowerCase();
        var eStack = this.events[event];
        if (context && eStack && eStack.length) {
            for (var i = eStack.length - 1; i >= 0; i--) {
                if (eStack[i].context === context) {
                    eStack.splice(i, 1);
                }
            }
        }
        else {
            this.events[event] = [];
        }
    };
    EventSystem.prototype.fire = function (name, args) {
        if (typeof args === "undefined") {
            args = [];
        }
        var event = name.toLowerCase();
        if (this.events[event]) {
            var res = this.events[event].map(function (e) { return e.callback.apply(e.context, args); });
            return !res.includes(false);
        }
        return true;
    };
    EventSystem.prototype.clear = function () {
        this.events = {};
    };
    return EventSystem;
}());
exports.EventSystem = EventSystem;
function EventsMixin(obj) {
    obj = obj || {};
    var eventSystem = new EventSystem(obj);
    obj.detachEvent = eventSystem.detach.bind(eventSystem);
    obj.attachEvent = eventSystem.on.bind(eventSystem);
    obj.callEvent = eventSystem.fire.bind(eventSystem);
}
exports.EventsMixin = EventsMixin;


/***/ }),

/***/ "../ts-common/html.ts":
/*!****************************!*\
  !*** ../ts-common/html.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
function toNode(node) {
    var _a;
    return typeof node === "string"
        ? document.getElementById(node) || document.querySelector(node) || ((_a = document.querySelector("[dhx_root_id=" + node + "]")) === null || _a === void 0 ? void 0 : _a.parentElement) || document.body
        : node || document.body;
}
exports.toNode = toNode;
function eventHandler(prepare, hash, afterCall) {
    var keys = Object.keys(hash);
    return function (ev) {
        var data = prepare(ev);
        if (data !== undefined) {
            var node = ev.target;
            outer_block: while (node) {
                var cssstring = node.getAttribute ? node.getAttribute("class") || "" : "";
                if (cssstring.length) {
                    var css = cssstring.split(" ");
                    for (var j = 0; j < keys.length; j++) {
                        if (css.includes(keys[j])) {
                            if (hash[keys[j]](ev, data) === false)
                                return false;
                            else
                                break outer_block;
                        }
                    }
                }
                node = node.parentNode;
            }
        }
        if (afterCall)
            afterCall(ev);
        return true;
    };
}
exports.eventHandler = eventHandler;
function locateNode(target, attr, dir) {
    if (attr === void 0) { attr = "dhx_id"; }
    if (dir === void 0) { dir = "target"; }
    if (target instanceof Event) {
        target = target[dir];
    }
    while (target) {
        if (target.getAttribute && target.getAttribute(attr)) {
            return target;
        }
        target = target.parentNode;
    }
}
exports.locateNode = locateNode;
function locate(target, attr) {
    if (attr === void 0) { attr = "dhx_id"; }
    var node = locateNode(target, attr);
    return node ? node.getAttribute(attr) : "";
}
exports.locate = locate;
function locateNodeByClassName(target, className) {
    if (target instanceof Event) {
        target = target.target;
    }
    while (target) {
        if (className) {
            if (target.classList && target.classList.contains(className)) {
                return target;
            }
        }
        else if (target.getAttribute && target.getAttribute("dhx_id")) {
            return target;
        }
        target = target.parentNode;
    }
}
exports.locateNodeByClassName = locateNodeByClassName;
function getBox(elem) {
    var box = elem.getBoundingClientRect();
    var body = document.body;
    var scrollTop = window.pageYOffset || body.scrollTop;
    var scrollLeft = window.pageXOffset || body.scrollLeft;
    var top = box.top + scrollTop;
    var left = box.left + scrollLeft;
    var right = body.offsetWidth - box.right;
    var bottom = body.offsetHeight - box.bottom;
    var width = box.right - box.left;
    var height = box.bottom - box.top;
    return { top: top, left: left, right: right, bottom: bottom, width: width, height: height };
}
exports.getBox = getBox;
var scrollWidth = -1;
function getScrollbarWidth() {
    if (scrollWidth > -1) {
        return scrollWidth;
    }
    var scrollDiv = document.createElement("div");
    document.body.appendChild(scrollDiv);
    scrollDiv.style.cssText = "position: absolute;left: -99999px;overflow:scroll;width: 100px;height: 100px;";
    scrollWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollWidth;
}
exports.getScrollbarWidth = getScrollbarWidth;
var scrollHeight = -1;
function getScrollbarHeight() {
    if (scrollHeight > -1) {
        return scrollHeight;
    }
    var scrollDiv = document.createElement("div");
    document.body.appendChild(scrollDiv);
    scrollDiv.style.cssText = "position: absolute;left: -99999px;overflow:scroll;width: 100px;height: 100px;";
    scrollHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    document.body.removeChild(scrollDiv);
    return scrollHeight;
}
exports.getScrollbarHeight = getScrollbarHeight;
function isIE() {
    var ua = window.navigator.userAgent;
    return ua.includes("MSIE ") || ua.includes("Trident/");
}
exports.isIE = isIE;
function isSafari() {
    var check = function (str) { return str.test(window.navigator.userAgent); };
    var chrome = check(/Chrome/);
    var firefox = check(/Firefox/);
    return !chrome && !firefox && check(/Safari/);
}
exports.isSafari = isSafari;
function isFirefox() {
    var check = function (str) { return str.test(window.navigator.userAgent); };
    var chrome = check(/Chrome/);
    var safari = check(/Safari/);
    return !chrome && !safari && check(/Firefox/);
}
exports.isFirefox = isFirefox;
function getRealPosition(node) {
    var rects = node.getBoundingClientRect();
    return {
        left: rects.left + window.pageXOffset,
        right: rects.right + window.pageXOffset,
        top: rects.top + window.pageYOffset,
        bottom: rects.bottom + window.pageYOffset,
    };
}
exports.getRealPosition = getRealPosition;
function getWindowBorders() {
    return {
        rightBorder: window.pageXOffset + window.innerWidth,
        bottomBorder: window.pageYOffset + window.innerHeight,
    };
}
function horizontalCentering(pos, width, rightBorder) {
    var nodeWidth = pos.right - pos.left;
    var diff = (width - nodeWidth) / 2;
    var left = pos.left - diff;
    var right = pos.right + diff;
    if (left >= 0 && right <= rightBorder) {
        return left;
    }
    if (left < 0) {
        return 0;
    }
    return rightBorder - width;
}
function verticalCentering(pos, height, bottomBorder) {
    var nodeHeight = pos.bottom - pos.top;
    var diff = (height - nodeHeight) / 2;
    var top = pos.top - diff;
    var bottom = pos.bottom + diff;
    if (top >= 0 && bottom <= bottomBorder) {
        return top;
    }
    if (top < 0) {
        return 0;
    }
    return bottomBorder - height;
}
function placeBottomOrTop(pos, config) {
    var _a = getWindowBorders(), rightBorder = _a.rightBorder, bottomBorder = _a.bottomBorder;
    var left;
    var top;
    var bottomDiff = bottomBorder - pos.bottom - config.height;
    var topDiff = pos.top - config.height;
    if (config.mode === "bottom") {
        if (bottomDiff >= 0) {
            top = pos.bottom;
        }
        else if (topDiff >= 0) {
            top = topDiff;
        }
    }
    else {
        if (topDiff >= 0) {
            top = topDiff;
        }
        else if (bottomDiff >= 0) {
            top = pos.bottom;
        }
    }
    if (bottomDiff < 0 && topDiff < 0) {
        if (config.auto) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            return placeRightOrLeft(pos, __assign(__assign({}, config), { mode: "right", auto: false }));
        }
        top = bottomDiff > topDiff ? pos.bottom : topDiff;
    }
    if (config.centering) {
        left = horizontalCentering(pos, config.width, rightBorder);
    }
    else {
        var leftDiff = rightBorder - pos.left - config.width;
        var rightDiff = pos.right - config.width;
        if (leftDiff >= 0) {
            left = pos.left;
        }
        else if (rightDiff >= 0) {
            left = rightDiff;
        }
        else {
            left = rightDiff > leftDiff ? pos.left : rightDiff;
        }
    }
    return { left: left, top: top };
}
function placeRightOrLeft(pos, config) {
    var _a = getWindowBorders(), rightBorder = _a.rightBorder, bottomBorder = _a.bottomBorder;
    var left;
    var top;
    var rightDiff = rightBorder - pos.right - config.width;
    var leftDiff = pos.left - config.width;
    if (config.mode === "right") {
        if (rightDiff >= 0) {
            left = pos.right;
        }
        else if (leftDiff >= 0) {
            left = leftDiff;
        }
    }
    else {
        if (leftDiff >= 0) {
            left = leftDiff;
        }
        else if (rightDiff >= 0) {
            left = pos.right;
        }
    }
    if (leftDiff < 0 && rightDiff < 0) {
        if (config.auto) {
            return placeBottomOrTop(pos, __assign(__assign({}, config), { mode: "bottom", auto: false }));
        }
        left = leftDiff > rightDiff ? leftDiff : pos.right;
    }
    if (config.centering) {
        top = verticalCentering(pos, config.height, rightBorder);
    }
    else {
        var bottomDiff = pos.bottom - config.height;
        var topDiff = bottomBorder - pos.top - config.height;
        if (topDiff >= 0) {
            top = pos.top;
        }
        else if (bottomDiff > 0) {
            top = bottomDiff;
        }
        else {
            top = bottomDiff > topDiff ? bottomDiff : pos.top;
        }
    }
    return { left: left, top: top };
}
function calculatePosition(pos, config) {
    var _a = config.mode === "bottom" || config.mode === "top"
        ? placeBottomOrTop(pos, config)
        : placeRightOrLeft(pos, config), left = _a.left, top = _a.top;
    return {
        left: Math.round(left) + "px",
        top: Math.round(top) + "px",
        minWidth: Math.round(config.width) + "px",
        position: "absolute",
    };
}
exports.calculatePosition = calculatePosition;
function fitPosition(node, config) {
    return calculatePosition(getRealPosition(node), config);
}
exports.fitPosition = fitPosition;
function getPageCss() {
    var css = [];
    for (var sheeti = 0; sheeti < document.styleSheets.length; sheeti++) {
        var sheet = document.styleSheets[sheeti];
        var rules = "cssRules" in sheet ? sheet.cssRules : sheet.rules;
        for (var rulei = 0; rulei < rules.length; rulei++) {
            var rule = rules[rulei];
            if ("cssText" in rule) {
                css.push(rule.cssText);
            }
            else {
                css.push(rule.selectorText + " {\n" + rule.style.cssText + "\n}\n");
            }
        }
    }
    return css.join("\n");
}
exports.getPageCss = getPageCss;
function getLabelStyle(config) {
    var helpMessage = config.helpMessage, type = config.type, labelWidth = config.labelWidth, label = config.label;
    var isZero = labelWidth && labelWidth.toString().startsWith("0");
    var required = type !== "text" && config.required;
    if (!helpMessage && !required && (!label || (label && isZero)) && (!labelWidth || isZero)) {
        return false;
    }
    return {
        style: (label || labelWidth) && !isZero && { width: labelWidth, "max-width": "100%" },
        label: label && isZero ? null : label,
    };
}
exports.getLabelStyle = getLabelStyle;


/***/ }),

/***/ "../ts-common/keycodes.ts":
/*!********************************!*\
  !*** ../ts-common/keycodes.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KEY_CODES = {
    BACKSPACE: 8,
    ENTER: 13,
    ESC: 27,
    DOWN_ARROW: 40,
    UP_ARROW: 38,
    LEFT_ARROW: 37,
    RIGHT_ARROW: 39,
};


/***/ }),

/***/ "../ts-common/polyfills/array.ts":
/*!***************************************!*\
  !*** ../ts-common/polyfills/array.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/unbound-method */
// eslint-disable-next-line @typescript-eslint/unbound-method
if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, "includes", {
        value: function (searchElement, fromIndex) {
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            // 1. Let O be ? ToObject(this value).
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If len is 0, return false.
            if (len === 0) {
                return false;
            }
            // 4. Let n be ? ToInteger(fromIndex).
            //    (If fromIndex is undefined, this step produces the value 0.)
            var n = fromIndex | 0;
            // 5. If n ≥ 0, then
            //  a. Let k be n.
            // 6. Else n < 0,
            //  a. Let k be len + n.
            //  b. If k < 0, let k be 0.
            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
            function sameValueZero(x, y) {
                return x === y || (typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y));
            }
            // 7. Repeat, while k < len
            while (k < len) {
                // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                // b. If SameValueZero(searchElement, elementK) is true, return true.
                if (sameValueZero(o[k], searchElement)) {
                    return true;
                }
                // c. Increase k by 1.
                k++;
            }
            // 8. Return false
            return false;
        },
        configurable: true,
        writable: true,
    });
}
// https://tc39.github.io/ecma262/#sec-array.prototype.find
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, "find", {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== "function") {
                throw new TypeError("predicate must be a function");
            }
            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];
            // 5. Let k be 0.
            var k = 0;
            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return kValue.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return kValue;
                }
                // e. Increase k by 1.
                k++;
            }
            // 7. Return undefined.
            return undefined;
        },
        configurable: true,
        writable: true,
    });
}
if (!Array.prototype.findIndex) {
    Array.prototype.findIndex = function (predicate) {
        if (this == null) {
            throw new TypeError("Array.prototype.findIndex called on null or undefined");
        }
        if (typeof predicate !== "function") {
            throw new TypeError("predicate must be a function");
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;
        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return i;
            }
        }
        return -1;
    };
}


/***/ }),

/***/ "../ts-common/polyfills/element.ts":
/*!*****************************************!*\
  !*** ../ts-common/polyfills/element.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* eslint-disable @typescript-eslint/no-this-alias */
/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/unbound-method */
if (Element && !Element.prototype.matches) {
    var proto = Element.prototype;
    proto.matches =
        proto.matchesSelector ||
            proto.mozMatchesSelector ||
            proto.msMatchesSelector ||
            proto.oMatchesSelector ||
            proto.webkitMatchesSelector;
}
// Source: https://github.com/naminho/svg-classlist-polyfill/blob/master/polyfill.js
if (!("classList" in SVGElement.prototype)) {
    Object.defineProperty(SVGElement.prototype, "classList", {
        get: function get() {
            var _this = this;
            return {
                contains: function contains(className) {
                    return _this.className.baseVal.split(" ").indexOf(className) !== -1;
                },
                add: function add(className) {
                    return _this.setAttribute("class", _this.getAttribute("class") + " " + className);
                },
                remove: function remove(className) {
                    var removedClass = _this
                        .getAttribute("class")
                        .replace(new RegExp("(\\s|^)".concat(className, "(\\s|$)"), "g"), "$2");
                    if (_this.classList.contains(className)) {
                        _this.setAttribute("class", removedClass);
                    }
                },
                toggle: function toggle(className) {
                    if (this.contains(className)) {
                        this.remove(className);
                    }
                    else {
                        this.add(className);
                    }
                },
            };
        },
        configurable: true,
    });
}
// Source: https://github.com/tc39/proposal-object-values-entries/blob/master/polyfill.js
if (!Object.entries) {
    var reduce_1 = Function.bind.call(Function.call, Array.prototype.reduce);
    var isEnumerable_1 = Function.bind.call(Function.call, Object.prototype.propertyIsEnumerable);
    var concat_1 = Function.bind.call(Function.call, Array.prototype.concat);
    Object.entries = function entries(O) {
        return reduce_1(Object.keys(O), function (e, k) { return concat_1(e, typeof k === "string" && isEnumerable_1(O, k) ? [[k, O[k]]] : []); }, []);
    };
}
// Source: https://gist.github.com/rockinghelvetica/00b9f7b5c97a16d3de75ba99192ff05c
if (!Event.prototype.composedPath) {
    Event.prototype.composedPath = function () {
        if (this.path) {
            return this.path;
        }
        var target = this.target;
        this.path = [];
        while (target.parentNode !== null) {
            this.path.push(target);
            target = target.parentNode;
        }
        this.path.push(document, window);
        return this.path;
    };
}


/***/ }),

/***/ "../ts-common/polyfills/math.ts":
/*!**************************************!*\
  !*** ../ts-common/polyfills/math.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Math.sign =
    Math.sign ||
        function (x) {
            x = +x;
            if (x === 0 || isNaN(x)) {
                return x;
            }
            return x > 0 ? 1 : -1;
        };


/***/ }),

/***/ "../ts-common/polyfills/object.ts":
/*!****************************************!*\
  !*** ../ts-common/polyfills/object.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.values = Object.values
    ? Object.values
    : function (obj) {
        var allowedTypes = [
            "[object String]",
            "[object Object]",
            "[object Array]",
            "[object Function]",
        ];
        var objType = Object.prototype.toString.call(obj);
        if (obj === null || typeof obj === "undefined") {
            throw new TypeError("Cannot convert undefined or null to object");
        }
        else if (!~allowedTypes.indexOf(objType)) {
            return [];
        }
        else {
            // if ES6 is supported
            if (Object.keys) {
                return Object.keys(obj).map(function (key) {
                    return obj[key];
                });
            }
            var result = [];
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    result.push(obj[prop]);
                }
            }
            return result;
        }
    };
if (!Object.assign) {
    Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            "use strict";
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (target === undefined || target === null) {
                throw new TypeError("Cannot convert first argument to object");
            }
            var to = Object(target);
            for (var i = 0; i < args.length; i++) {
                var nextSource = args[i];
                if (nextSource === undefined || nextSource === null) {
                    continue;
                }
                var keysArray = Object.keys(Object(nextSource));
                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                    var nextKey = keysArray[nextIndex];
                    var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                    if (desc !== undefined && desc.enumerable) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
            return to;
        },
    });
}


/***/ }),

/***/ "../ts-common/polyfills/string.ts":
/*!****************************************!*\
  !*** ../ts-common/polyfills/string.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
        "use strict";
        if (typeof start !== "number") {
            start = 0;
        }
        if (start + search.length > this.length) {
            return false;
        }
        else {
            return this.indexOf(search, start) !== -1;
        }
    };
}
if (!String.prototype.startsWith) {
    Object.defineProperty(String.prototype, "startsWith", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (searchString, position) {
            position = position || 0;
            return this.indexOf(searchString, position) === position;
        },
    });
}
if (!String.prototype.padStart) {
    String.prototype.padStart = function padStart(targetLength, padString) {
        targetLength = targetLength >> 0;
        padString = String(padString || " ");
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength - this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length);
            }
            return padString.slice(0, targetLength) + String(this);
        }
    };
}
if (!String.prototype.padEnd) {
    String.prototype.padEnd = function padEnd(targetLength, padString) {
        targetLength = targetLength >> 0;
        padString = String(padString || " ");
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength - this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length);
            }
            return String(this) + padString.slice(0, targetLength);
        }
    };
}


/***/ }),

/***/ "../ts-common/types.ts":
/*!*****************************!*\
  !*** ../ts-common/types.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SelectionEvents;
(function (SelectionEvents) {
    SelectionEvents["beforeUnSelect"] = "beforeunselect";
    SelectionEvents["afterUnSelect"] = "afterunselect";
    SelectionEvents["beforeSelect"] = "beforeselect";
    SelectionEvents["afterSelect"] = "afterselect";
})(SelectionEvents = exports.SelectionEvents || (exports.SelectionEvents = {}));


/***/ }),

/***/ "../ts-common/view.ts":
/*!****************************!*\
  !*** ../ts-common/view.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! ./core */ "../ts-common/core.ts");
var html_1 = __webpack_require__(/*! ./html */ "../ts-common/html.ts");
var View = /** @class */ (function () {
    function View(_container, config) {
        this.config = config || {};
        this._uid = this.config.rootId || core_1.uid();
    }
    View.prototype.mount = function (container, vnode) {
        if (vnode) {
            this._view = vnode;
        }
        if (container && this._view && this._view.mount) {
            // init view inside of HTML container
            this._container = html_1.toNode(container);
            if (this._container.tagName) {
                this._view.mount(this._container);
            }
            else if (this._container.attach) {
                this._container.attach(this);
            }
        }
    };
    View.prototype.unmount = function () {
        var rootView = this.getRootView();
        if (rootView && rootView.node) {
            rootView.unmount();
            this._view = null;
        }
    };
    View.prototype.getRootView = function () {
        return this._view;
    };
    View.prototype.getRootNode = function () {
        return this._view && this._view.node && this._view.node.el;
    };
    View.prototype.paint = function () {
        if (this._view && // was mounted
            (this._view.node || // already rendered node
                this._container)) {
            // not rendered, but has container
            this._doNotRepaint = false;
            this._view.redraw();
        }
    };
    return View;
}());
exports.View = View;
function toViewLike(view) {
    return {
        getRootView: function () { return view; },
        paint: function () { return view.node && view.redraw(); },
        mount: function (container) { return view.mount(container); },
    };
}
exports.toViewLike = toViewLike;


/***/ }),

/***/ "../ts-data/index.ts":
/*!***************************!*\
  !*** ../ts-data/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/types */ "../ts-data/sources/types.ts"));
__export(__webpack_require__(/*! ./sources/datacollection */ "../ts-data/sources/datacollection.ts"));
__export(__webpack_require__(/*! ./sources/treecollection */ "../ts-data/sources/treecollection.ts"));
__export(__webpack_require__(/*! ./sources/DragManager */ "../ts-data/sources/DragManager.ts"));
__export(__webpack_require__(/*! ./sources/dataproxy */ "../ts-data/sources/dataproxy.ts"));
__export(__webpack_require__(/*! ./sources/lazydataproxy */ "../ts-data/sources/lazydataproxy.ts"));
__export(__webpack_require__(/*! ./sources/helpers */ "../ts-data/sources/helpers.ts"));
__export(__webpack_require__(/*! ./sources/drivers/CsvDriver */ "../ts-data/sources/drivers/CsvDriver.ts"));
__export(__webpack_require__(/*! ./sources/drivers/JsonDriver */ "../ts-data/sources/drivers/JsonDriver.ts"));
__export(__webpack_require__(/*! ./sources/selection */ "../ts-data/sources/selection.ts"));
__export(__webpack_require__(/*! ./sources/drivers/drivers */ "../ts-data/sources/drivers/drivers.ts"));
__export(__webpack_require__(/*! ./sources/ajax */ "../ts-data/sources/ajax.ts"));


/***/ }),

/***/ "../ts-data/sources/CollectionStore.ts":
/*!*********************************************!*\
  !*** ../ts-data/sources/CollectionStore.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CollectionStore = /** @class */ (function () {
    function CollectionStore() {
        this._store = {};
    }
    CollectionStore.prototype.setItem = function (id, target) {
        this._store[id] = target;
    };
    CollectionStore.prototype.getItem = function (id) {
        if (!this._store[id]) {
            return null;
        }
        return this._store[id];
    };
    return CollectionStore;
}());
var dhx = (window.dhxHelpers = window.dhxHelpers || {});
dhx.collectionStore = dhx.collectionStore || new CollectionStore();
exports.collectionStore = dhx.collectionStore;


/***/ }),

/***/ "../ts-data/sources/DragManager.ts":
/*!*****************************************!*\
  !*** ../ts-data/sources/DragManager.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var ts_grid_1 = __webpack_require__(/*! @dhx/ts-grid */ "../ts-grid/index.ts");
var CollectionStore_1 = __webpack_require__(/*! ./CollectionStore */ "../ts-data/sources/CollectionStore.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-data/sources/helpers.ts");
function getPosition(e) {
    var y = e.clientY;
    var element = html_1.locateNode(e);
    if (!element) {
        return null;
    }
    var treeLine = element.childNodes[0];
    if (treeLine) {
        var _a = treeLine.getBoundingClientRect(), top_1 = _a.top, height = _a.height;
        return (y - top_1) / height;
    }
}
function dragEventContent(element, elements, exhaustiveList) {
    if (exhaustiveList === void 0) { exhaustiveList = false; }
    var rect = element.getBoundingClientRect();
    var ghost = document.createElement("div");
    var clone = element.cloneNode(true);
    clone.style.width = rect.width + "px";
    clone.style.height = rect.height + "px";
    clone.style.maxHeight = rect.height + "px";
    clone.style.fontSize = window.getComputedStyle(element.parentElement).fontSize;
    clone.style.opacity = "0.8";
    clone.style.fontSize = window.getComputedStyle(element.parentElement).fontSize;
    if (!exhaustiveList || !elements || !elements.length) {
        ghost.appendChild(clone);
    }
    if (elements && elements.length) {
        elements.forEach(function (node, key) {
            var nodeClone = node.cloneNode(true);
            nodeClone.style.width = rect.width + "px";
            nodeClone.style.height = rect.height + "px";
            nodeClone.style.maxHeight = rect.height + "px";
            nodeClone.style.top = (key + 1) * 12 - rect.height - rect.height * key + "px";
            nodeClone.style.left = (key + 1) * 12 + "px";
            nodeClone.style.opacity = "0.6";
            nodeClone.style.zIndex = "" + (-key - 1);
            ghost.appendChild(nodeClone);
        });
    }
    ghost.className = "dhx_drag-ghost";
    return ghost;
}
var DragManager = /** @class */ (function () {
    function DragManager() {
        var _this = this;
        this._transferData = {};
        this._canMove = true;
        this._isDrag = false;
        this._onMouseMove = function (e) {
            if (!_this._transferData.start) {
                return;
            }
            var pageX = e.targetTouches ? e.targetTouches[0].pageX : e.pageX;
            var pageY = e.targetTouches ? e.targetTouches[0].pageY : e.pageY;
            var _a = _this._transferData, x = _a.x, y = _a.y, start = _a.start, componentId = _a.componentId;
            if (!_this._transferData.ghost) {
                if (Math.abs(x - pageX) < 3 && Math.abs(y - pageY) < 3) {
                    return;
                }
                else {
                    var ghost = _this._onDragStart(start, componentId, e);
                    if (!ghost) {
                        _this._endDrop(e);
                        return;
                    }
                    else {
                        _this._transferData.ghost = ghost;
                        document.body.appendChild(_this._transferData.ghost);
                    }
                }
            }
            _this._moveGhost(pageX, pageY);
            _this._onDrag(e);
        };
        this._onMouseUp = function (e) {
            if (!_this._transferData.x) {
                return;
            }
            if (_this._transferData.ghost) {
                _this._removeGhost();
                _this._onDrop(e);
            }
            else {
                _this._endDrop(e);
            }
            if (!e.targetTouches) {
                document.removeEventListener("mousemove", _this._onMouseMove);
                document.removeEventListener("mouseup", _this._onMouseUp);
            }
            else {
                document.removeEventListener("touchmove", _this._onMouseMove);
                document.removeEventListener("touchend", _this._onMouseUp);
            }
        };
    }
    DragManager.prototype.setItem = function (id, item) {
        CollectionStore_1.collectionStore.setItem(id, item);
    };
    DragManager.prototype.onMouseDown = function (event, source, itemsForGhost) {
        // onmousedown only for target objects
        if (event.which !== 1 && !event.targetTouches) {
            return;
        }
        if (!event.targetTouches) {
            document.addEventListener("mousemove", this._onMouseMove);
            document.addEventListener("mouseup", this._onMouseUp);
        }
        else {
            document.addEventListener("touchmove", this._onMouseMove, false);
            document.addEventListener("touchend", this._onMouseUp, false);
        }
        var item = html_1.locateNode(event, "dhx_id");
        var id = item && item.getAttribute("dhx_id");
        var componentId = html_1.locate(event, "dhx_widget_id");
        if (Array.isArray(source) && source.includes(id)) {
            this._transferData.source = __spreadArrays(source);
            this._itemsForGhost = itemsForGhost;
        }
        else {
            this._transferData.source = [id];
            this._itemsForGhost = null;
        }
        if (id && componentId) {
            var _a = html_1.getBox(item), left = _a.left, top_2 = _a.top;
            var pageX = event.targetTouches
                ? event.targetTouches[0].pageX
                : event.pageX;
            var pageY = event.targetTouches
                ? event.targetTouches[0].pageY
                : event.pageY;
            this._transferData.initXOffset = pageX - left;
            this._transferData.initYOffset = pageY - top_2;
            this._transferData.x = pageX;
            this._transferData.y = pageY;
            this._transferData.componentId = componentId;
            this._transferData.start = id;
            this._transferData.item = item;
        }
    };
    DragManager.prototype.isDrag = function () {
        return this._isDrag;
    };
    DragManager.prototype.cancelCanDrop = function (event) {
        this._canMove = false;
        this._isDrag = false;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropComponentId = _a.dropComponentId;
        var data = {
            start: start,
            source: source,
            target: target,
        };
        var collection = CollectionStore_1.collectionStore.getItem(dropComponentId);
        if (collection && target) {
            collection.events.fire(types_1.DragEvents.cancelDrop, [data, event]);
        }
        this._transferData.dropComponentId = null;
        this._transferData.target = null;
    };
    DragManager.prototype._moveGhost = function (x, y) {
        if (this._transferData.ghost) {
            this._transferData.ghost.style.left = x - this._transferData.initXOffset + "px";
            this._transferData.ghost.style.top = y - this._transferData.initYOffset + "px";
        }
    };
    DragManager.prototype._removeGhost = function () {
        document.body.removeChild(this._transferData.ghost);
    };
    DragManager.prototype._onDrop = function (e) {
        if (!this._canMove) {
            this._endDrop(e);
            return;
        }
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropComponentId = _a.dropComponentId, dropPosition = _a.dropPosition;
        var data = { start: start, source: source, target: target, dropPosition: dropPosition };
        var component = CollectionStore_1.collectionStore.getItem(dropComponentId);
        var config = component && component.config;
        if (!component || config.dragMode === "source") {
            this._endDrop(e);
            return;
        }
        if (component.events.fire(types_1.DragEvents.beforeDrop, [data, e])) {
            var to = {
                id: target,
                component: component,
            };
            var from = {
                id: start,
                component: this._transferData.component,
            };
            this._move(from, to);
            to.component.events.fire(types_1.DragEvents.afterDrop, [data, e]);
        }
        this._endDrop(e);
    };
    DragManager.prototype._onDragStart = function (id, componentId, e) {
        var component = CollectionStore_1.collectionStore.getItem(componentId);
        var config = component.config;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target;
        var data = {
            start: start,
            source: source,
            target: target,
        };
        if (config.dragMode === "target" || component._pregroupData) {
            return null;
        }
        var ghost = dragEventContent(this._transferData.item, this._itemsForGhost, config.dragItem === "column" || config.dragItem === "both");
        var ans = component.events.fire(types_1.DragEvents.beforeDrag, [data, e, ghost]);
        if (!ans || !id) {
            return null;
        }
        component.events.fire(types_1.DragEvents.dragStart, [data, e]);
        this._isDrag = true;
        this._toggleTextSelection(true);
        this._transferData.component = component;
        this._transferData.dragConfig = config;
        return ghost;
    };
    DragManager.prototype._onDrag = function (e) {
        var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
        var clientY = e.targetTouches ? e.targetTouches[0].clientY : e.clientY;
        var element = document.elementFromPoint(clientX, clientY);
        var collectionId = html_1.locate(element, "dhx_widget_id");
        if (!collectionId) {
            if (this._canMove) {
                this.cancelCanDrop(e);
            }
            return;
        }
        var component = CollectionStore_1.collectionStore.getItem(collectionId);
        var isTreeHeaderOrFooter = !!html_1.locateNodeByClassName(element, "dhx_grid-header") ||
            !!html_1.locateNodeByClassName(element, "dhx_grid-footer");
        var gridConfig = component && component.config.columns
            ? component.config
            : undefined;
        var isColumnDrag = gridConfig && (gridConfig.dragItem === "both" || gridConfig.dragItem === "column");
        if (isTreeHeaderOrFooter && !isColumnDrag) {
            if (this._canMove) {
                this.cancelCanDrop(e);
            }
            return;
        }
        var id = html_1.locate(element, "dhx_id");
        var rootId = html_1.locate(element, "dhx_root_id");
        if (!id && !rootId) {
            this.cancelCanDrop(e);
            this._transferData.dropComponentId = collectionId;
            this._transferData.target = null;
            this._canDrop(e);
            return;
        }
        var _a = this._transferData, dropComponentId = _a.dropComponentId, start = _a.start, source = _a.source, target = _a.target, componentId = _a.componentId, dropPosition = _a.dropPosition;
        if (component.config.dropBehaviour === "complex") {
            var pos = getPosition(e);
            if (pos <= 0.25) {
                this._transferData.dropPosition = "top";
            }
            else if (pos >= 0.75) {
                this._transferData.dropPosition = "bottom";
            }
            else {
                this._transferData.dropPosition = "in";
            }
        }
        else if ((target === id || target === rootId) && dropComponentId === collectionId) {
            return;
        }
        var from = {
            id: start,
            component: this._transferData.component,
        };
        if (component.config.dragMode === "source") {
            return;
        }
        from.component.events.fire(types_1.DragEvents.dragOut, [
            {
                start: start,
                source: source,
                target: target,
            },
            e,
        ]);
        if (collectionId !== componentId ||
            !helpers_1.isTreeCollection(from.component.data) ||
            (helpers_1.isTreeCollection(from.component.data) && from.component.data.canCopy(from.id, id))) {
            this.cancelCanDrop(e); // clear last
            this._transferData.target = id || rootId;
            this._transferData.dropComponentId = collectionId;
            var canMove = from.component.events.fire(types_1.DragEvents.dragIn, [
                {
                    start: start,
                    source: source,
                    target: target,
                    dropPosition: dropPosition,
                },
                e,
            ]);
            if (canMove) {
                this._canDrop(e);
            }
        }
        else {
            this.cancelCanDrop(e);
        }
    };
    DragManager.prototype._move = function (from, to) {
        var fromData = from.component.data;
        var toData = to.component.data;
        var index = 0;
        var componentId = to.id;
        var behaviour = helpers_1.isTreeCollection(toData) ? to.component.config.dropBehaviour : undefined;
        var gridConfig = from.component.config.columns
            ? from.component.config
            : undefined;
        var isColumnDrag = gridConfig &&
            (gridConfig.dragItem === "both" || gridConfig.dragItem === "column") &&
            gridConfig.columns.map(function (c) { return c.id; }).filter(function (id) { return id === from.id || id === to.id; }).length;
        if (isColumnDrag && from.component === to.component) {
            if (from.id === to.id)
                return;
            var grid = from.component;
            var currentCols = grid.config.columns.map(function (c) { return (__assign({}, c)); });
            var sourceIndex = currentCols.findIndex(function (c) { return c.id === from.id; });
            var componentIndex = currentCols.findIndex(function (c) { return c.id === to.id; });
            if (componentIndex === -1)
                return;
            currentCols.splice(componentIndex, 0, currentCols.splice(sourceIndex, 1)[0]);
            grid.setColumns(currentCols);
            grid.paint();
            return;
        }
        else if (isColumnDrag && from.component instanceof ts_grid_1.ProGrid && to.component instanceof ts_grid_1.ProGrid) {
            var grid = from.component;
            var nextGrid_1 = to.component;
            var currentCols = grid.config.columns.map(function (c) { return (__assign({}, c)); });
            var sourceIndex = currentCols.findIndex(function (c) { return c.id === from.id; });
            var nextGridCols = nextGrid_1.config.columns.map(function (c) { return (__assign({}, c)); });
            var componentIndex = nextGridCols.findIndex(function (c) { return c.id === to.id; });
            var isIdExsist = nextGridCols.findIndex(function (item) { return item.id === from.id; });
            var copyId_1 = isIdExsist >= 0 ? from.id + "_copy" : from.id;
            var currentColumnData_1 = [];
            grid.data.forEach(function (item) {
                var _a;
                currentColumnData_1.push((_a = {}, _a[copyId_1] = item[from.id], _a));
            });
            nextGrid_1.data.forEach(function (item, index) {
                nextGrid_1.data.update(item.id, __assign(__assign({}, item), currentColumnData_1[index]));
            });
            var col = currentCols.splice(sourceIndex, 1)[0];
            col.id = copyId_1;
            nextGridCols.splice(componentIndex, 0, col);
            nextGrid_1.setColumns(nextGridCols);
            nextGrid_1.paint();
            grid.setColumns(currentCols);
            grid.paint();
            return;
        }
        var isRootParent = to.id === to.component.config.rootParent;
        switch (behaviour) {
            case "child":
                break;
            case "sibling":
                componentId = toData.getParent(componentId);
                index = toData.getIndex(to.id) + 1;
                break;
            case "complex": {
                var dropPosition = this._transferData.dropPosition;
                if (isRootParent) {
                    componentId = to.id;
                    index = toData.getLength();
                }
                else {
                    if (dropPosition === "top") {
                        componentId = toData.getParent(componentId);
                        index = toData.getIndex(to.id);
                    }
                    else if (dropPosition === "bottom") {
                        componentId = toData.getParent(componentId);
                        index = toData.getIndex(to.id) + 1;
                    }
                }
                break;
            }
            default:
                // list move
                if (!to.id) {
                    index = -1;
                }
                else if (from.component === to.component &&
                    toData.getIndex(from.id) < toData.getIndex(to.id)) {
                    index = toData.getIndex(to.id) - 1;
                }
                else {
                    index = toData.getIndex(to.id);
                }
        }
        if (this._transferData.dragConfig.dragCopy) {
            if (this._transferData.source instanceof Array && this._transferData.source.length > 1) {
                this._transferData.source.map(function (selctedId) {
                    fromData.copy(selctedId, index, toData, componentId);
                    if (index > -1) {
                        index++;
                    }
                });
            }
            else {
                fromData.copy(from.id, index, toData, componentId);
            }
        }
        else {
            if (this._transferData.source instanceof Array && this._transferData.source.length > 1) {
                this._transferData.source.map(function (selctedId) {
                    fromData.move(selctedId, index, toData, componentId);
                    if (index > -1) {
                        index++;
                    }
                });
            }
            else {
                fromData.move(from.id, index, toData, componentId);
            }
        }
    };
    DragManager.prototype._endDrop = function (e) {
        this._toggleTextSelection(false);
        if (this._transferData.component) {
            var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target;
            var data = { start: start, source: source, target: target };
            this._transferData.component.events.fire(types_1.DragEvents.afterDrag, [data, e]);
        }
        this.cancelCanDrop(e);
        this._canMove = true;
        this._transferData = {};
        this._transferData.target = null;
        this._transferData.dropComponentId = null;
    };
    DragManager.prototype._canDrop = function (e) {
        this._canMove = true;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropPosition = _a.dropPosition;
        var data = {
            start: start,
            source: source,
            target: target,
            dropPosition: dropPosition,
        };
        var component = CollectionStore_1.collectionStore.getItem(this._transferData.dropComponentId);
        if (component && this._transferData.target) {
            component.events.fire(types_1.DragEvents.canDrop, [data, e]);
        }
    };
    DragManager.prototype._toggleTextSelection = function (add) {
        if (add) {
            document.body.classList.add("dhx_no-select");
        }
        else {
            document.body.classList.remove("dhx_no-select");
        }
    };
    return DragManager;
}());
var dhx = (window.dhxHelpers = window.dhxHelpers || {});
dhx.dragManager = dhx.dragManager || new DragManager();
exports.dragManager = dhx.dragManager;


/***/ }),

/***/ "../ts-data/sources/ajax.ts":
/*!**********************************!*\
  !*** ../ts-data/sources/ajax.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-data/sources/helpers.ts");
function toQueryString(data) {
    return Object.keys(data)
        .reduce(function (entries, key) {
        var value = typeof data[key] === "object" ? JSON.stringify(data[key]) : data[key];
        entries.push(key + "=" + encodeURIComponent(value));
        return entries;
    }, [])
        .join("&");
}
function inferResponseType(contentType) {
    if (!contentType) {
        return "text";
    }
    if (contentType.includes("json")) {
        return "json";
    }
    if (contentType.includes("xml")) {
        return "xml";
    }
    return "text";
}
function send(url, data, method, headers, responseType) {
    function parseResponse(responseText, genResponseType) {
        switch (genResponseType) {
            case "json": {
                return JSON.parse(responseText);
            }
            case "text": {
                return responseText;
            }
            case "xml": {
                var driver = helpers_1.toDataDriver(types_1.DataDriver.xml);
                if (driver) {
                    return driver.toJsonObject(responseText);
                }
                else {
                    return { parseError: "Incorrect data driver type: 'xml'" };
                }
            }
            default: {
                return responseText;
            }
        }
    }
    var allHeaders = headers || {};
    if (responseType) {
        allHeaders.Accept = "application/" + responseType;
    }
    if (method !== "GET") {
        allHeaders["Content-Type"] = allHeaders["Content-Type"] || "application/json";
    }
    if (method === "GET") {
        var urlData = data && typeof data === "object"
            ? toQueryString(data)
            : data && typeof data === "string"
                ? data
                : "";
        if (urlData) {
            url += !url.includes("?") ? "?" : "&";
            url += urlData;
        }
        data = null;
    }
    if (!window.fetch) {
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 300) {
                    if (responseType === "raw") {
                        resolve({
                            url: xhr.responseURL,
                            headers: xhr
                                .getAllResponseHeaders()
                                .trim()
                                .split(/[\r\n]+/)
                                .reduce(function (acc, cur) {
                                var kv = cur.split(": ");
                                acc[kv[0]] = kv[1];
                                return acc;
                            }, {}),
                            body: xhr.response,
                        });
                    }
                    if (xhr.status === 204) {
                        resolve();
                    }
                    else {
                        resolve(parseResponse(xhr.responseText, responseType || inferResponseType(xhr.getResponseHeader("Content-Type"))));
                    }
                }
                else {
                    reject({
                        status: xhr.status,
                        statusText: xhr.statusText,
                    });
                }
            };
            xhr.onerror = function () {
                reject({
                    status: xhr.status,
                    statusText: xhr.statusText,
                    message: xhr.responseText,
                });
            };
            xhr.open(method, url);
            for (var headerKey in allHeaders) {
                xhr.setRequestHeader(headerKey, allHeaders[headerKey]);
            }
            switch (method) {
                case "POST":
                case "DELETE":
                case "PUT":
                    xhr.send(data !== undefined ? JSON.stringify(data) : "");
                    break;
                case "GET":
                    xhr.send();
                    break;
                default:
                    xhr.send();
                    break;
            }
        });
    }
    else {
        return window
            .fetch(url, {
            method: method,
            body: data ? JSON.stringify(data) : null,
            headers: allHeaders,
        })
            .then(function (response) {
            if (response.ok) {
                var genResponseType = responseType || inferResponseType(response.headers.get("Content-Type"));
                if (genResponseType === "raw") {
                    return {
                        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
                        // @ts-ignore
                        headers: Object.fromEntries(response.headers.entries()),
                        url: response.url,
                        body: response.body,
                    };
                }
                if (response.status !== 204) {
                    switch (genResponseType) {
                        case "json": {
                            return response.json();
                        }
                        case "xml": {
                            var driver_1 = helpers_1.toDataDriver(types_1.DataDriver.xml);
                            if (driver_1) {
                                return response.text().then(function (xmlData) { return driver_1.toJsonObject(xmlData); });
                            }
                            else {
                                return response.text();
                            }
                        }
                        default:
                            return response.text();
                    }
                }
            }
            else {
                return response.text().then(function (message) {
                    return Promise.reject({
                        status: response.status,
                        statusText: response.statusText,
                        message: message,
                    });
                });
            }
        });
    }
}
exports.ajax = {
    get: function (url, data, config) {
        return send(url, data, "GET", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    post: function (url, data, config) {
        return send(url, data, "POST", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    put: function (url, data, config) {
        return send(url, data, "PUT", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    delete: function (url, data, config) {
        return send(url, data, "DELETE", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-data/sources/datacollection.ts":
/*!********************************************!*\
  !*** ../ts-data/sources/datacollection.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var loader_1 = __webpack_require__(/*! ./datacollection/loader */ "../ts-data/sources/datacollection/loader.ts");
var sort_1 = __webpack_require__(/*! ./datacollection/sort */ "../ts-data/sources/datacollection/sort.ts");
var dataproxy_1 = __webpack_require__(/*! ./dataproxy */ "../ts-data/sources/dataproxy.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-data/sources/helpers.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var DataCollection = /** @class */ (function () {
    function DataCollection(config, events) {
        var _this = this;
        this._changes = { order: [] };
        this.config = config || {};
        this._sort = new sort_1.Sort();
        this._loader = new loader_1.Loader(this, this._changes);
        this.events = events || new events_1.EventSystem(this);
        this.events.on("dataRequest", function (from, to) {
            var proxy = _this.dataProxy;
            if (proxy && proxy.updateUrl) {
                proxy.updateUrl(null, { from: from, limit: proxy.config.limit || to - from });
                _this.load(proxy);
            }
        });
        this.events.on(types_1.DataEvents.loadError, function (response) {
            if (typeof response !== "string") {
                helpers_1.dhxError(response);
            }
            else {
                helpers_1.dhxWarning(response);
            }
        });
        this._reset();
    }
    DataCollection.prototype._reset = function () {
        this._order = [];
        this._pull = {};
        this._changes = { order: [] };
        this._initOrder = null;
        this._meta = new WeakMap();
        this._loaded = false;
    };
    DataCollection.prototype.add = function (newItem, index) {
        var _this = this;
        if (!this.events.fire(types_1.DataEvents.beforeAdd, [newItem])) {
            return;
        }
        var out;
        if (Array.isArray(newItem)) {
            out = newItem.map(function (element, key) {
                if (key !== 0) {
                    index = index + 1;
                }
                return _this._add(element, index);
            });
        }
        else {
            out = this._add(newItem, index);
        }
        this._applySmart();
        return out;
    };
    DataCollection.prototype.remove = function (id) {
        var _this = this;
        if (id) {
            if (id instanceof Array) {
                __spreadArrays(id).map(function (elementId) {
                    _this._remove(elementId);
                });
            }
            else {
                this._remove(id);
            }
        }
    };
    DataCollection.prototype.removeAll = function () {
        this._reset();
        this.events.fire(types_1.DataEvents.removeAll);
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.exists = function (id) {
        return !!this._pull[id];
    };
    DataCollection.prototype.getNearId = function (id) {
        var item = this._pull[id];
        if (!item) {
            return this._order[0].id || "";
        }
    };
    DataCollection.prototype.getItem = function (id) {
        return this._pull[id];
    };
    DataCollection.prototype.update = function (id, newItem, silent) {
        var item = this.getItem(id);
        if (item) {
            if (helpers_1.isEqualObj(newItem, item)) {
                return;
            }
            if (newItem.id && id !== newItem.id) {
                helpers_1.dhxWarning("this method doesn't allow change id");
                if (helpers_1.isDebug()) {
                    // eslint-disable-next-line no-debugger
                    debugger;
                }
            }
            else {
                if (newItem.parent && item.parent && newItem.parent !== item.parent) {
                    this.move(id, -1, this, newItem.parent);
                }
                core_1.extend(this._pull[id], newItem, false);
                if (this.config.update) {
                    this.config.update(this._pull[id]);
                }
                if (!silent) {
                    this._onChange("update", id, this._pull[id]);
                }
            }
            this._applySmart();
        }
        else {
            helpers_1.dhxWarning("item not found");
        }
    };
    DataCollection.prototype.getIndex = function (id) {
        if (!id) {
            return -1;
        }
        var res = core_1.findIndex(this._order, function (item) { return item && item.id.toString() === id.toString(); });
        if (this._pull[id] && res >= 0) {
            return res;
        }
    };
    DataCollection.prototype.getId = function (index) {
        if (!this._order[index]) {
            return;
        }
        return this._order[index].id;
    };
    DataCollection.prototype.getLength = function () {
        return this._order.length;
    };
    DataCollection.prototype.isDataLoaded = function (from, to) {
        if (from === void 0) { from = 0; }
        if (to === void 0) { to = this._order.length; }
        if (core_1.isNumeric(from) && core_1.isNumeric(to)) {
            return this._order.slice(from, to).filter(function (item) { return item && item.$empty; }).length === 0;
        }
        // if check succeeds once, collection can't go back to not-loaded state
        if (!this._loaded) {
            this._loaded = !this.find(function (item) { return item.$empty; });
        }
        return !!this._loaded;
    };
    DataCollection.prototype.filter = function (rule, config) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (!config || !config.add) {
            this._order = this._initOrder || this._order;
            this._initOrder = null;
        }
        if (rule && typeof rule !== "function") {
            var t_1 = rule;
            if (t_1.by !== undefined && t_1.match !== undefined) {
                rule = t_1.compare
                    ? function (obj) { return t_1.compare(obj[t_1.by], t_1.match, obj, t_1.multi); }
                    : function (obj) { return obj[t_1.by] == t_1.match; };
            }
        }
        this._filter = config && config.smartFilter ? rule : null;
        this._applyFilters(rule);
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.find = function (conf) {
        for (var key in this._pull) {
            var res = helpers_1.findByConf(this._pull[key], conf);
            if (res) {
                return res;
            }
        }
        return null;
    };
    DataCollection.prototype.findAll = function (conf) {
        var res = [];
        for (var key in this._pull) {
            var item = helpers_1.findByConf(this._pull[key], conf);
            if (item) {
                res.push(item);
            }
        }
        return res;
    };
    DataCollection.prototype.sort = function (rule, config) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (config && config.smartSorting) {
            this._sorter = rule;
        }
        if (rule) {
            this._applySorters(rule);
        }
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.copy = function (id, index, target, targetId) {
        var _this = this;
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._copy(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._copy(id, index, target, targetId);
        }
    };
    DataCollection.prototype.move = function (id, index, target, targetId) {
        var _this = this;
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._move(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._move(id, index, target, targetId);
        }
    };
    DataCollection.prototype.forEach = function (callback) {
        for (var i = 0; i < this._order.length; i++) {
            callback.call(this, this._order[i], i, this._order);
        }
    };
    DataCollection.prototype.load = function (url, driver) {
        if (typeof url === "string") {
            this.dataProxy = url = new dataproxy_1.DataProxy(url);
        }
        this.dataProxy = url;
        return this._loader.load(url, driver);
    };
    DataCollection.prototype.parse = function (data, driver) {
        this._reset();
        return this._loader.parse(data, driver);
    };
    DataCollection.prototype.$parse = function (data) {
        var apx = this.config.approximate;
        if (apx) {
            data = this._approximate(data, apx.value, apx.maxNum);
        }
        this._parse_data(data);
        this._applySmart();
        this.events.fire(types_1.DataEvents.change, ["load"]);
        this.events.fire(types_1.DataEvents.load);
    };
    DataCollection.prototype.save = function (url) {
        if (typeof url === "string") {
            url = new dataproxy_1.DataProxy(url);
        }
        this._loader.save(url);
    };
    DataCollection.prototype.changeId = function (id, newId, silent) {
        if (newId === void 0) { newId = core_1.uid(); }
        if (!silent && !this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        var item = this.getItem(id);
        if (!item) {
            helpers_1.dhxWarning("item not found");
        }
        else {
            item.id = newId;
            core_1.extend(this._pull[id], item);
            this._pull[newId] = this._pull[id];
            if (!silent) {
                this._onChange("update", newId, this._pull[newId]);
            }
            delete this._pull[id];
        }
    };
    // todo: loop through the array and check saved statuses
    DataCollection.prototype.isSaved = function () {
        return !this._changes.order.length; // todo: bad solution, errors and holded elments are missed...
    };
    DataCollection.prototype.map = function (callback) {
        var result = [];
        for (var i = 0; i < this._order.length; i++) {
            result.push(callback.call(this, this._order[i], i, this._order));
        }
        return result;
    };
    DataCollection.prototype.mapRange = function (from, to, callback) {
        if (from < 0) {
            from = 0;
        }
        if (to > this._order.length - 1) {
            to = this._order.length - 1;
        }
        var arr = this._order.slice(from, to);
        var result = [];
        for (var i = from; i <= to; i++) {
            result.push(callback.call(this, this._order[i], i, arr));
        }
        return result;
    };
    DataCollection.prototype.reduce = function (callback, acc) {
        for (var i = 0; i < this._order.length; i++) {
            acc = callback.call(this, acc, this._order[i], i);
        }
        return acc;
    };
    DataCollection.prototype.serialize = function (driver) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        // remove $ attrs
        var data = this.map(function (item) {
            var newItem = __assign({}, item);
            Object.keys(newItem).forEach(function (key) {
                if (key.startsWith("$")) {
                    delete newItem[key];
                }
            });
            return newItem;
        });
        var dataDriver = helpers_1.toDataDriver(driver);
        if (dataDriver) {
            return dataDriver.serialize(data);
        }
    };
    DataCollection.prototype.getInitialData = function () {
        return this._initOrder;
    };
    DataCollection.prototype.setMeta = function (obj, key, value) {
        if (!obj)
            return;
        var map = this._meta.get(obj);
        if (!map) {
            map = {};
            this._meta.set(obj, map);
        }
        map[key] = value;
    };
    DataCollection.prototype.getMeta = function (obj, key) {
        var map = this._meta.get(obj);
        return map ? map[key] : null;
    };
    DataCollection.prototype.getMetaMap = function (obj) {
        return this._meta.get(obj);
    };
    DataCollection.prototype.setRange = function (from, to) {
        this._range = !to ? null : [from, to];
    };
    DataCollection.prototype.getRawData = function (from, to, order, mode) {
        order = order || this._order;
        if (mode === 1)
            return order;
        if (this._range) {
            from = this._range[0] + from;
            if (to === -1) {
                to = this._range[1];
            }
            else {
                var diff = to - from;
                to = from + diff > this._range[1] ? this._range[1] : from + diff;
            }
        }
        if (!to || (from === 0 && (to === -1 || to === order.length))) {
            return order;
        }
        if (from >= order.length)
            return [];
        if (to === -1 || to > order.length)
            to = order.length;
        var slice = order.slice(from, to);
        if (slice.filter(function (item) { return item.$empty; }).length !== 0) {
            this.events.fire("dataRequest", [from, to]);
        }
        return slice;
    };
    DataCollection.prototype._add = function (newItem, index) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        var id = this._addCore(newItem, index);
        this._onChange("add", newItem.id, newItem);
        this.events.fire(types_1.DataEvents.afterAdd, [newItem]);
        return id;
    };
    DataCollection.prototype._remove = function (id) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        var removedItem = this._pull[id];
        if (removedItem) {
            if (!this.events.fire(types_1.DataEvents.beforeRemove, [removedItem])) {
                return;
            }
            this._removeCore(removedItem.id);
            this._onChange("remove", id, removedItem);
        }
        this.events.fire(types_1.DataEvents.afterRemove, [removedItem]);
    };
    DataCollection.prototype._copy = function (id, index, target, targetId, key) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (!this.exists(id)) {
            return null;
        }
        var newid = core_1.uid();
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target) {
            if (!(target instanceof DataCollection) && targetId) {
                target.add(helpers_1.copyWithoutInner(this.getItem(id)), index);
                return;
            }
            if (target.exists(id)) {
                target.add(__assign(__assign({}, helpers_1.copyWithoutInner(this.getItem(id))), { id: newid }), index);
                return newid;
            }
            else {
                target.add(helpers_1.copyWithoutInner(this.getItem(id)), index);
                return id;
            }
        }
        this.add(__assign(__assign({}, helpers_1.copyWithoutInner(this.getItem(id))), { id: newid }), index);
        return newid;
    };
    DataCollection.prototype._move = function (id, index, target, targetId, key) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target && target !== this && this.exists(id)) {
            var item = core_1.copy(this.getItem(id), true);
            if (target.exists(id)) {
                item.id = core_1.uid();
            }
            if (targetId) {
                item.parent = targetId;
            }
            target.add(item, index);
            // remove data from original collection
            this.remove(id);
            return item.id;
        }
        if (this.getIndex(id) === index) {
            return null;
        }
        // move other elements
        var spliced = this._order.splice(this.getIndex(id), 1)[0];
        if (index === -1) {
            index = this._order.length;
        }
        this._order.splice(index, 0, spliced);
        this.events.fire(types_1.DataEvents.change, [id, "update", this.getItem(id)]);
        return id;
    };
    DataCollection.prototype._addCore = function (obj, index) {
        var _a;
        if (this.config.init) {
            obj = this.config.init(obj);
        }
        obj.id = (_a = obj.id) !== null && _a !== void 0 ? _a : core_1.uid();
        if (this._pull[obj.id]) {
            helpers_1.dhxError("Item " + obj.id + " already exist");
        }
        // todo: not ideal solution
        if (this._initOrder) {
            this._addToOrder(this._initOrder, obj, index);
        }
        this._addToOrder(this._order, obj, index);
        return obj.id;
    };
    DataCollection.prototype._removeCore = function (id) {
        if (this.getIndex(id) >= 0) {
            this._order = this._order.filter(function (el) { return el.id !== id; });
            delete this._pull[id];
        }
        if (this._initOrder && this._initOrder.length) {
            this._initOrder = this._initOrder.filter(function (el) { return el.id !== id; });
            delete this._pull[id];
        }
    };
    DataCollection.prototype._parse_data = function (data) {
        var index = this._order.length;
        if (this.config.prep) {
            data = this.config.prep(data);
        }
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            this._addCore(obj, index++);
        }
    };
    DataCollection.prototype._approximate = function (data, values, maxNum) {
        var len = data.length;
        var vlen = values.length;
        var rlen = Math.floor(len / maxNum);
        var newData = Array(Math.ceil(len / rlen));
        var index = 0;
        for (var i = 0; i < len; i += rlen) {
            var newItem = core_1.copy(data[i]);
            var end = Math.min(len, i + rlen);
            for (var j = 0; j < vlen; j++) {
                var sum = 0;
                for (var z = i; z < end; z++) {
                    sum += data[z][values[j]];
                }
                newItem[values[j]] = sum / (end - i);
            }
            newData[index++] = newItem;
        }
        return newData;
    };
    DataCollection.prototype._onChange = function (status, id, obj) {
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var item = _a[_i];
            // update pending item if previous state is "saving" or if item not saved yet
            if (item.id === id && !item.saving) {
                // update item
                if (item.error) {
                    item.error = false;
                }
                var index = this._changes.order.indexOf(item);
                item = __assign(__assign({}, item), { obj: obj, status: status });
                this._changes.order.splice(index, 1, item);
                this._loader.updateChanges(this._changes);
                if (status === "remove" && obj.$emptyRow)
                    return;
                this.events.fire(types_1.DataEvents.change, [id, status, obj]);
                return;
            }
        }
        this._changes.order.push({ id: id, status: status, obj: __assign({}, obj), saving: false });
        this._loader.updateChanges(this._changes);
        this.events.fire(types_1.DataEvents.change, [id, status, obj]);
    };
    DataCollection.prototype._addToOrder = function (array, obj, index) {
        if (index >= 0 && array[index]) {
            this._pull[obj.id] = obj;
            array.splice(index, 0, obj);
        }
        else {
            this._pull[obj.id] = obj;
            array.push(obj);
        }
    };
    DataCollection.prototype._applySmart = function () {
        if (this._filter) {
            this._applyFilters();
        }
        if (this._sorter) {
            this._applySorters();
        }
    };
    DataCollection.prototype._applySorters = function (by) {
        this._sort.sort(this._order, by, this._sorter);
        // sort the not-filtered dataset
        if (this._initOrder && this._initOrder.length) {
            this._sort.sort(this._initOrder, by, this._sorter);
        }
    };
    DataCollection.prototype._applyFilters = function (rule) {
        var filter = this._filter;
        if (rule === filter)
            rule = null;
        if (rule || filter) {
            var fOrder = this._order.filter(function (item) { return (rule ? rule(item) : true) && (filter ? filter(item) : true); });
            if (!this._initOrder) {
                this._initOrder = this._order;
            }
            this._order = fOrder;
        }
    };
    return DataCollection;
}());
exports.DataCollection = DataCollection;


/***/ }),

/***/ "../ts-data/sources/datacollection/loader.ts":
/*!***************************************************!*\
  !*** ../ts-data/sources/datacollection/loader.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = __webpack_require__(/*! ../helpers */ "../ts-data/sources/helpers.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-data/sources/types.ts");
var Loader = /** @class */ (function () {
    function Loader(parent, changes) {
        this._parent = parent;
        this._changes = changes; // todo: [dirty] mutation
    }
    Loader.prototype.load = function (url, driver) {
        var _this = this;
        // TODO: change way for checking lazyLoad
        if (url.config && !this._parent.events.fire(types_1.DataEvents.beforeLazyLoad, [])) {
            return;
        }
        return (this._parent.loadData = url
            .load()
            .then(function (data) {
            if (data) {
                return _this.parse(data, driver);
            }
            else {
                return [];
            }
        })
            .catch(function (error) {
            _this._parent.events.fire(types_1.DataEvents.loadError, [error]);
        }));
    };
    Loader.prototype.parse = function (data, driver) {
        var _this = this;
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        if (driver === "json" && !helpers_1.hasJsonOrArrayStructure(data)) {
            this._parent.events.fire(types_1.DataEvents.loadError, ["Uncaught SyntaxError: Unexpected end of input"]);
        }
        driver = helpers_1.toDataDriver(driver);
        data = driver.toJsonArray(data);
        if (!(data instanceof Array)) {
            var totalCount = data.total_count - 1;
            var from_1 = data.from;
            data = data.data;
            if (this._parent.getLength() === 0) {
                var newData = [];
                for (var i = 0, j = 0; i <= totalCount; i++) {
                    if (i >= from_1 && i <= from_1 + data.length - 1) {
                        newData.push(data[j]);
                        j++;
                    }
                    else {
                        newData.push({ $empty: true });
                    }
                }
                data = newData;
            }
            else {
                data.forEach(function (newItem, i) {
                    var index = from_1 + i;
                    var oldId = _this._parent.getId(index);
                    if (oldId) {
                        var emptyItem = _this._parent.getItem(oldId);
                        if (emptyItem && emptyItem.$empty) {
                            _this._parent.changeId(oldId, newItem.id, true);
                            _this._parent.update(newItem.id, __assign(__assign({}, newItem), { $empty: undefined }), true);
                        }
                    }
                    else {
                        helpers_1.dhxWarning("item not found");
                    }
                });
                this._parent.events.fire(types_1.DataEvents.afterLazyLoad, [from_1, data.length]);
                this._parent.events.fire(types_1.DataEvents.change);
                return data;
            }
        }
        if (this._parent.getInitialData()) {
            this._parent.removeAll();
        }
        this._parent.$parse(data);
        return data;
    };
    Loader.prototype.save = function (url) {
        var _this = this;
        var _loop_1 = function (el) {
            if (el.saving || el.pending) {
                helpers_1.dhxWarning("item is saving");
            }
            else {
                var prevEl_1 = this_1._findPrevState(el.id);
                if (prevEl_1 && prevEl_1.saving) {
                    var pending = new Promise(function (res, rej) {
                        prevEl_1.promise
                            .then(function () {
                            el.pending = false;
                            res(_this._setPromise(el, url));
                        })
                            .catch(function (err) {
                            _this._removeFromOrder(prevEl_1);
                            _this._setPromise(el, url);
                            helpers_1.dhxWarning(err);
                            rej(err);
                        });
                    });
                    this_1._addToChain(pending);
                    el.pending = true;
                }
                else {
                    this_1._setPromise(el, url);
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var el = _a[_i];
            _loop_1(el);
        }
        if (this._changes.order.length) {
            this._parent.saveData.then(function () {
                _this._saving = false;
            });
        }
    };
    Loader.prototype.updateChanges = function (changes) {
        this._changes = changes;
    };
    Loader.prototype._setPromise = function (el, url) {
        var _this = this;
        var status;
        switch (el.status) {
            case "remove":
                status = "delete";
                break;
            case "add":
                status = "insert";
                break;
            default:
                status = el.status;
                break;
        }
        el.promise = url.save(el.obj, status);
        el.promise
            .then(function () {
            _this._removeFromOrder(el);
        })
            .catch(function (err) {
            el.saving = false;
            el.error = true;
            helpers_1.dhxError(err);
        });
        el.saving = true;
        this._saving = true;
        this._addToChain(el.promise);
        return el.promise;
    };
    Loader.prototype._addToChain = function (promise) {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        if (this._parent.saveData && this._saving) {
            this._parent.saveData = this._parent.saveData.then(function () { return promise; });
        }
        else {
            this._parent.saveData = promise;
        }
    };
    Loader.prototype._findPrevState = function (id) {
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var el = _a[_i];
            if (el.id === id) {
                return el;
            }
        }
        return null;
    };
    Loader.prototype._removeFromOrder = function (el) {
        this._changes.order = this._changes.order.filter(function (item) { return !helpers_1.isEqualObj(item, el); });
    };
    return Loader;
}());
exports.Loader = Loader;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-data/sources/datacollection/sort.ts":
/*!*************************************************!*\
  !*** ../ts-data/sources/datacollection/sort.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = __webpack_require__(/*! ../helpers */ "../ts-data/sources/helpers.ts");
var Sort = /** @class */ (function () {
    function Sort() {
    }
    Sort.prototype.sort = function (array, by, perm) {
        this._createSorter(by);
        if (perm === by)
            by = null;
        if (perm || by)
            this._sort(array, perm, by);
    };
    Sort.prototype._createSorter = function (by) {
        var _this = this;
        if (by && !by.rule) {
            by.rule = function (a, b) {
                var aa = _this._checkVal(by.as, a[by.by]);
                var bb = _this._checkVal(by.as, b[by.by]);
                // [TODO] why we need naturalCompare
                return helpers_1.naturalCompare(aa.toString(), bb.toString());
            };
        }
    };
    Sort.prototype._checkVal = function (method, val) {
        return method ? method.call(this, val) : val;
    };
    Sort.prototype._sort = function (arr, conf, conf2) {
        var _this = this;
        var dir = {
            asc: 1,
            desc: -1,
        };
        return arr.sort(function (a, b) {
            var t = 0;
            if (conf)
                t = conf.rule.call(_this, a, b) * (dir[conf.dir] || dir.asc);
            if (t === 0 && conf2)
                t = conf2.rule.call(_this, a, b) * (dir[conf2.dir] || dir.asc);
            return t;
        });
    };
    return Sort;
}());
exports.Sort = Sort;


/***/ }),

/***/ "../ts-data/sources/dataproxy.ts":
/*!***************************************!*\
  !*** ../ts-data/sources/dataproxy.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ajax_1 = __webpack_require__(/*! ./ajax */ "../ts-data/sources/ajax.ts");
var DataProxy = /** @class */ (function () {
    function DataProxy(url, config) {
        this.url = this._url = url;
        this.config = config;
    }
    DataProxy.prototype.updateUrl = function (url, params) {
        if (params === void 0) { params = {}; }
        this._url = this.url = url || this._url;
        this.url += this.url.includes("?") ? "&" : "?";
        for (var param in params) {
            this.config[param] = params[param];
            this.url += param + "=" + encodeURIComponent(params[param]) + "&";
        }
        this.url = this.url.slice(0, -1);
    };
    DataProxy.prototype.load = function () {
        return ajax_1.ajax.get(this.url, null, { responseType: "text" });
    };
    DataProxy.prototype.save = function (data, mode) {
        switch (mode) {
            case "delete":
                return ajax_1.ajax.delete(this.url, data);
            case "insert":
                return ajax_1.ajax.put(this.url, data);
            case "update":
            default:
                return ajax_1.ajax.post(this.url, data);
        }
    };
    return DataProxy;
}());
exports.DataProxy = DataProxy;


/***/ }),

/***/ "../ts-data/sources/drivers/CsvDriver.ts":
/*!***********************************************!*\
  !*** ../ts-data/sources/drivers/CsvDriver.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var CsvDriver = /** @class */ (function () {
    function CsvDriver(config) {
        var initConfig = {
            skipHeader: 0,
            nameByHeader: false,
            rowDelimiter: "\n",
            columnDelimiter: ",",
        };
        this.config = __assign(__assign({}, initConfig), config);
        if (this.config.nameByHeader) {
            this.config.skipHeader = 1;
        }
    }
    CsvDriver.prototype.getFields = function (row, headers) {
        var parts = row.trim().split(this.config.columnDelimiter);
        var obj = {};
        for (var i = 0; i < parts.length; i++) {
            obj[headers ? headers[i] : i + 1] = isNaN(Number(parts[i])) ? parts[i] : parseFloat(parts[i]);
        }
        return obj;
    };
    CsvDriver.prototype.getRows = function (data) {
        return data.trim().split(this.config.rowDelimiter);
    };
    CsvDriver.prototype.toJsonArray = function (data) {
        var _this = this;
        var rows = this.getRows(data);
        var names = this.config.names;
        if (this.config.skipHeader) {
            var top_1 = rows.splice(0, this.config.skipHeader);
            if (this.config.nameByHeader) {
                names = top_1[0].trim().split(this.config.columnDelimiter);
            }
        }
        return rows.map(function (row) { return _this.getFields(row, names); });
    };
    CsvDriver.prototype.serialize = function (data, withoutHeader) {
        var header = data[0]
            ? Object.keys(data[0])
                .filter(function (key) { return !key.startsWith("$"); })
                .join(this.config.columnDelimiter) +
                this.config.columnDelimiter +
                this.config.rowDelimiter
            : "";
        var readyData = this._serialize(data);
        if (withoutHeader) {
            return readyData;
        }
        return header + readyData;
    };
    CsvDriver.prototype._serialize = function (data) {
        var _this = this;
        return data.reduce(function (csv, row) {
            var cells = Object.keys(row).reduce(function (total, key, i) {
                if (key.startsWith("$") || key === "items") {
                    return total;
                }
                return "" + total + row[key] + (i === row.length - 1 ? "" : _this.config.columnDelimiter);
            }, "");
            if (row.items) {
                return "" + csv + (csv ? "\n" : "") + cells + _this._serialize(row.items);
            }
            return "" + csv + (csv ? _this.config.rowDelimiter : "") + cells;
        }, "");
    };
    return CsvDriver;
}());
exports.CsvDriver = CsvDriver;


/***/ }),

/***/ "../ts-data/sources/drivers/JsonDriver.ts":
/*!************************************************!*\
  !*** ../ts-data/sources/drivers/JsonDriver.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var JsonDriver = /** @class */ (function () {
    function JsonDriver() {
    }
    JsonDriver.prototype.toJsonArray = function (data) {
        return this.getRows(data);
    };
    JsonDriver.prototype.serialize = function (data) {
        return data;
    };
    JsonDriver.prototype.getFields = function (row) {
        return row;
    };
    JsonDriver.prototype.getRows = function (data) {
        return typeof data === "string" ? JSON.parse(data) : data;
    };
    return JsonDriver;
}());
exports.JsonDriver = JsonDriver;


/***/ }),

/***/ "../ts-data/sources/drivers/XMLDriver.ts":
/*!***********************************************!*\
  !*** ../ts-data/sources/drivers/XMLDriver.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xml_1 = __webpack_require__(/*! ../serializers/xml */ "../ts-data/sources/serializers/xml.ts");
var ARRAY_NAME = "items";
var ITEM_NAME = "item";
// convert xml tag to js object, all subtags and attributes are mapped to the properties of result object
function tagToObject(tag, initialObj) {
    initialObj = initialObj || {};
    // map attributes
    var a = tag.attributes;
    if (a && a.length) {
        for (var i = 0; i < a.length; i++) {
            initialObj[a[i].name] = a[i].value;
        }
    }
    // map subtags
    var b = tag.childNodes;
    for (var i = 0; i < b.length; i++) {
        if (b[i].nodeType === 1) {
            var name_1 = b[i].tagName;
            if (initialObj[name_1]) {
                if (typeof initialObj[name_1].push !== "function") {
                    initialObj[name_1] = [initialObj[name_1]];
                }
                initialObj[name_1].push(tagToObject(b[i], {}));
            }
            else {
                initialObj[name_1] = tagToObject(b[i], {}); // sub-object for complex subtags
            }
        }
    }
    return initialObj;
}
var XMLDriver = /** @class */ (function () {
    function XMLDriver() {
    }
    XMLDriver.prototype.toJsonArray = function (data) {
        return this.getRows(data);
    };
    XMLDriver.prototype.toJsonObject = function (data) {
        var doc;
        if (typeof data === "string") {
            doc = this._fromString(data);
        }
        return tagToObject(doc);
    };
    XMLDriver.prototype.serialize = function (data) {
        return xml_1.jsonToXML(data);
    };
    XMLDriver.prototype.getFields = function (row) {
        return row;
    };
    XMLDriver.prototype.getRows = function (data) {
        if (typeof data === "string") {
            data = this._fromString(data);
        }
        if (data) {
            var childNodes = data.childNodes && data.childNodes[0] && data.childNodes[0].childNodes;
            if (!childNodes || !childNodes.length) {
                return null;
            }
            return this._getRows(childNodes);
        }
        return [];
    };
    XMLDriver.prototype._getRows = function (nodes) {
        var result = [];
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].tagName === ITEM_NAME) {
                result.push(this._nodeToJS(nodes[i]));
            }
        }
        return result;
    };
    XMLDriver.prototype._fromString = function (data) {
        try {
            return new DOMParser().parseFromString(data, "text/xml");
        }
        catch (_a) {
            return null;
        }
    };
    XMLDriver.prototype._nodeToJS = function (node) {
        var result = {};
        if (this._haveAttrs(node)) {
            var attrs = node.attributes;
            for (var i = 0; i < attrs.length; i++) {
                var _a = attrs[i], name_2 = _a.name, value = _a.value;
                result[name_2] = this._toType(value);
            }
        }
        if (node.nodeType === 3) {
            result.value = result.value || this._toType(node.textContent);
            return result;
        }
        var childNodes = node.childNodes;
        if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
                var subNode = childNodes[i];
                var tag = subNode.tagName;
                if (!tag) {
                    continue;
                }
                if (tag === ARRAY_NAME && subNode.childNodes) {
                    result[tag] = this._getRows(subNode.childNodes);
                }
                else {
                    if (this._haveAttrs(subNode)) {
                        result[tag] = this._nodeToJS(subNode);
                    }
                    else {
                        result[tag] = this._toType(subNode.textContent);
                    }
                }
            }
        }
        return result;
    };
    XMLDriver.prototype._toType = function (val) {
        if (val === "false" || val === "true") {
            return val === "true";
        }
        if (!isNaN(val)) {
            return Number(val);
        }
        return val;
    };
    XMLDriver.prototype._haveAttrs = function (node) {
        return node.attributes && node.attributes.length;
    };
    return XMLDriver;
}());
exports.XMLDriver = XMLDriver;


/***/ }),

/***/ "../ts-data/sources/drivers/drivers.ts":
/*!*********************************************!*\
  !*** ../ts-data/sources/drivers/drivers.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var JsonDriver_1 = __webpack_require__(/*! ./JsonDriver */ "../ts-data/sources/drivers/JsonDriver.ts");
var CsvDriver_1 = __webpack_require__(/*! ./CsvDriver */ "../ts-data/sources/drivers/CsvDriver.ts");
var XMLDriver_1 = __webpack_require__(/*! ./XMLDriver */ "../ts-data/sources/drivers/XMLDriver.ts");
exports.dataDrivers = {
    json: JsonDriver_1.JsonDriver,
    csv: CsvDriver_1.CsvDriver,
};
exports.dataDriversPro = __assign(__assign({}, exports.dataDrivers), { xml: XMLDriver_1.XMLDriver });


/***/ }),

/***/ "../ts-data/sources/helpers.ts":
/*!*************************************!*\
  !*** ../ts-data/sources/helpers.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dataproxy_1 = __webpack_require__(/*! ./dataproxy */ "../ts-data/sources/dataproxy.ts");
var drivers_1 = __webpack_require__(/*! ./drivers/drivers */ "../ts-data/sources/drivers/drivers.ts");
function isEqualObj(a, b) {
    for (var key in a) {
        if (a[key] !== b[key] || Array.isArray(a[key])) {
            return false;
        }
    }
    return true;
}
exports.isEqualObj = isEqualObj;
function naturalCompare(a, b) {
    if (isNaN(a) || isNaN(b)) {
        var ax_1 = [];
        var bx_1 = [];
        a.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
            ax_1.push([$1 || Infinity, $2 || ""]);
        });
        b.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
            bx_1.push([$1 || Infinity, $2 || ""]);
        });
        while (ax_1.length && bx_1.length) {
            var an = ax_1.shift();
            var bn = bx_1.shift();
            var nn = an[0] - bn[0] || an[1].localeCompare(bn[1]);
            if (nn) {
                return nn;
            }
        }
        return ax_1.length - bx_1.length;
    }
    return a - b;
}
exports.naturalCompare = naturalCompare;
function findByConf(item, conf) {
    if (typeof conf === "function") {
        if (conf.call(this, item)) {
            return item;
        }
    }
    else if (conf.by && conf.match) {
        if (item[conf.by] === conf.match) {
            return item;
        }
    }
}
exports.findByConf = findByConf;
function isDebug() {
    var dhx = window.dhx;
    if (typeof dhx !== "undefined") {
        return typeof dhx.debug !== "undefined" && dhx.debug;
    }
    // return typeof DHX_DEBUG_MODE !== "undefined" && DHX_DEBUG_MODE;
}
exports.isDebug = isDebug;
function dhxWarning(msg) {
    // tslint:disable-next-line:no-console
    console.warn(msg);
}
exports.dhxWarning = dhxWarning;
function dhxError(msg) {
    throw new Error(msg);
}
exports.dhxError = dhxError;
function toProxy(proxy) {
    var type = typeof proxy;
    if (type === "string") {
        return new dataproxy_1.DataProxy(proxy);
    }
    else if (type === "object") {
        return proxy;
    }
}
exports.toProxy = toProxy;
function toDataDriver(driver) {
    if (typeof driver === "string") {
        var dhx = window.dhx;
        var drivers = (dhx && dhx.dataDrivers) || drivers_1.dataDrivers;
        if (drivers[driver]) {
            return new drivers[driver]();
        }
        else {
            // tslint:disable-next-line:no-console
            console.warn("Incorrect data driver type:", driver);
            // tslint:disable-next-line:no-console
            console.warn("Available types:", JSON.stringify(Object.keys(drivers)));
        }
    }
    else if (typeof driver === "object") {
        return driver;
    }
}
exports.toDataDriver = toDataDriver;
function copyWithoutInner(obj, forbidden) {
    var result = {};
    for (var key in obj) {
        if (!key.startsWith("$") && (!forbidden || !forbidden[key])) {
            result[key] = obj[key];
        }
    }
    return result;
}
exports.copyWithoutInner = copyWithoutInner;
function isTreeCollection(obj) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    return Boolean(obj.getRoot);
}
exports.isTreeCollection = isTreeCollection;
function hasJsonOrArrayStructure(str) {
    if (typeof str === "object") {
        return true;
    }
    if (typeof str !== "string") {
        return false;
    }
    try {
        var result = JSON.parse(str);
        return Object.prototype.toString.call(result) === "[object Object]" || Array.isArray(result);
    }
    catch (err) {
        return false;
    }
}
exports.hasJsonOrArrayStructure = hasJsonOrArrayStructure;


/***/ }),

/***/ "../ts-data/sources/lazydataproxy.ts":
/*!*******************************************!*\
  !*** ../ts-data/sources/lazydataproxy.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dataproxy_1 = __webpack_require__(/*! ./dataproxy */ "../ts-data/sources/dataproxy.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ajax_1 = __webpack_require__(/*! ./ajax */ "../ts-data/sources/ajax.ts");
var LazyDataProxy = /** @class */ (function (_super) {
    __extends(LazyDataProxy, _super);
    function LazyDataProxy(url, config) {
        var _this = _super.call(this, url) || this;
        _this.config = core_1.extend({
            from: 0,
            limit: 50,
            delay: 50,
            prepare: 0,
        }, config);
        _this.updateUrl(url, { from: _this.config.from, limit: _this.config.limit });
        return _this;
    }
    LazyDataProxy.prototype.load = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (!_this._timeout) {
                ajax_1.ajax.get(_this.url, { responseType: "text" }).then(resolve);
                _this._cooling = true;
                _this._timeout = setTimeout(function () {
                    return;
                });
            }
            else {
                clearTimeout(_this._timeout);
                _this._timeout = setTimeout(function () {
                    ajax_1.ajax.get(_this.url, { responseType: "text" }).then(resolve);
                    _this._cooling = true;
                }, _this.config.delay);
                if (_this._cooling) {
                    resolve(null);
                    _this._cooling = false;
                }
            }
        });
    };
    return LazyDataProxy;
}(dataproxy_1.DataProxy));
exports.LazyDataProxy = LazyDataProxy;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-data/sources/selection.ts":
/*!***************************************!*\
  !*** ../ts-data/sources/selection.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var types_1 = __webpack_require__(/*! @dhx/ts-common/types */ "../ts-common/types.ts");
var types_2 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
var Selection = /** @class */ (function () {
    function Selection(config, data, events) {
        var _this = this;
        this.events = events || new events_1.EventSystem(this);
        this._data = data;
        this.config = config;
        this._data.events.on(types_2.DataEvents.removeAll, function () {
            _this._selected = null;
        });
        this._data.events.on(types_2.DataEvents.change, function () {
            if (_this._selected) {
                var near = _this._data.getNearId(_this._selected);
                if (near !== _this._selected) {
                    _this._selected = null;
                    if (near) {
                        _this.add(near);
                    }
                }
            }
        });
    }
    Selection.prototype.getId = function () {
        return this._selected;
    };
    Selection.prototype.getItem = function () {
        if (this._selected) {
            return this._data.getItem(this._selected);
        }
        return null;
    };
    Selection.prototype.remove = function (id) {
        id = id || this._selected;
        if (!id) {
            return true;
        }
        if (this.events.fire(types_1.SelectionEvents.beforeUnSelect, [id])) {
            this._data.update(id, { $selected: false }, true);
            this._selected = null;
            this.events.fire(types_1.SelectionEvents.afterUnSelect, [id]);
            return true;
        }
        return false;
    };
    Selection.prototype.add = function (id) {
        if (this._selected === id || !!this.config.disabled || !this._data.exists(id)) {
            return;
        }
        this.remove();
        this._addSingle(id);
    };
    Selection.prototype.enable = function () {
        this.config.disabled = false;
    };
    Selection.prototype.disable = function () {
        this.remove();
        this.config.disabled = true;
    };
    Selection.prototype._addSingle = function (id) {
        if (this.events.fire(types_1.SelectionEvents.beforeSelect, [id])) {
            this._selected = id;
            this._data.update(id, { $selected: true }, true);
            this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
        }
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),

/***/ "../ts-data/sources/serializers/xml.ts":
/*!*********************************************!*\
  !*** ../ts-data/sources/serializers/xml.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var INDENT_STEP = 4;
function ws(count) {
    return " ".repeat(count);
}
function itemToXML(item, indent) {
    if (indent === void 0) { indent = INDENT_STEP; }
    var result = ws(indent) + "<item>\n";
    for (var key in item) {
        if (Array.isArray(item[key])) {
            result += ws(indent + INDENT_STEP) + ("<" + key + ">\n");
            result +=
                item[key].map(function (subItem) { return itemToXML(subItem, indent + INDENT_STEP * 2); }).join("\n") +
                    "\n";
            result += ws(indent + INDENT_STEP) + ("</" + key + ">\n");
        }
        else {
            result += ws(indent + INDENT_STEP) + ("<" + key + ">" + item[key] + "</" + key + ">\n");
        }
    }
    result += ws(indent) + "</item>";
    return result;
}
function jsonToXML(data, root) {
    if (root === void 0) { root = "root"; }
    var result = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<" + root + ">";
    for (var i = 0; i < data.length; i++) {
        result += "\n" + itemToXML(data[i]);
    }
    return result + ("\n</" + root + ">");
}
exports.jsonToXML = jsonToXML;


/***/ }),

/***/ "../ts-data/sources/treecollection.ts":
/*!********************************************!*\
  !*** ../ts-data/sources/treecollection.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var datacollection_1 = __webpack_require__(/*! ./datacollection */ "../ts-data/sources/datacollection.ts");
var dataproxy_1 = __webpack_require__(/*! ./dataproxy */ "../ts-data/sources/dataproxy.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-data/sources/helpers.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
function addToOrder(store, obj, parent, index) {
    if (index !== undefined && index !== -1 && store[parent] && store[parent][index]) {
        store[parent].splice(index, 0, obj);
    }
    else {
        if (!store[parent]) {
            store[parent] = [];
        }
        store[parent].push(obj);
    }
}
var TreeCollection = /** @class */ (function (_super) {
    __extends(TreeCollection, _super);
    function TreeCollection(config, events) {
        var _a;
        var _this = _super.call(this, config, events) || this;
        _this._childs = {};
        var root = (_this._root = (config && config.rootId) || "_ROOT_" + core_1.uid());
        _this._childs = (_a = {}, _a[root] = [], _a);
        _this._initChilds = null;
        return _this;
    }
    TreeCollection.prototype.add = function (newItem, index, parent) {
        var _this = this;
        if (index === void 0) { index = -1; }
        if (parent === void 0) { parent = this._root; }
        if (!this.events.fire(types_1.DataEvents.beforeAdd, [newItem])) {
            return;
        }
        if (typeof newItem !== "object") {
            newItem = {
                value: newItem,
            };
        }
        if (Array.isArray(newItem)) {
            return newItem.map(function (element, key) {
                return _this._add(element, index, parent, key);
            });
        }
        else {
            return this._add(newItem, index, parent);
        }
    };
    TreeCollection.prototype.getRoot = function () {
        return this._root;
    };
    TreeCollection.prototype.getParent = function (id, asObj) {
        if (asObj === void 0) { asObj = false; }
        if (!this._pull[id]) {
            return null;
        }
        var parent = this._pull[id].parent;
        return asObj ? this._pull[parent] : parent;
    };
    TreeCollection.prototype.getItems = function (id) {
        if (this._childs && this._childs[id]) {
            return this._childs[id];
        }
        return [];
    };
    TreeCollection.prototype.getLength = function (id) {
        if (id === void 0) { id = this._root; }
        if (!this._childs[id]) {
            return null;
        }
        return this._childs[id].length;
    };
    TreeCollection.prototype.removeAll = function (id) {
        var _a;
        if (!id) {
            _super.prototype.removeAll.call(this);
            var root = this._root;
            this._initChilds = null;
            this._childs = (_a = {}, _a[root] = [], _a);
        }
        else if (this._childs[id]) {
            var childs = __spreadArrays(this._childs[id]);
            for (var _i = 0, childs_1 = childs; _i < childs_1.length; _i++) {
                var child = childs_1[_i];
                this.remove(child.id);
            }
        }
    };
    TreeCollection.prototype.getIndex = function (id) {
        var parent = this.getParent(id);
        if (!parent || !this._childs[parent]) {
            return -1;
        }
        return core_1.findIndex(this._childs[parent], function (item) { return item.id === id; });
    };
    TreeCollection.prototype.sort = function (rule) {
        var _this = this;
        if (!rule) {
            this._childs = {};
            // [dirty]
            this._parse_data(Object.keys(this._pull).map(function (key) { return _this._pull[key]; }));
            if (this._filters)
                this.filter(this._filters.filters, this._filters.config);
        }
        else {
            for (var key in this._childs) {
                this._sort.sort(this._childs[key], rule);
            }
            if (this._initChilds && Object.keys(this._initChilds).length) {
                for (var key in this._initChilds) {
                    this._sort.sort(this._initChilds[key], rule);
                }
            }
        }
        this.events.fire(types_1.DataEvents.change);
    };
    TreeCollection.prototype.filter = function (rule, config) {
        var _this = this;
        if (config === void 0) { config = {}; }
        if (!rule) {
            this.restoreOrder();
            return;
        }
        if (!this._initChilds) {
            this._initChilds = this._childs;
        }
        config.type = config.type || types_1.TreeFilterType.all;
        this._filters = {
            filters: {},
            config: config,
        };
        if (typeof rule !== "function") {
            if (rule["by"]) {
                this._filters.filters[rule.by] = rule;
            }
            else {
                for (var compare in rule) {
                    this._filters.filters[compare] = rule[compare];
                }
            }
        }
        else {
            this._filters.filters = rule;
        }
        var newChilds = {};
        this._recursiveFilter(this._filters.filters, config, this._root, 0, newChilds);
        Object.keys(newChilds).forEach(function (key) {
            var parentId = _this.getParent(key);
            var current = _this.getItem(key);
            while (parentId) {
                if (!newChilds[parentId]) {
                    newChilds[parentId] = [];
                }
                if (current && !newChilds[parentId].find(function (x) { return x.id === current.id; })) {
                    newChilds[parentId].push(current);
                }
                current = _this.getItem(parentId);
                parentId = _this.getParent(parentId);
            }
        });
        this._childs = newChilds;
        this.events.fire(types_1.DataEvents.change);
    };
    TreeCollection.prototype.restoreOrder = function () {
        if (this._initChilds) {
            this._childs = this._initChilds;
            this._initChilds = null;
        }
        this.events.fire(types_1.DataEvents.change);
    };
    TreeCollection.prototype.copy = function (id, index, target, targetId) {
        var _this = this;
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._copy(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._copy(id, index, target, targetId);
        }
    };
    TreeCollection.prototype.move = function (id, index, target, targetId) {
        var _this = this;
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._move(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._move(id, index, target, targetId);
        }
    };
    TreeCollection.prototype.forEach = function (callback, parent, level) {
        if (parent === void 0) { parent = this._root; }
        if (level === void 0) { level = Infinity; }
        if (!this.haveItems(parent) || level < 1) {
            return;
        }
        var array = this._childs[parent];
        for (var i = 0; i < array.length; i++) {
            callback.call(this, array[i], i, array);
            if (this.haveItems(array[i].id)) {
                this.forEach(callback, array[i].id, --level);
            }
        }
    };
    TreeCollection.prototype.eachChild = function (id, callback, direct, checkItem) {
        if (direct === void 0) { direct = true; }
        if (checkItem === void 0) { checkItem = function () { return true; }; }
        if (!this.haveItems(id)) {
            return;
        }
        for (var i = 0; i < this._childs[id].length; i++) {
            callback.call(this, this._childs[id][i], i);
            if (direct && checkItem(this._childs[id][i])) {
                this.eachChild(this._childs[id][i].id, callback, direct, checkItem);
            }
        }
    };
    TreeCollection.prototype.getNearId = function (id) {
        return id; // for selection
    };
    TreeCollection.prototype.loadItems = function (id, driver) {
        var _this = this;
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        var url = this.config.autoload + "?id=" + id;
        var proxy = new dataproxy_1.DataProxy(url);
        proxy.load().then(function (data) {
            driver = helpers_1.toDataDriver(driver);
            data = driver.toJsonArray(data);
            _this._parse_data(data, id);
            _this.events.fire(types_1.DataEvents.change);
        });
    };
    TreeCollection.prototype.refreshItems = function (id, driver) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        this.removeAll(id);
        this.loadItems(id, driver);
    };
    TreeCollection.prototype.eachParent = function (id, callback, self) {
        if (self === void 0) { self = false; }
        var item = this.getItem(id);
        if (!item) {
            return;
        }
        if (self) {
            callback.call(this, item);
        }
        if (item.parent === this._root) {
            return;
        }
        var parent = this.getItem(item.parent);
        callback.call(this, parent);
        this.eachParent(item.parent, callback);
    };
    TreeCollection.prototype.haveItems = function (id) {
        return id in this._childs;
    };
    TreeCollection.prototype.canCopy = function (id, target) {
        if (id === target) {
            return false;
        }
        var canCopy = true;
        this.eachParent(target, function (item) { return (item.id === id ? (canCopy = false) : null); }); // locate return string
        return canCopy;
    };
    TreeCollection.prototype.serialize = function (driver, checkItem) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        var data = this._serialize(this._root, checkItem);
        var dataDriver = helpers_1.toDataDriver(driver);
        if (dataDriver) {
            return dataDriver.serialize(data);
        }
    };
    TreeCollection.prototype.getId = function (index, parent) {
        if (parent === void 0) { parent = this._root; }
        if (!this._childs[parent] || !this._childs[parent][index]) {
            return;
        }
        return this._childs[parent][index].id;
    };
    // Non public API from suite_6.4
    TreeCollection.prototype.map = function (callback, parent, direct) {
        if (parent === void 0) { parent = this._root; }
        if (direct === void 0) { direct = true; }
        var result = [];
        if (!this.haveItems(parent)) {
            return result;
        }
        for (var i = 0; i < this._childs[parent].length; i++) {
            result.push(callback.call(this, this._childs[parent][i], i, this._childs));
            if (direct) {
                var childResult = this.map(callback, this._childs[parent][i].id, direct);
                result = result.concat(childResult);
            }
        }
        return result;
    };
    TreeCollection.prototype.getRawData = function (from, to, order, mode, parent) {
        parent = parent || this._root;
        var out;
        if (!this._childs[parent])
            return [];
        if (parent === this._root)
            out = _super.prototype.getRawData.call(this, from, to, this._childs[parent]);
        else
            out = this._childs[parent];
        if (mode === 2) {
            return this.flatten(out);
        }
        return out;
    };
    TreeCollection.prototype.flatten = function (input) {
        var _this = this;
        var out = [];
        input.forEach(function (a) {
            out.push(a);
            var kids = _this._childs[a.id];
            if (kids && a.$opened) {
                out = out.concat(_this.flatten(kids));
            }
        });
        return out;
    };
    TreeCollection.prototype._add = function (newItem, index, parent, key) {
        if (index === void 0) { index = -1; }
        if (parent === void 0) { parent = this._root; }
        newItem.parent = newItem.parent ? newItem.parent.toString() : parent;
        if (key > 0 && index !== -1) {
            index = index + 1;
        }
        var id = _super.prototype._add.call(this, newItem, index);
        if (Array.isArray(newItem.items)) {
            for (var _i = 0, _a = newItem.items; _i < _a.length; _i++) {
                var item = _a[_i];
                this.add(item, -1, newItem.id);
            }
        }
        return id;
    };
    TreeCollection.prototype._copy = function (id, index, target, targetId, key) {
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (!this.exists(id)) {
            return null;
        }
        var currentChilds = this._childs[id];
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target === this && !this.canCopy(id, targetId)) {
            return null;
        }
        var itemCopy = helpers_1.copyWithoutInner(this.getItem(id), { items: true });
        if (target.exists(id)) {
            itemCopy.id = core_1.uid();
        }
        if (!helpers_1.isTreeCollection(target)) {
            target.add(itemCopy, index);
            return;
        }
        if (this.exists(id)) {
            itemCopy.parent = targetId;
            if (target !== this && targetId === this._root) {
                itemCopy.parent = target.getRoot();
            }
            target.add(itemCopy, index);
            id = itemCopy.id;
        }
        if (currentChilds) {
            for (var _i = 0, currentChilds_1 = currentChilds; _i < currentChilds_1.length; _i++) {
                var child = currentChilds_1[_i];
                var childId = child.id;
                var childIndex = this.getIndex(childId);
                if (typeof id === "string") {
                    this.copy(childId, childIndex, target, id);
                }
            }
        }
        return id;
    };
    TreeCollection.prototype._move = function (id, index, target, targetId, key) {
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (!this.exists(id)) {
            return null;
        }
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target !== this) {
            if (!helpers_1.isTreeCollection(target)) {
                // move to datacollection
                target.add(helpers_1.copyWithoutInner(this.getItem(id)), index);
                this.remove(id);
                return;
            }
            var returnId = this.copy(id, index, target, targetId);
            this.remove(id);
            return returnId;
        }
        // move inside
        if (!this.canCopy(id, targetId)) {
            return null;
        }
        var parent = this.getParent(id);
        var parentIndex = this.getIndex(id);
        // get item from parent array and move to target array
        var spliced = this._childs[parent].splice(parentIndex, 1)[0];
        spliced.parent = targetId; // need for next moving, ... not best solution, may be full method for get item
        if (!this._childs[parent].length) {
            delete this._childs[parent];
        }
        if (!this.haveItems(targetId)) {
            this._childs[targetId] = [];
        }
        if (index === -1) {
            index = this._childs[targetId].push(spliced);
        }
        else {
            this._childs[targetId].splice(index, 0, spliced);
        }
        this.events.fire(types_1.DataEvents.change, [id, "update", this.getItem(id)]);
        return id;
    };
    TreeCollection.prototype._reset = function (id) {
        var _a;
        if (id) {
            var childs = __spreadArrays(this._childs[id]);
            for (var _i = 0, childs_2 = childs; _i < childs_2.length; _i++) {
                var child = childs_2[_i];
                this.remove(child.id);
            }
        }
        else {
            _super.prototype._reset.call(this);
            var root = this._root;
            this._initChilds = null;
            this._childs = (_a = {}, _a[root] = [], _a);
        }
    };
    TreeCollection.prototype._removeCore = function (id) {
        if (this._pull[id]) {
            var parent_1 = this.getParent(id);
            this._childs[parent_1] = this._childs[parent_1].filter(function (item) { return item.id !== id; });
            if (parent_1 !== this._root && !this._childs[parent_1].length) {
                delete this._childs[parent_1];
            }
            if (this._initChilds && this._initChilds[parent_1]) {
                this._initChilds[parent_1] = this._initChilds[parent_1].filter(function (item) { return item.id !== id; });
                if (parent_1 !== this._root && !this._initChilds[parent_1].length) {
                    delete this._initChilds[parent_1];
                }
            }
            this._fastDeleteChilds(this._childs, id);
            if (this._initChilds) {
                this._fastDeleteChilds(this._initChilds, id);
            }
        }
    };
    TreeCollection.prototype._addToOrder = function (_order, obj, index) {
        var childs = this._childs;
        var initChilds = this._initChilds;
        var parent = obj.parent;
        this._pull[obj.id] = obj;
        if (obj.parent &&
            this._pull[obj.parent] &&
            this._pull[obj.parent].items &&
            !this._pull[obj.parent].items.find(function (item) { return item.id === obj.id; })) {
            this._pull[obj.parent].items.push(obj);
        }
        _super.prototype._addToOrder.call(this, _order, obj, index);
        addToOrder(childs, obj, parent, index);
        if (initChilds) {
            addToOrder(initChilds, obj, parent, index);
        }
    };
    TreeCollection.prototype._parse_data = function (data, parent) {
        if (parent === void 0) { parent = this._root; }
        var _a;
        var index = this._order.length;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            if (this.config.init) {
                obj = this.config.init(obj);
            }
            if (obj && typeof obj !== "object") {
                obj = {
                    value: obj,
                };
            }
            obj.id = (_a = obj.id) !== null && _a !== void 0 ? _a : core_1.uid();
            obj.parent =
                typeof obj.parent === "undefined" || obj.parent === null || (obj.parent && obj.$items)
                    ? parent
                    : obj.parent;
            if (this._pull[obj.id]) {
                helpers_1.dhxError("Item " + obj.id + " already exist");
            }
            this._pull[obj.id] = obj;
            this._order[index++] = obj;
            if (!this._childs[obj.parent]) {
                this._childs[obj.parent] = [];
            }
            this._childs[obj.parent].push(obj);
            if (obj.items && obj.items instanceof Object) {
                this._parse_data(obj.items, obj.id);
            }
        }
    };
    TreeCollection.prototype._fastDeleteChilds = function (target, id) {
        if (this._pull[id]) {
            delete this._pull[id];
        }
        if (!target[id]) {
            return;
        }
        for (var i = 0; i < target[id].length; i++) {
            this._fastDeleteChilds(target, target[id][i].id);
        }
        delete target[id];
    };
    TreeCollection.prototype._recursiveFilter = function (rule, config, current, level, newChilds) {
        var _this = this;
        var childs = this._childs[current];
        if (!childs) {
            return;
        }
        var condition = function (item) {
            switch (config.type) {
                case types_1.TreeFilterType.all: {
                    return true;
                }
                case types_1.TreeFilterType.level: {
                    return level === config.level;
                }
                case types_1.TreeFilterType.leafs: {
                    return !_this.haveItems(item.id);
                }
            }
        };
        if (typeof rule === "function") {
            var customRule = function (item) { return condition(item) && rule(item); };
            var filtered = childs.filter(customRule);
            if (filtered.length) {
                newChilds[current] = filtered;
            }
        }
        else {
            var customRule = function (item) {
                var responseOfRule = true;
                for (var compare in rule) {
                    if (rule[compare].by && rule[compare].match !== "") {
                        responseOfRule =
                            item[rule[compare].by] &&
                                item[rule[compare].by]
                                    .toString()
                                    .toLocaleLowerCase()
                                    .indexOf(rule[compare].match.toString().toLowerCase()) !== -1;
                    }
                    if (!responseOfRule)
                        break;
                }
                return condition(item) && responseOfRule;
            };
            var filtered = childs.filter(customRule);
            if (filtered.length) {
                newChilds[current] = filtered;
            }
        }
        for (var _i = 0, childs_3 = childs; _i < childs_3.length; _i++) {
            var child = childs_3[_i];
            this._recursiveFilter(rule, config, child.id, level + 1, newChilds);
        }
    };
    TreeCollection.prototype._serialize = function (parent, fn) {
        var _this = this;
        if (parent === void 0) { parent = this._root; }
        return this.map(function (item) {
            var itemCopy = {};
            for (var key in item) {
                if (key === "parent" || key === "items" || key.startsWith("$")) {
                    continue;
                }
                itemCopy[key] = item[key];
            }
            if (fn) {
                itemCopy = fn(itemCopy);
            }
            if (_this.haveItems(item.id)) {
                itemCopy.items = _this._serialize(item.id, fn);
            }
            return itemCopy;
        }, parent, false);
    };
    return TreeCollection;
}(datacollection_1.DataCollection));
exports.TreeCollection = TreeCollection;


/***/ }),

/***/ "../ts-data/sources/types.ts":
/*!***********************************!*\
  !*** ../ts-data/sources/types.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TreeFilterType;
(function (TreeFilterType) {
    TreeFilterType["all"] = "all";
    TreeFilterType["level"] = "level";
    TreeFilterType["leafs"] = "leafs";
})(TreeFilterType = exports.TreeFilterType || (exports.TreeFilterType = {}));
var DataEvents;
(function (DataEvents) {
    DataEvents["afterAdd"] = "afteradd";
    DataEvents["beforeAdd"] = "beforeadd";
    DataEvents["removeAll"] = "removeall";
    DataEvents["beforeRemove"] = "beforeremove";
    DataEvents["afterRemove"] = "afterremove";
    DataEvents["change"] = "change";
    DataEvents["load"] = "load";
    DataEvents["loadError"] = "loaderror";
    DataEvents["beforeLazyLoad"] = "beforelazyload";
    DataEvents["afterLazyLoad"] = "afterlazyload";
})(DataEvents = exports.DataEvents || (exports.DataEvents = {}));
var DragEvents;
(function (DragEvents) {
    DragEvents["beforeDrag"] = "beforeDrag";
    DragEvents["dragStart"] = "dragStart";
    DragEvents["dragOut"] = "dragOut";
    DragEvents["dragIn"] = "dragIn";
    DragEvents["canDrop"] = "canDrop";
    DragEvents["cancelDrop"] = "cancelDrop";
    DragEvents["beforeDrop"] = "beforeDrop";
    DragEvents["afterDrop"] = "afterDrop";
    DragEvents["afterDrag"] = "afterDrag";
})(DragEvents = exports.DragEvents || (exports.DragEvents = {}));
var DataDriver;
(function (DataDriver) {
    DataDriver["json"] = "json";
    DataDriver["csv"] = "csv";
    DataDriver["xml"] = "xml";
})(DataDriver = exports.DataDriver || (exports.DataDriver = {}));


/***/ }),

/***/ "../ts-grid/index.ts":
/*!***************************!*\
  !*** ../ts-grid/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Grid */ "../ts-grid/sources/Grid.ts"));
__export(__webpack_require__(/*! ./sources/ProGrid */ "../ts-grid/sources/ProGrid.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-grid/sources/types.ts"));
__export(__webpack_require__(/*! ./sources/helpers/cells */ "../ts-grid/sources/helpers/cells.ts"));
var Cells_1 = __webpack_require__(/*! ./sources/ui/Cells */ "../ts-grid/sources/ui/Cells.ts");
exports.getTreeCell = Cells_1.getTreeCell;
__export(__webpack_require__(/*! ./sources/helpers/data */ "../ts-grid/sources/helpers/data.ts"));
__export(__webpack_require__(/*! ./sources/helpers/main */ "../ts-grid/sources/helpers/main.ts"));


/***/ }),

/***/ "../ts-grid/sources/Exporter.ts":
/*!**************************************!*\
  !*** ../ts-grid/sources/Exporter.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(/*! ./helpers/main */ "../ts-grid/sources/helpers/main.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
function fillArray(arr, value) {
    for (var i = 0; i < arr.length; i++) {
        arr[i] = value;
    }
    return arr;
}
var Exporter = /** @class */ (function () {
    function Exporter(_view) {
        this._view = _view;
    }
    Exporter.prototype.xlsx = function (config) {
        return this._export(config);
    };
    Exporter.prototype.csv = function (config) {
        if (config === void 0) { config = {}; }
        config = __assign({
            asFile: true,
            rowDelimiter: "\n",
            columnDelimiter: ",",
            skipHeader: 0,
        }, config);
        var csv;
        if ("getRoot" in this._view.data && config.flat) {
            csv = this.getFlatCSV(config);
        }
        else {
            csv = this._getCSV(config);
        }
        var name = config.name || "grid_export";
        if (config.asFile) {
            core_1.downloadFile(csv, name + ".csv", "text/csv");
        }
        return csv;
    };
    Exporter.prototype._export = function (config) {
        if (config === void 0) { config = {}; }
        var configCols = this._view.config.columns.filter(function (i) { return !i.hidden; });
        var rowsIndexMap = {};
        var headers = main_1.transpose(configCols.map(function (col) { return col.header.map(function (level) { return level.text || " "; }); }));
        var columns = [];
        var uniqStyles = {
            default: {
                color: "#000000",
                background: "#FFFFFF",
                fontSize: 14,
            },
        };
        var cells = [];
        var columnsIndexMap = {};
        var data = this._view.data.serialize().map(function (row, i) {
            rowsIndexMap[row.id] = i;
            var rowData = configCols.map(function (col, k) {
                columnsIndexMap[col.id] = k;
                return main_1.removeHTMLTags(row[col.id]);
            });
            return rowData;
        });
        var footer = [];
        var content = this._view.content;
        var _loop_1 = function (col) {
            if (col.footer) {
                var id_1 = col.id;
                var columnData = this_1._view.data.serialize().reduce(function (items, item) {
                    if (item[id_1] !== undefined && item[id_1] !== "" && !isNaN(item[id_1])) {
                        items.push(parseFloat(item[id_1]));
                    }
                    return items;
                }, []);
                var roots = columnData;
                if (this_1._view.config.type === "tree") {
                    var datacollection_1 = this_1._view.data;
                    var data_1 = datacollection_1.serialize();
                    roots = data_1.reduce(function (total, item) {
                        if (item.$level === 0) {
                            if (item[id_1] !== undefined && item[id_1] !== "" && !isNaN(item[id_1])) {
                                total.push(parseFloat(item[id_1]) || 0);
                            }
                            else {
                                var value_1 = 0;
                                datacollection_1.eachChild(item.id, function (cell) {
                                    if (!datacollection_1.haveItems(cell.id)) {
                                        value_1 += parseFloat(cell[id_1]);
                                    }
                                });
                                total.push(value_1);
                            }
                        }
                        return total;
                    }, []);
                }
                if (col.footer[0].content) {
                    var val = content[col.footer[0].content].calculate(columnData, roots);
                    footer.push(val);
                }
                else {
                    footer.push(col.footer[0].css || col.footer[0].text || " ");
                }
            }
            columns.push({ width: col.width });
            for (var key in col.$cellCss) {
                var colStyle = col.$cellCss[key];
                var colStyleHash = colStyle
                    .split("")
                    .reduce(function (h, letter) {
                    var hh = (h << 5) - h + letter.charCodeAt(0);
                    return Math.abs(hh & hh);
                }, 0)
                    .toString();
                if (!uniqStyles[colStyleHash]) {
                    var cont = document.body;
                    var css = main_1.getStyleByClass(colStyle, cont, "dhx_grid-row", uniqStyles.default);
                    if (css) {
                        uniqStyles[colStyleHash] = css;
                    }
                }
                if (uniqStyles[colStyleHash]) {
                    cells.push([rowsIndexMap[key], configCols.indexOf(col), colStyleHash]);
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, configCols_1 = configCols; _i < configCols_1.length; _i++) {
            var col = configCols_1[_i];
            _loop_1(col);
        }
        if (footer.length) {
            data.push(footer);
        }
        var exportData = {
            name: config.name || "data",
            columns: columns,
            header: headers,
            data: data,
            styles: {
                cells: cells,
                css: uniqStyles,
            },
        };
        if (config.url) {
            var form_1 = document.createElement("form");
            form_1.setAttribute("target", "_blank");
            form_1.setAttribute("action", config.url);
            form_1.setAttribute("method", "POST");
            form_1.style.visibility = "hidden";
            var input = document.createElement("textarea");
            input.setAttribute("name", "data");
            input.value = JSON.stringify(exportData);
            form_1.appendChild(input);
            document.body.appendChild(form_1);
            form_1.submit();
            setTimeout(function () {
                form_1.parentNode.removeChild(form_1);
            }, 100);
        }
        return exportData;
    };
    Exporter.prototype.getFlatCSV = function (config) {
        var treeData = this._view.data;
        var root = treeData.getRoot();
        var firstCol = this._view.config.columns[0];
        var maxLevel = treeData.getMaxLevel();
        var getParentsChain = function (item, data) {
            var parents = [];
            for (var i = 0; i <= maxLevel; i++) {
                if (item && item[firstCol.id]) {
                    parents[item.$level] = item[firstCol.id];
                    var parent_1 = data.getParent(item.id, true);
                    if (parent_1 && parent_1.id) {
                        item = parent_1;
                    }
                    else {
                        item = null;
                    }
                }
                else {
                    parents[i] = "";
                }
            }
            return parents;
        };
        var total = "";
        treeData.eachChild(root, function (item) {
            var parents = getParentsChain(item, treeData).join(config.columnDelimiter);
            total +=
                parents +
                    Object.keys(item).reduce(function (values, key, i) {
                        if (key !== "id" && key !== "parent" && !key.startsWith("$") && i !== 0) {
                            return values + config.columnDelimiter + (item[key] === null ? "" : item[key]);
                        }
                        return values;
                    }, "");
            total += config.rowDelimiter;
        });
        var exportData = this._export(config);
        // [dirty]
        var emptyHeaders = fillArray(new Array(maxLevel + 1), "");
        var headers = exportData.header.map(function (header) {
            header.splice.apply(header, __spreadArrays([0, 1], emptyHeaders));
            return header;
        });
        var head = new ts_data_1.CsvDriver(config).serialize(headers, true) + config.rowDelimiter;
        return head + total;
    };
    Exporter.prototype._getCSV = function (config) {
        var exportData = this._export(config);
        var headers = exportData.header;
        var driver = new ts_data_1.CsvDriver(config);
        var head = driver.serialize(headers, true);
        var readyData = driver.serialize(exportData.data, true);
        return head + "\n" + readyData;
    };
    return Exporter;
}());
exports.Exporter = Exporter;


/***/ }),

/***/ "../ts-grid/sources/Grid.ts":
/*!**********************************!*\
  !*** ../ts-grid/sources/Grid.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var KeyManager_1 = __webpack_require__(/*! @dhx/ts-common/KeyManager */ "../ts-common/KeyManager.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var Exporter_1 = __webpack_require__(/*! ./Exporter */ "../ts-grid/sources/Exporter.ts");
var data_1 = __webpack_require__(/*! ./helpers/data */ "../ts-grid/sources/helpers/data.ts");
var cells_1 = __webpack_require__(/*! ./helpers/cells */ "../ts-grid/sources/helpers/cells.ts");
var main_1 = __webpack_require__(/*! ./helpers/main */ "../ts-grid/sources/helpers/main.ts");
var Selection_1 = __webpack_require__(/*! ./Selection */ "../ts-grid/sources/Selection.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-grid/sources/types.ts");
var render_1 = __webpack_require__(/*! ./ui/render */ "../ts-grid/sources/ui/render.ts");
var date_1 = __webpack_require__(/*! @dhx/ts-common/date */ "../ts-common/date.ts");
var content_1 = __webpack_require__(/*! ./ui/content */ "../ts-grid/sources/ui/content.ts");
var columnsResizer_1 = __webpack_require__(/*! ./columnsResizer */ "../ts-grid/sources/columnsResizer.ts");
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message */ "../ts-message/index.ts");
var keys_1 = __webpack_require__(/*! ./helpers/keys */ "../ts-grid/sources/helpers/keys.ts");
var FocusManager_1 = __webpack_require__(/*! @dhx/ts-common/FocusManager */ "../ts-common/FocusManager.ts");
var Grid = /** @class */ (function (_super) {
    __extends(Grid, _super);
    function Grid(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
            timeStamp: null,
        };
        _this.config = core_1.extend({
            rowHeight: 40,
            headerRowHeight: 40,
            footerRowHeight: 40,
            keyNavigation: true,
            // selection: "cell", // TODO: turn it on to test aria attrs only OR fix keynavigation to work without selection (or special selection mode enabled by default)
            sortable: true,
            columns: [],
            data: [],
            tooltip: true,
            rootParent: (typeof container === "string" && container) || _this._uid,
            // TODO: remove suite_7.0
            headerSort: true,
        }, config);
        _this.content = content_1.getContent();
        _this._scroll = {
            top: 0,
            left: 0,
        };
        // TODO: remove suite_7.0
        _this.config.autoWidth = _this.config.autoWidth || _this.config.fitToContainer;
        _this.config.adjust = _this.config.adjust || _this.config.columnsAutoWidth;
        _this.config.editable = _this.config.editable || _this.config.editing;
        _this.config.leftSplit = _this.config.leftSplit || _this.config.splitAt;
        if (!_this.config.sortable || !_this.config.headerSort) {
            _this.config.sortable = false;
        }
        _this.config.columns.forEach(function (col) {
            col.format = col.format || col.dateFormat;
        });
        var showCellTooltip = function (row, column, node) {
            if (row && column && main_1.isTooltip(_this.config, column)) {
                var value = data_1.toFormat(row[column.id], column.type, column.format);
                if (column.tooltipTemplate) {
                    value = column.tooltipTemplate(value, row, column);
                }
                else if (value && column.template) {
                    value = column.template(value, row, column);
                }
                value &&
                    ts_message_1.tooltip(value, {
                        css: "dhx_grid_tooltip",
                        node: node,
                        htmlEnable: main_1.isHtmlEnable(_this.config, column),
                    });
            }
        };
        var showContentTootlip = function (e, column) {
            if (column && main_1.isTooltip(_this.config, column)) {
                var value = (e.target.querySelector(".dhx_grid-header-cell-text span") &&
                    e.target.querySelector(".dhx_grid-header-cell-text span").textContent) ||
                    (e.target.querySelector(".dhx_grid-footer-cell-text span") &&
                        e.target.querySelector(".dhx_grid-footer-cell-text span").textContent) ||
                    "";
                value &&
                    ts_message_1.tooltip(value, {
                        css: "dhx_grid_tooltip",
                        node: e.target,
                        htmlEnable: main_1.isHtmlEnable(_this.config, column),
                    });
            }
        };
        _this._htmlEvents = {
            onclick: html_1.eventHandler(function (e) { return html_1.locate(e); }, {
                "dhx_grid-header-cell--sortable": function (e, id) {
                    var _a;
                    var isResizable = e.target.getAttribute("dhx_resized");
                    var column = _this._getColumn(id);
                    if (column &&
                        main_1.isSortable(_this.config, column) &&
                        !isResizable &&
                        _this.events.fire(types_1.GridEvents.beforeSort, [column, _this._sortDir ? "asc" : "desc"])) {
                        var text_1 = (_a = html_1.locateNodeByClassName(e, "dhx_grid-header-cell")) === null || _a === void 0 ? void 0 : _a.querySelector(".dhx_grid-header-cell-text_content").innerHTML;
                        var cellConfig = text_1 ? column.header.find(function (item) { return item.text === text_1; }) : null;
                        var dir = _this._sortDir === "asc" ? "desc" : "asc";
                        _this._sort(id, dir, cellConfig === null || cellConfig === void 0 ? void 0 : cellConfig.sortAs);
                    }
                },
                "dhx_grid-expand-cell": function (e, rowId) {
                    if (e.target.classList.contains("dhx_grid-expand-cell-icon")) {
                        _this.events.fire(types_1.GridEvents.expand, [rowId]);
                    }
                },
            }),
            onscroll: function (e) {
                _this.events.fire(types_1.GridEvents.scroll, [
                    {
                        y: e.target.scrollTop,
                        x: e.target.scrollLeft,
                    },
                ]);
            },
            onmouseover: {
                ".dhx_grid-cell": function (e) {
                    var row = _this.data.getItem(e.composedPath()[1].getAttribute("dhx_id"));
                    var column = _this._getColumn(e.target.getAttribute("dhx_col_id"));
                    showCellTooltip(row, column, e.target);
                },
                ".dhx_grid-cell:not(.dhx_tree-cell) .dhx_grid-cell__content, .dhx_tree-cell :not(.dhx_grid-cell__content)": function (e) {
                    var path = e.composedPath();
                    var row = _this.data.getItem(path[2].getAttribute("dhx_id"));
                    var column = _this._getColumn(path[1].getAttribute("dhx_col_id"));
                    showCellTooltip(row, column, e.target);
                },
                ".dhx_grid-cell.dhx_tree-cell .dhx_grid-cell__content": function (e) {
                    var path = e.composedPath();
                    var row = _this.data.getItem(path[3].getAttribute("dhx_id"));
                    var column = _this._getColumn(path[2].getAttribute("dhx_col_id"));
                    showCellTooltip(row, column, path[2]);
                },
                ".dhx_span-cell:not(.dhx_grid-header-cell)": function (e) {
                    var row = _this.data.getItem(e.target.getAttribute("dhx_id"));
                    var column = _this._getColumn(e.target.getAttribute("dhx_col_id"));
                    var span = _this.getSpan(row.id, column.id);
                    if (row && span && main_1.isTooltip(_this.config, span)) {
                        var value = span.text || data_1.toFormat(row[column.id], column.type, column.format);
                        if (span.tooltipTemplate) {
                            value = span.tooltipTemplate(value, span);
                        }
                        else if (column.template) {
                            value = column.template(value, row, column);
                        }
                        value &&
                            ts_message_1.tooltip(value, {
                                css: "dhx_grid_tooltip",
                                node: e.target,
                                htmlEnable: true,
                            });
                    }
                },
                ".dhx_grid-header-cell:not(.dhx_span-cell)": function (e) {
                    var column = _this._getColumn(e.target.getAttribute("dhx_id"));
                    showContentTootlip(e, column);
                },
                ".dhx_grid-footer-cell:not(.dhx_span-cell)": function (e) {
                    var column = _this._getColumn(e.target.getAttribute("dhx_id"));
                    showContentTootlip(e, column);
                },
                ".dhx_grid-header-cell.dhx_span-cell": function (e) {
                    var column = _this._getColumn(e.target.getAttribute("dhx_id"));
                    var headerSpan = column && column.header.find(function (item) { return !!(item.rowspan || item.colspan); });
                    if (column && headerSpan && main_1.isTooltip(_this.config, column)) {
                        var value = headerSpan.text || "";
                        value &&
                            ts_message_1.tooltip(value, {
                                css: "dhx_grid_tooltip",
                                node: e.target,
                                htmlEnable: main_1.isHtmlEnable(_this.config, column),
                            });
                    }
                },
                ".dhx_grid-header-cell-text_content": function (e) {
                    var path = e.composedPath();
                    var column = _this._getColumn(path[1].getAttribute("dhx_id"));
                    if (column && main_1.isTooltip(_this.config, column)) {
                        var value = (path[2].querySelector(".dhx_grid-header-cell-text_content") &&
                            path[2].querySelector(".dhx_grid-header-cell-text_content").textContent) ||
                            "";
                        value &&
                            ts_message_1.tooltip(value, {
                                css: "dhx_grid_tooltip",
                                node: path[1],
                                htmlEnable: main_1.isHtmlEnable(_this.config, column),
                            });
                    }
                },
            },
        };
        if (_this.config.dragMode || _this.config.dragItem) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
            if (!_this.config.dragItem) {
                _this.config.dragItem = "row";
            }
            if (!_this.config.dragMode) {
                _this.config.dragMode = "both";
            }
        }
        _this._init();
        if (_this.config.columns) {
            _this._parseColumns(true);
        }
        if (_this.config.data &&
            _this.config.data instanceof Array &&
            _this.config.data.length &&
            _this.config.columns) {
            _this.data.parse(_this.config.data);
        }
        _this.selection = new Selection_1.Selection(_this, {
            disabled: !_this.config.selection,
        }, _this.events, _this._uid);
        _this.mount(container, _this._createView());
        _this.config.autoWidth && _this.config.autoHeight && _this._prepareData(_this.config.data);
        dom_1.awaitRedraw().then(function () {
            if (_this.config.keyNavigation) {
                _this.keyManager = new KeyManager_1.KeyManager(function (e, focusId) {
                    if (focusId === _this._uid && _this.events.fire(types_1.GridEvents.beforeKeyDown, [e])) {
                        _this.events.fire(types_1.GridEvents.afterKeyDown, [e]);
                        return true;
                    }
                    return false;
                });
                _this._initHotKey();
                FocusManager_1.focusManager.setFocusId(_this._uid);
            }
        });
        if (config.autoEmptyRow && _this.data.getLength() === 0) {
            _this._addEmptyRow();
            _this.paint();
        }
        return _this;
    }
    Grid.prototype.destructor = function () {
        this._destroyContent();
        this.keyManager && this.keyManager.destructor();
        this.events.events = {};
        this.events.context = null;
        this._activeFilters = this._filterData = this._scroll = this.content = null;
        this.unmount();
    };
    Grid.prototype.setColumns = function (columns) {
        this.config.columns = columns;
        this._parseColumns(true);
        this._adjustColumns();
        this._checkFilters();
        this._checkMarks();
        this.paint();
    };
    Grid.prototype.addRowCss = function (rowId, css) {
        var item = this.data.getItem(rowId);
        var styles = item.$css || "";
        if (!styles.match(new RegExp(css, "g"))) {
            item.$css = styles + (" " + css);
            this.paint();
        }
    };
    Grid.prototype.removeRowCss = function (rowId, css) {
        var item = this.data.getItem(rowId);
        var styles = item.$css ? item.$css.replace(css, "") : "";
        item.$css = styles;
        this.paint();
    };
    Grid.prototype.addCellCss = function (rowId, colId, css) {
        var column = this._getColumn(colId);
        if (column) {
            if (column.$cellCss[rowId]) {
                // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
                column.$cellCss[rowId] += column.$cellCss[rowId].match(new RegExp(css, "g")) ? "" : " " + css;
            }
            else if (this.data.getItem(rowId)) {
                column.$cellCss[rowId] = css + " ";
            }
            this.paint();
        }
    };
    Grid.prototype.removeCellCss = function (rowId, colId, css) {
        var column = this._getColumn(colId);
        if (column) {
            if (column.$cellCss[rowId]) {
                column.$cellCss[rowId] = column.$cellCss[rowId].replace(css, "");
                this.paint();
            }
            else if (this.data.getItem(rowId)) {
                column.$cellCss[rowId] = "";
            }
        }
    };
    Grid.prototype.showColumn = function (colId) {
        var column = this._getColumn(colId);
        if (!column || !column.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeColumnShow, [column]))
            return;
        column.hidden = false;
        this.config.$totalWidth += column.$width;
        var filter = this._hiddenFilters && this._hiddenFilters[column.id];
        if (filter) {
            this._activeFilters[column.id] = filter;
            delete this._hiddenFilters[column.id];
        }
        this.paint();
        this._checkFilters();
        this.events.fire(types_1.GridEvents.afterColumnShow, [column]);
    };
    Grid.prototype.hideColumn = function (colId) {
        var column = this._getColumn(colId);
        if (!column || column.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeColumnHide, [column]))
            return;
        column.hidden = true;
        this.config.$totalWidth -= column.$width;
        var filter = this._activeFilters && this._activeFilters[column.id];
        if (filter) {
            if (!this._hiddenFilters) {
                this._hiddenFilters = {};
            }
            this._hiddenFilters[column.id] = filter;
            delete this._activeFilters[column.id];
            this.data.filter();
        }
        this.paint();
        this._checkFilters();
        this.events.fire(types_1.GridEvents.afterColumnHide, [column]);
    };
    Grid.prototype.isColumnHidden = function (colId) {
        var column = this._getColumn(colId);
        if (column) {
            return !!column.hidden;
        }
    };
    Grid.prototype.showRow = function (rowId) {
        if (!core_1.isDefined(rowId)) {
            return;
        }
        var id = rowId.toString();
        var row = this.data.getItem(id);
        if (!row || !row.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeRowShow, [row]))
            return;
        this.data.update(id, { hidden: false });
        this.data.filter(function (i) { return !i.hidden; });
        this.events.fire(types_1.GridEvents.afterRowShow, [row]);
    };
    Grid.prototype.hideRow = function (rowId) {
        if (!core_1.isDefined(rowId)) {
            return;
        }
        var id = rowId.toString();
        var row = this.data.getItem(id);
        if (!row) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeRowHide, [row]))
            return;
        this.data.update(id, { hidden: true });
        this.data.filter(function (i) { return !i.hidden; });
        this.events.fire(types_1.GridEvents.afterRowHide, [row]);
    };
    Grid.prototype.isRowHidden = function (rowId) {
        if (!core_1.isDefined(rowId)) {
            return;
        }
        var row = this.data.getItem(rowId.toString());
        if (row) {
            return !!row.hidden;
        }
    };
    Grid.prototype.getScrollState = function () {
        return {
            x: this._scroll.left,
            y: this._scroll.top,
        };
    };
    Grid.prototype.scroll = function (x, y) {
        var gridBody = this.getRootView().refs.grid_body.el;
        gridBody.scrollLeft = typeof x === "number" ? x : gridBody.scrollLeft;
        gridBody.scrollTop = typeof y === "number" ? y : gridBody.scrollTop;
        this.paint();
    };
    Grid.prototype.scrollTo = function (rowId, colId) {
        var selectedCell = this.selection.getCell();
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var colInd = core_1.findIndex(columns, function (_a) {
            var id = _a.id;
            return id == colId;
        });
        var prevCol = selectedCell ? selectedCell.column : this.config.columns[0];
        var prevColInd = core_1.findIndex(columns, function (obj) { return obj.id == prevCol.id; });
        var fixedColsWidth = this.config.leftSplit
            ? main_1.getTotalWidth(columns.slice(0, this.config.leftSplit))
            : 0;
        var x = main_1.getTotalWidth(columns.slice(0, colInd)) - (colInd - prevColInd < 0 ? fixedColsWidth : 0);
        var rows = this.data.getRawData(0, -1);
        var rowInd = core_1.findIndex(rows, function (_a) {
            var id = _a.id;
            return id == rowId;
        });
        var y = main_1.getTotalHeight(rows.slice(0, rowInd));
        var scrollState = this.getScrollState();
        var gridRight = this.config.width + scrollState.x;
        var gridBottom = this.config.height + scrollState.y - this.config.headerRowHeight * this.config.$headerLevel;
        var cellTop = y - scrollState.y - rows[rowInd].$height;
        var cellLeft = x - scrollState.x - columns[colInd].$width;
        var cellBottom = y + rows[rowInd].$height * 2 + 18 - gridBottom;
        var cellRight = x + columns[colInd].$width * 2 + 18 - gridRight;
        var scrollTop = cellTop > 0 && cellBottom < 0 ? 0 : cellTop < 0 ? cellTop : cellBottom;
        var scrollLeft = cellLeft > 0 && cellRight < 0 ? 0 : cellLeft < 0 ? cellLeft : cellRight;
        this.scroll(scrollLeft + scrollState.x, scrollTop + scrollState.y);
    };
    Grid.prototype.adjustColumnWidth = function (colId, adjust) {
        if (adjust === void 0) { adjust = true; }
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var col = columns.filter(function (col) { return col.id === colId; });
        var totalCols = this._adjustColumnsWidth(this.config.data, col, adjust);
        this.config.$totalWidth = columns.reduce(function (totalWidth, column) {
            if (totalCols[column.id]) {
                column.$fixed = true;
                var max = column.maxWidth;
                var min = column.minWidth;
                var width = totalCols[column.id];
                column.$width = width;
                if (max && width > max) {
                    column.$width = max;
                }
                if (min && column.$width < min) {
                    column.$width = min;
                }
            }
            return (totalWidth += column.$width);
        }, 0);
        this.paint();
    };
    Grid.prototype.getCellRect = function (rowId, colId) {
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var rows = this.data.getRawData(0, -1);
        var span = this.getSpan(rowId, colId);
        var colInd = core_1.findIndex(columns, function (obj) { return obj.id == colId; });
        var rowInd = core_1.findIndex(rows, function (obj) { return obj.id == rowId; });
        var x = main_1.getTotalWidth(columns.slice(0, colInd));
        var y = main_1.getTotalHeight(rows.slice(0, rowInd));
        return {
            x: x,
            y: y,
            height: (span === null || span === void 0 ? void 0 : span.rowspan) ? cells_1.getHeight(rows, span.rowspan, rowInd)
                : rows[rowInd]
                    ? rows[rowInd].$height
                    : 0,
            width: (span === null || span === void 0 ? void 0 : span.colspan) ? cells_1.getWidth(columns, span.colspan, colInd)
                : columns[colInd]
                    ? columns[colInd].$width
                    : 0,
        };
    };
    Grid.prototype.getColumn = function (colId) {
        var id = core_1.findIndex(this.config.columns, function (col) { return col.id == colId; });
        if (id >= 0) {
            return this.config.columns[id];
        }
    };
    Grid.prototype.addSpan = function (spanObj) {
        this.config.spans = this.config.spans || [];
        var index = core_1.findIndex(this.config.spans, function (span) { return "" + span.row === "" + spanObj.row && "" + span.column === "" + spanObj.column; });
        if (index >= 0) {
            this.config.spans[index] = spanObj;
            return;
        }
        this.config.spans.push(spanObj);
        this.paint();
    };
    Grid.prototype.getSpan = function (rowId, colId) {
        if (this.config.spans) {
            var index = core_1.findIndex(this.config.spans, function (span) { return "" + span.row == "" + rowId && "" + span.column == "" + colId; });
            return this.config.spans[index];
        }
    };
    Grid.prototype.removeSpan = function (rowId, colId) {
        if (this.config.spans) {
            var index = core_1.findIndex(this.config.spans, function (span) { return "" + span.row == "" + rowId && "" + span.column == "" + colId; });
            this.config.spans.splice(index, 1);
            this.paint();
        }
    };
    Grid.prototype.editCell = function (rowId, colId, editorType) {
        var _a;
        var row = this.data.getItem(rowId);
        var col = this.getColumn(colId);
        if (!row || !col) {
            ts_data_1.dhxWarning("item not found");
            return;
        }
        var colEditorType = col.editorType;
        if (!editorType) {
            if (col.type === "date") {
                editorType = "datePicker";
            }
            if (col.type === "boolean") {
                editorType = "checkbox";
            }
            if (colEditorType) {
                editorType = colEditorType;
            }
        }
        if (!this.events.fire(types_1.GridEvents.beforeEditStart, [row, col, editorType])) {
            return;
        }
        if (((_a = this.config.$editable) === null || _a === void 0 ? void 0 : _a.editor) ||
            (this.config.$editable &&
                this.config.$editable.row === rowId &&
                this.config.$editable.col === colId &&
                this.config.$editable.editorType === editorType)) {
            return;
        }
        this.config.$editable = {
            row: row.id,
            col: col.id,
            editorType: editorType,
        };
        if (!this.selection.config.disabled) {
            this.selection.setCell(rowId.toString(), colId.toString());
        }
        this.paint();
        this.events.fire(types_1.GridEvents.afterEditStart, [row, col, editorType]);
    };
    Grid.prototype.editEnd = function (withoutSave) {
        if (this.config.$editable && this.config.$editable.editor) {
            this.config.$editable.editor.endEdit(withoutSave);
        }
    };
    Grid.prototype.getSortingState = function () {
        return { dir: this._sortDir, by: this._sortBy };
    };
    Grid.prototype.getHeaderFilter = function (colId) {
        var _this = this;
        var col = this.getColumn(colId);
        if (!col) {
            return;
        }
        var filter = null;
        col.header.forEach(function (cell) {
            if (cell.content) {
                var filterEl = _this.content[cell.content].element[colId];
                filter =
                    cell.content === "comboFilter" ? filterEl : _this.getRootView().refs[colId + "_filter"].el;
            }
        });
        return filter;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Grid.prototype.edit = function (rowId, colId, editorType) {
        this.editCell(rowId, colId, editorType);
    };
    Grid.prototype._createView = function () {
        var _this = this;
        return dom_1.create({
            render: function (vm, obj) {
                return render_1.render(vm, obj, _this._htmlEvents, _this.selection, _this._uid);
            },
        }, this);
    };
    Grid.prototype._parseColumns = function (configChanged) {
        if (configChanged === void 0) { configChanged = false; }
        data_1.normalizeColumns(this.config, configChanged);
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        data_1.countColumns(this.config, columns);
    };
    Grid.prototype._parseData = function () {
        this.config.data = this._prepareData(this.data);
        this._detectColsTypes();
        this._checkFilters();
        this._checkMarks();
        this.data.filter(function (i) { return !i.hidden; });
        this._render();
    };
    Grid.prototype._createCollection = function (prep) {
        this.data = new ts_data_1.DataCollection({ prep: prep }, this.events);
    };
    Grid.prototype._getRowIndex = function (rowId) {
        return this.data.getIndex(rowId);
    };
    Grid.prototype._setEventHandlers = function () {
        var _this = this;
        var updater = function (updateObj) { return function (_a) {
            var source = _a.source, target = _a.target;
            if (source && source instanceof Array && source.length > 1) {
                source.map(function (selectedId) { return _this.data.exists(selectedId) && _this.data.update(selectedId, updateObj); });
                return;
            }
            if (_this.data.exists(target)) {
                _this.data.update(target, updateObj);
            }
        }; };
        this.data.events.on(ts_data_1.DataEvents.load, function () {
            _this.data.filter(function (i) { return i; });
            _this._parseData();
            _this._checkFilters();
        });
        this.data.events.on(ts_data_1.DataEvents.change, function (id, status, obj) {
            if (status === "setPage") {
                dom_1.awaitRedraw().then(function () {
                    _this.scrollTo(_this.data.getId(obj[0]).toString(), _this.config.columns[0].id.toString());
                    _this._render();
                });
                return;
            }
            if (status === "add" || status === "update" || status === "remove") {
                _this.config.data = _this._prepareData(_this.data);
            }
            if (id) {
                _this._filterData = _this.data.map(function (el) { return el; }) || [];
                _this._checkFilters();
            }
            _this._detectColsTypes();
            _this._removeMarks();
            _this._checkMarks();
            if (_this.config.autoEmptyRow && (!_this._activeFilters || core_1.isEmptyObj(_this._activeFilters))) {
                var emptyRow = _this.data.find({ by: "$emptyRow", match: true });
                if (emptyRow) {
                    if (emptyRow.id === id)
                        return;
                    _this.data.move(emptyRow.id, _this.data.getLength() - 1);
                }
                else {
                    _this._addEmptyRow();
                }
            }
            _this._render();
        });
        this.data.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this.config.columns.map(function (col) {
                col.header.map(function (cell) {
                    if (cell.content && (cell.content === "selectFilter" || cell.content === "comboFilter")) {
                        col.$uniqueData = [];
                    }
                });
            });
        });
        this.events.on(ts_data_1.DragEvents.beforeDrag, function (data, events) {
            if (_this.data.getItem(data.start)) {
                return _this.events.fire(types_1.GridEvents.beforeRowDrag, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                return _this.events.fire(types_1.GridEvents.beforeColumnDrag, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragStart, function (data, events) {
            updater({ $dragtarget: true });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowStart, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.dragColumnStart, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragIn, function (data, events) {
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowIn, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.dragColumnIn, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragOut, function (data, events) {
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowOut, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.dragColumnOut, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.canDrop, function (data, events) {
            updater({ $drophere: true });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.canRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.canColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.cancelDrop, function (data, events) {
            updater({ $drophere: undefined });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.cancelRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.cancelColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.beforeDrop, function (data, events) {
            if (_this.config.dragItem === "row" &&
                (_this.config.dragMode === "both" || _this.config.dragMode === "target")) {
                return _this.events.fire(types_1.GridEvents.beforeRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                return _this.events.fire(types_1.GridEvents.beforeColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.afterDrop, function (data, events) {
            var _a;
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.afterRowDrop, [data, events]);
                var item = _this.data.getItem(data.start);
                for (var _i = 0, _b = _this.config.columns; _i < _b.length; _i++) {
                    var col = _b[_i];
                    if (typeof item[col.id] === "undefined") {
                        _this.data.update(item.id, (_a = {}, _a[col.id] = null, _a), true);
                    }
                }
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.afterColumnDrop, [data, events]);
            }
            _this.config.data = _this._prepareData(_this.data.map(function (i) { return i; }));
            _this.data.parse(_this.config.data);
        });
        this.events.on(ts_data_1.DragEvents.afterDrag, function (data, events) {
            updater({ $dragtarget: undefined });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.afterRowDrag, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.afterColumnDrag, [data, events]);
            }
            _this.config.data = _this._prepareData(_this.data instanceof Array ? _this.data.map(function (i) { return i; }) : _this.data);
            _this.data.parse(_this.config.data);
        });
        // TODO: When introducing touch events, remove system events
        this.events.on(types_1.GridEvents.cellMouseDown, function (row, col, e) {
            if (!e.targetTouches) {
                _this._dragStart(e);
            }
            else {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        if ((col.editable !== false && _this.config.editable) || col.editable) {
                            _this.editCell(row.id, col.id, col.editorType);
                        }
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.cellDblClick, [row, col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this._events.on(types_1.GridSystemEvents.cellTouchMove, function (_row, _col, e) {
            _this._touch.start && e.preventDefault();
            _this._clearTouchTimer();
        });
        this._events.on(types_1.GridSystemEvents.cellTouchEnd, function () {
            _this._touch.start = false;
            _this._clearTouchTimer();
        });
        this.events.on(types_1.GridEvents.filterChange, function (val, colId, filter) {
            val = val !== null && val !== void 0 ? val : "";
            if (_this.config.autoEmptyRow) {
                var emptyRow = _this.data.find({ by: "$emptyRow", match: true });
                if (emptyRow) {
                    _this.data.remove(emptyRow.id);
                }
            }
            if (!_this._activeFilters) {
                _this._activeFilters = {};
            }
            var columnConfig = _this._getColumn(colId);
            if (val !== "") {
                _this._activeFilters[colId] = {
                    by: colId,
                    match: val,
                    compare: _this.content[filter].match,
                    multi: (columnConfig === null || columnConfig === void 0 ? void 0 : columnConfig.editorType) === "multiselect",
                };
            }
            else {
                delete _this._activeFilters[colId];
            }
            _this.data.filter(function (i) { return i; });
            for (var compare in _this._activeFilters) {
                _this.data.filter(_this._activeFilters[compare], { add: true });
            }
        });
        this.events.on(types_1.GridEvents.scroll, function (scrollState) {
            _this._scroll = { top: scrollState.y, left: scrollState.x };
            _this.editEnd();
            _this.paint();
        });
        this.events.on(types_1.GridEvents.cellDblClick, function (row, col) {
            if ((col.editable !== false && _this.config.editable) || col.editable) {
                _this.editCell(row.id, col.id, col.editorType);
            }
        });
        this.events.on(types_1.GridEvents.afterEditEnd, function (value, eRow, eCol) {
            var _a;
            var _b;
            if (((_b = _this.config.$editable) === null || _b === void 0 ? void 0 : _b.editor) &&
                (_this.config.$editable.col !== eCol.id || _this.config.$editable.row !== eRow.id))
                return;
            var row;
            var col;
            if (!_this.config.$editable) {
                row = eRow.id;
                col = eCol.id;
            }
            else {
                row = _this.config.$editable.row;
                col = _this.config.$editable.col;
            }
            var item = _this.data.getItem(row);
            delete item.$emptyRow;
            if (value !== undefined) {
                _this.data.update(row, __assign(__assign({}, item), (_a = {}, _a[col] = value, _a)));
            }
            _this.config.$editable = null;
            _this._checkFilters();
            _this.paint();
        });
        this.events.on(types_1.GridEvents.headerCellMouseDown, function (col, e) {
            var target = e.target;
            var resizedColumn = target.getAttribute("dhx_resized");
            if (resizedColumn && _this.events.fire(types_1.GridEvents.beforeResizeStart, [col, e])) {
                columnsResizer_1.startResize(_this, resizedColumn.toString(), e, function () {
                    _this.paint();
                    _this.config.$resizing = null;
                    _this.events.fire(types_1.GridEvents.afterResizeEnd, [col, e]);
                });
            }
            if (e.targetTouches) {
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.headerCellDblClick, [col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this.events.on(types_1.GridEvents.footerCellDblClick, function (col, e) {
            if (e.targetTouches) {
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.footerCellDblClick, [col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this.events.on(types_1.GridEvents.resize, function () {
            _this._parseColumns();
            _this._checkFilters();
        });
    };
    Grid.prototype._addEmptyRow = function () {
        var id = this.data.getId(this.data.getLength() - 1);
        var lastRow = this.data.getItem(id);
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var isEmpty = main_1.isRowEmpty(lastRow);
        if (!isEmpty) {
            this.data.add(columns.reduce(function (total, col) {
                total[col.id] = "";
                return total;
            }, { $emptyRow: true }));
        }
    };
    Grid.prototype._sort = function (by, dir, sortAs) {
        var _this = this;
        if (!dir) {
            if (this._sortBy === by) {
                this._sortDir = this._sortDir === "asc" ? "desc" : "asc";
            }
            else {
                this._sortDir = "asc";
            }
        }
        else {
            this._sortDir = dir;
        }
        var defaultAs = function (item) {
            var col = _this.getColumn(by);
            if (item && col.type === "date") {
                return typeof item === "string" ? date_1.stringToDate(item, col.format).getTime() : item.getTime();
            }
            return item ? "" + item : "";
        };
        this._sortBy = by;
        this.data.sort({
            by: by,
            dir: this._sortDir,
            as: sortAs !== null && sortAs !== void 0 ? sortAs : defaultAs,
        });
        this.events.fire(types_1.GridEvents.afterSort, [this.getColumn(by), this._sortDir]);
    };
    Grid.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    Grid.prototype._checkFilters = function () {
        var _this = this;
        var data = this._filterData;
        if (!data)
            return;
        this.config.columns.forEach(function (col) {
            col.header.forEach(function (cell) {
                if (cell.content && (cell.content === "selectFilter" || cell.content === "comboFilter")) {
                    var headerWithFilterConfig = col.header.find(function (i) { return i.filterConfig; });
                    var unique = data_1.getUnique(data, col.id, headerWithFilterConfig ? headerWithFilterConfig.filterConfig.multiselection : null);
                    if (col.$uniqueData && col.$uniqueData.length > unique.length) {
                        unique.forEach(function (item) {
                            if (!col.$uniqueData.includes(item)) {
                                col.$uniqueData.push(item);
                            }
                        });
                    }
                    else {
                        col.$uniqueData = unique;
                    }
                }
            });
        });
        var _loop_1 = function (compare) {
            var col = this_1.config.columns.find(function (i) { return i.id === compare; });
            var filter = col.header.find(function (i) { return !!i.content; });
            var exist = false;
            if (Array.isArray(this_1._activeFilters[compare].match)) {
                exist = this_1._activeFilters[compare].match.reduce(function (_, i) {
                    if (col.$uniqueData.find(function (j) { return j.toString() === i; }))
                        return true;
                }, false);
            }
            else {
                exist = col.$uniqueData.find(function (i) { return i.toString() === _this._activeFilters[compare].match; });
            }
            if (filter && (filter.content === "selectFilter" || filter.content === "comboFilter") && !exist) {
                delete this_1._activeFilters[compare];
                this_1.data.filter();
            }
            else {
                this_1.data.filter(this_1._activeFilters[compare], { add: true });
            }
        };
        var this_1 = this;
        for (var compare in this._activeFilters) {
            _loop_1(compare);
        }
    };
    Grid.prototype._adjustColumns = function () {
        var _this = this;
        if (typeof this.config.adjust === "boolean" ||
            this.config.adjust === "data" ||
            this.config.adjust === "header" ||
            this.config.adjust === "footer") {
            var columns = this.config.columns.filter(function (col) { return !col.hidden; });
            if (!columns.length)
                return;
            var data = !this.config.data || !this.config.data.length ? this.data.map(function (row) { return row; }) : this.config.data;
            var totalCols_1 = this._adjustColumnsWidth(data, columns);
            this.config.$totalWidth = columns.reduce(function (totalWidth, column) {
                column.$fixed = true;
                var max = column.maxWidth;
                var min = column.minWidth;
                var width = totalCols_1[column.id];
                column.$width = width;
                if (max && width > max) {
                    column.$width = max;
                }
                if (min && column.$width < min) {
                    column.$width = min;
                }
                return (totalWidth += column.$width);
            }, 0);
        }
        else {
            var columns = this.config.columns.filter(function (col) { return !col.hidden && col.adjust; });
            if (!columns.length)
                return;
            columns.forEach(function (col) {
                _this.adjustColumnWidth(col.id, col.adjust);
            });
        }
    };
    Grid.prototype._prepareData = function (data) {
        var _this = this;
        if (this.config.autoHeight)
            this.config.autoHeight = false;
        this._adjustColumns();
        return data.map(function (row) {
            row.$height = row.height || _this.config.rowHeight;
            return row;
        });
    };
    Grid.prototype._adjustColumnsWidth = function (rows, cols, adjust) {
        var _a, _b, _c;
        if (adjust === void 0) { adjust = this.config.adjust; }
        var columnsWidth = {};
        if (adjust === "header" || adjust === true) {
            var currentCols = cols.filter(function (col) { return col.header; });
            var data = data_1.getMaxColsWidth(this._prepareColumnData(currentCols, "header"), currentCols, {
                font: "bold 14.4px Arial",
            }, "header");
            if (data) {
                for (var _i = 0, _d = Object.entries(data); _i < _d.length; _i++) {
                    var _e = _d[_i], key = _e[0], value = _e[1];
                    columnsWidth = Object.assign(columnsWidth, (_a = {},
                        _a[key] = +value + (main_1.isSortable(this.config, this.getColumn(key)) ? 36 : 16),
                        _a));
                }
            }
        }
        if (adjust === "footer" || adjust === true) {
            var currentCols = cols.filter(function (col) { return col.footer; });
            var data = data_1.getMaxColsWidth(this._prepareColumnData(currentCols, "footer"), currentCols, {
                font: "bold 14.4px Arial",
            }, "footer");
            if (data) {
                for (var _f = 0, _g = Object.entries(data); _f < _g.length; _f++) {
                    var _h = _g[_f], key = _h[0], value = _h[1];
                    if ((columnsWidth[key] && columnsWidth[key] < +value + 16) || !columnsWidth[key]) {
                        columnsWidth = Object.assign(columnsWidth, (_b = {},
                            _b[key] = +value + 16,
                            _b));
                    }
                }
            }
        }
        if (adjust === "data" || adjust === true) {
            var data = data_1.getMaxColsWidth(rows, cols, {
                font: "normal 14.4px Arial",
            }, "data");
            if (data) {
                for (var _j = 0, _k = Object.entries(data); _j < _k.length; _j++) {
                    var _l = _k[_j], key = _l[0], value = _l[1];
                    if ((columnsWidth[key] && columnsWidth[key] < +value + 16) || !columnsWidth[key]) {
                        columnsWidth = Object.assign(columnsWidth, (_c = {},
                            _c[key] = +value + 16,
                            _c));
                    }
                }
            }
        }
        return columnsWidth;
    };
    Grid.prototype._prepareColumnData = function (data, type) {
        var _a;
        var _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var totalRow = [];
        for (var i = 0; i < data.length; i++) {
            var row = [];
            for (var k = 0; k < ((_b = data[k]) === null || _b === void 0 ? void 0 : _b[type].length); k++) {
                var rowData = {};
                if ((_d = (_c = data[i]) === null || _c === void 0 ? void 0 : _c[type][k]) === null || _d === void 0 ? void 0 : _d.text) {
                    rowData[data[i].id] = ((_f = (_e = data[i]) === null || _e === void 0 ? void 0 : _e[type][k]) === null || _f === void 0 ? void 0 : _f.text) || "";
                    row.push(rowData);
                }
                else if ((_h = (_g = data[i]) === null || _g === void 0 ? void 0 : _g[type][k]) === null || _h === void 0 ? void 0 : _h.content) {
                    rowData[data[i].id] =
                        this.content[(_k = (_j = data[i]) === null || _j === void 0 ? void 0 : _j[type][k]) === null || _k === void 0 ? void 0 : _k.content].toHtml(this.getColumn(data[i].id), this.config) || "";
                    row.push(rowData);
                }
            }
            for (var j = 0; j < row.length; j++) {
                for (var _i = 0, _l = Object.entries(row[j]); _i < _l.length; _i++) {
                    var _m = _l[_i], key = _m[0], value = _m[1];
                    totalRow[j] = __assign({}, totalRow[j]) || {};
                    totalRow[j] = Object.assign(totalRow[j], (_a = {}, _a[key] = value, _a));
                }
            }
        }
        return totalRow;
    };
    Grid.prototype._dragStart = function (e) {
        if (this.config.dragMode &&
            (this.config.dragItem === "row" || this.config.dragItem === "both") &&
            !this.config.$editable) {
            var column = this._getColumn(e.target.getAttribute("dhx_col_id"));
            if ((column === null || column === void 0 ? void 0 : column.draggable) === false)
                return;
            var item = html_1.locateNode(e, "dhx_id");
            var itemId = item && item.getAttribute("dhx_id");
            if (e.targetTouches) {
                this._touch.start = true;
            }
            return ts_data_1.dragManager.onMouseDown(e, [itemId]);
        }
    };
    Grid.prototype._getColumn = function (colId) {
        for (var _i = 0, _a = this.config.columns; _i < _a.length; _i++) {
            var col = _a[_i];
            if (col.id == colId) {
                return col;
            }
        }
    };
    Grid.prototype._init = function () {
        this.events = new events_1.EventSystem(this);
        this._events = new events_1.EventSystem(this);
        this._attachDataCollection();
        this.export = new Exporter_1.Exporter(this);
        this._setEventHandlers();
    };
    Grid.prototype._attachDataCollection = function () {
        var _this = this;
        var prep = function (data) {
            if (data.spans) {
                _this.config.spans = data.spans;
                data = data.data;
            }
            return data;
        };
        if (this.config.data instanceof ts_data_1.DataCollection) {
            this.data = this.config.data;
            this.config.data = this.data.serialize();
            return;
        }
        this._createCollection(prep);
    };
    Grid.prototype._setMarks = function (col, func) {
        var colCells = this.data.map(function (row) { return ({
            id: row.id,
            data: row[col.id],
            row: row,
        }); });
        var colCellsData = this.data.map(function (row) { return row[col.id]; });
        var _loop_2 = function (cell) {
            var css = func(cell.data, colCellsData, cell.row, col);
            if (css) {
                col.$cellCss = col.$cellCss || {};
                var cellCss_1 = (col.$cellCss[cell.id] || "").split(" ");
                css.split(" ").map(function (item) {
                    if (!cellCss_1.includes(item)) {
                        cellCss_1.push(item);
                    }
                });
                col.$cellCss[cell.id] = cellCss_1.join(" ");
            }
        };
        for (var _i = 0, colCells_1 = colCells; _i < colCells_1.length; _i++) {
            var cell = colCells_1[_i];
            _loop_2(cell);
        }
    };
    Grid.prototype._checkMarks = function () {
        var _this = this;
        this.config.columns.map(function (col) {
            var mark = col.mark;
            if (mark) {
                if (typeof mark === "function") {
                    _this._setMarks(col, mark);
                }
                else {
                    _this._setMarks(col, function (el, c) {
                        var data = [];
                        c.forEach(function (item) {
                            if (item !== null && item !== undefined && item !== "") {
                                data.push(parseFloat(item));
                            }
                        });
                        var min = core_1.getMinArrayNymber(data);
                        var max = core_1.getMaxArrayNymber(data);
                        if (mark.max && max === parseFloat(el)) {
                            return mark.max;
                        }
                        if (mark.min && min === parseFloat(el)) {
                            return mark.min;
                        }
                        return false;
                    });
                }
            }
        });
    };
    Grid.prototype._removeMarks = function () {
        this.config.columns.forEach(function (col) {
            if (col.mark) {
                col.$cellCss = {};
            }
        });
    };
    // [todo] make more smart type detection
    Grid.prototype._detectColsTypes = function () {
        this.config.columns.forEach(function (col) {
            if (col.type) {
                return col;
            }
            if (col.format) {
                col.type = "number";
                return col;
            }
            if (!col.type) {
                col.type = "string";
            }
        });
    };
    Grid.prototype._destroyContent = function () {
        for (var contentName in this.content) {
            if (contentName === "comboFilter") {
                this.content[contentName].destroy();
            }
        }
    };
    Grid.prototype._render = function () {
        this.paint();
    };
    Grid.prototype._initHotKey = function () {
        var handlers = keys_1.getKeysHandlers(this);
        for (var key in handlers) {
            this.keyManager.addHotKey(key, handlers[key]);
        }
        for (var key in this.config.hotkeys) {
            this.keyManager.addHotKey(key, this.config.hotkeys[key]);
        }
    };
    return Grid;
}(view_1.View));
exports.Grid = Grid;


/***/ }),

/***/ "../ts-grid/sources/ProGrid.ts":
/*!*************************************!*\
  !*** ../ts-grid/sources/ProGrid.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Grid_1 = __webpack_require__(/*! ./Grid */ "../ts-grid/sources/Grid.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-grid/sources/types.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var data_1 = __webpack_require__(/*! ./helpers/data */ "../ts-grid/sources/helpers/data.ts");
var render_1 = __webpack_require__(/*! ./ui/render */ "../ts-grid/sources/ui/render.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var ScrollView_1 = __webpack_require__(/*! @dhx/ts-common/ScrollView */ "../ts-common/ScrollView.ts");
var ProGrid = /** @class */ (function (_super) {
    __extends(ProGrid, _super);
    function ProGrid(container, config) {
        var _this = _super.call(this, container, __assign({ autoHeight: false }, config)) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); }, {
            scrollHandler: function (e) {
                return _this.events.fire(types_1.GridEvents.scroll, [
                    {
                        y: e.target.scrollTop,
                        x: e.target.scrollLeft,
                    },
                ]);
            },
        });
        return _this;
    }
    ProGrid.prototype._createView = function () {
        var _this = this;
        return dom_1.create({
            render: function (vm, obj) {
                return render_1.proRender(vm, obj, _this._htmlEvents, _this.selection, _this._uid);
            },
        }, this);
    };
    ProGrid.prototype._setEventHandlers = function () {
        var _this = this;
        _super.prototype._setEventHandlers.call(this);
        this.events.on(types_1.GridEvents.headerCellMouseDown, function (col, e) {
            if (!e.targetTouches) {
                _this._dragStartColumn(e, col);
            }
            else {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStartColumn(e, col);
                }, _this._touch.duration);
            }
        });
        this._events.on(types_1.GridSystemEvents.headerCellTouchMove, function (_col, e) {
            _this._touch.start && e.preventDefault();
            _this._clearTouchTimer();
        });
        this._events.on(types_1.GridSystemEvents.headerCellTouchEnd, function () {
            _this._touch.start = false;
            _this._clearTouchTimer();
        });
        this.events.on(types_1.GridEvents.resize, function () {
            _this._parseColumns();
            _this._checkFilters();
        });
        this.events.on(types_1.GridEvents.afterResizeEnd, function () {
            if (_this.config.autoHeight) {
                _this.config.data = _this.data.map(function (row) {
                    var height = data_1.getMaxRowHeight(row, _this.config.columns);
                    row.$height = data_1.getCalculatedRowHeight(height, {
                        rowHeight: _this.config.rowHeight,
                        padding: 8,
                    });
                    return row;
                });
            }
        });
        this.events.on(types_1.GridEvents.afterRowResize, function (row, _e, currentHeight) {
            var _a = _this.data.getItem(row.id), id = _a.id, height = _a.height, $height = _a.$height;
            if (height && height !== $height) {
                _this.data.update(id, { height: currentHeight });
            }
            _this.data.update(id, { $height: currentHeight }, true);
            _this.config.data = _this.data.map(function (row) { return row; });
            _this.paint();
        });
        this.events.on(types_1.GridEvents.scroll, function () {
            _this._lazyLoad();
        });
    };
    ProGrid.prototype._prepareData = function (data) {
        var _this = this;
        this._adjustColumns();
        var convertedData;
        if (Array.isArray(data) || ts_data_1.isTreeCollection(data)) {
            convertedData = data;
        }
        else {
            var initData = data.getInitialData() || [];
            convertedData = initData.length !== 0 ? initData : data.getRawData(0, data.getLength());
        }
        return convertedData.map(function (row) {
            if (_this.config.autoHeight && typeof row.height === "undefined") {
                var height = data_1.getMaxRowHeight(row, _this.config.columns);
                row.$height =
                    data_1.getCalculatedRowHeight(height, {
                        rowHeight: _this.config.rowHeight,
                        padding: 8,
                    }) || _this.config.rowHeight;
            }
            else {
                row.$height = row.height || _this.config.rowHeight;
            }
            return row;
        });
    };
    ProGrid.prototype._prepareDataFromTo = function (data, from, to) {
        var _this = this;
        return data.mapRange(from, to, function (row) {
            var height = data_1.getMaxRowHeight(row, _this.config.columns);
            row.$height =
                data_1.getCalculatedRowHeight(height, {
                    rowHeight: _this.config.rowHeight,
                    padding: 8,
                }) || _this.config.rowHeight;
            return row;
        });
    };
    ProGrid.prototype._lazyLoad = function () {
        var _this = this;
        var _a, _b;
        var proxy = this.data.dataProxy;
        if (proxy && proxy.config) {
            var data = this.data.getRawData(0, -1, null, 2);
            var renderConfig = render_1.getRenderConfig(this, data, {
                width: this.config.width,
                height: this.config.height,
            });
            var from_1 = this.data.getIndex((_a = renderConfig.currentRows[0]) === null || _a === void 0 ? void 0 : _a.id.toString());
            var to_1 = this.data.getIndex((_b = renderConfig.currentRows[renderConfig.currentRows.length - 1]) === null || _b === void 0 ? void 0 : _b.id.toString());
            if (!this.data.isDataLoaded(from_1, to_1) && this.data.events.fire(ts_data_1.DataEvents.beforeLazyLoad, [])) {
                proxy.updateUrl(null, { from: from_1, limit: proxy.config.limit });
                this.data.load(proxy).then(function () {
                    _this.config.autoHeight && _this._prepareDataFromTo(_this.data, from_1, to_1);
                });
            }
        }
    };
    ProGrid.prototype._getColumnGhost = function (col) {
        var container = this._container || html_1.toNode(this._uid);
        var headerRow = container.querySelector(".dhx_header-row");
        var colHeaderCell = headerRow.querySelector(".dhx_grid-header-cell[dhx_id=\"" + col.id + "\"]");
        var headerCols = Array.from(headerRow.childNodes);
        var n = headerCols.indexOf(colHeaderCell) + 1;
        var colHeaderCells = container.querySelectorAll(".dhx_grid-header-cell[dhx_id=\"" + col.id + "\"]:not(.dhx_span-cell)");
        var ghostGridNodes = container.querySelectorAll(".dhx_grid_data .dhx_grid-cell:nth-child(" + n + ")");
        var ghostContainer = document.createElement("div");
        colHeaderCells.forEach(function (node) { return ghostContainer.appendChild(node.cloneNode(true)); });
        ghostGridNodes.forEach(function (node) { return ghostContainer.appendChild(node.cloneNode(true)); });
        return ghostContainer;
    };
    ProGrid.prototype._dragStartColumn = function (e, col) {
        var target = e.target;
        var testCustom = function (el) { return el.classList.contains("dhx_grid-custom-content-cell"); };
        var isCustom = testCustom(target.parentElement) || testCustom(target.parentElement.parentElement);
        if (!isCustom &&
            (col.draggable ||
                (this.config.dragItem === "column" && col.draggable !== false) ||
                (this.config.dragItem === "both" && col.draggable !== false)) &&
            !html_1.locateNodeByClassName(e, "dhx_resizer_grip_wrap")) {
            if (e.targetTouches) {
                this._touch.start = true;
            }
            ts_data_1.dragManager.onMouseDown(e, [col.id], [this._getColumnGhost(col)]);
        }
    };
    return ProGrid;
}(Grid_1.Grid));
exports.ProGrid = ProGrid;


/***/ }),

/***/ "../ts-grid/sources/Selection.ts":
/*!***************************************!*\
  !*** ../ts-grid/sources/Selection.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-grid/sources/types.ts");
var FocusManager_1 = __webpack_require__(/*! @dhx/ts-common/FocusManager */ "../ts-common/FocusManager.ts");
var Selection = /** @class */ (function () {
    function Selection(grid, config, events, gridId) {
        var types = ["cell", "row", "complex"];
        this._grid = grid;
        this.config = config;
        this._gridId = gridId;
        this._selectedCell = undefined;
        this._oldSelectedCell = undefined;
        this._selectedCells = [];
        this._type = types.includes(this._grid.config.selection) ? this._grid.config.selection : "complex";
        this._multiselection = grid.config.multiselection && this._type !== "complex";
        this.events = events || new events_1.EventSystem(this);
        this._init();
    }
    Selection.prototype.setCell = function (row, col, ctrlUp, shiftUp) {
        var _this = this;
        if (ctrlUp === void 0) { ctrlUp = false; }
        if (shiftUp === void 0) { shiftUp = false; }
        if (this._gridId && FocusManager_1.focusManager.getFocusId() !== this._gridId) {
            FocusManager_1.focusManager.setFocusId(this._gridId);
        }
        if (this.config.disabled ||
            this._grid.config.$editable ||
            (!this._multiselection &&
                this._oldSelectedCell &&
                this._oldSelectedCell.row.id === ((row && row.id) || row) &&
                this._oldSelectedCell.column.id === ((col && col.id) || col)) ||
            (this._multiselection &&
                this._selectedCells.length === 1 &&
                this._selectedCells[0].row.id === ((row && row.id) || row) &&
                this._selectedCells[0].column.id === ((col && col.id) || col))) {
            return;
        }
        if ((this._multiselection && !ctrlUp && !shiftUp) || !this._multiselection) {
            this._selectedCells.length && this._removeCells();
        }
        if (this._multiselection &&
            this._type === "cell" &&
            this._selectedCells.find(function (item) {
                return item.row.id === ((row && row.id) || row) && item.column.id === ((col && col.id) || col);
            })) {
            this.removeCell((row && row.id) || row, (col && col.id) || col);
            return;
        }
        var oldSelectedCell = this._oldSelectedCell ? this._oldSelectedCell : undefined;
        row = this._grid.data.getItem((row && row.id) || row);
        var colums = this._grid.config.columns.filter(function (col) { return !col.hidden; });
        if (!col) {
            col = colums[0];
        }
        col = this._grid.getColumn(col.id || col);
        if (!col || !row) {
            return;
        }
        col = col.id ? col : this._grid.getColumn(col);
        if (!this.events.fire(types_1.GridSelectionEvents.beforeSelect, [row, col]))
            return;
        this._selectedCell = { row: row, column: col };
        this.events.fire(types_1.GridSelectionEvents.afterSelect, [row, col]);
        if (this._multiselection && shiftUp && oldSelectedCell) {
            this._oldSelectedCell = oldSelectedCell;
        }
        else {
            this._oldSelectedCell = this._selectedCell;
        }
        if (this._multiselection) {
            if (shiftUp && !ctrlUp && this._selectedCells.length > 0) {
                var startRowIndex = this._grid.data.getIndex(this._oldSelectedCell.row.id);
                var endRowIndex = this._grid.data.getIndex(row.id);
                if (startRowIndex > endRowIndex) {
                    var temp = startRowIndex;
                    startRowIndex = endRowIndex;
                    endRowIndex = temp;
                }
                this._selectedCells = [this._oldSelectedCell];
                if (this._type === "cell") {
                    var columnsIds = colums.map(function (e) { return e.id; });
                    var startColIndex = columnsIds.indexOf(oldSelectedCell.column.id);
                    var endColIndex = columnsIds.indexOf(col.id);
                    if (startColIndex !== -1 && endColIndex !== -1) {
                        if (startColIndex > endColIndex) {
                            var temp = startColIndex;
                            startColIndex = endColIndex;
                            endColIndex = temp;
                        }
                        var columns_1 = colums.slice(startColIndex, endColIndex + 1);
                        this._grid.data.mapRange(startRowIndex, endRowIndex, function (item) {
                            columns_1.forEach(function (column) {
                                var cell = { row: item, column: column };
                                if (_this._findIndex(cell) === -1) {
                                    _this._selectedCells.push(cell);
                                }
                            });
                        });
                    }
                }
                else {
                    this._grid.data.mapRange(startRowIndex, endRowIndex, function (item) {
                        var cell = { row: item, column: col };
                        if (_this._findIndex(cell) === -1) {
                            _this._selectedCells.push(cell);
                        }
                    });
                }
            }
            else if (ctrlUp && !shiftUp) {
                var cellIndex = this._findIndex();
                if (cellIndex === -1) {
                    this._selectedCells.push({
                        row: this._selectedCell.row,
                        column: this._selectedCell.column,
                    });
                }
                else {
                    this._selectedCells.length > 1 && this._selectedCells.splice(cellIndex, 1);
                }
            }
            else {
                this._selectedCells = [this._selectedCell];
            }
        }
        else {
            this._selectedCells = [this._selectedCell];
        }
        dom_1.awaitRedraw().then(function () {
            _this._grid.paint();
            _this._setBrowserFocus();
        });
    };
    Selection.prototype.getCell = function () {
        return this._selectedCell;
    };
    Selection.prototype.getCells = function () {
        return this._selectedCells;
    };
    Selection.prototype.toHTML = function () {
        var _this = this;
        if (this._isUnselected()) {
            return;
        }
        if (this._multiselection) {
            var selection_1 = [];
            this._selectedCells.forEach(function (cell, index, array) {
                selection_1.push(_this._toHTML(cell.row, cell.column, index === array.length - 1 || _this._type === "cell"));
            });
            return selection_1;
        }
        else {
            return this._toHTML(this._selectedCell.row, this._selectedCell.column, true);
        }
    };
    Selection.prototype.disable = function () {
        this.removeCell();
        this.config.disabled = true;
        this._grid.paint();
    };
    Selection.prototype.enable = function () {
        this.config.disabled = false;
        this._grid.paint();
    };
    Selection.prototype.removeCell = function (rowId, colId) {
        var _this = this;
        if (rowId && colId && this._type === "cell") {
            var cell = this._selectedCells.find(function (_a) {
                var row = _a.row, column = _a.column;
                return row.id == rowId && column.id == colId;
            });
            cell && this._removeCell(cell.row, cell.column);
        }
        else if (rowId) {
            var cells = this._selectedCells.filter(function (_a) {
                var row = _a.row;
                return row.id == rowId;
            });
            cells.forEach(function (_a) {
                var row = _a.row, column = _a.column;
                _this._removeCell(row, column);
            });
        }
        else {
            this._removeCells();
        }
        dom_1.awaitRedraw().then(function () {
            _this._grid.paint();
        });
    };
    Selection.prototype._removeCell = function (row, col) {
        if (!row || !col || !row.id || !col.id)
            return;
        if (!this.events.fire(types_1.GridSelectionEvents.beforeUnSelect, [row, col]))
            return;
        var index = this._selectedCells.findIndex(function (item) { return item.row.id === row.id && item.column.id === col.id; });
        this._selectedCells.splice(index, 1);
        if (this._selectedCell &&
            col.id === this._selectedCell.column.id &&
            row.id === this._selectedCell.row.id) {
            this._selectedCell = this._selectedCells[this._selectedCells.length - 1] || undefined;
        }
        this.events.fire(types_1.GridSelectionEvents.afterUnSelect, [row, col]);
    };
    Selection.prototype._removeCells = function () {
        var _this = this;
        this._selectedCells.forEach(function (item) {
            _this._removeCell(item && item.row, item && item.column);
        });
        this._selectedCells.length && this._removeCells();
    };
    Selection.prototype._init = function () {
        var _this = this;
        this._grid.events.on(types_1.GridEvents.cellClick, function (row, col, e) {
            _this.setCell(row, col, e.ctrlKey || e.metaKey, e.shiftKey);
        });
        this._grid.data.events.on(ts_data_1.DataEvents.beforeRemove, function (item) {
            if (item && _this._selectedCell && _this._selectedCell.row) {
                var index = _this._grid.data.getIndex(String(_this._selectedCell.row.id));
                var id = _this._grid.data.getId(index + 1);
                if (id) {
                    _this.setCell(id);
                }
                else {
                    var newId = _this._grid.data.getId(index - 1);
                    if (newId) {
                        _this.setCell(newId);
                    }
                }
                _this._grid.paint();
            }
        });
    };
    Selection.prototype._toHTML = function (row, column, last) {
        if (last === void 0) { last = false; }
        var rows = this._grid.data.getRawData(0, -1, null, 2);
        var rowInd = core_1.findIndex(rows, function (obj) { return obj.id == row.id; });
        if (rowInd === -1)
            return null;
        var colums = this._grid.config.columns.filter(function (col) { return !col.hidden; });
        var fixedCols = this._grid.config.leftSplit ? colums.slice(0, this._grid.config.leftSplit) : [];
        var fixedColsIds = fixedCols.map(function (col) { return col.id; });
        var fixedColsWidth = fixedCols.reduce(function (total, coll) { return (total += coll.$width); }, 0);
        var fixedCell;
        var cellRect = this._grid.getCellRect(row.id, column.id);
        var scrollState = this._grid.getScrollState();
        if (fixedColsIds.includes(column.id) && last) {
            fixedCell = dom_1.el(".dhx_grid-selected-cell", {
                style: {
                    width: this._grid.config.leftSplit === fixedColsIds.indexOf(column.id) + 1
                        ? cellRect.width - 1
                        : cellRect.width,
                    height: cellRect.height,
                    top: cellRect.y,
                    left: cellRect.x + scrollState.x,
                    position: "absolute",
                    zIndex: 10,
                },
            });
        }
        var isBehindFixedCols = fixedCols.length && fixedColsWidth > cellRect.x - scrollState.x;
        var width = cellRect.width;
        if (isBehindFixedCols) {
            width -= fixedColsWidth - (cellRect.x - scrollState.x);
        }
        var totalWidth = this._grid.config.$totalWidth;
        return dom_1.el(".dhx_grid-selection", {
            style: {
                zIndex: fixedCell ||
                    this._grid.config.selection === "row" ||
                    this._grid.config.selection === "complex"
                    ? 20
                    : 10,
            },
        }, [
            (this._type === "row" || this._type === "complex") &&
                dom_1.el(".dhx_grid-selected-row", {
                    style: {
                        width: fixedCols.length ? totalWidth - scrollState.x : totalWidth,
                        height: cellRect.height - 1,
                        top: cellRect.y,
                        left: fixedCols.length ? scrollState.x : 0,
                        position: "absolute",
                    },
                }),
            ((this._type === "cell" || this._type === "complex") && fixedCell) ||
                ((this._type === "cell" || this._type === "complex") &&
                    last &&
                    dom_1.el(".dhx_grid-selected-cell", {
                        style: {
                            width: width,
                            height: cellRect.height - 1,
                            top: cellRect.y,
                            left: isBehindFixedCols ? fixedColsWidth + scrollState.x : cellRect.x,
                            position: "absolute",
                            display: width > 0 ? "flex" : "none",
                            borderLeft: isBehindFixedCols ? "none" : null,
                        },
                    })),
        ]);
    };
    Selection.prototype._isUnselected = function () {
        return (!this._selectedCell ||
            !this._selectedCell.row ||
            !this._selectedCell.column ||
            this._selectedCells.length === 0);
    };
    Selection.prototype._findIndex = function (cell) {
        var _this = this;
        if (cell === void 0) { cell = this._selectedCell; }
        var cellIndex = -1;
        this._selectedCells.some(function (element, index) {
            if (_this._type === "cell") {
                if (core_1.compare(element.row, cell.row) && core_1.compare(element.column, cell.column)) {
                    cellIndex = index;
                    return true;
                }
            }
            else if (_this._type === "row") {
                if (core_1.compare(element.row, cell.row)) {
                    cellIndex = index;
                    return true;
                }
            }
        });
        return cellIndex;
    };
    Selection.prototype._setBrowserFocus = function () {
        var gridContainer = this._grid.getRootView().data.getRootNode();
        if (gridContainer) {
            var gridDataContainer = gridContainer.querySelector(".dhx_grid_data");
            if (gridDataContainer &&
                this._selectedCell &&
                this._selectedCell.row &&
                this._selectedCell.column) {
                var $row = gridDataContainer.querySelector("[dhx_id=\"" + this._selectedCell.row.id + "\"]");
                var span = this._grid.getSpan(this._selectedCell.row.id, this._selectedCell.column.id);
                if ($row) {
                    var gridSpansContainer = span ? gridContainer.querySelector(".dhx_span-spans") : null;
                    var $focusedCell = gridSpansContainer
                        ? gridSpansContainer.querySelector("[dhx_col_id=\"" + span.column + "\"][dhx_id=\"" + span.row + "\"]")
                        : $row.querySelector("[dhx_col_id=\"" + this._selectedCell.column.id + "\"]");
                    if ($focusedCell) {
                        $focusedCell.tabIndex = 0;
                        $focusedCell.focus({ preventScroll: true });
                        // $focusedCell.focus();
                    }
                }
            }
        }
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),

/***/ "../ts-grid/sources/columnsResizer.ts":
/*!********************************************!*\
  !*** ../ts-grid/sources/columnsResizer.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-grid/sources/types.ts");
var html_1 = __webpack_require__(/*! ../../ts-common/html */ "../ts-common/html.ts");
function startResize(grid, column, ev, cb) {
    ev.targetTouches && ev.preventDefault();
    var initX = ev.targetTouches ? ev.targetTouches[0].clientX : ev.clientX;
    var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
    var initWidth = 0;
    grid.config.$resizing = column;
    var moveHandler = function (e) {
        var i = core_1.findIndex(columns, function (obj) {
            return obj.id === column;
        });
        var currentX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
        var containerLeft = currentX - grid.getRootNode().getBoundingClientRect().left;
        var scrollbarY = grid.config.$totalHeight > grid.config.height ? html_1.getScrollbarWidth() : 0;
        if (grid.config.leftSplit === i + 1 && containerLeft >= grid.config.width - scrollbarY - 2) {
            return;
        }
        initWidth = initWidth || columns[i].$width;
        var minWidth = columns[i].minWidth || 40;
        var maxWidth = columns[i].maxWidth;
        var move = currentX - initX;
        var cols = __spreadArrays(columns);
        var size = initWidth + move;
        var final;
        if ((maxWidth && size >= maxWidth) || size <= minWidth) {
            if (size <= minWidth) {
                final = minWidth;
            }
            if (size >= maxWidth) {
                final = maxWidth;
            }
        }
        else {
            final = size;
        }
        cols[i].$width = final;
        cols[i].$fixed = true;
        grid.events.fire(types_1.GridEvents.resize, [columns[i], e]);
        grid.paint();
    };
    var upHandler = function () {
        if (!ev.targetTouches) {
            document.removeEventListener("mousemove", moveHandler);
            document.removeEventListener("mouseup", upHandler);
        }
        else {
            document.removeEventListener("touchmove", moveHandler);
            document.removeEventListener("touchend", upHandler);
        }
        cb();
    };
    if (!ev.targetTouches) {
        document.addEventListener("mousemove", moveHandler);
        document.addEventListener("mouseup", upHandler);
    }
    else {
        document.addEventListener("touchmove", moveHandler);
        document.addEventListener("touchend", upHandler);
    }
    grid.paint();
}
exports.startResize = startResize;


/***/ }),

/***/ "../ts-grid/sources/helpers/cells.ts":
/*!*******************************************!*\
  !*** ../ts-grid/sources/helpers/cells.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getWidth(columns, colspan, index) {
    var cols = columns.filter(function (_a) {
        var hidden = _a.hidden;
        return !hidden;
    });
    if (!colspan) {
        return cols[index].$width;
    }
    return cols.reduce(function (width, _a, i) {
        var $width = _a.$width;
        width += i >= index && i < index + colspan ? $width : 0;
        return width;
    }, 0);
}
exports.getWidth = getWidth;
function getHeight(dataRows, rowspan, index) {
    var rows = dataRows.filter(function (_a) {
        var hidden = _a.hidden;
        return !hidden;
    });
    if (!rowspan) {
        return rows[index].$height;
    }
    return rows.reduce(function (height, _a, i) {
        var $height = _a.$height;
        height += i >= index && i < index + rowspan ? $height : 0;
        return height;
    }, 0);
}
exports.getHeight = getHeight;


/***/ }),

/***/ "../ts-grid/sources/helpers/data.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/helpers/data.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var main_1 = __webpack_require__(/*! ./main */ "../ts-grid/sources/helpers/main.ts");
var date_1 = __webpack_require__(/*! @dhx/ts-common/date */ "../ts-common/date.ts");
function normalizeArray(obj, name) {
    if (!obj[name]) {
        return;
    }
    if (typeof obj[name] === "string") {
        obj[name] = [
            {
                text: "" + obj[name],
            },
        ];
    }
    else {
        obj[name] = obj[name].map(function (el) {
            if (typeof el === "string") {
                el = { text: el };
            }
            return el;
        });
    }
}
function normalizeColumns(_a, configChanged) {
    var columns = _a.columns, htmlEnable = _a.htmlEnable;
    if (configChanged === void 0) { configChanged = false; }
    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        col.$htmlEnable = !!(col.htmlEnable || htmlEnable);
        col.$cellCss = col.$cellCss || {};
        normalizeArray(col, "header");
        normalizeArray(col, "footer");
        var isContent = col.header.reduce(function (acc, item) { return (acc = acc || !!item.content); }, false);
        if (isContent) {
            col.$uniqueData = [];
        }
        var width = col.minWidth || 100;
        if (col.width) {
            if (col.maxWidth && col.minWidth) {
                width =
                    col.width >= col.minWidth && col.width <= col.maxWidth
                        ? col.width
                        : col.width >= col.maxWidth
                            ? col.maxWidth
                            : col.minWidth;
            }
            else if (col.maxWidth) {
                width = col.width <= col.maxWidth ? col.width : col.maxWidth > 100 ? col.maxWidth : 100;
            }
            else if (col.minWidth) {
                width = col.width >= col.minWidth ? col.width : col.minWidth;
            }
            else {
                width = col.width;
            }
        }
        col.$width = col.$width && !configChanged ? col.$width : width;
        if (col.$width > col.maxWidth) {
            col.$width = col.maxWidth;
        }
        if (col.$width < col.minWidth) {
            col.$width = col.minWidth;
        }
    }
}
exports.normalizeColumns = normalizeColumns;
function countColumns(config, columns) {
    var headerRowsCount = 0;
    var footerRowsCount = 0;
    var totalWidth = 0;
    var colspans = false;
    var rowsHeadersCount = 0;
    var footer = false;
    columns.forEach(function (col) {
        headerRowsCount = Math.max(headerRowsCount, col.header.length);
        totalWidth += col.$width;
        if (col.footer) {
            footerRowsCount = Math.max(footerRowsCount, col.footer.length);
            if (!footer) {
                footer = true;
            }
        }
        if (!colspans) {
            for (var _i = 0, _a = col.header; _i < _a.length; _i++) {
                var head = _a[_i];
                if (head.colspan) {
                    colspans = true;
                    return;
                }
            }
        }
    });
    // fill missing cells
    columns.forEach(function (col) {
        if (col.header.length < headerRowsCount) {
            for (var i = 0; i < headerRowsCount; i++) {
                col.header[i] = col.header[i] || { text: "" };
            }
        }
        if (footer) {
            col.footer = col.footer || [];
        }
        if (col.footer && col.footer.length < footerRowsCount) {
            for (var i = 0; i < footerRowsCount; i++) {
                col.footer[i] = col.footer[i] || { text: "" };
            }
        }
        col.header = col.header.map(function (head) {
            if (typeof head !== "object") {
                head = { text: head };
            }
            head.css = head.css || "";
            if (!head.text && !head.css.includes("dhx_cell-empty")) {
                head.css += " dhx_cell-empty";
            }
            return head;
        });
        // find header columns indexes
        if (col.header[0].text === "") {
            rowsHeadersCount++;
        }
    });
    config.$totalWidth = totalWidth;
    config.$headerLevel = headerRowsCount;
    config.$footerLevel = footerRowsCount;
    config.$colspans = colspans;
    config.$footer = footer;
    return rowsHeadersCount;
}
exports.countColumns = countColumns;
function calculatePositions(width, height, scroll, conf, data) {
    var columns = conf.columns || [];
    var columnsLength = columns.length;
    var rows = data || [];
    var rowsLength = rows.length;
    var maxWidth = -Infinity;
    for (var index = 0; index < columnsLength; index++) {
        if (columns[index].$width > maxWidth)
            maxWidth = columns[index].$width;
    }
    var minWidth = +Infinity;
    for (var index = 0; index < columnsLength; index++) {
        if (columns[index].$width < minWidth)
            minWidth = columns[index].$width;
    }
    var maxHeight = -Infinity;
    for (var index = 0; index < rowsLength; index++) {
        if (rows[index].$height > maxHeight)
            maxHeight = rows[index].$height;
    }
    var minHeight = conf.rowHeight;
    var xReserve = Math.round(maxWidth / minWidth);
    var yReserve = Math.round(maxHeight / minHeight);
    var avrColWidth = conf.$totalWidth / columnsLength;
    var colPerPage = Math.round(width / avrColWidth);
    var avrRowHeight = conf.$totalHeight / rowsLength;
    var rowPerPage = Math.round(height / avrRowHeight);
    var x = 0;
    var scrollLeft = scroll.left;
    for (var i = 0; i < columns.length; i++) {
        var col = columns[i];
        scrollLeft = scrollLeft - col.$width;
        if (scrollLeft + avrColWidth / 2 > 0) {
            x++;
        }
        else {
            break;
        }
    }
    var y = 0;
    var scrollTop = scroll.top;
    for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        scrollTop = scrollTop - row.$height;
        if (scrollTop + avrRowHeight / 2 > 0) {
            y++;
        }
        else {
            break;
        }
    }
    var xStart = x - xReserve >= 0 ? x - xReserve : 0;
    var xEnd = x + colPerPage + xReserve;
    var yStart = y - yReserve >= 0 ? y - yReserve : 0;
    var yEnd = y + rowPerPage + yReserve;
    return {
        xStart: xStart,
        xEnd: xEnd,
        yStart: yStart,
        yEnd: yEnd,
    };
}
exports.calculatePositions = calculatePositions;
function getUnique(arr, name, multiselection) {
    var allItems = arr.map(function (item) { return item[name]; });
    if (multiselection) {
        allItems.forEach(function (item, index) {
            if (item.includes(", ")) {
                item.split(", ").forEach(function (i) { return allItems.push(i); });
                delete allItems[index];
            }
        });
    }
    return allItems.filter(function (item, i, array) { return array.indexOf(item) === i && core_1.isDefined(item); }).sort();
}
exports.getUnique = getUnique;
exports.getMaxRowHeight = function (row, cols, config) {
    if (config === void 0) { config = { font: "20px Roboto", lineHeight: 20 }; }
    var _a, _b;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d", {
        alpha: false,
    });
    ctx.font = config.font;
    var definedColumns = {};
    var colLength = cols.length;
    for (var index = 0; index < colLength; index++) {
        if (cols[index].template) {
            definedColumns[cols[index].id] = {
                width: cols[index].$width || 0,
                htmlEnable: cols[index].$htmlEnable,
                template: cols[index].template,
                cols: cols[index],
            };
        }
        else {
            definedColumns[cols[index].id] = {
                width: cols[index].$width || 0,
                htmlEnable: cols[index].$htmlEnable,
            };
        }
    }
    var defaultLineBreak = [];
    var mathLineBreak = [];
    for (var _i = 0, _c = Object.entries(row); _i < _c.length; _i++) {
        var _d = _c[_i], key = _d[0], value = _d[1];
        if (definedColumns[key] &&
            key !== "id" &&
            key !== "height" &&
            !key.startsWith("$") &&
            (typeof value === "string" || typeof value === "number")) {
            var currentValue = "";
            if ((_a = definedColumns[key]) === null || _a === void 0 ? void 0 : _a.template) {
                var templateValue = definedColumns[key].template(value, row, definedColumns[key].cols);
                currentValue = definedColumns[key].htmlEnable ? main_1.removeHTMLTags(templateValue) : templateValue;
            }
            else if (typeof value === "string") {
                if (definedColumns[key].htmlEnable) {
                    currentValue = main_1.removeHTMLTags(value);
                }
                else {
                    currentValue = value;
                }
            }
            else {
                currentValue = value.toString();
            }
            defaultLineBreak.push(currentValue.split("\n").length);
            mathLineBreak.push(Math.round(ctx.measureText(currentValue).width / ((_b = definedColumns[key]) === null || _b === void 0 ? void 0 : _b.width)));
        }
    }
    var maxRows = Math.max(core_1.getMaxArrayNymber(defaultLineBreak), core_1.getMaxArrayNymber(mathLineBreak));
    canvas.remove();
    return maxRows * config.lineHeight;
};
exports.getMaxColsWidth = function (rows, cols, config, target) {
    if (config === void 0) { config = {
        font: "normal 14.4px Arial",
    }; }
    var _a;
    if (!rows.length || !cols.length)
        return;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d", {
        alpha: false,
    });
    ctx.font = config.font;
    var definedColumns = {};
    var colLength = cols.length;
    for (var index = 0; index < colLength; index++) {
        if (cols[index].template && target === "data") {
            definedColumns[cols[index].id] = {
                width: 20,
                htmlEnable: cols[index].$htmlEnable,
                template: cols[index].template,
                cols: cols[index],
            };
        }
        else {
            definedColumns[cols[index].id] = {
                width: 20,
                htmlEnable: cols[index].$htmlEnable,
                format: cols[index].format,
            };
        }
    }
    var rowsLength = rows.length;
    for (var index = 0; index < rowsLength; index++) {
        for (var _i = 0, _b = Object.entries(rows[index]); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], value = _c[1];
            if (definedColumns[key] &&
                key !== "id" &&
                key !== "height" &&
                !key.startsWith("$") &&
                (typeof value === "string" || typeof value === "number" || value instanceof Date)) {
                var currentValue = void 0;
                if (typeof ((_a = definedColumns[key]) === null || _a === void 0 ? void 0 : _a.template) === "function" && !(value instanceof Date)) {
                    var templateValue = definedColumns[key].template(value, rows[index], definedColumns[key].cols);
                    currentValue = definedColumns[key].htmlEnable
                        ? main_1.removeHTMLTags(templateValue)
                        : templateValue;
                }
                else if (value instanceof Date) {
                    currentValue = date_1.getFormattedDate(definedColumns[key].format || "%M %d %Y", value);
                }
                else {
                    currentValue = definedColumns[key].htmlEnable
                        ? main_1.removeHTMLTags(value)
                        : value.toString();
                }
                var width = ctx.measureText(currentValue).width;
                if (width > definedColumns[key].width)
                    definedColumns[key].width = width;
            }
        }
    }
    canvas.remove();
    var totalColumns = {};
    for (var _d = 0, _e = Object.entries(definedColumns); _d < _e.length; _d++) {
        var _f = _e[_d], key = _f[0], value = _f[1];
        totalColumns[key] = Math.ceil(value.width);
    }
    return totalColumns;
};
function toFormat(value, type, format) {
    if (!value && typeof value !== "number") {
        return value;
    }
    var formatTemplate = function (type) {
        value = value.toString();
        var result;
        var template = format
            .replace(/#+/g, "#")
            .split("#")
            .filter(function (i) { return i; });
        value = type === "percent" ? (Number(value) * 100).toString() : value;
        var trunc = Math.trunc(Number(value)).toString();
        var formatFractionLength = format.match(/0/g) && format.match(/0/g).length;
        var truncTemplate = template.find(function (i) { return !i.includes("0"); });
        result = truncTemplate ? trunc.replace(/(\d)(?=(\d{3})+(\D|$))/g, "$1" + truncTemplate) : trunc;
        if (formatFractionLength) {
            var delimiter = template.find(function (i) { return i.includes("0"); }).replace(/0+/g, "");
            var truncFractional = value.split(".")[1] || "0";
            var fractional = Number("0." + truncFractional).toFixed(formatFractionLength);
            if (Number(fractional) >= 1)
                (result++).toString();
            fractional = fractional
                .toString()
                .split(".")[1]
                .padEnd(formatFractionLength, "0");
            result += delimiter + fractional;
        }
        return type === "percent" ? result + "%" : result;
    };
    switch (type) {
        case "number":
        case "percent":
            if (!format)
                format = "#";
            return core_1.isDefined(value) && !isNaN(Number(value)) ? formatTemplate(type) : value;
        case "date":
            if (!format)
                format = "%M %d %Y";
            if (typeof value === "string") {
                value = date_1.getFormattedDate(format, date_1.stringToDate(value, format));
            }
            else if (typeof value === "object") {
                value = date_1.getFormattedDate(format, value);
            }
            return value;
        default:
            return value;
    }
}
exports.toFormat = toFormat;
exports.getCalculatedRowHeight = function (height, config) {
    if (config === void 0) { config = {
        rowHeight: 40,
        padding: 8,
    }; }
    var calculateHeight = config.rowHeight < 40 ? height : height + config.padding * 2;
    return height < config.rowHeight ? config.rowHeight : calculateHeight;
};
exports.getTreeCellWidthOffset = function (row) {
    return 20 + row.$level * 20 - (row.$items ? 20 : 0);
};


/***/ }),

/***/ "../ts-grid/sources/helpers/keys.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/helpers/keys.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../types */ "../ts-grid/sources/types.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var main_1 = __webpack_require__(/*! ./main */ "../ts-grid/sources/helpers/main.ts");
function selectionMove(e, grid, dir, range, toEnd, ctrlUp, shiftUp) {
    if (toEnd === void 0) { toEnd = false; }
    if (ctrlUp === void 0) { ctrlUp = false; }
    if (shiftUp === void 0) { shiftUp = false; }
    if (grid.config.$editable || !grid.config.selection || html_1.locateNodeByClassName(e, "dhx_grid-header-cell")) {
        return;
    }
    if (e) {
        e.preventDefault();
    }
    var selected = grid.selection.getCell();
    var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
    grid.data.filter(function (row) { return !row.hidden; });
    if (selected) {
        if (dir === "vertical") {
            if (toEnd) {
                var newItem = range === 1
                    ? grid.data.getItem(grid.data.getId(grid.data.getLength() - 1))
                    : grid.data.getItem(grid.data.getId(0));
                grid.selection.setCell(newItem.id, selected.column.id, ctrlUp, shiftUp);
                grid.scrollTo(newItem.id.toString(), selected.column.id.toString());
            }
            else {
                var index = grid.data.getIndex(selected.row.id.toString());
                if (index + range >= 0 && index + range < grid.data.getLength()) {
                    var newItem = grid.data.getItem(grid.data.getId(index + range));
                    grid.selection.setCell(newItem.id, selected.column.id, ctrlUp, shiftUp);
                    grid.scrollTo(newItem.id.toString(), selected.column.id.toString());
                }
            }
        }
        else {
            if (toEnd) {
                var newItem = range === 1 ? columns[columns.length - 1] : columns[0];
                grid.selection.setCell(selected.row.id, newItem.id, ctrlUp, shiftUp);
                grid.scrollTo(selected.row.id.toString(), newItem.id.toString());
            }
            else {
                var index = columns.indexOf(selected.column);
                if (index + range >= 0 && index + range < columns.length) {
                    grid.selection.setCell(selected.row.id, columns[index + range].id, ctrlUp, shiftUp);
                    grid.scrollTo(selected.row.id.toString(), columns[index + range].id.toString());
                }
            }
        }
    }
}
exports.selectionMove = selectionMove;
function getKeysHandlers(grid) {
    var _a, _b, _c;
    var cellSelection = grid.config.selection === "cell" ||
        grid.config.selection === "complex" ||
        grid.config.selection === true;
    var gridBodyHandlers = {};
    if (grid.getRootView()) {
        var gridBody_1 = (_c = (_b = (_a = grid.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.grid_body) === null || _c === void 0 ? void 0 : _c.el;
        if (!gridBody_1) {
            return;
        }
        gridBodyHandlers = {
            pageUp: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop -= gridBody_1.clientHeight;
            },
            pageDown: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop += gridBody_1.clientHeight;
            },
            home: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop = 0;
            },
            end: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop += gridBody_1.scrollHeight;
            },
        };
    }
    return __assign({ enter: function (e) {
            var $col = html_1.locateNodeByClassName(e, "dhx_grid-header-cell");
            if ($col) {
                // sort by enter on header
                var id = $col.getAttribute("dhx_id");
                var isResizable = e.target.getAttribute("dhx_resized");
                if (id) {
                    var column = grid.getColumn(id);
                    if (column && main_1.isSortable(grid.config, column) && !isResizable) {
                        grid.events.fire(types_1.GridEvents.afterSort, [id]);
                    }
                }
            }
            if (cellSelection) {
                var selected = grid.selection.getCell();
                if (selected &&
                    ((selected.column.editable !== false && grid.config.editable) || selected.column.editable)) {
                    if (!grid.config.$editable) {
                        if (selected.column.type !== "boolean") {
                            grid.editCell(selected.row.id, selected.column.id, selected.column.editorType);
                        }
                        else {
                            grid.events.fire(types_1.GridEvents.afterEditEnd, [
                                !selected.row[selected.column.id],
                                selected.row,
                                selected.column,
                            ]);
                        }
                    }
                    else {
                        grid.editEnd();
                    }
                }
            }
            else {
                if (grid.config.$editable) {
                    grid.editEnd();
                }
            }
        }, space: function (e) {
            var _a;
            var selected = grid.selection.getCell();
            if (cellSelection &&
                ((_a = selected === null || selected === void 0 ? void 0 : selected.column.editable) !== null && _a !== void 0 ? _a : grid.config.editable) &&
                !grid.config.$editable) {
                if (selected && selected.column.type === "boolean") {
                    e.preventDefault();
                    grid.events.fire(types_1.GridEvents.afterEditEnd, [
                        !selected.row[selected.column.id],
                        selected.row,
                        selected.column,
                    ]);
                }
            }
        }, escape: function () {
            if (grid.config.$editable) {
                grid.editEnd(true);
            }
        }, tab: function (e) {
            if (!grid.config.selection || html_1.locateNodeByClassName(e, "dhx_grid-header-cell")) {
                return;
            }
            if (grid.config.$editable) {
                grid.editEnd();
            }
            var selected = grid.selection.getCell();
            var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
            if (selected) {
                var index = columns.indexOf(selected.column) + 1;
                if (index >= 0 && index < columns.length) {
                    e && e.preventDefault();
                    grid.selection.setCell(selected.row.id, columns[index].id);
                    grid.scrollTo(selected.row.id.toString(), columns[index].id.toString());
                }
                else if (index >= 0) {
                    var newLineIndex = grid.data.getIndex(selected.row.id.toString()) + 1;
                    if (newLineIndex < grid.data.getLength()) {
                        e && e.preventDefault();
                        grid.selection.setCell(grid.data.getId(newLineIndex), columns[0].id);
                        grid.scrollTo(grid.data.getId(newLineIndex).toString(), columns[0].id.toString());
                    }
                }
            }
        }, "shift+tab": function (e) {
            if (!grid.config.selection || html_1.locateNodeByClassName(e, "dhx_grid-header-cell")) {
                return;
            }
            if (grid.config.$editable) {
                grid.editEnd();
            }
            var selected = grid.selection.getCell();
            var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
            if (selected) {
                var index = columns.indexOf(selected.column) - 1;
                if (index >= 0 && index < columns.length) {
                    e && e.preventDefault();
                    grid.selection.setCell(selected.row.id, columns[index].id);
                    grid.scrollTo(selected.row.id.toString(), columns[index].id.toString());
                }
                else if (index < grid.data.getLength()) {
                    var newLineIndex = grid.data.getIndex(selected.row.id.toString()) - 1;
                    if (newLineIndex >= 0) {
                        e && e.preventDefault();
                        grid.selection.setCell(grid.data.getId(newLineIndex), columns[columns.length - 1].id);
                        grid.scrollTo(grid.data.getId(newLineIndex).toString(), columns[columns.length - 1].id.toString());
                    }
                }
            }
        }, arrowUp: function (e) {
            selectionMove(e, grid, "vertical", -1);
        }, "ctrl+arrowUp": function (e) {
            selectionMove(e, grid, "vertical", -1, true);
        }, "shift+arrowUp": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", -1, false, false, true);
            }
        }, "ctrl+shift+arrowUp": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", -1, true, false, true);
            }
        }, arrowDown: function (e) {
            selectionMove(e, grid, "vertical", 1);
        }, "ctrl+arrowDown": function (e) {
            selectionMove(e, grid, "vertical", 1, true);
        }, "shift+arrowDown": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", 1, false, false, true);
            }
        }, "ctrl+shift+arrowDown": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", 1, true, false, true);
            }
        }, arrowRight: function (e) {
            selectionMove(e, grid, "horizontal", 1);
        }, "ctrl+arrowRight": function (e) {
            selectionMove(e, grid, "horizontal", 1, true);
        }, "shift+arrowRight": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", 1, false, false, true);
            }
        }, "ctrl+shift+arrowRight": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", 1, true, false, true);
            }
        }, arrowLeft: function (e) {
            selectionMove(e, grid, "horizontal", -1);
        }, "ctrl+arrowLeft": function (e) {
            selectionMove(e, grid, "horizontal", -1, true);
        }, "shift+arrowLeft": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", -1, false, false, true);
            }
        }, "ctrl+shift+arrowLeft": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", -1, true, false, true);
            }
        } }, gridBodyHandlers);
}
exports.getKeysHandlers = getKeysHandlers;


/***/ }),

/***/ "../ts-grid/sources/helpers/main.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/helpers/main.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
function transpose(arr, transform) {
    var columns = [];
    for (var i = 0; i < arr.length; i++) {
        var row = arr[i];
        for (var cellInd = 0; cellInd < row.length; cellInd++) {
            columns[cellInd] = columns[cellInd] || [];
            var cell = transform ? transform(row[cellInd]) : row[cellInd];
            columns[cellInd].push(cell);
        }
    }
    return columns;
}
exports.transpose = transpose;
function insert(node, newone) {
    if (typeof newone === "string") {
        node.insertAdjacentHTML("beforeend", newone);
        return node.lastChild;
    }
    else {
        node.appendChild(newone);
        return newone;
    }
}
function getStyleByClass(cssClass, container, targetClass, def) {
    var cont = container.querySelector("." + targetClass);
    var testDiv = insert(cont, "<div class=\"" + cssClass + "\"></div>");
    var styles = window.getComputedStyle(testDiv);
    var result = {
        color: styles.color === "rgb(0, 0, 0)" ? def.color : core_1.rgbToHex(styles.color),
        background: styles.backgroundColor === "rgba(0, 0, 0, 0)" ? def.background : core_1.rgbToHex(styles.backgroundColor),
        fontSize: parseFloat(styles.fontSize),
    };
    cont.removeChild(testDiv);
    // [dirty]
    if (result.color === def.color &&
        result.background === def.background &&
        result.fontSize === def.fontSize) {
        return null;
    }
    return result;
}
exports.getStyleByClass = getStyleByClass;
function removeHTMLTags(str) {
    if (typeof str !== "string" && typeof str !== "number" && typeof str !== "boolean") {
        return "";
    }
    return ("" + (str === undefined || str === null ? "" : str))
        .replace(/<[^>]*>/g, "")
        .replace(/["]/g, "&quot;")
        .trim();
}
exports.removeHTMLTags = removeHTMLTags;
function isCssSupport(property, value) {
    try {
        return CSS.supports(property, value);
    }
    catch (err) {
        var el = document.createElement("div");
        el.style[property] = value;
        return el.style[property] === value;
    }
}
exports.isCssSupport = isCssSupport;
function isRowEmpty(row) {
    if (!row) {
        return;
    }
    return Object.keys(row).reduce(function (acc, col) {
        if (col === "id" || col.startsWith("$")) {
            return acc;
        }
        if (acc && row[col] !== undefined && row[col] !== "") {
            return;
        }
        return acc;
    }, true);
}
exports.isRowEmpty = isRowEmpty;
function isSortable(config, col) {
    return (col.sortable !== false && config.sortable) || col.sortable;
}
exports.isSortable = isSortable;
function isAutoWidth(config, col) {
    if (col) {
        return (col.autoWidth !== false && config.autoWidth) || col.autoWidth;
    }
    var check = false;
    config.columns.map(function (col) {
        if ((col.autoWidth !== false && config.autoWidth) || col.autoWidth) {
            check = true;
            return;
        }
    });
    return check;
}
exports.isAutoWidth = isAutoWidth;
function isTooltip(config, element) {
    return (element.tooltip !== false && config.tooltip) || element.tooltip;
}
exports.isTooltip = isTooltip;
function isHtmlEnable(config, col) {
    return (col.htmlEnable !== false && config.htmlEnable) || col.htmlEnable;
}
exports.isHtmlEnable = isHtmlEnable;
function getTotalWidth(columns) {
    return columns.reduce(function (total, col) { return total + (col.$width || 0); }, 0);
}
exports.getTotalWidth = getTotalWidth;
function getTotalHeight(rows) {
    return rows.reduce(function (total, row) { return total + (row.$height || 0); }, 0);
}
exports.getTotalHeight = getTotalHeight;


/***/ }),

/***/ "../ts-grid/sources/types.ts":
/*!***********************************!*\
  !*** ../ts-grid/sources/types.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridEvents;
(function (GridEvents) {
    GridEvents["scroll"] = "scroll";
    GridEvents["expand"] = "expand";
    GridEvents["filterChange"] = "filterChange";
    GridEvents["beforeResizeStart"] = "beforeResizeStart";
    GridEvents["resize"] = "resize";
    GridEvents["afterResizeEnd"] = "afterResizeEnd";
    GridEvents["cellClick"] = "cellClick";
    GridEvents["cellRightClick"] = "cellRightClick";
    GridEvents["cellMouseOver"] = "cellMouseOver";
    GridEvents["cellMouseDown"] = "cellMouseDown";
    GridEvents["cellDblClick"] = "cellDblClick";
    GridEvents["headerCellClick"] = "headerCellClick";
    GridEvents["footerCellClick"] = "footerCellClick";
    GridEvents["headerCellMouseOver"] = "headerCellMouseOver";
    GridEvents["footerCellMouseOver"] = "footerCellMouseOver";
    GridEvents["headerCellMouseDown"] = "headerCellMouseDown";
    GridEvents["footerCellMouseDown"] = "footerCellMouseDown";
    GridEvents["headerCellDblClick"] = "headerCellDblClick";
    GridEvents["footerCellDblClick"] = "footerCellDblClick";
    GridEvents["headerCellRightClick"] = "headerCellRightClick";
    GridEvents["footerCellRightClick"] = "footerCellRightClick";
    GridEvents["beforeEditStart"] = "beforeEditStart";
    GridEvents["afterEditStart"] = "afterEditStart";
    GridEvents["beforeEditEnd"] = "beforeEditEnd";
    GridEvents["afterEditEnd"] = "afterEditEnd";
    GridEvents["beforeKeyDown"] = "beforeKeyDown";
    GridEvents["afterKeyDown"] = "afterKeyDown";
    GridEvents["beforeColumnHide"] = "beforeColumnHide";
    GridEvents["afterColumnHide"] = "afterColumnHide";
    GridEvents["beforeColumnShow"] = "beforeColumnShow";
    GridEvents["afterColumnShow"] = "afterColumnShow";
    GridEvents["beforeRowHide"] = "beforeRowHide";
    GridEvents["afterRowHide"] = "afterRowHide";
    GridEvents["beforeRowShow"] = "beforeRowShow";
    GridEvents["afterRowShow"] = "afterRowShow";
    GridEvents["beforeRowDrag"] = "beforeRowDrag";
    GridEvents["dragRowStart"] = "dragRowStart";
    GridEvents["dragRowOut"] = "dragRowOut";
    GridEvents["dragRowIn"] = "dragRowIn";
    GridEvents["canRowDrop"] = "canRowDrop";
    GridEvents["cancelRowDrop"] = "cancelRowDrop";
    GridEvents["beforeRowDrop"] = "beforeRowDrop";
    GridEvents["afterRowDrop"] = "afterRowDrop";
    GridEvents["afterRowDrag"] = "afterRowDrag";
    GridEvents["beforeColumnDrag"] = "beforeColumnDrag";
    GridEvents["dragColumnStart"] = "dragColumnStart";
    GridEvents["dragColumnOut"] = "dragColumnOut";
    GridEvents["dragColumnIn"] = "dragColumnIn";
    GridEvents["canColumnDrop"] = "canColumnDrop";
    GridEvents["cancelColumnDrop"] = "cancelColumnDrop";
    GridEvents["beforeColumnDrop"] = "beforeColumnDrop";
    GridEvents["afterColumnDrop"] = "afterColumnDrop";
    GridEvents["afterColumnDrag"] = "afterColumnDrag";
    GridEvents["beforeRowResize"] = "beforeRowResize";
    GridEvents["afterRowResize"] = "afterRowResize";
    GridEvents["beforeSort"] = "beforeSort";
    GridEvents["afterSort"] = "afterSort";
})(GridEvents = exports.GridEvents || (exports.GridEvents = {}));
var GridSystemEvents;
(function (GridSystemEvents) {
    GridSystemEvents["cellTouchMove"] = "cellTouchMove";
    GridSystemEvents["cellTouchEnd"] = "cellTouchEnd";
    GridSystemEvents["headerCellTouchMove"] = "headerCellTouchMove";
    GridSystemEvents["headerCellTouchEnd"] = "headerCellTouchEnd";
})(GridSystemEvents = exports.GridSystemEvents || (exports.GridSystemEvents = {}));
var GridSelectionEvents;
(function (GridSelectionEvents) {
    GridSelectionEvents["beforeUnSelect"] = "beforeUnSelect";
    GridSelectionEvents["afterUnSelect"] = "afterUnSelect";
    GridSelectionEvents["beforeSelect"] = "beforeSelect";
    GridSelectionEvents["afterSelect"] = "afterSelect";
})(GridSelectionEvents = exports.GridSelectionEvents || (exports.GridSelectionEvents = {}));


/***/ }),

/***/ "../ts-grid/sources/ui/Cells.ts":
/*!**************************************!*\
  !*** ../ts-grid/sources/ui/Cells.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var cells_1 = __webpack_require__(/*! ../helpers/cells */ "../ts-grid/sources/helpers/cells.ts");
var main_1 = __webpack_require__(/*! ../helpers/main */ "../ts-grid/sources/helpers/main.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-grid/sources/types.ts");
var editors_1 = __webpack_require__(/*! ./editors/editors */ "../ts-grid/sources/ui/editors/editors.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var data_1 = __webpack_require__(/*! ../helpers/data */ "../ts-grid/sources/helpers/data.ts");
function handleMouse(rowStart, colStart, conf, type, e) {
    colStart = html_1.locateNodeByClassName(e.target, "dhx_grid-fixed-cols-wrap") ? 0 : colStart;
    var target = html_1.locateNodeByClassName(e.target, "dhx_grid-cell");
    var targetSpan = html_1.locateNodeByClassName(e.target, "dhx_span-cell");
    if ((!target && !targetSpan) || !type) {
        return;
    }
    var rowNode = target ? target.parentNode : targetSpan;
    var bodyNode = rowNode.parentNode;
    var colIndex = target
        ? Array.prototype.indexOf.call(rowNode.childNodes, target)
        : conf.columns.findIndex(function (column) { return column.id === targetSpan.getAttribute("dhx_col_id"); });
    var columns = conf.columns.filter(function (col) { return !col.hidden; });
    var col = columns[colStart + colIndex];
    var rowIndex = target
        ? Array.prototype.indexOf.call(bodyNode.childNodes, rowNode)
        : Number(targetSpan.getAttribute("dhx_id")) - 1;
    var row = conf.data["" + ((target ? rowStart : 0) + rowIndex)];
    var systemEvent = type.toLocaleLowerCase().includes("touch");
    if (systemEvent) {
        conf._events.fire(type, [row, col, e]);
    }
    else {
        conf.events.fire(type, [row, col, e]);
    }
}
function getHandlers(row, column, conf) {
    return {
        onclick: [handleMouse, row, column, conf, types_1.GridEvents.cellClick],
        onmouseover: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseOver],
        onmousedown: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseDown],
        ondblclick: [handleMouse, row, column, conf, types_1.GridEvents.cellDblClick],
        oncontextmenu: [handleMouse, row, column, conf, types_1.GridEvents.cellRightClick],
        ontouchstart: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseDown],
        ontouchmove: [handleMouse, row, column, conf, types_1.GridSystemEvents.cellTouchMove],
        ontouchend: [handleMouse, row, column, conf, types_1.GridSystemEvents.cellTouchEnd],
    };
}
exports.getHandlers = getHandlers;
function getTreeCell(content, row, col, conf) {
    var getCellAriaAttrs = function (col, ind) { return ({
        role: "gridcell",
        "aria-colindex": ind,
    }); };
    var getToggleAriaAttrs = function (row) { return ({
        role: "button",
        "aria-label": row.$opened ? "Collapse group" : "Expand group",
    }); };
    var isEditable = conf.$editable && conf.$editable.row === row.id && conf.$editable.col === col.id;
    var css = "";
    var cellAlign = col.align ? " dhx_align-" + col.align : "dhx_align-left";
    if (conf.dragMode && conf.dragItem === "row") {
        css +=
            (row.$drophere && !isEditable ? " dhx_grid-cell--drophere" : "") +
                (row.$dragtarget && !isEditable ? " dhx_grid-cell--dragtarget" : "") +
                (!isEditable ? " dhx_grid-cell--drag" : "");
    }
    var parentPadding = data_1.getTreeCellWidthOffset(row);
    return dom_1.el(".dhx_grid-cell", __assign({ class: "dhx_tree-cell " + (col.$cellCss[row.id] || "") + " " + (row.$items ? "dhx_grid-expand-cell" : "") +
            (" " + (isEditable ? "dhx_tree-editing-cell" : "") + " " + css) +
            cellAlign, style: {
            width: col.$width,
            height: row.$height,
            padding: !row.$items ? "0 0 0 " + parentPadding + "px" : 0,
        }, dhx_col_id: col.id }, getCellAriaAttrs(col, 1)), [
        row.$items
            ? dom_1.el(".dhx_grid-expand-cell-icon", __assign(__assign({ class: row.$opened ? "dxi dxi-chevron-up" : "dxi dxi-chevron-down", dhx_id: row.id }, getToggleAriaAttrs(row)), { style: {
                    padding: row.$level ? "0 0 0 " + (4 + parentPadding) + "px" : "0 0 0 4px",
                } }))
            : null,
        dom_1.el(".dhx_tree-cell", {
            class: cellAlign + ("" + ((conf.autoHeight && " dhx_tree-cell_auto-height") || "")),
        }, [content]),
    ]);
}
exports.getTreeCell = getTreeCell;
function getEditorCell(row, col, conf) {
    return editors_1.getEditor(row, col, conf);
}
function getCells(conf) {
    if (!conf.data || !conf.columns) {
        return [];
    }
    var getRowAriaAttrs = function (ind) { return ({
        role: "row",
        "aria-rowindex": ind,
    }); };
    var pos = conf.$positions;
    var data = conf.data ? conf.data.slice(pos.yStart, pos.yEnd) : [];
    var columns = conf.columns.slice(pos.xStart, pos.xEnd);
    var selectedCell = conf.selection.getCell();
    var isFirstTabindex = true;
    return data.map(function (row, index) {
        var isLastRow = data.length - 1 === index;
        var rowCss = "";
        if (conf.rowCss) {
            rowCss = conf.rowCss(row);
        }
        if (row.$css) {
            rowCss += row.$css;
        }
        return dom_1.el(".dhx_grid-row", __assign({ style: { height: isLastRow ? row.$height + 1 : row.$height }, dhx_id: row.id, class: rowCss, _key: row.id, _flags: dom_1.KEYED_LIST }, getRowAriaAttrs(pos.yStart + index + 1)), row.$customRender
            ? [row.$customRender(row, conf)]
            : columns.map(function (col, colIndex) {
                var _a;
                if (!col.hidden) {
                    var value = data_1.toFormat(row[col.id], col.type, col.format);
                    var getTabIndex_1 = function (col, row) {
                        var attrs = {
                            tabindex: -1,
                        };
                        if (selectedCell) {
                            // is current cell selected?
                            if (selectedCell.row.id === row.id && selectedCell.column.id === col.id) {
                                attrs["tabindex"] = 0;
                            }
                        }
                        else if (isFirstTabindex) {
                            attrs["tabindex"] = 0;
                            // one-time event - only on first focus
                            // FIXME: crutch-solution
                            attrs["onfocus"] = function (e) {
                                // FIXME: issue with samples that already setCell from index.html, rendered twice
                                // TODO: not here BUT if first cell is not in viewport -> scroll to it to set focus
                                if (conf.selection && !selectedCell) {
                                    var rowId = e.target.parentNode.getAttribute("dhx_id");
                                    var colId = e.target.getAttribute("dhx_col_id");
                                    if (colId && rowId) {
                                        conf.selection.setCell(rowId, colId);
                                        selectedCell = conf.selection.getCell();
                                    }
                                }
                            };
                        }
                        isFirstTabindex = false;
                        return attrs;
                    };
                    var getEditBtnAriaAttrs = function () { return ({
                        role: "button",
                        "aria-label": "Edit content",
                    }); };
                    var getCellAriaAttrs = function (col, colIndex, rowIndex, isEditable) { return (__assign({ role: "gridcell", "aria-colindex": colIndex, "aria-readonly": isEditable ? "false" : "true" }, getTabIndex_1(col, row))); };
                    var defaultTemplate = function (text) {
                        if (typeof text === "boolean" || col.type === "boolean") {
                            if (typeof text !== "string") {
                                return "" + Boolean(text);
                            }
                        }
                        return text || text === 0 ? text : "";
                    };
                    var content = col.template
                        ? col.template(value, row, col)
                        : defaultTemplate(value);
                    // content can be a domvm node or a string
                    if (typeof content === "string") {
                        content = main_1.isHtmlEnable(conf, col)
                            ? dom_1.el("div.dhx_grid-cell__content", __assign({ ".innerHTML": content }, getEditBtnAriaAttrs()))
                            : content;
                    }
                    var css = (((col.$cellCss && col.$cellCss[row.id]) || "") + " dhx_" + col.type + "-cell").replace(/\s+/g, " ");
                    var colWidth = col.$width;
                    var isEditable = conf.$editable &&
                        conf.$editable.row === row.id &&
                        conf.$editable.col === col.id;
                    if (isEditable ||
                        (col.type === "boolean" &&
                            ((conf.editable && ((_a = col.editable) !== null && _a !== void 0 ? _a : true)) ||
                                (!conf.editable && col.editable)))) {
                        if (!(conf.leftSplit &&
                            conf.columns.length !== conf.leftSplit &&
                            conf.columns.indexOf(col) < conf.leftSplit)) {
                            content = getEditorCell(row, col, conf).toHTML();
                            css += " dhx_grid-cell__editable";
                            if (conf.leftSplit === conf.columns.indexOf(col) + 1) {
                                colWidth -= 1;
                            }
                        }
                    }
                    if (conf.type === "tree" && conf.firstColId === col.id) {
                        return getTreeCell(content, row, col, conf);
                    }
                    if (conf.dragMode && conf.dragItem === "row") {
                        css +=
                            (row.$drophere && !isEditable ? " dhx_grid-cell--drophere" : "") +
                                (row.$dragtarget && !isEditable ? " dhx_grid-cell--dragtarget" : "") +
                                (!isEditable ? " dhx_grid-cell--drag" : "");
                    }
                    if (col.align) {
                        css += " dhx_align-" + col.align;
                    }
                    if (conf.autoHeight) {
                        css += " dhx_grid-cell__content_auto-height";
                    }
                    return dom_1.el(".dhx_grid-cell", __assign({ class: css, style: {
                            width: colWidth,
                            height: row.$height + "px",
                        }, _key: col.id, dhx_col_id: col.id }, getCellAriaAttrs(col, pos.xStart + colIndex + 1, index, conf.editable)), [content]);
                }
            }));
    });
}
exports.getCells = getCells;
function getSpans(config, frozen) {
    var spanCells = [];
    var pos = config.$positions;
    var columns = config.columns;
    var rows = config.data;
    if (!columns.length || !config.spans)
        return null;
    var spans = config.spans.sort(function (a, b) {
        return typeof a.row === "string" && typeof b.row === "string"
            ? a.row.localeCompare(b.row)
            : a.row - b.row;
    });
    var _loop_1 = function (i) {
        var row = spans[i].row;
        var col = spans[i].column;
        var spanHeight = spans[i].rowspan;
        var spanWidth = spans[i].colspan;
        var spanCss = spans[i].css;
        if (spanHeight === 1) {
            return "continue";
        }
        var colIndex = core_1.findIndex(columns, function (item) { return "" + item.id === "" + col; });
        var rowIndex = core_1.findIndex(rows, function (item) { return "" + item.id === "" + row; });
        if (colIndex < 0 || rowIndex < 0) {
            return "continue";
        }
        if (frozen === true &&
            ((spanWidth || 1) + colIndex > config.leftSplit || colIndex + 1 > config.leftSplit)) {
            return "continue";
        }
        var currCol = columns[colIndex];
        var currRow = rows[rowIndex];
        if (currCol.hidden) {
            return "continue";
        }
        var content = spans[i].text ? spans[i].text : currRow[col] === undefined ? "" : currRow[col];
        var t = function (text, _row, _col) { return (text || text === 0 ? text : ""); };
        var template = currCol.template || t;
        content = template(content, currRow, currCol);
        content =
            typeof content === "string"
                ? dom_1.el("div.dhx_span-cell-content", { ".innerHTML": content })
                : content;
        var currentTop = 0;
        for (var index = 0; index < rowIndex; index++) {
            currentTop += rows[index].$height;
        }
        var top_1 = currentTop - 1;
        var left = 0;
        for (var s = colIndex - 1; s >= 0; s--) {
            left += columns[s].$width;
        }
        var rowspanWithLastCol = colIndex === columns.length - 1;
        var colspanWithLastCol = colIndex + spanWidth === columns.length;
        var css = currCol.header[0].text ? " dhx_span-cell" : " dhx_span-cell dhx_span-cell--title";
        css += spanCss ? " " + spanCss : "";
        css += rowIndex === 0 ? " dhx_span-first-row" : "";
        css += colIndex === 0 ? " dhx_span-first-col" : "";
        css += rowspanWithLastCol || colspanWithLastCol ? " dhx_span-last-col" : "";
        css += !spanWidth ? " dhx_span-" + (currCol.type || "string") + "-cell" : " dhx_span-string-cell";
        css += currCol.align ? " dhx_align-" + currCol.align : " dhx_align-left";
        var width = spanWidth > 1 ? cells_1.getWidth(columns, spanWidth, colIndex) : currCol.$width;
        var height = spanHeight > 1 ? cells_1.getHeight(rows, spanHeight, rowIndex) : currRow.$height;
        spanCells.push(dom_1.el("div", __assign({ class: css, style: {
                width: width,
                height: height,
                top: top_1,
                left: left,
            }, dhx_col_id: col, dhx_id: row, "aria-hidden": "true" }, getHandlers(pos.yStart, pos.xStart, config)), [content]));
    };
    for (var i = 0; i < spans.length; i++) {
        _loop_1(i);
    }
    return spanCells;
}
exports.getSpans = getSpans;
function getShifts(conf) {
    var columnsLeft = conf.columns.slice(0, conf.$positions.xStart);
    var rowsTop = conf.data.slice(0, conf.$positions.yStart);
    return {
        x: main_1.getTotalWidth(columnsLeft),
        y: main_1.getTotalHeight(rowsTop),
    };
}
exports.getShifts = getShifts;


/***/ }),

/***/ "../ts-grid/sources/ui/FixedCols.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/ui/FixedCols.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var Cells_1 = __webpack_require__(/*! ./Cells */ "../ts-grid/sources/ui/Cells.ts");
var FixedRows_1 = __webpack_require__(/*! ./FixedRows */ "../ts-grid/sources/ui/FixedRows.ts");
var main_1 = __webpack_require__(/*! ../helpers/main */ "../ts-grid/sources/helpers/main.ts");
function getFixedColsHeader(renderConfig, layout) {
    if (typeof renderConfig.leftSplit !== "number") {
        return;
    }
    var splitHidden = 0;
    for (var index = 0; index < renderConfig.leftSplit; index++) {
        if (renderConfig.columns[index].hidden)
            splitHidden++;
    }
    if (splitHidden === renderConfig.leftSplit) {
        return;
    }
    var columns = renderConfig.columns.slice(0, renderConfig.leftSplit - splitHidden);
    var width = 0;
    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        width += col.$width;
    }
    var getRowAriaAttrs = function (count) { return ({
        role: "rowgroup",
        "aria-rowcount": count,
    }); };
    var frozenHeaderCols = renderConfig.leftSplit >= 0 &&
        FixedRows_1.getFixedRows(__assign(__assign({}, renderConfig), { currentColumns: columns, $positions: __assign(__assign({}, renderConfig.$positions), { xStart: 0, xEnd: renderConfig.leftSplit }), scroll: { top: 0, left: 0 }, columns: columns }), __assign(__assign({}, layout), { name: "header", position: "top", shifts: { x: 0, y: 0 } }));
    var headerRowsConfig = __assign(__assign({}, layout), { name: "header", position: "top" });
    return (frozenHeaderCols &&
        dom_1.el(".dhx_" + headerRowsConfig.name + "-fixed-cols", __assign({ style: {
                position: "absolute",
                top: 0,
                left: 0,
                maxWidth: width,
                overflow: "hidden",
            } }, getRowAriaAttrs(frozenHeaderCols.length)), frozenHeaderCols.body));
}
exports.getFixedColsHeader = getFixedColsHeader;
function getFixedCols(renderConfig, layout) {
    if (typeof renderConfig.leftSplit !== "number") {
        return;
    }
    var splitHidden = 0;
    for (var index = 0; index < renderConfig.leftSplit; index++) {
        if (renderConfig.columns[index].hidden)
            splitHidden++;
    }
    if (splitHidden === renderConfig.leftSplit) {
        return;
    }
    var scrollBarWidth = renderConfig.$totalWidth <= layout.wrapper.width ? 0 : html_1.getScrollbarWidth();
    var fixedContentHeight = renderConfig.$totalHeight + renderConfig.headerHeight + renderConfig.footerHeight;
    var fixedColsHeight = fixedContentHeight > layout.gridBodyHeight
        ? fixedContentHeight - scrollBarWidth
        : fixedContentHeight < layout.gridBodyHeight - scrollBarWidth
            ? fixedContentHeight
            : layout.gridBodyHeight;
    var columns = renderConfig.columns.slice(0, renderConfig.leftSplit - splitHidden);
    renderConfig.fixedColumnsWidth = main_1.getTotalWidth(columns);
    var fixedCols = Cells_1.getCells(__assign(__assign({}, renderConfig), { columns: columns, $positions: __assign(__assign({}, renderConfig.$positions), { xStart: 0, xEnd: renderConfig.leftSplit }) }));
    var isSticky = layout.sticky;
    var footerRowsConfig = __assign(__assign({}, layout), { name: "footer", position: "bottom" });
    var frozenFooterCols = renderConfig.leftSplit >= 0 &&
        FixedRows_1.getRows(__assign(__assign({}, renderConfig), { currentColumns: columns, $positions: __assign(__assign({}, renderConfig.$positions), { xStart: 0, xEnd: renderConfig.leftSplit }) }), __assign(__assign({}, layout), { name: "footer", position: "bottom" }));
    var footerHeight = 0;
    if (frozenFooterCols) {
        frozenFooterCols.forEach(function (node) { return (footerHeight += node.attrs.style.height); });
    }
    var getRowAriaAttrs = function (count) { return ({
        role: "rowgroup",
        "aria-rowcount": count,
    }); };
    var frozenFooter = isSticky
        ? frozenFooterCols &&
            dom_1.el(".dhx_" + footerRowsConfig.name + "-fixed-cols", __assign({ style: {
                    position: "absolute",
                    top: fixedColsHeight < layout.gridBodyHeight ? fixedColsHeight - footerHeight : null,
                    left: 0,
                    bottom: fixedColsHeight >= layout.gridBodyHeight
                        ? 0 + (isSticky ? scrollBarWidth : 0) + "px"
                        : null,
                } }, getRowAriaAttrs(frozenFooterCols.length)), frozenFooterCols)
        : null;
    var pos = renderConfig.$positions;
    var spans = Cells_1.getSpans(renderConfig, true);
    var getFixedColAriaAttrs = function () { return ({
        role: "presentation",
        "aria-label": "Fixed column",
    }); };
    return [
        dom_1.el(".dhx_grid-fixed-cols-wrap", __assign({ style: {
                height: fixedColsHeight >= layout.gridBodyHeight
                    ? (isSticky
                        ? layout.gridBodyHeight
                        : layout.gridBodyHeight + renderConfig.headerHeight) - scrollBarWidth
                    : fixedColsHeight,
                paddingTop: renderConfig.headerHeight,
                overflow: "hidden",
                width: renderConfig.fixedColumnsWidth,
            } }, getFixedColAriaAttrs()), [
            dom_1.el(".dhx_grid-fixed-cols", __assign(__assign({ style: {
                    top: -renderConfig.scroll.top + renderConfig.headerHeight - 1 + "px",
                    paddingTop: layout.shifts.y,
                    height: renderConfig.$totalHeight,
                    position: "absolute",
                }, _flags: dom_1.KEYED_LIST }, Cells_1.getHandlers(pos.yStart, pos.xStart, renderConfig)), getRowAriaAttrs(renderConfig.data.length)), __spreadArrays([spans && dom_1.el(".dhx_span-spans", { role: "presentation" }, [spans])], fixedCols)),
            dom_1.el(".dhx_frozen-cols-border", { role: "presentation" }),
        ]),
        renderConfig.$footer ? frozenFooter : null,
    ];
}
exports.getFixedCols = getFixedCols;


/***/ }),

/***/ "../ts-grid/sources/ui/FixedRows.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/ui/FixedRows.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var cells_1 = __webpack_require__(/*! ../helpers/cells */ "../ts-grid/sources/helpers/cells.ts");
var main_1 = __webpack_require__(/*! ../helpers/main */ "../ts-grid/sources/helpers/main.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-grid/sources/types.ts");
var BORDERS = 2;
function handleMouse(col, config, type, e) {
    if (!type)
        return;
    var systemEvent = type.toLocaleLowerCase().includes("touch");
    if (systemEvent) {
        config._events.fire(type, [col, e]);
    }
    else {
        config.events.fire(type, [col, e]);
    }
}
function getHandlers(column, rowName, config) {
    return {
        onclick: [handleMouse, column, config, types_1.GridEvents[rowName + "CellClick"]],
        onmouseover: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseOver"]],
        onmousedown: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseDown"]],
        ontouchstart: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseDown"]],
        ondblclick: [handleMouse, column, config, types_1.GridEvents[rowName + "CellDblClick"]],
        oncontextmenu: [handleMouse, column, config, types_1.GridEvents[rowName + "CellRightClick"]],
        ontouchmove: [handleMouse, column, config, types_1.GridSystemEvents[rowName + "CellTouchMove"]],
        ontouchend: [handleMouse, column, config, types_1.GridSystemEvents[rowName + "CelltouchEnd"]],
    };
}
function buildRows(columns, name) {
    var header = columns.map(function (col) { return col[name] || [{}]; });
    return main_1.transpose(header);
}
function getCustomContentCell(cell, column, config, rowName, css, colIndex, rowIndex) {
    if (css === void 0) { css = ""; }
    var type = column.type ? "dhx_" + column.type + "-cell" : "dhx_string-cell";
    // TODO: over with index of filter inside of header or footer
    var content = config.content[cell.content] && config.content[cell.content].toHtml(column, config);
    var cellRow = {};
    config.columns.forEach(function (col) {
        var hasContent = !!config.content[col[rowName][rowIndex].content];
        cellRow[col.id] =
            (hasContent && config.content[col[rowName][rowIndex].content].toHtml(col, config)) ||
                col[rowName][rowIndex].text;
    });
    return dom_1.el("." + type, {
        style: {
            class: css.trim(),
            padding: 0,
        },
    }, [
        content &&
            (typeof content === "string" || typeof content === "number"
                ? dom_1.el("div", {
                    class: "dhx_grid-footer-cell-text",
                    role: "presentation",
                    ".innerHTML": column.template && typeof content === "string"
                        ? column.template(content, cellRow, column)
                        : content,
                })
                : content),
    ]);
}
function getRows(config, rowsConfig) {
    if (!config.data || !config.columns) {
        return [];
    }
    var getRowAriaAttrs = function (ind) { return ({
        role: "row",
        "aria-rowindex": ind + 1,
    }); };
    var pos = config.$positions;
    var rowName = rowsConfig.name;
    var columns = config.currentColumns;
    var rowHeight = config[rowName + "RowHeight"] || 40;
    var rows = buildRows(columns, rowName);
    return rows.map(function (row, j) {
        return dom_1.el(".dhx_" + rowName + "-row", __assign({ style: {
                height: rowHeight,
            } }, getRowAriaAttrs(j)), row.map(function (cell, i) {
            var css = cell.css || "";
            var column = columns[i];
            var colIndex = pos.xStart + i + 1;
            var sortIconCss = "dxi dxi-sort-variant dhx_grid-sort-icon";
            var ariaSort = "none";
            if (config.sortBy && "" + column.id === config.sortBy && !cell.content) {
                var dir = config.sortDir || "asc";
                sortIconCss += " dhx_grid-sort-icon--" + dir;
                css += " dhx_grid-" + rowName + "-cell--sorted ";
                ariaSort = dir === "asc" ? "ascending" : "descending";
            }
            var sortIconVisible = main_1.isSortable(config, column) &&
                cell.text &&
                rowName !== "footer" &&
                cell.headerSort !== false;
            if (sortIconVisible) {
                css += " dhx_grid-header-cell--sortable";
            }
            var isFirstCol = i === 0 ? "dhx_first-column-cell" : "";
            var isLastCol = i === columns.length - 1 ? "dhx_last-column-cell" : "";
            if (!cell.content) {
                if (cell.align) {
                    css += " dhx_grid-header-cell--align_" + cell.align + " ";
                }
                else {
                    css += " dhx_grid-header-cell--" + (column.type === "number" || column.type === "percent" || column.type === "date"
                        ? "align_right"
                        : "align_left") + " ";
                }
            }
            css += isFirstCol + " " + isLastCol;
            var resizable = column.resizable !== undefined ? column.resizable : config.resizable;
            if (resizable) {
                resizable = dom_1.el("div", {
                    class: "dhx_resizer_grip_wrap",
                    "aria-hidden": "true",
                }, [
                    dom_1.el("div", {
                        class: "dhx_resizer_grip",
                        dhx_resized: column.id,
                        style: {
                            height: rows.length * 100 + "%",
                        },
                    }, [dom_1.el("div", { class: "dhx_resizer_grip_line" })]),
                ]);
                if (rowName === "footer" || j > 0) {
                    resizable = null;
                }
            }
            if (cell.align) {
                css += " dhx_align-" + cell.align;
            }
            var getCellAriaAttrs = function (rowName, colIndex, ariaSort) {
                var attrs = {
                    "aria-colindex": colIndex,
                };
                if (!sortIconVisible) {
                    // if cell is sortable - set tabindex on button (getInnerCellAriaAttrs),
                    // else - on cell
                    // attrs["tabindex"] = 0;
                    // TODO: after sort AND if first cell is not visible: selection.setCell(first cell) -> scrollTo
                    // TODO: use arrows to navigate, set tabindex for first cell only
                }
                if (rowName === "footer" || cell.content) {
                    attrs["role"] = "gridcell";
                }
                else {
                    attrs["role"] = "columnheader";
                    attrs["aria-sort"] = ariaSort;
                    // attrs["aria-label"] = title;
                }
                return attrs;
            };
            if (cell.content) {
                return dom_1.el(".dhx_grid-" + rowName + "-cell.dhx_grid-custom-content-cell", __assign(__assign({ class: css.trim(), dhx_id: column.id, _key: i, style: {
                        width: column.$width,
                        height: rowName === "footer" ? rowHeight + BORDERS / 2 + "px" : rowHeight + "px",
                    } }, getHandlers(column, rowName, config)), getCellAriaAttrs(rowName, colIndex, ariaSort)), [
                    getCustomContentCell(cell, column, config, rowName, "", colIndex, j),
                    resizable || null,
                ]);
            }
            var getInnerCellAriaAttrs = function (rowName, text) {
                return sortIconVisible
                    ? {
                        role: "button",
                        "aria-label": "Sort by " + text,
                    }
                    : {};
            };
            var cellCss = "dhx_grid-header-cell-text_content";
            if (config.autoHeight)
                cellCss += " dhx_grid-header-cell-text_content-auto-height";
            return dom_1.el(".dhx_grid-" + rowName + "-cell", __assign(__assign({ class: css.trim(), dhx_id: column.id, _key: i, style: {
                    width: column.$width,
                    height: rowName === "footer" ? rowHeight + BORDERS / 2 + "px" : rowHeight + "px",
                } }, getHandlers(column, rowName, config)), getCellAriaAttrs(rowName, colIndex, ariaSort)), [
                dom_1.el("div.dhx_grid-header-cell-text", {
                    role: "presentation",
                }, [
                    dom_1.el("span", __assign(__assign({ class: cellCss }, getInnerCellAriaAttrs(rowName, cell.text)), { style: { lineHeight: rowHeight + "px" }, ".innerHTML": cell.text })),
                    resizable || null,
                ]),
                sortIconVisible && dom_1.el("div", { class: sortIconCss, "aria-hidden": "true" }),
            ]);
        }));
    });
}
exports.getRows = getRows;
function getFixedSpans(config, rowsConfig) {
    var cols = config.columns;
    var rows = main_1.transpose(cols.map(function (col) { return col[rowsConfig.name] || []; }));
    var height = config[rowsConfig.name + "RowHeight"] || 40;
    var rowName = rowsConfig.name;
    var pos = config.$positions;
    var leftShift = 0;
    return rows.map(function (row, i) {
        leftShift = 0;
        return dom_1.el(".dhx_span-row", {
            style: { top: height * i + "px", height: height },
            class: "dhx_header-row",
            "aria-hidden": "true",
        }, row
            .map(function (cell, cellIdx) {
            var col = cols[cellIdx];
            var colIndex = pos.xStart + cellIdx + 1;
            leftShift += col.hidden ? 0 : col.$width;
            var isFirstCol = cellIdx === 0 ? "dhx_first-column-cell" : "";
            var isLastCol = cellIdx === cols.length - 1 || (cell.colspan || 0) + (cellIdx - 1) >= cols.length - 1
                ? "dhx_last-column-cell"
                : "";
            var spanHeight = height;
            if (cell.rowspan) {
                spanHeight = spanHeight * cell.rowspan - 1;
            }
            var sortIconVisible = main_1.isSortable(config, col) && cell.rowspan && cell.text && rowsConfig.name !== "footer";
            var sortIconCss = "dxi dxi-sort-variant dhx_grid-sort-icon";
            if (config.sortBy && "" + col.id === config.sortBy && !cell.content) {
                sortIconCss += " dhx_grid-sort-icon--" + (config.sortDir || "asc");
            }
            var cellAlign = col.align
                ? "dhx_align-" + col.align
                : (col.type === "number" || col.type === "percent" || col.type === "date") &&
                    !cell.colspan
                    ? "dhx_align-right"
                    : "dhx_align-left";
            var css = "dhx_grid-header-cell " + isFirstCol + " " + isLastCol + " " + (cell.rowspan ? "dhx_span-cell__rowspan" : "") + " " + (cell.align ? "dhx_align-" + cell.align : cellAlign) + " " + (cell.css ? cell.css : "");
            if (sortIconVisible) {
                css += " dhx_grid-header-cell--sortable";
            }
            if (!cell.content) {
                if (cell.align) {
                    css += " dhx_grid-header-cell--align_" + cell.align + " ";
                }
                else {
                    css += " dhx_grid-header-cell--" + (col.type === "number" || col.type === "percent" || col.type === "date"
                        ? "align_right"
                        : "align_left") + " ";
                }
            }
            var content = null;
            if (cell.content) {
                content = getCustomContentCell(cell, col, config, rowName, css, colIndex, i);
                content.attrs.style = __assign(__assign({}, content.attrs.style), { width: "100%", borderRight: "0" });
            }
            var borderLeft = "";
            if (leftShift - col.$width > 0) {
                borderLeft = "1px solid #e4e4e4";
            }
            var cellCss = "dhx_grid-header-cell-text_content";
            if (config.autoHeight)
                cellCss += " dhx_grid-header-cell-text_content-auto-height";
            return cell.colspan || cell.rowspan
                ? dom_1.el(".dhx_span-cell", __assign({ style: {
                        width: cells_1.getWidth(cols, cell.colspan, cellIdx),
                        height: rowName === "footer" ? spanHeight + BORDERS / 2 : spanHeight,
                        left: leftShift - col.$width,
                        borderLeft: borderLeft,
                        top: height * i,
                    }, class: css.trim(), dhx_id: col.id }, getHandlers(col, rowName, config)), [
                    content || cell.rowspan
                        ? dom_1.el("div.dhx_grid-header-cell-text", {
                            role: "presentation",
                        }, [
                            dom_1.el("span", {
                                class: cellCss,
                                ".innerHTML": cell.text,
                            }),
                        ])
                        : dom_1.el("span", {
                            class: cellCss,
                            ".innerHTML": cell.text,
                        }),
                    sortIconVisible && dom_1.el("div", { class: sortIconCss }),
                ])
                : null;
        })
            .filter(function (cell) { return cell; }));
    });
}
exports.getFixedSpans = getFixedSpans;
function getFixedRows(config, rowsConfig) {
    var _a;
    var rows = getRows(config, rowsConfig);
    var spans = getFixedSpans(config, rowsConfig);
    var getRowAriaAttrs = function (rowCount) { return ({
        role: "rowgroup",
        "aria-rowcount": rowCount,
    }); };
    var fixedCols = null;
    if (rowsConfig.name === "footer" && !rowsConfig.sticky) {
        fixedCols =
            config.leftSplit >= 0 &&
                getRows(__assign(__assign({}, config), { currentColumns: config.columns.slice(0, config.leftSplit), $positions: __assign(__assign({}, config.$positions), { xStart: 0, xEnd: config.leftSplit }) }), rowsConfig);
    }
    var styles = (_a = {
            position: "sticky"
        },
        _a[rowsConfig.position] = 0,
        _a);
    var left;
    if (!rowsConfig.sticky) {
        styles.left = -config.scroll.left;
        left = -config.scroll.left;
        styles.position = "relative";
    }
    return dom_1.el(".dhx_" + rowsConfig.name + "-wrapper", {
        class: rowsConfig.sticky ? "" : "dhx_compatible-" + rowsConfig.name,
        style: __assign(__assign({}, styles), { left: rowsConfig.sticky ? left : 0, height: rowsConfig.name === "footer"
                ? config[rowsConfig.name + "Height"] + BORDERS / 2
                : config[rowsConfig.name + "Height"], width: rowsConfig.sticky ? config.$totalWidth : rowsConfig.wrapper.width - BORDERS }),
        role: "presentation",
    }, [
        dom_1.el(".dhx_grid-" + rowsConfig.name, {
            style: {
                height: rowsConfig.name === "footer"
                    ? config[rowsConfig.name + "Height"] + BORDERS / 2
                    : config[rowsConfig.name + "Height"],
                left: left,
                paddingLeft: rowsConfig.shifts.x,
                width: config.$totalWidth,
            },
            role: "presentation",
        }, [
            dom_1.el(".dhx_" + rowsConfig.name + "-rows", __assign({}, getRowAriaAttrs(__spreadArrays(rows).length)), __spreadArrays(rows)),
            dom_1.el(".dhx_" + rowsConfig.name + "-spans", {
                style: {
                    marginLeft: -rowsConfig.shifts.x,
                },
                class: "dhx_" + rowsConfig.name + "-rows",
                role: "presentation",
            }, spans),
            fixedCols &&
                dom_1.el(".dhx_" + rowsConfig.name + "-fixed-cols", {
                    style: {
                        position: "absolute",
                        top: 0,
                        left: config.scroll.left + "px",
                        height: "100%",
                    },
                }, fixedCols),
        ]),
        dom_1.el("div", { style: { width: config.$totalWidth }, role: "presentation" }),
    ]);
}
exports.getFixedRows = getFixedRows;


/***/ }),

/***/ "../ts-grid/sources/ui/content.ts":
/*!****************************************!*\
  !*** ../ts-grid/sources/ui/content.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var ts_combobox_1 = __webpack_require__(/*! @dhx/ts-combobox */ "../ts-combobox/index.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-grid/sources/types.ts");
var data_1 = __webpack_require__(/*! ../helpers/data */ "../ts-grid/sources/helpers/data.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var inputDelay;
function onInput(eventSystem, colId, filter, filterObj, e) {
    var inputHandler = function () {
        var val = html_1.isIE() || html_1.isSafari() ? e.target.value : e.path ? e.path[0].value : e.explicitOriginalTarget.value;
        filterObj.value[colId] = val;
        eventSystem.fire(types_1.GridEvents.filterChange, [val, colId, filter]);
    };
    if (filter === "selectFilter") {
        inputHandler();
        return;
    }
    if (inputDelay) {
        clearTimeout(inputDelay);
    }
    inputDelay = setTimeout(inputHandler, 250);
}
function applyMathMethod(column, config, method, validate) {
    if (!column || !config || !method) {
        return;
    }
    var id = column.id;
    var columnData = validate
        ? validate(id, config.data)
        : config.data.reduce(function (items, item) {
            if (item[id] !== undefined && item[id] !== "" && !isNaN(item[id])) {
                items.push(parseFloat(item[id]));
            }
            return items;
        }, []);
    // [todo] move to treegrid
    var roots = columnData;
    if (config.type === "tree") {
        roots = config.data.reduce(function (total, item) {
            if (item.$level === 0) {
                if (item[id] !== undefined && item[id] !== "" && !isNaN(item[id])) {
                    total.push(parseFloat(item[id]) || 0);
                }
                else {
                    var value_1 = 0;
                    config.datacollection.eachChild(item.id, function (cell) {
                        if (!config.datacollection.haveItems(cell.id)) {
                            value_1 += parseFloat(cell[id]);
                        }
                    });
                    total.push(value_1);
                }
            }
            return total;
        }, []);
    }
    return method(columnData, roots);
}
function getContent() {
    var _this = this;
    return {
        inputFilter: {
            element: {},
            toHtml: function (column, config) {
                var id = core_1.uid();
                var colId = column.id.toString();
                this.element[colId] = dom_1.el("div.dhx_grid-filter__label.dxi.dxi-magnify", { "aria-label": "Type to search", _ref: column.id + "_filter" }, [
                    dom_1.el("label", {
                        style: {
                            display: "none",
                        },
                        "aria-label": "Type to search",
                        for: id,
                    }, "Type to search"),
                    dom_1.el("input", {
                        type: "text",
                        class: "dhx_input dhx_grid-filter",
                        oninput: [onInput, config.events, column.id, "inputFilter", this],
                        _key: column.id,
                        id: id,
                        value: this.value[column.id] || "",
                    }),
                ]);
                return this.element[colId];
            },
            match: function (value, match) {
                var res = "";
                for (var i = 0; i < match.length; i++) {
                    var char = match.charCodeAt(i);
                    if ((char > 32 && char < 48) || char === 63 || (char > 90 && char < 95) || char === 124) {
                        res += "\\" + match[i];
                    }
                    else {
                        res += match[i];
                    }
                }
                return new RegExp("" + res, "i").test(value);
            },
            value: {},
        },
        selectFilter: {
            element: {},
            toHtml: function (column, config) {
                var _this = this;
                var colId = column.id.toString();
                this.element[colId] = dom_1.el("label.dhx_grid-filter__label.dxi.dxi-menu-down", { _ref: column.id + "_filter" }, [
                    dom_1.el("select.dxi.dxi-menu-down", {
                        type: "text",
                        class: "dhx_input dhx_grid-filter dhx_grid-filter--select",
                        onchange: [onInput, config.events, column.id, "selectFilter", this],
                        _key: column.id,
                    }, __spreadArrays([
                        dom_1.el("option", { value: "" }, "")
                    ], column.$uniqueData.map(function (val) {
                        val = val !== null && val !== void 0 ? val : "";
                        return (val !== "" &&
                            dom_1.el("option", {
                                value: val,
                                selected: _this.value[column.id] === val.toString(),
                            }, val));
                    }))),
                ]);
                return this.element[colId];
            },
            match: function (value, match) { return (match ? value && value.toString() == match : true); },
            value: {},
        },
        comboFilter: {
            element: {},
            toHtml: function (column, config) {
                var combo;
                var colId = column.id.toString();
                if (!this.element[colId] && config.events) {
                    var conf = column.header.filter(function (item) { return item.filterConfig !== undefined; })[0];
                    if (conf && conf.filterConfig) {
                        combo = new ts_combobox_1.Combobox(null, Object.assign({}, conf.filterConfig));
                    }
                    else {
                        combo = new ts_combobox_1.Combobox(null, {});
                    }
                    combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                    config.events.on(ts_data_1.DataEvents.load, function () {
                        combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                    });
                    this.element[colId] = combo;
                    combo.events.on("change", function (id) {
                        if (id) {
                            var value = void 0;
                            var haveIds = Array.isArray(id)
                                ? id.find(function (item) { return combo.data.getItem(item); })
                                : combo.data.getItem(id);
                            if (haveIds) {
                                value = combo.config.multiselection
                                    ? combo.list.selection.getItem().map(function (item) {
                                        if (item && combo.data.getItem(item.id)) {
                                            return item.value;
                                        }
                                    })
                                    : combo.list.selection.getItem().value;
                                config.events.fire(types_1.GridEvents.filterChange, [value, colId, "comboFilter"]);
                            }
                            else {
                                config.events.fire(types_1.GridEvents.filterChange, ["", colId, "comboFilter"]);
                            }
                        }
                    });
                    config.events.on(ts_data_1.DataEvents.change, function (id, status) {
                        if (status === "add" || status === "update" || status === "remove") {
                            combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                            combo.events.fire(ts_combobox_1.ComboboxEvents.change, [combo.list.selection.getItem()]);
                        }
                    });
                    config.events.on(ts_data_1.DataEvents.removeAll, function () {
                        combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                        combo.events.fire(ts_combobox_1.ComboboxEvents.change, [combo.list.selection.getItem()]);
                    });
                    combo.popup.events.on("afterHide", function () {
                        if (!combo.list.selection.getItem() ||
                            (combo.config.multiselection && !combo.list.selection.getItem().length)) {
                            combo.clear();
                            config.events.fire(types_1.GridEvents.filterChange, ["", colId, "comboFilter"]);
                        }
                    });
                }
                else {
                    combo = this.element[column.id] || new ts_combobox_1.Combobox(null, {});
                }
                return dom_1.inject(combo.getRootView());
            },
            match: function (value, match, obj, multi) {
                if (match === void 0) { match = ""; }
                if (multi === void 0) { multi = false; }
                if (Array.isArray(match)) {
                    var result = void 0;
                    var _loop_1 = function (i) {
                        result = !multi
                            ? match[i] === value
                            : !!value.split(", ").find(function (item) { return item === match[i]; });
                        if (result)
                            return "break";
                    };
                    for (var i = 0; i < match.length; i++) {
                        var state_1 = _loop_1(i);
                        if (state_1 === "break")
                            break;
                    }
                    return match && match.length ? result : true;
                }
                else {
                    return match !== "" ? value === match : true;
                }
            },
            destroy: function () {
                if (_this.content && _this.content.comboFilter.element) {
                    var comboFilters = _this.content.comboFilter.element;
                    for (var combo in comboFilters) {
                        comboFilters[combo].destructor();
                        delete comboFilters[combo];
                    }
                }
            },
            value: {},
        },
        sum: {
            calculate: function (col, roots) { return roots.reduce(function (sum, c) { return (sum += parseFloat(c) || 0); }, 0); },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return data_1.toFormat(value, column.type, column.format);
                }
                else {
                    return value ? value.toFixed(3) : null;
                }
            },
        },
        avg: {
            calculate: function (col, roots) {
                return col.length ? roots.reduce(function (sum, c) { return (sum += c); }, 0) / col.length : null;
            },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return data_1.toFormat(value, column.type, column.format);
                }
                else {
                    return value ? value.toFixed(3) : null;
                }
            },
        },
        min: {
            calculate: function (col) { return (col.length ? Math.min.apply(Math, col) : null); },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return data_1.toFormat(value, column.type, column.format);
                }
                else {
                    return value ? value.toFixed(3) : null;
                }
            },
        },
        max: {
            calculate: function (col) { return (col.length ? Math.max.apply(Math, col) : null); },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return data_1.toFormat(value, column.type, column.format);
                }
                else {
                    return value ? value.toFixed(3) : null;
                }
            },
        },
        count: {
            calculate: function (_col, roots) {
                // [todo]
                return roots.reduce(function (count, c) { return (count += c); }, 0);
            },
            validate: function (colId, data) {
                return data.reduce(function (items, item) {
                    if (item[colId] !== undefined && item[colId] !== "") {
                        if (isNaN(item)) {
                            items.push(1);
                        }
                        else {
                            items.push(item);
                        }
                    }
                    return items;
                }, []);
            },
            toHtml: function (column, config) {
                return applyMathMethod(column, config, this.calculate, this.validate);
            },
        },
    };
}
exports.getContent = getContent;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/CheckboxEditor.ts":
/*!*******************************************************!*\
  !*** ../ts-grid/sources/ui/editors/CheckboxEditor.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var CheckboxEditor = /** @class */ (function () {
    function CheckboxEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    CheckboxEditor.prototype.endEdit = function () {
        var value = this._checked;
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.checked = !value;
        }
    };
    CheckboxEditor.prototype.toHTML = function () {
        if (this._checked === undefined) {
            this._checked = this._cell.row[this._cell.col.id];
        }
        var id = core_1.uid();
        return dom_1.el("div.dhx_checkbox.dhx_cell-editor__checkbox", [
            dom_1.el("label", {
                style: {
                    display: "none",
                },
                for: id,
            }, this._checked || "false"),
            dom_1.el("input.dhx_checkbox__input", {
                type: "checkbox",
                _hooks: {
                    didInsert: this._handlers.didInsert,
                },
                _key: "cell_editor",
                dhx_id: "cell_editor",
                checked: this._checked,
                id: id,
                style: {
                    userSelect: "none",
                },
            }),
            dom_1.el("span.dhx_checkbox__visual-input"),
        ]);
    };
    CheckboxEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onClick: function () {
                var value = !_this._input.checked;
                if (_this._config.events.fire(types_1.GridEvents.beforeEditStart, [
                    _this._cell.row,
                    _this._cell.col,
                    "checkbox",
                ])) {
                    _this._checked = value;
                    _this._config.events.fire(types_1.GridEvents.afterEditStart, [
                        _this._cell.row,
                        _this._cell.col,
                        "checkbox",
                    ]);
                    _this.endEdit();
                }
                else {
                    _this._input.checked = !value;
                }
            },
            didInsert: function (node) {
                _this._checkbox = node.el.parentNode.lastChild;
                _this._input = node.el.parentNode.querySelector("input");
                node.el.parentNode.addEventListener("click", _this._handlers.onClick);
            },
        };
    };
    return CheckboxEditor;
}());
exports.CheckboxEditor = CheckboxEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/ComboboxEditor.ts":
/*!*******************************************************!*\
  !*** ../ts-grid/sources/ui/editors/ComboboxEditor.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var ts_combobox_1 = __webpack_require__(/*! @dhx/ts-combobox */ "../ts-combobox/index.ts");
var FocusManager_1 = __webpack_require__(/*! @dhx/ts-common/FocusManager */ "../ts-common/FocusManager.ts");
var ComboboxEditor = /** @class */ (function () {
    function ComboboxEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    ComboboxEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            var val = this._input.getValue();
            value = this._cell.col.editorType === "multiselect" ? val.split(",").join(", ") : val;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.popup.hide();
            document.removeEventListener("mousedown", this._handlers.onOuterClick);
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            FocusManager_1.focusManager.setFocusId(this._config.gridId);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    ComboboxEditor.prototype.toHTML = function () {
        var _this = this;
        var content = this._cell.col.options.map(function (item) {
            return typeof item === "string" ? { id: "" + item, value: item } : item;
        }) || [];
        if (!this._input) {
            this._input = new ts_combobox_1.Combobox(null, {
                cellHeight: 37,
                css: "dhx_cell-editor__combobox",
                multiselection: this._cell.col.editorType === "multiselect",
            });
            this._input.data.parse(content);
            var comboValue = this._cell.row[this._cell.col.id];
            var value = this._cell.col.editorType === "multiselect" ? (comboValue || "").split(", ") : comboValue;
            this._input.setValue(value);
            this._input.events.on("keydown", this._handlers.onkeydown);
        }
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        this._config.$editable.editor = this;
        dom_1.awaitRedraw().then(function () {
            var holderNode = _this._input.getRootView().refs.holder.el;
            _this._input.popup.getContainer().style.width = holderNode.offsetWidth + "px";
            _this._input.popup.show(holderNode);
        });
        FocusManager_1.focusManager.setFocusId(this._input._uid);
        return dom_1.inject(this._input.getRootView());
    };
    ComboboxEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input &&
                        _this._input.getRootNode() &&
                        _this._input.getRootNode().contains(e.target);
                    var isPopup = _this._input.popup &&
                        _this._input.popup.getRootNode() &&
                        _this._input.popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this.endEdit();
                    }
                }
            },
            onkeydown: function (e) {
                if (e.key === "Escape" || e.key === "Tab") {
                    _this.endEdit();
                }
            },
        };
    };
    return ComboboxEditor;
}());
exports.ComboboxEditor = ComboboxEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/DateEditor.ts":
/*!***************************************************!*\
  !*** ../ts-grid/sources/ui/editors/DateEditor.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var ts_calendar_1 = __webpack_require__(/*! @dhx/ts-calendar */ "../ts-calendar/index.ts");
var date_1 = __webpack_require__(/*! @dhx/ts-common/date */ "../ts-common/date.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var DateEditor = /** @class */ (function () {
    function DateEditor(row, col, config) {
        var _this = this;
        this._config = config;
        this._cell = { row: row, col: col };
        this._calendar = new ts_calendar_1.Calendar(null, { dateFormat: col.format });
        var value = this._cell.row[this._cell.col.id];
        var format = this._calendar.config.dateFormat;
        if (date_1.stringToDate(value, format, true) || value instanceof Date) {
            this._calendar.setValue(value);
            this._value = this._calendar.getValue();
            this._cell.row[this._cell.col.id] = this._value;
        }
        this._popup = new ts_popup_1.Popup({ css: "dhx_widget--bordered" });
        this._popup.attach(this._calendar);
        this._calendar.events.on(ts_calendar_1.CalendarEvents.change, function () {
            _this.endEdit(false, true);
        });
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            _this.endEdit();
        });
        this._initHandlers();
    }
    DateEditor.prototype.endEdit = function (withoutSave, calendarChange) {
        var _this = this;
        if (!this._handlers) {
            return;
        }
        var format = this._calendar.config.dateFormat;
        var value = this._cell.row[this._cell.col.id];
        if (!withoutSave) {
            if (value instanceof Date || calendarChange) {
                this._value = this._calendar.getValue();
                this._input.value = this._value;
                this._popup.hide();
                return;
            }
            else if (date_1.stringToDate(this._input.value, format, true) &&
                ((value && this._input.value.length === value.length) || !value)) {
                this._value = this._input.value;
            }
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [this._value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("focus", this._handlers.onFocus);
            this._input.removeEventListener("change", this._handlers.onChange);
            document.removeEventListener("mousedown", this._handlers.onOuterClick);
            dom_1.awaitRedraw().then(function () {
                _this._popup.destructor();
                _this._calendar.destructor();
            });
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [this._value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    DateEditor.prototype.toHTML = function () {
        var value = this._cell.row[this._cell.col.id];
        this._config.$editable.editor = this;
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        return dom_1.el("input.dhx_cell-editor.dhx_cell-editor__input.dhx_cell-editor__datepicker", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            dhx_id: "cell_editor",
            value: value,
        });
    };
    DateEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onFocus: function () {
                dom_1.awaitRedraw().then(function () {
                    _this._popup.show(_this._input, {
                        centering: true,
                        mode: "bottom",
                    });
                });
            },
            onChange: function () {
                _this.endEdit();
            },
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input && _this._input.contains(e.target);
                    var isPopup = _this._popup &&
                        _this._popup.getRootNode() &&
                        _this._popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this._popup.hide();
                    }
                }
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                _this._input.addEventListener("focus", _this._handlers.onFocus);
                _this._input.addEventListener("change", _this._handlers.onChange);
                input.focus();
                input.setSelectionRange(input.value.length, input.value.length);
            },
        };
    };
    return DateEditor;
}());
exports.DateEditor = DateEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/InputEditor.ts":
/*!****************************************************!*\
  !*** ../ts-grid/sources/ui/editors/InputEditor.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var InputEditor = /** @class */ (function () {
    function InputEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            value = this._input.value;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("blur", this._handlers.onBlur);
            this._input.removeEventListener("change", this._handlers.onChange);
            if (this._cell.col.type !== "string" && core_1.isNumeric(value)) {
                value = parseFloat(value);
            }
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    InputEditor.prototype.toHTML = function () {
        var content = this._cell.row[this._cell.col.id];
        if (this._input) {
            content = this._input.value;
        }
        this._config.$editable.editor = this;
        return dom_1.el("input.dhx_cell-editor.dhx_cell-editor__input", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            dhx_id: "cell_editor",
            value: content,
        });
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.setSelectionRange(0, input.value.length);
                input.addEventListener("change", _this._handlers.onChange);
                input.addEventListener("blur", _this._handlers.onBlur);
            },
        };
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/SelectEditor.ts":
/*!*****************************************************!*\
  !*** ../ts-grid/sources/ui/editors/SelectEditor.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var SelectEditor = /** @class */ (function () {
    function SelectEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    SelectEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            value = this._input.value;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("blur", this._handlers.onBlur);
            this._input.removeEventListener("keydown", this._handlers.onkeydown);
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    SelectEditor.prototype.toHTML = function () {
        var content = this._cell.col.options || [];
        var selected = this._cell.row[this._cell.col.id];
        if (this._input) {
            selected = this._input.options[this._input.selectedIndex].value;
        }
        var options = content.map(function (item) {
            return dom_1.el("option", {
                selected: item === selected,
            }, item);
        });
        this._config.$editable.editor = this;
        return dom_1.el("select.dhx_cell-editor.dhx_cell-editor__select", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            dhx_id: "cell_editor",
        }, options);
    };
    SelectEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onkeydown: function (e) {
                if (e.key === "Escape") {
                    _this.endEdit();
                }
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.addEventListener("blur", _this._handlers.onBlur);
                input.addEventListener("keydown", _this._handlers.onkeydown);
            },
        };
    };
    return SelectEditor;
}());
exports.SelectEditor = SelectEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/TextAreaEditor.ts":
/*!*******************************************************!*\
  !*** ../ts-grid/sources/ui/editors/TextAreaEditor.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var data_1 = __webpack_require__(/*! ../../helpers/data */ "../ts-grid/sources/helpers/data.ts");
var TextAreaEditor = /** @class */ (function () {
    function TextAreaEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._width = this._cell.col.$width;
        var widthOffset = 0;
        if (this._config.firstColId === this._cell.col.id && this._cell.row.hasOwnProperty("$level")) {
            widthOffset = data_1.getTreeCellWidthOffset(this._cell.row);
        }
        this._width -= widthOffset - 4;
        this._initHandlers();
    }
    TextAreaEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            value = this._editor.value;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._editor.removeEventListener("blur", this._handlers.onBlur);
            this._editor.removeEventListener("change", this._handlers.onChange);
            this._editor.removeEventListener("input", this._handlers.onInput);
            if (this._cell.col.type !== "string" && core_1.isNumeric(value)) {
                value = parseFloat(value);
            }
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._editor.focus();
        }
    };
    TextAreaEditor.prototype.toHTML = function () {
        var value = this._cell.row[this._cell.col.id];
        if (this._editor) {
            value = this._editor.value;
        }
        this._config.$editable.editor = this;
        var css = typeof this._cell.row.height === "undefined" && !this._cell.col.htmlEnable
            ? "dhx_cell-editor dhx_cell-editor__textarea"
            : "dhx_cell-editor dhx_cell-editor__textarea_constant-height";
        return dom_1.el("textarea", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _ref: "textarea",
            _key: "cell_editor",
            dhx_id: "cell_editor",
            value: value,
            class: css,
            style: {
                width: this._width,
            },
        });
    };
    TextAreaEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            onInput: function (event) {
                var _a;
                if (typeof _this._cell.row.height !== "undefined" || _this._cell.col.htmlEnable)
                    return;
                var currentHeight = _this._getCurrentHeight(_this._editor.value, {
                    width: _this._cell.col.$width - 2,
                    maxHeight: _this._config.rowHeight,
                });
                _this._cell.row[_this._cell.col.id] = _this._editor.value;
                var totalHeight = data_1.getCalculatedRowHeight(data_1.getMaxRowHeight(_this._cell.row, _this._config.columns));
                var currentRowHeight = data_1.getCalculatedRowHeight(data_1.getMaxRowHeight((_a = {}, _a[_this._cell.col.id] = _this._cell.row[_this._cell.col.id], _a), _this._config.columns));
                _this._minHeight = totalHeight === currentRowHeight ? _this._config.rowHeight : totalHeight;
                if (currentHeight >= _this._minHeight && currentHeight !== _this._prevHeight) {
                    if (!_this._config.events.fire(types_1.GridEvents.beforeRowResize, [
                        _this._cell.row,
                        event,
                        currentHeight,
                    ])) {
                        return;
                    }
                    _this._config.events.fire(types_1.GridEvents.afterRowResize, [
                        _this._cell.row,
                        event,
                        currentHeight,
                    ]);
                }
                _this._prevHeight = currentHeight;
            },
            didInsert: function (node) {
                _this._editor = node.el;
                _this._editor.focus();
                _this._editor.setSelectionRange(0, _this._editor.value.length);
                _this._editor.addEventListener("change", _this._handlers.onChange);
                _this._editor.addEventListener("blur", _this._handlers.onBlur);
                _this._editor.addEventListener("input", _this._handlers.onInput);
            },
        };
    };
    TextAreaEditor.prototype._getCurrentHeight = function (value, config) {
        config = __assign({ width: 100, maxHeight: 40, lineHeight: 20 }, config);
        var element = document.createElement("textarea");
        element.className = "dhx_cell-editor dhx_cell-editor__textarea";
        element.value = value;
        element.style.width = config.width + "px";
        element.style.lineHeight = config.lineHeight + "px";
        element.style.maxHeight = config.maxHeight + "px";
        element.style.boxSizing = "border-box";
        document.body.appendChild(element);
        var height = this._getElementHeight(element);
        var currentRows = element.value.split("\n").length;
        var calculateRows = Math.round(height / config.lineHeight);
        var calculateHeight = height < config.maxHeight ? config.maxHeight : height;
        document.body.removeChild(element);
        return currentRows === 1 && currentRows === calculateRows ? config.maxHeight : calculateHeight;
    };
    TextAreaEditor.prototype._getElementHeight = function (element) {
        return element.scrollHeight;
    };
    return TextAreaEditor;
}());
exports.TextAreaEditor = TextAreaEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/editors.ts":
/*!************************************************!*\
  !*** ../ts-grid/sources/ui/editors/editors.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var InputEditor_1 = __webpack_require__(/*! ./InputEditor */ "../ts-grid/sources/ui/editors/InputEditor.ts");
var SelectEditor_1 = __webpack_require__(/*! ./SelectEditor */ "../ts-grid/sources/ui/editors/SelectEditor.ts");
var DateEditor_1 = __webpack_require__(/*! ./DateEditor */ "../ts-grid/sources/ui/editors/DateEditor.ts");
var CheckboxEditor_1 = __webpack_require__(/*! ./CheckboxEditor */ "../ts-grid/sources/ui/editors/CheckboxEditor.ts");
var ComboboxEditor_1 = __webpack_require__(/*! ./ComboboxEditor */ "../ts-grid/sources/ui/editors/ComboboxEditor.ts");
var TextAreaEditor_1 = __webpack_require__(/*! ./TextAreaEditor */ "../ts-grid/sources/ui/editors/TextAreaEditor.ts");
var lastEditor = {
    cell: {
        row: null,
        col: null,
    },
    editor: null,
    gridId: null,
};
var editHandler;
function getEditor(row, col, conf) {
    var type = col.type === "boolean" ? "checkbox" : conf.$editable.editorType;
    if (typeof type === "undefined")
        type = conf.autoHeight ? "textarea" : "input";
    if (lastEditor.cell.row === row.id &&
        lastEditor.cell.col === col.id &&
        lastEditor.gridId === conf.gridId &&
        conf.$editable.editor) {
        return lastEditor.editor;
    }
    if (type !== "checkbox") {
        lastEditor = {
            cell: {
                row: row.id,
                col: col.id,
            },
            editor: lastEditor.editor,
            gridId: conf.gridId,
        };
    }
    if (!editHandler) {
        editHandler = function () {
            lastEditor = {
                cell: {
                    row: null,
                    col: null,
                },
                editor: null,
                gridId: null,
            };
        };
        conf.events.on(types_1.GridEvents.afterEditEnd, editHandler);
    }
    switch (type) {
        case "input":
            return (lastEditor.editor = new InputEditor_1.InputEditor(row, col, conf));
        case "textarea":
            return (lastEditor.editor = new TextAreaEditor_1.TextAreaEditor(row, col, conf));
        case "select":
            return (lastEditor.editor = new SelectEditor_1.SelectEditor(row, col, conf));
        case "datePicker":
            return (lastEditor.editor = new DateEditor_1.DateEditor(row, col, conf));
        case "checkbox":
            return new CheckboxEditor_1.CheckboxEditor(row, col, conf);
        case "multiselect":
        case "combobox":
            return (lastEditor.editor = new ComboboxEditor_1.ComboboxEditor(row, col, conf));
        default:
            return (lastEditor.editor = new InputEditor_1.InputEditor(row, col, conf));
    }
}
exports.getEditor = getEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/render.ts":
/*!***************************************!*\
  !*** ../ts-grid/sources/ui/render.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var data_1 = __webpack_require__(/*! ../helpers/data */ "../ts-grid/sources/helpers/data.ts");
var main_1 = __webpack_require__(/*! ../helpers/main */ "../ts-grid/sources/helpers/main.ts");
var Cells_1 = __webpack_require__(/*! ./Cells */ "../ts-grid/sources/ui/Cells.ts");
var FixedCols_1 = __webpack_require__(/*! ./FixedCols */ "../ts-grid/sources/ui/FixedCols.ts");
var FixedRows_1 = __webpack_require__(/*! ./FixedRows */ "../ts-grid/sources/ui/FixedRows.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var BORDERS = 2;
function getRenderConfig(obj, data, wrapperSizes) {
    var config = obj.config;
    var columns = config.columns.filter(function (col) { return !col.hidden; });
    var positions = data_1.calculatePositions(wrapperSizes.width, wrapperSizes.height, obj._scroll, config, data);
    var currentColumns = columns.slice(positions.xStart, positions.xEnd);
    var currentRows = data.slice(positions.yStart, positions.yEnd);
    return __assign(__assign({}, config), { data: data,
        columns: columns, scroll: obj._scroll, $positions: positions, headerHeight: config.$headerLevel * config.headerRowHeight, footerHeight: config.$footerLevel * config.footerRowHeight, firstColId: columns[0] && columns[0].id, events: obj.events, _events: obj._events, currentColumns: currentColumns,
        currentRows: currentRows, sortBy: obj._sortBy, sortDir: obj._sortDir, content: obj.content, gridId: obj._uid });
}
exports.getRenderConfig = getRenderConfig;
function getElementSizes(element) {
    if (!element)
        return;
    if (!element.tagName)
        element = element._parent._container;
    if (!element)
        return;
    var styles = element.currentStyle || window.getComputedStyle(element);
    var paddingsByWidth = parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight) || 0;
    var paddingsByHeight = parseFloat(styles.paddingTop) + parseFloat(styles.paddingBottom) || 0;
    return {
        width: element.clientWidth - paddingsByWidth,
        height: element.clientHeight - paddingsByHeight,
    };
}
function getGridData(renderConfig, shifts) {
    var content = Cells_1.getCells(renderConfig);
    var contentSpans = Cells_1.getSpans(renderConfig);
    var getRowAriaAttrs = function (count) { return ({
        role: "rowgroup",
        "aria-rowcount": count,
    }); };
    var resizedLine;
    var colums = renderConfig.columns;
    if (renderConfig.$resizing) {
        var colIndex = core_1.findIndex(colums, function (col) { return col.id === renderConfig.$resizing; });
        var firstCellLeft = main_1.getTotalWidth(colums.slice(0, colIndex)) + colums[colIndex].$width;
        resizedLine = dom_1.el(".dhx_grid-resize-line", {
            style: {
                top: 0,
                left: firstCellLeft,
                height: renderConfig.$totalHeight,
            },
        });
    }
    var selection = renderConfig.selection ? renderConfig.selection.toHTML() : null;
    selection =
        typeof selection === "string" ? dom_1.el("div.dhx_selection", { ".innerHTML": selection }) : selection;
    var pos = renderConfig.$positions;
    var events = {};
    function getCellInfo(e) {
        var rowId = html_1.locate(e, "dhx_id");
        var colId = html_1.locate(e, "dhx_col_id");
        var row = renderConfig.currentRows.filter(function (item) { return item.id === rowId; })[0];
        var col = renderConfig.currentColumns.filter(function (item) { return item.id === colId; })[0];
        return {
            row: rowId ? row : {},
            col: colId ? col : {},
        };
    }
    if (renderConfig.eventHandlers) {
        for (var key in renderConfig.eventHandlers) {
            if (renderConfig.eventHandlers.hasOwnProperty(key)) {
                var event_1 = renderConfig.eventHandlers[key];
                events[key] = html_1.eventHandler(function (e) { return getCellInfo(e); }, __assign({}, event_1));
            }
        }
    }
    return dom_1.el(".dhx_data-wrap", __assign({ style: {
            height: renderConfig.$totalHeight,
            width: renderConfig.$totalWidth,
            "padding-left": shifts.x,
            "padding-top": shifts.y,
        }, role: "presentation" }, events), [
        dom_1.el(".dhx_grid_data", __assign(__assign({ _flags: dom_1.KEYED_LIST }, Cells_1.getHandlers(pos.yStart, pos.xStart, renderConfig)), getRowAriaAttrs(renderConfig.data.length)), content),
        dom_1.el(".dhx_span-spans", { role: "presentation" }, contentSpans),
        dom_1.el(".dhx_grid_selection", { _ref: "selection", "aria-hidden": "true" }, [selection, resizedLine]),
    ]);
}
function getContentHeight(renderConfig, isSticky, wrapperSizes) {
    var contentHeight = wrapperSizes.height - BORDERS;
    contentHeight = isSticky ? contentHeight : contentHeight - renderConfig.headerHeight;
    var isFooter = renderConfig.$footer;
    return (contentHeight = isFooter
        ? isSticky
            ? contentHeight
            : contentHeight - renderConfig.footerHeight
        : contentHeight);
}
function applyAutoWidth(config, wrapperSizes, firstApply, resizer, scrollViewConfig) {
    if (firstApply === void 0) { firstApply = true; }
    if (resizer === void 0) { resizer = false; }
    if (scrollViewConfig === void 0) { scrollViewConfig = false; }
    var scrollbarY = !scrollViewConfig && config.$totalHeight >= wrapperSizes.height - config.headerRowHeight
        ? html_1.getScrollbarWidth()
        : 0;
    var newTotalWidth = wrapperSizes.width - BORDERS - scrollbarY;
    var columns = config.columns.filter(function (col) { return !col.hidden; });
    var growingColumns = columns.filter(function (col) { return !col.width && !col.$fixed && main_1.isAutoWidth(config, col); });
    var nonGrowingColumnsWidth = main_1.getTotalWidth(columns.filter(function (col) { return col.width || col.$fixed || !main_1.isAutoWidth(config, col); }));
    var fullGravity = growingColumns.reduce(function (gravity, col) { return gravity + (col.gravity || 1); }, 0);
    if (newTotalWidth < config.$totalWidth) {
        var growingColumnsWidth_1 = growingColumns.reduce(function (width, col) { return width + (col.maxWidth || col.$width); }, 0);
        if (growingColumns.length > 1) {
            growingColumns.forEach(function (col) {
                var newWidth = 0;
                if (firstApply) {
                    newWidth =
                        Math.abs(newTotalWidth - growingColumnsWidth_1) * ((col.gravity || 1) / fullGravity);
                }
                else {
                    newWidth =
                        Math.abs(newTotalWidth - nonGrowingColumnsWidth) * ((col.gravity || 1) / fullGravity);
                }
                var wrongMin = newWidth < col.minWidth;
                var wrongMax = newWidth > col.maxWidth;
                if (!wrongMin && !wrongMax) {
                    col.$width = newWidth;
                }
                else if (wrongMin) {
                    nonGrowingColumnsWidth += col.$width - newWidth;
                    col.$fixed = true;
                }
                else if (wrongMax) {
                    col.$width = col.maxWidth;
                    col.$fixed = true;
                }
            });
        }
    }
    else {
        growingColumns.forEach(function (col) {
            var newWidth = Math.abs(newTotalWidth - nonGrowingColumnsWidth) * ((col.gravity || 1) / fullGravity);
            var wrongMin = newWidth < col.minWidth;
            var wrongMax = newWidth > col.maxWidth;
            if (!wrongMin && !wrongMax) {
                col.$width = newWidth;
            }
            else if (wrongMin) {
                nonGrowingColumnsWidth += col.$width - newWidth;
                if (resizer)
                    col.$fixed = true;
            }
            else if (wrongMax) {
                col.$width = col.maxWidth;
                if (resizer)
                    col.$fixed = true;
            }
            if (!firstApply && col.$fixed) {
                delete col.$fixed;
            }
        });
    }
    if (firstApply) {
        applyAutoWidth(config, wrapperSizes, false, resizer, scrollViewConfig);
    }
}
function render(vm, obj, htmlEvents, selection, uid) {
    if (!obj._container) {
        obj.config.width = 1;
        obj.config.height = 1;
    }
    // if grid placed inside another component, it will fit to its container
    if (vm && vm.node && vm.node.parent && vm.node.parent.el) {
        var parentNode = vm.node.parent.el;
        var parentSizes = getElementSizes(parentNode);
        obj.config.width = parentSizes.width;
        obj.config.height = parentSizes.height;
    }
    var config = obj.config;
    // when grid is destructing and user try to repaint it
    if (!config) {
        return dom_1.el("div");
    }
    if (!config.columns.length) {
        return dom_1.el(".dhx_grid", {
            dhx_root_id: config.rootParent,
        });
    }
    var data = obj.data.getRawData(0, -1, null, 2);
    if (config.columns.reduce(function (check, col) { return (check = !col.hidden ? col.hidden : check); }, true)) {
        config.$totalHeight = 0;
    }
    else {
        config.$totalHeight = data.reduce(function (total, _a) {
            var $height = _a.$height;
            return (total += $height || 0);
        }, 0);
    }
    var sizes = getElementSizes(obj._container);
    var wrapperSizes = {
        width: (config.width ? config.width : sizes && sizes.width) || 0,
        height: (config.height ? config.height : sizes && sizes.height) || 0,
    };
    // TODO: Remove scroll
    if (main_1.isAutoWidth(config)) {
        applyAutoWidth(config, wrapperSizes);
        config.$totalWidth = main_1.getTotalWidth(config.columns.filter(function (col) { return !col.hidden; }));
    }
    config.width = wrapperSizes.width;
    config.height = wrapperSizes.height;
    var renderConfig = getRenderConfig(obj, data, wrapperSizes);
    renderConfig.selection = selection;
    renderConfig.datacollection = obj.data;
    var shifts = Cells_1.getShifts(renderConfig);
    var isSticky = main_1.isCssSupport("position", "sticky");
    var gridBodyHeight = getContentHeight(renderConfig, isSticky, wrapperSizes);
    var layoutState = {
        wrapper: wrapperSizes,
        sticky: isSticky,
        shifts: shifts,
        gridBodyHeight: gridBodyHeight,
    };
    var header = FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "header", position: "top" }));
    var footer = renderConfig.$footer
        ? FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "footer", position: "bottom" }))
        : null;
    var lessByWidth = renderConfig.$totalWidth + BORDERS < wrapperSizes.width ? "dhx_grid-less-width" : "";
    var lessByHeight = renderConfig.$totalHeight + BORDERS < wrapperSizes.height ? "dhx_grid-less-height" : "";
    var getGridAriaAttrs = function (rows, cols, isEditable, isMultiselectable) { return ({
        role: "grid",
        "aria-rowcount": rows.length,
        "aria-colcount": cols.filter(function (col) { return !col.hidden; }).length,
        "aria-readonly": isEditable ? "false" : "true",
        "aria-multiselectable": isMultiselectable ? "true" : "false",
    }); };
    // dirty: but work. Change checking of rendering Grid
    if (!vm.node) {
        var _a = obj.getScrollState(), x_1 = _a.x, y_1 = _a.y;
        dom_1.awaitRedraw().then(function () {
            obj.scroll(x_1, y_1);
        });
    }
    return dom_1.el(".dhx_grid.dhx_widget", __assign({ class: (renderConfig.css || "") +
            (!isSticky ? " dhx_grid_border" : "") +
            (config.multiselection ? " dhx_no-select--pointer" : ""), dhx_widget_id: uid, dhx_root_id: config.rootParent }, getGridAriaAttrs(renderConfig.data, config.columns, renderConfig.editable, renderConfig.multiselection)), [
        dom_1.resizer(function (changeWith) {
            if (main_1.isAutoWidth(obj.config) && !!changeWith) {
                config.$totalWidth = 0;
                applyAutoWidth(config, wrapperSizes, true, true);
            }
            return obj.paint();
        }),
        dom_1.el(".dhx_grid-content", {
            style: __assign({}, wrapperSizes),
            onclick: htmlEvents.onclick,
            onmouseover: htmlEvents.onmouseover,
            class: (lessByWidth + " " + lessByHeight).trim(),
            role: "presentation",
        }, [
            isSticky ? null : header,
            dom_1.el(".dhx_grid-body", {
                style: {
                    height: gridBodyHeight,
                    width: wrapperSizes.width - BORDERS,
                },
                onscroll: htmlEvents.onscroll,
                _ref: "grid_body",
                role: "presentation",
            }, [
                dom_1.el("div", {}, [
                    isSticky ? header : null,
                    getGridData(renderConfig, shifts),
                    isSticky ? footer : null,
                ]),
            ]),
            FixedCols_1.getFixedColsHeader(renderConfig, layoutState),
            FixedCols_1.getFixedCols(renderConfig, layoutState),
            isSticky ? null : footer,
        ]),
    ]);
}
exports.render = render;
function proRender(vm, obj, htmlEvents, selection, uid) {
    if (!obj._container) {
        obj.config.width = 1;
        obj.config.height = 1;
    }
    // if grid placed inside another component, it will fit to its container
    if (vm && vm.node && vm.node.parent && vm.node.parent.el) {
        var parentNode = vm.node.parent.el;
        var parentSizes = getElementSizes(parentNode);
        obj.config.width = parentSizes.width;
        obj.config.height = parentSizes.height;
    }
    var config = obj.config;
    // when grid is destructing and user try to repaint it
    if (!config) {
        return dom_1.el("div");
    }
    if (!config.columns.length) {
        return dom_1.el(".dhx_grid", {
            dhx_root_id: config.rootParent,
        });
    }
    var data = obj.data.getRawData(0, -1, null, 2);
    if (config.columns.reduce(function (check, col) { return (check = !col.hidden ? col.hidden : check); }, true)) {
        config.$totalHeight = 0;
    }
    else {
        config.$totalHeight = data.reduce(function (total, _a) {
            var $height = _a.$height;
            return (total += $height || 0);
        }, 0);
    }
    var sizes = getElementSizes(obj._container);
    var wrapperSizes = {
        width: (config.width ? config.width : sizes && sizes.width) || 0,
        height: (config.height ? config.height : sizes && sizes.height) || 0,
    };
    // TODO: Remove scroll
    if (main_1.isAutoWidth(config)) {
        applyAutoWidth(config, wrapperSizes, true, false, obj.scrollView && obj.scrollView.config.enable);
        config.$totalWidth = main_1.getTotalWidth(config.columns.filter(function (col) { return !col.hidden; }));
    }
    config.width = wrapperSizes.width;
    config.height = wrapperSizes.height;
    var renderConfig = getRenderConfig(obj, data, wrapperSizes);
    renderConfig.selection = selection;
    renderConfig.datacollection = obj.data;
    var shifts = Cells_1.getShifts(renderConfig);
    var isSticky = main_1.isCssSupport("position", "sticky");
    var gridBodyHeight = getContentHeight(renderConfig, isSticky, wrapperSizes);
    var layoutState = {
        wrapper: wrapperSizes,
        sticky: isSticky,
        shifts: shifts,
        gridBodyHeight: gridBodyHeight,
    };
    var header = FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "header", position: "top" }));
    var footer = renderConfig.$footer
        ? FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "footer", position: "bottom" }))
        : null;
    var lessByWidth = renderConfig.$totalWidth + BORDERS < wrapperSizes.width ? "dhx_grid-less-width" : "";
    var lessByHeight = renderConfig.$totalHeight + BORDERS < wrapperSizes.height ? "dhx_grid-less-height" : "";
    // dirty: but work. Change checking of rendering Grid
    if (!vm.node) {
        var _a = obj.getScrollState(), x_2 = _a.x, y_2 = _a.y;
        dom_1.awaitRedraw().then(function () {
            obj.scroll(x_2, y_2);
        });
    }
    var gridContent = dom_1.el("div", {}, [
        isSticky ? header : null,
        getGridData(renderConfig, shifts),
        isSticky ? footer : null,
    ]);
    return dom_1.el(".dhx_grid.dhx_widget", {
        class: (renderConfig.css || "") +
            (!isSticky ? " dhx_grid_border" : "") +
            (config.multiselection ? " dhx_no-select--pointer" : ""),
        dhx_widget_id: uid,
        dhx_root_id: config.rootParent,
        role: "grid",
        "aria-rowcount": renderConfig.data.length,
        "aria-colcount": config.columns.filter(function (col) { return !col.hidden; }).length,
    }, [
        dom_1.resizer(function (changeWith) {
            if (main_1.isAutoWidth(obj.config) && !!changeWith) {
                config.$totalWidth = 0;
                applyAutoWidth(config, wrapperSizes, true, true);
            }
            return obj.paint();
        }),
        dom_1.el(".dhx_grid-content", {
            style: __assign({}, wrapperSizes),
            onclick: htmlEvents.onclick,
            onmouseover: htmlEvents.onmouseover,
            class: (lessByWidth + " " + lessByHeight).trim(),
            role: "presentation",
        }, [
            isSticky ? null : header,
            dom_1.el(".dhx_grid-body", {
                style: {
                    height: gridBodyHeight,
                    width: wrapperSizes.width - BORDERS,
                },
                onscroll: htmlEvents.onscroll,
                _ref: "grid_body",
                role: "presentation",
            }, [
                obj.scrollView && obj.scrollView.config.enable
                    ? obj.scrollView.render([gridContent])
                    : gridContent,
            ]),
            FixedCols_1.getFixedColsHeader(renderConfig, layoutState),
            FixedCols_1.getFixedCols(renderConfig, layoutState),
            isSticky ? null : footer,
        ]),
    ]);
}
exports.proRender = proRender;


/***/ }),

/***/ "../ts-layout/index.ts":
/*!*****************************!*\
  !*** ../ts-layout/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Layout */ "../ts-layout/sources/Layout.ts"));
__export(__webpack_require__(/*! ./sources/ProLayout */ "../ts-layout/sources/ProLayout.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-layout/sources/types.ts"));


/***/ }),

/***/ "../ts-layout/sources/Cell.ts":
/*!************************************!*\
  !*** ../ts-layout/sources/Cell.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-layout/sources/types.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-layout/sources/helpers.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var Cell = /** @class */ (function (_super) {
    __extends(Cell, _super);
    function Cell(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        _this._disabled = [];
        var p = parent;
        if (p && p.isVisible) {
            _this._parent = p;
        }
        if (_this._parent && _this._parent.events) {
            _this.events = _this._parent.events;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
        }
        _this.config.full =
            _this.config.full === undefined
                ? Boolean(_this.config.header ||
                    _this.config.collapsable ||
                    _this.config.headerHeight ||
                    _this.config.headerIcon ||
                    _this.config.headerImage)
                : _this.config.full;
        _this._initHandlers();
        _this.id = _this.config.id || core_1.uid();
        return _this;
    }
    Cell.prototype.paint = function () {
        if (this.isVisible()) {
            var view = this.getRootView();
            if (view) {
                view.redraw();
            }
            else {
                this._parent.paint();
            }
        }
    };
    Cell.prototype.isVisible = function () {
        // top level node
        if (!this._parent) {
            if (this._container && this._container.tagName) {
                return true;
            }
            return Boolean(this.getRootNode());
        }
        // check active view in case of multiview
        var active = this._parent.config.activeView;
        if (active && active !== this.id) {
            return false;
        }
        // check that all parents of the cell are visible as well
        return !this.config.hidden && (!this._parent || this._parent.isVisible());
    };
    Cell.prototype.hide = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeHide, [this.id])) {
            return;
        }
        this.config.hidden = true;
        if (this._parent && this._parent.paint) {
            this._parent.paint();
        }
        this.events.fire(types_1.LayoutEvents.afterHide, [this.id]);
    };
    Cell.prototype.show = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeShow, [this.id])) {
            return;
        }
        if (this._parent && this._parent.config && this._parent.config.activeView !== undefined) {
            this._parent.config.activeView = this.id;
        }
        else {
            this.config.hidden = false;
        }
        if (this._parent && !this._parent.isVisible()) {
            this._parent.show();
        }
        this.paint();
        this.events.fire(types_1.LayoutEvents.afterShow, [this.id]);
    };
    Cell.prototype.expand = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeExpand, [this.id])) {
            return;
        }
        this.config.collapsed = false;
        this.events.fire(types_1.LayoutEvents.afterExpand, [this.id]);
        this.paint();
    };
    Cell.prototype.collapse = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeCollapse, [this.id])) {
            return;
        }
        this.config.collapsed = true;
        this.events.fire(types_1.LayoutEvents.afterCollapse, [this.id]);
        this.paint();
    };
    Cell.prototype.toggle = function () {
        if (this.config.collapsed) {
            this.expand();
        }
        else {
            this.collapse();
        }
    };
    Cell.prototype.getParent = function () {
        return this._parent;
    };
    Cell.prototype.destructor = function () {
        this.events && this.events.clear();
        this.config = this.events = this.id = null;
        this._parent = this._handlers = this._uid = this._disabled = this._resizerHandlers = null;
        this.unmount();
    };
    Cell.prototype.getWidget = function () {
        return this._ui;
    };
    Cell.prototype.getCellView = function () {
        return this._parent && this._parent.getRefs(this._uid);
    };
    Cell.prototype.attach = function (name, config) {
        this.config.html = null;
        if (typeof name === "object") {
            this._ui = name;
        }
        else if (typeof name === "string") {
            this._ui = new window.dhx[name](null, config);
        }
        else if (typeof name === "function") {
            if (name.prototype instanceof view_1.View) {
                this._ui = new name(null, config);
            }
            else {
                this._ui = {
                    getRootView: function () {
                        return name(config);
                    },
                };
            }
        }
        this.paint();
        return this._ui;
    };
    Cell.prototype.attachHTML = function (html) {
        this.config.html = html;
        this.paint();
    };
    Cell.prototype.toVDOM = function (nodes) {
        var _a;
        if (this.config === null) {
            this.config = {};
        }
        if (this.config.hidden) {
            return;
        }
        var style = this._calculateStyle();
        var stylePadding = core_1.isDefined(this.config.padding)
            ? !isNaN(Number(this.config.padding))
                ? { padding: this.config.padding + "px" }
                : { padding: this.config.padding }
            : "";
        var fullStyle = this.config.full || this.config.html ? style : __assign(__assign({}, style), stylePadding);
        var kids;
        if (!this.config.html) {
            if (this._ui) {
                var view = this._ui.getRootView();
                if (view.render) {
                    view = dom_1.inject(view);
                }
                kids = [view];
            }
            else {
                kids = nodes || null;
            }
        }
        var resizer = this.config.resizable && !this._isLastCell() && !this.config.collapsed
            ? dom_1.el(".dhx_layout-resizer." +
                (this._isXDirection() ? "dhx_layout-resizer--x" : "dhx_layout-resizer--y"), __assign(__assign({}, this._resizerHandlers), { _ref: "resizer_" + this._uid, tabindex: 0 }), [
                dom_1.el("span.dhx_layout-resizer__icon", {
                    class: "dxi " +
                        (this._isXDirection() ? "dxi-dots-vertical" : "dxi-dots-horizontal"),
                }),
            ])
            : null;
        var handlers = {};
        if (this.config.on) {
            for (var key in this.config.on) {
                handlers["on" + key] = this.config.on[key];
            }
        }
        var typeClass = "";
        var isParent = this.config.cols || this.config.rows;
        if (this.config.type && isParent) {
            switch (this.config.type) {
                case "line":
                    typeClass = " dhx_layout-line";
                    break;
                case "wide":
                    typeClass = " dhx_layout-wide";
                    break;
                case "space":
                    typeClass = " dhx_layout-space";
                    break;
                default:
                    break;
            }
        }
        var cell = dom_1.el("div", __assign(__assign((_a = { _key: this._uid, _ref: this._uid }, _a["aria-label"] = this.config.id ? "tab-content-" + this.config.id : null, _a), handlers), { class: this._getCss(false) +
                (this.config.css ? " " + this.config.css : "") +
                (this.config.collapsed ? " dhx_layout-cell--collapsed" : "") +
                (this.config.resizable ? " dhx_layout-cell--resizable" : "") +
                (this.config.type && !this.config.full ? typeClass : ""), style: fullStyle }), this.config.full
            ? [
                dom_1.el("div", {
                    tabindex: this.config.collapsable ? "0" : "-1",
                    role: this.config.collapsable ? "button" : null,
                    "aria-label": this.config.collapsable
                        ? "click to " + (this.config.collapsed ? "expand" : "collapse")
                        : null,
                    class: "dhx_layout-cell-header" +
                        (this._isXDirection()
                            ? " dhx_layout-cell-header--col"
                            : " dhx_layout-cell-header--row") +
                        (this.config.collapsable ? " dhx_layout-cell-header--collapseble" : "") +
                        (this.config.collapsed ? " dhx_layout-cell-header--collapsed" : "") +
                        (((this.getParent() || {}).config || {}).isAccordion
                            ? " dhx_layout-cell-header--accordion"
                            : ""),
                    style: {
                        height: this.config.headerHeight,
                    },
                    onclick: this._handlers.toggle,
                    onkeydown: this._handlers.enterCollapse,
                }, [
                    this.config.headerIcon &&
                        dom_1.el("span.dhx_layout-cell-header__icon", {
                            class: this.config.headerIcon,
                        }),
                    this.config.headerImage &&
                        dom_1.el(".dhx_layout-cell-header__image-wrapper", [
                            dom_1.el("img", {
                                src: this.config.headerImage,
                                class: "dhx_layout-cell-header__image",
                            }),
                        ]),
                    this.config.header &&
                        dom_1.el("h3.dhx_layout-cell-header__title", this.config.header),
                    this.config.collapsable
                        ? dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: this._getCollapseIcon(),
                        })
                        : dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: "dxi dxi-empty",
                        }),
                ]),
                !this.config.collapsed
                    ? dom_1.el("div", {
                        style: __assign(__assign({}, stylePadding), { height: "calc(100% - " + (this.config.headerHeight || 37) + "px)" }),
                        ".innerHTML": this.config.html,
                        class: this._getCss(true) +
                            " dhx_layout-cell-content" +
                            (this.config.type ? typeClass : ""),
                    }, kids)
                    : null,
            ]
            : this.config.html &&
                !(this.config.rows &&
                    this.config.cols &&
                    this.config.views)
                ? [
                    !this.config.collapsed
                        ? dom_1.el(".dhx_layout-cell-content", {
                            ".innerHTML": this.config.html,
                            style: stylePadding,
                        })
                        : null,
                ]
                : kids);
        return resizer ? [cell, resizer] : cell;
    };
    Cell.prototype._getCss = function (_content) {
        return "dhx_layout-cell";
    };
    Cell.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            enterCollapse: function (e) {
                if (e.keyCode === 13) {
                    _this._handlers.toggle();
                }
            },
            collapse: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.collapse();
            },
            expand: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.expand();
            },
            toggle: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.toggle();
            },
        };
        var blockOpts = {
            left: null,
            top: null,
            isActive: false,
            range: null,
            xLayout: null,
            nextCell: null,
            size: null,
            resizerLength: null,
            margin: null,
        };
        var resizeMove = function (event) {
            if (!blockOpts.isActive) {
                return;
            }
            var clientX = event.targetTouches ? event.targetTouches[0].clientX : event.clientX;
            var clientY = event.targetTouches ? event.targetTouches[0].clientY : event.clientY;
            var newValue = blockOpts.xLayout
                ? clientX - blockOpts.range.min + window.pageXOffset
                : clientY - blockOpts.range.min + window.pageYOffset;
            var prop = blockOpts.xLayout ? "width" : "height";
            if (newValue < 0) {
                newValue = blockOpts.resizerLength / 2;
            }
            else if (newValue > blockOpts.size) {
                newValue = blockOpts.size - blockOpts.resizerLength;
            }
            _this.config[prop] = newValue - blockOpts.resizerLength / 2 + "px";
            blockOpts.nextCell.config[prop] = blockOpts.size - newValue - blockOpts.resizerLength / 2 + "px";
            _this.paint();
            _this.events.fire(types_1.LayoutEvents.resize, [_this.id]);
        };
        var resizeEnd = function (event) {
            blockOpts.isActive = false;
            document.body.classList.remove("dhx_no-select--resize");
            if (!event.targetTouches) {
                document.removeEventListener("mouseup", resizeEnd);
                document.removeEventListener("mousemove", resizeMove);
            }
            else {
                document.removeEventListener("touchend", resizeEnd);
                document.removeEventListener("touchmove", resizeMove);
            }
            _this.events.fire(types_1.LayoutEvents.afterResizeEnd, [_this.id]);
        };
        var resizeStart = function (event) {
            event.targetTouches && event.preventDefault();
            if (event.which === 3) {
                return;
            }
            if (blockOpts.isActive) {
                resizeEnd(event);
            }
            if (!_this.events.fire(types_1.LayoutEvents.beforeResizeStart, [_this.id])) {
                return;
            }
            document.body.classList.add("dhx_no-select--resize");
            var block = _this.getCellView();
            var nextCell = _this._getNextCell();
            var nextBlock = nextCell.getCellView();
            var resizerBlock = _this._getResizerView();
            var blockOffsets = block.el.getBoundingClientRect();
            var resizerOffsets = resizerBlock.el.getBoundingClientRect();
            var nextBlockOffsets = nextBlock.el.getBoundingClientRect();
            blockOpts.xLayout = _this._isXDirection();
            blockOpts.left = blockOffsets.left + window.pageXOffset;
            blockOpts.top = blockOffsets.top + window.pageYOffset;
            blockOpts.margin = helpers_1.getMarginSize(_this.getParent().config, blockOpts.xLayout);
            blockOpts.range = helpers_1.getBlockRange(blockOffsets, nextBlockOffsets, blockOpts.xLayout);
            blockOpts.size = blockOpts.range.max - blockOpts.range.min - blockOpts.margin;
            blockOpts.isActive = true;
            blockOpts.nextCell = nextCell;
            blockOpts.resizerLength = blockOpts.xLayout ? resizerOffsets.width : resizerOffsets.height;
        };
        this._resizerHandlers = {
            onmousedown: function (e) {
                resizeStart(e);
                document.addEventListener("mouseup", resizeEnd);
                document.addEventListener("mousemove", resizeMove);
            },
            ontouchstart: function (e) {
                resizeStart(e);
                document.addEventListener("touchend", resizeEnd);
                document.addEventListener("touchmove", resizeMove);
            },
            ondragstart: function (e) { return e.preventDefault(); },
        };
    };
    Cell.prototype._getCollapseIcon = function () {
        if (this._isXDirection() && this.config.collapsed) {
            return "dxi dxi-chevron-right";
        }
        if (this._isXDirection() && !this.config.collapsed) {
            return "dxi dxi-chevron-left";
        }
        if (!this._isXDirection() && this.config.collapsed) {
            return "dxi dxi-chevron-up";
        }
        if (!this._isXDirection() && !this.config.collapsed) {
            return "dxi dxi-chevron-down";
        }
    };
    Cell.prototype._isLastCell = function () {
        var parent = this._parent;
        return parent && parent._cells.indexOf(this) === parent._cells.length - 1;
    };
    Cell.prototype._getNextCell = function () {
        var parent = this._parent;
        var index = parent._cells.indexOf(this);
        if (parent._cells[index + 1].config.hidden) {
            return parent._cells[index + 1]._getNextCell();
        }
        else
            return parent._cells[index + 1];
    };
    Cell.prototype._getResizerView = function () {
        return this._parent.getRefs("resizer_" + this._uid);
    };
    Cell.prototype._isXDirection = function () {
        return this._parent && this._parent._xLayout;
    };
    Cell.prototype._calculateStyle = function () {
        var config = this.config;
        if (!config) {
            return;
        }
        var style = {};
        var autoWidth = false;
        var autoHeight = false;
        if (!isNaN(Number(config.width)))
            config.width = config.width + "px";
        if (!isNaN(Number(config.height)))
            config.height = config.height + "px";
        if (!isNaN(Number(config.minWidth)))
            config.minWidth = config.minWidth + "px";
        if (!isNaN(Number(config.minHeight)))
            config.minHeight = config.minHeight + "px";
        if (!isNaN(Number(config.maxWidth)))
            config.maxWidth = config.maxWidth + "px";
        if (!isNaN(Number(config.maxHeight)))
            config.maxHeight = config.maxHeight + "px";
        if (config.width === "content")
            autoWidth = true;
        if (config.height === "content")
            autoHeight = true;
        var _a = config, width = _a.width, height = _a.height, cols = _a.cols, rows = _a.rows, minWidth = _a.minWidth, minHeight = _a.minHeight, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, gravity = _a.gravity, collapsed = _a.collapsed, $fixed = _a.$fixed;
        var gravityNumber = Math.sign(gravity) === -1 ? 0 : gravity;
        if (typeof gravity === "boolean") {
            gravityNumber = gravity ? 1 : 0;
        }
        var fixed = typeof gravity === "boolean" ? !gravity : Math.sign(gravity) === -1;
        if (this._isXDirection()) {
            if ($fixed || width || (gravity === undefined && (minWidth || maxWidth))) {
                fixed = true;
            }
        }
        else {
            if ($fixed || height || (gravity === undefined && (minHeight || maxHeight))) {
                fixed = true;
            }
        }
        var grow = fixed ? 0 : gravityNumber || 1;
        var fillSpace = this._isXDirection() ? "x" : "y";
        if (minWidth !== undefined)
            style.minWidth = minWidth;
        if (minHeight !== undefined)
            style.minHeight = minHeight;
        if (maxWidth !== undefined)
            style.maxWidth = maxWidth;
        if (maxHeight !== undefined)
            style.maxHeight = maxHeight;
        if (this._parent === undefined && !fillSpace !== undefined) {
            fillSpace = true;
        }
        if (width !== undefined && width !== "content") {
            style.width = width;
        }
        else {
            if (fillSpace === true) {
                style.width = "100%";
            }
            else if (fillSpace === "x") {
                if (autoWidth) {
                    style.flex = "0 0 auto";
                }
                else {
                    var isAuto = this._isXDirection() ? "1px" : "auto";
                    style.flex = grow + " " + (cols || rows ? "0 " + isAuto : "1 auto");
                }
            }
        }
        if (height !== undefined && height !== "content") {
            style.height = height;
        }
        else {
            if (fillSpace === true) {
                style.height = "100%";
            }
            else if (fillSpace === "y") {
                if (autoHeight) {
                    style.flex = "0 0 auto";
                }
                else {
                    var isAuto = !this._isXDirection() ? "1px" : "auto";
                    style.flex = grow + " " + (cols || rows ? "0 " + isAuto : "1 auto");
                }
            }
        }
        if (fillSpace === true && config.width === undefined && config.height === undefined) {
            style.flex = grow + " 1 auto";
        }
        if (collapsed) {
            if (this._isXDirection()) {
                style.width = "auto";
            }
            else {
                style.height = "auto";
            }
            style.flex = "0 0 auto";
        }
        return style;
    };
    return Cell;
}(view_1.View));
exports.Cell = Cell;


/***/ }),

/***/ "../ts-layout/sources/Layout.ts":
/*!**************************************!*\
  !*** ../ts-layout/sources/Layout.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ./types */ "../ts-layout/sources/types.ts");
var Cell_1 = __webpack_require__(/*! ./Cell */ "../ts-layout/sources/Cell.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var Layout = /** @class */ (function (_super) {
    __extends(Layout, _super);
    function Layout(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        // root layout
        _this._root = _this.config.parent || _this;
        _this._all = {};
        _this._parseConfig();
        if (_this.config.activeTab) {
            _this.config.activeView = _this.config.activeTab;
        }
        // Need replace to tabbar
        if (_this.config.views) {
            _this.config.activeView = _this.config.activeView || _this._cells[0].id;
            _this._isViewLayout = true;
        }
        if (!config.parent) {
            var view = dom_1.create({ render: function () { return _this.toVDOM(); } }, _this);
            _this.mount(parent, view);
        }
        return _this;
    }
    Layout.prototype.destructor = function () {
        for (var key in this._all) {
            if (Object.prototype.hasOwnProperty.call(this._all, key)) {
                var cell = this._all[key];
                if (cell.getWidget() && typeof cell.getWidget().destructor === "function") {
                    cell.getWidget().destructor();
                }
                cell.destructor();
            }
        }
        this.config = this._cells = this._root = this._xLayout = this._isViewLayout = null;
        this._all = {};
        this.unmount();
    };
    Layout.prototype.toVDOM = function () {
        if (this._isViewLayout) {
            var roots = [this.getCell(this.config.activeView).toVDOM()];
            return _super.prototype.toVDOM.call(this, roots);
        }
        var nodes = [];
        this._inheritTypes();
        this._cells.forEach(function (cell) {
            var node = cell.toVDOM();
            if (Array.isArray(node)) {
                nodes = nodes.concat(node);
            }
            else {
                nodes.push(node);
            }
        });
        return _super.prototype.toVDOM.call(this, nodes);
    };
    Layout.prototype.removeCell = function (id) {
        if (!this.events.fire(types_1.LayoutEvents.beforeRemove, [id])) {
            return;
        }
        var root = this.config.parent || this;
        if (root !== this) {
            return root.removeCell(id);
        }
        // this === root layout
        var view = this.getCell(id);
        if (view) {
            var parent_1 = view.getParent();
            delete this._all[id];
            parent_1._cells = parent_1._cells.filter(function (cell) { return cell.id != id; });
            parent_1.paint();
        }
        this.events.fire(types_1.LayoutEvents.afterRemove, [id]);
    };
    Layout.prototype.addCell = function (config, index) {
        if (index === void 0) { index = -1; }
        if (!this.events.fire(types_1.LayoutEvents.beforeAdd, [config.id])) {
            return;
        }
        var view = this._createCell(config);
        if (index < 0) {
            index = this._cells.length + index + 1;
        }
        this._cells.splice(index, 0, view);
        this.paint();
        if (!this.events.fire(types_1.LayoutEvents.afterAdd, [config.id])) {
            return;
        }
    };
    Layout.prototype.getId = function (index) {
        if (index < 0) {
            index = this._cells.length + index;
        }
        return this._cells[index] ? this._cells[index].id : undefined;
    };
    Layout.prototype.getRefs = function (name) {
        return this._root.getRootView().refs[name];
    };
    Layout.prototype.getCell = function (id) {
        return this._root._all[id];
    };
    Layout.prototype.forEach = function (callback, parent, level) {
        if (level === void 0) { level = Infinity; }
        if (!this._haveCells(parent) || level < 1) {
            return;
        }
        var array;
        if (parent) {
            array = this._root._all[parent]._cells;
        }
        else {
            array = this._root._cells;
        }
        for (var index = 0; index < array.length; index++) {
            var cell = array[index];
            callback.call(this, cell, index, array);
            if (this._haveCells(cell.id)) {
                cell.forEach(callback, cell.id, --level);
            }
        }
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Layout.prototype.cell = function (id) {
        return this.getCell(id);
    };
    Layout.prototype._getCss = function (content) {
        var layoutCss = this._xLayout ? "dhx_layout-columns" : "dhx_layout-rows";
        var directionCss = this.config.align ? " " + layoutCss + "--" + this.config.align : "";
        if (content) {
            return (layoutCss +
                " dhx_layout-cell" +
                (this.config.align ? " dhx_layout-cell--" + this.config.align : ""));
        }
        else {
            var cellCss = this.config.parent ? _super.prototype._getCss.call(this) : "dhx_widget dhx_layout";
            var fullModeCss = this.config.parent ? "" : " dhx_layout-cell";
            return cellCss + (this.config.full ? fullModeCss : " " + layoutCss) + directionCss;
        }
    };
    Layout.prototype._parseConfig = function () {
        var _this = this;
        var config = this.config;
        var cells = config.rows || config.cols || config.views || [];
        this._xLayout = !config.rows;
        this._cells = cells.map(function (a) { return _this._createCell(a); });
    };
    Layout.prototype._createCell = function (cell) {
        var view;
        if (cell.rows || cell.cols || cell.views) {
            cell.parent = this._root;
            view = new Layout(this, cell);
        }
        else {
            view = new Cell_1.Cell(this, cell);
        }
        // FIxME
        this._root._all[view.id] = view;
        if (cell.init) {
            cell.init(view, cell);
        }
        return view;
    };
    Layout.prototype._haveCells = function (id) {
        if (id) {
            var array = this._root._all[id];
            return array._cells && array._cells.length > 0;
        }
        return Object.keys(this._all).length > 0;
    };
    Layout.prototype._inheritTypes = function (obj) {
        var _this = this;
        if (obj === void 0) { obj = this._cells; }
        if (Array.isArray(obj)) {
            obj.forEach(function (cell) { return _this._inheritTypes(cell); });
        }
        else {
            var cellConfig = obj.config;
            if (cellConfig.rows || cellConfig.cols) {
                var viewParent = obj.getParent();
                if (!cellConfig.type && viewParent) {
                    if (viewParent.config.type) {
                        cellConfig.type = viewParent.config.type;
                    }
                    else {
                        this._inheritTypes(viewParent);
                    }
                }
            }
        }
    };
    return Layout;
}(Cell_1.Cell));
exports.Layout = Layout;


/***/ }),

/***/ "../ts-layout/sources/ProCell.ts":
/*!***************************************!*\
  !*** ../ts-layout/sources/ProCell.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var ScrollView_1 = __webpack_require__(/*! @dhx/ts-common/ScrollView */ "../ts-common/ScrollView.ts");
var Cell_1 = __webpack_require__(/*! ./Cell */ "../ts-layout/sources/Cell.ts");
var ProCell = /** @class */ (function (_super) {
    __extends(ProCell, _super);
    function ProCell(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () {
            return _this._getFirstRootView();
        });
        return _this;
    }
    ProCell.prototype._getFirstRootView = function (self) {
        if (self === void 0) { self = this; }
        return self.getParent() && self.getParent().getRootView()
            ? self.getParent().getRootView()
            : this._getFirstRootView(self.getParent());
    };
    ProCell.prototype.toVDOM = function (nodes) {
        var _a;
        if (this.config === null) {
            this.config = {};
        }
        if (this.config.hidden) {
            return;
        }
        var style = this._calculateStyle();
        var stylePadding = core_1.isDefined(this.config.padding)
            ? !isNaN(Number(this.config.padding))
                ? { padding: this.config.padding + "px" }
                : { padding: this.config.padding }
            : "";
        var fullStyle = this.config.full || this.config.html ? style : __assign(__assign({}, style), stylePadding);
        var kids;
        if (!this.config.html) {
            if (this._ui) {
                var view = this._ui.getRootView();
                if (view.render) {
                    view = dom_1.inject(view);
                }
                // kids = [view];
                kids = view ? [this.scrollView.render(view)] : view || null;
            }
            else {
                // kids = nodes || null;
                kids = nodes ? this.scrollView.render([nodes]) : nodes || null;
            }
        }
        var resizer = this.config.resizable && !this._isLastCell() && !this.config.collapsed
            ? dom_1.el(".dhx_layout-resizer." +
                (this._isXDirection() ? "dhx_layout-resizer--x" : "dhx_layout-resizer--y"), __assign(__assign({}, this._resizerHandlers), { _ref: "resizer_" + this._uid }), [
                dom_1.el("span.dhx_layout-resizer__icon", {
                    class: "dxi " +
                        (this._isXDirection() ? "dxi-dots-vertical" : "dxi-dots-horizontal"),
                }),
            ])
            : null;
        var handlers = {};
        if (this.config.on) {
            for (var key in this.config.on) {
                handlers["on" + key] = this.config.on[key];
            }
        }
        var typeClass = "";
        var isParent = this.config.cols || this.config.rows;
        if (this.config.type && isParent) {
            switch (this.config.type) {
                case "line":
                    typeClass = " dhx_layout-line";
                    break;
                case "wide":
                    typeClass = " dhx_layout-wide";
                    break;
                case "space":
                    typeClass = " dhx_layout-space";
                    break;
                default:
                    break;
            }
        }
        var htmlContent = dom_1.el(".dhx_layout-cell-content", {
            ".innerHTML": this.config.html,
            _key: this._uid + "_html",
            style: stylePadding,
        });
        var cell = dom_1.el("div", __assign(__assign((_a = { _key: this._uid, _ref: this._uid }, _a["aria-label"] = this.config.id ? "tab-content-" + this.config.id : null, _a), handlers), { class: this._getCss(false) +
                (this.config.css ? " " + this.config.css : "") +
                (this.config.collapsed ? " dhx_layout-cell--collapsed" : "") +
                (this.config.resizable ? " dhx_layout-cell--resizable" : "") +
                (this.config.type && !this.config.full ? typeClass : ""), style: fullStyle }), this.config.full
            ? [
                dom_1.el("div", {
                    tabindex: this.config.collapsable ? "0" : "-1",
                    class: "dhx_layout-cell-header" +
                        (this._isXDirection()
                            ? " dhx_layout-cell-header--col"
                            : " dhx_layout-cell-header--row") +
                        (this.config.collapsable ? " dhx_layout-cell-header--collapseble" : "") +
                        (this.config.collapsed ? " dhx_layout-cell-header--collapsed" : "") +
                        (((this.getParent() || {}).config || {}).isAccordion
                            ? " dhx_layout-cell-header--accordion"
                            : ""),
                    style: {
                        height: this.config.headerHeight,
                    },
                    onclick: this._handlers.toggle,
                    onkeydown: this._handlers.enterCollapse,
                }, [
                    this.config.headerIcon &&
                        dom_1.el("span.dhx_layout-cell-header__icon", {
                            class: this.config.headerIcon,
                        }),
                    this.config.headerImage &&
                        dom_1.el(".dhx_layout-cell-header__image-wrapper", [
                            dom_1.el("img", {
                                src: this.config.headerImage,
                                class: "dhx_layout-cell-header__image",
                            }),
                        ]),
                    this.config.header &&
                        dom_1.el("h3.dhx_layout-cell-header__title", this.config.header),
                    this.config.collapsable
                        ? dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: this._getCollapseIcon(),
                        })
                        : dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: "dxi dxi-empty",
                        }),
                ]),
                !this.config.collapsed
                    ? dom_1.el("div", {
                        style: __assign(__assign({}, stylePadding), { height: "calc(100% - " + (this.config.headerHeight || 37) + "px)" }),
                        ".innerHTML": this.config.html,
                        class: this._getCss(true) +
                            " dhx_layout-cell-content" +
                            (this.config.type ? typeClass : ""),
                    }, kids)
                    : null,
            ]
            : this.config.html &&
                !(this.config.rows &&
                    this.config.cols &&
                    this.config.views)
                ? [
                    !this.config.collapsed
                        ? this.scrollView && this.scrollView.config.enable
                            ? this.scrollView.render([htmlContent], this._uid)
                            : htmlContent
                        : null,
                ]
                : kids);
        return resizer ? [cell, resizer] : cell;
    };
    return ProCell;
}(Cell_1.Cell));
exports.ProCell = ProCell;


/***/ }),

/***/ "../ts-layout/sources/ProLayout.ts":
/*!*****************************************!*\
  !*** ../ts-layout/sources/ProLayout.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Layout_1 = __webpack_require__(/*! ./Layout */ "../ts-layout/sources/Layout.ts");
var ProCell_1 = __webpack_require__(/*! ./ProCell */ "../ts-layout/sources/ProCell.ts");
var ProLayout = /** @class */ (function (_super) {
    __extends(ProLayout, _super);
    function ProLayout(parent, config) {
        return _super.call(this, parent, config) || this;
    }
    ProLayout.prototype._createCell = function (cell) {
        var view;
        if (cell.rows || cell.cols || cell.views) {
            cell.parent = this._root;
            view = new ProLayout(this, cell);
        }
        else {
            view = new ProCell_1.ProCell(this, cell);
        }
        // FIxME
        this._root._all[view.id] = view;
        if (cell.init) {
            cell.init(view, cell);
        }
        return view;
    };
    return ProLayout;
}(Layout_1.Layout));
exports.ProLayout = ProLayout;


/***/ }),

/***/ "../ts-layout/sources/helpers.ts":
/*!***************************************!*\
  !*** ../ts-layout/sources/helpers.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getBlockRange(block1, block2, isXLayout) {
    if (isXLayout === void 0) { isXLayout = true; }
    if (isXLayout) {
        return {
            min: block1.left + window.pageXOffset,
            max: block2.right + window.pageXOffset,
        };
    }
    return {
        min: block1.top + window.pageYOffset,
        max: block2.bottom + window.pageYOffset,
    };
}
exports.getBlockRange = getBlockRange;
function getMarginSize(config, xLayout) {
    if (!config) {
        return 0;
    }
    if (config.type === "space" || (config.type === "wide" && xLayout)) {
        return 10;
    }
    return 0;
}
exports.getMarginSize = getMarginSize;


/***/ }),

/***/ "../ts-layout/sources/types.ts":
/*!*************************************!*\
  !*** ../ts-layout/sources/types.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LayoutEvents;
(function (LayoutEvents) {
    LayoutEvents["beforeShow"] = "beforeShow";
    LayoutEvents["afterShow"] = "afterShow";
    LayoutEvents["beforeHide"] = "beforeHide";
    LayoutEvents["afterHide"] = "afterHide";
    LayoutEvents["beforeResizeStart"] = "beforeResizeStart";
    LayoutEvents["resize"] = "resize";
    LayoutEvents["afterResizeEnd"] = "afterResizeEnd";
    LayoutEvents["beforeAdd"] = "beforeAdd";
    LayoutEvents["afterAdd"] = "afterAdd";
    LayoutEvents["beforeRemove"] = "beforeRemove";
    LayoutEvents["afterRemove"] = "afterRemove";
    LayoutEvents["beforeCollapse"] = "beforeCollapse";
    LayoutEvents["afterCollapse"] = "afterCollapse";
    LayoutEvents["beforeExpand"] = "beforeExpand";
    LayoutEvents["afterExpand"] = "afterExpand";
})(LayoutEvents = exports.LayoutEvents || (exports.LayoutEvents = {}));


/***/ }),

/***/ "../ts-list/index.ts":
/*!***************************!*\
  !*** ../ts-list/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/List */ "../ts-list/sources/List.ts"));
__export(__webpack_require__(/*! ./sources/ProList */ "../ts-list/sources/ProList.ts"));
__export(__webpack_require__(/*! ./sources/Selection */ "../ts-list/sources/Selection.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-list/sources/types.ts"));


/***/ }),

/***/ "../ts-list/sources/List.ts":
/*!**********************************!*\
  !*** ../ts-list/sources/List.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var KeyManager_1 = __webpack_require__(/*! @dhx/ts-common/KeyManager */ "../ts-common/KeyManager.ts");
var types_1 = __webpack_require__(/*! @dhx/ts-common/types */ "../ts-common/types.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var Selection_1 = __webpack_require__(/*! ./Selection */ "../ts-list/sources/Selection.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var types_2 = __webpack_require__(/*! ./types */ "../ts-list/sources/types.ts");
var editors_1 = __webpack_require__(/*! ./editors/editors */ "../ts-list/sources/editors/editors.ts");
exports.MOVE_UP = 1;
exports.MOVE_DOWN = 2;
var List = /** @class */ (function (_super) {
    __extends(List, _super);
    function List(node, config) {
        if (config === void 0) { config = {}; }
        var _this = this;
        var itemHeight = config.itemHeight || (config.virtual ? 37 : null);
        if (itemHeight && typeof itemHeight === "number") {
            itemHeight = itemHeight.toString() + "px";
        }
        _this = _super.call(this, node, core_1.extend({
            itemHeight: itemHeight,
            keyNavigation: true,
            editable: false,
            selection: true,
        }, config)) || this;
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
            timeStamp: null,
        };
        // init data colleciton and link events between widget and data
        var data = _this.config.data;
        if (!(data instanceof ts_data_1.DataCollection)) {
            _this.data = new ts_data_1.DataCollection({});
            _this.events = _this.data.events;
            if (data)
                _this.data.parse(data);
        }
        else {
            // [TODO] deprecate in favor of raw data input
            _this.data = data;
            _this.events = data.events;
        }
        _this.selection = new Selection_1.Selection({
            disabled: !_this.config.selection,
            multiselection: _this.config.multiselection,
        }, _this.data, _this.events);
        if (_this.config.keyNavigation) {
            _this.keyManager = new KeyManager_1.KeyManager(function (e, focusId) {
                return focusId == _this._uid && (!_this._edited || (_this._edited && e.key !== "escape"));
            });
            _this._initHotKey();
        }
        _this.events.on(ts_data_1.DataEvents.change, function (_, status, item) {
            if (status === "setPage") {
                _this.showItem(_this.data.getId(item[0]));
            }
            _this.paint();
        });
        _this.events.on(types_1.SelectionEvents.afterUnSelect, function () { return _this.paint(); });
        _this.events.on(types_1.SelectionEvents.afterSelect, function (id) {
            if (id && _this.config.selection)
                _this._focus = id;
            _this.paint();
        });
        _this.events.on(types_2.ListEvents.afterEditEnd, _this.editEnd.bind(_this));
        var drop = function (value) { return function (info) {
            _this.data.setMeta(_this.data.getItem(info.target), "drop", value);
            _this.paint();
        }; };
        _this.events.on(ts_data_1.DragEvents.canDrop, drop(true));
        _this.events.on(ts_data_1.DragEvents.cancelDrop, drop(false));
        var drag = function (value) { return function (info) {
            info.source.map(function (id) { return _this.data.setMeta(_this.data.getItem(id), "drag", value); });
            _this.paint();
        }; };
        _this.events.on(ts_data_1.DragEvents.dragStart, drag(true));
        _this.events.on(ts_data_1.DragEvents.afterDrag, drag(false));
        _this._handlers = {
            onmousedown: function (e) {
                _this._dragStart(e);
            },
            ontouchstart: function (e) {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var dblTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (dblTap) {
                        e.preventDefault();
                        _this._dblClick(e);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            },
            ontouchmove: function (e) {
                _this._touch.start && e.preventDefault();
                _this._clearTouchTimer();
            },
            ontouchend: function () {
                _this._touch.start = false;
                _this._clearTouchTimer();
            },
            ondragstart: function () { return (_this.config.dragMode && !_this._edited ? false : null); },
            oncontextmenu: function (e) {
                var id = html_1.locate(e);
                if (!id) {
                    return;
                }
                _this.events.fire(types_2.ListEvents.itemRightClick, [id, e]);
            },
            onclick: function (e) {
                var id = html_1.locate(e);
                if (!id) {
                    return;
                }
                _this.selection.add(id, e.ctrlKey || e.metaKey, e.shiftKey);
                _this._focus = id;
                _this.events.fire(types_2.ListEvents.click, [id, e]);
                _this.paint();
            },
            ondblclick: function (e) {
                _this._dblClick(e);
            },
            onscroll: function (e) {
                if (_this.config.virtual) {
                    _this._topOffset = e.target.scrollTop;
                    _this._visibleHeight = e.target.offsetHeight;
                    _this.paint();
                }
            },
            onmouseover: function (e) {
                var id = html_1.locate(e);
                if (!id) {
                    return;
                }
                var prevId = html_1.locate(e.relatedTarget);
                if (id !== prevId)
                    _this.events.fire(types_2.ListEvents.itemMouseOver, [id, e]);
            },
        };
        var evs = _this.config.eventHandlers;
        if (evs) {
            for (var _i = 0, _a = Object.entries(evs); _i < _a.length; _i++) {
                var _b = _a[_i], event_name = _b[0], events = _b[1];
                _this._handlers[event_name] = html_1.eventHandler(function (e) { return html_1.locate(e); }, events, _this._handlers[event_name]);
            }
        }
        if (_this.config.dragMode) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
        }
        // defaults for virtual rendering
        _this._topOffset = _this._visibleHeight = 0;
        var view = dom_1.create({
            render: function () { return _this._renderList(); },
            hooks: {
                didMount: function (vm) {
                    if (_this.config.virtual)
                        _this._visibleHeight = vm.node.el.offsetHeight;
                },
                didRedraw: function (vm) { return _this._didRedraw(vm); },
            },
        });
        _this.mount(node, view);
        return _this;
    }
    List.prototype._didRedraw = function (vm) {
        // do nothing
    };
    List.prototype._dblClick = function (e) {
        var id = html_1.locate(e);
        if (!id) {
            return;
        }
        id = this.data.getItem(id).id;
        if (this.config.editable) {
            this.editItem(id);
        }
        this.events.fire(types_2.ListEvents.doubleClick, [id, e]);
    };
    List.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    List.prototype._dragStart = function (e) {
        var _this = this;
        this._touch.start = true;
        var itemsForGhost = [];
        var item = html_1.locateNode(e, "dhx_id");
        var itemId = item && item.getAttribute("dhx_id");
        var selectionIds = this.selection.getId();
        if (this.config.multiselection && selectionIds instanceof Array) {
            selectionIds.map(function (id) {
                if (id !== itemId && _this.getRootView().refs[id]) {
                    itemsForGhost.push(_this.getRootView().refs[id].el);
                }
            });
            selectionIds = __spreadArrays(selectionIds);
        }
        if (typeof selectionIds === "string") {
            selectionIds = [selectionIds];
        }
        return this.config.dragMode && !this._edited
            ? ts_data_1.dragManager.onMouseDown(e, selectionIds || [itemId], itemsForGhost)
            : null;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.disableSelection = function () {
        this.selection.disable();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.enableSelection = function () {
        this.selection.enable();
    };
    List.prototype.editItem = function (id) {
        this._edited = id;
        if (!this.data.getItem(this._edited) || !this.events.fire(types_2.ListEvents.beforeEditStart, [id])) {
            this._edited = null;
            return;
        }
        this._getHotkeys();
        this.paint();
        this.events.fire(types_2.ListEvents.afterEditStart, [id]);
    };
    // [TODO] maybe better name
    List.prototype.editEnd = function (value, id) {
        if (this._edited) {
            if (value !== null) {
                var item = this.data.getItem(id);
                this.data.update(id, __assign(__assign({}, item), { value: value }));
            }
            this._edited = null;
            this.paint();
        }
    };
    /*
        Focus API allows to mark item as active one, but not selected yet
        Used by keyboard navigation
    */
    List.prototype.getFocusItem = function () {
        return this.data.getItem(this._focus);
    };
    List.prototype.setFocus = function (id) {
        if (this._focus != id && this.data.exists(id)) {
            this._focus = id;
            this.showItem(id);
            this.events.fire(types_2.ListEvents.focusChange, [this.data.getIndex(this._focus), this._focus]);
            this.paint();
        }
    };
    List.prototype.getFocus = function () {
        return this._focus;
    };
    List.prototype.destructor = function () {
        this.events && this.events.clear();
        this.keyManager && this.keyManager.destructor();
        this.selection && this.selection.destructor();
        this.config = this.events = this.selection = this.keyManager = null;
        this._handlers = this._focus = this._edited = this._events = this._topOffset = this._visibleHeight = this._touch = null;
        this.unmount();
    };
    List.prototype.showItem = function (id) {
        var rootView = this.getRootView();
        if (!rootView || !rootView.node || !rootView.node.el || typeof id === "undefined") {
            return;
        }
        var listEl = this.getRootNode();
        if (!listEl) {
            return;
        }
        var virtual = this.config.virtual;
        var index = this.data.getIndex(id);
        var currentPage = Math.floor(index / listEl.children.length) || 0;
        var el = listEl.children[index - listEl.children.length * currentPage];
        if (!virtual && !el)
            return;
        var height = virtual ? parseInt(this.config.itemHeight) : el.clientHeight;
        var top = virtual ? index * height : el.offsetTop;
        if (top >= listEl.scrollTop + listEl.clientHeight - height) {
            listEl.scrollTo(0, top - listEl.clientHeight + height);
        }
        else if (top < listEl.scrollTop) {
            listEl.scrollTo(0, top);
        }
    };
    List.prototype._renderItem = function (item, index) {
        var itemHeight = this.config.itemHeight;
        if (item.$empty) {
            return dom_1.el("li", {
                class: "dhx_list-item",
                style: {
                    height: itemHeight,
                },
            });
        }
        var html = (this.config.template && this.config.template(item)) || item.html;
        var focus = item.id == this._focus;
        if (item.id == this._edited) {
            var editor = editors_1.getEditor(item, this);
            return editor.toHTML();
        }
        var mx = this.data.getMetaMap(item);
        var node = __assign(__assign(__assign(__assign({}, this._events), { class: "dhx_list-item" +
                (mx && mx.selected ? " dhx_list-item--selected" : "") +
                (focus ? " dhx_list-item--focus" : "") +
                (mx && mx.drop && !this._edited ? " dhx_list-item--drophere" : "") +
                (mx && mx.drag && !this._edited ? " dhx_list-item--dragtarget" : "") +
                (this.config.dragMode && !this._edited ? " dhx_list-item--drag" : "") +
                (item.css ? " " + item.css : ""), dhx_id: item.id, _ref: item.id.toString(), style: {
                height: itemHeight,
            }, _key: item.id, ".innerHTML": html }), this.getItemAriaAttrs(this, item)), { tabindex: focus ? 0 : -1 });
        if (html) {
            node[".innerHTML"] = html;
            return dom_1.el("li", node);
        }
        else {
            node.class += " dhx_list-item--text";
            return dom_1.el("li", node, item.text || item.value);
        }
    };
    List.prototype._renderList = function () {
        var _this = this;
        var range = this._getRange();
        // mapRange
        var data = this.data.getRawData(range[0], range[1]);
        var kids = data.map(function (obj, index) { return _this._renderItem(obj, index); });
        if (this.config.virtual) {
            kids = __spreadArrays([
                dom_1.el(".div", { style: { height: range[2] + "px" } })
            ], kids, [
                dom_1.el(".div", { style: { height: range[3] + "px" } }),
            ]);
        }
        return dom_1.el("ul.dhx_widget.dhx_list", __assign(__assign({ style: {
                "max-height": this.config.height,
                position: "relative",
            }, tabindex: 0, class: (this.config.css ? this.config.css : "") +
                (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : ""), dhx_widget_id: this._uid }, this._handlers), this._getListAriaAttrs(this.config, this.data.getLength())), kids);
    };
    List.prototype.moveFocus = function (mode, step) {
        var length = this.data.getLength();
        if (!length) {
            return;
        }
        var id = this._focus;
        var index = id ? this.data.getIndex(id) : -1;
        step = step || 1;
        if (mode === exports.MOVE_DOWN) {
            id = this.data.getId(Math.min(index + step, length - 1));
        }
        else if (mode === exports.MOVE_UP) {
            id = this.data.getId(Math.max(index - step, 0));
        }
        this.setFocus(id);
    };
    List.prototype._getRange = function () {
        if (this.config.virtual) {
            var overscanCount = 5;
            var visibleHeight = this._visibleHeight || parseInt(this.config.height);
            var itemHeight = parseInt(this.config.itemHeight);
            var total = this.data.getLength();
            var totalHeight = this.data.getLength() * itemHeight;
            var position = this._topOffset;
            // correct value to be in [0, total-visible] range
            position = Math.max(0, Math.min(position, totalHeight - visibleHeight));
            var index = Math.floor(position / itemHeight);
            var count = Math.min(total - index, Math.floor(visibleHeight / itemHeight) + overscanCount);
            this._topOffset = position;
            return [index, count + index, index * itemHeight, totalHeight - itemHeight * (count + index)];
        }
        else {
            return [0, -1, 0, 0];
        }
    };
    List.prototype._getHotkeys = function () {
        var _this = this;
        return {
            arrowDown: function (e) {
                _this.moveFocus(exports.MOVE_DOWN);
                e.preventDefault();
            },
            arrowUp: function (e) {
                _this.moveFocus(exports.MOVE_UP);
                e.preventDefault();
            },
            escape: function () {
                _this.editEnd(null);
            },
            enter: function (e) {
                _this.selection.add(_this._focus);
                _this.events.fire(types_2.ListEvents.click, [_this._focus, e]);
            },
            "shift+enter": function (e) {
                _this.selection.add(_this._focus, false, true);
                _this.events.fire(types_2.ListEvents.click, [_this._focus, e]);
            },
            "ctrl+enter": function (e) {
                _this.selection.add(_this._focus, true, false);
                _this.events.fire(types_2.ListEvents.click, [_this._focus, e]);
            },
            "ctrl+a": function (e) {
                if (_this.config.multiselection) {
                    e.preventDefault();
                    _this.selection.remove();
                    var ids = _this.data.map(function (i) { return i.id; });
                    ids.forEach(function (id) {
                        if (_this.config.multiselection === "ctrlClick") {
                            _this.selection.add(id, true);
                        }
                        else {
                            _this.selection.add(id);
                        }
                    });
                }
            },
        };
    };
    List.prototype._initHotKey = function () {
        var handlers = this._getHotkeys();
        for (var key in handlers) {
            this.keyManager.addHotKey(key, handlers[key]);
        }
        for (var key in this.config.hotkeys) {
            this.keyManager.addHotKey(key, this.config.hotkeys[key]);
        }
    };
    List.prototype.getItemAriaAttrs = function (context, item) {
        var getAriaGrabbed = function (context, item) {
            return context.config.dragMode && !context._edited
                ? { "aria-grabbed": Boolean(item.$dragtarget && !context._edited).toString() }
                : {};
        };
        var getAriaRoleDescription = function (context) {
            return context.config.editable
                ? {
                    "aria-roledescription": "" + (context._edited ? "Press Enter to stop editing" : "Double click to edit content"),
                }
                : {};
        };
        return __assign(__assign({ role: "option", "aria-selected": item.$selected ? "true" : "false" }, getAriaGrabbed(context, item)), getAriaRoleDescription(context));
    };
    List.prototype._getListAriaAttrs = function (config, dataLength) {
        return {
            role: "listbox",
            "aria-label": "Listbox " + (config.title || "") + ", count of options = " + dataLength + "." + (config.editable ? " Content is editable." : ""),
            "aria-multiselectable": config.selection && config.multiselection ? "true" : "false",
            "aria-readonly": config.editable ? "false" : "true",
        };
    };
    return List;
}(view_1.View));
exports.List = List;


/***/ }),

/***/ "../ts-list/sources/ProList.ts":
/*!*************************************!*\
  !*** ../ts-list/sources/ProList.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var ScrollView_1 = __webpack_require__(/*! @dhx/ts-common/ScrollView */ "../ts-common/ScrollView.ts");
var List_1 = __webpack_require__(/*! ./List */ "../ts-list/sources/List.ts");
var ProList = /** @class */ (function (_super) {
    __extends(ProList, _super);
    function ProList(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); });
        _this.paint();
        return _this;
    }
    ProList.prototype.destructor = function () {
        _super.prototype.destructor.call(this);
        this.scrollView = null;
    };
    ProList.prototype.showItem = function (id) {
        var rootView = this.getRootView();
        if (!rootView || !rootView.node || !rootView.node.el || typeof id === "undefined") {
            return;
        }
        var listEl = this.getRootNode();
        if (!listEl) {
            return;
        }
        var virtual = this.config.virtual;
        var index = this.data.getIndex(id);
        var currentPage = Math.floor(index / listEl.children.length) || 0;
        var el = listEl.children[index - listEl.children.length * currentPage];
        if (!virtual && !el)
            return;
        var height = virtual ? parseInt(this.config.itemHeight) : el.clientHeight;
        var top = virtual ? index * height : el.offsetTop;
        if (top >= listEl.scrollTop + listEl.clientHeight - height) {
            listEl.scrollTo(0, top - listEl.clientHeight + height);
        }
        else if (top < listEl.scrollTop) {
            listEl.scrollTo(0, top);
        }
    };
    ProList.prototype._renderList = function () {
        var _this = this;
        var range = this._getRange();
        // mapRange
        var data = this.data.getRawData(range[0], range[1]);
        var kids = data.map(function (obj, index) { return _this._renderItem(obj, index); });
        if (this.config.virtual) {
            kids = __spreadArrays([
                dom_1.el(".div", { style: { height: range[2] + "px" } })
            ], kids, [
                dom_1.el(".div", { style: { height: range[3] + "px" } }),
            ]);
        }
        var scrollViewEnable = this.scrollView && this.scrollView.config.enable;
        var currentClass = (this.config.css ? this.config.css : "") +
            (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : "") +
            (scrollViewEnable ? " dhx_list--scroll-view" : "");
        return dom_1.el("ul.dhx_widget.dhx_list", __assign(__assign({ style: {
                "max-height": this.config.height,
                position: "relative",
            }, class: currentClass, dhx_widget_id: this._uid }, this._handlers), this._getListAriaAttrs(this.config, this.data.getLength())), scrollViewEnable ? [].concat(this.scrollView.render(kids)) : kids);
    };
    return ProList;
}(List_1.List));
exports.ProList = ProList;


/***/ }),

/***/ "../ts-list/sources/Selection.ts":
/*!***************************************!*\
  !*** ../ts-list/sources/Selection.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! @dhx/ts-common/types */ "../ts-common/types.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var Selection = /** @class */ (function () {
    function Selection(config, data, events) {
        var _this = this;
        this.config = config;
        this.events = events;
        this._data = data;
        this._selected = [];
        this._data.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this._selected = [];
        });
        if (typeof this.config.multiselection === "string") {
            var types = ["click", "ctrlClick"];
            if (!types.includes(this.config.multiselection)) {
                this.config.multiselection = false;
            }
        }
        this._data.events.on(ts_data_1.DataEvents.beforeRemove, function (obj) {
            _this._nextSelection = null;
            if (_this._selected.length === 1) {
                var next = _this._data.getIndex(obj.id);
                var count = _this._data.getLength();
                if (count > 1) {
                    var lastIndex = count == next - 1 ? next - 1 : next + 1;
                    _this._nextSelection = _this._data.getId(lastIndex);
                }
            }
        });
        this._data.events.on(ts_data_1.DataEvents.afterRemove, function (obj) {
            var hasIndex = _this._selected.indexOf(obj.id);
            if (hasIndex !== -1) {
                _this._selected.splice(hasIndex, 1);
            }
            if (_this._nextSelection) {
                _this.add(_this._nextSelection);
                _this._nextSelection = null;
            }
        });
    }
    Selection.prototype.enable = function () {
        this.config.disabled = false;
    };
    Selection.prototype.disable = function () {
        this.remove();
        this.config.disabled = true;
    };
    Selection.prototype.getId = function () {
        if (this.config.multiselection) {
            return this._selected;
        }
        return this._selected[0];
    };
    Selection.prototype.getItem = function () {
        var _this = this;
        if (this.config.multiselection) {
            return this._selected.map(function (id) { return _this._data.getItem(id); });
        }
        return this._selected.length ? this._data.getItem(this._selected[0]) : null;
    };
    Selection.prototype.contains = function (id) {
        if (id) {
            return this._selected.includes(id);
        }
        return this._selected.length > 0;
    };
    Selection.prototype.remove = function (id) {
        var _this = this;
        if (id) {
            this._unselectItem(id);
        }
        else {
            this._selected.forEach(function (selectedId) { return _this._unselectItem(selectedId); });
            this._selected = [];
        }
    };
    Selection.prototype.add = function (id, isCtrl, isShift, silent) {
        var _this = this;
        if (this.config.disabled) {
            return;
        }
        if (typeof id === "undefined") {
            var unSelected = this._data.serialize().filter(function (_a) {
                var id = _a.id;
                return !_this._selected.includes(id);
            });
            unSelected.forEach(function (_a) {
                var id = _a.id;
                _this._addMulti(id, silent);
            });
            return;
        }
        var multi = this.config.multiselection;
        if (isShift && this._selected.length && multi) {
            this._addMulti(id, silent);
        }
        else {
            this._addSingle(id, multi && (multi !== "ctrlClick" || isCtrl), silent);
        }
    };
    Selection.prototype.destructor = function () {
        var _this = this;
        this._selected.forEach(function (selectedId) { return _this._unselectItem(selectedId, true); });
    };
    Selection.prototype._addMulti = function (id, silent) {
        var _a;
        var last = this._selected[this._selected.length - 1];
        var i1 = this._data.getIndex(last);
        var i2 = this._data.getIndex(id);
        if (i1 > i2) {
            _a = [i2, i1], i1 = _a[0], i2 = _a[1];
        }
        for (i1; i1 <= i2; i1++) {
            var id_1 = this._data.getId(i1);
            this._selectItem(id_1, silent);
        }
    };
    Selection.prototype._addSingle = function (id, isCtrl, silent) {
        var _this = this;
        if (!isCtrl) {
            this._selected.forEach(function (selectedId) {
                if (selectedId != id)
                    _this._unselectItem(selectedId);
            });
        }
        if (isCtrl && this._selected.includes(id)) {
            this._unselectItem(id, silent);
        }
        else {
            this._selectItem(id, silent);
        }
    };
    Selection.prototype._selectItem = function (id, silent) {
        var item = this._data.getItem(id);
        if (!item || this._data.getMeta(item, "selected"))
            return;
        if (!silent && !this.events.fire(types_1.SelectionEvents.beforeSelect, [id]))
            return;
        this._selected.push(id);
        this._data.setMeta(item, "selected", true);
        if (!silent)
            this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
    };
    Selection.prototype._unselectItem = function (id, silent) {
        if (!silent && !this.events.fire(types_1.SelectionEvents.beforeUnSelect, [id]))
            return;
        this._selected = this._selected.filter(function (selectedId) { return selectedId !== id; });
        this._data.setMeta(this._data.getItem(id), "selected", false);
        if (!silent)
            this.events.fire(types_1.SelectionEvents.afterUnSelect, [id]);
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),

/***/ "../ts-list/sources/editors/InputEditor.ts":
/*!*************************************************!*\
  !*** ../ts-list/sources/editors/InputEditor.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-list/sources/types.ts");
var InputEditor = /** @class */ (function () {
    function InputEditor(item, list) {
        var _this = this;
        this._list = list;
        this._config = list.config;
        this._item = item;
        this._list.events.on(types_1.ListEvents.focusChange, function (index, id) {
            if (_this._mode && id !== _this._item.id) {
                _this.endEdit();
            }
        });
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function () {
        if (this._input) {
            var value = this._input.value;
            if (this._list.events.fire(types_1.ListEvents.beforeEditEnd, [value, this._item.id])) {
                this._input.removeEventListener("blur", this._handlers.onBlur);
                this._input.removeEventListener("change", this._handlers.onChange);
                this._handlers = {};
                this._mode = false;
                this._list.events.fire(types_1.ListEvents.afterEditEnd, [value, this._item.id]);
            }
            else {
                this._input.focus();
            }
        }
    };
    InputEditor.prototype.toHTML = function () {
        this._mode = true;
        var itemHeight = this._config.itemHeight;
        return dom_1.el(".dhx_input__wrapper", { role: "presentation" }, [
            dom_1.el("div.dhx_input__container", { role: "presentation" }, [
                dom_1.el("input.dhx_input", {
                    class: this._item.css ? " " + this._item.css : "",
                    style: {
                        height: itemHeight,
                        width: "100%",
                        padding: "8px 12px",
                    },
                    _hooks: {
                        didInsert: this._handlers.didInsert,
                    },
                    _key: this._item.id,
                    dhx_id: this._item.id,
                }),
            ]),
        ]);
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.value = _this._item.value;
                input.setSelectionRange(0, input.value.length);
                input.addEventListener("change", _this._handlers.onChange);
                input.addEventListener("blur", _this._handlers.onBlur);
            },
        };
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),

/***/ "../ts-list/sources/editors/editors.ts":
/*!*********************************************!*\
  !*** ../ts-list/sources/editors/editors.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var InputEditor_1 = __webpack_require__(/*! ./InputEditor */ "../ts-list/sources/editors/InputEditor.ts");
function getEditor(item, list) {
    return new InputEditor_1.InputEditor(item, list);
}
exports.getEditor = getEditor;


/***/ }),

/***/ "../ts-list/sources/types.ts":
/*!***********************************!*\
  !*** ../ts-list/sources/types.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ListEvents;
(function (ListEvents) {
    ListEvents["click"] = "click";
    ListEvents["doubleClick"] = "doubleclick";
    ListEvents["focusChange"] = "focuschange";
    ListEvents["beforeEditStart"] = "beforeEditStart";
    ListEvents["afterEditStart"] = "afterEditStart";
    ListEvents["beforeEditEnd"] = "beforeEditEnd";
    ListEvents["afterEditEnd"] = "afterEditEnd";
    ListEvents["itemRightClick"] = "itemRightClick";
    ListEvents["itemMouseOver"] = "itemMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ListEvents["contextmenu"] = "contextmenu";
})(ListEvents = exports.ListEvents || (exports.ListEvents = {}));


/***/ }),

/***/ "../ts-message/index.ts":
/*!******************************!*\
  !*** ../ts-message/index.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/message */ "../ts-message/sources/message.ts"));
__export(__webpack_require__(/*! ./sources/alert */ "../ts-message/sources/alert.ts"));
__export(__webpack_require__(/*! ./sources/confirm */ "../ts-message/sources/confirm.ts"));
__export(__webpack_require__(/*! ./sources/tooltip */ "../ts-message/sources/tooltip.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-message/sources/types.ts"));


/***/ }),

/***/ "../ts-message/sources/alert.ts":
/*!**************************************!*\
  !*** ../ts-message/sources/alert.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-message/sources/locales/en.ts");
var common_1 = __webpack_require__(/*! ./common */ "../ts-message/sources/common.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
function alert(props) {
    var apply = props.buttons && props.buttons[0] ? props.buttons[0] : en_1.default.apply;
    var unblock = common_1.blockScreen(props.blockerCss);
    return new Promise(function (res) {
        var contentId = "dhx_alert__" + core_1.uid() + "_content";
        var headerId = "dhx_alert__" + core_1.uid() + "_header";
        var alertBox = document.createElement("div");
        alertBox.setAttribute("role", "alert");
        alertBox.setAttribute("aria-modal", "true");
        props.text && alertBox.setAttribute("aria-describedby", contentId);
        props.header && alertBox.setAttribute("aria-labelledby", headerId);
        alertBox.className = "dhx_widget dhx_alert " + (props.css || "");
        var closeAlert = function (e) {
            if (e.key === "Escape" || e.key === "Esc") {
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                close(e);
                res(false);
            }
        };
        function close(e) {
            e.preventDefault();
            unblock();
            document.body.removeChild(alertBox);
            document.removeEventListener("keydown", closeAlert);
        }
        alertBox.innerHTML = "\n\t\t\t" + (props.header ? "<div id=" + headerId + " class=\"dhx_alert__header\"> " + props.header + " </div>" : "") + "\n\t\t\t" + (props.text ? "<div id=" + contentId + " class=\"dhx_alert__content\">" + props.text + "</div>" : "") + "\n\t\t\t<div class=\"dhx_alert__footer " + (props.buttonsAlignment ? "dhx_alert__footer--" + props.buttonsAlignment : "") + "\">\n\t\t\t\t<button type=\"button\" aria-label=\"confirm\" class=\"dhx_alert__apply-button dhx_button dhx_button--view_flat dhx_button--color_primary dhx_button--size_medium\">" + apply + "</button>\n\t\t\t</div>";
        document.body.appendChild(alertBox);
        alertBox.querySelector(".dhx_alert__apply-button").focus();
        alertBox.querySelector("button").addEventListener("click", function (e) {
            close(e);
            res(true);
        });
        document.addEventListener("keydown", closeAlert);
    });
}
exports.alert = alert;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-message/sources/common.ts":
/*!***************************************!*\
  !*** ../ts-message/sources/common.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function blockKeys(e) {
    var active = document.activeElement;
    if (active.classList.contains("dhx_alert__apply-button") && e.key === "Enter") {
        return;
    }
    if (!active.classList.contains("dhx_alert__confirm-reject") &&
        !active.classList.contains("dhx_alert__confirm-aply")) {
        e.preventDefault();
    }
}
function blockScreen(css) {
    var blocker = document.createElement("div");
    blocker.className = "dhx_alert__overlay " + (css || "");
    document.body.appendChild(blocker);
    document.addEventListener("keydown", blockKeys);
    return function () {
        document.body.removeChild(blocker);
        document.removeEventListener("keydown", blockKeys);
    };
}
exports.blockScreen = blockScreen;


/***/ }),

/***/ "../ts-message/sources/confirm.ts":
/*!****************************************!*\
  !*** ../ts-message/sources/confirm.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-message/sources/locales/en.ts");
var common_1 = __webpack_require__(/*! ./common */ "../ts-message/sources/common.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
function confirm(props) {
    props.buttonsAlignment = props.buttonsAlignment || "right";
    var apply = props.buttons && props.buttons[1] ? props.buttons[1] : en_1.default.apply;
    var reject = props.buttons && props.buttons[0] ? props.buttons[0] : en_1.default.reject;
    var unblock = common_1.blockScreen(props.blockerCss);
    return new Promise(function (res) {
        var confirmBox = document.createElement("div");
        confirmBox.setAttribute("role", "alertdialog");
        confirmBox.setAttribute("aria-modal", "true");
        var headerId = props.header && core_1.uid();
        var textId = props.header && core_1.uid();
        textId && confirmBox.setAttribute("aria-describedby", textId);
        headerId && confirmBox.setAttribute("aria-labelledby", headerId);
        var focusItem;
        var answer = function (val) {
            unblock();
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            confirmBox.removeEventListener("click", clickHandler);
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            document.removeEventListener("keydown", closeConfirm);
            document.body.removeChild(confirmBox);
            res(val);
        };
        var clickHandler = function (e) {
            if (e.target.tagName === "BUTTON") {
                answer(e.target.classList.contains("dhx_alert__confirm-aply"));
            }
        };
        var closeConfirm = function (e) {
            if (e.key === "Escape" || e.key === "Esc") {
                confirmBox.querySelector(".dhx_alert__confirm-aply").focus();
                answer(e.target.classList.contains("dhx_alert__confirm-reject"));
            }
            else if (e.key === "Tab") {
                if (focusItem === "aply") {
                    focusItem = "reject";
                    confirmBox.querySelector(".dhx_alert__confirm-reject").focus();
                }
                else {
                    focusItem = "aply";
                    confirmBox.querySelector(".dhx_alert__confirm-aply").focus();
                }
                e.preventDefault();
            }
        };
        confirmBox.className = "dhx_widget dhx_alert dhx_alert--confirm" + (props.css ? " " + props.css : "");
        confirmBox.innerHTML = "\n\t\t" + (props.header ? "<div class=\"dhx_alert__header\" id=" + headerId + "> " + props.header + " </div>" : "") + "\n\t\t" + (props.text ? "<div class=\"dhx_alert__content\" id=" + textId + ">" + props.text + "</div>" : "") + "\n\t\t\t<div class=\"dhx_alert__footer " + (props.buttonsAlignment ? "dhx_alert__footer--" + props.buttonsAlignment : "") + "\">\n\t\t\t\t<button type=\"button\" aria-label=\"reject\" class=\"dhx_alert__confirm-reject dhx_button dhx_button--view_link dhx_button--color_primary dhx_button--size_medium\">" + reject + "</button>\n\t\t\t\t<button type=\"button\"  aria-label=\"aply\"class=\"dhx_alert__confirm-aply dhx_button dhx_button--view_flat dhx_button--color_primary dhx_button--size_medium\">" + apply + "</button>\n\t\t\t</div>";
        document.body.appendChild(confirmBox);
        focusItem = "aply";
        confirmBox.querySelector(".dhx_alert__confirm-aply").focus();
        confirmBox.addEventListener("click", clickHandler);
        document.addEventListener("keydown", closeConfirm);
    });
}
exports.confirm = confirm;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-message/sources/locales/en.ts":
/*!*******************************************!*\
  !*** ../ts-message/sources/locales/en.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    apply: "apply",
    reject: "reject",
};
exports.default = locale;


/***/ }),

/***/ "../ts-message/sources/message.ts":
/*!****************************************!*\
  !*** ../ts-message/sources/message.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-message/sources/types.ts");
var nodeTimeout = new WeakMap();
var containers = new Map();
function createMessageContainer(parent, position) {
    var messageContainer = document.createElement("div");
    messageContainer.setAttribute("data-position", position);
    messageContainer.className =
        "dhx_message-container " +
            "dhx_message-container--" +
            position +
            (parent === document.body ? " dhx_message-container--in-body" : "");
    return messageContainer;
}
function onExpire(node, fromClick) {
    if (fromClick) {
        clearTimeout(nodeTimeout.get(node));
    }
    var container = node.parentNode;
    var position = container.getAttribute("data-position");
    var parent = container.parentNode;
    var messageContainerInfo = containers.get(parent);
    if (!messageContainerInfo) {
        return;
    }
    var positionInfo = messageContainerInfo[position];
    if (!positionInfo) {
        return;
    }
    var stack = positionInfo.stack;
    var index = stack.indexOf(node);
    if (index !== -1) {
        container.removeChild(node);
        stack.splice(index, 1);
        if (stack.length === 0) {
            parent.removeChild(container);
        }
        return;
    }
}
function message(props) {
    var _a;
    if (typeof props === "string") {
        props = { text: props };
    }
    props.position = props.position || types_1.MessageContainerPosition.topRight;
    var messageBox = document.createElement("div");
    messageBox.className = "dhx_widget dhx_message " + (props.css || "");
    messageBox.setAttribute("role", "alert");
    var textId = props.text && core_1.uid();
    textId && messageBox.setAttribute("aria-describedby", textId);
    if (props.html) {
        messageBox.innerHTML = props.html;
    }
    else {
        messageBox.innerHTML = "<span class=\"dhx_message__text\" id=" + textId + ">" + props.text + "</span>\n\t\t" + (props.icon ? "<span class=\"dhx_message__icon dxi " + props.icon + "\"></span>" : "");
    }
    var parent = props.node ? html_1.toNode(props.node) : document.body;
    var position = getComputedStyle(parent).position;
    if (position === "static") {
        parent.style.position = "relative";
    }
    var messageContainerInfo = containers.get(parent);
    if (!messageContainerInfo) {
        containers.set(parent, (_a = {},
            _a[props.position] = {
                stack: [],
                container: createMessageContainer(parent, props.position),
            },
            _a));
    }
    else if (!messageContainerInfo[props.position]) {
        messageContainerInfo[props.position] = {
            stack: [],
            container: createMessageContainer(parent, props.position),
        };
    }
    var _b = containers.get(parent)[props.position], stack = _b.stack, container = _b.container;
    if (stack.length === 0) {
        parent.appendChild(container);
    }
    stack.push(messageBox);
    container.appendChild(messageBox);
    if (props.expire) {
        var timeout = setTimeout(function () { return onExpire(messageBox); }, props.expire);
        nodeTimeout.set(messageBox, timeout);
    }
    messageBox.onclick = function () { return onExpire(messageBox, true); };
}
exports.message = message;


/***/ }),

/***/ "../ts-message/sources/tooltip.ts":
/*!****************************************!*\
  !*** ../ts-message/sources/tooltip.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-message/sources/types.ts");
var DEFAULT_SHOW_DELAY = 750;
var DEFAULT_HIDE_DELAY = 200;
function findPosition(targetRect, position, width, height) {
    var margin = 8; // margin top/bot, left/right
    var pos;
    var left;
    var top;
    switch (position) {
        case types_1.Position.center:
            left = targetRect.left + window.pageXOffset + (targetRect.width - width) / 2;
            if (left + margin < window.pageXOffset) {
                left = targetRect.left + window.pageXOffset;
            }
            top = targetRect.top + window.pageYOffset + (targetRect.height - height) / 2;
            pos = types_1.RealPosition.center;
            return { left: left, top: top, pos: pos };
        case types_1.Position.right:
            pos = types_1.RealPosition.right;
            left = targetRect.right + window.pageXOffset;
            if (left + width + margin > window.innerWidth + window.pageXOffset) {
                // set left
                left = window.pageXOffset + targetRect.left - width;
                pos = types_1.RealPosition.left;
            }
            top = window.pageYOffset + targetRect.top + (targetRect.height - height) / 2;
            return { left: left, top: top, pos: pos };
        case types_1.Position.bottom:
        default:
            left = window.pageXOffset + targetRect.left + (targetRect.width - width) / 2;
            if (left + width > window.innerWidth + window.pageXOffset) {
                left = window.innerWidth + window.pageXOffset - width;
            }
            else if (left < 0) {
                left = 0;
            }
            pos = types_1.RealPosition.bottom;
            top = window.pageYOffset + targetRect.bottom;
            if (top + height + margin > window.innerHeight + window.pageYOffset) {
                // set top
                top = window.pageYOffset + targetRect.top - height;
                pos = types_1.RealPosition.top;
            }
            return { left: left, top: top, pos: pos };
    }
}
exports.findPosition = findPosition;
// tooltip init
var tooltipBox = document.createElement("div");
var tooltipText = document.createElement("span");
tooltipText.className = "dhx_tooltip__text";
tooltipBox.appendChild(tooltipText);
tooltipBox.setAttribute("role", "tooltip");
tooltipBox.style.position = "absolute";
var lastNode = null;
var isActive = false;
var hideTimeout = null;
var showTimeout = null;
var activeListenersDestructor;
function getZIndex(node) {
    if (node &&
        node.classList.contains("dhx_popup--window") &&
        node.classList.contains("dhx_popup--window_active")) {
        return 2147483647;
    }
    if ((node === null || node === void 0 ? void 0 : node.classList.contains("dhx_popup--window")) || (node === null || node === void 0 ? void 0 : node.classList.contains("dhx_popup--window_modal"))) {
        return 2147483646;
    }
    if (node && node.offsetParent) {
        return getZIndex(node.offsetParent);
    }
    return null;
}
exports.getZIndex = getZIndex;
function showTooltip(node, text, position, css, force, htmlEnable) {
    if (force === void 0) { force = false; }
    var rects = node.getBoundingClientRect();
    if (htmlEnable) {
        tooltipText.innerHTML = text;
    }
    else {
        tooltipText.textContent = text;
    }
    document.body.appendChild(tooltipBox);
    tooltipBox.className = "dhx_widget dhx_tooltip" + (force ? " dhx_tooltip--forced" : "");
    var _a = tooltipBox.getBoundingClientRect(), width = _a.width, height = _a.height;
    var _b = findPosition(rects, position, width, height), left = _b.left, top = _b.top, pos = _b.pos;
    var zIndex = getZIndex(node);
    if (zIndex) {
        tooltipBox.style.zIndex = zIndex.toString();
    }
    switch (pos) {
        case types_1.RealPosition.bottom:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.top:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.left:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.right:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.center:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
    }
    tooltipBox.className += " dhx_tooltip--" + pos + " " + (css || "");
    isActive = true;
    if (!force) {
        setTimeout(function () {
            tooltipBox.className += " dhx_tooltip--animate";
        });
    }
}
function hideTooltip(delay) {
    if (lastNode) {
        hideTimeout = setTimeout(function () {
            document.body.removeChild(tooltipBox);
            isActive = false;
            hideTimeout = null;
        }, delay || DEFAULT_HIDE_DELAY);
    }
}
function addListeners(node, text, config) {
    var force = config.force, showDelay = config.showDelay, hideDelay = config.hideDelay, position = config.position, css = config.css, htmlEnable = config.htmlEnable;
    if (!force) {
        showTimeout = setTimeout(function () {
            showTooltip(node, text, position || types_1.Position.bottom, css, false, htmlEnable);
        }, showDelay || DEFAULT_SHOW_DELAY);
    }
    var hide = function () {
        if (isActive) {
            hideTooltip(hideDelay);
        }
        clearTimeout(showTimeout);
        node.removeEventListener("mouseleave", hide);
        node.removeEventListener("blur", hide);
        document.removeEventListener("mousedown", hide);
        lastNode = null;
        activeListenersDestructor = null;
    };
    if (force) {
        showTooltip(node, text, position, css, force, htmlEnable);
    }
    node.addEventListener("mouseleave", hide);
    node.addEventListener("blur", hide);
    document.addEventListener("mousedown", hide);
    activeListenersDestructor = hide;
}
// default
function tooltip(text, config) {
    var node = html_1.toNode(config.node);
    if (node === lastNode) {
        return;
    }
    if (activeListenersDestructor) {
        activeListenersDestructor();
        activeListenersDestructor = null;
    }
    lastNode = node;
    if (hideTimeout) {
        clearTimeout(hideTimeout);
        hideTimeout = null;
        addListeners(node, text, __assign(__assign({}, config), { force: true }));
    }
    else {
        addListeners(node, text, config);
    }
}
exports.tooltip = tooltip;
function _mousemove(e) {
    var node = html_1.locateNode(e, "dhx_tooltip_text");
    if (!node) {
        return;
    }
    tooltip(node.getAttribute("dhx_tooltip_text"), {
        position: node.getAttribute("dhx_tooltip_position") || types_1.Position.bottom,
        node: node,
    });
}
function enableTooltip() {
    document.addEventListener("mousemove", _mousemove);
}
exports.enableTooltip = enableTooltip;
function disableTooltip() {
    document.removeEventListener("mousemove", _mousemove);
}
exports.disableTooltip = disableTooltip;


/***/ }),

/***/ "../ts-message/sources/types.ts":
/*!**************************************!*\
  !*** ../ts-message/sources/types.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RealPosition;
(function (RealPosition) {
    RealPosition["left"] = "left";
    RealPosition["right"] = "right";
    RealPosition["top"] = "top";
    RealPosition["bottom"] = "bottom";
    RealPosition["center"] = "center";
})(RealPosition = exports.RealPosition || (exports.RealPosition = {}));
var Position;
(function (Position) {
    Position["right"] = "right";
    Position["bottom"] = "bottom";
    Position["center"] = "center";
})(Position = exports.Position || (exports.Position = {}));
var MessageContainerPosition;
(function (MessageContainerPosition) {
    MessageContainerPosition["topLeft"] = "top-left";
    MessageContainerPosition["topRight"] = "top-right";
    MessageContainerPosition["bottomLeft"] = "bottom-left";
    MessageContainerPosition["bottomRight"] = "bottom-right";
})(MessageContainerPosition = exports.MessageContainerPosition || (exports.MessageContainerPosition = {}));


/***/ }),

/***/ "../ts-navbar/index.ts":
/*!*****************************!*\
  !*** ../ts-navbar/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Navbar */ "../ts-navbar/sources/Navbar.ts"));
__export(__webpack_require__(/*! ./sources/itemfactory */ "../ts-navbar/sources/itemfactory.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-navbar/sources/types.ts"));


/***/ }),

/***/ "../ts-navbar/sources/Navbar.ts":
/*!**************************************!*\
  !*** ../ts-navbar/sources/Navbar.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var KeyManager_1 = __webpack_require__(/*! @dhx/ts-common/KeyManager */ "../ts-common/KeyManager.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-navbar/sources/types.ts");
function addInGroups(groups, item) {
    if (groups[item.group]) {
        if (item.active) {
            groups[item.group].active = item.id;
        }
        groups[item.group].elements.push(item.id);
    }
    else {
        groups[item.group] = {
            active: item.active ? item.id : null,
            elements: [item.id],
        };
    }
}
var Navbar = /** @class */ (function (_super) {
    __extends(Navbar, _super);
    function Navbar(element, config) {
        var _this = 
        // super(element, extend({}, config));
        _super.call(this, element, config) || this;
        _this._isContextMenu = false;
        _this._documentHaveListener = false;
        _this.config = core_1.extend({
            rootId: (typeof element === "string" && element) || _this._uid,
        }, config);
        _this._rootItem = {};
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({ rootId: _this.config.rootId }, _this.events);
        }
        else if (_this.config.data && _this.config.data.events) {
            _this.data = _this.config.data;
            _this.events = _this.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({ rootId: _this.config.rootId }, _this.events);
        }
        _this._documentClick = function (e) {
            if (_this._documentHaveListener) {
                var element_1 = html_1.locateNode(e);
                var root = _this.data.getRoot();
                var id = element_1 && element_1.getAttribute("dhx_id");
                var parent_1 = _this.data.getParent(id);
                var supportsTouch = "ontouchstart" in window || navigator.msMaxTouchPoints;
                document.removeEventListener("mousedown", _this._documentClick);
                _this._documentHaveListener = false;
                if ((((supportsTouch && !element_1) || !_this._isContextMenu) &&
                    (root === parent_1 || !parent_1 || !_this.data.getItem(id))) ||
                    !parent_1 ||
                    !_this.data.getItem(id)) {
                    _this._close(e);
                }
            }
        };
        _this._currentRoot = _this.data.getRoot();
        _this._factory = _this._getFactory();
        _this._initHandlers();
        // this._init();
        _this._keyManager = new KeyManager_1.KeyManager(function (_, focusId) { return focusId === _this._uid; });
        _this._initEvents();
        if (Array.isArray(_this.config.data)) {
            _this.data.parse(_this.config.data);
        }
        return _this;
    }
    Navbar.prototype.paint = function () {
        _super.prototype.paint.call(this);
        if (this._isContextMenu && !this._vpopups) {
            this._init();
        }
        if (this._vpopups) {
            this._vpopups.redraw();
        }
    };
    Navbar.prototype.disable = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "disabled", true);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "disabled", true);
            });
        }
    };
    Navbar.prototype.enable = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "disabled", false);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "disabled", false);
            });
        }
    };
    Navbar.prototype.isDisabled = function (id) {
        var item = this.data.getItem(id);
        if (item) {
            return item.disabled || false;
        }
    };
    Navbar.prototype.show = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "hidden", false);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "hidden", false);
            });
        }
    };
    Navbar.prototype.hide = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "hidden", true);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "hidden", true);
            });
        }
    };
    Navbar.prototype.destructor = function () {
        this.events.clear();
        this._keyManager && this._keyManager.destructor();
        this._vpopups && !!this._vpopups.node && this._vpopups.unmount();
        this.unmount();
    };
    Navbar.prototype.select = function (id, unselect) {
        var _this = this;
        if (unselect === void 0) { unselect = true; }
        if (!id) {
            throw new Error("Function argument cannot be empty, for more info check documentation https://docs.dhtmlx.com");
        }
        unselect && this.unselect();
        this.data.update(id, { active: true });
        this.data.eachParent(id, function (parent) {
            _this.data.update(parent.id, { active: true });
        });
    };
    Navbar.prototype.unselect = function (id) {
        var _this = this;
        if (!id) {
            this.data.forEach(function (item) {
                _this.data.update(item.id, { active: false });
            });
        }
        else {
            this.data.update(id, { active: false });
            this.data.eachChild(id, function (parent) {
                _this.data.update(parent.id, { active: false });
            });
        }
    };
    Navbar.prototype.isSelected = function (id) {
        if (!id || !this.data.getItem(id)) {
            return;
        }
        return !!this.data.getItem(id).active;
    };
    Navbar.prototype.getSelected = function () {
        var selected = [];
        this.data.forEach(function (item) {
            item.active && selected.push(item.id);
        });
        return selected;
    };
    Navbar.prototype._customHandlers = function () {
        return {};
    };
    Navbar.prototype._close = function (e) {
        var _this = this;
        if (!this._popupActive || !this.events.fire(types_1.NavigationBarEvents.beforeHide, [this._activeMenu, e])) {
            return;
        }
        if (this._activeParents) {
            this._activeParents.forEach(function (parentId) { return _this.data.exists(parentId) && _this.data.update(parentId, { $activeParent: false }); });
        }
        if (this.config.navigationType === "click") {
            this._isActive = false;
        }
        clearTimeout(this._currentTimeout);
        this._popupActive = false;
        this._activeMenu = null;
        !!this._vpopups.node && this._vpopups.unmount();
        this._vpopups = null;
        this.events.fire(types_1.NavigationBarEvents.afterHide, [e]);
        this.paint();
    };
    Navbar.prototype._init = function () {
        var _this = this;
        var render = function () {
            return dom_1.el("div", {
                dhx_widget_id: _this._uid,
                class: (_this._isContextMenu ? " dhx_context-menu" : "") + " " + (_this.config.css
                    ? _this.config.css
                        .split(" ")
                        .map(function (i) { return i + "--context-menu"; })
                        .join(" ")
                    : ""),
                onmousemove: _this._handlers.onmousemove,
                onmouseleave: _this._handlers.onmouseleave,
                onclick: _this._handlers.onclick,
                onmousedown: _this._handlers.onmousedown,
            }, _this._drawPopups());
        };
        this._vpopups = dom_1.create({
            render: render,
        });
        this._vpopups.mount(document.body);
    };
    Navbar.prototype._initHandlers = function () {
        var _this = this;
        /*
            for navigation type click:
            first click open menu, _isActive = true
            after navigation use mousemove
            can be closed after outer click or menu leaf item click
        */
        this._isActive = this.config.navigationType !== "click";
        this._handlers = __assign({ onmousemove: function (e) {
                if (!_this._isActive) {
                    return;
                }
                var elem = html_1.locateNode(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("dhx_id");
                if (_this._activeMenu !== id) {
                    if (_this.data.haveItems(id)) {
                        if (!_this._vpopups) {
                            _this._init();
                        }
                        var position = html_1.getRealPosition(elem);
                        _this.data.update(id, { $position: position }, false);
                    }
                    _this._activeItemChange(id, e);
                }
            }, onmouseleave: function (e) {
                if (_this.config.navigationType !== "click") {
                    // maybe all time when mouse leave close menu
                    if (_this._popupActive) {
                        var element = html_1.locateNode(e, "dhx_id", "relatedTarget");
                        if (element) {
                            var id = element.getAttribute("dhx_id");
                            if (!_this.data.getItem(id)) {
                                _this._close(e);
                            }
                        }
                        else {
                            _this._close(e);
                        }
                    }
                    _this._activeItemChange(null, e);
                }
            }, onclick: function (e) {
                var element = html_1.locateNode(e);
                if (!element) {
                    return;
                }
                var id = element.getAttribute("dhx_id");
                if (_this.isDisabled(id)) {
                    return;
                }
                var item = _this.data.getItem(id);
                if (item.multiClick) {
                    return;
                }
                if (_this.data.haveItems(id)) {
                    if (!_this._vpopups) {
                        _this._init();
                    }
                    if (id === _this._currentRoot) {
                        return;
                    }
                    if (!_this._isActive) {
                        _this._isActive = true;
                    }
                    _this._setRoot(id);
                    var position = html_1.getRealPosition(element);
                    _this.data.update(id, { $position: position }, false);
                    _this._activeItemChange(id, e);
                    _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                }
                else {
                    switch (item.type) {
                        case "input":
                        case "title":
                            break;
                        case "menuItem":
                        case "selectButton":
                            _this._onMenuItemClick(id, e);
                            break;
                        case "imageButton":
                        case "button":
                        case "customButton":
                        case "customHTML":
                        case "navItem":
                            if (item.twoState) {
                                _this.data.update(item.id, { active: !item.active });
                            }
                            _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                            _this._close(e);
                            break;
                        default:
                            _this._close(e);
                    }
                }
            }, onmousedown: function (e) {
                var element = html_1.locateNode(e);
                if (!element) {
                    return;
                }
                var id = element.getAttribute("dhx_id");
                var item = _this.data.getItem(id);
                if (!item.multiClick) {
                    return;
                }
                var fireTime = 365;
                var timeout;
                var fireAction = function () {
                    _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                    if (fireTime > 50) {
                        fireTime -= 55;
                    }
                    timeout = setTimeout(fireAction, fireTime);
                };
                var mouseup = function () {
                    clearTimeout(timeout);
                    document.removeEventListener("mouseup", mouseup);
                };
                fireAction();
                document.addEventListener("mouseup", mouseup);
            } }, this._customHandlers());
    };
    Navbar.prototype._initEvents = function () {
        var _this = this;
        var timeout = null;
        this.data.events.on(types_1.DataEvents.change, function () {
            _this.paint();
            if (timeout) {
                clearTimeout(timeout);
            }
            timeout = setTimeout(function () {
                var groups = {};
                _this.data.eachChild(_this.data.getRoot(), function (item) {
                    if (item.group) {
                        item.twoState = true;
                        addInGroups(groups, item);
                    }
                }, true);
                _this._groups = groups;
                _this._resetHotkeys();
                timeout = null;
                _this.paint();
            }, 100);
        });
        this.events.on(types_1.NavigationBarEvents.click, function (id) {
            var item = _this.data.getItem(id);
            var parent = _this.data.getItem(item.parent);
            if (parent && parent.type === "selectButton") {
                _this.data.update(item.parent, { value: item.value, icon: item.icon });
            }
            if (item.group) {
                var group = _this._groups[item.group];
                if (group.active) {
                    _this.data.update(group.active, { active: false });
                }
                group.active = item.id;
                _this.data.update(item.id, { active: true });
            }
        });
        this.events.on(types_1.NavigationBarEvents.inputChange, function (id, newValue) {
            _this.data.update(id, { value: newValue });
        });
        this._customInitEvents();
    };
    Navbar.prototype._getMode = function (item, root, _active) {
        if (_active === void 0) { _active = false; }
        return item.parent === root ? "bottom" : "right";
    };
    Navbar.prototype._drawMenuItems = function (id, asMenuItem) {
        var _this = this;
        if (asMenuItem === void 0) { asMenuItem = true; }
        return this.data.map(function (item) { return _this._factory(item, asMenuItem); }, id, false);
    };
    Navbar.prototype._setRoot = function (_id) {
        return; // need only for toolbar
    };
    Navbar.prototype._getParents = function (id, root) {
        var parentIds = [];
        var afterRoot = false;
        var currentItem = this.data.getItem(id);
        var disabled = currentItem && currentItem.disabled;
        this.data.eachParent(id, function (item) {
            if (item.id === root) {
                parentIds.push(item.id);
                afterRoot = true;
            }
            else if (!afterRoot) {
                parentIds.push(item.id);
            }
        }, !disabled);
        if (this._isContextMenu && this._activePosition) {
            parentIds.push(root);
        }
        return parentIds;
    };
    Navbar.prototype._listenOuterClick = function () {
        if (this._documentHaveListener) {
            return;
        }
        document.addEventListener("mousedown", this._documentClick, true);
        this._documentHaveListener = true;
    };
    Navbar.prototype._customInitEvents = function () {
        return;
    };
    Navbar.prototype._drawPopups = function () {
        var _this = this;
        var id = this._activeMenu;
        if (!this._isContextMenu && !id) {
            return null;
        }
        var rootNode = this.getRootNode();
        var offsetParent = rootNode && rootNode.offsetParent && rootNode.offsetParent.offsetParent;
        var zIndex = null;
        if (offsetParent &&
            offsetParent.classList.contains("dhx_popup--window") &&
            offsetParent.classList.contains("dhx_popup--window_active")) {
            zIndex = 2147483647;
        }
        var root = this._currentRoot;
        if (this._isContextMenu && !this._activePosition) {
            return null;
        }
        var parentIds = this._getParents(id, root);
        this._activeParents = parentIds;
        parentIds.forEach(function (parentId) {
            return _this.data.exists(parentId) && _this.data.update(parentId, { $activeParent: true }, false);
        });
        return parentIds
            .map(function (itemId) {
            if (!_this.data.haveItems(itemId)) {
                return null;
            }
            var getAriaAttrs = function (item) { return ({
                role: "menu",
                "aria-labeledby": item.id,
                "aria-live": "polite",
            }); };
            var item = _this.data.getItem(itemId) || _this._rootItem; // for root item
            _this._popupActive = true;
            return dom_1.el("ul", __assign({ class: "dhx_widget dhx_menu" + (_this.config.menuCss ? " " + _this.config.menuCss : ""), _key: itemId, _hooks: {
                    didInsert: function (vnode) {
                        var _a = vnode.el.getBoundingClientRect(), width = _a.width, height = _a.height;
                        var position = _this._isContextMenu && _this._activePosition && itemId === root
                            ? _this._activePosition
                            : item.$position;
                        var mode = _this._getMode(item, root, position === _this._activePosition);
                        var style = html_1.calculatePosition(position, {
                            mode: mode,
                            width: width,
                            height: height,
                        });
                        item.$style = __assign(__assign({}, style), { zIndex: _this._activePosition
                                ? _this._activePosition.zIndex || zIndex
                                : zIndex });
                        vnode.patch({ style: item.$style });
                    },
                    didRecycle: function (_, vnode) {
                        if (_this._isContextMenu && _this._activePosition && itemId === root) {
                            var _a = vnode.el.getBoundingClientRect(), width = _a.width, height = _a.height;
                            var style = html_1.calculatePosition(_this._activePosition, {
                                mode: _this._getMode(item, root, true),
                                width: width,
                                height: height,
                            });
                            item.$style = __assign(__assign({}, style), { zIndex: _this._activePosition.zIndex || zIndex });
                            vnode.patch({ style: item.$style });
                        }
                    },
                }, tabindex: 0, style: item.$style || {
                    position: "absolute",
                } }, getAriaAttrs(item)), _this._drawMenuItems(itemId));
        })
            .reverse();
    };
    Navbar.prototype._onMenuItemClick = function (id, e) {
        var item = this.data.getItem(id);
        if (item.disabled) {
            return;
        }
        if (item.twoState) {
            this.data.update(item.id, { active: !item.active });
        }
        this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
        this._close(e);
    };
    Navbar.prototype._activeItemChange = function (id, e) {
        var _this = this;
        if (this._activeParents) {
            var parentIds_1 = this._getParents(id, this._currentRoot);
            this._activeParents.forEach(function (parentId) {
                if (_this.data.exists(parentId) && !parentIds_1.includes(parentId)) {
                    _this.data.update(parentId, { $activeParent: false }, false);
                }
            });
        }
        if (id && !this._documentHaveListener) {
            this._listenOuterClick();
        }
        if (id && this.data.haveItems(id)) {
            if (this._activeMenu !== id || !this._popupActive) {
                this.events.fire(types_1.NavigationBarEvents.openMenu, [id]);
            }
            clearTimeout(this._currentTimeout);
            this.paint();
        }
        else {
            clearTimeout(this._currentTimeout);
            this._currentTimeout = setTimeout(function () { return _this.paint(); }, 400);
        }
        this._activeMenu = id;
    };
    Navbar.prototype._resetHotkeys = function () {
        var _this = this;
        this._keyManager.removeHotKey(null, this);
        this.data.map(function (item) {
            if (item.hotkey) {
                _this._keyManager.addHotKey(item.hotkey, function () { return _this._onMenuItemClick(item.id, null); });
            }
        });
    };
    Navbar.prototype._setProp = function (id, key, value) {
        var _a;
        var _this = this;
        if (Array.isArray(id)) {
            id.forEach(function (itemId) {
                var _a;
                return _this.data.update(itemId, (_a = {}, _a[key] = value, _a));
            });
        }
        else {
            this.data.update(id, (_a = {}, _a[key] = value, _a));
        }
    };
    return Navbar;
}(view_1.View));
exports.Navbar = Navbar;


/***/ }),

/***/ "../ts-navbar/sources/elements/button.ts":
/*!***********************************************!*\
  !*** ../ts-navbar/sources/elements/button.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-navbar/sources/elements/helpers.ts");
function button(item, widgetName) {
    var getAriaAttrs = function (item) {
        var isItemActivated = item.active || item.$activeParent;
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
            "aria-label": item.value || item.tooltip || item.id || "" + (" " + (item.count || "")),
        };
        if (item.items) {
            // as menu
            attrs["id"] = item.id;
            attrs["aria-haspopup"] = "menu"; // menu has hot keys, listbox doesn't have
            if (isItemActivated) {
                attrs["aria-expanded"] = "true";
            }
        }
        return attrs;
    };
    var isIconButton = item.icon && !item.value;
    var counterClass = isIconButton ? " dhx_navbar-count--absolute" : " dhx_navbar-count--button-inline";
    return dom_1.el("button.dhx_button", __assign({ class: helpers_1.getNavbarButtonCSS(item, widgetName), dhx_id: item.id, disabled: item.disabled, type: "button" }, getAriaAttrs(item)), [
        item.icon ? helpers_1.getIcon(item.icon, "button") : null,
        item.html
            ? dom_1.el("div.dhx_button__text", { ".innerHTML": item.html })
            : item.value && dom_1.el("span.dhx_button__text", item.value),
        item.count > 0 && helpers_1.getCount(item, counterClass, isIconButton),
        item.value && item.$openIcon
            ? dom_1.el("span.dhx_button__icon.dhx_button__icon--menu.dxi.dxi-menu-right", {
                "aria-hidden": "true",
            })
            : null,
        item.loading &&
            dom_1.el("span.dhx_button__loading", {
                "aria-hidden": "true",
            }, [dom_1.el("span.dhx_button__loading-icon.dxi.dxi-loading")]),
    ]);
}
exports.button = button;


/***/ }),

/***/ "../ts-navbar/sources/elements/customHTMLButton.ts":
/*!*********************************************************!*\
  !*** ../ts-navbar/sources/elements/customHTMLButton.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
function customHTMLButton(item, widgetName, asMenuItem) {
    var getAriaAttrs = function (item) {
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
        };
        if (item.twoState || item.active || item.$activeParent) {
            attrs["aria-pressed"] = item.active || item.$activeParent ? "true" : "false";
        }
        return attrs;
    };
    var baseClass = asMenuItem ? " dhx_button dhx_menu-button" : " dhx_button dhx_nav-menu-button";
    return dom_1.el("button", __assign({ class: "dhx_custom-button" + baseClass + (item.$activeParent ? baseClass + "--active" : ""), dhx_id: item.id, type: "button", ".innerHTML": item.html }, getAriaAttrs(item)), item.html ? "" : item.value);
}
exports.customHTMLButton = customHTMLButton;


/***/ }),

/***/ "../ts-navbar/sources/elements/datePicker.ts":
/*!***************************************************!*\
  !*** ../ts-navbar/sources/elements/datePicker.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var ts_calendar_1 = __webpack_require__(/*! @dhx/ts-calendar */ "../ts-calendar/index.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-navbar/sources/types.ts");
var isInit;
var calendar;
var popup;
function onBlur(events, id) {
    events.fire(types_1.NavigationBarEvents.inputBlur, [id]);
}
function onFocus(events, id, e) {
    dom_1.awaitRedraw().then(function () { return popup.show(e.target); });
    events.fire(types_1.NavigationBarEvents.inputFocus, [id]);
}
function datePicker(item, events, widgetName) {
    if (!isInit) {
        popup = new ts_popup_1.Popup();
        calendar = new ts_calendar_1.Calendar(null, {
            dateFormat: item.dateFormat || "%d/%m/%y",
            value: item.value,
            css: "dhx_widget--bordered",
        });
        popup.attach(calendar);
        calendar.events.on("change", function () {
            popup.hide();
            events.fire(types_1.NavigationBarEvents.inputChange, [item.id, calendar.getValue()]);
        });
        isInit = true;
    }
    return dom_1.el(".dhx_form-group.dhx_form-group--no-message-holder.dhx_form-group--label_sr" +
        (".dhx_" + widgetName + "__input"), {
        style: {
            width: item.width ? item.width : "200px",
        },
        role: "presentation",
    }, [
        item.label && dom_1.el("label.dhx_label", { for: item.id }, item.label),
        dom_1.el(".dhx_input__wrapper", {
            role: "presentation",
        }, [
            dom_1.el("input.dhx_input", {
                placeholder: item.placeholder,
                class: item.icon ? "dhx_input--icon-padding" : "",
                value: calendar.getValue(),
                disabled: item.disabled,
                onblur: [onBlur, events, item.id],
                onfocus: [onFocus, events, item.id],
                dhx_id: item.id,
                readOnly: true,
                _hooks: {
                    didInsert: function (node) {
                        if (events) {
                            events.fire(types_1.NavigationBarEvents.inputCreated, [item.id, node.el]);
                        }
                    },
                },
                _key: item.id,
                "aria-label": item.label ||
                    item.helpMessage ||
                    "type " + (item.placeholder ? "text like " + item.placeholder : "text"),
            }),
            item.icon
                ? dom_1.el(".dhx_input__icon", {
                    class: item.icon,
                    "aria-hidden": "true",
                })
                : null,
        ]),
    ]);
}
exports.datePicker = datePicker;


/***/ }),

/***/ "../ts-navbar/sources/elements/helpers.ts":
/*!************************************************!*\
  !*** ../ts-navbar/sources/elements/helpers.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
function getCount(item, widgetClass, isLimited) {
    var countColor = {
        danger: " dhx_navbar-count--color_danger",
        secondary: " dhx_navbar-count--color_secondary",
        primary: " dhx_navbar-count--color_primary",
        success: " dhx_navbar-count--color_success",
    }[item.countColor] || " dhx_navbar-count--color_danger";
    return dom_1.el(".dhx_navbar-count", {
        class: widgetClass +
            countColor +
            (!isLimited && parseInt(item.count, 10) > 99 ? " dhx_navbar-count--overlimit" : ""),
    }, isLimited && parseInt(item.count, 10) > 99 ? "99+" : item.count);
}
exports.getCount = getCount;
function getIcon(iconName, type) {
    if (iconName === void 0) { iconName = ""; }
    if (iconName.startsWith("dxi")) {
        iconName = "dxi " + iconName;
    }
    return dom_1.el("span", {
        class: "dhx_" + type + "__icon " + iconName,
        "aria-hidden": "true",
    });
}
exports.getIcon = getIcon;
var getNavbarItemClass = function (widgetName, item, asMenuItem) {
    var baseClassName = "";
    var resultClassName = "";
    if (asMenuItem) {
        baseClassName = "dhx_menu-item";
    }
    else {
        baseClassName = "dhx_" + widgetName + "__item";
    }
    resultClassName = baseClassName + (item.css ? " " + item.css : "");
    if (item.type === "spacer" || item.type === "separator") {
        resultClassName += " " + baseClassName + "--" + item.type;
    }
    if (item.type === "button" && widgetName === "sidebar" && !item.icon) {
        resultClassName += " dhx_navbar-item--colapse_hidden";
    }
    return resultClassName;
};
function navbarComponentMixin(widgetName, item, asMenuItem, body) {
    var getAriaAttrs = function (type) {
        var attrs = {
            role: "none",
        };
        if (type === "separator") {
            attrs.role = "separator";
            attrs["aria-orientation"] = "vertical";
        }
        return attrs;
    };
    var itemClass = getNavbarItemClass(widgetName, item, asMenuItem);
    var hasRibbonSize = widgetName === "ribbon" && (item.type === "navItem" || item.type === "imageButton");
    return dom_1.el("li", __assign({ _key: item.id, class: itemClass +
            (item.icon && !item.value && hasRibbonSize ? " dhx_ribbon__item--icon" : "") +
            (item.src && !item.value && hasRibbonSize ? " dhx_ribbon__item--icon" : "") +
            (item.size && hasRibbonSize ? " dhx_ribbon__item--" + item.size : ""), ".innerHTML": item.type === "customHTML" ? item.html : undefined, dhx_id: item.type === "customHTML" ? item.id : undefined }, getAriaAttrs(item.type)), item.type !== "customHTML" ? [body] : undefined);
}
exports.navbarComponentMixin = navbarComponentMixin;
function getNavbarButtonCSS(_a, widgetName) {
    var color = _a.color, size = _a.size, view = _a.view, full = _a.full, icon = _a.icon, circle = _a.circle, loading = _a.loading, value = _a.value, active = _a.active, count = _a.count;
    var colorsCss = {
        danger: " dhx_button--color_danger",
        secondary: " dhx_button--color_secondary",
        primary: " dhx_button--color_primary",
        success: " dhx_button--color_success",
    }[color] || " dhx_button--color_primary";
    var sizeCss = {
        small: " dhx_button--size_small",
        medium: " dhx_button--size_medium",
    }[size] || " dhx_button--size_medium";
    var viewCss = {
        flat: " dhx_button--view_flat",
        link: " dhx_button--view_link",
    }[view] || " dhx_button--view_flat";
    var fullCss = full ? " dhx_button--width_full" : "";
    var circleCss = circle ? " dhx_button--circle" : "";
    var loadingCss = loading ? " dhx_button--loading" : "";
    var iconViewCss = icon && !value ? " dhx_button--icon" : "";
    var activeCss = active ? " dhx_button--active" : "";
    var countCss = core_1.isDefined(count) ? " dhx_button--count" : "";
    return (colorsCss + sizeCss + viewCss + fullCss + circleCss + loadingCss + activeCss + iconViewCss + countCss);
}
exports.getNavbarButtonCSS = getNavbarButtonCSS;


/***/ }),

/***/ "../ts-navbar/sources/elements/imageButton.ts":
/*!****************************************************!*\
  !*** ../ts-navbar/sources/elements/imageButton.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-navbar/sources/elements/helpers.ts");
function imageButton(item, widgetName) {
    var getAriaAttrs = function (item) {
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
        };
        if (item.twoState || item.active) {
            attrs["aria-pressed"] = item.active ? "true" : "false";
        }
        if (!item.value && item.src && item.tooltip) {
            attrs["aria-label"] = item.tooltip + " " + (item.count || "");
        }
        return attrs;
    };
    var baseClass = "dhx_" + widgetName + "-button-image";
    var isRibbon = widgetName === "ribbon";
    return dom_1.el("button.dhx_button", __assign({ class: baseClass +
            (item.size ? " " + baseClass + "--" + item.size : "") +
            (!item.value && item.src ? " " + baseClass + "--icon" : "") +
            (isRibbon && item.$openIcon ? " " + baseClass + "--select" : "") +
            (item.active ? " " + baseClass + "--active" : ""), dhx_id: item.id, type: "button" }, getAriaAttrs(item)), [
        isRibbon &&
            item.value &&
            item.$openIcon &&
            dom_1.el("span.dxi.dxi-menu-right", {
                class: baseClass + "__caret",
                "aria-hidden": "true",
            }),
        item.html
            ? dom_1.el("div", {
                class: baseClass + "__text",
                ".innerHTML": item.html,
            })
            : item.value &&
                dom_1.el("span", {
                    class: baseClass + "__text",
                }, item.value),
        item.src &&
            dom_1.el("span", {
                class: baseClass + "__image",
                style: { backgroundImage: "url(" + item.src + ")" },
                role: "presentation",
            }),
        item.count > 0 && helpers_1.getCount(item, baseClass + "__count", true),
    ]);
}
exports.imageButton = imageButton;


/***/ }),

/***/ "../ts-navbar/sources/elements/input.ts":
/*!**********************************************!*\
  !*** ../ts-navbar/sources/elements/input.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-navbar/sources/types.ts");
function onBlur(events, id) {
    events.fire(types_1.NavigationBarEvents.inputBlur, [id]);
}
function onFocus(events, id) {
    events.fire(types_1.NavigationBarEvents.inputFocus, [id]);
}
function onInput(events, id, e) {
    events.fire(types_1.NavigationBarEvents.inputChange, [id, e.target.value]);
}
function input(item, events, widgetName) {
    return dom_1.el(".dhx_form-group.dhx_form-group--no-message-holder.dhx_form-group--label_sr" +
        (".dhx_" + widgetName + "__input"), {
        style: {
            width: item.width ? item.width : "200px",
        },
        role: "presentation",
    }, [
        item.label && dom_1.el("label.dhx_label", { for: item.id }, item.label),
        dom_1.el(".dhx_input__wrapper", {
            role: "presentation",
        }, [
            dom_1.el("input.dhx_input", {
                placeholder: item.placeholder,
                class: item.icon ? "dhx_input--icon-padding" : "",
                value: item.value,
                disabled: item.disabled,
                onblur: [onBlur, events, item.id],
                onfocus: [onFocus, events, item.id],
                oninput: [onInput, events, item.id],
                dhx_id: item.id,
                _hooks: {
                    didInsert: function (node) {
                        if (events) {
                            events.fire(types_1.NavigationBarEvents.inputCreated, [item.id, node.el]);
                        }
                    },
                },
                _key: item.id,
                "aria-label": item.label ||
                    item.helpMessage ||
                    "type " + (item.placeholder ? "text like " + item.placeholder : "text"),
            }),
            item.icon
                ? dom_1.el(".dhx_input__icon", {
                    class: item.icon,
                    "aria-hidden": "true",
                })
                : null,
        ]),
    ]);
}
exports.input = input;


/***/ }),

/***/ "../ts-navbar/sources/elements/menuItem.ts":
/*!*************************************************!*\
  !*** ../ts-navbar/sources/elements/menuItem.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-navbar/sources/elements/helpers.ts");
function menuItem(item, widgetName, asMenuItem) {
    var getAriaAttrs = function (item) {
        var attrs = {
            role: "menuitem",
            "aria-disabled": item.disabled ? "true" : "false",
        };
        if (item.items) {
            attrs["aria-haspopup"] = "true";
        }
        return attrs;
    };
    var baseClass = asMenuItem ? " dhx_menu-button" : " dhx_nav-menu-button";
    return dom_1.el("button", __assign({ class: "dhx_button" +
            baseClass +
            (item.disabled ? baseClass + "--disabled" : "") +
            (item.active || item.$activeParent ? baseClass + "--active" : ""), disabled: item.disabled, dhx_id: item.id, type: "button" }, getAriaAttrs(item)), asMenuItem
        ? [
            item.icon || item.value || item.html
                ? dom_1.el("span.dhx_menu-button__block.dhx_menu-button__block--left", [
                    item.icon &&
                        dom_1.el("span.dhx_menu-button__icon", {
                            class: item.icon,
                        }),
                    item.html
                        ? dom_1.el("div.dhx_menu-button__text", { ".innerHTML": item.html })
                        : item.value && dom_1.el("span.dhx_menu-button__text", item.value),
                ])
                : null,
            item.count > 0 || item.hotkey || item.items
                ? dom_1.el("span.dhx_menu-button__block.dhx_menu-button__block--right", [
                    item.count > 0 && helpers_1.getCount(item, " dhx_menu-button__count", false),
                    item.hotkey && dom_1.el("span.dhx_menu-button__hotkey", item.hotkey),
                    item.items && dom_1.el("span.dhx_menu-button__caret.dxi.dxi-menu-right"),
                ])
                : null,
        ]
        : [
            item.icon &&
                dom_1.el("span.dhx_menu-button__icon", {
                    class: item.icon,
                }),
            item.html
                ? dom_1.el("div.dhx_menu-button__text", { ".innerHTML": item.html })
                : item.value && dom_1.el("span.dhx_nav-menu-button__text", item.value),
        ]);
}
exports.menuItem = menuItem;


/***/ }),

/***/ "../ts-navbar/sources/elements/navItem.ts":
/*!************************************************!*\
  !*** ../ts-navbar/sources/elements/navItem.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-navbar/sources/elements/helpers.ts");
function navItem(item, widgetName, collapsed) {
    var getAriaAttrs = function (item) {
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
            "aria-label": item.value || " ",
        };
        var isItemActivated = item.active || item.$activeParent;
        if (item.type === "selectButton" || item.items) {
            attrs["id"] = item.id;
            attrs["aria-haspopup"] = "menu"; // menu has hot keys, listbox doesn't have
            if (isItemActivated) {
                attrs["aria-expanded"] = "true";
            }
        }
        else {
            if (item.twoState || isItemActivated) {
                attrs["aria-pressed"] = isItemActivated ? "true" : "false";
            }
            if (!item.value && item.icon && item.tooltip) {
                attrs["aria-label"] = item.tooltip + " " + (item.count || "");
            }
        }
        return attrs;
    };
    var baseClass = " dhx_" + widgetName + "-button";
    return dom_1.el("button", __assign({ class: "dhx_button" +
            baseClass +
            (item.active || item.$activeParent ? baseClass + "--active" : "") +
            (item.disabled ? baseClass + "--disabled" : "") +
            (item.$openIcon ? baseClass + "--select" : "") +
            (item.circle ? baseClass + "--circle" : "") +
            (item.size ? " " + baseClass + "--" + item.size : "") +
            (!item.value && item.icon ? baseClass + "--icon" : "") +
            (item.css ? " " + item.css : ""), dhx_id: item.id, disabled: item.disabled, type: "button" }, getAriaAttrs(item)), [
        item.icon &&
            dom_1.el("span", {
                class: item.icon + baseClass + "__icon",
                "aria-hidden": "true",
            }),
        item.html &&
            dom_1.el("div", {
                class: baseClass.trim() + "__html",
                ".innerHTML": item.html,
            }),
        !item.html &&
            item.value &&
            dom_1.el("span", {
                class: baseClass.trim() + "__text",
            }, item.value),
        item.count > 0 && helpers_1.getCount(item, baseClass + "__count", collapsed),
        item.$openIcon &&
            dom_1.el("span.dxi.dxi-menu-right", {
                class: baseClass + "__caret",
                "aria-hidden": "true",
            }),
    ]);
}
exports.navItem = navItem;


/***/ }),

/***/ "../ts-navbar/sources/elements/separator.ts":
/*!**************************************************!*\
  !*** ../ts-navbar/sources/elements/separator.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function separator(item, widgetName) {
    return null;
}
exports.separator = separator;


/***/ }),

/***/ "../ts-navbar/sources/elements/spacer.ts":
/*!***********************************************!*\
  !*** ../ts-navbar/sources/elements/spacer.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function spacer(item, widgetName) {
    return null;
}
exports.spacer = spacer;


/***/ }),

/***/ "../ts-navbar/sources/elements/title.ts":
/*!**********************************************!*\
  !*** ../ts-navbar/sources/elements/title.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
function title(item, widgetName) {
    return dom_1.el("span", {
        class: "dhx_navbar-title" + " dhx_navbar-title--" + widgetName,
        dhx_id: item.id,
        ".innerHTML": item.html,
        "aria-label": item.value || "",
    }, !item.html ? item.value : null);
}
exports.title = title;


/***/ }),

/***/ "../ts-navbar/sources/itemfactory.ts":
/*!*******************************************!*\
  !*** ../ts-navbar/sources/itemfactory.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var button_1 = __webpack_require__(/*! ./elements/button */ "../ts-navbar/sources/elements/button.ts");
var navItem_1 = __webpack_require__(/*! ./elements/navItem */ "../ts-navbar/sources/elements/navItem.ts");
var customHTMLButton_1 = __webpack_require__(/*! ./elements/customHTMLButton */ "../ts-navbar/sources/elements/customHTMLButton.ts");
var imageButton_1 = __webpack_require__(/*! ./elements/imageButton */ "../ts-navbar/sources/elements/imageButton.ts");
var input_1 = __webpack_require__(/*! ./elements/input */ "../ts-navbar/sources/elements/input.ts");
var menuItem_1 = __webpack_require__(/*! ./elements/menuItem */ "../ts-navbar/sources/elements/menuItem.ts");
var separator_1 = __webpack_require__(/*! ./elements/separator */ "../ts-navbar/sources/elements/separator.ts");
var spacer_1 = __webpack_require__(/*! ./elements/spacer */ "../ts-navbar/sources/elements/spacer.ts");
var title_1 = __webpack_require__(/*! ./elements/title */ "../ts-navbar/sources/elements/title.ts");
var datePicker_1 = __webpack_require__(/*! ./elements/datePicker */ "../ts-navbar/sources/elements/datePicker.ts");
var helpers_1 = __webpack_require__(/*! ./elements/helpers */ "../ts-navbar/sources/elements/helpers.ts");
function itemfactory(item, events, widgetName, props) {
    switch (item.type) {
        case "navItem":
        case "selectButton":
            return navItem_1.navItem(item, widgetName, props.collapsed);
        case "button":
            return button_1.button(item, widgetName);
        case "title":
            return title_1.title(item, widgetName);
        case "separator":
            return separator_1.separator(item, widgetName);
        case "spacer":
            return spacer_1.spacer(item, widgetName);
        case "input":
            return input_1.input(item, events, widgetName);
        case "imageButton":
            return imageButton_1.imageButton(item, widgetName);
        case "menuItem":
            return menuItem_1.menuItem(item, widgetName, props.asMenuItem);
        case "customHTMLButton":
            return customHTMLButton_1.customHTMLButton(item, widgetName, props.asMenuItem);
        case "datePicker":
            return datePicker_1.datePicker(item, events, widgetName);
        case "block":
        default:
            throw new Error("unknown item type " + item.type);
    }
}
function normalizeOpenIcon(widgetName, item, data) {
    switch (widgetName) {
        case "sidebar":
        case "context-menu":
            item.$openIcon = "right";
            break;
        case "toolbar":
            if (item.parent === data.getRoot()) {
                item.$openIcon = "right";
            }
            else {
                item.$openIcon = "bottom";
            }
            break;
        case "menu":
            if (item.parent !== this.data.getRoot()) {
                item.$openIcon = "right";
            }
            break;
        case "ribbon": {
            var parent_1 = data.getItem(item.parent);
            if (parent_1 && item.type !== "block") {
                if (parent_1.type === "block") {
                    item.$openIcon = "bottom";
                }
                else {
                    item.$openIcon = "right";
                }
            }
            break;
        }
    }
}
function createFactory(_a) {
    var defaultType = _a.defaultType, allowedTypes = _a.allowedTypes, widgetName = _a.widgetName, widget = _a.widget;
    var allowedSet = new Set();
    for (var _i = 0, allowedTypes_1 = allowedTypes; _i < allowedTypes_1.length; _i++) {
        var type = allowedTypes_1[_i];
        allowedSet.add(type);
    }
    var config = widget.config, events = widget.events, data = widget.data;
    return function (item, asMenuItem) {
        if (item.hidden) {
            return null;
        }
        if (!item.type || item.type === "button" || item.type === "navItem" || item.type === "menuItem") {
            if (!item.value && !item.icon && !item.html) {
                return null;
            }
        }
        item.type = item.type || defaultType;
        if (allowedSet && !allowedSet.has(item.type)) {
            item.type = defaultType;
        }
        if (item.type === "imageButton" && widgetName !== "ribbon") {
            item.active = false;
        }
        if (asMenuItem && item.type !== "spacer" && item.type !== "separator" && item.type !== "customHTML") {
            item.type = "menuItem";
        }
        if (data.haveItems(item.id)) {
            normalizeOpenIcon(widgetName, item, data);
        }
        if (widgetName === "toolbar" && item.items) {
            item.items.forEach(function (element) {
                if (!element.type) {
                    element.type = "menuItem";
                }
            });
        }
        var itemVNode = item.type !== "customHTML" &&
            itemfactory(item, events, widgetName, {
                asMenuItem: asMenuItem,
                collapsed: widgetName !== "sidebar" || config.collapsed,
            });
        return helpers_1.navbarComponentMixin(widgetName, item, asMenuItem, itemVNode);
    };
}
exports.createFactory = createFactory;


/***/ }),

/***/ "../ts-navbar/sources/types.ts":
/*!*************************************!*\
  !*** ../ts-navbar/sources/types.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
exports.DataEvents = ts_data_1.DataEvents;
var NavigationBarEvents;
(function (NavigationBarEvents) {
    NavigationBarEvents["inputCreated"] = "inputCreated";
    NavigationBarEvents["click"] = "click";
    NavigationBarEvents["openMenu"] = "openMenu";
    NavigationBarEvents["beforeHide"] = "beforeHide";
    NavigationBarEvents["afterHide"] = "afterHide";
    NavigationBarEvents["inputFocus"] = "inputFocus";
    NavigationBarEvents["inputBlur"] = "inputBlur";
    NavigationBarEvents["inputChange"] = "inputChange";
})(NavigationBarEvents = exports.NavigationBarEvents || (exports.NavigationBarEvents = {}));


/***/ }),

/***/ "../ts-popup/index.ts":
/*!****************************!*\
  !*** ../ts-popup/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Popup */ "../ts-popup/sources/Popup.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-popup/sources/types.ts"));


/***/ }),

/***/ "../ts-popup/sources/Popup.ts":
/*!************************************!*\
  !*** ../ts-popup/sources/Popup.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-popup/sources/types.ts");
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, null, core_1.extend({}, config)) || this;
        var popup = (_this._popup = document.createElement("div"));
        popup.className = "dhx_widget dhx_popup" + (_this.config.css ? " " + _this.config.css : "");
        popup.style.position = "absolute";
        popup.setAttribute("role", "dialog");
        popup.setAttribute("aria-modal", "true");
        popup.setAttribute("aria-live", "polite");
        _this.mount(popup, dom_1.create({
            render: function () { return _this.toVDOM(); },
        }));
        _this._clickEvent = function (e) { return _this.events.fire(types_1.PopupEvents.click, [e]); };
        _this.events = config.events || new events_1.EventSystem(_this);
        _this._isActive = false;
        return _this;
    }
    Popup.prototype.show = function (node, config, attached) {
        var _this = this;
        if (config === void 0) { config = {}; }
        if (!this.events.fire(types_1.PopupEvents.beforeShow, [node])) {
            return;
        }
        node = html_1.toNode(node);
        if (this._isActive) {
            this._setPopupSize(node, config);
            return;
        }
        if (attached) {
            this.attach(attached);
        }
        this._popup.style.left = "0";
        this._popup.style.top = "0";
        dom_1.awaitRedraw()
            .then(function () {
            _this._setPopupSize(node, config);
            _this._popup.style.position = "fixed";
            document.body.appendChild(_this._popup);
            _this._isActive = true;
        })
            .then(function () {
            _this._popup.style.position = "absolute";
            _this.events.fire(types_1.PopupEvents.afterShow, [node]);
            _this._outerClickDestructor = _this._detectOuterClick(node);
        });
    };
    Popup.prototype.hide = function () {
        this._hide(false, null);
    };
    Popup.prototype.isVisible = function () {
        return this._isActive;
    };
    Popup.prototype.attach = function (name, config) {
        this._html = null;
        if (typeof name === "object") {
            this._ui = name;
        }
        else if (typeof name === "string") {
            this._ui = new window.dhx[name](null, config);
        }
        else if (typeof name === "function") {
            if (name.prototype instanceof view_1.View) {
                this._ui = new name(null, config);
            }
            else {
                this._ui = {
                    getRootView: function () {
                        return name(config);
                    },
                };
            }
        }
        this.paint();
        return this._ui;
    };
    Popup.prototype.attachHTML = function (html) {
        this._html = html;
        this.paint();
    };
    Popup.prototype.getWidget = function () {
        return this._ui;
    };
    Popup.prototype.getContainer = function () {
        return this.getRootView().refs.content.el;
    };
    Popup.prototype.toVDOM = function () {
        var view;
        if (this._html) {
            view = dom_1.el(".dhx_popup__inner-html-content", {
                ".innerHTML": this._html,
            });
        }
        else {
            view = this._ui ? this._ui.getRootView() : null;
            if (view && view.render) {
                view = dom_1.inject(view);
            }
        }
        return dom_1.el("div", {
            class: "dhx_popup-content",
            tabindex: 0,
            onclick: this._clickEvent,
            _key: this._uid,
            _ref: "content",
        }, [view]);
    };
    Popup.prototype.destructor = function () {
        this.hide();
        if (this._outerClickDestructor) {
            this._outerClickDestructor();
        }
        this._popup = null;
    };
    Popup.prototype._setPopupSize = function (node, config, calls) {
        var _this = this;
        if (calls === void 0) { calls = 3; }
        var _a = this._popup.getBoundingClientRect(), width = _a.width, height = _a.height;
        // TODO: IE popup height = 0
        if (this._timeout) {
            clearTimeout(this._timeout);
            this._timeout = null;
        }
        if (calls && (width === 0 || height === 0)) {
            this._timeout = setTimeout(function () {
                if (!_this._isActive) {
                    return;
                }
                _this._setPopupSize(node, config, calls - 1);
                _this._timeout = null;
            });
            return;
        }
        var _b = html_1.fitPosition(node, __assign(__assign({ centering: true, mode: "bottom" }, config), { width: width,
            height: height })), left = _b.left, top = _b.top;
        this._popup.style.left = left;
        this._popup.style.top = top;
        if (config.indent && config.indent !== 0) {
            switch (config.mode) {
                case "top":
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) -
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "bottom":
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "left":
                    this._popup.style.left =
                        parseInt(this._popup.style.left.slice(0, -2), null) -
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "right":
                    this._popup.style.left =
                        parseInt(this._popup.style.left.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                default:
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
            }
        }
    };
    Popup.prototype._detectOuterClick = function (node) {
        var _this = this;
        var outerClick = function (event) {
            var target = event.target;
            while (target) {
                if (target === node || target === _this._popup) {
                    return;
                }
                target = target.parentNode;
            }
            if (_this._hide(true, event)) {
                document.removeEventListener("mousedown", outerClick);
            }
        };
        document.addEventListener("mousedown", outerClick);
        return function () { return document.removeEventListener("mousedown", outerClick); };
    };
    Popup.prototype._hide = function (fromOuterClick, e) {
        if (this._isActive) {
            if (!this.events.fire(types_1.PopupEvents.beforeHide, [fromOuterClick, e])) {
                return false;
            }
            document.body.removeChild(this._popup);
            this._isActive = false;
            if (this._outerClickDestructor) {
                this._outerClickDestructor();
                this._outerClickDestructor = null;
            }
            this.events.fire(types_1.PopupEvents.afterHide, [e]);
            return true;
        }
    };
    return Popup;
}(view_1.View));
exports.Popup = Popup;


/***/ }),

/***/ "../ts-popup/sources/types.ts":
/*!************************************!*\
  !*** ../ts-popup/sources/types.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PopupEvents;
(function (PopupEvents) {
    PopupEvents["beforeHide"] = "beforeHide";
    PopupEvents["beforeShow"] = "beforeShow";
    PopupEvents["afterHide"] = "afterHide";
    PopupEvents["afterShow"] = "afterShow";
    PopupEvents["click"] = "click";
})(PopupEvents = exports.PopupEvents || (exports.PopupEvents = {}));


/***/ }),

/***/ "../ts-richtext/sources/Manager.ts":
/*!*****************************************!*\
  !*** ../ts-richtext/sources/Manager.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = __webpack_require__(/*! ./helpers/buffer */ "../ts-richtext/sources/helpers/buffer.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-richtext/sources/types.ts");
var INACTION_DELAY = 5000;
var Manager = /** @class */ (function () {
    function Manager(editor) {
        this._editor = editor;
        this.clearChanges();
        this._buffer = new buffer_1.TextBuffer(this._editor);
    }
    Manager.prototype.execute = function (operation) {
        var _this = this;
        if (this._inactionTimer) {
            clearTimeout(this._inactionTimer);
            this._inactionTimer = null;
        }
        this._inactionTimer = setTimeout(function () {
            if (_this._editor.selection.isActive()) {
                // if editor not in focus it can call some unexpected behaviour
                _this._editor.balance();
            }
            _this._inactionTimer = null;
        }, INACTION_DELAY);
        var result;
        switch (operation.action) {
            case types_1.Action.parse:
                result = this._editor.parse(operation.data.value, operation.data.mode);
                this.clearChanges();
                return true;
            case types_1.Action.add:
                result = this._editor.add(operation.data);
                break;
            case types_1.Action.innerAdd:
                if (typeof operation.data === "string") {
                    result = this._editor.add(operation.data);
                }
                else {
                    var _a = operation.data, data = _a.data, type = _a.type;
                    switch (type) {
                        case "text":
                            result = this._editor.add(data);
                            break;
                        case "full":
                            result = this._editor.paste(JSON.stringify(data), "inner");
                            break;
                        case "textnode":
                            // tricky
                            result = this._editor.paste(JSON.stringify([
                                {
                                    textNodes: [data],
                                    style: {},
                                },
                            ]), "inner");
                            break;
                    }
                }
                break;
            case types_1.Action.remove:
                result = this._editor.remove(operation.data);
                break;
            case types_1.Action.update:
                result = this._editor.update(operation.data);
                break;
            case types_1.Action.clear:
                result = this._editor.clearStyles();
                break;
            case types_1.Action.paste:
                result = this._buffer.paste(operation.data);
                break;
            case types_1.Action.cut:
                result = this._buffer.cut(operation.data);
                break;
            case types_1.Action.copy:
                this._buffer.copy(operation.data); // it split nodes, need to update view
                return true;
            case types_1.Action.selectAll:
                break;
        }
        if (result) {
            this._change();
            return true;
        }
        if (operation.action === types_1.Action.undo) {
            return this.undo();
        }
        if (operation.action === types_1.Action.redo) {
            return this.redo();
        }
        return false;
    };
    Manager.prototype.canUndo = function () {
        return this._changes.prev !== null;
    };
    Manager.prototype.canRedo = function () {
        return this._changes.next !== null;
    };
    Manager.prototype.undo = function () {
        var change = this._changes.prev;
        if (change) {
            this._editor.setState(change.state);
            this._changes = change;
            return true;
        }
        return false;
    };
    Manager.prototype.redo = function () {
        var change = this._changes.next;
        if (change) {
            this._editor.setState(change.state);
            this._changes = change;
            return true;
        }
        return false;
    };
    Manager.prototype.clearChanges = function () {
        this._changes = {
            prev: null,
            next: null,
            state: this._editor.getState(),
        };
    };
    Manager.prototype._change = function () {
        var newChange = {
            prev: this._changes,
            next: null,
            state: this._editor.getState(),
        };
        this._changes.next = newChange;
        this._changes = newChange;
    };
    return Manager;
}());
exports.Manager = Manager;


/***/ }),

/***/ "../ts-richtext/sources/Richtext.ts":
/*!******************************************!*\
  !*** ../ts-richtext/sources/Richtext.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var constants_1 = __webpack_require__(/*! ./constants */ "../ts-richtext/sources/constants.ts");
var composition_1 = __webpack_require__(/*! ./helpers/composition */ "../ts-richtext/sources/helpers/composition.ts");
var link_1 = __webpack_require__(/*! ./helpers/link */ "../ts-richtext/sources/helpers/link.ts");
var other_1 = __webpack_require__(/*! ./helpers/other */ "../ts-richtext/sources/helpers/other.ts");
var scroll_1 = __webpack_require__(/*! ./helpers/scroll */ "../ts-richtext/sources/helpers/scroll.ts");
var statistics_1 = __webpack_require__(/*! ./helpers/statistics */ "../ts-richtext/sources/helpers/statistics.ts");
var styles_1 = __webpack_require__(/*! ./helpers/styles */ "../ts-richtext/sources/helpers/styles.ts");
var toolbar_1 = __webpack_require__(/*! ./helpers/toolbar */ "../ts-richtext/sources/helpers/toolbar.ts");
var keyhandler_1 = __webpack_require__(/*! ./keyhandler */ "../ts-richtext/sources/keyhandler.ts");
var Editor_1 = __webpack_require__(/*! ./models/Editor */ "../ts-richtext/sources/models/Editor.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-richtext/sources/types.ts");
var Richtext = /** @class */ (function (_super) {
    __extends(Richtext, _super);
    function Richtext(container, config) {
        var _a;
        var _this = _super.call(this, container, core_1.extend({
            mode: "classic",
            toolbarBlocks: [
                types_1.RTEToolbarBlock.undo,
                types_1.RTEToolbarBlock.style,
                types_1.RTEToolbarBlock.decoration,
                types_1.RTEToolbarBlock.color,
                types_1.RTEToolbarBlock.align,
                types_1.RTEToolbarBlock.link,
            ],
        }, config)) || this;
        var defaultBlockIndex = _this.config.toolbarBlocks.indexOf(types_1.RTEToolbarBlock.default);
        if (defaultBlockIndex !== -1) {
            (_a = _this.config.toolbarBlocks).splice.apply(_a, __spreadArrays([defaultBlockIndex, 1], constants_1.defaultBlocks));
        }
        _this._initContainer = html_1.toNode(container);
        _this.events = new events_1.EventSystem(_this);
        var getRootView = function () { return _this._editorView.getRootView(); };
        _this._composition = {
            active: false,
            initSelection: null,
        };
        _this._compositionEventsDestructor = composition_1.listenCompositionEvents(_this.events, function () {
            return _this._editor.selection.isActive();
        });
        _this._editor = new Editor_1.Editor({
            events: _this.events,
            uid: _this._uid,
            getRootView: getRootView,
            repaint: function () { return _this._editorView.paint(); },
        });
        _this._toolbarHelper = new toolbar_1.RichTextToolbarHelper(_this, _this._editor);
        _this.toolbar = _this._toolbarHelper.toolbar;
        _this._linkEditor = new link_1.LinkEditor(null, {
            events: _this.events,
            editor: _this._editor,
            getRootView: getRootView,
        });
        _this._initHandlers();
        _this._initUI(_this._initContainer);
        _this._initEvents();
        return _this;
    }
    Richtext.prototype.getRootView = function () {
        return this._layout.getRootView();
    };
    Richtext.prototype.setValue = function (value, mode) {
        if (mode === void 0) { mode = "html"; }
        this.events.fire(types_1.RichTextEvents.action, [types_1.Action.parse, { value: value, mode: mode }, false]);
    };
    Richtext.prototype.getValue = function (mode) {
        if (mode === void 0) { mode = "html"; }
        return this._editor.serialize(mode);
    };
    Richtext.prototype.getStats = function (selection) {
        var text = selection ? this._editor.selection.getSelectedText() : this.getValue("text");
        return statistics_1.getStats(text, this.config.customStats);
    };
    Richtext.prototype.destructor = function () {
        this._compositionEventsDestructor();
        this._editor.selection.destructor();
        this.toolbar.destructor();
        this.unmount();
    };
    Richtext.prototype.fullScreen = function () {
        if (this.toolbar.data.exists("fullscreen")) {
            this.toolbar.data.update("fullscreen", {
                icon: "dxi dxi-arrow-collapse",
                $fullscreen: true,
            });
        }
        document.body.classList.add("dhx_richtext--fullscreen", "dhx_widget--fullscreen");
        var view = this.getRootView();
        view.mount(document.body);
    };
    Richtext.prototype.exitFullScreen = function () {
        if (this.toolbar.data.exists("fullscreen")) {
            this.toolbar.data.update("fullscreen", {
                icon: "dxi dxi-arrow-expand",
                $fullscreen: false,
            });
        }
        document.body.classList.remove("dhx_richtext--fullscreen", "dhx_widget--fullscreen");
        var view = this.getRootView();
        view.mount(this._initContainer);
    };
    Richtext.prototype.getEditorAPI = function () {
        var _this = this;
        return {
            getSelection: function () { return _this._editor.selection.get(); },
            setSelection: function (selection) {
                _this._editor.selection.set(selection);
                _this._restoreFocus();
            },
            getPosition: function (selection) { return _this._editor.selection.getPosition(selection); },
            getModel: function () {
                return _this._editor.blocks.map(function (block) { return ({
                    style: __assign({}, block.style),
                    textNodes: block.textNodes.map(function (textNode) { return ({
                        style: __assign({}, textNode.style),
                        text: textNode.text,
                    }); }),
                }); });
            },
            setModel: function (blocks, selection) {
                _this.events.fire(types_1.RichTextEvents.action, [
                    types_1.Action.parse,
                    { value: blocks, mode: "inner" },
                    false,
                ]);
                if (selection) {
                    _this._editor.selection.set(selection);
                }
            },
            add: function (config, selection) {
                if (selection) {
                    _this._editor.selection.set(selection);
                }
                _this.events.fire(types_1.RichTextEvents.action, [types_1.Action.innerAdd, config, true]);
            },
            remove: function (selection) {
                if (selection) {
                    _this._editor.selection.set(selection);
                }
                _this.events.fire(types_1.RichTextEvents.action, [types_1.Action.remove, true, true]);
            },
            update: function (config, selection) {
                if (selection) {
                    _this._editor.selection.set(selection);
                }
                _this.events.fire(types_1.RichTextEvents.action, [
                    types_1.Action.update,
                    {
                        modifier: config.modifier,
                        modifierValue: config.value,
                    },
                ]);
            },
        };
    };
    Richtext.prototype._initUI = function (container) {
        var _this = this;
        var layout = (this._layout = new ts_layout_1.Layout(container, {
            css: "dhx_richtext" + " dhx_richtext--mode_" + this.config.mode,
            cols: [
                {
                    css: "dhx_toolbar__height-holder",
                    rows: [
                        {
                            id: "toolbar",
                            on: { click: function () { return _this._restoreFocus(); } },
                            css: "dhx_richtext__toolbar-holder",
                            height: "content",
                        },
                        { id: "editor", css: "dhx_richtext__editor-holder" },
                    ],
                },
            ],
        }));
        this._editorView = view_1.toViewLike(dom_1.create({
            render: function () { return _this._draw(); },
            hooks: {
                didRedraw: function () {
                    if (_this._editor.selection.isActive()) {
                        var isUpdated = _this._editor.selection.update();
                        if (!isUpdated) {
                            _this._restoreFocus();
                        }
                    }
                },
            },
        }));
        layout.getCell("editor").attach(this._editorView);
        layout.getCell("toolbar").attach(this.toolbar);
    };
    Richtext.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onkeydown: function (e) {
                if (_this._composition.active ||
                    (_this._linkEditor.isVisible() && !_this._editor.selection.isActive())) {
                    return;
                }
                var operation = keyhandler_1.keyToOperation(e);
                if (!operation) {
                    return;
                }
                _this.events.fire(types_1.RichTextEvents.action, [operation.action, operation.data]);
            },
            onpaste: function (e) {
                _this.events.fire(types_1.RichTextEvents.action, [types_1.Action.paste, e, false]);
            },
            oncut: function (e) {
                _this.events.fire(types_1.RichTextEvents.action, [types_1.Action.cut, e, false]);
            },
            oncopy: function (e) {
                _this.events.fire(types_1.RichTextEvents.action, [types_1.Action.copy, e, false]);
            },
            ondrop: function (e) {
                e.preventDefault();
            },
            ondragstart: function (e) {
                e.preventDefault();
            },
        };
    };
    Richtext.prototype._initEvents = function () {
        var _this = this;
        this.events.on(types_1.RichTextEvents.selectionRefresh, function () { return _this._scrollHelper.update(); });
        this.events.on(types_1.RichTextEvents.action, function (action, data, restoreFocus) {
            var isChanged = _this._editor.manager.execute({ action: action, data: data });
            if (isChanged) {
                _this.events.fire(types_1.RichTextEvents.change, [
                    action,
                    _this._editor.manager.canUndo(),
                    _this._editor.manager.canRedo(),
                ]);
                _this._editorView.paint();
            }
            if (restoreFocus) {
                _this._restoreFocus();
            }
        });
        this.events.on(types_1.RichTextEvents.compositionStart, function () {
            _this._composition.active = true;
            _this._composition.initSelection = _this._editor.selection.get();
        });
        this.events.on(types_1.RichTextEvents.compositionEnd, function (data) {
            _this._editor.selection.set(_this._composition.initSelection);
            _this.events.fire(types_1.RichTextEvents.action, [types_1.Action.add, data, true]);
            _this._composition.active = false;
            _this._composition.initSelection = null;
        });
    };
    Richtext.prototype._restoreFocus = function () {
        var _this = this;
        if (this._restoreFocusTimeout) {
            clearTimeout(this._restoreFocusTimeout);
        }
        this._restoreFocusTimeout = setTimeout(function () {
            _this._scrollHelper.saveScrollTop();
            _this._editorView.getRootView().refs.editor.el.focus();
            _this._scrollHelper.restoreScrollTop();
            var isUpdated = _this._editor.selection.refresh();
            _this._restoreFocusTimeout = null;
            if (!isUpdated) {
                _this._restoreFocus();
            }
        }, 25);
    };
    Richtext.prototype._draw = function () {
        var _this = this;
        var currentLinkRef = this._linkEditor.getCurrentLinkRef();
        var linkRefer = other_1.getLinkRefer();
        var currentLink = null;
        var currentLinkArr = [];
        return dom_1.el(".dhx_richtext__overflow-wrapper", {
            _hooks: this.config.mode === "document" && {
                didInsert: function (node) {
                    _this._scrollHelper = scroll_1.createScrollHelper(node.el);
                },
            },
        }, [
            dom_1.el(".dhx_richtext__editor.dhx_richtext-editor", __assign({ dhx_widget_id: this._uid, _ref: "editor", contentEditable: "true", role: "textbox", "data-gramm": "false", spellcheck: "false", _hooks: this.config.mode !== "document" && {
                    didInsert: function (node) {
                        _this._scrollHelper = scroll_1.createScrollHelper(node.el);
                    },
                } }, this._handlers), this._editor.blocks.map(function (block, blockIndex) {
                if (currentLinkArr.length) {
                    currentLinkArr = [];
                    currentLink = null;
                }
                return styles_1.blockquoteWrapper(block.style, blockIndex)(styles_1.blockStyleToTag(block.style), {
                    style: styles_1.calcBlockStyle(block.style),
                    dhx_offset: blockIndex,
                }, block.textNodes.map(function (textNode, textIndex) {
                    var hash = other_1.getTextHash(blockIndex, textIndex);
                    var isLastBlockNode = textIndex === block.textNodes.length - 1;
                    if (textNode.style.link) {
                        if (currentLink !== textNode.style.link) {
                            currentLinkArr = [
                                _this._renderTextNode(textNode, hash, isLastBlockNode),
                            ];
                            currentLink = textNode.style.link;
                            var linkRef = linkRefer();
                            return dom_1.el("a", {
                                href: textNode.style.link,
                                class: linkRef === currentLinkRef ? "dhx--link_edited" : "",
                                _ref: linkRef,
                            }, currentLinkArr);
                        }
                        else {
                            currentLinkArr.push(_this._renderTextNode(textNode, hash, isLastBlockNode));
                            return;
                        }
                    }
                    currentLink = textNode.style.link;
                    return _this._renderTextNode(textNode, hash, isLastBlockNode);
                }));
            })),
        ]);
    };
    Richtext.prototype._renderTextNode = function (textNode, hash, isLastBlockNode) {
        var text = textNode.text;
        var lastSymbolIsGap = text.endsWith("\n") && isLastBlockNode;
        return dom_1.el("span", {
            _ref: hash,
            dhx_offset: hash,
            style: styles_1.calcTextNodeStyle(textNode.style),
        }, text.length === 0 ? [dom_1.el("br")] : lastSymbolIsGap ? [text + "\n"] : text);
    };
    return Richtext;
}(view_1.View));
exports.Richtext = Richtext;


/***/ }),

/***/ "../ts-richtext/sources/SelectionHelper.ts":
/*!*************************************************!*\
  !*** ../ts-richtext/sources/SelectionHelper.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var other_1 = __webpack_require__(/*! ./helpers/other */ "../ts-richtext/sources/helpers/other.ts");
var selection_1 = __webpack_require__(/*! ./helpers/selection */ "../ts-richtext/sources/helpers/selection.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-richtext/sources/types.ts");
function getPositionFromRange(range) {
    var pos = {};
    var rect = range.getBoundingClientRect();
    if (rect.height === 0) {
        rect = range.getClientRects()[0];
    }
    pos.xStart = rect.left + window.pageXOffset;
    pos.yStart = rect.top + window.pageYOffset;
    range.collapse(false);
    rect = range.getClientRects()[0];
    pos.xEnd = rect.left + window.pageXOffset;
    pos.yEnd = rect.top + window.pageYOffset;
    return pos;
}
var SelectionHelper = /** @class */ (function () {
    function SelectionHelper(editor, uid, events) {
        var _this = this;
        this._selectionChange = function () {
            var isActive = _this.isActive();
            if (isActive) {
                _this._selectedText = window.getSelection().toString();
                if (_this._ignoreSelection) {
                    return;
                }
                var state = selection_1.stateFromDom(_this._editor);
                if (other_1.isEqual(state, _this._state, true)) {
                    return;
                }
                _this._state = state;
                _this._events.fire(types_1.RichTextEvents.selectionChange, [state]);
            }
        };
        this._events = events;
        this._uid = uid;
        this._editor = editor;
        this.clear();
        this._initEvents();
    }
    SelectionHelper.prototype.clear = function () {
        this._state = {
            range: false,
            left: {
                blockIndex: 0,
                textIndex: 0,
                offset: 0,
            },
        };
        this._waitUpdate = true;
    };
    SelectionHelper.prototype.set = function (state) {
        this._state = state;
        this._waitUpdate = true;
    };
    SelectionHelper.prototype.get = function () {
        return this._state;
    };
    SelectionHelper.prototype.getCompact = function () {
        var state = this._state;
        var compact = [[state.left.blockIndex, state.left.textIndex, state.left.offset]];
        if (this._state.range) {
            compact.push([state.right.blockIndex, state.right.textIndex, state.right.offset]);
        }
        return compact;
    };
    SelectionHelper.prototype.setCompact = function (compact) {
        var state = {
            left: {
                blockIndex: compact[0][0],
                textIndex: compact[0][1],
                offset: compact[0][2],
            },
            range: compact.length === 2,
        };
        if (state.range) {
            state.right = {
                blockIndex: compact[1][0],
                textIndex: compact[1][1],
                offset: compact[1][2],
            };
        }
        this.set(state);
    };
    SelectionHelper.prototype.getPosition = function (selection) {
        var _this = this;
        return new Promise(function (res) {
            if (!_this._waitUpdate) {
                var range = _this._createRange(selection);
                res(getPositionFromRange(range));
            }
            var ctx = new Date();
            _this._events.on(types_1.RichTextEvents.selectionRefresh, function () {
                _this._events.detach(types_1.RichTextEvents.selectionRefresh, ctx);
                var range = _this._createRange(selection);
                res(getPositionFromRange(range));
            }, ctx);
        });
    };
    SelectionHelper.prototype.destructor = function () {
        document.removeEventListener("selectionchange", this._selectionChange);
    };
    SelectionHelper.prototype.isActive = function () {
        var anchorNode = window.getSelection().anchorNode;
        return html_1.locate(anchorNode, "dhx_widget_id") === this._uid;
    };
    SelectionHelper.prototype.isFull = function () {
        var _a = this._state, left = _a.left, right = _a.right, range = _a.range;
        if (!range) {
            return false;
        }
        var last = this._editor.blocks.length - 1;
        var end = this._editor.blocks[last].getBlockEnd();
        return (left.blockIndex === 0 &&
            left.textIndex === 0 &&
            left.offset === 0 &&
            right.blockIndex === last &&
            right.textIndex === end.textIndex &&
            right.offset === end.offset);
    };
    SelectionHelper.prototype.update = function () {
        if (!this._waitUpdate) {
            return true;
        }
        return this.refresh();
    };
    SelectionHelper.prototype.getSelectedText = function () {
        return this._selectedText;
    };
    SelectionHelper.prototype.selectAll = function () {
        // silent select
        var blocks = this._editor.blocks;
        this._state = {
            range: true,
            left: {
                blockIndex: 0,
                textIndex: 0,
                offset: 0,
            },
            right: __assign({ blockIndex: blocks.length - 1 }, blocks[blocks.length - 1].getBlockEnd()),
        };
    };
    SelectionHelper.prototype.refresh = function () {
        var _this = this;
        var _a = this._state, left = _a.left, right = _a.right, range = _a.range;
        var selection = window.getSelection();
        if (!selection) {
            return false;
        }
        if (this._ignoreSelectionTimeout) {
            clearTimeout(this._ignoreSelectionTimeout);
        }
        this._ignoreSelection = true;
        this._ignoreSelectionTimeout = setTimeout(function () {
            _this._ignoreSelection = false;
            _this._ignoreSelectionTimeout = null;
        }, 5);
        var selectionRange;
        if (selection.rangeCount > 0) {
            selectionRange = selection.getRangeAt(0);
            selection.removeAllRanges();
        }
        else {
            selectionRange = document.createRange();
        }
        var startNode = this._editor.getTextElement(left.blockIndex, left.textIndex);
        if (!startNode) {
            return false;
        }
        var endNode;
        selectionRange.setStart(startNode, Math.min(left.offset, startNode.length));
        if (range) {
            endNode = this._editor.getTextElement(right.blockIndex, right.textIndex);
            if (!endNode) {
                return false;
            }
            selectionRange.setEnd(endNode, Math.min(right.offset, endNode.length));
        }
        else {
            selectionRange.setEnd(startNode, Math.min(left.offset, startNode.length));
        }
        selection.addRange(selectionRange);
        this._waitUpdate = false;
        this._events.fire(types_1.RichTextEvents.selectionRefresh, []);
        return true;
    };
    SelectionHelper.prototype._initEvents = function () {
        document.addEventListener("selectionchange", this._selectionChange);
    };
    SelectionHelper.prototype._createRange = function (selection) {
        var left = selection.left, right = selection.right;
        var range = document.createRange();
        var startNode = this._editor.getTextElement(left.blockIndex, left.textIndex);
        range.setStart(startNode, left.offset);
        if (selection.range) {
            var endNode = this._editor.getTextElement(right.blockIndex, right.textIndex);
            range.setEnd(endNode, right.offset);
        }
        else {
            range.setEnd(startNode, left.offset);
        }
        return range;
    };
    return SelectionHelper;
}());
exports.SelectionHelper = SelectionHelper;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-richtext/sources/constants.ts":
/*!*******************************************!*\
  !*** ../ts-richtext/sources/constants.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var other_1 = __webpack_require__(/*! ./helpers/other */ "../ts-richtext/sources/helpers/other.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-richtext/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-richtext/sources/types.ts");
exports.fontSizes = {
    "12px": true,
    "14px": true,
    "16px": true,
    "18px": true,
    "20px": true,
    "24px": true,
    "28px": true,
    "32px": true,
    "36px": true,
};
function createToolbarFontSizes() {
    var res = [];
    for (var fontSize in exports.fontSizes) {
        var value = parseInt(fontSize, 10);
        res.push({
            id: "font-size-" + value,
            value: fontSize,
        });
    }
    return res;
}
exports.fonts = {
    Roboto: true,
    Arial: true,
    Georgia: true,
    Tahoma: true,
    "Times New Roman": true,
    Verdana: true,
};
function createToolbarFonts() {
    var res = [];
    for (var font in exports.fonts) {
        res.push({
            id: "font-" + font,
            value: font,
        });
    }
    return res;
}
function getToolbarData(toolbarBlocks, defaultStyle) {
    var _a;
    var blocks = (_a = {},
        _a[types_1.RTEToolbarBlock.undo] = [
            {
                id: "undo",
                tooltip: en_1.default.undo,
                type: "button",
                view: "link",
                color: "secondary",
                icon: "dxi-undo",
                multiClick: true,
                disabled: true,
            },
            {
                id: "redo",
                tooltip: en_1.default.redo,
                type: "button",
                view: "link",
                color: "secondary",
                icon: "dxi-redo",
                multiClick: true,
                disabled: true,
            },
        ],
        _a[types_1.RTEToolbarBlock.style] = [
            {
                id: types_1.Modifier.fontFamily,
                value: defaultStyle[types_1.Modifier.fontFamily],
                tooltip: en_1.default.selectFontFamily,
                css: "dhx_richtext__dropdown",
                type: "button",
                view: "link",
                color: "secondary",
                size: "small",
                items: createToolbarFonts(),
            },
            {
                id: types_1.Modifier.fontSize,
                value: defaultStyle[types_1.Modifier.fontSize],
                tooltip: en_1.default.selectFontSize,
                css: "dhx_richtext__dropdown",
                type: "button",
                view: "link",
                color: "secondary",
                size: "small",
                items: createToolbarFontSizes(),
            },
            {
                id: types_1.Modifier.style,
                tooltip: en_1.default.selectFormat,
                value: en_1.default[defaultStyle[types_1.Modifier.style]],
                css: "dhx_richtext__dropdown",
                type: "button",
                view: "link",
                color: "secondary",
                size: "small",
                items: [
                    {
                        id: "style-p",
                        value: en_1.default.p,
                    },
                    {
                        id: "style-h1",
                        css: "dhx_richtext__menu-text--h1",
                        value: en_1.default.h1,
                    },
                    {
                        id: "style-h2",
                        css: "dhx_richtext__menu-text--h2",
                        value: en_1.default.h2,
                    },
                    {
                        id: "style-h3",
                        css: "dhx_richtext__menu-text--h3",
                        value: en_1.default.h3,
                    },
                    {
                        id: "style-h4",
                        css: "dhx_richtext__menu-text--h4",
                        value: en_1.default.h4,
                    },
                    {
                        id: "style-h5",
                        css: "dhx_richtext__menu-text--h5",
                        value: en_1.default.h5,
                    },
                    {
                        id: "style-h6",
                        css: "dhx_richtext__menu-text--h6",
                        value: en_1.default.h6,
                    },
                ],
            },
            {
                id: types_1.Modifier.blockquote,
                tooltip: en_1.default.blockquote,
                active: defaultStyle[types_1.Modifier.blockquote],
                type: "button",
                view: "link",
                color: "secondary",
                size: "small",
                icon: "dxi-format-quote-open",
            },
        ],
        _a[types_1.RTEToolbarBlock.color] = [
            {
                id: types_1.Modifier.color,
                tooltip: en_1.default.selectTextColor,
                type: "customButton",
                css: "dhx_button--toolbar dhx_button--color_secondary",
                color: "secondary",
                html: other_1.textColor(defaultStyle[types_1.Modifier.color]),
            },
            {
                id: types_1.Modifier.background,
                tooltip: en_1.default.selectTextBackground,
                type: "customButton",
                css: "dhx_button--toolbar dhx_button--color_secondary",
                color: "secondary",
                html: other_1.textSelectColor(defaultStyle[types_1.Modifier.background]),
            },
        ],
        _a[types_1.RTEToolbarBlock.decoration] = [
            {
                id: types_1.Modifier.bold,
                tooltip: en_1.default.markBold,
                icon: "dxi-format-bold",
                type: "button",
                view: "link",
                color: "secondary",
                hotkey: "ctrl+b",
                active: defaultStyle[types_1.Modifier.bold],
            },
            {
                id: types_1.Modifier.italic,
                tooltip: en_1.default.markItalic,
                icon: "dxi-format-italic",
                type: "button",
                view: "link",
                color: "secondary",
                hotkey: "ctrl+i",
                active: defaultStyle[types_1.Modifier.italic],
            },
            {
                id: types_1.Modifier.strike,
                tooltip: en_1.default.markStrike,
                icon: "dxi-format-strikethrough",
                type: "button",
                color: "secondary",
                view: "link",
                active: defaultStyle[types_1.Modifier.strike],
            },
            {
                id: types_1.Modifier.underline,
                tooltip: en_1.default.markUnderline,
                icon: "dxi-format-underline",
                type: "button",
                view: "link",
                color: "secondary",
                hotkey: "ctrl+u",
                active: defaultStyle[types_1.Modifier.underline],
            },
        ],
        _a[types_1.RTEToolbarBlock.align] = [
            {
                id: "align-left",
                tooltip: en_1.default.alignLeft,
                type: "button",
                view: "link",
                color: "secondary",
                icon: "dxi-format-align-left",
                active: defaultStyle[types_1.Modifier.align] === "left",
            },
            {
                id: "align-center",
                tooltip: en_1.default.alignCenter,
                type: "button",
                view: "link",
                color: "secondary",
                icon: "dxi-format-align-center",
                active: defaultStyle[types_1.Modifier.align] === "center",
            },
            {
                id: "align-right",
                tooltip: en_1.default.alignRight,
                type: "button",
                view: "link",
                color: "secondary",
                icon: "dxi-format-align-right",
                active: defaultStyle[types_1.Modifier.align] === "right",
            },
        ],
        _a[types_1.RTEToolbarBlock.link] = [
            {
                id: types_1.Modifier.link,
                tooltip: en_1.default.addLink,
                type: "button",
                view: "link",
                color: "secondary",
                icon: "dxi-link-variant",
            },
        ],
        _a[types_1.RTEToolbarBlock.clear] = [
            {
                id: "clear-style",
                tooltip: en_1.default.clearFormat,
                type: "button",
                view: "link",
                color: "secondary",
                icon: "dxi-eraser",
            },
        ],
        _a[types_1.RTEToolbarBlock.stats] = [
            {
                id: "stats",
                tooltip: en_1.default.stats,
                type: "button",
                view: "link",
                color: "secondary",
                icon: "dxi-information-outline",
            },
        ],
        _a[types_1.RTEToolbarBlock.fullscreen] = [
            {
                id: "fullscreen",
                $fullscreen: false,
                tooltip: en_1.default.fullscreen,
                type: "button",
                view: "link",
                color: "secondary",
                icon: "dxi-arrow-expand",
            },
        ],
        _a);
    var result = toolbarBlocks.reduce(function (config, block, i) {
        config.push.apply(config, blocks[block]);
        if (i !== toolbarBlocks.length - 1) {
            config.push({ type: "separator" });
        }
        return config;
    }, []);
    return result;
}
exports.getToolbarData = getToolbarData;
exports.emptyStyle = {};
exports.defaultBlocks = [
    types_1.RTEToolbarBlock.undo,
    types_1.RTEToolbarBlock.style,
    types_1.RTEToolbarBlock.decoration,
    types_1.RTEToolbarBlock.color,
    types_1.RTEToolbarBlock.align,
    types_1.RTEToolbarBlock.link,
];
exports.defaultFontSizeByBlock = {
    p: "14px",
    h1: "36px",
    h2: "32px",
    h3: "28px",
    h4: "24px",
    h5: "20px",
    h6: "16px",
};
exports.defaultDiffrentStyle = (_a = {},
    _a[types_1.Modifier.fontSize] = "",
    _a[types_1.Modifier.fontFamily] = "",
    _a[types_1.Modifier.style] = "",
    _a[types_1.Modifier.bold] = false,
    _a[types_1.Modifier.underline] = false,
    _a[types_1.Modifier.bold] = false,
    _a[types_1.Modifier.italic] = false,
    _a[types_1.Modifier.strike] = false,
    _a[types_1.Modifier.color] = "#4c4c4c",
    _a[types_1.Modifier.background] = "#FFFFFF",
    _a[types_1.Modifier.align] = false,
    _a);


/***/ }),

/***/ "../ts-richtext/sources/entry.ts":
/*!***************************************!*\
  !*** ../ts-richtext/sources/entry.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ../../styles/richtext.scss */ "../styles/richtext.scss");
var Richtext_1 = __webpack_require__(/*! ./Richtext */ "../ts-richtext/sources/Richtext.ts");
exports.Richtext = Richtext_1.Richtext;
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-richtext/sources/locales/en.ts");
var w = window;
exports.i18n = w.dhx && w.dhx.i18n ? w.dhx.i18 : {};
exports.i18n.setLocale = function (component, value) {
    var target = exports.i18n[component];
    for (var key in value) {
        target[key] = value[key];
    }
};
exports.i18n.richtext = exports.i18n.richtext || en_1.default;


/***/ }),

/***/ "../ts-richtext/sources/helpers/buffer.ts":
/*!************************************************!*\
  !*** ../ts-richtext/sources/helpers/buffer.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var serializer_1 = __webpack_require__(/*! ./serializer */ "../ts-richtext/sources/helpers/serializer.ts");
function eventHTMLData(e) {
    if (!e.clipboardData) {
        return;
    }
    if (e.clipboardData.types.includes("text/html")) {
        return e.clipboardData.getData("text/html");
    }
}
var TextBuffer = /** @class */ (function () {
    function TextBuffer(editor) {
        this._editor = editor;
    }
    TextBuffer.prototype.copy = function (event) {
        event.preventDefault();
        var result = this._editor.copy();
        return this._setBuffer(event, result);
    };
    TextBuffer.prototype.cut = function (event) {
        event.preventDefault();
        var result = this._editor.cut();
        return this._setBuffer(event, result);
    };
    TextBuffer.prototype.paste = function (event) {
        event.preventDefault();
        var text;
        if (event.clipboardData) {
            text = event.clipboardData.getData("text/plain");
        }
        else {
            text = window.clipboardData.getData("text");
        }
        if (text === this._rawText) {
            return this._editor.paste(this._editorContent, "inner");
        }
        else {
            var htmlData = eventHTMLData(event);
            if (htmlData) {
                return this._editor.paste(htmlData, "html");
            }
            return this._editor.paste(text, "text");
        }
    };
    TextBuffer.prototype._setBuffer = function (event, result) {
        if (!result) {
            return false;
        }
        this._rawText = result.raw;
        this._editorContent = JSON.stringify(result.content);
        if (event.clipboardData) {
            event.clipboardData.setData("text/plain", result.raw);
            event.clipboardData.setData("text/html", serializer_1.serializer(result.content));
        }
        else {
            window.clipboardData.setData("text", result.raw);
        }
        return true;
    };
    return TextBuffer;
}());
exports.TextBuffer = TextBuffer;


/***/ }),

/***/ "../ts-richtext/sources/helpers/composition.ts":
/*!*****************************************************!*\
  !*** ../ts-richtext/sources/helpers/composition.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../types */ "../ts-richtext/sources/types.ts");
function listenCompositionEvents(events, isActive) {
    var compositionStart = function (e) {
        if (isActive()) {
            events.fire(types_1.RichTextEvents.compositionStart);
        }
    };
    var compositionEnd = function (e) {
        if (isActive()) {
            events.fire(types_1.RichTextEvents.compositionEnd, [e.data]);
        }
    };
    var compositionUpdate = function (e) {
        if (isActive()) {
            events.fire(types_1.RichTextEvents.compositionUpdate, [e.data]);
        }
    };
    document.addEventListener("compositionstart", compositionStart);
    document.addEventListener("compositionend", compositionEnd);
    document.addEventListener("compositionupdate", compositionUpdate);
    return function () {
        document.removeEventListener("compositionstart", compositionStart);
        document.removeEventListener("compositionend", compositionEnd);
        document.removeEventListener("compositionupdate", compositionUpdate);
    };
}
exports.listenCompositionEvents = listenCompositionEvents;


/***/ }),

/***/ "../ts-richtext/sources/helpers/link.ts":
/*!**********************************************!*\
  !*** ../ts-richtext/sources/helpers/link.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message */ "../ts-message/index.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var keyhandler_1 = __webpack_require__(/*! ../keyhandler */ "../ts-richtext/sources/keyhandler.ts");
var en_1 = __webpack_require__(/*! ../locales/en */ "../ts-richtext/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-richtext/sources/types.ts");
var other_1 = __webpack_require__(/*! ./other */ "../ts-richtext/sources/helpers/other.ts");
var LinkEditor = /** @class */ (function (_super) {
    __extends(LinkEditor, _super);
    function LinkEditor(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._events = config.events;
        _this._editor = config.editor;
        _this._getParentView = config.getRootView;
        _this._popup = new ts_popup_1.Popup();
        _this._initEvents();
        _this._handlers = {
            onclick: {
                ".dhx_richtext-linkeditor--handler_apply": function () { return _this._apply(); },
                ".dhx_richtext-linkeditor--handler_unlink, .dhx_richtext-linkeditor--handler_unlink *": function () {
                    _this._events.fire(types_1.RichTextEvents.action, [
                        types_1.Action.update,
                        {
                            modifier: types_1.Modifier.link,
                            modifierValue: undefined,
                        },
                        true,
                    ]);
                    _this._popup.hide();
                },
                ".dhx_richtext-linkeditor--handler_edit, .dhx_richtext-linkeditor--handler_edit *": function () {
                    _this._editMode = true;
                    _this.paint();
                    setTimeout(function () { return _this.focus(); }, 10);
                },
            },
            onmouseover: function (e) {
                var node = html_1.locateNode(e, "dhx_id");
                if (node) {
                    ts_message_1.tooltip(en_1.default[node.getAttribute("dhx_id")], {
                        node: node,
                        position: ts_message_1.Position.bottom,
                    });
                }
            },
            oninput: function (e) {
                var value = e.target.value;
                if (e.target.classList.contains("link-input")) {
                    if (!_this._link && value) {
                        _this._link = value;
                        _this.paint();
                    }
                    else if (!value) {
                        _this._link = value;
                        _this.paint();
                    }
                    else {
                        _this._link = value;
                    }
                }
                else {
                    _this._text = value;
                }
            },
            onkeydown: function (e) {
                if (e.which === keyhandler_1.Key.enter && _this._link) {
                    _this._apply();
                }
                if (e.which === keyhandler_1.Key.esc) {
                    _this._popup.hide();
                }
            },
        };
        _this.mount(null, dom_1.create({ render: function () { return _this._draw(); } }));
        _this._popup.attach(_this);
        return _this;
    }
    LinkEditor.prototype.isVisible = function () {
        return this._popup.isVisible();
    };
    LinkEditor.prototype.show = function (node, mode) {
        var _this = this;
        this._popup.show(node, { mode: mode, centering: true });
        setTimeout(function () { return _this.focus(); }, 10);
    };
    LinkEditor.prototype.hide = function () {
        this._popup.hide();
    };
    LinkEditor.prototype.get = function () {
        return {
            link: this._link,
            text: this._text,
        };
    };
    LinkEditor.prototype.getCurrentLinkRef = function () {
        return this._currentLinkRef;
    };
    LinkEditor.prototype.set = function (link, text) {
        this._editMode = !link;
        this._link = link || "";
        this._text = text || "";
        this._initText = this._text;
        this.paint();
    };
    LinkEditor.prototype.focus = function () {
        var refs = this.getRootView().refs;
        if (refs && refs.linkInput) {
            refs.linkInput.el.focus();
        }
    };
    LinkEditor.prototype._destroyCurrentLinkRef = function () {
        if (this._currentLinkRef) {
            this._getParentView().refs[this._currentLinkRef].patch({ class: "" });
            this._currentLinkRef = null;
        }
    };
    LinkEditor.prototype._initEvents = function () {
        var _this = this;
        this._popup.events.on(ts_popup_1.PopupEvents.beforeHide, function (outer, e) { return !outer || !_this._getParentView().node.el.contains(e.target); });
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () { return _this._destroyCurrentLinkRef(); });
        this._popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            var left = _this._editor.selection.get().left;
            var key = other_1.getTextHash(left.blockIndex, left.textIndex);
            var parentView = _this._getParentView();
            var vnode = parentView.refs[key];
            vnode.parent.patch({ class: "dhx--link_edited" });
            _this._currentLinkRef = vnode.parent.ref;
        });
        this._events.on(types_1.RichTextEvents.selectionChange, function (_a) {
            var range = _a.range, left = _a.left;
            var textNode = _this._editor.blocks[left.blockIndex].textNodes[left.textIndex];
            if (_this.isVisible()) {
                _this.hide();
            }
            if (textNode.style.link && !range) {
                _this._show();
            }
        });
        this._events.on(types_1.RichTextEvents.showLinkEditor, function () { return _this._show(); });
        this._events.on(types_1.RichTextEvents.change, function () {
            if (_this.isVisible()) {
                var _a = _this._editor.selection.get(), left = _a.left, range = _a.range;
                var textNode = _this._editor.blocks[left.blockIndex].textNodes[left.textIndex];
                if (!textNode.style.link || range) {
                    _this.hide();
                }
                else {
                    var _b = _this._editor.getLinkInfo(), link = _b.link, text = _b.text;
                    _this.set(link, text);
                }
            }
        });
    };
    LinkEditor.prototype._draw = function () {
        return dom_1.el(".dhx_richtext-linkeditor " + (this._drawViewMode() ? ".dhx_richtext-linkeditor--mode_view" : ""), __assign({}, this._handlers), this._editMode ? this._drawEditMode() : this._drawViewMode());
    };
    LinkEditor.prototype._drawEditMode = function () {
        return [
            dom_1.el(".dhx_richtext-linkeditor__inputs", [
                dom_1.el(".dhx_form-group.dhx_form-group--type_inline.dhx_richtext-linkeditor__input", [
                    dom_1.el(".dhx_label", en_1.default.text),
                    dom_1.el("input.dhx_input.text-input", {
                        value: this._text,
                        _key: "textInput",
                        _ref: "textInput",
                    }),
                ]),
                dom_1.el(".dhx_form-group.dhx_form-group--type_inline.dhx_richtext-linkeditor__input", [
                    dom_1.el(".dhx_label", en_1.default.link),
                    dom_1.el("input.dhx_input.link-input", {
                        value: this._link,
                        _key: "linkInput",
                        _ref: "linkInput",
                    }),
                ]),
            ]),
            dom_1.el(".dhx_richtext-linkeditor__controls", [
                dom_1.el("button.dhx_richtext-linkeditor--handler_apply.dhx_button.dhx_button--size_medium.dhx_button--view_flat.dhx_button--color_primary", {
                    disabled: !this._link,
                }, en_1.default.apply),
            ]),
        ];
    };
    LinkEditor.prototype._drawViewMode = function () {
        return [
            dom_1.el("a.dhx_richtext-linkeditor__link", { href: this._link, target: "_blank" }, this._link),
            dom_1.el(".dhx_richtext-linkeditor__controls", [
                dom_1.el("button.dhx_richtext-linkeditor--handler_edit.dhx_button.dhx_button--icon.dhx_button--size_medium.dhx_button--view_link.dhx_button--color_secondary", {
                    dhx_id: "edit",
                }, [dom_1.el("span.dhx_button__icon.dxi.dxi-pencil")]),
                dom_1.el("button.dhx_richtext-linkeditor--handler_unlink.dhx_button.dhx_button--icon.dhx_button--size_medium.dhx_button--view_link.dhx_button--color_secondary", {
                    dhx_id: "removeLink",
                }, [dom_1.el("span.dhx_button__icon.dxi.dxi-link-variant-off")]),
            ]),
        ];
    };
    LinkEditor.prototype._modifyLink = function (value) {
        if (value.startsWith("#")) {
            return value;
        }
        if (value.slice(0, 4).toLowerCase() === "http") {
            return value;
        }
        return "http://" + value;
    };
    LinkEditor.prototype._apply = function () {
        var link = this._modifyLink(this._link);
        var text = this._text;
        var isEmptyText = !text.trim();
        var isTextChanged = this._initText !== this._text;
        if (isTextChanged || isEmptyText) {
            this._editor.updateLinkText(isEmptyText ? link : text);
        }
        if (link) {
            this._events.fire(types_1.RichTextEvents.action, [
                types_1.Action.update,
                {
                    modifier: types_1.Modifier.link,
                    modifierValue: link,
                },
                true,
            ]);
        }
        this.hide();
    };
    LinkEditor.prototype._show = function () {
        var _a = this._editor.getLinkInfo(), link = _a.link, text = _a.text;
        var left = this._editor.selection.get().left;
        var key = other_1.getTextHash(left.blockIndex, left.textIndex);
        var parentView = this._getParentView();
        var vnode = parentView.refs[key];
        if (!link) {
            // case for add new link
            this.set(null, this._editor.selection.getSelectedText());
            this.show(vnode.el, ts_message_1.Position.bottom);
        }
        else {
            // link already exists
            if (vnode.parent.ref === this._currentLinkRef) {
                // this link already in focus
                return;
            }
            this.set(link, text);
            this.show(vnode.parent.el, ts_message_1.Position.bottom);
        }
    };
    return LinkEditor;
}(view_1.View));
exports.LinkEditor = LinkEditor;


/***/ }),

/***/ "../ts-richtext/sources/helpers/markdown.ts":
/*!**************************************************!*\
  !*** ../ts-richtext/sources/helpers/markdown.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../types */ "../ts-richtext/sources/types.ts");
var Decorator;
(function (Decorator) {
    Decorator["bold"] = "**";
    Decorator["italic"] = "*";
    // strike = "~~"
})(Decorator || (Decorator = {}));
function decoratorsDif(prev, current) {
    var open = current.filter(function (decorator) { return !prev.includes(decorator); });
    var close = prev.filter(function (decorator) { return !current.includes(decorator); });
    return open.concat(close);
}
function serializeGroup(textNodes, link) {
    var result = "";
    var prevDecorators = [];
    for (var _i = 0, textNodes_1 = textNodes; _i < textNodes_1.length; _i++) {
        var textNode = textNodes_1[_i];
        var currentDecorators = [];
        var style = textNode.style;
        if (style[types_1.Modifier.bold]) {
            currentDecorators.push(Decorator.bold);
        }
        if (style[types_1.Modifier.italic]) {
            currentDecorators.push(Decorator.italic);
        }
        var dif = decoratorsDif(prevDecorators, currentDecorators);
        if (!prevDecorators.length && currentDecorators.length) {
            result += " ";
        }
        result += dif.join("");
        if (prevDecorators.length && !currentDecorators.length) {
            result += " ";
        }
        result += textNode.text.trim();
        prevDecorators = currentDecorators;
    }
    result += prevDecorators.join("");
    if (link) {
        result = "[" + result + "](" + link + ")";
    }
    return result.trim();
}
function serializeBlockContent(block) {
    var result = "";
    var textNodes = block.textNodes;
    var group = [];
    var currentLink;
    for (var _i = 0, textNodes_2 = textNodes; _i < textNodes_2.length; _i++) {
        var textNode = textNodes_2[_i];
        if (textNode.style.link) {
            if (currentLink === textNode.style.link) {
                group.push(textNode);
            }
            else {
                if (group.length) {
                    result += serializeGroup(group, currentLink);
                }
                group = [textNode];
            }
        }
        else {
            if (currentLink) {
                if (group.length) {
                    result += serializeGroup(group, currentLink);
                }
                group = [textNode];
            }
            else {
                group.push(textNode);
            }
        }
        currentLink = textNode.style.link;
    }
    result += serializeGroup(group, currentLink);
    return result;
}
function blockPrefix(block) {
    switch (block.style[types_1.Modifier.style]) {
        case "h1":
            return "# ";
        case "h2":
            return "## ";
        case "h3":
            return "### ";
        case "h4":
            return "#### ";
        case "h5":
            return "##### ";
        case "h6":
            return "###### ";
        default:
            return "";
    }
}
function markdownSerializer(blocks) {
    return blocks.reduce(function (res, block, i) { return res + (i ? "\n\n" : "") + blockPrefix(block) + serializeBlockContent(block); }, "");
}
exports.markdownSerializer = markdownSerializer;


/***/ }),

/***/ "../ts-richtext/sources/helpers/minimizer.ts":
/*!***************************************************!*\
  !*** ../ts-richtext/sources/helpers/minimizer.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../types */ "../ts-richtext/sources/types.ts");
function minimizeTextNodeStyle(style) {
    var formatting = style[types_1.Modifier.bold] |
        (style[types_1.Modifier.italic] << 1) |
        (style[types_1.Modifier.underline] << 2) |
        (style[types_1.Modifier.strike] << 3);
    var minimal = {};
    if (formatting !== 0) {
        minimal.f = formatting;
    }
    if (style[types_1.Modifier.fontSize]) {
        minimal.s = parseInt(style[types_1.Modifier.fontSize], 10);
    }
    if (style[types_1.Modifier.fontFamily]) {
        minimal.t = style[types_1.Modifier.fontFamily];
    }
    if (style[types_1.Modifier.color]) {
        minimal.c = style[types_1.Modifier.color];
    }
    if (style[types_1.Modifier.background]) {
        minimal.b = style[types_1.Modifier.background];
    }
    if (style[types_1.Modifier.link]) {
        minimal.a = style[types_1.Modifier.link];
    }
    return minimal;
}
exports.minimizeTextNodeStyle = minimizeTextNodeStyle;
function textNodeStyleFromMinimize(minimal) {
    var result = {};
    if (minimal.f) {
        if (minimal.f & 1) {
            result[types_1.Modifier.bold] = true;
        }
        if (minimal.f & 2) {
            result[types_1.Modifier.italic] = true;
        }
        if (minimal.f & 4) {
            result[types_1.Modifier.underline] = true;
        }
        if (minimal.f & 8) {
            result[types_1.Modifier.strike] = true;
        }
    }
    if (minimal.s) {
        result[types_1.Modifier.fontSize] = minimal.s + "px";
    }
    if (minimal.t) {
        result[types_1.Modifier.fontFamily] = minimal.t;
    }
    if (minimal.c) {
        result[types_1.Modifier.color] = minimal.c;
    }
    if (minimal.b) {
        result[types_1.Modifier.background] = minimal.b;
    }
    if (minimal.a) {
        result[types_1.Modifier.link] = minimal.a;
    }
    return result;
}
exports.textNodeStyleFromMinimize = textNodeStyleFromMinimize;
var alignToNumber = {
    left: 1,
    center: 2,
    right: 3,
};
var numberToAlign = {
    1: "left",
    2: "center",
    3: "right",
};
var styleToNumber = {
    h1: 1,
    h2: 2,
    h3: 3,
    h4: 4,
    h5: 5,
    h6: 6,
};
var numberToStyle = {
    1: "h1",
    2: "h2",
    3: "h3",
    4: "h4",
    5: "h5",
    6: "h6",
};
function minimizeBlockStyle(style) {
    var minimal = {};
    if (style[types_1.Modifier.blockquote]) {
        minimal.b = 1;
    }
    if (style[types_1.Modifier.style]) {
        var value = styleToNumber[style[types_1.Modifier.style]];
        if (value) {
            minimal.s = value;
        }
    }
    if (style[types_1.Modifier.align]) {
        minimal.a = alignToNumber[style[types_1.Modifier.align]];
    }
    return minimal;
}
exports.minimizeBlockStyle = minimizeBlockStyle;
function blockStyleFromMinimize(minimal) {
    var result = {};
    if (minimal.a) {
        result[types_1.Modifier.align] = numberToAlign[minimal.a];
    }
    if (minimal.b) {
        result[types_1.Modifier.blockquote] = true;
    }
    result[types_1.Modifier.style] = numberToStyle[minimal.s] || "p";
    return result;
}
exports.blockStyleFromMinimize = blockStyleFromMinimize;


/***/ }),

/***/ "../ts-richtext/sources/helpers/other.ts":
/*!***********************************************!*\
  !*** ../ts-richtext/sources/helpers/other.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getTextHash(blockIndex, textIndex) {
    return blockIndex + "_" + textIndex;
}
exports.getTextHash = getTextHash;
function getLinkRefer() {
    var index = 0;
    return function () { return "link_ref_" + index++; };
}
exports.getLinkRefer = getLinkRefer;
function hashToInfo(hash) {
    if (hash === void 0) { hash = ""; }
    if (!hash) {
        return [];
    }
    return hash.split("_").map(function (val) { return parseInt(val, 10); });
}
exports.hashToInfo = hashToInfo;
function actionIdToModifierValue(id) {
    return id.split("-").pop();
}
exports.actionIdToModifierValue = actionIdToModifierValue;
function textColor(color) {
    return "<span class=\"dxi dxi-format-color-text dhx_richtext__text-color\" style=\"border-color: " + color + ";\"></span>";
}
exports.textColor = textColor;
function textSelectColor(color) {
    return "<span class=\"dxi dxi-format-color-fill dhx_richtext__background-color\" style=\"border-color: " + color + ";\"></span>";
}
exports.textSelectColor = textSelectColor;
function isObject(target) {
    return target !== null && typeof target === "object" && !(target instanceof Date);
}
function isEqual(source, target, deep) {
    if (deep === void 0) { deep = false; }
    var sourceKeys = Object.keys(source);
    var targetKeys = Object.keys(target);
    if (sourceKeys.length !== targetKeys.length) {
        return false;
    }
    for (var _i = 0, sourceKeys_1 = sourceKeys; _i < sourceKeys_1.length; _i++) {
        var prop = sourceKeys_1[_i];
        if (deep && isObject(source[prop]) && isObject(target[prop])) {
            if (!isEqual(source[prop], target[prop], deep)) {
                return false;
            }
        }
        else if (source[prop] !== target[prop]) {
            return false;
        }
    }
    return true;
}
exports.isEqual = isEqual;
function copyWithout(obj, forbidden) {
    var target = {};
    for (var key in obj) {
        if (!forbidden.hasOwnProperty(key)) {
            target[key] = obj[key];
        }
    }
    return target;
}
exports.copyWithout = copyWithout;
function startsWith(str, pattern) {
    if (str.length < pattern.length) {
        return false;
    }
    for (var i = 0; i < pattern.length; i++) {
        if (str[i] !== pattern[i]) {
            return false;
        }
    }
    return true;
}
exports.startsWith = startsWith;


/***/ }),

/***/ "../ts-richtext/sources/helpers/parser.ts":
/*!************************************************!*\
  !*** ../ts-richtext/sources/helpers/parser.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var marked = __webpack_require__(/*! marked */ "../node_modules/marked/lib/marked.js");
var constants_1 = __webpack_require__(/*! ../constants */ "../ts-richtext/sources/constants.ts");
var Block_1 = __webpack_require__(/*! ./../models/Block */ "../ts-richtext/sources/models/Block.ts");
var TextNode_1 = __webpack_require__(/*! ./../models/TextNode */ "../ts-richtext/sources/models/TextNode.ts");
var types_1 = __webpack_require__(/*! ./../types */ "../ts-richtext/sources/types.ts");
function tagToStyle(htmlElement) {
    var _a, _b, _c, _d, _e;
    switch (htmlElement.nodeName) {
        case "B":
        case "STRONG":
            return _a = {},
                _a[types_1.Modifier.bold] = true,
                _a;
        case "I":
        case "EM":
            return _b = {},
                _b[types_1.Modifier.italic] = true,
                _b;
        case "U":
            return _c = {},
                _c[types_1.Modifier.underline] = true,
                _c;
        case "STRIKE":
        case "S":
            return _d = {},
                _d[types_1.Modifier.strike] = true,
                _d;
        case "A":
            return _e = {},
                _e[types_1.Modifier.link] = htmlElement.href,
                _e;
        default:
            return {};
    }
}
function parseTextNodes(htmlElement, textNodes, style) {
    if (style === void 0) { style = {}; }
    if (htmlElement.nodeType === htmlElement.TEXT_NODE) {
        var text = htmlElement.textContent
            .replace(/&nbsp;/g, " ")
            .replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">");
        if (text.replace(/\n/g, "").length === 0) {
            // ignore empty nodes: TODO fix
            return;
        }
        var textNode = new TextNode_1.TextNode(text, style);
        textNodes.push(textNode);
        return;
    }
    var elementStyle = {};
    var _a = htmlElement.style || {}, fontSize = _a.fontSize, fontWeight = _a.fontWeight, fontFamily = _a.fontFamily, color = _a.color, background = _a.background, backgroundColor = _a.backgroundColor, textDecoration = _a.textDecoration, fontStyle = _a.fontStyle;
    var tagStyle = tagToStyle(htmlElement);
    if (fontSize) {
        elementStyle[types_1.Modifier.fontSize] = constants_1.fontSizes[fontSize] ? fontSize : "14px";
    }
    if (fontWeight) {
        elementStyle[types_1.Modifier.bold] = fontWeight === "bold" || parseInt(fontWeight, 10) >= 600;
    }
    if (fontFamily) {
        elementStyle[types_1.Modifier.fontFamily] = constants_1.fonts[fontFamily] ? fontFamily : "Roboto";
    }
    if (color) {
        elementStyle[types_1.Modifier.color] = color;
    }
    if (background || backgroundColor) {
        elementStyle[types_1.Modifier.background] = background || backgroundColor;
    }
    if (textDecoration === "underline") {
        elementStyle[types_1.Modifier.underline] = true;
    }
    if (textDecoration === "line-through") {
        elementStyle[types_1.Modifier.strike] = true;
    }
    if (fontStyle) {
        elementStyle[types_1.Modifier.italic] = fontStyle === "italic";
    }
    var fullStyle = __assign(__assign(__assign({}, style), tagStyle), elementStyle);
    var childs = htmlElement.childNodes;
    for (var i = 0; i < childs.length; i++) {
        parseTextNodes(childs[i], textNodes, fullStyle);
    }
}
var blockTags = {
    P: "p",
    H1: "h1",
    H2: "h2",
    H3: "h3",
    H4: "h4",
    H5: "h5",
    H6: "h6",
};
function getBlockStyle(htmlElement) {
    if (!htmlElement || !htmlElement.style) {
        return {};
    }
    var style = {};
    if (htmlElement.style.textAlign) {
        style[types_1.Modifier.align] = htmlElement.style.textAlign;
    }
    if (htmlElement.nodeName === "BLOCKQUOTE") {
        style[types_1.Modifier.blockquote] = true;
    }
    return style;
}
function parseBlocks(htmlElement, blocks, style) {
    var _a;
    if (style === void 0) { style = {}; }
    style = __assign(__assign({}, style), getBlockStyle(htmlElement));
    if (blockTags[htmlElement.nodeName]) {
        var textNodes = [];
        parseTextNodes(htmlElement, textNodes);
        var block = new Block_1.Block(textNodes, __assign(__assign({}, style), (_a = {}, _a[types_1.Modifier.style] = blockTags[htmlElement.nodeName], _a)));
        blocks.push(block);
        return;
    }
    var childs = htmlElement.childNodes;
    for (var i = 0; i < childs.length; i++) {
        parseBlocks(childs[i], blocks, style);
    }
}
function parser(str, mode) {
    var _a;
    if (mode === void 0) { mode = "html"; }
    if (mode === "markdown") {
        str = marked(str);
    }
    var htmlElement = document.createElement("div");
    htmlElement.innerHTML = str.replace(/<br\s*[/]?>/g, "\n");
    var blocks = [];
    parseBlocks(htmlElement, blocks);
    if (blocks.length === 0) {
        var style = __assign((_a = {}, _a[types_1.Modifier.style] = blockTags[htmlElement.nodeName] || "p", _a), getBlockStyle(htmlElement));
        var textNodes = [];
        parseTextNodes(htmlElement, textNodes);
        var block = new Block_1.Block(textNodes, style);
        return [block];
    }
    return blocks;
}
exports.parser = parser;


/***/ }),

/***/ "../ts-richtext/sources/helpers/scroll.ts":
/*!************************************************!*\
  !*** ../ts-richtext/sources/helpers/scroll.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function createScrollHelper(element) {
    var scrollHeight = element.scrollHeight;
    var scrollTop = element.scrollTop;
    return {
        update: function () {
            var newScrollHeight = element.scrollHeight;
            if (newScrollHeight > scrollHeight) {
                element.scrollTop += newScrollHeight - scrollHeight;
            }
            scrollHeight = newScrollHeight;
        },
        saveScrollTop: function () {
            scrollTop = element.scrollTop;
        },
        restoreScrollTop: function () {
            element.scrollTop = scrollTop;
        },
    };
}
exports.createScrollHelper = createScrollHelper;


/***/ }),

/***/ "../ts-richtext/sources/helpers/selection.ts":
/*!***************************************************!*\
  !*** ../ts-richtext/sources/helpers/selection.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var other_1 = __webpack_require__(/*! ./other */ "../ts-richtext/sources/helpers/other.ts");
// range end cannot be set before range start, so if selection backwards range be collapsed
function isSelectionBackwards() {
    var _a = window.getSelection(), anchorNode = _a.anchorNode, focusNode = _a.focusNode, anchorOffset = _a.anchorOffset, focusOffset = _a.focusOffset;
    var range = document.createRange();
    range.setStart(anchorNode, anchorOffset);
    range.setEnd(focusNode, focusOffset);
    return range.collapsed;
}
function stateFromDom(editor) {
    var _a, _b;
    var _c = window.getSelection(), anchorNode = _c.anchorNode, anchorOffset = _c.anchorOffset, focusNode = _c.focusNode, focusOffset = _c.focusOffset, isCollapsed = _c.isCollapsed;
    var leftNode = anchorNode;
    var rightNode = focusNode;
    var leftOffset = anchorOffset;
    var rightOffset = focusOffset;
    if (isSelectionBackwards()) {
        _a = [rightNode, leftNode], leftNode = _a[0], rightNode = _a[1];
        _b = [rightOffset, leftOffset], leftOffset = _b[0], rightOffset = _b[1];
    }
    var leftKey = html_1.locate(leftNode, "dhx_offset");
    var rightKey = html_1.locate(rightNode, "dhx_offset");
    var leftInfo = other_1.hashToInfo(leftKey);
    var rightInfo = other_1.hashToInfo(rightKey);
    var left;
    var right;
    if (leftInfo.length === 2) {
        if (leftNode.nodeType === 3) {
            left = {
                blockIndex: leftInfo[0],
                textIndex: leftInfo[1],
                offset: leftOffset,
            };
        }
        else {
            left = {
                blockIndex: leftInfo[0],
                textIndex: leftInfo[1],
                offset: editor.blocks[leftInfo[0]].textNodes[leftInfo[1]].text.length,
            };
        }
    }
    else if (leftInfo.length === 1) {
        if (editor.blocks[leftInfo[0]].textNodes[leftOffset]) {
            left = {
                blockIndex: leftInfo[0],
                textIndex: leftOffset,
                offset: 0,
            };
        }
        else {
            left = {
                blockIndex: leftInfo[0],
                textIndex: leftOffset - 1,
                offset: editor.blocks[leftInfo[0]].textNodes[leftOffset - 1].text.length,
            };
        }
    }
    else {
        left = {
            blockIndex: leftOffset,
            textIndex: 0,
            offset: 0,
        };
    }
    if (isCollapsed) {
        return {
            range: false,
            left: left,
        };
    }
    if (rightInfo.length === 2) {
        if (rightNode.nodeType === 3) {
            right = {
                blockIndex: rightInfo[0],
                textIndex: rightInfo[1],
                offset: rightOffset,
            };
        }
        else {
            right = {
                blockIndex: rightInfo[0],
                textIndex: rightInfo[1],
                offset: editor.blocks[rightInfo[0]].textNodes[rightInfo[1]].text.length,
            };
        }
    }
    else if (rightInfo.length === 1) {
        if (rightOffset === 0) {
            right = __assign({ blockIndex: rightInfo[0] - 1 }, editor.blocks[rightInfo[0] - 1].getBlockEnd());
        }
        else {
            right = {
                blockIndex: rightInfo[0],
                textIndex: rightOffset - 1,
                offset: editor.blocks[rightInfo[0]].textNodes[rightOffset - 1].text.length,
            };
        }
    }
    else {
        right = __assign({ blockIndex: rightOffset - 1 }, editor.blocks[rightOffset - 1].getBlockEnd());
    }
    return {
        left: left,
        right: right,
        range: true,
    };
}
exports.stateFromDom = stateFromDom;


/***/ }),

/***/ "../ts-richtext/sources/helpers/serializer.ts":
/*!****************************************************!*\
  !*** ../ts-richtext/sources/helpers/serializer.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../types */ "../ts-richtext/sources/types.ts");
function textInlineStyle(style, raw) {
    if (raw === void 0) { raw = false; }
    var inline = "";
    for (var key in style) {
        switch (key) {
            case types_1.Modifier.background:
                inline += "background: " + style[key] + ";";
                break;
            case types_1.Modifier.color:
                inline += "color: " + style[key] + ";";
                break;
            case types_1.Modifier.fontFamily:
                inline += "font-family: " + style[key] + ";";
                break;
            case types_1.Modifier.fontSize:
                inline += "font-size: " + style[key] + ";";
                break;
        }
    }
    if (raw) {
        return inline;
    }
    if (inline) {
        return " style=\"" + inline + "\"";
    }
    return "";
}
function tagWithContent(tags, inlineStyle, content) {
    if (tags.length === 0 && content.trim() === "") {
        tags.push("span");
    }
    var openTags = tags.reduce(function (res, tag, i) { return res + (i === 0 ? "<" + tag + inlineStyle + ">" : "<" + tag + ">"); }, "");
    var closeTags = tags.reduceRight(function (res, tag) { return res + ("</" + tag + ">"); }, "");
    return openTags + content + closeTags;
}
function repeatStr(str, count) {
    var res = "";
    while (count--) {
        res += str;
    }
    return res;
}
function processText(text) {
    return text
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/\n/g, "<br>")
        .replace(/[ ]{2,}/g, function (match) { return " " + repeatStr("&nbsp;", match.length - 1); });
}
function serializeTextNode(textNode, raw) {
    if (raw === void 0) { raw = false; }
    var style = textNode.style, text = textNode.text;
    var tags = [];
    if (style[types_1.Modifier.underline]) {
        tags.push("u");
    }
    if (style[types_1.Modifier.strike]) {
        tags.push("s");
    }
    if (style[types_1.Modifier.bold]) {
        tags.push("strong");
    }
    if (style[types_1.Modifier.italic]) {
        tags.push("i");
    }
    if (raw) {
        return {
            tags: tags,
            inline: textInlineStyle(style, true),
            text: processText(text),
        };
    }
    var inlineStyle = textInlineStyle(style);
    if (inlineStyle && tags.length === 0) {
        tags.push("span");
    }
    return tagWithContent(tags, inlineStyle, processText(text));
}
function serializeTextNodes(textNodes) {
    var res = "";
    var linkContent = "";
    var linkText = "";
    var prevLink;
    for (var _i = 0, textNodes_1 = textNodes; _i < textNodes_1.length; _i++) {
        var textNode = textNodes_1[_i];
        if (textNode.style.link) {
            if (prevLink === textNode.style.link) {
                linkContent += serializeTextNode(textNode);
                linkText += textNode.text.replace(/"/g, "'");
            }
            else {
                linkContent = serializeTextNode(textNode);
                linkText = textNode.text.replace(/"/g, "'");
            }
        }
        else {
            if (prevLink) {
                res += tagWithContent(["a"], " href=\"" + prevLink + "\" title=\"" + linkText + "\"", linkContent);
            }
            res += serializeTextNode(textNode);
        }
        prevLink = textNode.style.link;
    }
    if (prevLink) {
        res += tagWithContent(["a"], " href=\"" + prevLink + "\" title=\"" + linkText + "\"", linkContent);
    }
    return res;
}
function serializeBlock(block) {
    var inline = "";
    var style = block.style, textNodes = block.textNodes;
    var tags = [];
    if (block.style[types_1.Modifier.blockquote]) {
        tags.push("blockquote");
    }
    tags.push(style[types_1.Modifier.style] || "p");
    var align = style[types_1.Modifier.align] ? "text-align: " + style[types_1.Modifier.align] + ";" : "";
    if (textNodes.length === 1 && !textNodes[0].style[types_1.Modifier.link]) {
        var res = serializeTextNode(textNodes[0], true);
        tags.push.apply(tags, res.tags);
        var textInline = res.inline;
        if (textInline || align) {
            inline = " style=\"" + textInline + align + "\"";
        }
        return tagWithContent(tags, inline, res.text);
    }
    if (align) {
        inline = " style=\"" + align + "\"";
    }
    return tagWithContent(tags, inline, serializeTextNodes(textNodes));
}
function serializer(blocks) {
    return blocks.reduce(function (result, block) { return result + serializeBlock(block); }, "");
}
exports.serializer = serializer;


/***/ }),

/***/ "../ts-richtext/sources/helpers/statistics.ts":
/*!****************************************************!*\
  !*** ../ts-richtext/sources/helpers/statistics.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var en_1 = __webpack_require__(/*! ../locales/en */ "../ts-richtext/sources/locales/en.ts");
function charsExlSpace(text) {
    return text.replace(/[\n ]/g, "").length;
}
function chars(text) {
    return text.replace(/[\n]/g, "").length;
}
function words(text) {
    return text.split(/[\n !.?,:;]+/g).filter(function (word) { return word.length > 0; }).length;
}
var defaultStats = {
    words: words,
    chars: chars,
    charsExlSpace: charsExlSpace,
};
function getStats(text, customStats) {
    if (customStats) {
        var stats = {};
        for (var _i = 0, customStats_1 = customStats; _i < customStats_1.length; _i++) {
            var _a = customStats_1[_i], cb = _a.cb, name_1 = _a.name;
            if (typeof cb === "function") {
                stats[name_1] = cb(text);
            }
            else if (!cb && name_1 in defaultStats) {
                stats[name_1] = defaultStats[name_1](text);
            }
            else if (typeof cb === "string" && cb in defaultStats) {
                stats[name_1] = defaultStats[cb](text);
            }
        }
        return stats;
    }
    return {
        chars: defaultStats.chars(text),
        words: defaultStats.words(text),
        charsExlSpace: defaultStats.charsExlSpace(text),
    };
}
exports.getStats = getStats;
function getDefaultRenderStat() {
    return [{ name: "chars" }, { name: "charsExlSpace" }, { name: "words" }];
}
function statsRenderer(stats, statSequence) {
    if (statSequence === void 0) { statSequence = getDefaultRenderStat(); }
    return function () {
        return dom_1.el("ul.dhx_richtext-stat", statSequence.map(function (stat) {
            return dom_1.el("li.dhx_richtext-stat__item", [
                dom_1.el("span.dhx_richtext-stat__name", en_1.default[stat.name] || stat.name),
                dom_1.el("span.dhx_richtext-stat__value", stats[stat.name]),
            ]);
        }));
    };
}
exports.statsRenderer = statsRenderer;


/***/ }),

/***/ "../ts-richtext/sources/helpers/styles.ts":
/*!************************************************!*\
  !*** ../ts-richtext/sources/helpers/styles.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var constants_1 = __webpack_require__(/*! ../constants */ "../ts-richtext/sources/constants.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-richtext/sources/types.ts");
function calcTextNodeStyle(modifiers) {
    var style = {};
    for (var key in modifiers) {
        if (!modifiers[key]) {
            continue;
        }
        switch (key) {
            case types_1.Modifier.bold:
                style["font-weight"] = "bold";
                break;
            case types_1.Modifier.italic:
                style["font-style"] = "italic";
                break;
            case types_1.Modifier.underline:
                if (style["text-decoration"]) {
                    style["text-decoration"] += " underline";
                }
                else {
                    style["text-decoration"] = "underline";
                }
                break;
            case types_1.Modifier.strike:
                if (style["text-decoration"]) {
                    style["text-decoration"] += " line-through";
                }
                else {
                    style["text-decoration"] = "line-through";
                }
                break;
            case types_1.Modifier.color:
                style.color = modifiers[key];
                break;
            case types_1.Modifier.background:
                style.background = modifiers[key];
                break;
            case types_1.Modifier.fontFamily:
                style["font-family"] = modifiers[key];
                break;
            case types_1.Modifier.fontSize:
                style["font-size"] = modifiers[key];
                break;
        }
    }
    return style;
}
exports.calcTextNodeStyle = calcTextNodeStyle;
function calcBlockStyle(modifiers) {
    var style = {};
    for (var key in modifiers) {
        if (!modifiers[key]) {
            continue;
        }
        switch (key) {
            case types_1.Modifier.align:
                style["text-align"] = modifiers[key];
        }
    }
    return style;
}
exports.calcBlockStyle = calcBlockStyle;
function blockStyleToTag(style) {
    if (style[types_1.Modifier.style]) {
        return style[types_1.Modifier.style];
    }
    return "p";
}
exports.blockStyleToTag = blockStyleToTag;
function blockquoteWrapper(style, blockIndex) {
    if (style[types_1.Modifier.blockquote]) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return dom_1.el("blockquote", {
                dhx_offset: blockIndex,
            }, [dom_1.el.apply(void 0, args)]);
        };
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return dom_1.el.apply(void 0, args);
    };
}
exports.blockquoteWrapper = blockquoteWrapper;
function getComputedNodeStyle(textNode, block, defaultModifiers) {
    var computed = {};
    for (var key in textNode.style) {
        computed[key] = textNode.style[key];
    }
    if (!computed[types_1.Modifier.fontSize]) {
        if (block.style[types_1.Modifier.style] && block.style[types_1.Modifier.style] !== "p") {
            computed[types_1.Modifier.fontSize] = constants_1.defaultFontSizeByBlock[block.style[types_1.Modifier.style]];
        }
        else {
            computed[types_1.Modifier.fontSize] = defaultModifiers[types_1.Modifier.fontSize];
        }
    }
    if (!computed[types_1.Modifier.fontFamily]) {
        computed[types_1.Modifier.fontFamily] = defaultModifiers[types_1.Modifier.fontFamily];
    }
    return computed;
}
exports.getComputedNodeStyle = getComputedNodeStyle;
function getComputedBlockStyle(block, defaultModifiers) {
    var computed = {};
    for (var key in block.style) {
        computed[key] = block.style[key];
    }
    if (!computed[types_1.Modifier.style]) {
        computed[types_1.Modifier.style] = defaultModifiers[types_1.Modifier.style];
    }
    if (!computed[types_1.Modifier.align]) {
        computed[types_1.Modifier.align] = defaultModifiers[types_1.Modifier.align];
    }
    if (!computed[types_1.Modifier.blockquote]) {
        computed[types_1.Modifier.blockquote] = defaultModifiers[types_1.Modifier.blockquote];
    }
    return computed;
}
exports.getComputedBlockStyle = getComputedBlockStyle;
function isEmptyBlockStyle(style) {
    return !style[types_1.Modifier.blockquote] && !style[types_1.Modifier.align];
}
exports.isEmptyBlockStyle = isEmptyBlockStyle;


/***/ }),

/***/ "../ts-richtext/sources/helpers/toolbar.ts":
/*!*************************************************!*\
  !*** ../ts-richtext/sources/helpers/toolbar.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var ts_colorpicker_1 = __webpack_require__(/*! @dhx/ts-colorpicker */ "../ts-colorpicker/index.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var ts_toolbar_1 = __webpack_require__(/*! @dhx/ts-toolbar */ "../ts-toolbar/index.ts");
var constants_1 = __webpack_require__(/*! ../constants */ "../ts-richtext/sources/constants.ts");
var other_1 = __webpack_require__(/*! ../helpers/other */ "../ts-richtext/sources/helpers/other.ts");
var en_1 = __webpack_require__(/*! ../locales/en */ "../ts-richtext/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-richtext/sources/types.ts");
var statistics_1 = __webpack_require__(/*! ./statistics */ "../ts-richtext/sources/helpers/statistics.ts");
var styles_1 = __webpack_require__(/*! ./styles */ "../ts-richtext/sources/helpers/styles.ts");
// move to richtext config
var defaultStyle = (_a = {},
    // textnode style
    _a[types_1.Modifier.fontFamily] = "Roboto",
    _a[types_1.Modifier.fontSize] = "14px",
    _a[types_1.Modifier.color] = "#4D4D4D",
    _a[types_1.Modifier.background] = "#FFFFFF",
    _a[types_1.Modifier.bold] = false,
    _a[types_1.Modifier.italic] = false,
    _a[types_1.Modifier.strike] = false,
    _a[types_1.Modifier.underline] = false,
    // block style
    _a[types_1.Modifier.style] = "p",
    _a[types_1.Modifier.blockquote] = false,
    _a[types_1.Modifier.align] = "left",
    _a);
var RichTextToolbarHelper = /** @class */ (function () {
    function RichTextToolbarHelper(parent, editor) {
        var _this = this;
        this._parent = parent;
        this._editor = editor;
        this.colorpicker = new ts_colorpicker_1.Colorpicker(null);
        this._colorpickerPopup = new ts_popup_1.Popup();
        this._colorpickerPopup.attach(this.colorpicker);
        this._statsPopup = new ts_popup_1.Popup();
        this._parent.events.on(types_1.RichTextEvents.change, function () {
            if (_this._statsPopup.isVisible()) {
                _this._statsPopup.hide();
            }
        });
        var toolbarBlocks = parent.config.toolbarBlocks;
        this.toolbar = new ts_toolbar_1.Toolbar(null, {
            css: "dhx_widget--bordered dhx_widget--bg_gray",
        });
        this.toolbar.data.parse(constants_1.getToolbarData(toolbarBlocks, defaultStyle));
        this._defaultToolbarState = {};
        for (var _i = 0, toolbarBlocks_1 = toolbarBlocks; _i < toolbarBlocks_1.length; _i++) {
            var block = toolbarBlocks_1[_i];
            switch (block) {
                case types_1.RTEToolbarBlock.align:
                    this._defaultToolbarState[types_1.Modifier.align] = defaultStyle[types_1.Modifier.align];
                    break;
                case types_1.RTEToolbarBlock.color:
                    this._defaultToolbarState[types_1.Modifier.color] = defaultStyle[types_1.Modifier.color];
                    this._defaultToolbarState[types_1.Modifier.background] = defaultStyle[types_1.Modifier.background];
                    break;
                case types_1.RTEToolbarBlock.decoration:
                    this._defaultToolbarState[types_1.Modifier.bold] = defaultStyle[types_1.Modifier.bold];
                    this._defaultToolbarState[types_1.Modifier.italic] = defaultStyle[types_1.Modifier.italic];
                    this._defaultToolbarState[types_1.Modifier.underline] = defaultStyle[types_1.Modifier.underline];
                    this._defaultToolbarState[types_1.Modifier.strike] = defaultStyle[types_1.Modifier.strike];
                    break;
                case types_1.RTEToolbarBlock.style:
                    this._defaultToolbarState[types_1.Modifier.style] = defaultStyle[types_1.Modifier.style];
                    this._defaultToolbarState[types_1.Modifier.fontFamily] = defaultStyle[types_1.Modifier.fontFamily];
                    this._defaultToolbarState[types_1.Modifier.fontSize] = defaultStyle[types_1.Modifier.fontSize];
                    this._defaultToolbarState[types_1.Modifier.blockquote] = defaultStyle[types_1.Modifier.blockquote];
                    break;
            }
        }
        this._initEvents();
    }
    RichTextToolbarHelper.prototype._initEvents = function () {
        var _this = this;
        this._parent.events.on(types_1.RichTextEvents.selectionChange, function () {
            _this._updateState();
        });
        this._parent.events.on(types_1.RichTextEvents.change, function (action, canUndo, canRedo) {
            if (_this._parent.config.toolbarBlocks.includes(types_1.RTEToolbarBlock.undo)) {
                _this._updateUndoRedoState(canUndo, canRedo);
            }
            if (action !== types_1.Action.update) {
                _this._updateState();
            }
        });
        this.colorpicker.events.on(ts_colorpicker_1.ColorpickerEvents.change, function (color) {
            _this._colorpickerPopup.hide();
            _this._parent.events.fire(types_1.RichTextEvents.action, [
                types_1.Action.update,
                {
                    modifier: _this._colorpickerTarget,
                    modifierValue: color,
                },
                true,
            ]);
            _this.toolbar.data.update(_this._colorpickerTarget, {
                html: _this._colorpickerTarget === types_1.Modifier.color ? other_1.textColor(color) : other_1.textSelectColor(color),
            });
        });
        this.toolbar.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) { return _this._toolbarAction(id, e); });
    };
    RichTextToolbarHelper.prototype._toolbarAction = function (id, e) {
        var item = this.toolbar.data.getItem(id);
        var active = !item.active;
        id = id.toString();
        switch (id) {
            case "bold":
                this._parent.events.fire(types_1.RichTextEvents.action, [
                    types_1.Action.update,
                    {
                        modifier: types_1.Modifier.bold,
                        modifierValue: active,
                    },
                    true,
                ]);
                this.toolbar.data.update("bold", { active: active });
                break;
            case "underline":
                this._parent.events.fire(types_1.RichTextEvents.action, [
                    types_1.Action.update,
                    {
                        modifier: types_1.Modifier.underline,
                        modifierValue: active,
                    },
                    true,
                ]);
                this.toolbar.data.update("underline", { active: active });
                break;
            case "italic":
                this._parent.events.fire(types_1.RichTextEvents.action, [
                    types_1.Action.update,
                    {
                        modifier: types_1.Modifier.italic,
                        modifierValue: active,
                    },
                    true,
                ]);
                this.toolbar.data.update("italic", { active: active });
                break;
            case "strike":
                this._parent.events.fire(types_1.RichTextEvents.action, [
                    types_1.Action.update,
                    {
                        modifier: types_1.Modifier.strike,
                        modifierValue: active,
                    },
                    true,
                ]);
                this.toolbar.data.update("strike", { active: active });
                break;
            case "color":
            case "background": {
                this._colorpickerTarget = id === types_1.Modifier.background ? types_1.Modifier.background : types_1.Modifier.color;
                var currentColor = this._getColorState(this._colorpickerTarget);
                this.colorpicker.setValue(currentColor);
                this.colorpicker.paint();
                this._colorpickerPopup.show(html_1.locateNode(e.target, "dhx_id"), {
                    mode: "bottom",
                });
                break;
            }
            case "link":
                e.stopPropagation();
                this._parent.events.fire(types_1.RichTextEvents.showLinkEditor);
                break;
            case "redo":
                this._parent.events.fire(types_1.RichTextEvents.action, [types_1.Action.redo, null, true]);
                break;
            case "undo":
                this._parent.events.fire(types_1.RichTextEvents.action, [types_1.Action.undo, null, true]);
                break;
            case "clear-style":
                this._parent.events.fire(types_1.RichTextEvents.action, [types_1.Action.clear, null, true]);
                break;
            case "blockquote":
                this._parent.events.fire(types_1.RichTextEvents.action, [
                    types_1.Action.update,
                    {
                        modifier: types_1.Modifier.blockquote,
                        modifierValue: active,
                    },
                    true,
                ]);
                this.toolbar.data.update("blockquote", { active: active });
                break;
            case "fullscreen":
                if (item.$fullscreen) {
                    this._parent.exitFullScreen();
                }
                else {
                    this._parent.fullScreen();
                }
                break;
            case "stats": {
                var node = html_1.locateNode(e);
                var isRange = this._editor.selection.get().range;
                this._statsPopup.attach(statistics_1.statsRenderer(this._parent.getStats(isRange), this._parent.config.customStats));
                this._statsPopup.show(node, { mode: "bottom", centering: true });
                break;
            }
            default: {
                var modifierValue = other_1.actionIdToModifierValue(id);
                switch (true) {
                    case other_1.startsWith(id, "font-size"):
                        if (modifierValue === "size")
                            return;
                        this._parent.events.fire(types_1.RichTextEvents.action, [
                            types_1.Action.update,
                            {
                                modifier: types_1.Modifier.fontSize,
                                modifierValue: modifierValue + "px",
                            },
                            true,
                        ]);
                        this.toolbar.data.update(types_1.Modifier.fontSize, {
                            value: modifierValue + "px",
                        });
                        break;
                    case other_1.startsWith(id, "align"):
                        this._parent.events.fire(types_1.RichTextEvents.action, [
                            types_1.Action.update,
                            {
                                modifier: types_1.Modifier.align,
                                modifierValue: modifierValue,
                            },
                            true,
                        ]);
                        this.toolbar.data.update("align-left", {
                            active: modifierValue === "left",
                        });
                        this.toolbar.data.update("align-right", {
                            active: modifierValue === "right",
                        });
                        this.toolbar.data.update("align-center", {
                            active: modifierValue === "center",
                        });
                        break;
                    case other_1.startsWith(id, "style"):
                        if (modifierValue === "style")
                            return;
                        this._parent.events.fire(types_1.RichTextEvents.action, [
                            types_1.Action.update,
                            {
                                modifier: types_1.Modifier.style,
                                modifierValue: modifierValue,
                            },
                            true,
                        ]);
                        this.toolbar.data.update(types_1.Modifier.style, {
                            value: en_1.default[modifierValue],
                        });
                        break;
                    case other_1.startsWith(id, "font"):
                        if (modifierValue === "family")
                            return;
                        this._parent.events.fire(types_1.RichTextEvents.action, [
                            types_1.Action.update,
                            {
                                modifier: types_1.Modifier.fontFamily,
                                modifierValue: other_1.actionIdToModifierValue(id),
                            },
                            true,
                        ]);
                        this.toolbar.data.update(types_1.Modifier.fontFamily, {
                            value: modifierValue,
                        });
                        break;
                }
            }
        }
    };
    RichTextToolbarHelper.prototype._updateState = function () {
        var modifiers = this._getCommonModifiers();
        for (var key in modifiers) {
            if (this.toolbar.data.getItem(key)) {
                switch (key) {
                    // block modifiers
                    case types_1.Modifier.align:
                        this.toolbar.data.update("align-left", {
                            active: modifiers[key] === "left",
                        });
                        this.toolbar.data.update("align-right", {
                            active: modifiers[key] === "right",
                        });
                        this.toolbar.data.update("align-center", {
                            active: modifiers[key] === "center",
                        });
                        break;
                    case types_1.Modifier.style:
                        if (this._parent.config.toolbarBlocks.includes(types_1.RTEToolbarBlock.style)) {
                            this.toolbar.data.update(key, { value: en_1.default[modifiers[key]] });
                        }
                        break;
                    case types_1.Modifier.blockquote:
                        this.toolbar.data.update("blockquote", { active: modifiers[key] });
                        break;
                    // text modifiers
                    case types_1.Modifier.color:
                        this.toolbar.data.update(key, {
                            html: other_1.textColor(modifiers[key]),
                        });
                        break;
                    case types_1.Modifier.background:
                        this.toolbar.data.update(key, {
                            html: other_1.textSelectColor(modifiers[key]),
                        });
                        break;
                    case types_1.Modifier.fontFamily:
                    case types_1.Modifier.fontSize:
                        this.toolbar.data.update(key, { value: modifiers[key] });
                        break;
                    case types_1.Modifier.italic:
                    case types_1.Modifier.bold:
                    case types_1.Modifier.underline:
                    case types_1.Modifier.strike:
                        this.toolbar.data.update(key, { active: modifiers[key] });
                        break;
                }
            }
        }
    };
    RichTextToolbarHelper.prototype._updateUndoRedoState = function (canUndo, canRedo) {
        if (canUndo) {
            this.toolbar.enable("undo");
        }
        else {
            this.toolbar.disable("undo");
        }
        if (canRedo) {
            this.toolbar.enable("redo");
        }
        else {
            this.toolbar.disable("redo");
        }
    };
    RichTextToolbarHelper.prototype._getCommonModifiers = function () {
        var _this = this;
        var commonTextStyle;
        var commonBlockStyle;
        this._editor.eachSelectedNode(function (node, block) {
            if (!commonTextStyle) {
                commonTextStyle = styles_1.getComputedNodeStyle(node, block, _this._defaultToolbarState);
                return;
            }
            var style = styles_1.getComputedNodeStyle(node, block, _this._defaultToolbarState);
            for (var key in commonTextStyle) {
                if (commonTextStyle[key] !== style[key]) {
                    delete commonTextStyle[key];
                }
            }
        });
        this._editor.eachSelectedBlock(function (block) {
            if (!commonBlockStyle) {
                commonBlockStyle = styles_1.getComputedBlockStyle(block, _this._defaultToolbarState);
                return;
            }
            var style = styles_1.getComputedBlockStyle(block, _this._defaultToolbarState);
            for (var key in commonBlockStyle) {
                if (commonBlockStyle[key] !== style[key]) {
                    delete commonBlockStyle[key];
                }
            }
        });
        return __assign(__assign(__assign({}, constants_1.defaultDiffrentStyle), commonBlockStyle), commonTextStyle);
    };
    RichTextToolbarHelper.prototype._getColorState = function (modifier) {
        var defaultColor = defaultStyle[modifier];
        var isSame = true;
        var initColor;
        this._editor.eachSelectedNode(function (node) {
            var color = node.style[modifier] || defaultColor;
            if (!initColor) {
                initColor = color;
            }
            else {
                isSame = isSame && initColor === color;
            }
        });
        return isSame ? initColor : defaultColor;
    };
    return RichTextToolbarHelper;
}());
exports.RichTextToolbarHelper = RichTextToolbarHelper;


/***/ }),

/***/ "../ts-richtext/sources/keyhandler.ts":
/*!********************************************!*\
  !*** ../ts-richtext/sources/keyhandler.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ./types */ "../ts-richtext/sources/types.ts");
var Key;
(function (Key) {
    Key[Key["backspace"] = 8] = "backspace";
    Key[Key["enter"] = 13] = "enter";
    Key[Key["tab"] = 9] = "tab";
    Key[Key["esc"] = 27] = "esc";
    Key[Key["space"] = 32] = "space";
    Key[Key["left"] = 37] = "left";
    Key[Key["up"] = 38] = "up";
    Key[Key["right"] = 39] = "right";
    Key[Key["down"] = 40] = "down";
    Key[Key["insert"] = 45] = "insert";
    Key[Key["del"] = 46] = "del";
    Key[Key["ctrl"] = 17] = "ctrl";
    Key[Key["a"] = 65] = "a";
    Key[Key["b"] = 66] = "b";
    Key[Key["c"] = 67] = "c";
    Key[Key["s"] = 83] = "s";
    Key[Key["u"] = 85] = "u";
    Key[Key["v"] = 86] = "v";
    Key[Key["x"] = 88] = "x";
    Key[Key["y"] = 89] = "y";
    Key[Key["z"] = 90] = "z";
    Key[Key["i"] = 73] = "i";
})(Key = exports.Key || (exports.Key = {}));
function ctrlKey(e) {
    var key = e.which;
    switch (key) {
        case Key.z:
            return {
                action: e.shiftKey ? types_1.Action.redo : types_1.Action.undo,
            };
        case Key.y:
            return {
                action: types_1.Action.redo,
            };
        case Key.a:
            return {
                action: types_1.Action.selectAll,
            };
        case Key.v:
        case Key.x:
        case Key.c:
            return;
        case Key.u:
        case Key.i:
        case Key.b:
            e.preventDefault();
            return;
    }
    return;
}
function keyToOperation(e) {
    if (e.shiftKey && e.which === Key.enter) {
        e.preventDefault();
        return {
            action: types_1.Action.add,
            data: "\n",
        };
    }
    switch (e.which) {
        case Key.insert:
            e.preventDefault();
            return;
        case Key.left:
        case Key.right:
        case Key.down:
        case Key.up:
            return;
        case Key.backspace:
            e.preventDefault();
            return {
                action: types_1.Action.remove,
                data: true,
            };
        case Key.del:
            e.preventDefault();
            return {
                action: types_1.Action.remove,
                data: false,
            };
        case Key.space:
            e.preventDefault();
            return {
                action: types_1.Action.add,
                data: " ",
            };
        case Key.enter:
            e.preventDefault();
            return {
                action: types_1.Action.add,
                data: { newBlock: true },
            };
    }
    if (e.ctrlKey || e.metaKey) {
        return ctrlKey(e);
    }
    var char = e.key;
    if (char.length > 1 || e.altKey) {
        return;
    }
    e.preventDefault();
    return {
        action: types_1.Action.add,
        data: char,
    };
}
exports.keyToOperation = keyToOperation;


/***/ }),

/***/ "../ts-richtext/sources/locales/en.ts":
/*!********************************************!*\
  !*** ../ts-richtext/sources/locales/en.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    apply: "Apply",
    undo: "Undo",
    redo: "Redo",
    selectFontFamily: "Font",
    selectFontSize: "Font size",
    selectFormat: "Style",
    selectTextColor: "Text color",
    selectTextBackground: "Background color",
    markBold: "Bold",
    markItalic: "Italic",
    markStrike: "Strike",
    markUnderline: "Underline",
    alignLeft: "Align left",
    alignCenter: "Align center",
    alignRight: "Align right",
    addLink: "Add link",
    clearFormat: "Clear formatting",
    fullscreen: "Fullscreen",
    stats: "Statistics",
    removeLink: "Remove link",
    edit: "Edit",
    h1: "Heading 1",
    h2: "Heading 2",
    h3: "Heading 3",
    h4: "Heading 4",
    h5: "Heading 5",
    h6: "Heading 6",
    p: "Normal text",
    blockquote: "Block quote",
    chars: "chars",
    charsExlSpace: "Characters without spaces",
    words: "words",
    link: "Link",
    text: "Text",
};
exports.default = locale;


/***/ }),

/***/ "../ts-richtext/sources/models/Block.ts":
/*!**********************************************!*\
  !*** ../ts-richtext/sources/models/Block.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(/*! ../constants */ "../ts-richtext/sources/constants.ts");
var other_1 = __webpack_require__(/*! ../helpers/other */ "../ts-richtext/sources/helpers/other.ts");
var TextNode_1 = __webpack_require__(/*! ./TextNode */ "../ts-richtext/sources/models/TextNode.ts");
var SplitResult;
(function (SplitResult) {
    SplitResult[SplitResult["invalidNode"] = 0] = "invalidNode";
    SplitResult[SplitResult["offsetStart"] = 1] = "offsetStart";
    SplitResult[SplitResult["offsetEnd"] = 2] = "offsetEnd";
    SplitResult[SplitResult["complete"] = 3] = "complete";
})(SplitResult = exports.SplitResult || (exports.SplitResult = {}));
var Block = /** @class */ (function () {
    function Block(textNodes, style) {
        this.style = style || constants_1.emptyStyle;
        if (!textNodes || textNodes.length === 0) {
            this.clear();
        }
        else {
            this.textNodes = textNodes;
        }
    }
    Block.prototype.clear = function () {
        this.textNodes = [new TextNode_1.TextNode("", constants_1.emptyStyle)];
    };
    Block.prototype.isEmpty = function () {
        return this.textNodes.length === 1 && this.textNodes[0].isEmpty();
    };
    Block.prototype.splitTextNode = function (index, offset) {
        var textNode = this.textNodes[index];
        if (!textNode) {
            return SplitResult.invalidNode;
        }
        if (offset === 0) {
            return SplitResult.offsetStart;
        }
        if (offset >= textNode.text.length) {
            return SplitResult.offsetEnd;
        }
        var text = textNode.text.slice(0, offset);
        var newText = textNode.text.slice(offset);
        var newTextNode = new TextNode_1.TextNode(newText, textNode.style);
        textNode.text = text;
        this.textNodes.splice(index + 1, 0, newTextNode);
        return SplitResult.complete;
    };
    Block.prototype.removeNodes = function (index, left) {
        // true need to remove all block, false - partial remove
        // for right selection -> remove from 0 to index
        // for left selection -> remove from index to end
        if (left) {
            if (index === 0) {
                return true;
            }
            this.textNodes = this.textNodes.slice(0, index);
            return false;
        }
        if (index === this.textNodes.length - 1) {
            return true;
        }
        this.textNodes = this.textNodes.slice(index + 1);
        return false;
    };
    Block.prototype.offsetToNodePosition = function (offset) {
        if (offset === 0) {
            return {
                textIndex: 0,
                offset: 0,
            };
        }
        var textNodes = this.textNodes;
        for (var i = 0; i < textNodes.length; i++) {
            var len = textNodes[i].text.length;
            if (offset <= len) {
                return {
                    textIndex: i,
                    offset: offset,
                };
            }
            offset -= len;
        }
    };
    Block.prototype.nodePositionToOffset = function (textIndex, offset) {
        for (var i = 0; i < textIndex; i++) {
            offset += this.textNodes[i].text.length;
        }
        return offset;
    };
    Block.prototype.getBlockEnd = function () {
        return {
            textIndex: this.textNodes.length - 1,
            offset: this.textNodes[this.textNodes.length - 1].text.length,
        };
    };
    Block.prototype.balance = function () {
        // return true if changed
        var textNodes = this.textNodes;
        var len = textNodes.length;
        var index = 1;
        while (index < textNodes.length) {
            if (other_1.isEqual(textNodes[index - 1].style, textNodes[index].style)) {
                textNodes[index - 1].text += textNodes[index].text;
                textNodes.splice(index, 1);
            }
            else {
                index++;
            }
        }
        return len !== textNodes.length;
    };
    return Block;
}());
exports.Block = Block;


/***/ }),

/***/ "../ts-richtext/sources/models/Editor.ts":
/*!***********************************************!*\
  !*** ../ts-richtext/sources/models/Editor.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(/*! ../constants */ "../ts-richtext/sources/constants.ts");
var markdown_1 = __webpack_require__(/*! ../helpers/markdown */ "../ts-richtext/sources/helpers/markdown.ts");
var minimizer_1 = __webpack_require__(/*! ../helpers/minimizer */ "../ts-richtext/sources/helpers/minimizer.ts");
var other_1 = __webpack_require__(/*! ../helpers/other */ "../ts-richtext/sources/helpers/other.ts");
var parser_1 = __webpack_require__(/*! ../helpers/parser */ "../ts-richtext/sources/helpers/parser.ts");
var serializer_1 = __webpack_require__(/*! ../helpers/serializer */ "../ts-richtext/sources/helpers/serializer.ts");
var Manager_1 = __webpack_require__(/*! ../Manager */ "../ts-richtext/sources/Manager.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-richtext/sources/types.ts");
var SelectionHelper_1 = __webpack_require__(/*! ./../SelectionHelper */ "../ts-richtext/sources/SelectionHelper.ts");
var Block_1 = __webpack_require__(/*! ./Block */ "../ts-richtext/sources/models/Block.ts");
var TextNode_1 = __webpack_require__(/*! ./TextNode */ "../ts-richtext/sources/models/TextNode.ts");
var styles_1 = __webpack_require__(/*! ../helpers/styles */ "../ts-richtext/sources/helpers/styles.ts");
var Editor = /** @class */ (function () {
    function Editor(_a) {
        var _this = this;
        var events = _a.events, uid = _a.uid, getRootView = _a.getRootView, repaint = _a.repaint;
        this.getTextElement = function (blockIndex, textIndex) {
            var id = other_1.getTextHash(blockIndex, textIndex);
            var rootView = _this._getRootView();
            return (rootView.refs && rootView.refs[id] && rootView.refs[id].el && rootView.refs[id].el.childNodes[0]);
        };
        this._events = events;
        this._repaint = repaint;
        this._getRootView = getRootView;
        this.selection = new SelectionHelper_1.SelectionHelper(this, uid, events);
        this.clear();
        this.manager = new Manager_1.Manager(this);
        this._events.on(types_1.RichTextEvents.change, function (action) {
            if (action !== types_1.Action.update) {
                _this._tempNode = null;
            }
        });
        this._events.on(types_1.RichTextEvents.selectionChange, function () {
            _this._tempNode = null;
        });
    }
    Editor.prototype.clear = function () {
        this.blocks = [new Block_1.Block([new TextNode_1.TextNode("", constants_1.emptyStyle)])];
        this.selection.clear();
    };
    Editor.prototype.getState = function () {
        return JSON.stringify({
            b: this.blocks.map(function (block) { return ({
                s: minimizer_1.minimizeBlockStyle(block.style),
                n: block.textNodes.map(function (textNode) { return ({
                    s: minimizer_1.minimizeTextNodeStyle(textNode.style),
                    t: textNode.text,
                }); }),
            }); }),
            s: this.selection.getCompact(),
        });
    };
    Editor.prototype.setState = function (state) {
        var raw = JSON.parse(state);
        this.blocks = raw.b.map(function (_a) {
            var s = _a.s, n = _a.n;
            var textNodes = n.map(function (node) { return new TextNode_1.TextNode(node.t, minimizer_1.textNodeStyleFromMinimize(node.s)); });
            var block = new Block_1.Block(textNodes, minimizer_1.blockStyleFromMinimize(s));
            return block;
        });
        this.selection.setCompact(raw.s);
    };
    Editor.prototype.parse = function (value, mode) {
        if (mode === void 0) { mode = "html"; }
        if (mode === "html" || mode === "markdown") {
            var blocks = parser_1.parser(value, mode);
            this.blocks = blocks;
        }
        else {
            this.blocks = value.map(function (block) {
                return new Block_1.Block(block.textNodes.map(function (textNode) { return new TextNode_1.TextNode(textNode.text, textNode.style); }), block.style);
            });
        }
        this.selection.set({
            range: false,
            left: __assign({ blockIndex: this.blocks.length - 1 }, this.blocks[this.blocks.length - 1].getBlockEnd()),
        });
        return true;
    };
    Editor.prototype.serialize = function (mode) {
        if (mode === void 0) { mode = "html"; }
        this.balance();
        if (mode === "markdown") {
            return markdown_1.markdownSerializer(this.blocks);
        }
        if (mode === "html") {
            return serializer_1.serializer(this.blocks);
        }
        if (mode === "text") {
            return this.blocks.reduce(function (blockText, block, i) {
                return blockText +
                    (i > 0 ? "\n" : "") +
                    block.textNodes.reduce(function (text, textNode) { return text + textNode.text; }, "");
            }, "");
        }
    };
    Editor.prototype.removeBlock = function (index) {
        this.blocks.splice(index, 1);
        if (this.blocks.length === 0) {
            this.clear();
        }
    };
    Editor.prototype.insertBlock = function () {
        this._splitCarret();
        var _a = this.selection.get(), range = _a.range, left = _a.left;
        if (range) {
            return;
        }
        var currentLineNodes = this.blocks[left.blockIndex].textNodes;
        var nextLineNodes = currentLineNodes.splice(left.textIndex + (left.offset ? 1 : 0), Infinity); // Infinity to remove all after left
        var nextLineBlockStyle = this.blocks[left.blockIndex].style;
        if (nextLineNodes.length === 0) {
            var style = this.blocks[left.blockIndex].textNodes[left.textIndex].style;
            nextLineNodes = [new TextNode_1.TextNode("", other_1.copyWithout(style, { link: true }))];
            nextLineBlockStyle = other_1.copyWithout(nextLineBlockStyle, {
                blockquote: true,
                style: true,
            });
            nextLineBlockStyle[types_1.Modifier.style] = "p";
        }
        else {
            var link = currentLineNodes[currentLineNodes.length - 1] &&
                currentLineNodes[currentLineNodes.length - 1].style.link;
            if (link) {
                for (var _i = 0, nextLineNodes_1 = nextLineNodes; _i < nextLineNodes_1.length; _i++) {
                    var textNode = nextLineNodes_1[_i];
                    if (textNode.style.link === link) {
                        textNode.style = other_1.copyWithout(textNode.style, { link: true });
                    }
                    else {
                        break;
                    }
                }
            }
        }
        if (currentLineNodes.length === 0) {
            this.blocks[left.blockIndex].clear();
        }
        var block = new Block_1.Block(nextLineNodes, nextLineBlockStyle);
        this.blocks.splice(left.blockIndex + 1, 0, block);
        this.selection.set({
            range: range,
            left: {
                offset: 0,
                textIndex: 0,
                blockIndex: left.blockIndex + 1,
            },
        });
    };
    Editor.prototype.eachSelectedNode = function (fn) {
        var _a = this.selection.get(), range = _a.range, left = _a.left, right = _a.right;
        if (range) {
            for (var i = left.blockIndex; i <= right.blockIndex; i++) {
                var startNode = 0;
                var endNode = this.blocks[i].textNodes.length - 1;
                if (i === left.blockIndex) {
                    startNode = left.textIndex;
                }
                if (i === right.blockIndex) {
                    endNode = right.textIndex;
                }
                for (var j = startNode; j <= endNode; j++) {
                    fn(this.blocks[i].textNodes[j], this.blocks[i]);
                }
            }
        }
        else {
            if (left) {
                fn(this.blocks[left.blockIndex].textNodes[left.textIndex], this.blocks[left.blockIndex]);
            }
        }
    };
    Editor.prototype.eachSelectedBlock = function (fn) {
        var _a = this.selection.get(), range = _a.range, left = _a.left, right = _a.right;
        if (range) {
            for (var i = left.blockIndex; i <= right.blockIndex; i++) {
                fn(this.blocks[i], i);
            }
        }
        else {
            fn(this.blocks[left.blockIndex]);
        }
    };
    Editor.prototype.copy = function () {
        var range = this.selection.get().range;
        if (!range) {
            return false;
        }
        this._splitRange();
        var editorContent = [];
        var raw = "";
        var _a = this.selection.get(), left = _a.left, right = _a.right;
        this.eachSelectedBlock(function (block, index) {
            var startIndex = 0;
            var endIndex = block.textNodes.length - 1;
            var textNodes = [];
            editorContent.push({
                style: block.style,
                textNodes: textNodes,
            });
            if (index === left.blockIndex) {
                startIndex = left.textIndex;
            }
            if (index === right.blockIndex) {
                endIndex = right.textIndex;
            }
            for (var i = startIndex; i <= endIndex; i++) {
                var textNode = block.textNodes[i];
                textNodes.push({
                    style: textNode.style,
                    text: textNode.text,
                });
                raw += textNode.text;
            }
            if (index < right.blockIndex) {
                raw += "\n";
            }
        });
        return {
            content: editorContent,
            raw: raw,
        };
    };
    Editor.prototype.cut = function () {
        var result = this.copy();
        this._splitRange();
        this._removeRange();
        return result;
    };
    Editor.prototype.paste = function (value, mode) {
        var _a, _b, _c;
        if (mode === void 0) { mode = "text"; }
        if (mode === "text") {
            return this.add(value);
        }
        else {
            var range = this.selection.get().range;
            if (range) {
                this._splitRange();
                this._removeRange();
            }
            var left = this.selection.get().left;
            var _d = mode === "inner" ? JSON.parse(value) : parser_1.parser(value, "html"), firstBlock = _d[0], blocks = _d.slice(1);
            var lastLineIndex = void 0;
            if (this.blocks[left.blockIndex].isEmpty()) {
                // destroy empty node
                this.blocks[left.blockIndex].textNodes = [];
                this.blocks[left.blockIndex].style = firstBlock.style;
            }
            else {
                // split node before paste
                var splitResult = this.blocks[left.blockIndex].splitTextNode(left.textIndex, left.offset);
                switch (splitResult) {
                    case Block_1.SplitResult.offsetStart:
                        lastLineIndex = left.textIndex;
                        break;
                    case Block_1.SplitResult.offsetEnd:
                    case Block_1.SplitResult.complete:
                        lastLineIndex = left.textIndex + 1;
                        break;
                }
            }
            var currentLineNodes = void 0;
            var lastLineNodes = void 0;
            if (lastLineIndex > 0) {
                currentLineNodes = this.blocks[left.blockIndex].textNodes.slice(0, lastLineIndex);
                lastLineNodes = this.blocks[left.blockIndex].textNodes.slice(lastLineIndex, Infinity);
            }
            else {
                currentLineNodes = [];
                lastLineNodes = this.blocks[left.blockIndex].textNodes;
            }
            for (var _i = 0, _e = firstBlock.textNodes; _i < _e.length; _i++) {
                var textNode = _e[_i];
                currentLineNodes.push(new TextNode_1.TextNode(textNode.text, textNode.style));
            }
            this.blocks[left.blockIndex].textNodes = currentLineNodes;
            if (blocks.length) {
                var newBlocks = blocks.map(function (block) {
                    return new Block_1.Block(block.textNodes.map(function (node) { return new TextNode_1.TextNode(node.text, node.style); }), block.style);
                });
                (_a = this.blocks).splice.apply(_a, __spreadArrays([left.blockIndex + 1, 0], newBlocks));
                var blockEnd = this.blocks[left.blockIndex + blocks.length].getBlockEnd();
                (_b = this.blocks[left.blockIndex + blocks.length].textNodes).push.apply(_b, lastLineNodes);
                this.selection.set({
                    range: false,
                    left: __assign({ blockIndex: left.blockIndex + blocks.length }, blockEnd),
                });
            }
            else {
                var blockEnd = this.blocks[left.blockIndex].getBlockEnd();
                (_c = this.blocks[left.blockIndex].textNodes).push.apply(_c, lastLineNodes);
                this.selection.set({
                    range: false,
                    left: __assign({ blockIndex: left.blockIndex }, blockEnd),
                });
            }
            return true;
        }
    };
    Editor.prototype.add = function (data) {
        var range = this.selection.get().range;
        if (range) {
            this._splitRange();
            this._removeRange();
        }
        if (data.newBlock) {
            this.insertBlock();
            return true;
        }
        var _a = this.selection.get().left, offset = _a.offset, blockIndex = _a.blockIndex, textIndex = _a.textIndex;
        if (this._tempNode &&
            this._tempNode.offset === offset &&
            this._tempNode.blockIndex === blockIndex &&
            this._tempNode.textIndex === textIndex) {
            return this._createNodeFromTemp(data);
        }
        var textNodes = this.blocks[blockIndex].textNodes;
        var textNode = textNodes[textIndex];
        if (textNode.style.link &&
            textNode.text.length === offset &&
            (!textNodes[textIndex + 1] || !textNodes[textIndex + 1].style.link)) {
            var newTextNode = new TextNode_1.TextNode(data, other_1.copyWithout(textNode.style, { link: true }));
            textNodes.splice(textIndex + 1, 0, newTextNode);
            this.selection.set({
                range: false,
                left: {
                    offset: data.length,
                    blockIndex: blockIndex,
                    textIndex: textIndex + 1,
                },
            });
        }
        else if (textNode.style.link && offset === 0) {
            var newTextNode = new TextNode_1.TextNode(data, other_1.copyWithout(textNode.style, { link: true }));
            textNodes.splice(textIndex, 0, newTextNode);
            this.selection.set({
                range: false,
                left: {
                    offset: data.length,
                    blockIndex: blockIndex,
                    textIndex: textIndex,
                },
            });
        }
        else {
            textNodes[textIndex].insert(data, offset);
            this.selection.set({
                range: false,
                left: {
                    offset: offset + data.length,
                    blockIndex: blockIndex,
                    textIndex: textIndex,
                },
            });
        }
        return true;
    };
    Editor.prototype.remove = function (prev) {
        var range = this.selection.get().range;
        if (range) {
            this._splitRange();
            this._removeRange();
            return true;
        }
        else {
            return this._removeSymbol(prev);
        }
    };
    Editor.prototype.update = function (_a) {
        var modifier = _a.modifier, modifierValue = _a.modifierValue;
        var _b = this.selection.get(), range = _b.range, left = _b.left;
        switch (modifier) {
            // block modifiers
            case types_1.Modifier.align:
            case types_1.Modifier.style:
            case types_1.Modifier.blockquote:
                this.eachSelectedBlock(function (block) {
                    var _a;
                    block.style = __assign(__assign({}, block.style), (_a = {}, _a[modifier] = modifierValue, _a));
                    if (modifier === types_1.Modifier.style && modifierValue !== "p") {
                        block.textNodes.forEach(function (textNode) {
                            var _a;
                            textNode.style = other_1.copyWithout(textNode.style, (_a = {},
                                _a[types_1.Modifier.fontSize] = true,
                                _a));
                        });
                    }
                });
                return true;
            // text modifers
            case types_1.Modifier.strike:
            case types_1.Modifier.underline:
            case types_1.Modifier.italic:
            case types_1.Modifier.bold:
            case types_1.Modifier.color:
            case types_1.Modifier.background:
            case types_1.Modifier.fontFamily:
            case types_1.Modifier.fontSize:
                if (!range) {
                    this._createTempTextNode({ modifier: modifier, modifierValue: modifierValue });
                    return false;
                }
                this._splitRange();
                this.eachSelectedNode(function (node) {
                    var _a;
                    node.style = __assign(__assign({}, node.style), (_a = {}, _a[modifier] = modifierValue, _a));
                });
                return true;
            case types_1.Modifier.link: {
                var leftTextNode = this.blocks[left.blockIndex].textNodes[left.textIndex];
                if (modifier === undefined || leftTextNode.style.link !== undefined) {
                    this._eachLink(function (node) {
                        var _a;
                        node.style = __assign(__assign({}, node.style), (_a = {}, _a[modifier] = modifierValue, _a));
                    });
                }
                else {
                    if (range) {
                        this._splitRange();
                    }
                    this.eachSelectedNode(function (node) {
                        var _a;
                        node.style = __assign(__assign({}, node.style), (_a = {}, _a[modifier] = modifierValue, _a));
                    });
                }
                return true;
            }
        }
    };
    Editor.prototype.clearStyles = function () {
        if (!this.selection.get().range) {
            return false;
        }
        this._splitRange();
        this.eachSelectedNode(function (node) {
            node.style = constants_1.emptyStyle;
        });
        return true;
    };
    Editor.prototype.balance = function () {
        var _a = this.selection.get(), left = _a.left, right = _a.right, range = _a.range;
        var leftOffset = this.blocks[left.blockIndex].nodePositionToOffset(left.textIndex, left.offset);
        var rightOffset;
        if (range) {
            rightOffset = this.blocks[right.blockIndex].nodePositionToOffset(right.textIndex, right.offset);
        }
        var notChanged = true;
        this.blocks.forEach(function (block) {
            if (block.balance()) {
                notChanged = false;
            }
        });
        if (notChanged) {
            return;
        }
        this.selection.set({
            range: range,
            left: __assign({ blockIndex: left.blockIndex }, this.blocks[left.blockIndex].offsetToNodePosition(leftOffset)),
            right: rightOffset && __assign({ blockIndex: right.blockIndex }, this.blocks[right.blockIndex].offsetToNodePosition(rightOffset)),
        });
        this._repaint();
    };
    Editor.prototype.getLinkInfo = function () {
        var text = "";
        var link;
        this._eachLink(function (textNode) {
            text += textNode.text;
            link = textNode.style.link;
        });
        return { text: text, link: link };
    };
    Editor.prototype.updateLinkText = function (text) {
        var _a = this.selection.get(), left = _a.left, range = _a.range;
        var textNodes = this.blocks[left.blockIndex].textNodes;
        var link = textNodes[left.textIndex].style.link;
        var textNode = new TextNode_1.TextNode(text, {});
        if (link) {
            var linkLeftIndex = left.textIndex;
            var linkRightIndex = left.textIndex;
            while (textNodes[linkLeftIndex - 1] && textNodes[linkLeftIndex - 1].style.link === link) {
                linkLeftIndex--;
            }
            while (textNodes[linkRightIndex + 1] && textNodes[linkRightIndex + 1].style.link === link) {
                linkRightIndex++;
            }
            textNodes.splice(linkLeftIndex, linkRightIndex - linkLeftIndex + 1, textNode);
            this.selection.set({
                range: true,
                left: {
                    blockIndex: left.blockIndex,
                    textIndex: linkLeftIndex,
                    offset: 0,
                },
                right: {
                    blockIndex: left.blockIndex,
                    textIndex: linkLeftIndex,
                    offset: text.length,
                },
            });
        }
        else {
            if (range) {
                this._splitRange();
                this._removeRange();
                var _b = this.selection.get().left, blockIndex = _b.blockIndex, textIndex = _b.textIndex;
                this.blocks[blockIndex].textNodes.splice(textIndex + 1, 0, textNode);
                this.selection.set({
                    range: true,
                    left: {
                        blockIndex: blockIndex,
                        textIndex: textIndex + 1,
                        offset: 0,
                    },
                    right: {
                        blockIndex: blockIndex,
                        textIndex: textIndex + 1,
                        offset: text.length,
                    },
                });
            }
            else {
                var index = void 0;
                if (this.blocks[left.blockIndex].isEmpty()) {
                    textNodes.splice(0, 1);
                    index = 0;
                }
                else {
                    var splitResult = this.blocks[left.blockIndex].splitTextNode(left.textIndex, left.offset);
                    index = splitResult === Block_1.SplitResult.offsetStart ? left.textIndex : left.textIndex + 1;
                }
                textNodes.splice(index, 0, textNode);
                this.selection.set({
                    range: true,
                    left: {
                        blockIndex: left.blockIndex,
                        textIndex: index,
                        offset: 0,
                    },
                    right: {
                        blockIndex: left.blockIndex,
                        textIndex: index,
                        offset: text.length,
                    },
                });
            }
        }
    };
    Editor.prototype._splitRange = function () {
        // left selection must have offset = 0
        // right selection must have offset = end of textnode
        var _a = this.selection.get(), range = _a.range, left = _a.left, right = _a.right;
        if (!range) {
            return;
        }
        // 1 - left and right are single text node
        if (left.blockIndex === right.blockIndex && left.textIndex === right.textIndex) {
            var rightTextIndex = left.textIndex;
            var rightOffset = right.offset;
            var leftSplitResult = this.blocks[left.blockIndex].splitTextNode(left.textIndex, left.offset);
            // in this case left cant return SplitResult.offsetEnd coz this textNode has right
            // if node was splited need to update right text index and right offset
            if (leftSplitResult === Block_1.SplitResult.complete) {
                rightTextIndex += 1;
                rightOffset -= left.offset;
            }
            this.blocks[right.blockIndex].splitTextNode(rightTextIndex, rightOffset);
            var selection = {
                range: range,
                left: {
                    blockIndex: left.blockIndex,
                    textIndex: rightTextIndex,
                    offset: 0,
                },
                right: {
                    blockIndex: right.blockIndex,
                    textIndex: rightTextIndex,
                    offset: rightOffset,
                },
            };
            this.selection.set(selection);
            return;
        }
        // 2 - left and right located in one block, so left split can move right position
        if (left.blockIndex === right.blockIndex) {
            var leftTextIndex = left.textIndex;
            var rightTextIndex = right.textIndex;
            var leftSplitResult = this.blocks[left.blockIndex].splitTextNode(leftTextIndex, left.offset);
            // move selection to next node
            if (leftSplitResult === Block_1.SplitResult.offsetEnd) {
                leftTextIndex += 1;
            }
            // move selection to next node and update right position
            if (leftSplitResult === Block_1.SplitResult.complete) {
                rightTextIndex += 1;
                leftTextIndex += 1;
            }
            this.blocks[right.blockIndex].splitTextNode(rightTextIndex, right.offset);
            var selection = {
                range: range,
                left: {
                    blockIndex: left.blockIndex,
                    textIndex: leftTextIndex,
                    offset: 0,
                },
                right: {
                    blockIndex: right.blockIndex,
                    textIndex: rightTextIndex,
                    offset: right.offset,
                },
            };
            this.selection.set(selection);
            return;
        }
        // 3 - left and right located in diffrent blocks
        if (left.blockIndex !== right.blockIndex) {
            var leftTextIndex = left.textIndex;
            var leftBlockIndex = left.blockIndex;
            var leftSplitResult = this.blocks[left.blockIndex].splitTextNode(left.textIndex, left.offset);
            this.blocks[right.blockIndex].splitTextNode(right.textIndex, right.offset);
            if (leftSplitResult === Block_1.SplitResult.offsetEnd) {
                // if this textnode have next node
                if (this.blocks[leftBlockIndex].textNodes[leftTextIndex + 1]) {
                    leftTextIndex += 1;
                }
                else {
                    leftTextIndex = 0;
                    leftBlockIndex += 1;
                }
            }
            if (leftSplitResult === Block_1.SplitResult.complete) {
                leftTextIndex += 1;
            }
            var selection = {
                range: range,
                left: {
                    blockIndex: leftBlockIndex,
                    textIndex: leftTextIndex,
                    offset: 0,
                },
                right: {
                    blockIndex: right.blockIndex,
                    textIndex: right.textIndex,
                    offset: right.offset,
                },
            };
            this.selection.set(selection);
        }
    };
    Editor.prototype._splitCarret = function () {
        // need for split block into text nodes
        var _a = this.selection.get(), range = _a.range, left = _a.left;
        if (range) {
            return;
        }
        var splitResult = this.blocks[left.blockIndex].splitTextNode(left.textIndex, left.offset);
        if (splitResult === Block_1.SplitResult.complete) {
            var selection = {
                range: range,
                left: {
                    blockIndex: left.blockIndex,
                    textIndex: left.textIndex + 1,
                    offset: 0,
                },
            };
            this.selection.set(selection);
        }
    };
    Editor.prototype._removeRange = function () {
        var _a;
        // call only after splitRange
        var _b = this.selection.get(), left = _b.left, right = _b.right;
        if (!right) {
            return;
        }
        if (this.selection.isFull()) {
            this.clear();
            return;
        }
        if (left.blockIndex === right.blockIndex) {
            // selection contains full block
            if (left.textIndex === 0 &&
                right.textIndex === this.blocks[right.blockIndex].textNodes.length - 1) {
                this.blocks[left.blockIndex].clear();
                this.selection.set({
                    range: false,
                    left: __assign(__assign({}, left), { offset: 0 }),
                });
            }
            else {
                this.blocks[left.blockIndex].textNodes.splice(left.textIndex, right.textIndex - left.textIndex + 1);
                if (left.textIndex === 0) {
                    this.selection.set({
                        range: false,
                        left: {
                            blockIndex: left.blockIndex,
                            textIndex: 0,
                            offset: 0,
                        },
                    });
                }
                else {
                    this.selection.set({
                        range: false,
                        left: {
                            blockIndex: left.blockIndex,
                            textIndex: left.textIndex - 1,
                            offset: this.blocks[left.blockIndex].textNodes[left.textIndex - 1].text.length,
                        },
                    });
                }
            }
        }
        else {
            var isFullLeftRemove = this.blocks[left.blockIndex].removeNodes(left.textIndex, true);
            var isFullRightRemove = this.blocks[right.blockIndex].removeNodes(right.textIndex, false);
            var leftBlockEnd = this.blocks[left.blockIndex].getBlockEnd();
            switch (true) {
                case isFullLeftRemove && isFullRightRemove:
                    this.blocks[left.blockIndex].clear();
                    break;
                case isFullLeftRemove && !isFullRightRemove:
                    this.blocks[left.blockIndex].textNodes = this.blocks[right.blockIndex].textNodes;
                    break;
                case !isFullLeftRemove && !isFullRightRemove:
                    (_a = this.blocks[left.blockIndex].textNodes).push.apply(_a, this.blocks[right.blockIndex].textNodes);
                    break;
                case !isFullLeftRemove && isFullRightRemove:
                    break;
            }
            for (var i = right.blockIndex; i > left.blockIndex; i--) {
                this.removeBlock(i); // FIX
            }
            if (isFullLeftRemove) {
                this.selection.set({
                    range: false,
                    left: {
                        blockIndex: left.blockIndex,
                        textIndex: left.textIndex,
                        offset: 0,
                    },
                });
            }
            else {
                this.selection.set({
                    range: false,
                    left: __assign({ blockIndex: left.blockIndex }, leftBlockEnd),
                });
            }
        }
    };
    Editor.prototype._removeSymbol = function (prev) {
        var _a = this.selection.get().left, offset = _a.offset, blockIndex = _a.blockIndex, textIndex = _a.textIndex;
        var selection = {
            range: false,
            left: { offset: offset, blockIndex: blockIndex, textIndex: textIndex },
        };
        var blockEnd = this.blocks[blockIndex].getBlockEnd();
        var textNodes = this.blocks[blockIndex].textNodes;
        var textNode = textNodes[textIndex];
        var repeat = false;
        switch (true) {
            case this.blocks[blockIndex].isEmpty():
                if (blockIndex === 0 && prev) {
                    if (!styles_1.isEmptyBlockStyle(this.blocks[0].style)) {
                        this.blocks[0].style = constants_1.emptyStyle;
                        return true;
                    }
                    return false;
                }
                if (!prev && !this.blocks[blockIndex + 1]) {
                    return false;
                }
                this.removeBlock(blockIndex);
                if (blockIndex === 0) {
                    selection.left.offset = 0;
                    selection.left.textIndex = 0;
                }
                else {
                    if (prev) {
                        selection.left = __assign({ blockIndex: blockIndex - 1 }, this.blocks[blockIndex - 1].getBlockEnd());
                    }
                }
                break;
            case offset === 0 && textIndex === 0 && prev: // move all nodes of this block to previous
                if (blockIndex === 0) {
                    return false;
                }
                if (this.blocks[blockIndex - 1].isEmpty()) {
                    this.blocks[blockIndex - 1].textNodes = textNodes;
                    this.removeBlock(blockIndex);
                    selection.left = {
                        blockIndex: blockIndex - 1,
                        textIndex: 0,
                        offset: 0,
                    };
                }
                else {
                    var previousBlockEnd = this.blocks[blockIndex - 1].getBlockEnd();
                    this.blocks[blockIndex - 1].textNodes = this.blocks[blockIndex - 1].textNodes.concat(textNodes);
                    this.removeBlock(blockIndex);
                    selection.left = __assign({ blockIndex: blockIndex - 1 }, previousBlockEnd);
                }
                break;
            case blockEnd.offset === offset && blockEnd.textIndex === textIndex && !prev: {
                // move all nodes of next block to this block
                var nextBlock = this.blocks[blockIndex + 1];
                if (!nextBlock) {
                    return;
                }
                if (nextBlock.isEmpty()) {
                    this.removeBlock(blockIndex + 1);
                    return true;
                }
                this.blocks[blockIndex].textNodes = this.blocks[blockIndex].textNodes.concat(nextBlock.textNodes);
                this.removeBlock(blockIndex + 1);
                break;
            }
            default: {
                var removeResult = textNode.remove(offset, prev);
                switch (removeResult) {
                    case TextNode_1.RemoveTextResult.nullTextLength:
                        if (textNodes.length > 1) {
                            textNodes.splice(textIndex, 1);
                            if (textIndex === 0) {
                                selection.left = {
                                    blockIndex: blockIndex,
                                    textIndex: 0,
                                    offset: 0,
                                };
                            }
                            else {
                                selection.left = {
                                    blockIndex: blockIndex,
                                    textIndex: textIndex - 1,
                                    offset: textNodes[textIndex - 1].text.length,
                                };
                            }
                        }
                        else {
                            textNode.style = constants_1.emptyStyle;
                            selection.left = {
                                textIndex: textIndex,
                                blockIndex: blockIndex,
                                offset: 0,
                            };
                        }
                        break;
                    case TextNode_1.RemoveTextResult.complete:
                        if (prev) {
                            selection.left = {
                                blockIndex: blockIndex,
                                textIndex: textIndex,
                                offset: offset - 1,
                            };
                        }
                        break;
                    case TextNode_1.RemoveTextResult.forceRemoveNext:
                        selection.left = {
                            blockIndex: blockIndex,
                            textIndex: textIndex + 1,
                            offset: 0,
                        };
                        repeat = true;
                        break;
                    case TextNode_1.RemoveTextResult.forceRemovePrevious:
                        selection.left = {
                            blockIndex: blockIndex,
                            textIndex: textIndex - 1,
                            offset: textNodes[textIndex - 1].text.length,
                        };
                        repeat = true;
                        break;
                }
            }
        }
        this.selection.set(selection);
        if (repeat) {
            return this._removeSymbol(prev);
        }
        return true;
    };
    Editor.prototype._eachLink = function (fn) {
        var left = this.selection.get().left;
        var link = this.blocks[left.blockIndex].textNodes[left.textIndex].style.link;
        if (!link) {
            return;
        }
        var block = this.blocks[left.blockIndex];
        var textNodes = block.textNodes;
        var linkNodes = [];
        for (var i = left.textIndex; i >= 0; i--) {
            if (textNodes[i].style.link !== link) {
                break;
            }
            linkNodes.unshift(textNodes[i]);
        }
        for (var i = left.textIndex + 1; i < textNodes.length; i++) {
            if (textNodes[i].style.link !== link) {
                break;
            }
            linkNodes.push(textNodes[i]);
        }
        linkNodes.forEach(fn);
    };
    Editor.prototype._createTempTextNode = function (_a) {
        var _b;
        var modifier = _a.modifier, modifierValue = _a.modifierValue;
        var _c = this.selection.get().left, offset = _c.offset, blockIndex = _c.blockIndex, textIndex = _c.textIndex;
        var nodeStyle;
        if (this._tempNode &&
            this._tempNode.offset === offset &&
            this._tempNode.blockIndex === blockIndex &&
            this._tempNode.textIndex === textIndex) {
            nodeStyle = this._tempNode.style;
        }
        else {
            nodeStyle = this.blocks[blockIndex].textNodes[textIndex].style;
        }
        var tempStyle = __assign(__assign({}, nodeStyle), (_b = {}, _b[modifier] = modifierValue, _b));
        var textNodes = this.blocks[blockIndex].textNodes;
        if (tempStyle.link && (!textNodes[textIndex + 1] || !textNodes[textIndex + 1].style.link)) {
            delete tempStyle.link;
        }
        this._tempNode = {
            style: tempStyle,
            blockIndex: blockIndex,
            textIndex: textIndex,
            offset: offset,
        };
    };
    Editor.prototype._createNodeFromTemp = function (data) {
        var _a = this._tempNode, style = _a.style, blockIndex = _a.blockIndex, textIndex = _a.textIndex, offset = _a.offset;
        var splitResult = this.blocks[blockIndex].splitTextNode(textIndex, offset);
        var newTextIndex = splitResult === Block_1.SplitResult.offsetStart ? textIndex : textIndex + 1;
        var textNode = new TextNode_1.TextNode(data, style);
        if (this.blocks[blockIndex].isEmpty()) {
            this.blocks[blockIndex].textNodes = [textNode];
        }
        else {
            this.blocks[blockIndex].textNodes.splice(newTextIndex, 0, textNode);
        }
        this.selection.set({
            range: false,
            left: {
                blockIndex: blockIndex,
                textIndex: newTextIndex,
                offset: data.length,
            },
        });
        this._tempNode = null;
        return true;
    };
    return Editor;
}());
exports.Editor = Editor;


/***/ }),

/***/ "../ts-richtext/sources/models/TextNode.ts":
/*!*************************************************!*\
  !*** ../ts-richtext/sources/models/TextNode.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(/*! ../constants */ "../ts-richtext/sources/constants.ts");
var RemoveTextResult;
(function (RemoveTextResult) {
    RemoveTextResult[RemoveTextResult["textIsEmpty"] = 0] = "textIsEmpty";
    RemoveTextResult[RemoveTextResult["complete"] = 1] = "complete";
    RemoveTextResult[RemoveTextResult["nullTextLength"] = 2] = "nullTextLength";
    RemoveTextResult[RemoveTextResult["forceRemovePrevious"] = 3] = "forceRemovePrevious";
    RemoveTextResult[RemoveTextResult["forceRemoveNext"] = 4] = "forceRemoveNext";
})(RemoveTextResult = exports.RemoveTextResult || (exports.RemoveTextResult = {}));
var TextNode = /** @class */ (function () {
    function TextNode(text, style) {
        this.text = text;
        this.style = style || constants_1.emptyStyle;
    }
    TextNode.prototype.isEmpty = function () {
        return this.text.length === 0;
    };
    TextNode.prototype.insert = function (data, offset) {
        this.text = this.text.slice(0, offset) + data + this.text.slice(offset);
    };
    TextNode.prototype.remove = function (offset, prev) {
        if (this.isEmpty()) {
            return RemoveTextResult.textIsEmpty;
        }
        if (offset === 0 && prev) {
            return RemoveTextResult.forceRemovePrevious;
        }
        if (offset === this.text.length && !prev) {
            return RemoveTextResult.forceRemoveNext;
        }
        if (prev) {
            this.text = this.text.slice(0, offset - 1) + this.text.slice(offset);
        }
        else {
            this.text = this.text.slice(0, offset) + this.text.slice(offset + 1);
        }
        if (this.text.length === 0) {
            return RemoveTextResult.nullTextLength;
        }
        return RemoveTextResult.complete;
    };
    return TextNode;
}());
exports.TextNode = TextNode;


/***/ }),

/***/ "../ts-richtext/sources/types.ts":
/*!***************************************!*\
  !*** ../ts-richtext/sources/types.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Modifier;
(function (Modifier) {
    Modifier[Modifier["none"] = 0] = "none";
    // block mods
    Modifier["style"] = "style";
    Modifier["align"] = "align";
    Modifier["blockquote"] = "blockquote";
    // text mods
    Modifier["bold"] = "bold";
    Modifier["italic"] = "italic";
    Modifier["strike"] = "strike";
    Modifier["fontSize"] = "font-size";
    Modifier["fontFamily"] = "font-family";
    Modifier["underline"] = "underline";
    Modifier["color"] = "color";
    Modifier["background"] = "background";
    Modifier["link"] = "link";
})(Modifier = exports.Modifier || (exports.Modifier = {}));
var Action;
(function (Action) {
    Action["add"] = "add";
    Action["innerAdd"] = "innerAdd";
    Action["remove"] = "remove";
    Action["update"] = "update";
    Action["undo"] = "undo";
    Action["paste"] = "paste";
    Action["copy"] = "copy";
    Action["cut"] = "cut";
    Action["redo"] = "redo";
    Action["clear"] = "clear";
    Action["parse"] = "parse";
    Action["selectAll"] = "selectAll";
})(Action = exports.Action || (exports.Action = {}));
var RTEToolbarBlock;
(function (RTEToolbarBlock) {
    RTEToolbarBlock["default"] = "default";
    RTEToolbarBlock["undo"] = "undo";
    RTEToolbarBlock["style"] = "style";
    RTEToolbarBlock["decoration"] = "decoration";
    RTEToolbarBlock["color"] = "colors";
    RTEToolbarBlock["align"] = "align";
    RTEToolbarBlock["link"] = "link";
    RTEToolbarBlock["clear"] = "clear";
    RTEToolbarBlock["fullscreen"] = "fullscreen";
    RTEToolbarBlock["stats"] = "stats";
})(RTEToolbarBlock = exports.RTEToolbarBlock || (exports.RTEToolbarBlock = {}));
var RichTextEvents;
(function (RichTextEvents) {
    RichTextEvents["change"] = "change";
    RichTextEvents["action"] = "action";
    RichTextEvents["selectionChange"] = "selectionchange";
    RichTextEvents["selectionRefresh"] = "selectionrefresh";
    RichTextEvents["showLinkEditor"] = "showlinkeditor";
    RichTextEvents["compositionStart"] = "compositionstart";
    RichTextEvents["compositionUpdate"] = "compositionupdate";
    RichTextEvents["compositionEnd"] = "compositionend";
})(RichTextEvents = exports.RichTextEvents || (exports.RichTextEvents = {}));


/***/ }),

/***/ "../ts-slider/index.ts":
/*!*****************************!*\
  !*** ../ts-slider/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Slider */ "../ts-slider/sources/Slider.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-slider/sources/types.ts"));


/***/ }),

/***/ "../ts-slider/sources/Slider.ts":
/*!**************************************!*\
  !*** ../ts-slider/sources/Slider.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var KeyManager_1 = __webpack_require__(/*! @dhx/ts-common/KeyManager */ "../ts-common/KeyManager.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-slider/sources/types.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
function normalizeValue(value, min, max) {
    if (value < min) {
        return min;
    }
    if (value > max) {
        return max;
    }
    return value;
}
function parseValue(value, min, max) {
    var values;
    if (value === undefined) {
        values = [];
    }
    else if (Array.isArray(value)) {
        values = value;
    }
    else if (typeof value === "string") {
        values = value.split(",").map(function (v) { return parseInt(v, 10); });
    }
    else {
        values = [value];
    }
    values[0] = values[0] === undefined ? min : normalizeValue(values[0], min, max);
    values[1] = values[1] === undefined ? max : normalizeValue(values[1], min, max);
    return values;
}
var Slider = /** @class */ (function (_super) {
    __extends(Slider, _super);
    function Slider(container, config) {
        var _this = _super.call(this, container, core_1.extend({
            mode: "horizontal",
            min: 0,
            max: 100,
            step: 1,
            tooltip: true,
        }, config)) || this;
        _this._disabled = false;
        _this.config.helpMessage = _this.config.helpMessage || _this.config.help; // TODO: remove suite_7.0
        if (_this.config.thumbLabel !== undefined) {
            _this.config.tooltip = _this.config.thumbLabel; // TODO: remove suite_7.0
        }
        if (_this.config.labelInline) {
            _this.config.labelPosition = "left"; // TODO: remove suite_7.0
        }
        _this.events = new events_1.EventSystem(_this);
        _this._axis = _this.config.mode === "horizontal" ? "clientX" : "clientY";
        _this._initStartPosition();
        _this._keyManager = new KeyManager_1.KeyManager(function () {
            var _a;
            var activeEl = document.activeElement;
            var element = (_a = _this.getRootView().refs[_this._isExtraActive ? "extraRunner" : "runner"]) === null || _a === void 0 ? void 0 : _a.el;
            return activeEl === element;
        });
        _this._initHotkeys();
        var vNode = dom_1.create({
            render: function () { return _this._draw(); },
            hooks: {
                didMount: function () { return _this._calcSliderPosition(); },
                didRedraw: function () { return _this._calcSliderPosition(); },
            },
        });
        _this._initHandlers();
        _this.mount(container, vNode);
        return _this;
    }
    Slider.prototype.disable = function () {
        this._disabled = true;
        this.paint();
    };
    Slider.prototype.enable = function () {
        this._disabled = false;
        this.paint();
    };
    Slider.prototype.isDisabled = function () {
        return this._disabled;
    };
    Slider.prototype.focus = function (extra) {
        this.getRootView().refs[extra ? "extraRunner" : "runner"].el.focus();
    };
    Slider.prototype.blur = function () {
        this.getRootView().refs[this._isExtraActive ? "extraRunner" : "runner"].el.blur();
    };
    Slider.prototype.getValue = function () {
        var res;
        if (this.config.range) {
            var a = this._getValue(this._currentPosition);
            var b = this._getValue(this._extraCurrentPosition);
            res = a < b ? [a, b] : [b, a];
        }
        else {
            res = [this._getValue(this._currentPosition)];
        }
        return res;
    };
    Slider.prototype.setValue = function (value) {
        var old = this._getValue(this._currentPosition);
        if (Array.isArray(value) && value.length > 1) {
            var oldExtra = this._getValue(this._extraCurrentPosition);
            this._setValue(value[0], false);
            this.events.fire(types_1.SliderEvents.change, [value[0], old, false]);
            this._setValue(value[1], true);
            this.events.fire(types_1.SliderEvents.change, [value[1], oldExtra, true]);
        }
        else {
            value = parseFloat(value);
            if (!isNaN(value)) {
                this._setValue(value);
                this.events.fire(types_1.SliderEvents.change, [value, old, false]);
            }
            else {
                throw new Error("Wrong value type, for more info check documentation https://docs.dhtmlx.com/suite/slider__api__slider_setvalue_method.html");
            }
        }
        this.paint();
    };
    Slider.prototype.destructor = function () {
        this._keyManager && this._keyManager.destructor();
        document.body.contains(this._tooltip) && document.body.removeChild(this._tooltip);
        this._tooltip = null;
        this.unmount();
    };
    Slider.prototype._calcSliderPosition = function () {
        var root = this.getRootView();
        if (!root) {
            return;
        }
        var tracker = root.refs.track.el;
        var rect = tracker.getBoundingClientRect();
        this._offsets = {
            left: rect.left + window.pageXOffset,
            top: rect.top + window.pageYOffset,
        };
        this._length = this.config.mode === "horizontal" ? rect.width : rect.height;
    };
    Slider.prototype._initHotkeys = function () {
        var _this = this;
        var handlers = {
            arrowLeft: function (e) {
                e.preventDefault();
                _this._move(-_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowRight: function (e) {
                e.preventDefault();
                _this._move(_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowUp: function (e) {
                e.preventDefault();
                _this._move(_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowDown: function (e) {
                e.preventDefault();
                _this._move(-_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
        };
        for (var key in handlers) {
            this._keyManager.addHotKey(key, handlers[key]);
        }
    };
    Slider.prototype._move = function (value, forExtra) {
        if (this.config.inverse) {
            value = -value;
        }
        var _a = this.config, max = _a.max, min = _a.min;
        var oldValue = forExtra
            ? this._getValue(this._extraCurrentPosition)
            : this._getValue(this._currentPosition);
        var newValue = oldValue + value;
        this._setValue(oldValue + value, forExtra);
        if (newValue > max || newValue < min) {
            newValue = oldValue;
        }
        this.events.fire(types_1.SliderEvents.change, [newValue, oldValue, forExtra]);
        this.paint();
    };
    Slider.prototype._initStartPosition = function () {
        var _a = this.config, max = _a.max, min = _a.min, range = _a.range;
        var _b = parseValue(this.config.value, this.config.min, this.config.max), value = _b[0], extraValue = _b[1];
        this._currentPosition = ((value - min) / (max - min)) * 100;
        if (range) {
            this._extraCurrentPosition = ((max - extraValue) / (max - min)) * 100;
        }
        this._currentPosition = ((value - min) / (max - min)) * 100;
        if (range) {
            this._extraCurrentPosition = ((extraValue - min) / (max - min)) * 100;
        }
        if (this._isInverse()) {
            this._currentPosition = 100 - this._currentPosition;
            if (range) {
                this._extraCurrentPosition = 100 - this._extraCurrentPosition;
            }
        }
    };
    Slider.prototype._getValue = function (value) {
        if (this._isInverse()) {
            value = 100 - value;
        }
        var _a = this.config, min = _a.min, max = _a.max, step = _a.step;
        if (value === 100) {
            return max;
        }
        if (value === 0) {
            return min;
        }
        var val = (value * (max - min)) / 100;
        var remain = val % step;
        var rounder = remain >= step / 2 ? step : 0;
        var result = Number(min) + Number(val) - remain + rounder;
        return +result.toFixed(5);
    };
    Slider.prototype._setValue = function (val, forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        var _a = this.config, max = _a.max, min = _a.min;
        if (val > max || val < min) {
            return false;
        }
        var rawValue = ((val - min) / (max - min)) * 100;
        var newValue = this._isInverse() ? 100 - rawValue : rawValue;
        if (forExtra) {
            this._extraCurrentPosition = newValue;
        }
        else {
            this._currentPosition = newValue;
        }
    };
    Slider.prototype._initHandlers = function () {
        var _this = this;
        var sliderMove = function (e) {
            !e.targetTouches && e.preventDefault();
            var currentPosition = e.targetTouches ? e.targetTouches[0][_this._axis] : e[_this._axis];
            var x = ((currentPosition - _this._getBegining()) / _this._length) * 100;
            if (_this._findNewDirection) {
                if (Math.abs(_this._currentPosition - x) < 1) {
                    return;
                }
                if (x > _this._currentPosition) {
                    _this._possibleRange = [_this._currentPosition, 100];
                }
                else {
                    _this._possibleRange = [0, _this._currentPosition];
                }
                _this._findNewDirection = null;
            }
            if (_this._inSide(x)) {
                _this._updatePosition(x, _this._isExtraActive);
            }
            _this.paint();
        };
        var sliderEnd = function (e) {
            _this.events.fire(types_1.SliderEvents.mouseup, [e]);
            setTimeout(function () {
                _this._isMouseMoving = false;
                _this.paint();
            }, 4);
            if (!e.targetTouches) {
                document.removeEventListener("mouseup", sliderEnd);
                document.removeEventListener("mousemove", sliderMove);
            }
            else {
                document.removeEventListener("touchend", sliderEnd);
                document.removeEventListener("touchmove", sliderMove);
            }
        };
        var sliderStart = function (e) {
            if (_this._disabled || e.which === 3) {
                return;
            }
            _this.events.fire(types_1.SliderEvents.mousedown, [e]);
            _this._isMouseMoving = true;
            var active;
            if (e.target.classList.contains("dhx_slider__thumb--extra")) {
                _this._isExtraActive = true;
                active = _this._extraCurrentPosition;
            }
            else {
                _this._isExtraActive = false;
                active = _this._currentPosition;
            }
            _this._findNewDirection = null;
            // define possible range
            if (_this.config.range) {
                var _a = _this._currentPosition > _this._extraCurrentPosition
                    ? [_this._currentPosition, _this._extraCurrentPosition]
                    : [_this._extraCurrentPosition, _this._currentPosition], more = _a[0], less = _a[1];
                if (_this._currentPosition === _this._extraCurrentPosition) {
                    _this._findNewDirection = active;
                    _this._possibleRange = [0, 100];
                }
                else if (active < more) {
                    _this._possibleRange = [0, more];
                }
                else {
                    _this._possibleRange = [less, 100];
                }
            }
            else {
                _this._possibleRange = [0, 100];
            }
        };
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        this._handlers = {
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target);
            },
            onmousedown: function (e) {
                sliderStart(e);
                document.addEventListener("mousemove", sliderMove);
                document.addEventListener("mouseup", sliderEnd);
            },
            ontouchstart: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = false;
                sliderStart(e);
                document.addEventListener("touchmove", sliderMove);
                document.addEventListener("touchend", sliderEnd);
                _this.paint();
            },
            ontouchend: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = false;
                _this.paint();
            },
            onlabelClick: function () {
                var refs = _this.getRootView().refs;
                refs.runner.el.focus();
            },
            onclick: function (e) {
                if (_this._disabled || _this._isMouseMoving || e.which === 3) {
                    return;
                }
                var x = ((e[_this._axis] - _this._getBegining()) / _this._length) * 100;
                var refs = _this.getRootView().refs;
                if (_this.config.range) {
                    var dist = Math.abs(_this._currentPosition - x);
                    var extraDist = Math.abs(_this._extraCurrentPosition - x);
                    if (dist < extraDist) {
                        _this._updatePosition(x, false);
                        refs.runner.el.focus();
                    }
                    else {
                        _this._updatePosition(x, true);
                        refs.extraRunner.el.focus();
                    }
                }
                else {
                    _this._updatePosition(x, false);
                    refs.runner.el.focus();
                }
                _this.paint();
            },
            onmouseover: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = true;
                _this.paint();
            },
            onmouseout: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = false;
                _this.paint();
            },
            onfocus: function (e) {
                _this._setTooltip(e);
                _this._focusIn = true;
                _this.events.fire(types_1.SliderEvents.focus, []);
                _this.paint();
            },
            onblur: function (e) {
                _this._setTooltip(e);
                _this._focusIn = false;
                _this.events.fire(types_1.SliderEvents.blur, []);
                _this.paint();
            },
            onkeydown: function (e) {
                _this.events.fire(types_1.SliderEvents.keydown, [e]);
            },
        };
    };
    Slider.prototype._getBegining = function () {
        return this.config.mode === "horizontal"
            ? this._offsets.left - window.pageXOffset
            : this._offsets.top - window.pageYOffset;
    };
    Slider.prototype._inSide = function (x) {
        var range = this._possibleRange;
        if (x < range[0]) {
            this._updatePosition(range[0], this._isExtraActive);
            return false;
        }
        if (x > range[1]) {
            this._updatePosition(range[1], this._isExtraActive);
            return false;
        }
        return true;
    };
    Slider.prototype._updatePosition = function (x, extra) {
        if (extra === void 0) { extra = false; }
        if (x > 100) {
            x = 100;
        }
        if (x < 0) {
            x = 0;
        }
        var _a = this.config, max = _a.max, min = _a.min;
        var position = extra ? this._extraCurrentPosition : this._currentPosition;
        var oldValue = this._getValue(position);
        var newValue = this._getValue(x);
        if (oldValue === newValue) {
            return;
        }
        var rawValue = ((newValue - min) / (max - min)) * 100;
        var value = this._isInverse() ? 100 - rawValue : rawValue;
        if (extra) {
            this._extraCurrentPosition = value;
        }
        else {
            this._currentPosition = value;
        }
        this.events.fire(types_1.SliderEvents.change, [newValue, oldValue, extra]);
    };
    Slider.prototype._getRunnerStyle = function (forExtra) {
        var _a;
        if (forExtra === void 0) { forExtra = false; }
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var pos = forExtra ? this._extraCurrentPosition : this._currentPosition;
        return _a = {},
            _a[direction] = pos + "%",
            _a;
    };
    Slider.prototype._isInverse = function () {
        return ((this.config.inverse && this.config.mode === "horizontal") ||
            (!this.config.inverse && this.config.mode === "vertical"));
    };
    Slider.prototype._getRunnerCss = function (forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        return ("dhx_slider__thumb" +
            (forExtra ? " dhx_slider__thumb--extra" : "") +
            (this._isMouseMoving && ((forExtra && this._isExtraActive) || (!forExtra && !this._isExtraActive))
                ? " dhx_slider__thumb--active"
                : "") +
            (this._disabled ? " dhx_slider__thumb--disabled" : "") +
            (this._isNullable(forExtra ? this._extraCurrentPosition : this._currentPosition) &&
                !this.config.range
                ? " dhx_slider__thumb--nullable"
                : ""));
    };
    Slider.prototype._draw = function () {
        var _a = this.config, labelPosition = _a.labelPosition, mode = _a.mode, hiddenLabel = _a.hiddenLabel, tick = _a.tick, majorTick = _a.majorTick, css = _a.css, helpMessage = _a.helpMessage;
        var labelStyle = html_1.getLabelStyle(__assign(__assign({}, this.config), { required: false }));
        if (this._tooltip && (!this._mouseIn || !this._focusIn || !this._isMouseMoving)) {
            document.body.contains(this._tooltip) && document.body.removeChild(this._tooltip);
        }
        return dom_1.el("div", {
            class: "dhx_slider" +
                " dhx_slider--mode_" +
                mode +
                (labelPosition === "left" ? " dhx_slider--label-inline" : "") +
                (hiddenLabel ? " dhx_slider--label_sr" : "") +
                (tick ? " dhx_slider--ticks" : "") +
                (majorTick ? " dhx_slider--major-ticks" : "") +
                (css ? " " + css : "") +
                (this._disabled ? " dhx_slider--disabled" : ""),
        }, [
            labelStyle
                ? dom_1.el("label.dhx_label.dhx_slider__label", {
                    style: labelStyle.style,
                    class: helpMessage ? "dhx_label--with-help" : "",
                    onclick: this._handlers.onlabelClick,
                }, helpMessage
                    ? [
                        labelStyle.label && dom_1.el("span.dhx_label__holder", labelStyle.label),
                        dom_1.el("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                            tabindex: "0",
                            role: "button",
                            onclick: this._handlers.showHelper,
                        }),
                    ]
                    : labelStyle.label)
                : null,
            this._drawSlider(),
        ]);
    };
    Slider.prototype._drawSlider = function () {
        return dom_1.el(".dhx_widget.dhx_slider__track-holder", {
            dhx_widget_id: this._uid,
        }, [
            dom_1.el(".dhx_slider__track", {
                _ref: "track",
                onmouseover: this._handlers.onmouseover,
                onmouseout: this._handlers.onmouseout,
                onclick: this._handlers.onclick,
            }, [
                this._getDetector(),
                dom_1.el("div", {
                    _ref: "runner",
                    class: this._getRunnerCss(),
                    ontouchstart: this._handlers.ontouchstart,
                    ontouchend: this._handlers.ontouchend,
                    onmousedown: this._handlers.onmousedown,
                    onfocus: this._handlers.onfocus,
                    onblur: this._handlers.onblur,
                    onkeydown: this._handlers.onkeydown,
                    style: this._getRunnerStyle(),
                    tabindex: 0,
                }),
                this.config.tooltip && (this._mouseIn || this._focusIn || this._isMouseMoving)
                    ? this._drawTooltip()
                    : null,
                this.config.tooltip &&
                    this.config.range &&
                    (this._mouseIn || this._focusIn || this._isMouseMoving)
                    ? this._drawTooltip(true)
                    : null,
                this.config.range
                    ? dom_1.el("div", {
                        _ref: "extraRunner",
                        class: this._getRunnerCss(true),
                        ontouchstart: this._handlers.ontouchstart,
                        ontouchend: this._handlers.ontouchend,
                        onmousedown: this._handlers.onmousedown,
                        onfocus: this._handlers.onfocus,
                        onblur: this._handlers.onblur,
                        onkeydown: this._handlers.onkeydown,
                        style: this._getRunnerStyle(true),
                        tabindex: 0,
                    })
                    : null,
            ]),
            this.config.tick ? this._drawTicks() : null,
        ]);
    };
    Slider.prototype._getDetector = function () {
        var _a, _b, _c;
        if (this._disabled) {
            return dom_1.el(".dhx_slider__range");
        }
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var size = this.config.mode === "horizontal" ? "width" : "height";
        if (this.config.range) {
            var _d = this._currentPosition > this._extraCurrentPosition
                ? [this._currentPosition, this._extraCurrentPosition]
                : [this._extraCurrentPosition, this._currentPosition], more = _d[0], less = _d[1];
            return dom_1.el(".dhx_slider__range", {
                style: (_a = {},
                    _a[direction] = less + "%",
                    _a[size] = more - less + "%",
                    _a),
            });
        }
        if (this._isInverse()) {
            return dom_1.el(".dhx_slider__range", {
                style: (_b = {},
                    _b[direction] = this._currentPosition + "%",
                    _b[size] = 100 - this._currentPosition + "%",
                    _b),
            });
        }
        return dom_1.el(".dhx_slider__range", {
            style: (_c = {},
                _c[direction] = 0,
                _c[size] = this._currentPosition + "%",
                _c),
        });
    };
    Slider.prototype._drawTooltip = function (forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        if (this._activeTooltip === "none" || !this.getRootView())
            return;
        var pos = this._activeTooltip === "extraTooltip" ? this._extraCurrentPosition : this._currentPosition;
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var classNameModifiers = "";
        if ((forExtra && this._isExtraActive) || (!forExtra && !this._isExtraActive)) {
            classNameModifiers += " dhx_slider__thumb-label--active";
        }
        if (!this._tooltip) {
            this._tooltip = document.createElement("div");
        }
        var coords = this._activeTooltip === "tooltip"
            ? this.getRootView().refs.runner.el.getBoundingClientRect()
            : this.getRootView().refs.extraRunner.el.getBoundingClientRect();
        this._tooltip.className = "dhx_slider__thumb-label" + classNameModifiers;
        this._tooltip.style.left = coords.x + (direction === "left" ? 6 : -30) + window.pageXOffset + "px";
        this._tooltip.style.top = coords.y + (direction === "left" ? -30 : 6) + window.pageYOffset + "px";
        this._tooltip.innerText = this._getValue(pos).toString();
        document.body.appendChild(this._tooltip);
    };
    Slider.prototype._getTicks = function () {
        var _a = this.config, max = _a.max, min = _a.min, step = _a.step, tick = _a.tick, majorTick = _a.majorTick;
        var len = max - min;
        var tickLength = (step * tick) / len;
        var positions = [];
        var length = 0;
        var index = 0;
        while (length < 1) {
            var tickValue = +(Number(min) + length * len).toFixed(5);
            var isMultiple = index % majorTick === 0;
            positions.push({
                position: (this._isInverse() ? (1 - length) * 100 : length * 100) + "%",
                isMultiple: isMultiple,
                label: isMultiple && typeof this.config.tickTemplate === "function"
                    ? this.config.tickTemplate(tickValue)
                    : null,
            });
            length += tickLength;
            index++;
        }
        positions.push({
            position: (this._isInverse() ? 0 : 100) + "%",
            isMultiple: true,
            label: typeof this.config.tickTemplate === "function" ? this.config.tickTemplate(max) : null,
        });
        return positions;
    };
    Slider.prototype._drawTicks = function () {
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        return dom_1.el(".dhx_slider__ticks-holder", this._getTicks().map(function (tick) {
            var _a;
            return dom_1.el("div", {
                class: "dhx_slider__tick" + (tick.isMultiple ? " dhx_slider__tick--major" : ""),
                style: (_a = {},
                    _a[direction] = tick.position,
                    _a),
            }, tick.label !== undefined ? [dom_1.el(".dhx_slider__tick-label", tick.label)] : null);
        }));
    };
    Slider.prototype._isNullable = function (value) {
        if (this._isInverse()) {
            return value === 100;
        }
        else {
            return value === 0;
        }
    };
    Slider.prototype._setTooltip = function (e) {
        if (e.target.classList.contains("dhx_slider__thumb--extra")) {
            this._activeTooltip = "extraTooltip";
        }
        else if (e.target.classList.contains("dhx_slider__thumb")) {
            this._activeTooltip = "tooltip";
        }
        else {
            this._activeTooltip = "none";
        }
    };
    return Slider;
}(view_1.View));
exports.Slider = Slider;


/***/ }),

/***/ "../ts-slider/sources/types.ts":
/*!*************************************!*\
  !*** ../ts-slider/sources/types.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SliderEvents;
(function (SliderEvents) {
    SliderEvents["change"] = "change";
    SliderEvents["focus"] = "focus";
    SliderEvents["blur"] = "blur";
    SliderEvents["keydown"] = "keydown";
    SliderEvents["mousedown"] = "mousedown";
    SliderEvents["mouseup"] = "mouseup";
})(SliderEvents = exports.SliderEvents || (exports.SliderEvents = {}));


/***/ }),

/***/ "../ts-timepicker/index.ts":
/*!*********************************!*\
  !*** ../ts-timepicker/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Timepicker */ "../ts-timepicker/sources/Timepicker.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-timepicker/sources/types.ts"));


/***/ }),

/***/ "../ts-timepicker/sources/Timepicker.ts":
/*!**********************************************!*\
  !*** ../ts-timepicker/sources/Timepicker.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var ts_slider_1 = __webpack_require__(/*! @dhx/ts-slider */ "../ts-slider/index.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-timepicker/sources/locales/en.ts");
var helper_1 = __webpack_require__(/*! ./helper */ "../ts-timepicker/sources/helper.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-timepicker/sources/types.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
function validate(value, max) {
    if (isNaN(value)) {
        return 0;
    }
    return Math.min(max, Math.max(0, value));
}
var Timepicker = /** @class */ (function (_super) {
    __extends(Timepicker, _super);
    function Timepicker(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, core_1.extend({
            timeFormat: 24,
            controls: false,
            valueFormat: "string",
            actions: false,
        }, config)) || this;
        _this.events = new events_1.EventSystem(_this);
        _this._time = {
            hour: 0,
            minute: 0,
            AM: true,
        };
        if (_this.config.timeFormat === 12) {
            _this._time.hour = 12;
        }
        _this.config.controls = _this.config.controls || _this.config.actions; // TODO: remove suite_7.0
        _this.config.value && _this._setValue(_this.config.value);
        _this._initUI(container);
        _this._initHandlers();
        _this._initEvents();
        return _this;
    }
    Timepicker.prototype.getValue = function (asOBject) {
        if (this.config.timeFormat === 12)
            this._time.hour = this._time.hour % 12 || 12;
        var _a = this._time, h = _a.hour, m = _a.minute, isAM = _a.AM;
        if (asOBject) {
            var obj = {
                hour: h,
                minute: m,
            };
            if (this.config.timeFormat === 12) {
                obj.AM = isAM;
            }
            return obj;
        }
        return ((h < 10 ? "0" + h : h) +
            ":" +
            (m < 10 ? "0" + m : m) +
            (this.config.timeFormat === 12 ? (isAM ? "AM" : "PM") : ""));
    };
    Timepicker.prototype.setValue = function (value) {
        this._setValue(value);
        this._hoursSlider.setValue(this._time.hour);
        this._minutesSlider.setValue(this._time.minute);
        this._inputsView.paint();
    };
    Timepicker.prototype.clear = function () {
        if (this.config.timeFormat === 24) {
            this.setValue("00:00");
        }
        else {
            this.setValue("12:00AM");
        }
    };
    Timepicker.prototype.destructor = function () {
        this._minutesSlider && this._minutesSlider.destructor();
        this._hoursSlider && this._hoursSlider.destructor();
        this.events && this.events.clear();
        this.layout && this.layout.destructor();
        this.config = this.events = null;
        this._handlers = this._time = this._inputsView = this._minutesSlider = this._hoursSlider = null;
        this.unmount();
    };
    Timepicker.prototype.getRootView = function () {
        return this.layout.getRootView();
    };
    Timepicker.prototype._setValue = function (value) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var m = 0;
        var h = 0;
        var isPM;
        if (typeof value === "number") {
            value = new Date(value);
        }
        if (value instanceof Date) {
            m = value.getMinutes();
            h = value.getHours();
        }
        else if (Array.isArray(value)) {
            h = validate(value[0], 23);
            m = validate(value[1], 59);
            if (value[2] && value[2].toLowerCase() === "pm") {
                isPM = true;
            }
        }
        else if (typeof value === "string") {
            var matches = value.match(/\d+/g);
            h = validate(+matches[0], 23);
            m = validate(+matches[1], 59);
            if (value.toLowerCase().includes("pm")) {
                isPM = true;
            }
        }
        else if (typeof value === "object" &&
            value.hasOwnProperty("hour") &&
            value.hasOwnProperty("minute")) {
            h = value.hour;
            m = value.minute;
            isPM = !value.AM;
        }
        if (isPM && h < 12) {
            h += 12;
        }
        if (this.config.timeFormat === 12 && !helper_1.isTimeCheck(value) && h >= 12)
            isPM = true;
        return (this._time = {
            hour: h,
            minute: m,
            AM: !isPM,
        });
    };
    Timepicker.prototype._initUI = function (container) {
        var _this = this;
        var layoutConfig = {
            gravity: false,
            css: "dhx_widget dhx_timepicker " +
                (this.config.css ? this.config.css : "") +
                (this.config.controls ? " dhx_timepicker--with-controls" : ""),
            rows: [
                {
                    id: "timepicker",
                    css: "dhx_timepicker__inputs",
                },
                {
                    id: "hour-slider",
                    css: "dhx_timepicker__hour",
                },
                {
                    id: "minute-slider",
                    css: "dhx_timepicker__minute",
                },
            ],
        };
        if (this.config.controls) {
            layoutConfig.rows.unshift({
                id: "close-action",
                css: "dhx_timepicker__close",
            });
            layoutConfig.rows.push({
                id: "save-action",
                css: "dhx_timepicker__save",
            });
        }
        var layout = (this.layout = new ts_layout_1.Layout(container, layoutConfig));
        var timepicker = dom_1.create({
            render: function () { return _this._draw(); },
        });
        var inputsView = (this._inputsView = view_1.toViewLike(timepicker));
        var mSlider = (this._minutesSlider = new ts_slider_1.Slider(null, {
            min: 0,
            max: 59,
            step: 1,
            tooltip: false,
            labelPosition: "top",
            label: en_1.default.minutes,
            value: this.config.value ? this._time.minute : 0,
        }));
        var hSlider = (this._hoursSlider = new ts_slider_1.Slider(null, {
            min: 0,
            max: 23,
            step: 1,
            tooltip: false,
            labelPosition: "top",
            label: en_1.default.hours,
            value: this.config.value ? (this._time.hour === 12 && this._time.AM ? 0 : this._time.hour) : 0,
        }));
        layout.getCell("timepicker").attach(inputsView);
        layout.getCell("hour-slider").attach(hSlider);
        layout.getCell("minute-slider").attach(mSlider);
        if (this.config.controls) {
            var save = function () {
                return dom_1.el("button.dhx_timepicker__button-save.dhx_button.dhx_button--view_flat.dhx_button--color_primary.dhx_button--size_small.dhx_button--circle.dhx_button--width_full", {
                    onclick: _this._outerHandlers.save,
                    type: "button",
                }, en_1.default.save);
            };
            var close_1 = function () {
                return dom_1.el("button.dhx_timepicker__button-close.dhx_button.dhx_button--view_link.dhx_button--size_medium.dhx_button--view_link.dhx_button--color_secondary.dhx_button--icon.dhx_button--circle", {
                    _ref: "close",
                    onclick: _this._outerHandlers.close,
                    type: "button",
                    "aria-label": "close timepicker",
                }, [dom_1.el("span.dhx_button__icon.dxi.dxi-close")]);
            };
            layout.getCell("save-action").attach(save);
            layout.getCell("close-action").attach(close_1);
        }
    };
    Timepicker.prototype._initHandlers = function () {
        var _this = this;
        var setMinutes = function (element) {
            var min = validate(parseInt(element.value, 10), 59);
            element.value = min.toString();
            _this._minutesSlider.setValue(min);
        };
        var setHours = function (element) {
            var hour = validate(parseInt(element.value, 10), 23);
            element.value = hour.toString();
            _this._minutesSlider.setValue(hour);
        };
        this._handlers = {
            onchange: {
                ".dhx_timepicker-input--hour": function (e) { return setHours(e.target); },
                ".dhx_timepicker-input--minutes": function (e) { return setMinutes(e.target); },
            },
            oninput: {
                ".dhx_timepicker-input--hour": function (e) {
                    if (!html_1.isSafari() && !html_1.isFirefox())
                        return;
                    setHours(e.target);
                },
                ".dhx_timepicker-input--minutes": function (e) {
                    if (!html_1.isSafari() && !html_1.isFirefox())
                        return;
                    setMinutes(e.target);
                },
            },
        };
        this._outerHandlers = {
            close: function () {
                if (!_this.events.fire(types_1.TimepickerEvents.beforeClose, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ])) {
                    return;
                }
                _this.events.fire(types_1.TimepickerEvents.afterClose, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ]);
                _this.events.fire(types_1.TimepickerEvents.close, []); // TODO: remove suite_7.0
            },
            save: function () {
                if (!_this.events.fire(types_1.TimepickerEvents.beforeApply, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ]))
                    return;
                _this.events.fire(types_1.TimepickerEvents.afterApply, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ]);
                _this.events.fire(types_1.TimepickerEvents.apply, [_this.getValue()]); // TODO: remove suite_7.0
                _this.events.fire(types_1.TimepickerEvents.save, [_this._time]); // TODO: remove suite_7.0
            },
        };
    };
    Timepicker.prototype._initEvents = function () {
        var _this = this;
        this._hoursSlider.events.on(ts_slider_1.SliderEvents.change, function (value) {
            if (value < _this._hoursSlider.config.min || value > _this._hoursSlider.config.max) {
                return;
            }
            if (_this.config.timeFormat === 12) {
                _this._time.AM = value < 12;
                _this._time.hour = value % 12 || 12;
            }
            else {
                _this._time.hour = value;
            }
            _this.events.fire(types_1.TimepickerEvents.change, [
                _this.getValue(_this.config.valueFormat === "timeObject"),
            ]);
            _this._inputsView.paint();
        });
        this._minutesSlider.events.on(ts_slider_1.SliderEvents.change, function (value) {
            if (value < _this._minutesSlider.config.min || value > _this._minutesSlider.config.max) {
                return;
            }
            _this._time.minute = value;
            _this.events.fire(types_1.TimepickerEvents.change, [
                _this.getValue(_this.config.valueFormat === "timeObject"),
            ]);
            _this._inputsView.paint();
        });
    };
    Timepicker.prototype._draw = function () {
        return dom_1.el(".dhx_timepicker-inputs", __assign({}, this._handlers), [
            dom_1.el("input.dhx_timepicker-input.dhx_timepicker-input--hour", {
                _key: "hour",
                _ref: "hour",
                value: this.getValue(true).hour.toString().length > 1
                    ? this.getValue(true).hour
                    : "0" + this.getValue(true).hour,
                "aria-label": "hours",
            }),
            dom_1.el("span.dhx_timepicker-delimer", ":"),
            dom_1.el("input.dhx_timepicker-input.dhx_timepicker-input--minutes", {
                _key: "minute",
                value: this.getValue(true).minute.toString().length > 1
                    ? this.getValue(true).minute
                    : "0" + this.getValue(true).minute,
                "aria-label": "minutes",
            }),
            this.config.timeFormat === 12
                ? dom_1.el(".dhx_timepicker-ampm", this._time.AM ? "AM" : "PM")
                : null,
        ]);
    };
    return Timepicker;
}(view_1.View));
exports.Timepicker = Timepicker;


/***/ }),

/***/ "../ts-timepicker/sources/helper.ts":
/*!******************************************!*\
  !*** ../ts-timepicker/sources/helper.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This function is designed to resolve conflicts with the time setting for the 12 hour format.
 */
function isTimeCheck(value) {
    return /(^12:[0-5][0-9]?AM$)/i.test(value);
}
exports.isTimeCheck = isTimeCheck;


/***/ }),

/***/ "../ts-timepicker/sources/locales/en.ts":
/*!**********************************************!*\
  !*** ../ts-timepicker/sources/locales/en.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    hours: "Hours",
    minutes: "Minutes",
    save: "Save",
};
exports.default = locale;


/***/ }),

/***/ "../ts-timepicker/sources/types.ts":
/*!*****************************************!*\
  !*** ../ts-timepicker/sources/types.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TimepickerEvents;
(function (TimepickerEvents) {
    TimepickerEvents["change"] = "change";
    TimepickerEvents["beforeApply"] = "beforeApply";
    TimepickerEvents["afterApply"] = "afterApply";
    TimepickerEvents["beforeClose"] = "beforeClose";
    TimepickerEvents["afterClose"] = "afterClose";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["apply"] = "apply";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["close"] = "close";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["save"] = "save";
})(TimepickerEvents = exports.TimepickerEvents || (exports.TimepickerEvents = {}));


/***/ }),

/***/ "../ts-toolbar/index.ts":
/*!******************************!*\
  !*** ../ts-toolbar/index.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Toolbar */ "../ts-toolbar/sources/Toolbar.ts"));
__export(__webpack_require__(/*! ./sources/ProToolbar */ "../ts-toolbar/sources/ProToolbar.ts"));


/***/ }),

/***/ "../ts-toolbar/sources/ProToolbar.ts":
/*!*******************************************!*\
  !*** ../ts-toolbar/sources/ProToolbar.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Toolbar_1 = __webpack_require__(/*! ./Toolbar */ "../ts-toolbar/sources/Toolbar.ts");
var ScrollView_1 = __webpack_require__(/*! @dhx/ts-common/ScrollView */ "../ts-common/ScrollView.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message */ "../ts-message/index.ts");
var ProToolbar = /** @class */ (function (_super) {
    __extends(ProToolbar, _super);
    function ProToolbar(element, config) {
        var _this = _super.call(this, element, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); });
        return _this;
    }
    ProToolbar.prototype._draw = function (element) {
        var _this = this;
        var getAriaAttrs = function (element) { return ({
            role: "toolbar",
            "aria-label": element || "",
        }); };
        var toolbarHeight = this.data.getLength()
            ? this.data.reduce(function (result, item) {
                switch (item.type) {
                    case "title":
                        return !result ? 20 : result;
                    case "button":
                        return item.size === "small" && (!result || result <= 28) ? 28 : result || 32;
                    default:
                        return 32;
                }
            }, 0) + 24
            : null;
        var navBar = [
            dom_1.el("ul.dhx_navbar.dhx_navbar--horizontal", __assign(__assign({ dhx_widget_id: this._uid, tabindex: 0 }, getAriaAttrs(element)), { onclick: this._handlers.onclick, onmousedown: this._handlers.onmousedown, oninput: this._handlers.input, onmouseover: this._handlers.tooltip, _hooks: {
                    didInsert: function (node) {
                        node.el.addEventListener("keyup", function (e) {
                            if (e.which !== 9) {
                                return;
                            }
                            var elem = html_1.locateNode(document.activeElement);
                            if (!elem) {
                                return;
                            }
                            var id = elem.getAttribute("dhx_id");
                            var item = _this.data.getItem(id);
                            if (item.tooltip) {
                                ts_message_1.tooltip(item.tooltip, {
                                    node: elem,
                                    position: ts_message_1.Position.bottom,
                                    force: true,
                                });
                            }
                        }, true);
                    },
                } }), this.data.map(function (item) { return _this._factory(item); }, this.data.getRoot(), false)),
        ];
        return dom_1.el("nav.dhx_widget.dhx_toolbar", {
            style: { height: toolbarHeight },
            class: this.config.css ? this.config.css : "",
        }, this.scrollView && this.scrollView.config.enable
            ? [].concat(this.scrollView.render(navBar))
            : navBar);
    };
    return ProToolbar;
}(Toolbar_1.Toolbar));
exports.ProToolbar = ProToolbar;


/***/ }),

/***/ "../ts-toolbar/sources/Toolbar.ts":
/*!****************************************!*\
  !*** ../ts-toolbar/sources/Toolbar.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message */ "../ts-message/index.ts");
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
var Toolbar = /** @class */ (function (_super) {
    __extends(Toolbar, _super);
    function Toolbar(element, config) {
        var _this = _super.call(this, element, core_1.extend({
            navigationType: "click",
        }, config)) || this;
        _this._currentRoot = null;
        var render = function () { return _this._draw(element); };
        _this.mount(element, dom_1.create({ render: render }));
        return _this;
    }
    Toolbar.prototype.getState = function (id) {
        if (core_1.isDefined(id) && !this.data.getItem(id)) {
            return;
        }
        var state = {};
        this.data.eachChild(this.data.getRoot(), function (item) {
            if (item.twoState && !item.group) {
                state[item.id] = item.active;
            }
            else if (item.type === "input" || item.type === "selectButton") {
                state[item.id] = item.value;
            }
        }, false);
        for (var key in this._groups) {
            if (this._groups[key].active) {
                state[key] = this._groups[key].active;
            }
        }
        if (id) {
            return state[id];
        }
        return state;
    };
    Toolbar.prototype.setState = function (state) {
        for (var key in state) {
            if (this._groups && this._groups[key]) {
                if (this._groups[key].active) {
                    this.data.update(this._groups[key].active, { active: false });
                    this._groups[key].active = state[key];
                    this.data.update(state[key], { active: true });
                }
            }
            else {
                var item = this.data.getItem(key);
                if (item.type === "input" || item.type === "selectButton") {
                    this.data.update(key, { value: state[key] });
                }
                else {
                    this.data.update(key, { active: state[key] });
                }
            }
        }
    };
    Toolbar.prototype._customHandlers = function () {
        var _this = this;
        return {
            input: function (e) {
                var id = html_1.locate(e);
                _this.data.update(id, { value: e.target.value });
            },
            tooltip: function (e) {
                var elem = html_1.locateNode(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("dhx_id");
                var item = _this.data.getItem(id);
                if (item.tooltip) {
                    ts_message_1.tooltip(item.tooltip, {
                        node: elem,
                        position: ts_message_1.Position.bottom,
                    });
                }
            },
        };
    };
    Toolbar.prototype._getFactory = function () {
        return ts_navbar_1.createFactory({
            widget: this,
            defaultType: "navItem",
            allowedTypes: [
                "button",
                "imageButton",
                "selectButton",
                "navItem",
                "menuItem",
                "separator",
                "spacer",
                "title",
                "input",
                "customHTML",
                "datePicker",
                "customHTMLButton",
            ],
            widgetName: "toolbar",
        });
    };
    Toolbar.prototype._draw = function (element) {
        var _this = this;
        var getAriaAttrs = function (element) { return ({
            role: "toolbar",
            "aria-label": element || "",
        }); };
        var toolbarHeight = this.data.getLength()
            ? this.data.reduce(function (result, item) {
                switch (item.type) {
                    case "title":
                        return !result ? 20 : result;
                    case "button":
                        return item.size === "small" && (!result || result <= 28) ? 28 : result || 32;
                    default:
                        return 32;
                }
            }, 0) + 24
            : null;
        return dom_1.el("nav.dhx_widget.dhx_toolbar", {
            style: { height: toolbarHeight },
            class: this.config.css ? this.config.css : "",
        }, [
            dom_1.el("ul.dhx_navbar.dhx_navbar--horizontal", __assign(__assign({ dhx_widget_id: this._uid, tabindex: 0 }, getAriaAttrs(element)), { onclick: this._handlers.onclick, onmousedown: this._handlers.onmousedown, oninput: this._handlers.input, onmouseover: this._handlers.tooltip, _hooks: {
                    didInsert: function (node) {
                        node.el.addEventListener("keyup", function (e) {
                            if (e.which !== 9) {
                                return;
                            }
                            var elem = html_1.locateNode(document.activeElement);
                            if (!elem) {
                                return;
                            }
                            var id = elem.getAttribute("dhx_id");
                            var item = _this.data.getItem(id);
                            if (item.tooltip) {
                                ts_message_1.tooltip(item.tooltip, {
                                    node: elem,
                                    position: ts_message_1.Position.bottom,
                                    force: true,
                                });
                            }
                        }, true);
                    },
                } }), this.data.map(function (item) { return _this._factory(item); }, this.data.getRoot(), false)),
        ]);
    };
    Toolbar.prototype._getMode = function (item, root) {
        return item.id === root ? "bottom" : "right";
    };
    Toolbar.prototype._close = function (e) {
        this._activePosition = null;
        this._currentRoot = null;
        _super.prototype._close.call(this, e);
    };
    Toolbar.prototype._setRoot = function (id) {
        if (this.data.getParent(id) === this.data.getRoot()) {
            this._currentRoot = id;
        }
    };
    return Toolbar;
}(ts_navbar_1.Navbar));
exports.Toolbar = Toolbar;


/***/ }),

/***/ 0:
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** multi ../ts-common/polyfills/object.ts ../ts-common/polyfills/array.ts ../ts-common/polyfills/string.ts ../ts-common/polyfills/element.ts ../ts-common/polyfills/math.ts ../ts-richtext/sources/entry.ts ***!
  \****************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../ts-common/polyfills/object.ts */"../ts-common/polyfills/object.ts");
__webpack_require__(/*! ../ts-common/polyfills/array.ts */"../ts-common/polyfills/array.ts");
__webpack_require__(/*! ../ts-common/polyfills/string.ts */"../ts-common/polyfills/string.ts");
__webpack_require__(/*! ../ts-common/polyfills/element.ts */"../ts-common/polyfills/element.ts");
__webpack_require__(/*! ../ts-common/polyfills/math.ts */"../ts-common/polyfills/math.ts");
module.exports = __webpack_require__(/*! /Users/grazinalbc/Мое хранилище/Github/widgets/ts-richtext/sources/entry.ts */"../ts-richtext/sources/entry.ts");


/***/ })

/******/ });
});if (window.dhx_legacy) { if (window.dhx){ for (var key in dhx) dhx_legacy[key] = dhx[key]; } window.dhx = dhx_legacy; delete window.dhx_legacy; }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kaHgvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2RoeC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9kaHgvLi4vbm9kZV9tb2R1bGVzL2RvbXZtL2Rpc3QvZGV2L2RvbXZtLmRldi5qcyIsIndlYnBhY2s6Ly9kaHgvLi4vbm9kZV9tb2R1bGVzL21hcmtlZC9saWIvbWFya2VkLmpzIiwid2VicGFjazovL2RoeC8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovL2RoeC8uLi9ub2RlX21vZHVsZXMvcHJvbWl6L3Byb21pei5qcyIsIndlYnBhY2s6Ly9kaHgvLi4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovL2RoeC8uLi9zdHlsZXMvcmljaHRleHQuc2Nzcz8wZDIzIiwid2VicGFjazovL2RoeC8uLi90cy1jYWxlbmRhci9pbmRleC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY2FsZW5kYXIvc291cmNlcy9DYWxlbmRhci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY2FsZW5kYXIvc291cmNlcy9oZWxwZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNhbGVuZGFyL3NvdXJjZXMvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbG9ycGlja2VyL2luZGV4LnRzIiwid2VicGFjazovL2RoeC8uLi90cy1jb2xvcnBpY2tlci9zb3VyY2VzL0NvbG9ycGlja2VyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1jb2xvcnBpY2tlci9zb3VyY2VzL2NvbG9ycy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29sb3JwaWNrZXIvc291cmNlcy9oZWxwZXJzL2NhbGN1bGF0aW9ucy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29sb3JwaWNrZXIvc291cmNlcy9oZWxwZXJzL2NvbG9yLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1jb2xvcnBpY2tlci9zb3VyY2VzL2xvY2FsZXMvZW4udHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbG9ycGlja2VyL3NvdXJjZXMvcGlja2VyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1jb2xvcnBpY2tlci9zb3VyY2VzL3R5cGVzLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1jb21ib2JveC9pbmRleC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tYm9ib3gvc291cmNlcy9Db21ib2JveC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tYm9ib3gvc291cmNlcy9Qcm9Db21ib2JveC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tYm9ib3gvc291cmNlcy9oZWxwZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbWJvYm94L3NvdXJjZXMva2V5TGlzdGVuZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbWJvYm94L3NvdXJjZXMvbG9jYWxlcy9lbi50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tYm9ib3gvc291cmNlcy90eXBlcy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tbW9uL0ZvY3VzTWFuYWdlci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tbW9uL0tleU1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbW1vbi9TY3JvbGxWaWV3LnRzIiwid2VicGFjazovL2RoeC8uLi90cy1jb21tb24vY29yZS50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tbW9uL2RhdGUudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbW1vbi9kb20udHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbW1vbi9ldmVudHMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbW1vbi9odG1sLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1jb21tb24va2V5Y29kZXMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbW1vbi9wb2x5ZmlsbHMvYXJyYXkudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbW1vbi9wb2x5ZmlsbHMvZWxlbWVudC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tbW9uL3BvbHlmaWxscy9tYXRoLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1jb21tb24vcG9seWZpbGxzL29iamVjdC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tbW9uL3BvbHlmaWxscy9zdHJpbmcudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWNvbW1vbi90eXBlcy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtY29tbW9uL3ZpZXcudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWRhdGEvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWRhdGEvc291cmNlcy9Db2xsZWN0aW9uU3RvcmUudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWRhdGEvc291cmNlcy9EcmFnTWFuYWdlci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZGF0YS9zb3VyY2VzL2FqYXgudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWRhdGEvc291cmNlcy9kYXRhY29sbGVjdGlvbi50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZGF0YS9zb3VyY2VzL2RhdGFjb2xsZWN0aW9uL2xvYWRlci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZGF0YS9zb3VyY2VzL2RhdGFjb2xsZWN0aW9uL3NvcnQudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWRhdGEvc291cmNlcy9kYXRhcHJveHkudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWRhdGEvc291cmNlcy9kcml2ZXJzL0NzdkRyaXZlci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZGF0YS9zb3VyY2VzL2RyaXZlcnMvSnNvbkRyaXZlci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZGF0YS9zb3VyY2VzL2RyaXZlcnMvWE1MRHJpdmVyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1kYXRhL3NvdXJjZXMvZHJpdmVycy9kcml2ZXJzLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1kYXRhL3NvdXJjZXMvaGVscGVycy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZGF0YS9zb3VyY2VzL2xhenlkYXRhcHJveHkudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWRhdGEvc291cmNlcy9zZWxlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWRhdGEvc291cmNlcy9zZXJpYWxpemVycy94bWwudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWRhdGEvc291cmNlcy90cmVlY29sbGVjdGlvbi50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZGF0YS9zb3VyY2VzL3R5cGVzLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1ncmlkL2luZGV4LnRzIiwid2VicGFjazovL2RoeC8uLi90cy1ncmlkL3NvdXJjZXMvRXhwb3J0ZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWdyaWQvc291cmNlcy9HcmlkLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1ncmlkL3NvdXJjZXMvUHJvR3JpZC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZ3JpZC9zb3VyY2VzL1NlbGVjdGlvbi50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZ3JpZC9zb3VyY2VzL2NvbHVtbnNSZXNpemVyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1ncmlkL3NvdXJjZXMvaGVscGVycy9jZWxscy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZ3JpZC9zb3VyY2VzL2hlbHBlcnMvZGF0YS50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZ3JpZC9zb3VyY2VzL2hlbHBlcnMva2V5cy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZ3JpZC9zb3VyY2VzL2hlbHBlcnMvbWFpbi50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZ3JpZC9zb3VyY2VzL3R5cGVzLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1ncmlkL3NvdXJjZXMvdWkvQ2VsbHMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWdyaWQvc291cmNlcy91aS9GaXhlZENvbHMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWdyaWQvc291cmNlcy91aS9GaXhlZFJvd3MudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWdyaWQvc291cmNlcy91aS9jb250ZW50LnRzIiwid2VicGFjazovL2RoeC8uLi90cy1ncmlkL3NvdXJjZXMvdWkvZWRpdG9ycy9DaGVja2JveEVkaXRvci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtZ3JpZC9zb3VyY2VzL3VpL2VkaXRvcnMvQ29tYm9ib3hFZGl0b3IudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWdyaWQvc291cmNlcy91aS9lZGl0b3JzL0RhdGVFZGl0b3IudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWdyaWQvc291cmNlcy91aS9lZGl0b3JzL0lucHV0RWRpdG9yLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1ncmlkL3NvdXJjZXMvdWkvZWRpdG9ycy9TZWxlY3RFZGl0b3IudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWdyaWQvc291cmNlcy91aS9lZGl0b3JzL1RleHRBcmVhRWRpdG9yLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1ncmlkL3NvdXJjZXMvdWkvZWRpdG9ycy9lZGl0b3JzLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1ncmlkL3NvdXJjZXMvdWkvcmVuZGVyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1sYXlvdXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWxheW91dC9zb3VyY2VzL0NlbGwudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWxheW91dC9zb3VyY2VzL0xheW91dC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbGF5b3V0L3NvdXJjZXMvUHJvQ2VsbC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbGF5b3V0L3NvdXJjZXMvUHJvTGF5b3V0LnRzIiwid2VicGFjazovL2RoeC8uLi90cy1sYXlvdXQvc291cmNlcy9oZWxwZXJzLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1sYXlvdXQvc291cmNlcy90eXBlcy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbGlzdC9pbmRleC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbGlzdC9zb3VyY2VzL0xpc3QudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLWxpc3Qvc291cmNlcy9Qcm9MaXN0LnRzIiwid2VicGFjazovL2RoeC8uLi90cy1saXN0L3NvdXJjZXMvU2VsZWN0aW9uLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1saXN0L3NvdXJjZXMvZWRpdG9ycy9JbnB1dEVkaXRvci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbGlzdC9zb3VyY2VzL2VkaXRvcnMvZWRpdG9ycy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbGlzdC9zb3VyY2VzL3R5cGVzLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1tZXNzYWdlL2luZGV4LnRzIiwid2VicGFjazovL2RoeC8uLi90cy1tZXNzYWdlL3NvdXJjZXMvYWxlcnQudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW1lc3NhZ2Uvc291cmNlcy9jb21tb24udHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW1lc3NhZ2Uvc291cmNlcy9jb25maXJtLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1tZXNzYWdlL3NvdXJjZXMvbG9jYWxlcy9lbi50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbWVzc2FnZS9zb3VyY2VzL21lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW1lc3NhZ2Uvc291cmNlcy90b29sdGlwLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1tZXNzYWdlL3NvdXJjZXMvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW5hdmJhci9pbmRleC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbmF2YmFyL3NvdXJjZXMvTmF2YmFyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1uYXZiYXIvc291cmNlcy9lbGVtZW50cy9idXR0b24udHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW5hdmJhci9zb3VyY2VzL2VsZW1lbnRzL2N1c3RvbUhUTUxCdXR0b24udHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW5hdmJhci9zb3VyY2VzL2VsZW1lbnRzL2RhdGVQaWNrZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW5hdmJhci9zb3VyY2VzL2VsZW1lbnRzL2hlbHBlcnMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW5hdmJhci9zb3VyY2VzL2VsZW1lbnRzL2ltYWdlQnV0dG9uLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1uYXZiYXIvc291cmNlcy9lbGVtZW50cy9pbnB1dC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbmF2YmFyL3NvdXJjZXMvZWxlbWVudHMvbWVudUl0ZW0udHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW5hdmJhci9zb3VyY2VzL2VsZW1lbnRzL25hdkl0ZW0udHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW5hdmJhci9zb3VyY2VzL2VsZW1lbnRzL3NlcGFyYXRvci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbmF2YmFyL3NvdXJjZXMvZWxlbWVudHMvc3BhY2VyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1uYXZiYXIvc291cmNlcy9lbGVtZW50cy90aXRsZS50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtbmF2YmFyL3NvdXJjZXMvaXRlbWZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLW5hdmJhci9zb3VyY2VzL3R5cGVzLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1wb3B1cC9pbmRleC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcG9wdXAvc291cmNlcy9Qb3B1cC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcG9wdXAvc291cmNlcy90eXBlcy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcmljaHRleHQvc291cmNlcy9NYW5hZ2VyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1yaWNodGV4dC9zb3VyY2VzL1JpY2h0ZXh0LnRzIiwid2VicGFjazovL2RoeC8uLi90cy1yaWNodGV4dC9zb3VyY2VzL1NlbGVjdGlvbkhlbHBlci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcmljaHRleHQvc291cmNlcy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXJpY2h0ZXh0L3NvdXJjZXMvZW50cnkudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXJpY2h0ZXh0L3NvdXJjZXMvaGVscGVycy9idWZmZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXJpY2h0ZXh0L3NvdXJjZXMvaGVscGVycy9jb21wb3NpdGlvbi50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcmljaHRleHQvc291cmNlcy9oZWxwZXJzL2xpbmsudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXJpY2h0ZXh0L3NvdXJjZXMvaGVscGVycy9tYXJrZG93bi50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcmljaHRleHQvc291cmNlcy9oZWxwZXJzL21pbmltaXplci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcmljaHRleHQvc291cmNlcy9oZWxwZXJzL290aGVyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1yaWNodGV4dC9zb3VyY2VzL2hlbHBlcnMvcGFyc2VyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1yaWNodGV4dC9zb3VyY2VzL2hlbHBlcnMvc2Nyb2xsLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1yaWNodGV4dC9zb3VyY2VzL2hlbHBlcnMvc2VsZWN0aW9uLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1yaWNodGV4dC9zb3VyY2VzL2hlbHBlcnMvc2VyaWFsaXplci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcmljaHRleHQvc291cmNlcy9oZWxwZXJzL3N0YXRpc3RpY3MudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXJpY2h0ZXh0L3NvdXJjZXMvaGVscGVycy9zdHlsZXMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXJpY2h0ZXh0L3NvdXJjZXMvaGVscGVycy90b29sYmFyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1yaWNodGV4dC9zb3VyY2VzL2tleWhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXJpY2h0ZXh0L3NvdXJjZXMvbG9jYWxlcy9lbi50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcmljaHRleHQvc291cmNlcy9tb2RlbHMvQmxvY2sudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXJpY2h0ZXh0L3NvdXJjZXMvbW9kZWxzL0VkaXRvci50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtcmljaHRleHQvc291cmNlcy9tb2RlbHMvVGV4dE5vZGUudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXJpY2h0ZXh0L3NvdXJjZXMvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXNsaWRlci9pbmRleC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtc2xpZGVyL3NvdXJjZXMvU2xpZGVyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy1zbGlkZXIvc291cmNlcy90eXBlcy50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtdGltZXBpY2tlci9pbmRleC50cyIsIndlYnBhY2s6Ly9kaHgvLi4vdHMtdGltZXBpY2tlci9zb3VyY2VzL1RpbWVwaWNrZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXRpbWVwaWNrZXIvc291cmNlcy9oZWxwZXIudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXRpbWVwaWNrZXIvc291cmNlcy9sb2NhbGVzL2VuLnRzIiwid2VicGFjazovL2RoeC8uLi90cy10aW1lcGlja2VyL3NvdXJjZXMvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXRvb2xiYXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZGh4Ly4uL3RzLXRvb2xiYXIvc291cmNlcy9Qcm9Ub29sYmFyLnRzIiwid2VicGFjazovL2RoeC8uLi90cy10b29sYmFyL3NvdXJjZXMvVG9vbGJhci50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QUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHVCQUF1Qjs7QUFFM0IsVUFBVTtBQUNWOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLGlDQUFpQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBLElBQUksZUFBZTtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsRUFBRTtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsT0FBTztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxJQUFJLElBQTREO0FBQ2hFO0FBQ0EsQ0FBQyxNQUFNLEVBSU47QUFDRCxDQUFDOzs7Ozs7Ozs7Ozs7O0FDN2tERDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDOztBQUVyQztBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixVQUFVOzs7Ozs7Ozs7Ozs7QUN2THRDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLE9BQU87QUFDUDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsT0FBTztBQUNQOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVzs7QUFFWCxPQUFPO0FBQ1A7OztBQUdBOztBQUVBO0FBQ0EsTUFBTSxJQUE0QjtBQUNsQztBQUNBLEdBQUcsTUFBTSxFQUVOO0FBQ0gsQ0FBQzs7Ozs7Ozs7Ozs7OztBQzdURDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaUJBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQ0FBMEMsc0JBQXNCLEVBQUU7QUFDbEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7Ozs7QUN6TEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLG1CQUFPLENBQUMsa0VBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlEQSx1Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQSw4RkFBbUM7QUFDbkMsd0ZBQWdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDRGhDLG9GQUE2QztBQUM3QyxpRkFBd0Q7QUFDeEQsMEZBQWtFO0FBQ2xFLG9GQUEyQztBQUMzQyxpR0FBa0U7QUFDbEUsdUZBQTZDO0FBQzdDLG9GQUEyRTtBQUMzRSxvRkFPaUI7QUFFakIsb0ZBQTJDO0FBRTNDO0lBQThCLDRCQUFJO0lBZWpDLGtCQUFZLFNBQStCLEVBQUUsTUFBNEI7UUFBNUIsb0NBQTRCO1FBQXpFLFlBQ0Msa0JBQ0MsU0FBUyxFQUNULGFBQU0sQ0FDTDtZQUNDLFNBQVMsRUFBRSxRQUFRO1lBQ25CLGFBQWEsRUFBRSxLQUFLO1lBQ3BCLFVBQVUsRUFBRSxNQUFNLElBQUssTUFBYyxDQUFDLEdBQUcsSUFBSyxNQUFjLENBQUMsR0FBRyxDQUFDLFVBQVU7WUFDM0UsS0FBSyxFQUFFLE9BQU87U0FDZCxFQUNELE1BQU0sQ0FDTixDQUNELFNBMEVEO1FBakdPLGVBQVMsR0FBVyxFQUFFLENBQUM7UUF5QjlCLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxvQkFBVyxFQUFrQixDQUFDO1FBQ2hELEtBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMseUJBQXlCO1FBQ3JHLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMseUJBQXlCO1FBRWxGLElBQUksQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUM1QixJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO2dCQUMzQixJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxLQUFLLEVBQUUsRUFBRTtvQkFDbEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsbUJBQW1CLENBQUM7aUJBQzdDO3FCQUFNO29CQUNOLEtBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLGdCQUFnQixDQUFDO2lCQUMxQzthQUNEO2lCQUFNO2dCQUNOLEtBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQzthQUNwQztTQUNEO1FBQ0QsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUN0QixLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckM7UUFDRCxJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ3JCLEtBQUksQ0FBQyxZQUFZLEdBQUcsaUJBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN0RjthQUFNLElBQUksS0FBSSxDQUFDLFlBQVksRUFBRSxFQUFFO1lBQy9CLEtBQUksQ0FBQyxZQUFZLEdBQUcsaUJBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7U0FDekQ7YUFBTTtZQUNOLEtBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztTQUMvQjtRQUNELFFBQVEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDekIsS0FBSyxPQUFPO2dCQUNYLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUM7Z0JBQ2hDLE1BQU07WUFDUCxLQUFLLE1BQU07Z0JBQ1YsS0FBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztnQkFDL0IsTUFBTTtZQUNQO2dCQUNDLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUM7U0FDcEM7UUFFRCxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFckIsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUMzQixLQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQVUsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3ZDLFVBQVUsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLFVBQVU7Z0JBQ2xDLFFBQVEsRUFBRSxJQUFJO2FBQ2QsQ0FBQyxDQUFDO1lBQ0gsSUFBTSxRQUFRLEdBQUcsS0FBSSxDQUFDLFlBQVksRUFBRSxJQUFJLElBQUksSUFBSSxFQUFFLENBQUM7WUFDbkQsS0FBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEMsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRXpDLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxnQ0FBZ0IsQ0FBQyxVQUFVLEVBQUU7Z0JBQ3ZELEtBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7WUFFSCxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsZ0NBQWdCLENBQUMsVUFBVSxFQUFFO2dCQUNqRCx5Q0FBc0QsRUFBcEQsY0FBSSxFQUFFLGtCQUFNLEVBQUUsVUFBc0MsQ0FBQztnQkFDN0QsSUFBTSxPQUFPLEdBQUcsS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUNwQyxJQUFNLE9BQU8sR0FBRyxpQkFBVSxDQUFDLG1CQUFtQixDQUM3QyxLQUFJLENBQUMsWUFBWSxFQUFFLElBQUksSUFBSSxJQUFJLEVBQUUsRUFDakMsSUFBSSxFQUNKLE1BQU0sRUFDTixFQUFFLENBQ0YsQ0FBQztnQkFDRixJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFO29CQUM1RSxLQUFJLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztvQkFDcEQsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ2xFO2dCQUNELEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDekMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7U0FDSDtRQUVELElBQU0sTUFBTSxHQUFHLGNBQU0sWUFBSSxDQUFDLEtBQUssRUFBRSxFQUFaLENBQVksQ0FBQztRQUNsQyxLQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFNLENBQUMsRUFBRSxNQUFNLFVBQUUsQ0FBQyxDQUFDLENBQUM7O0lBQzNDLENBQUM7SUFDRCwyQkFBUSxHQUFSLFVBQVMsS0FBd0M7UUFDaEQsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssWUFBWSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsRUFBRTtZQUM3RCxPQUFPLEtBQUssQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBTSxXQUFXLEdBQUcsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDOUQsSUFBTSxJQUFJLEdBQUcsaUJBQVUsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUUsSUFBTSxPQUFPLEdBQUcsaUJBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFFckQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzNFLE9BQU8sS0FBSyxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXpCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUdELDJCQUFRLEdBQVIsVUFBUyxZQUFvQjtRQUE3QixpQkFZQztRQVpRLG1EQUFvQjtRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN2QixPQUFPLEVBQUUsQ0FBQztTQUNWO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUN0QixPQUFPLFlBQVk7Z0JBQ2xCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFJLElBQUksd0JBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQXJCLENBQXFCLENBQUM7Z0JBQ25ELENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFJLElBQUksOEJBQWdCLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQTlDLENBQThDLENBQUMsQ0FBQztTQUM5RTtRQUNELE9BQU8sWUFBWTtZQUNsQixDQUFDLENBQUMsaUJBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxDQUFDLENBQUMsdUJBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDRCxpQ0FBYyxHQUFkO1FBQ0MsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDOUIsQ0FBQztJQUNELDJCQUFRLEdBQVIsVUFBUyxJQUFXLEVBQUUsSUFBZTtRQUNwQyxJQUFJLElBQUksRUFBRTtZQUNULElBQUksQ0FBQyxZQUFZLEdBQUcsaUJBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUM7UUFDRCxJQUFJLElBQUksRUFBRTtZQUNULElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7U0FDN0I7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBQ0QsNkJBQVUsR0FBVjtRQUNDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRS9ILElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBQ0Qsd0JBQUssR0FBTDtRQUNDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFTLENBQUM7UUFDNUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUMzQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBUyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFDRCx1QkFBSSxHQUFKLFVBQUssY0FBd0I7UUFBN0IsaUJBcUVDO1FBcEVBLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDZjtRQUVELElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO1FBRXRDLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVuRCxJQUFJLFNBQVMsR0FBUyxZQUFZLElBQUksaUJBQVUsQ0FBQyxRQUFRLENBQUMsWUFBb0IsQ0FBQyxDQUFDO1FBQ2hGLElBQUksU0FBUyxHQUFTLFlBQVksSUFBSSxpQkFBVSxDQUFDLFFBQVEsQ0FBQyxZQUFvQixDQUFDLENBQUM7UUFFaEYsSUFBTSxhQUFhLEdBQUcsVUFBQyxJQUFVO1lBQ2hDLElBQUksaUJBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUFFO2dCQUMvQyxPQUFPLElBQUksQ0FBQzthQUNaO1lBQ0QsSUFBSSxlQUFlLEdBQUcsNEJBQTRCLENBQUM7WUFDbkQsSUFBSSxpQkFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUU7Z0JBQzFDLGVBQWUsSUFBSSwrQkFBK0IsQ0FBQzthQUNuRDtZQUNELElBQUksaUJBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFO2dCQUMxQyxlQUFlLElBQUksOEJBQThCLENBQUM7YUFDbEQ7WUFDRCxPQUFPLGVBQWUsQ0FBQztRQUN4QixDQUFDLENBQUM7UUFDRixJQUFNLFNBQVMsR0FBRyxVQUFDLElBQVU7WUFDNUIsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFO2dCQUMzQixPQUFPLElBQUksSUFBSSxTQUFTLElBQUksSUFBSSxJQUFJLFNBQVMsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDckU7UUFDRixDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDdkUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztTQUM1RTtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRTtZQUM3RSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxVQUFDLElBQVU7Z0JBQ3RDLElBQUksU0FBUyxFQUFFO29CQUNkLE9BQU8sSUFBSSxHQUFHLFNBQVMsQ0FBQztpQkFDeEI7WUFDRixDQUFDLENBQUM7WUFDRixJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsVUFBQyxJQUFVO2dCQUN0RCxJQUFJLFNBQVMsRUFBRTtvQkFDZCxPQUFPLElBQUksR0FBRyxTQUFTLENBQUM7aUJBQ3hCO1lBQ0YsQ0FBQyxDQUFDO1NBQ0Y7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDakMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBRTNDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUNiLHNCQUFjLENBQUMsTUFBTSxFQUNyQixjQUFJO1lBQ0gsU0FBUyxHQUFHLGlCQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RDLEtBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUIsQ0FBQyxFQUNELE1BQU0sQ0FDTixDQUFDO1FBRUYsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUM3QixzQkFBYyxDQUFDLE1BQU0sRUFDckIsY0FBSTtZQUNILFNBQVMsR0FBRyxpQkFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN0QyxLQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxDQUFDLEVBQ0QsTUFBTSxDQUNOLENBQUM7UUFFRixJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDTywwQkFBTyxHQUFmO1FBQ0MsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDdkUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUU3RSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxzQkFBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsc0JBQWMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDbEUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUU3QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztTQUM1QjtJQUNGLENBQUM7SUFDTywrQkFBWSxHQUFwQixVQUFxQixLQUF3QztRQUE3RCxpQkFtQkM7UUFsQkEsSUFBTSxXQUFXLEdBQUcsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDOUQsSUFBTSxJQUFJLEdBQUcsaUJBQVUsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFMUUsSUFBSSxLQUFLLFlBQVksS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2hELElBQU0sWUFBVSxHQUFXLEVBQUUsQ0FBQztZQUM5QixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLEtBQUs7Z0JBQzVCLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtvQkFDZCxZQUFVLENBQUMsSUFBSSxDQUFDLGlCQUFVLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7aUJBQzFFO1lBQ0YsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLFlBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFlBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzdELFlBQVUsQ0FBQyxPQUFPLENBQUMsaUJBQU8sSUFBSSxZQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQyxDQUFDO2FBQzVEO2lCQUFNO2dCQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsWUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xDO1NBQ0Q7YUFBTTtZQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO0lBQ0YsQ0FBQztJQUNPLCtCQUFZLEdBQXBCO1FBQ0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFDTyx3QkFBSyxHQUFiO1FBQ0MsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDOUIsS0FBSyxVQUFVO2dCQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsVUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDMUQsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDN0IsS0FBSyxPQUFPO2dCQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDdkQsT0FBTyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUNsQyxLQUFLLE1BQU07Z0JBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ2pDLEtBQUssWUFBWTtnQkFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUM1RCxPQUFPLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUMvQjtJQUNGLENBQUM7SUFDTyxnQ0FBYSxHQUFyQjtRQUFBLGlCQThHQztRQTdHQSxJQUFNLFVBQVUsR0FBRztZQUNsQixFQUFFLEVBQUUsU0FBUztZQUNiLElBQUksRUFBRSxXQUFXO1lBQ2pCLEtBQUssRUFBRSxZQUFZO1lBQ25CLElBQUksRUFBRSxXQUFXO1lBQ2pCLEdBQUcsRUFBRSxRQUFRO1lBQ2IsUUFBUSxFQUFFLE9BQU87U0FDakIsQ0FBQztRQUVGLElBQU0sTUFBTSxHQUFHLFdBQUM7WUFDZixJQUFJLEdBQUcsQ0FBQztZQUNSLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsRUFBRTtnQkFDekUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNOLElBQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2dCQUNoRCxHQUFHLEdBQUcsV0FBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQzthQUN4RDtZQUVELE9BQU8sR0FBRyxDQUFDO1FBQ1osQ0FBQyxDQUFDO1FBRUYsSUFBTSxnQkFBZ0IsR0FBRyxVQUFDLFFBQWdCO1lBQWhCLDJDQUFnQjtZQUN6QyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDZCxRQUFRLEtBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDOUIsS0FBSyxVQUFVO29CQUNkLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzFCLE1BQU07Z0JBQ1AsS0FBSyxPQUFPO29CQUNYLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzFCLE1BQU07Z0JBQ1AsS0FBSyxNQUFNO29CQUNWLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0I7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNkLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxTQUFTLEdBQUc7WUFDaEIsU0FBUyxFQUFFO2dCQUNWLDREQUE0RCxFQUFFLFVBQUMsRUFBRSxFQUFFLEVBQUU7b0JBQ3BFLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO3dCQUNuQixLQUFLLE9BQU87NEJBQ1gsS0FBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7NEJBQ3pCLE1BQU07d0JBQ1AsS0FBSyxXQUFXOzRCQUNmLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ2xDLE1BQU07d0JBQ1AsS0FBSyxZQUFZOzRCQUNoQixLQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs0QkFDakMsTUFBTTt3QkFDUCxLQUFLLFNBQVM7NEJBQ2IsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs0QkFDdEQsTUFBTTt3QkFDUCxLQUFLLFdBQVc7NEJBQ2YsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDOzRCQUNsRCxNQUFNO3FCQUNQO2dCQUNGLENBQUM7YUFDRDtZQUNELE9BQU8sRUFBRTtnQkFDUiw0REFBNEQsRUFBRSxVQUFDLEVBQUUsRUFBRSxFQUFFO29CQUNwRSxLQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDMUIsQ0FBQztnQkFDRCw4QkFBOEIsRUFBRTtvQkFDL0IsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsWUFBWSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7b0JBQy9DLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxDQUFDO2dCQUNELGtDQUFrQyxFQUFFLGNBQU0sWUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQTVCLENBQTRCO2dCQUN0RSxpQ0FBaUMsRUFBRSxjQUFNLFlBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUEzQixDQUEyQjtnQkFDcEUsNEJBQTRCLEVBQUU7b0JBQzdCLElBQUksT0FBTyxDQUFDO29CQUNaLFFBQVEsS0FBSSxDQUFDLGdCQUFnQixFQUFFO3dCQUM5QixLQUFLLFVBQVU7NEJBQ2QsT0FBTyxHQUFHLGlCQUFVLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7NEJBQ3BELE1BQU07d0JBQ1AsS0FBSyxPQUFPOzRCQUNYLE9BQU8sR0FBRyxpQkFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDOzRCQUNuRCxNQUFNO3dCQUNQLEtBQUssTUFBTTs0QkFDVixPQUFPLEdBQUcsaUJBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztxQkFDckQ7b0JBQ0QsS0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDeEIsQ0FBQztnQkFDRCw0QkFBNEIsRUFBRTtvQkFDN0IsSUFBSSxPQUFPLENBQUM7b0JBQ1osUUFBUSxLQUFJLENBQUMsZ0JBQWdCLEVBQUU7d0JBQzlCLEtBQUssVUFBVTs0QkFDZCxPQUFPLEdBQUcsaUJBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNyRCxNQUFNO3dCQUNQLEtBQUssT0FBTzs0QkFDWCxPQUFPLEdBQUcsaUJBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNwRCxNQUFNO3dCQUNQLEtBQUssTUFBTTs0QkFDVixPQUFPLEdBQUcsaUJBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3FCQUN0RDtvQkFDRCxLQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN4QixDQUFDO2dCQUNELHVDQUF1QyxFQUFFO29CQUN4QyxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDO29CQUNyQyxLQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQzthQUNEO1lBQ0QsV0FBVyxFQUFFO2dCQUNaLG1CQUFtQixFQUFFLFVBQUMsS0FBSyxFQUFFLElBQUk7b0JBQ2hDLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNwRixLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBYyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QjtnQkFDM0csQ0FBQzthQUNEO1NBQ0QsQ0FBQztJQUNILENBQUM7SUFDTywyQkFBUSxHQUFoQixVQUFpQixJQUFVO1FBQTNCLGlCQTZGQztRQTVGQSxJQUFJLENBQUMseUJBQXlCLEdBQUcsS0FBSyxDQUFDO1FBQ3ZDLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsSUFBTSxLQUFLLEdBQUcsaUJBQVUsQ0FBQyxTQUFTLENBQUMsaUJBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDMUUsSUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWhCLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFeEIsT0FBTyxVQUFVLEVBQUUsRUFBRTtZQUNwQixJQUFNLFdBQVcsR0FBRyxpQkFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMxRCxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7WUFDckIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQzs7Z0JBR2YsSUFBTSxhQUFhLEdBQUcsaUJBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3hELElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ2xFLElBQU0sU0FBUyxHQUFHLE9BQUssTUFBTSxDQUFDLGFBQWEsSUFBSSxPQUFLLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBRXRGLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztnQkFFZixJQUFJLE9BQUssTUFBTSxDQUFDLEtBQUssSUFBSSxPQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDaEUsSUFBTSxlQUFhLEdBQUc7d0JBQ3JCLElBQUksaUJBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7NEJBQy9ELE9BQU8sSUFBSSxDQUFDO3lCQUNaO3dCQUNELE9BQU8sNEJBQTRCLENBQUM7b0JBQ3JDLENBQUMsQ0FBQztvQkFDRixJQUFNLFNBQVMsR0FBRzt3QkFDakIsSUFBSSxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7NEJBQzNDLElBQU0sU0FBUyxHQUFHLGlCQUFVLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDekQsSUFBTSxRQUFRLEdBQUcsaUJBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUN4RCxPQUFPLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxlQUFhLEVBQUUsQ0FBQzt5QkFDOUU7b0JBQ0YsQ0FBQyxDQUFDO29CQUVGLE9BQUssTUFBTSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7aUJBQ25DO2dCQUNELElBQUksYUFBYSxJQUFJLGNBQWMsRUFBRTtvQkFDcEMsR0FBRyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2lCQUN0QztnQkFDRCxJQUFJLENBQUMsY0FBYyxFQUFFO29CQUNwQixJQUFJLE9BQUssTUFBTSxDQUFDLGFBQWEsRUFBRTt3QkFDOUIsWUFBWSxFQUFFLENBQUM7d0JBQ2YsR0FBRyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO3FCQUNyQzt5QkFBTTt3QkFDTixHQUFHLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7cUJBQ3RDO2lCQUNEO2dCQUNELElBQUksT0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFO29CQUNyQixJQUFNLFNBQVMsR0FBRyxPQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQ2hELElBQUksU0FBUyxFQUFFO3dCQUNkLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7cUJBQ3BCO2lCQUNEO2dCQUNELElBQUksT0FBSyxNQUFNLENBQUMsVUFBVSxFQUFFO29CQUMzQixJQUFNLFNBQVMsR0FBRyxPQUFLLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQ3RELElBQUksU0FBUyxFQUFFO3dCQUNkLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7cUJBQ3BCO2lCQUNEO2dCQUNELElBQUksU0FBUyxFQUFFO29CQUNkLElBQUksYUFBYSxFQUFFO3dCQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLG9DQUFvQyxDQUFDLENBQUM7cUJBQy9DO3lCQUFNO3dCQUNOLEdBQUcsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQztxQkFDdkM7aUJBQ0Q7Z0JBQ0QsT0FBSyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBUSxFQUFFLEtBQUs7b0JBQ3RDLElBQUksUUFBUSxJQUFJLGlCQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFBRTt3QkFDNUQsS0FBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQzt3QkFDdEMsSUFBSSxNQUFNLEdBQUcsNEJBQTRCLENBQUM7d0JBQzFDLElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7NEJBQ3RCLE1BQU0sSUFBSSxrQ0FBK0IsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUUsQ0FBQzt5QkFDM0U7d0JBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztxQkFDakI7Z0JBQ0YsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQztvQkFDVCxJQUFJLEVBQUUsV0FBVztvQkFDakIsR0FBRyxFQUFFLFdBQVcsQ0FBQyxPQUFPLEVBQUU7b0JBQzFCLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztpQkFDbEIsQ0FBQyxDQUFDO2dCQUNILFdBQVcsR0FBRyxpQkFBVSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQzs7O1lBckU5QyxPQUFPLFNBQVMsRUFBRTs7YUFzRWpCO1lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDVCxVQUFVLEVBQUUsV0FBVztnQkFDdkIsSUFBSTtnQkFDSixrQkFBa0IsRUFBRSxZQUFZLEtBQUssQ0FBQzthQUN0QyxDQUFDLENBQUM7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUNPLGdDQUFhLEdBQXJCO1FBQUEsaUJBd0hDO1FBdkhBLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDekIsb0JBQWtFLEVBQWhFLHdCQUFTLEVBQUUsZ0NBQWEsRUFBRSxZQUFHLEVBQUUsMEJBQVUsRUFBRSxnQkFBcUIsQ0FBQztRQUV6RSxJQUFNLFFBQVEsR0FDYixTQUFTLEtBQUssUUFBUSxDQUFDLENBQUMsZ0JBQUssYUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUUsYUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLENBQUMsYUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNqRyxJQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQUcsSUFBSSxlQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLEVBQWhDLENBQWdDLENBQUMsQ0FBQztRQUU3RSxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWpDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekMsSUFBTSxjQUFjLEdBQUcsVUFBQyxJQUFVO1lBQ2pDLFdBQUksSUFBSSxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLFlBQVksQ0FBQyxPQUFPLEVBQUU7UUFBakUsQ0FBaUUsQ0FBQztRQUNuRSxJQUFNLGdCQUFnQixHQUFHLGNBQUk7WUFDNUIsSUFBTSxLQUFLLEdBQUc7Z0JBQ2IsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFDWixjQUFjLEVBQUUsT0FBTzthQUN2QixDQUFDO1lBRUYsSUFBSSxJQUFJLEVBQUU7Z0JBQ1QsSUFBSSxLQUFJLENBQUMseUJBQXlCLEVBQUU7b0JBQ25DLDhDQUE4QztvQkFDOUMsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUM5QixLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUN0QixLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsTUFBTSxDQUFDO3FCQUMvQjtpQkFDRDtxQkFBTSxJQUFJLFdBQVcsRUFBRTtvQkFDdkIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDdEI7Z0JBRUQsV0FBVyxHQUFHLEtBQUssQ0FBQzthQUNwQjtZQUVELE9BQU8sS0FBSyxDQUFDO1FBQ2QsQ0FBQyxDQUFDO1FBRUYsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLGtCQUFrQixDQUFDO1FBQ3ZCLEtBQW1CLFVBQUksRUFBSixhQUFJLEVBQUosa0JBQUksRUFBSixJQUFJLEVBQUU7WUFBcEIsSUFBTSxJQUFJO1lBQ2QsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBSTtnQkFDakMsZUFBRSxDQUNELHNCQUFzQixhQUVyQixLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksSUFDYixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FFMUIsSUFBSSxDQUFDLEdBQUcsQ0FDUjtZQVJELENBUUMsQ0FDRCxDQUFDO1lBRUYsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixJQUFJLGFBQWEsQ0FBQyxFQUFFO2dCQUMzRSxXQUFXLENBQUMsSUFBSSxDQUNmLFFBQUUsQ0FDRCxLQUFLLEVBQ0w7b0JBQ0MsS0FBSyxFQUFFLDBCQUEwQjtpQkFDakMsRUFDRCxJQUFJLENBQUMsVUFBVSxDQUNmLENBQ0QsQ0FBQzthQUNGO1lBQ0QsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDbEM7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO1lBQzVCLGtCQUFrQixHQUFHLFFBQUUsQ0FBQyw2QkFBNkIsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUNwRTtRQUNELElBQU0sV0FBVyxHQUNoQix5QkFBeUI7WUFDekIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN0QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNwRCxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckUsT0FBTyxRQUFFLENBQ1IsS0FBSyxhQUVKLEtBQUssRUFBRSxXQUFXLEVBQ2xCLEtBQUssRUFBRTtnQkFDTixLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVEsS0FBSyxjQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUs7YUFDakUsSUFDRSxJQUFJLENBQUMsU0FBUyxHQUVsQjtZQUNDLFFBQUUsQ0FBQyx3QkFBd0IsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FDZixRQUFFLENBQ0QsK0lBQStJLEVBQy9JO29CQUNDLFdBQVcsRUFBRSxRQUFRO29CQUNyQixJQUFJLEVBQUUsUUFBUTtpQkFDZCxFQUNELGFBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FDekQsQ0FDRDtnQkFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7b0JBQ3RCLFFBQUUsQ0FBQyw4QkFBOEIsRUFBRTt3QkFDbEMsUUFBRSxDQUFDLHlCQUF5QixFQUFFLGNBQWMsQ0FBQzt3QkFDN0MsUUFBRSxDQUFDLHFCQUFxQixFQUFFLE9BQU8sQ0FBQzt3QkFDbEMsa0JBQWtCO3FCQUNsQixDQUFDO2dCQUNILENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksUUFBRSxDQUFDLHlCQUF5QixFQUFFLGNBQWMsQ0FBQztnQkFDekUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxRQUFFLENBQUMscUJBQXFCLEVBQUUsT0FBTyxDQUFDO2dCQUM5RCxVQUFVO29CQUNULENBQUMsQ0FBQyxRQUFFLENBQUMsMEJBQTBCLEVBQUU7d0JBQy9CLFFBQUUsQ0FDRCx5Q0FBeUM7NEJBQ3hDLG9LQUFvSyxFQUNySyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFDbEI7NEJBQ0MsUUFBRSxDQUFDLDZDQUE2QyxDQUFDOzRCQUNqRCxRQUFFLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQzt5QkFDdkMsQ0FDRDtxQkFDQSxDQUFDO29CQUNKLENBQUMsQ0FBQyxJQUFJO2FBQ1AsQ0FBQztTQUNGLENBQ0QsQ0FBQztJQUNILENBQUM7SUFDTyxxQ0FBa0IsR0FBMUI7UUFDQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQy9CLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQyxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzdFLG9CQUEyRCxFQUF6RCxZQUFHLEVBQUUsMEJBQVUsRUFBRSw0QkFBVyxFQUFFLGdCQUFLLEVBQUUsY0FBb0IsQ0FBQztRQUNsRSxJQUFNLFdBQVcsR0FDaEIseUJBQXlCO1lBQ3pCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDdEIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDcEQsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGtDQUFrQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV6RCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBTSxhQUFhLEdBQUcsV0FBVyxLQUFLLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6RCxJQUFNLGVBQWUsR0FBRyxXQUFDLElBQUksb0JBQWEsSUFBSSxZQUFZLEtBQUssQ0FBQyxFQUFuQyxDQUFtQyxDQUFDO1FBQ2pFLElBQU0sZ0JBQWdCLEdBQUcsVUFBQyxJQUFJLEVBQUUsQ0FBQztZQUNoQyxJQUFNLEtBQUssR0FBRztnQkFDYixJQUFJLEVBQUUsUUFBUTtnQkFDZCxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNaLGNBQWMsRUFBRSxPQUFPO2FBQ3ZCLENBQUM7WUFFRixJQUFJLElBQUksRUFBRTtnQkFDVCxJQUFJLGFBQWEsRUFBRTtvQkFDbEIsOENBQThDO29CQUM5QyxJQUFJLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDdkIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztxQkFDL0I7aUJBQ0Q7cUJBQU0sSUFBSSxXQUFXLEVBQUU7b0JBQ3ZCLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3RCO2dCQUVELFdBQVcsR0FBRyxLQUFLLENBQUM7YUFDcEI7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNkLENBQUMsQ0FBQztRQUVGLE9BQU8sUUFBRSxDQUNSLEtBQUssYUFFSixLQUFLLEVBQUUsV0FBVyxFQUNsQixLQUFLLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsVUFBUSxLQUFLLGFBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSzthQUNwRCxJQUNFLElBQUksQ0FBQyxTQUFTLEdBRWxCO1lBQ0MsUUFBRSxDQUFDLHdCQUF3QixFQUFFO2dCQUM1QixJQUFJLENBQUMsV0FBVyxDQUNmLFFBQUUsQ0FDRCw4SUFBOEksRUFDOUk7b0JBQ0MsV0FBVyxFQUFFLFFBQVE7b0JBQ3JCLElBQUksRUFBRSxRQUFRO2lCQUNkLEVBQ0QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUNsQixDQUNEO2dCQUNELFFBQUUsQ0FDRCx1QkFBdUIsRUFDdkIsYUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJLEVBQUUsQ0FBQztvQkFDOUIsZUFBRSxDQUNELEtBQUssc0JBRUosS0FBSyxFQUNKLG9CQUFvQjs0QkFDcEIsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLCtCQUErQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDekQsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUM1QixLQUFLLEVBQUUsQ0FBQyxLQUVULElBQUksQ0FDSjtnQkFWRCxDQVVDLENBQ0QsQ0FDRDtnQkFDRCxJQUFJLEtBQUssT0FBTztvQkFDZixDQUFDLENBQUMsUUFBRSxDQUFDLHdCQUF3QixFQUFFO3dCQUM3QixRQUFFLENBQ0QsZ0tBQWdLLEVBQ2hLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUNsQixhQUFNLENBQUMsTUFBTSxDQUNiO3FCQUNBLENBQUM7b0JBQ0osQ0FBQyxDQUFDLElBQUk7YUFDUCxDQUFDO1NBQ0YsQ0FDRCxDQUFDO0lBQ0gsQ0FBQztJQUNPLG9DQUFpQixHQUF6QjtRQUFBLGlCQXFGQztRQXBGQSxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQy9CLElBQU0sYUFBYSxHQUFHLGlCQUFVLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hELG9CQUEyRCxFQUF6RCxZQUFHLEVBQUUsMEJBQVUsRUFBRSw0QkFBVyxFQUFFLGdCQUFLLEVBQUUsY0FBb0IsQ0FBQztRQUNsRSxJQUFNLFdBQVcsR0FDaEIseUJBQXlCO1lBQ3pCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDdEIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDcEQsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGtDQUFrQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV6RCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBTSxxQkFBcUIsR0FDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDbEYsSUFBTSxjQUFjLEdBQUcsY0FBSSxJQUFJLFlBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxJQUFJLEtBQUssS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFqRSxDQUFpRSxDQUFDO1FBQ2pHLElBQU0sZ0JBQWdCLEdBQUcsY0FBSTtZQUM1QixJQUFNLEtBQUssR0FBRztnQkFDYixJQUFJLEVBQUUsUUFBUTtnQkFDZCxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNaLGNBQWMsRUFBRSxPQUFPO2FBQ3ZCLENBQUM7WUFFRixJQUFJLElBQUksRUFBRTtnQkFDVCxJQUFJLHFCQUFxQixFQUFFO29CQUMxQiw4Q0FBOEM7b0JBQzlDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUN6QixLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUN0QixLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsTUFBTSxDQUFDO3FCQUMvQjtpQkFDRDtxQkFBTSxJQUFJLFdBQVcsRUFBRTtvQkFDdkIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDdEI7Z0JBRUQsV0FBVyxHQUFHLEtBQUssQ0FBQzthQUNwQjtZQUVELE9BQU8sS0FBSyxDQUFDO1FBQ2QsQ0FBQyxDQUFDO1FBRUYsT0FBTyxRQUFFLENBQ1IsS0FBSyxhQUVKLEtBQUssRUFBRSxXQUFXLEVBQ2xCLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVEsS0FBSyxhQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUM1RCxJQUFJLENBQUMsU0FBUyxHQUVsQjtZQUNDLFFBQUUsQ0FBQyx3QkFBd0IsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FDZixRQUFFLENBQ0QsK0dBQStHLEVBQy9HO29CQUNDLFdBQVcsRUFBRSxRQUFRO29CQUNyQixJQUFJLEVBQUUsUUFBUTtpQkFDZCxFQUNELGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQ2hFLENBQ0Q7Z0JBQ0QsUUFBRSxDQUNELHNCQUFzQixFQUN0QixhQUFhLENBQUMsR0FBRyxDQUFDLGNBQUk7b0JBQ3JCLGVBQUUsQ0FDRCxLQUFLLGFBRUosS0FBSyxFQUNKLG1CQUFtQjs0QkFDbkIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDN0QsS0FBSyxFQUFFLElBQUksSUFDUixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FFMUIsSUFBSSxDQUNKO2dCQVZELENBVUMsQ0FDRCxDQUNEO2dCQUNELElBQUksS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLE9BQU87b0JBQ2xDLENBQUMsQ0FBQyxRQUFFLENBQUMsd0JBQXdCLEVBQUU7d0JBQzdCLFFBQUUsQ0FDRCxnS0FBZ0ssRUFDaEssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQ2xCLGFBQU0sQ0FBQyxNQUFNLENBQ2I7cUJBQ0EsQ0FBQztvQkFDSixDQUFDLENBQUMsSUFBSTthQUNQLENBQUM7U0FDRixDQUNELENBQUM7SUFDSCxDQUFDO0lBQ08sOEJBQVcsR0FBbkIsVUFBb0IsYUFBYTtRQUNoQyxPQUFPLFFBQUUsQ0FBQywyQkFBMkIsRUFBRTtZQUN0QyxRQUFFLENBQ0Qsa0VBQWtFO2dCQUNqRSwwQkFBaUI7Z0JBQ2pCLHNDQUFzQyxFQUN2QztnQkFDQyxZQUFZLEVBQUUsTUFBTTtnQkFDcEIsSUFBSSxFQUFFLFFBQVE7YUFDZCxFQUNELENBQUMsUUFBRSxDQUFDLHdDQUF3QyxDQUFDLENBQUMsQ0FDOUM7WUFDRCxhQUFhO1lBQ2IsUUFBRSxDQUNELGtFQUFrRTtnQkFDakUsMEJBQWlCO2dCQUNqQixzQ0FBc0MsRUFDdkM7Z0JBQ0MsWUFBWSxFQUFFLE1BQU07Z0JBQ3BCLElBQUksRUFBRSxRQUFRO2FBQ2QsRUFDRCxDQUFDLFFBQUUsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQy9DO1NBQ0QsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNPLGtDQUFlLEdBQXZCO1FBQ08sb0JBQXlDLEVBQXZDLFlBQUcsRUFBRSw0QkFBVyxFQUFFLGdCQUFxQixDQUFDO1FBQ2hELE9BQU8sUUFBRSxDQUNSLDBCQUEwQixFQUMxQjtZQUNDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDM0IsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsVUFBUSxLQUFLLGFBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFO1NBQy9ELEVBQ0QsQ0FBQyxZQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQ3hDLENBQUM7SUFDSCxDQUFDO0lBQ08sOEJBQVcsR0FBbkIsVUFBb0IsRUFBRSxFQUFFLEVBQUU7UUFDekIsSUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBTSxPQUFPLEdBQUcsaUJBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDckQsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDOUIsS0FBSyxVQUFVLENBQUMsQ0FBQztnQkFDaEIsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVO29CQUN4QyxDQUFDLENBQUMsaUJBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7b0JBQ2pGLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFO29CQUNoRixPQUFPO2lCQUNQO2dCQUNELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxFQUFFO29CQUN2RixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDaEM7cUJBQU07b0JBQ04sSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO2lCQUMvQjtnQkFDRCxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMvRCxNQUFNO2FBQ047WUFDRCxLQUFLLE9BQU87Z0JBQ1gsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7b0JBQ2pDLGlCQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBYyxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ3ZEO3FCQUFNO29CQUNOLElBQU0sT0FBTyxHQUFHLGlCQUFVLENBQUMsZ0JBQWdCLENBQzFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUNwRSxJQUFJLENBQ0osQ0FBQztvQkFDRixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUU7d0JBQzdFLE9BQU87cUJBQ1A7b0JBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7b0JBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO29CQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDOUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN2RCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ2I7Z0JBQ0QsTUFBTTtZQUNQLEtBQUssTUFBTTtnQkFDVixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtvQkFDaEMsaUJBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7b0JBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztpQkFDdEQ7cUJBQU07b0JBQ04sSUFBTSxPQUFPLEdBQUcsaUJBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBYyxDQUFDLFlBQVksRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRTt3QkFDN0UsT0FBTztxQkFDUDtvQkFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztvQkFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7b0JBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUM5RSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBYyxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3RELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDYjtTQUNGO0lBQ0YsQ0FBQztJQUVPLG1DQUFnQixHQUF4QixVQUF5QixDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQWE7UUFDOUMsSUFBSSxJQUFJLEVBQUU7WUFDVCxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQ3BELElBQUksUUFBUSxFQUFFO2dCQUNiLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQzlCLElBQUksU0FBUyxFQUFFO29CQUNkLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUN2QixTQUFTLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztvQkFDdkIsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2lCQUN6QzthQUNEO1NBQ0Q7SUFDRixDQUFDO0lBQ0YsZUFBQztBQUFELENBQUMsQ0F6NEI2QixXQUFJLEdBeTRCakM7QUF6NEJZLDRCQUFROzs7Ozs7Ozs7Ozs7Ozs7QUNsQlIseUJBQWlCLEdBQzdCLHdHQUF3RyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7QUMwQzFHLElBQVksY0FXWDtBQVhELFdBQVksY0FBYztJQUN6QixtQ0FBaUI7SUFDakIsK0NBQTZCO0lBQzdCLDJDQUF5QjtJQUN6QixpREFBK0I7SUFDL0IsK0NBQTZCO0lBQzdCLDZDQUEyQjtJQUMzQixpREFBK0I7SUFFL0IsZ0VBQWdFO0lBQ2hFLHlDQUF1QjtBQUN4QixDQUFDLEVBWFcsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUFXekI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3RERCx1R0FBc0M7QUFDdEMsMkZBQWdDO0FBQ2hDLDZGQUFpQztBQUNqQywyR0FBd0M7QUFDeEMsc0dBQXlEO0FBQWhELDZCQUFPLENBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDSjFCLGlGQUFnRDtBQUNoRCwwRkFBa0U7QUFDbEUsb0ZBQW9FO0FBQ3BFLG9GQUEyQztBQUMzQyxvRkFBNkM7QUFDN0MsdUdBQWtEO0FBQ2xELDBGQUErQztBQUMvQyw4RkFBa0M7QUFDbEMsdUZBT2lCO0FBQ2pCLDJCQUEyQjtBQUMzQiwrR0FBMEQ7QUFDMUQsMkJBQTJCO0FBQzNCLHlGQUErRDtBQUMvRCwwRkFBcUM7QUFDckMsNEhBQWtGO0FBRWxGLHNHQUFvRTtBQUNwRSw0R0FBMkQ7QUFDM0Qsb0ZBQStDO0FBRS9DO0lBQWlDLCtCQUFJO0lBU3BDLHFCQUFZLFNBQStCLEVBQUUsTUFBMkI7UUFBeEUsWUFDQyxrQkFBTSxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBa0N4QjtRQTZMTyxxQkFBZSxHQUFHLFdBQUM7WUFDMUIsSUFBTSxXQUFXLEdBQUcsS0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFFdEYsSUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDekUsSUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFFekUsSUFBTSxHQUFHLEdBQUcsT0FBTyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUM7WUFDdEMsSUFBTSxJQUFJLEdBQUcsT0FBTyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDbEMsb0VBQXVELEVBQXJELFFBQUMsRUFBRSxRQUFrRCxDQUFDO1lBQzlELEtBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsS0FBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM1QixLQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUM7UUFDTSxtQkFBYSxHQUFHLFdBQUM7WUFDeEIsSUFBTSxTQUFTLEdBQUcsS0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFDL0UsSUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDekUsSUFBTSxJQUFJLEdBQUcsT0FBTyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFFaEMsMkRBQXNELEVBQXBELFFBQUMsRUFBRSx3QkFBaUQsQ0FBQztZQUM3RCxLQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVCLEtBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUN4QyxLQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUM7UUFDTSxtQkFBYSxHQUFHLFVBQUMsRUFBRSxFQUFFLElBQUk7WUFDaEMsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMvQyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUM3RCxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QjtRQUM3RixDQUFDLENBQUM7UUF6UEQsS0FBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsS0FBSSxDQUFDLE1BQU0sR0FBRyxhQUFNLENBQ2xCO1lBQ0EsR0FBRyxFQUFFLEVBQUU7WUFDUCxVQUFVLEVBQUUsSUFBSTtZQUNoQixVQUFVLEVBQUUsS0FBSztZQUNqQixXQUFXLEVBQUUsS0FBSztZQUNsQixZQUFZLEVBQUUsRUFBRTtZQUNoQixPQUFPO1lBQ1AsS0FBSyxFQUFFLE9BQU87WUFDZCxJQUFJLEVBQUUsU0FBUztTQUNlLEVBQy9CLEtBQUksQ0FBQyxNQUFNLENBQ1gsQ0FBQztRQUNGLElBQUksQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUN6QixLQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxnQkFBTyxDQUFDO1NBQzlCO1FBQ0QsSUFBSSxLQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTtZQUM3QixLQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsZUFBSyxJQUFJLFlBQUssQ0FBQyxXQUFXLEVBQUUsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDO1NBQ3RGO1FBQ0QsS0FBSSxDQUFDLFlBQVksR0FBRztZQUNuQixHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN6QixTQUFTLEVBQUUsRUFBRTtTQUNiLENBQUM7UUFFRixLQUFJLENBQUMsTUFBTSxHQUFHLElBQUksb0JBQVcsQ0FBQyxLQUFJLENBQUMsQ0FBQztRQUNwQyxLQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFcEIsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLHVCQUFVLENBQUMsVUFBQyxDQUFRLEVBQUUsT0FBZSxJQUFLLGNBQU8sS0FBSyxLQUFJLENBQUMsSUFBSSxFQUFyQixDQUFxQixDQUFDLENBQUM7UUFDeEYsS0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRW5CLElBQU0sSUFBSSxHQUFHLFlBQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxjQUFNLFlBQUksQ0FBQyxXQUFXLEVBQUUsRUFBbEIsQ0FBa0IsRUFBRSxDQUFDLENBQUM7UUFDMUQsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDOztJQUNuQyxDQUFDO0lBQ0QsZ0NBQVUsR0FBVjtRQUNDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVuQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDNUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFDRCwyQkFBSyxHQUFMO1FBQ0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMseUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNELDhCQUFRLEdBQVIsVUFBUyxLQUFhO1FBQ3JCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSwyQkFBWSxDQUFDLFVBQVUsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDdkUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMseUJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMseUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyx5QkFBeUI7U0FDNUY7SUFDRixDQUFDO0lBQ0QsOEJBQVEsR0FBUixVQUFTLEtBQWE7UUFDckIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNiO0lBQ0YsQ0FBQztJQUNELDhCQUFRLEdBQVI7UUFDQyxPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFDRCxxQ0FBZSxHQUFmO1FBQ0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztJQUNqQyxDQUFDO0lBQ0QscUNBQWUsR0FBZixVQUFnQixZQUFzQjtRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLGVBQUssSUFBSSxZQUFLLENBQUMsV0FBVyxFQUFFLEVBQW5CLENBQW1CLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBQ0Qsb0NBQWMsR0FBZCxVQUFlLElBQWU7UUFDN0IsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUFpQixDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMseUJBQWlCLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QjtZQUNqRixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDYjtJQUNGLENBQUM7SUFDRCxvQ0FBYyxHQUFkO1FBQ0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDO0lBQ0QsZ0VBQWdFO0lBQ2hFLDZCQUFPLEdBQVA7UUFDQyxPQUFPLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBQ0QsZ0VBQWdFO0lBQ2hFLDZCQUFPLEdBQVAsVUFBUSxJQUFlO1FBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELGdFQUFnRTtJQUNoRSxnQ0FBVSxHQUFWLFVBQVcsS0FBYTtRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFDTyxrQ0FBWSxHQUFwQjtRQUFBLGlCQWdGQztRQS9FQSxJQUFJLENBQUMsU0FBUyxHQUFHO1lBQ2hCLEtBQUssRUFBRTtnQkFDTixvQkFBb0IsRUFBRSxJQUFJLENBQUMsYUFBYTthQUN4QztZQUNELFNBQVMsRUFBRSxVQUFDLENBQWE7Z0JBQ3hCLEtBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsQ0FBQztZQUNELFVBQVUsRUFBRSxVQUFDLENBQWE7Z0JBQ3pCLEtBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsQ0FBQztZQUNELFlBQVksRUFBRSxVQUFDLE1BQTBCO2dCQUN4QyxLQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUUvQixJQUFJLE1BQU0sS0FBSyxRQUFRLEVBQUU7b0JBQ3hCLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUFpQixDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDcEQsT0FBTztpQkFDUDtnQkFDRCxJQUFJLE1BQU0sS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDM0YsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUM1QyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQzlDLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUFpQixDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLHlCQUF5QjtpQkFDOUU7WUFDRixDQUFDO1lBQ0QsZ0JBQWdCLEVBQUU7Z0JBQ2pCLEtBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEIsQ0FBQztZQUNELE9BQU8sRUFBRSxVQUFDLENBQU07Z0JBQ2YsSUFBSSxLQUFJLENBQUMsYUFBYSxFQUFFO29CQUN2QixZQUFZLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUNqQztnQkFDRCxLQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQztvQkFDL0IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7b0JBQ3pCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTt3QkFDNUIsR0FBRyxHQUFHLE1BQUksR0FBSyxDQUFDO3FCQUNoQjtvQkFDRCxLQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7b0JBQ2xDLElBQUksYUFBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO3dCQUNmLEtBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLGdCQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ3RDLEtBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztxQkFDYjtnQkFDRixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDVCxDQUFDO1lBQ0QsV0FBVyxFQUFFO2dCQUNaLG9CQUFvQixFQUFFLFVBQUMsQ0FBQyxFQUFFLElBQUk7b0JBQzdCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDbkIsSUFBTSxLQUFLLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2hFLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO3dCQUNqQixLQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQy9CO29CQUNELEtBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDYixPQUFPO2dCQUNSLENBQUM7YUFDRDtZQUNELFNBQVMsRUFBRTtnQkFDVixvQkFBb0IsRUFBRSxVQUFDLENBQU07b0JBQzVCLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRTt3QkFDYixpQkFBTyxDQUFDLFlBQU0sQ0FBQyxrQkFBa0IsRUFBRTs0QkFDbEMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNOzRCQUNkLFFBQVEsRUFBRSxxQkFBZSxDQUFDLE1BQU07eUJBQ2hDLENBQUMsQ0FBQztxQkFDSDtnQkFDRixDQUFDO2dCQUNELHdDQUF3QyxFQUFFLFVBQUMsQ0FBTTtvQkFDaEQsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFO3dCQUNiLGlCQUFPLENBQUMsWUFBTSxDQUFDLFdBQVcsRUFBRTs0QkFDM0IsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNOzRCQUNkLFFBQVEsRUFBRSxxQkFBZSxDQUFDLE1BQU07eUJBQ2hDLENBQUMsQ0FBQztxQkFDSDtnQkFDRixDQUFDO2FBQ0Q7U0FDRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMseUJBQWlCLENBQUMsTUFBTSxFQUFFO1lBQ3hDLEtBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0gseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLHlCQUFpQixDQUFDLFdBQVcsRUFBRTtZQUM3QyxLQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDTyxpQ0FBVyxHQUFuQixVQUFvQixDQUFNO1FBQ3pCLElBQU0sSUFBSSxHQUFHLGFBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFFakMsSUFBSSxJQUFJLEtBQUssZ0JBQWdCLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN4QjthQUFNO1lBQ04sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QjtRQUNELElBQU0sT0FBTyxHQUFHLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUV0RixJQUFNLElBQUksR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUN6RCxJQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUVwRCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUU7WUFDN0IsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDTyxpQ0FBVyxHQUFuQixVQUFvQixLQUFhO1FBQ2hDLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1QyxPQUFPLEtBQUssQ0FBQztTQUNiO1FBQ0QsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxhQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDaEIsT0FBTyxLQUFLLENBQUM7U0FDYjtRQUNELElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEtBQUssRUFBRSxHQUFHO1lBQ3pELElBQUksS0FBSyxFQUFFO2dCQUNWLE9BQU8sS0FBSyxDQUFDO2FBQ2I7WUFDRCxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQUs7Z0JBQ2hCLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEdBQUcsRUFBRTtvQkFDaEMsS0FBSyxHQUFHLElBQUksQ0FBQztvQkFDYixPQUFPO2lCQUNQO1lBQ0YsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLEtBQUssQ0FBQztRQUNkLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNWLElBQU0sY0FBYyxHQUFHLG1CQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDcEMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFO2dCQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO2FBQy9CO1NBQ0Q7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsZ0JBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUE2Qk8sd0NBQWtCLEdBQTFCLFVBQTJCLEtBQWE7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ08sK0JBQVMsR0FBakIsVUFBa0IsTUFBYSxFQUFFLFNBQWM7UUFBL0MsaUJBZ0JDO1FBaEJnQywwQ0FBYztRQUM5QyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQyxLQUFLLEVBQUUsS0FBSztZQUNqQyxJQUFNLFFBQVEsR0FDYixDQUFDLEtBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxDQUFDLFdBQVcsRUFBRTtnQkFDM0QsQ0FBQyxDQUFDLDZCQUE2QjtnQkFDL0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNQLEtBQUssQ0FBQyxJQUFJLENBQ1QsUUFBRSxDQUFDLG9CQUFvQixFQUFFO2dCQUN4QixLQUFLLEVBQUssUUFBUSxTQUFJLFNBQVc7Z0JBQ2pDLEtBQUssRUFBRSxFQUFFLEtBQUssU0FBRTtnQkFDaEIsS0FBSyxFQUFFLGdCQUFjLEtBQU87Z0JBQzVCLFFBQVEsRUFBRSxDQUFDO2FBQ1gsQ0FBQyxDQUNGLENBQUM7WUFDRixPQUFPLEtBQUssQ0FBQztRQUNkLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNSLENBQUM7SUFDTyxvQ0FBYyxHQUF0QjtRQUNDLE9BQU8sUUFBRSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQVUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUNPLGlDQUFXLEdBQW5CO1FBQUEsaUJBS0M7UUFKQSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEtBQUssRUFBRSxHQUFHO1lBQzVDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBRSxDQUFDLG1CQUFtQixFQUFFLEtBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pELE9BQU8sS0FBSyxDQUFDO1FBQ2QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUNPLGlDQUFXLEdBQW5CO1FBQ0MsSUFBSSxJQUFXLENBQUM7UUFDaEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUMzQixJQUFJLEdBQUcsQ0FBQyxrQkFBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzVEO2FBQU07WUFDTixJQUFJO2dCQUNILElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVM7b0JBQzdCLENBQUM7d0JBQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTt1QkFDNUMsSUFBSSxDQUFDLFdBQVcsRUFBRTt3QkFDckIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7NEJBQ3ZCLFFBQUUsQ0FDRCxnQ0FBZ0MsRUFDaEM7Z0NBQ0MsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUzs2QkFDckMsRUFDRDtnQ0FDQyxRQUFFLENBQUMsd0NBQXdDLEVBQUUsQ0FBQyxZQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7Z0NBQ25FLFFBQUUsQ0FBQyx1Q0FBdUMsaUJBQ3RDLElBQUksQ0FBQyxTQUFTLENBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUN4Qix3QkFBd0IsQ0FDeEI7b0NBQ0QsUUFBRSxDQUFDLHdDQUF3QyxFQUFFO3dDQUM1QyxLQUFLLEVBQUUsY0FBYzt3Q0FDckIsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCO3dDQUN4QyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTO3dDQUNyQyxRQUFRLEVBQUUsQ0FBQztxQ0FDWCxDQUFDO21DQUNEOzZCQUNGLENBQ0Q7dUJBRUosQ0FBQyxDQUFDLENBQUMsa0JBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUN6RDtRQUVELE9BQU8sUUFBRSxDQUNSLDZCQUE2QixFQUM3QjtZQUNDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUc7WUFDdEIsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ25DLGFBQWEsRUFBRSxJQUFJLENBQUMsSUFBSTtTQUN4QixFQUNEO1lBQ0MsUUFBRSxDQUNELGNBQWMsRUFDZDtnQkFDQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLO2dCQUM3QixhQUFhLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXO2FBQ3pDLEVBQ0QsSUFBSSxDQUNKO1NBQ0QsQ0FDRCxDQUFDO0lBQ0gsQ0FBQztJQUNPLGlDQUFXLEdBQW5CO1FBQUEsaUJBaUJDO1FBaEJBLElBQU0sUUFBUSxHQUFHO1lBQ2hCLEtBQUssRUFBRSxXQUFDO2dCQUNQLElBQUksNEJBQXFCLENBQUMsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLEVBQUU7b0JBQ2xELEtBQUksQ0FBQyxTQUFTLEdBQUcsZUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUNyRCxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDN0QsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMseUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyx5QkFBeUI7aUJBQzVGO2dCQUNELElBQUksNEJBQXFCLENBQUMsQ0FBQyxFQUFFLHVDQUF1QyxDQUFDLEVBQUU7b0JBQ3RFLEtBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQzlCO1lBQ0YsQ0FBQztTQUNELENBQUM7UUFFRixLQUFLLElBQU0sR0FBRyxJQUFJLFFBQVEsRUFBRTtZQUMzQixJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDL0M7SUFDRixDQUFDO0lBQ0Ysa0JBQUM7QUFBRCxDQUFDLENBM1dnQyxXQUFJLEdBMldwQztBQTNXWSxrQ0FBVzs7Ozs7Ozs7Ozs7Ozs7O0FDM0JYLGtCQUFVLEdBQUc7SUFDekIsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztDQUNULENBQUM7QUFFVyxlQUFPLEdBQUc7SUFDdEIsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFDN0UsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFFN0UsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFFN0UsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFDN0UsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFDN0UsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFDN0UsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFDN0UsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFDN0UsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFDN0UsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7Q0FDN0UsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FDMUJGLFNBQWdCLG9CQUFvQixDQUFDLFVBQXNCLEVBQUUsR0FBVyxFQUFFLElBQVk7SUFDckYsSUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxJQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO0lBRS9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxD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VSxLQUFLLElBQUk7WUFDcEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFDRCxJQUFJLEVBQUUsVUFBQyxJQUFVLEVBQUUsS0FBYTtRQUMvQixJQUFNLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFDRCxJQUFJLEVBQUUsVUFBQyxJQUFVLEVBQUUsS0FBYTtRQUMvQixJQUFNLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFDRCxJQUFJLEVBQUUsVUFBQyxJQUFVLEVBQUUsS0FBYTtRQUMvQixJQUFNLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFDRCxJQUFJLEVBQUUsVUFBQyxJQUFVLEVBQUUs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aXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJkaHhcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiZGh4XCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9jb2RlYmFzZS9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLyoqXG4qIENvcHlyaWdodCAoYykgMjAxNywgTGVvbiBTb3Jva2luXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuIChNSVQgTGljZW5zZWQpXG4qXG4qIGRvbXZtLmpzIChET00gVmlld01vZGVsKVxuKiBBIHRoaW4sIGZhc3QsIGRlcGVuZGVuY3ktZnJlZSB2ZG9tIHZpZXcgbGF5ZXJcbiogQHByZXNlcnZlIGh0dHBzOi8vZ2l0aHViLmNvbS9sZWVvbml5YS9kb212bSAodjMuMi42LCBkZXYgYnVpbGQpXG4qL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuZG9tdm0gPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbi8vIE5PVEU6IGlmIGFkZGluZyBhIG5ldyAqVk5vZGUqIHR5cGUsIG1ha2UgaXQgPCBDT01NRU5UIGFuZCByZW51bWJlciByZXN0LlxuLy8gVGhlcmUgYXJlIHNvbWUgcGxhY2VzIHRoYXQgdGVzdCA8PSBDT01NRU5UIHRvIGFzc2VydCBpZiBub2RlIGlzIGEgVk5vZGVcblxuLy8gVk5vZGUgdHlwZXNcbnZhciBFTEVNRU5UXHQ9IDE7XG52YXIgVEVYVFx0XHQ9IDI7XG52YXIgQ09NTUVOVFx0PSAzO1xuXG4vLyBwbGFjZWhvbGRlciB0eXBlc1xudmFyIFZWSUVXXHRcdD0gNDtcbnZhciBWTU9ERUxcdFx0PSA1O1xuXG52YXIgRU5WX0RPTSA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG52YXIgd2luID0gRU5WX0RPTSA/IHdpbmRvdyA6IHt9O1xudmFyIHJBRiA9IHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbnZhciBlbXB0eU9iaiA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIGlzQXJyID0gQXJyYXkuaXNBcnJheTtcblxuZnVuY3Rpb24gaXNTZXQodmFsKSB7XG5cdHJldHVybiB2YWwgIT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNQbGFpbk9iaih2YWwpIHtcblx0cmV0dXJuIHZhbCAhPSBudWxsICYmIHZhbC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1x0XHQvLyAgJiYgdHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIlxufVxuXG5mdW5jdGlvbiBpbnNlcnRBcnIodGFyZywgYXJyLCBwb3MsIHJlbSkge1xuXHR0YXJnLnNwbGljZS5hcHBseSh0YXJnLCBbcG9zLCByZW1dLmNvbmNhdChhcnIpKTtcbn1cblxuZnVuY3Rpb24gaXNWYWwodmFsKSB7XG5cdHZhciB0ID0gdHlwZW9mIHZhbDtcblx0cmV0dXJuIHQgPT09IFwic3RyaW5nXCIgfHwgdCA9PT0gXCJudW1iZXJcIjtcbn1cblxuZnVuY3Rpb24gaXNGdW5jKHZhbCkge1xuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5mdW5jdGlvbiBpc1Byb20odmFsKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmIGlzRnVuYyh2YWwudGhlbik7XG59XG5cblxuXG5mdW5jdGlvbiBhc3NpZ25PYmoodGFyZykge1xuXHR2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuXHRmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspXG5cdFx0eyBmb3IgKHZhciBrIGluIGFyZ3NbaV0pXG5cdFx0XHR7IHRhcmdba10gPSBhcmdzW2ldW2tdOyB9IH1cblxuXHRyZXR1cm4gdGFyZztcbn1cblxuLy8gZXhwb3J0IGNvbnN0IGRlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGRlZXBTZXQodGFyZywgcGF0aCwgdmFsKSB7XG5cdHZhciBzZWc7XG5cblx0d2hpbGUgKHNlZyA9IHBhdGguc2hpZnQoKSkge1xuXHRcdGlmIChwYXRoLmxlbmd0aCA9PT0gMClcblx0XHRcdHsgdGFyZ1tzZWddID0gdmFsOyB9XG5cdFx0ZWxzZVxuXHRcdFx0eyB0YXJnW3NlZ10gPSB0YXJnID0gdGFyZ1tzZWddIHx8IHt9OyB9XG5cdH1cbn1cblxuLypcbmV4cG9ydCBmdW5jdGlvbiBkZWVwVW5zZXQodGFyZywgcGF0aCkge1xuXHR2YXIgc2VnO1xuXG5cdHdoaWxlIChzZWcgPSBwYXRoLnNoaWZ0KCkpIHtcblx0XHRpZiAocGF0aC5sZW5ndGggPT09IDApXG5cdFx0XHR0YXJnW3NlZ10gPSB2YWw7XG5cdFx0ZWxzZVxuXHRcdFx0dGFyZ1tzZWddID0gdGFyZyA9IHRhcmdbc2VnXSB8fCB7fTtcblx0fVxufVxuKi9cblxuZnVuY3Rpb24gc2xpY2VBcmdzKGFyZ3MsIG9mZnMpIHtcblx0dmFyIGFyciA9IFtdO1xuXHRmb3IgKHZhciBpID0gb2ZmczsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspXG5cdFx0eyBhcnIucHVzaChhcmdzW2ldKTsgfVxuXHRyZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBjbXBPYmooYSwgYikge1xuXHRmb3IgKHZhciBpIGluIGEpXG5cdFx0eyBpZiAoYVtpXSAhPT0gYltpXSlcblx0XHRcdHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY21wQXJyKGEsIGIpIHtcblx0dmFyIGFsZW4gPSBhLmxlbmd0aDtcblxuXHRpZiAoYi5sZW5ndGggIT09IGFsZW4pXG5cdFx0eyByZXR1cm4gZmFsc2U7IH1cblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFsZW47IGkrKylcblx0XHR7IGlmIChhW2ldICE9PSBiW2ldKVxuXHRcdFx0eyByZXR1cm4gZmFsc2U7IH0gfVxuXG5cdHJldHVybiB0cnVlO1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGFyc2Fpbi9yYWZ0XG4vLyByQUYgdGhyb3R0bGVyLCBhZ2dyZWdhdGVzIG11bHRpcGxlIHJlcGVhdGVkIHJlZHJhdyBjYWxscyB3aXRoaW4gc2luZ2xlIGFuaW1mcmFtZVxuZnVuY3Rpb24gcmFmdChmbikge1xuXHRpZiAoIXJBRilcblx0XHR7IHJldHVybiBmbjsgfVxuXG5cdHZhciBpZCwgY3R4LCBhcmdzO1xuXG5cdGZ1bmN0aW9uIGNhbGwoKSB7XG5cdFx0aWQgPSAwO1xuXHRcdGZuLmFwcGx5KGN0eCwgYXJncyk7XG5cdH1cblxuXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0Y3R4ID0gdGhpcztcblx0XHRhcmdzID0gYXJndW1lbnRzO1xuXHRcdGlmICghaWQpIHsgaWQgPSByQUYoY2FsbCk7IH1cblx0fTtcbn1cblxuZnVuY3Rpb24gY3VycnkoZm4sIGFyZ3MsIGN0eCkge1xuXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KGN0eCwgYXJncyk7XG5cdH07XG59XG5cbi8qXG5leHBvcnQgZnVuY3Rpb24gcHJvcCh2YWwsIGNiLCBjdHgsIGFyZ3MpIHtcblx0cmV0dXJuIGZ1bmN0aW9uKG5ld1ZhbCwgZXhlY0NiKSB7XG5cdFx0aWYgKG5ld1ZhbCAhPT0gdW5kZWZpbmVkICYmIG5ld1ZhbCAhPT0gdmFsKSB7XG5cdFx0XHR2YWwgPSBuZXdWYWw7XG5cdFx0XHRleGVjQ2IgIT09IGZhbHNlICYmIGlzRnVuYyhjYikgJiYgY2IuYXBwbHkoY3R4LCBhcmdzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9O1xufVxuKi9cblxuLypcbi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vT2xpY2FsL2JpbmFyeS1zZWFyY2hcbmV4cG9ydCBmdW5jdGlvbiBiaW5hcnlLZXlTZWFyY2gobGlzdCwgaXRlbSkge1xuICAgIHZhciBtaW4gPSAwO1xuICAgIHZhciBtYXggPSBsaXN0Lmxlbmd0aCAtIDE7XG4gICAgdmFyIGd1ZXNzO1xuXG5cdHZhciBiaXR3aXNlID0gKG1heCA8PSAyMTQ3NDgzNjQ3KSA/IHRydWUgOiBmYWxzZTtcblx0aWYgKGJpdHdpc2UpIHtcblx0XHR3aGlsZSAobWluIDw9IG1heCkge1xuXHRcdFx0Z3Vlc3MgPSAobWluICsgbWF4KSA+PiAxO1xuXHRcdFx0aWYgKGxpc3RbZ3Vlc3NdLmtleSA9PT0gaXRlbSkgeyByZXR1cm4gZ3Vlc3M7IH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZiAobGlzdFtndWVzc10ua2V5IDwgaXRlbSkgeyBtaW4gPSBndWVzcyArIDE7IH1cblx0XHRcdFx0ZWxzZSB7IG1heCA9IGd1ZXNzIC0gMTsgfVxuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR3aGlsZSAobWluIDw9IG1heCkge1xuXHRcdFx0Z3Vlc3MgPSBNYXRoLmZsb29yKChtaW4gKyBtYXgpIC8gMik7XG5cdFx0XHRpZiAobGlzdFtndWVzc10ua2V5ID09PSBpdGVtKSB7IHJldHVybiBndWVzczsgfVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGlmIChsaXN0W2d1ZXNzXS5rZXkgPCBpdGVtKSB7IG1pbiA9IGd1ZXNzICsgMTsgfVxuXHRcdFx0XHRlbHNlIHsgbWF4ID0gZ3Vlc3MgLSAxOyB9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cbiAgICByZXR1cm4gLTE7XG59XG4qL1xuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Mb25nZXN0X2luY3JlYXNpbmdfc3Vic2VxdWVuY2Vcbi8vIGltcGwgYm9ycm93ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vaXZpanMvaXZpXG5mdW5jdGlvbiBsb25nZXN0SW5jcmVhc2luZ1N1YnNlcXVlbmNlKGEpIHtcblx0dmFyIHAgPSBhLnNsaWNlKCk7XG5cdHZhciByZXN1bHQgPSBbXTtcblx0cmVzdWx0LnB1c2goMCk7XG5cdHZhciB1O1xuXHR2YXIgdjtcblxuXHRmb3IgKHZhciBpID0gMCwgaWwgPSBhLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcblx0XHR2YXIgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG5cdFx0aWYgKGFbal0gPCBhW2ldKSB7XG5cdFx0XHRwW2ldID0gajtcblx0XHRcdHJlc3VsdC5wdXNoKGkpO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dSA9IDA7XG5cdFx0diA9IHJlc3VsdC5sZW5ndGggLSAxO1xuXG5cdFx0d2hpbGUgKHUgPCB2KSB7XG5cdFx0XHR2YXIgYyA9ICgodSArIHYpIC8gMikgfCAwO1xuXHRcdFx0aWYgKGFbcmVzdWx0W2NdXSA8IGFbaV0pIHtcblx0XHRcdFx0dSA9IGMgKyAxO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0diA9IGM7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGFbaV0gPCBhW3Jlc3VsdFt1XV0pIHtcblx0XHRcdGlmICh1ID4gMCkge1xuXHRcdFx0XHRwW2ldID0gcmVzdWx0W3UgLSAxXTtcblx0XHRcdH1cblx0XHRcdHJlc3VsdFt1XSA9IGk7XG5cdFx0fVxuXHR9XG5cblx0dSA9IHJlc3VsdC5sZW5ndGg7XG5cdHYgPSByZXN1bHRbdSAtIDFdO1xuXG5cdHdoaWxlICh1LS0gPiAwKSB7XG5cdFx0cmVzdWx0W3VdID0gdjtcblx0XHR2ID0gcFt2XTtcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9PbGljYWwvYmluYXJ5LXNlYXJjaFxuZnVuY3Rpb24gYmluYXJ5RmluZExhcmdlcihpdGVtLCBsaXN0KSB7XG5cdHZhciBtaW4gPSAwO1xuXHR2YXIgbWF4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHR2YXIgZ3Vlc3M7XG5cblx0dmFyIGJpdHdpc2UgPSAobWF4IDw9IDIxNDc0ODM2NDcpID8gdHJ1ZSA6IGZhbHNlO1xuXHRpZiAoYml0d2lzZSkge1xuXHRcdHdoaWxlIChtaW4gPD0gbWF4KSB7XG5cdFx0XHRndWVzcyA9IChtaW4gKyBtYXgpID4+IDE7XG5cdFx0XHRpZiAobGlzdFtndWVzc10gPT09IGl0ZW0pIHsgcmV0dXJuIGd1ZXNzOyB9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aWYgKGxpc3RbZ3Vlc3NdIDwgaXRlbSkgeyBtaW4gPSBndWVzcyArIDE7IH1cblx0XHRcdFx0ZWxzZSB7IG1heCA9IGd1ZXNzIC0gMTsgfVxuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR3aGlsZSAobWluIDw9IG1heCkge1xuXHRcdFx0Z3Vlc3MgPSBNYXRoLmZsb29yKChtaW4gKyBtYXgpIC8gMik7XG5cdFx0XHRpZiAobGlzdFtndWVzc10gPT09IGl0ZW0pIHsgcmV0dXJuIGd1ZXNzOyB9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aWYgKGxpc3RbZ3Vlc3NdIDwgaXRlbSkgeyBtaW4gPSBndWVzcyArIDE7IH1cblx0XHRcdFx0ZWxzZSB7IG1heCA9IGd1ZXNzIC0gMTsgfVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiAobWluID09IGxpc3QubGVuZ3RoKSA/IG51bGwgOiBtaW47XG5cbi8vXHRyZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzRXZQcm9wKG5hbWUpIHtcblx0cmV0dXJuIG5hbWVbMF0gPT09IFwib1wiICYmIG5hbWVbMV0gPT09IFwiblwiO1xufVxuXG5mdW5jdGlvbiBpc1NwbFByb3AobmFtZSkge1xuXHRyZXR1cm4gbmFtZVswXSA9PT0gXCJfXCI7XG59XG5cbmZ1bmN0aW9uIGlzU3R5bGVQcm9wKG5hbWUpIHtcblx0cmV0dXJuIG5hbWUgPT09IFwic3R5bGVcIjtcbn1cblxuZnVuY3Rpb24gcmVwYWludChub2RlKSB7XG5cdG5vZGUgJiYgbm9kZS5lbCAmJiBub2RlLmVsLm9mZnNldEhlaWdodDtcbn1cblxuZnVuY3Rpb24gaXNIeWRyYXRlZCh2bSkge1xuXHRyZXR1cm4gdm0ubm9kZSAhPSBudWxsICYmIHZtLm5vZGUuZWwgIT0gbnVsbDtcbn1cblxuLy8gdGVzdHMgaW50ZXJhY3RpdmUgcHJvcHMgd2hlcmUgcmVhbCB2YWwgc2hvdWxkIGJlIGNvbXBhcmVkXG5mdW5jdGlvbiBpc0R5blByb3AodGFnLCBhdHRyKSB7XG4vL1x0c3dpdGNoICh0YWcpIHtcbi8vXHRcdGNhc2UgXCJpbnB1dFwiOlxuLy9cdFx0Y2FzZSBcInRleHRhcmVhXCI6XG4vL1x0XHRjYXNlIFwic2VsZWN0XCI6XG4vL1x0XHRjYXNlIFwib3B0aW9uXCI6XG5cdFx0XHRzd2l0Y2ggKGF0dHIpIHtcblx0XHRcdFx0Y2FzZSBcInZhbHVlXCI6XG5cdFx0XHRcdGNhc2UgXCJjaGVja2VkXCI6XG5cdFx0XHRcdGNhc2UgXCJzZWxlY3RlZFwiOlxuLy9cdFx0XHRcdGNhc2UgXCJzZWxlY3RlZEluZGV4XCI6XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG4vL1x0fVxuXG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0Vm0obikge1xuXHRuID0gbiB8fCBlbXB0eU9iajtcblx0d2hpbGUgKG4udm0gPT0gbnVsbCAmJiBuLnBhcmVudClcblx0XHR7IG4gPSBuLnBhcmVudDsgfVxuXHRyZXR1cm4gbi52bTtcbn1cblxuZnVuY3Rpb24gVk5vZGUoKSB7fVxuXG52YXIgVk5vZGVQcm90byA9IFZOb2RlLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFZOb2RlLFxuXG5cdHR5cGU6XHRudWxsLFxuXG5cdHZtOlx0XHRudWxsLFxuXG5cdC8vIGFsbCB0aGlzIHN0dWZmIGNhbiBqdXN0IGxpdmUgaW4gYXR0cnMgKGFzIGRlZmluZWQpIGp1c3QgaGF2ZSBnZXR0ZXJzIGhlcmUgZm9yIGl0XG5cdGtleTpcdG51bGwsXG5cdHJlZjpcdG51bGwsXG5cdGRhdGE6XHRudWxsLFxuXHRob29rczpcdG51bGwsXG5cdG5zOlx0XHRudWxsLFxuXG5cdGVsOlx0XHRudWxsLFxuXG5cdHRhZzpcdG51bGwsXG5cdGF0dHJzOlx0bnVsbCxcblx0Ym9keTpcdG51bGwsXG5cblx0ZmxhZ3M6XHQwLFxuXG5cdF9jbGFzczpcdG51bGwsXG5cdF9kaWZmOlx0bnVsbCxcblxuXHQvLyBwZW5kaW5nIHJlbW92YWwgb24gcHJvbWlzZSByZXNvbHV0aW9uXG5cdF9kZWFkOlx0ZmFsc2UsXG5cdC8vIHBhcnQgb2YgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlP1xuXHRfbGlzOlx0ZmFsc2UsXG5cblx0aWR4Olx0bnVsbCxcblx0cGFyZW50Olx0bnVsbCxcblxuXHQvKlxuXHQvLyBicmVhayBvdXQgaW50byBvcHRpb25hbCBmbHVlbnQgbW9kdWxlXG5cdGtleTpcdGZ1bmN0aW9uKHZhbCkgeyB0aGlzLmtleVx0PSB2YWw7IHJldHVybiB0aGlzOyB9LFxuXHRyZWY6XHRmdW5jdGlvbih2YWwpIHsgdGhpcy5yZWZcdD0gdmFsOyByZXR1cm4gdGhpczsgfSxcdFx0Ly8gZGVlcCByZWZzXG5cdGRhdGE6XHRmdW5jdGlvbih2YWwpIHsgdGhpcy5kYXRhXHQ9IHZhbDsgcmV0dXJuIHRoaXM7IH0sXG5cdGhvb2tzOlx0ZnVuY3Rpb24odmFsKSB7IHRoaXMuaG9va3NcdD0gdmFsOyByZXR1cm4gdGhpczsgfSxcdFx0Ly8gaChcImRpdlwiKS5ob29rcygpXG5cdGh0bWw6XHRmdW5jdGlvbih2YWwpIHsgdGhpcy5odG1sXHQ9IHRydWU7IHJldHVybiB0aGlzLmJvZHkodmFsKTsgfSxcblxuXHRib2R5Olx0ZnVuY3Rpb24odmFsKSB7IHRoaXMuYm9keVx0PSB2YWw7IHJldHVybiB0aGlzOyB9LFxuXHQqL1xufTtcblxuZnVuY3Rpb24gZGVmaW5lVGV4dChib2R5KSB7XG5cdHZhciBub2RlID0gbmV3IFZOb2RlO1xuXHRub2RlLnR5cGUgPSBURVhUO1xuXHRub2RlLmJvZHkgPSBib2R5O1xuXHRyZXR1cm4gbm9kZTtcbn1cblxudmFyIGlzU3RyZWFtID0gZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZSB9O1xuXG52YXIgc3RyZWFtVmFsID0gbm9vcDtcbnZhciBzdWJTdHJlYW0gPSBub29wO1xudmFyIHVuc3ViU3RyZWFtID0gbm9vcDtcblxuZnVuY3Rpb24gc3RyZWFtQ2ZnKGNmZykge1xuXHRpc1N0cmVhbVx0PSBjZmcuaXM7XG5cdHN0cmVhbVZhbFx0PSBjZmcudmFsO1xuXHRzdWJTdHJlYW1cdD0gY2ZnLnN1Yjtcblx0dW5zdWJTdHJlYW1cdD0gY2ZnLnVuc3ViO1xufVxuXG4vLyBjcmVhdGVzIGEgb25lLXNob3Qgc2VsZi1lbmRpbmcgc3RyZWFtIHRoYXQgcmVkcmF3cyB0YXJnZXQgdm1cbi8vIFRPRE86IGlmIGl0J3MgYWxyZWFkeSByZWdpc3RlcmVkIGJ5IGFueSBwYXJlbnQgdm0sIHRoZW4gaWdub3JlIHRvIGF2b2lkIHNpbXVsdGFuZW91cyBwYXJlbnQgJiBjaGlsZCByZWZyZXNoXG5mdW5jdGlvbiBob29rU3RyZWFtKHMsIHZtKSB7XG5cdHZhciByZWRyYXdTdHJlYW0gPSBzdWJTdHJlYW0ocywgZnVuY3Rpb24gKHZhbCkge1xuXHRcdC8vIHRoaXMgXCJpZlwiIGlnbm9yZXMgdGhlIGluaXRpYWwgZmlyaW5nIGR1cmluZyBzdWJzY3JpcHRpb24gKHRoZXJlJ3Mgbm8gcmVkcmF3YWJsZSB2bSB5ZXQpXG5cdFx0aWYgKHJlZHJhd1N0cmVhbSkge1xuXHRcdFx0Ly8gaWYgdm0gZnVsbHkgaXMgZm9ybWVkIChvciBtb3VudGVkIHZtLm5vZGUuZWw/KVxuXHRcdFx0aWYgKHZtLm5vZGUgIT0gbnVsbClcblx0XHRcdFx0eyB2bS5yZWRyYXcoKTsgfVxuXHRcdFx0dW5zdWJTdHJlYW0ocmVkcmF3U3RyZWFtKTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBzdHJlYW1WYWwocyk7XG59XG5cbmZ1bmN0aW9uIGhvb2tTdHJlYW0yKHMsIHZtKSB7XG5cdHZhciByZWRyYXdTdHJlYW0gPSBzdWJTdHJlYW0ocywgZnVuY3Rpb24gKHZhbCkge1xuXHRcdC8vIHRoaXMgXCJpZlwiIGlnbm9yZXMgdGhlIGluaXRpYWwgZmlyaW5nIGR1cmluZyBzdWJzY3JpcHRpb24gKHRoZXJlJ3Mgbm8gcmVkcmF3YWJsZSB2bSB5ZXQpXG5cdFx0aWYgKHJlZHJhd1N0cmVhbSkge1xuXHRcdFx0Ly8gaWYgdm0gZnVsbHkgaXMgZm9ybWVkIChvciBtb3VudGVkIHZtLm5vZGUuZWw/KVxuXHRcdFx0aWYgKHZtLm5vZGUgIT0gbnVsbClcblx0XHRcdFx0eyB2bS5yZWRyYXcoKTsgfVxuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHJlZHJhd1N0cmVhbTtcbn1cblxudmFyIHRhZ0NhY2hlID0ge307XG5cbnZhciBSRV9BVFRSUyA9IC9cXFsoXFx3KykoPzo9KFxcdyspKT9cXF0vZztcblxuZnVuY3Rpb24gY3NzVGFnKHJhdykge1xuXHR7XG5cdFx0dmFyIGNhY2hlZCA9IHRhZ0NhY2hlW3Jhd107XG5cblx0XHRpZiAoY2FjaGVkID09IG51bGwpIHtcblx0XHRcdHZhciB0YWcsIGlkLCBjbHMsIGF0dHI7XG5cblx0XHRcdHRhZ0NhY2hlW3Jhd10gPSBjYWNoZWQgPSB7XG5cdFx0XHRcdHRhZzpcdCh0YWdcdD0gcmF3Lm1hdGNoKCAvXlstXFx3XSsvKSlcdFx0P1x0dGFnWzBdXHRcdFx0XHRcdFx0OiBcImRpdlwiLFxuXHRcdFx0XHRpZDpcdFx0KGlkXHRcdD0gcmF3Lm1hdGNoKCAvIyhbLVxcd10rKS8pKVx0XHQ/IFx0aWRbMV1cdFx0XHRcdFx0XHQ6IG51bGwsXG5cdFx0XHRcdGNsYXNzOlx0KGNsc1x0PSByYXcubWF0Y2goL1xcLihbLVxcdy5dKykvKSlcdFx0P1x0Y2xzWzFdLnJlcGxhY2UoL1xcLi9nLCBcIiBcIilcdDogbnVsbCxcblx0XHRcdFx0YXR0cnM6XHRudWxsLFxuXHRcdFx0fTtcblxuXHRcdFx0d2hpbGUgKGF0dHIgPSBSRV9BVFRSUy5leGVjKHJhdykpIHtcblx0XHRcdFx0aWYgKGNhY2hlZC5hdHRycyA9PSBudWxsKVxuXHRcdFx0XHRcdHsgY2FjaGVkLmF0dHJzID0ge307IH1cblx0XHRcdFx0Y2FjaGVkLmF0dHJzW2F0dHJbMV1dID0gYXR0clsyXSB8fCBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjYWNoZWQ7XG5cdH1cbn1cblxudmFyIERFVk1PREUgPSB7XG5cdHN5bmNSZWRyYXc6IGZhbHNlLFxuXG5cdHdhcm5pbmdzOiB0cnVlLFxuXG5cdHZlcmJvc2U6IHRydWUsXG5cblx0bXV0YXRpb25zOiB0cnVlLFxuXG5cdERBVEFfUkVQTEFDRUQ6IGZ1bmN0aW9uKHZtLCBvbGREYXRhLCBuZXdEYXRhKSB7XG5cdFx0aWYgKGlzRnVuYyh2bS52aWV3KSAmJiB2bS52aWV3Lmxlbmd0aCA+IDEpIHtcblx0XHRcdHZhciBtc2cgPSBcIkEgdmlldydzIGRhdGEgd2FzIHJlcGxhY2VkLiBUaGUgZGF0YSBvcmlnaW5hbGx5IHBhc3NlZCB0byB0aGUgdmlldyBjbG9zdXJlIGR1cmluZyBpbml0IGlzIG5vdyBzdGFsZS4gWW91IG1heSB3YW50IHRvIHJlbHkgb25seSBvbiB0aGUgZGF0YSBwYXNzZWQgdG8gcmVuZGVyKCkgb3Igdm0uZGF0YS5cIjtcblx0XHRcdHJldHVybiBbbXNnLCB2bSwgb2xkRGF0YSwgbmV3RGF0YV07XG5cdFx0fVxuXHR9LFxuXG5cdFVOS0VZRURfSU5QVVQ6IGZ1bmN0aW9uKHZub2RlKSB7XG5cdFx0cmV0dXJuIFtcIlVua2V5ZWQgPGlucHV0PiBkZXRlY3RlZC4gQ29uc2lkZXIgYWRkaW5nIGEgbmFtZSwgaWQsIF9rZXksIG9yIF9yZWYgYXR0ciB0byBhdm9pZCBhY2NpZGVudGFsIERPTSByZWN5Y2xpbmcgYmV0d2VlbiBkaWZmZXJlbnQgPGlucHV0PiB0eXBlcy5cIiwgdm5vZGVdO1xuXHR9LFxuXG5cdFVOTU9VTlRFRF9SRURSQVc6IGZ1bmN0aW9uKHZtKSB7XG5cdFx0cmV0dXJuIFtcIkludm9raW5nIHJlZHJhdygpIG9mIGFuIHVubW91bnRlZCAoc3ViKXZpZXcgbWF5IHJlc3VsdCBpbiBlcnJvcnMuXCIsIHZtXTtcblx0fSxcblxuXHRJTkxJTkVfSEFORExFUjogZnVuY3Rpb24odm5vZGUsIG92YWwsIG52YWwpIHtcblx0XHRyZXR1cm4gW1wiQW5vbnltb3VzIGV2ZW50IGhhbmRsZXJzIGdldCByZS1ib3VuZCBvbiBlYWNoIHJlZHJhdywgY29uc2lkZXIgZGVmaW5pbmcgdGhlbSBvdXRzaWRlIG9mIHRlbXBsYXRlcyBmb3IgYmV0dGVyIHJldXNlLlwiLCB2bm9kZSwgb3ZhbCwgbnZhbF07XG5cdH0sXG5cblx0TUlTTUFUQ0hFRF9IQU5ETEVSOiBmdW5jdGlvbih2bm9kZSwgb3ZhbCwgbnZhbCkge1xuXHRcdHJldHVybiBbXCJQYXRjaGluZyBvZiBkaWZmZXJlbnQgZXZlbnQgaGFuZGxlciBzdHlsZXMgaXMgbm90IGZ1bGx5IHN1cHBvcnRlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gRW5zdXJlIHRoYXQgaGFuZGxlcnMgYXJlIGRlZmluZWQgdXNpbmcgdGhlIHNhbWUgc3R5bGUuXCIsIHZub2RlLCBvdmFsLCBudmFsXTtcblx0fSxcblxuXHRTVkdfV1JPTkdfRkFDVE9SWTogZnVuY3Rpb24odm5vZGUpIHtcblx0XHRyZXR1cm4gW1wiPHN2Zz4gZGVmaW5lZCB1c2luZyBkb212bS5kZWZpbmVFbGVtZW50LiBVc2UgZG9tdm0uZGVmaW5lU3ZnRWxlbWVudCBmb3IgPHN2Zz4gJiBjaGlsZCBub2Rlcy5cIiwgdm5vZGVdO1xuXHR9LFxuXG5cdEZPUkVJR05fRUxFTUVOVDogZnVuY3Rpb24oZWwpIHtcblx0XHRyZXR1cm4gW1wiZG9tdm0gc3R1bWJsZWQgdXBvbiBhbiBlbGVtZW50IGluIGl0cyBET00gdGhhdCBpdCBkaWRuJ3QgY3JlYXRlLCB3aGljaCBtYXkgYmUgcHJvYmxlbWF0aWMuIFlvdSBjYW4gaW5qZWN0IGV4dGVybmFsIGVsZW1lbnRzIGludG8gdGhlIHZ0cmVlIHVzaW5nIGRvbXZtLmluamVjdEVsZW1lbnQuXCIsIGVsXTtcblx0fSxcblxuXHRSRVVTRURfQVRUUlM6IGZ1bmN0aW9uKHZub2RlKSB7XG5cdFx0cmV0dXJuIFtcIkF0dHJzIG9iamVjdHMgbWF5IG9ubHkgYmUgcmV1c2VkIGlmIHRoZXkgYXJlIHRydWx5IHN0YXRpYywgYXMgYSBwZXJmIG9wdGltaXphdGlvbi4gTXV0YXRpbmcgJiByZXVzaW5nIHRoZW0gd2lsbCBoYXZlIG5vIGVmZmVjdCBvbiB0aGUgRE9NIGR1ZSB0byAwIGRpZmYuXCIsIHZub2RlXTtcblx0fSxcblxuXHRBREpBQ0VOVF9URVhUOiBmdW5jdGlvbih2bm9kZSwgdGV4dDEsIHRleHQyKSB7XG5cdFx0cmV0dXJuIFtcIkFkamFjZW50IHRleHQgbm9kZXMgd2lsbCBiZSBtZXJnZWQuIENvbnNpZGVyIGNvbmNhdGVudGF0aW5nIHRoZW0geW91cnNlbGYgaW4gdGhlIHRlbXBsYXRlIGZvciBpbXByb3ZlZCBwZXJmLlwiLCB2bm9kZSwgdGV4dDEsIHRleHQyXTtcblx0fSxcblxuXHRBUlJBWV9GTEFUVEVORUQ6IGZ1bmN0aW9uKHZub2RlLCBhcnJheSkge1xuXHRcdHJldHVybiBbXCJBcnJheXMgd2l0aGluIHRlbXBsYXRlcyB3aWxsIGJlIGZsYXR0ZW5lZC4gV2hlbiB0aGV5IGFyZSBsZWFkaW5nIG9yIHRyYWlsaW5nLCBpdCdzIGVhc3kgYW5kIG1vcmUgcGVyZm9ybWFudCB0byBqdXN0IC5jb25jYXQoKSB0aGVtIGluIHRoZSB0ZW1wbGF0ZS5cIiwgdm5vZGUsIGFycmF5XTtcblx0fSxcblxuXHRBTFJFQURZX0hZRFJBVEVEOiBmdW5jdGlvbih2bSkge1xuXHRcdHJldHVybiBbXCJBIGNoaWxkIHZpZXcgZmFpbGVkIHRvIG1vdW50IGJlY2F1c2UgaXQgd2FzIGFscmVhZHkgaHlkcmF0ZWQuIE1ha2Ugc3VyZSBub3QgdG8gaW52b2tlIHZtLnJlZHJhdygpIG9yIHZtLnVwZGF0ZSgpIG9uIHVubW91bnRlZCB2aWV3cy5cIiwgdm1dO1xuXHR9LFxuXG5cdEFUVEFDSF9JTVBMSUNJVF9UQk9EWTogZnVuY3Rpb24odm5vZGUsIHZjaGlsZCkge1xuXHRcdHJldHVybiBbXCI8dGFibGU+PHRyPiB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHZ0cmVlLCBidXQgdGhlIERPTSB3aWxsIGJlIDx0YWJsZT48dGJvZHk+PHRyPiBhZnRlciBIVE1MJ3MgaW1wbGljaXQgcGFyc2luZy4gWW91IHNob3VsZCBjcmVhdGUgdGhlIDx0Ym9keT4gdm5vZGUgZXhwbGljaXRseSB0byBhdm9pZCBTU1IvYXR0YWNoKCkgZmFpbHVyZXMuXCIsIHZub2RlLCB2Y2hpbGRdO1xuXHR9XG59O1xuXG5mdW5jdGlvbiBkZXZOb3RpZnkoa2V5LCBhcmdzKSB7XG5cdGlmIChERVZNT0RFLndhcm5pbmdzICYmIGlzRnVuYyhERVZNT0RFW2tleV0pKSB7XG5cdFx0dmFyIG1zZ0FyZ3MgPSBERVZNT0RFW2tleV0uYXBwbHkobnVsbCwgYXJncyk7XG5cblx0XHRpZiAobXNnQXJncykge1xuXHRcdFx0bXNnQXJnc1swXSA9IGtleSArIFwiOiBcIiArIChERVZNT0RFLnZlcmJvc2UgPyBtc2dBcmdzWzBdIDogXCJcIik7XG5cdFx0XHRjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgbXNnQXJncyk7XG5cdFx0fVxuXHR9XG59XG5cbi8vIChkZSlvcHRpbWl6YXRpb24gZmxhZ3NcblxuLy8gZm9yY2VzIHNsb3cgYm90dG9tLXVwIHJlbW92ZUNoaWxkIHRvIGZpcmUgZGVlcCB3aWxsUmVtb3ZlL3dpbGxVbm1vdW50IGhvb2tzLFxudmFyIERFRVBfUkVNT1ZFID0gMTtcbi8vIHByZXZlbnRzIGluc2VydGluZy9yZW1vdmluZy9yZW9yZGVyaW5nIG9mIGNoaWxkcmVuXG52YXIgRklYRURfQk9EWSA9IDI7XG4vLyBlbmFibGVzIGZhc3Qga2V5ZWQgbG9va3VwIG9mIGNoaWxkcmVuIHZpYSBiaW5hcnkgc2VhcmNoLCBleHBlY3RzIGhvbW9nZW5lb3VzIGtleWVkIGJvZHlcbnZhciBLRVlFRF9MSVNUID0gNDtcbi8vIGluZGljYXRlcyBhbiB2bm9kZSBtYXRjaC9kaWZmL3JlY3ljbGVyIGZ1bmN0aW9uIGZvciBib2R5XG52YXIgTEFaWV9MSVNUID0gODtcblxuZnVuY3Rpb24gaW5pdEVsZW1lbnROb2RlKHRhZywgYXR0cnMsIGJvZHksIGZsYWdzKSB7XG5cdHZhciBub2RlID0gbmV3IFZOb2RlO1xuXG5cdG5vZGUudHlwZSA9IEVMRU1FTlQ7XG5cblx0aWYgKGlzU2V0KGZsYWdzKSlcblx0XHR7IG5vZGUuZmxhZ3MgPSBmbGFnczsgfVxuXG5cdG5vZGUuYXR0cnMgPSBhdHRycztcblxuXHR2YXIgcGFyc2VkID0gY3NzVGFnKHRhZyk7XG5cblx0bm9kZS50YWcgPSBwYXJzZWQudGFnO1xuXG5cdC8vIG1laCwgd2VhayBhc3NlcnRpb24sIHdpbGwgZmFpbCBmb3IgaWQ9MCwgZXRjLlxuXHRpZiAocGFyc2VkLmlkIHx8IHBhcnNlZC5jbGFzcyB8fCBwYXJzZWQuYXR0cnMpIHtcblx0XHR2YXIgcCA9IG5vZGUuYXR0cnMgfHwge307XG5cblx0XHRpZiAocGFyc2VkLmlkICYmICFpc1NldChwLmlkKSlcblx0XHRcdHsgcC5pZCA9IHBhcnNlZC5pZDsgfVxuXG5cdFx0aWYgKHBhcnNlZC5jbGFzcykge1xuXHRcdFx0bm9kZS5fY2xhc3MgPSBwYXJzZWQuY2xhc3M7XHRcdC8vIHN0YXRpYyBjbGFzc1xuXHRcdFx0cC5jbGFzcyA9IHBhcnNlZC5jbGFzcyArIChpc1NldChwLmNsYXNzKSA/IChcIiBcIiArIHAuY2xhc3MpIDogXCJcIik7XG5cdFx0fVxuXHRcdGlmIChwYXJzZWQuYXR0cnMpIHtcblx0XHRcdGZvciAodmFyIGtleSBpbiBwYXJzZWQuYXR0cnMpXG5cdFx0XHRcdHsgaWYgKCFpc1NldChwW2tleV0pKVxuXHRcdFx0XHRcdHsgcFtrZXldID0gcGFyc2VkLmF0dHJzW2tleV07IH0gfVxuXHRcdH1cblxuLy9cdFx0aWYgKG5vZGUuYXR0cnMgIT09IHApXG5cdFx0XHRub2RlLmF0dHJzID0gcDtcblx0fVxuXG5cdHZhciBtZXJnZWRBdHRycyA9IG5vZGUuYXR0cnM7XG5cblx0aWYgKGlzU2V0KG1lcmdlZEF0dHJzKSkge1xuXHRcdGlmIChpc1NldChtZXJnZWRBdHRycy5fa2V5KSlcblx0XHRcdHsgbm9kZS5rZXkgPSBtZXJnZWRBdHRycy5fa2V5OyB9XG5cblx0XHRpZiAoaXNTZXQobWVyZ2VkQXR0cnMuX3JlZikpXG5cdFx0XHR7IG5vZGUucmVmID0gbWVyZ2VkQXR0cnMuX3JlZjsgfVxuXG5cdFx0aWYgKGlzU2V0KG1lcmdlZEF0dHJzLl9ob29rcykpXG5cdFx0XHR7IG5vZGUuaG9va3MgPSBtZXJnZWRBdHRycy5faG9va3M7IH1cblxuXHRcdGlmIChpc1NldChtZXJnZWRBdHRycy5fZGF0YSkpXG5cdFx0XHR7IG5vZGUuZGF0YSA9IG1lcmdlZEF0dHJzLl9kYXRhOyB9XG5cblx0XHRpZiAoaXNTZXQobWVyZ2VkQXR0cnMuX2ZsYWdzKSlcblx0XHRcdHsgbm9kZS5mbGFncyA9IG1lcmdlZEF0dHJzLl9mbGFnczsgfVxuXG5cdFx0aWYgKCFpc1NldChub2RlLmtleSkpIHtcblx0XHRcdGlmIChpc1NldChub2RlLnJlZikpXG5cdFx0XHRcdHsgbm9kZS5rZXkgPSBub2RlLnJlZjsgfVxuXHRcdFx0ZWxzZSBpZiAoaXNTZXQobWVyZ2VkQXR0cnMuaWQpKVxuXHRcdFx0XHR7IG5vZGUua2V5ID0gbWVyZ2VkQXR0cnMuaWQ7IH1cblx0XHRcdGVsc2UgaWYgKGlzU2V0KG1lcmdlZEF0dHJzLm5hbWUpKVxuXHRcdFx0XHR7IG5vZGUua2V5ID0gbWVyZ2VkQXR0cnMubmFtZSArIChtZXJnZWRBdHRycy50eXBlID09PSBcInJhZGlvXCIgfHwgbWVyZ2VkQXR0cnMudHlwZSA9PT0gXCJjaGVja2JveFwiID8gbWVyZ2VkQXR0cnMudmFsdWUgOiBcIlwiKTsgfVxuXHRcdH1cblx0fVxuXG5cdGlmIChib2R5ICE9IG51bGwpXG5cdFx0eyBub2RlLmJvZHkgPSBib2R5OyB9XG5cblx0e1xuXHRcdGlmIChub2RlLnRhZyA9PT0gXCJzdmdcIikge1xuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0bm9kZS5ucyA9PSBudWxsICYmIGRldk5vdGlmeShcIlNWR19XUk9OR19GQUNUT1JZXCIsIFtub2RlXSk7XG5cdFx0XHR9LCAxNik7XG5cdFx0fVxuXHRcdC8vIHRvZG86IGF0dHJzLmNvbnRlbnRlZGl0YWJsZSA9PT0gXCJ0cnVlXCI/XG5cdFx0ZWxzZSBpZiAoL14oPzppbnB1dHx0ZXh0YXJlYXxzZWxlY3R8ZGF0YWxpc3R8a2V5Z2VufG91dHB1dCkkLy50ZXN0KG5vZGUudGFnKSAmJiBub2RlLmtleSA9PSBudWxsKVxuXHRcdFx0eyBkZXZOb3RpZnkoXCJVTktFWUVEX0lOUFVUXCIsIFtub2RlXSk7IH1cblx0fVxuXG5cdHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBzZXRSZWYodm0sIG5hbWUsIG5vZGUpIHtcblx0dmFyIHBhdGggPSBbXCJyZWZzXCJdLmNvbmNhdChuYW1lLnNwbGl0KFwiLlwiKSk7XG5cdGRlZXBTZXQodm0sIHBhdGgsIG5vZGUpO1xufVxuXG5mdW5jdGlvbiBzZXREZWVwUmVtb3ZlKG5vZGUpIHtcblx0d2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudClcblx0XHR7IG5vZGUuZmxhZ3MgfD0gREVFUF9SRU1PVkU7IH1cbn1cblxuLy8gdm5ldywgdm9sZFxuZnVuY3Rpb24gcHJlUHJvYyh2bmV3LCBwYXJlbnQsIGlkeCwgb3duVm0pIHtcblx0aWYgKHZuZXcudHlwZSA9PT0gVk1PREVMIHx8IHZuZXcudHlwZSA9PT0gVlZJRVcpXG5cdFx0eyByZXR1cm47IH1cblxuXHR2bmV3LnBhcmVudCA9IHBhcmVudDtcblx0dm5ldy5pZHggPSBpZHg7XG5cdHZuZXcudm0gPSBvd25WbTtcblxuXHRpZiAodm5ldy5yZWYgIT0gbnVsbClcblx0XHR7IHNldFJlZihnZXRWbSh2bmV3KSwgdm5ldy5yZWYsIHZuZXcpOyB9XG5cblx0dmFyIG5oID0gdm5ldy5ob29rcyxcblx0XHR2aCA9IG93blZtICYmIG93blZtLmhvb2tzO1xuXG5cdGlmIChuaCAmJiAobmgud2lsbFJlbW92ZSB8fCBuaC5kaWRSZW1vdmUpIHx8XG5cdFx0dmggJiYgKHZoLndpbGxVbm1vdW50IHx8IHZoLmRpZFVubW91bnQpKVxuXHRcdHsgc2V0RGVlcFJlbW92ZSh2bmV3KTsgfVxuXG5cdGlmIChpc0Fycih2bmV3LmJvZHkpKVxuXHRcdHsgcHJlUHJvY0JvZHkodm5ldyk7IH1cblx0ZWxzZSB7XG5cdFx0aWYgKGlzU3RyZWFtKHZuZXcuYm9keSkpXG5cdFx0XHR7IHZuZXcuYm9keSA9IGhvb2tTdHJlYW0odm5ldy5ib2R5LCBnZXRWbSh2bmV3KSk7IH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcmVQcm9jQm9keSh2bmV3KSB7XG5cdHZhciBib2R5ID0gdm5ldy5ib2R5O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBub2RlMiA9IGJvZHlbaV07XG5cblx0XHQvLyByZW1vdmUgZmFsc2UvbnVsbC91bmRlZmluZWRcblx0XHRpZiAobm9kZTIgPT09IGZhbHNlIHx8IG5vZGUyID09IG51bGwpXG5cdFx0XHR7IGJvZHkuc3BsaWNlKGktLSwgMSk7IH1cblx0XHQvLyBmbGF0dGVuIGFycmF5c1xuXHRcdGVsc2UgaWYgKGlzQXJyKG5vZGUyKSkge1xuXHRcdFx0e1xuXHRcdFx0XHRpZiAoaSA9PT0gMCB8fCBpID09PSBib2R5Lmxlbmd0aCAtIDEpXG5cdFx0XHRcdFx0eyBkZXZOb3RpZnkoXCJBUlJBWV9GTEFUVEVORURcIiwgW3ZuZXcsIG5vZGUyXSk7IH1cblx0XHRcdH1cblx0XHRcdGluc2VydEFycihib2R5LCBub2RlMiwgaS0tLCAxKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRpZiAobm9kZTIudHlwZSA9PSBudWxsKVxuXHRcdFx0XHR7IGJvZHlbaV0gPSBub2RlMiA9IGRlZmluZVRleHQoXCJcIitub2RlMik7IH1cblxuXHRcdFx0aWYgKG5vZGUyLnR5cGUgPT09IFRFWFQpIHtcblx0XHRcdFx0Ly8gcmVtb3ZlIGVtcHR5IHRleHQgbm9kZXNcblx0XHRcdFx0aWYgKG5vZGUyLmJvZHkgPT0gbnVsbCB8fCBub2RlMi5ib2R5ID09PSBcIlwiKVxuXHRcdFx0XHRcdHsgYm9keS5zcGxpY2UoaS0tLCAxKTsgfVxuXHRcdFx0XHQvLyBtZXJnZSB3aXRoIHByZXZpb3VzIHRleHQgbm9kZVxuXHRcdFx0XHRlbHNlIGlmIChpID4gMCAmJiBib2R5W2ktMV0udHlwZSA9PT0gVEVYVCkge1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRldk5vdGlmeShcIkFESkFDRU5UX1RFWFRcIiwgW3ZuZXcsIGJvZHlbaS0xXS5ib2R5LCBub2RlMi5ib2R5XSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJvZHlbaS0xXS5ib2R5ICs9IG5vZGUyLmJvZHk7XG5cdFx0XHRcdFx0Ym9keS5zcGxpY2UoaS0tLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0eyBwcmVQcm9jKG5vZGUyLCB2bmV3LCBpLCBudWxsKTsgfVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR7IHByZVByb2Mobm9kZTIsIHZuZXcsIGksIG51bGwpOyB9XG5cdFx0fVxuXHR9XG59XG5cbnZhciB1bml0bGVzc1Byb3BzID0ge1xuXHRhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcblx0Ym94RmxleDogdHJ1ZSxcblx0Ym94RmxleEdyb3VwOiB0cnVlLFxuXHRib3hPcmRpbmFsR3JvdXA6IHRydWUsXG5cdGNvbHVtbkNvdW50OiB0cnVlLFxuXHRmbGV4OiB0cnVlLFxuXHRmbGV4R3JvdzogdHJ1ZSxcblx0ZmxleFBvc2l0aXZlOiB0cnVlLFxuXHRmbGV4U2hyaW5rOiB0cnVlLFxuXHRmbGV4TmVnYXRpdmU6IHRydWUsXG5cdGZsZXhPcmRlcjogdHJ1ZSxcblx0Z3JpZFJvdzogdHJ1ZSxcblx0Z3JpZENvbHVtbjogdHJ1ZSxcblx0b3JkZXI6IHRydWUsXG5cdGxpbmVDbGFtcDogdHJ1ZSxcblxuXHRib3JkZXJJbWFnZU91dHNldDogdHJ1ZSxcblx0Ym9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcblx0Ym9yZGVySW1hZ2VXaWR0aDogdHJ1ZSxcblx0Zm9udFdlaWdodDogdHJ1ZSxcblx0bGluZUhlaWdodDogdHJ1ZSxcblx0b3BhY2l0eTogdHJ1ZSxcblx0b3JwaGFuczogdHJ1ZSxcblx0dGFiU2l6ZTogdHJ1ZSxcblx0d2lkb3dzOiB0cnVlLFxuXHR6SW5kZXg6IHRydWUsXG5cdHpvb206IHRydWUsXG5cblx0ZmlsbE9wYWNpdHk6IHRydWUsXG5cdGZsb29kT3BhY2l0eTogdHJ1ZSxcblx0c3RvcE9wYWNpdHk6IHRydWUsXG5cdHN0cm9rZURhc2hhcnJheTogdHJ1ZSxcblx0c3Ryb2tlRGFzaG9mZnNldDogdHJ1ZSxcblx0c3Ryb2tlTWl0ZXJsaW1pdDogdHJ1ZSxcblx0c3Ryb2tlT3BhY2l0eTogdHJ1ZSxcblx0c3Ryb2tlV2lkdGg6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGF1dG9QeChuYW1lLCB2YWwpIHtcblx0e1xuXHRcdC8vIHR5cGVvZiB2YWwgPT09ICdudW1iZXInIGlzIGZhc3RlciBidXQgZmFpbHMgZm9yIG51bWVyaWMgc3RyaW5nc1xuXHRcdHJldHVybiAhaXNOYU4odmFsKSAmJiAhdW5pdGxlc3NQcm9wc1tuYW1lXSA/ICh2YWwgKyBcInB4XCIpIDogdmFsO1xuXHR9XG59XG5cbi8vIGFzc3VtZXMgaWYgc3R5bGVzIGV4aXN0IGJvdGggYXJlIG9iamVjdHMgb3IgYm90aCBhcmUgc3RyaW5nc1xuZnVuY3Rpb24gcGF0Y2hTdHlsZShuLCBvKSB7XG5cdHZhciBucyA9ICAgICAobi5hdHRycyB8fCBlbXB0eU9iaikuc3R5bGU7XG5cdHZhciBvcyA9IG8gPyAoby5hdHRycyB8fCBlbXB0eU9iaikuc3R5bGUgOiBudWxsO1xuXG5cdC8vIHJlcGxhY2Ugb3IgcmVtb3ZlIGluIGZ1bGxcblx0aWYgKG5zID09IG51bGwgfHwgaXNWYWwobnMpKVxuXHRcdHsgbi5lbC5zdHlsZS5jc3NUZXh0ID0gbnM7IH1cblx0ZWxzZSB7XG5cdFx0Zm9yICh2YXIgbm4gaW4gbnMpIHtcblx0XHRcdHZhciBudiA9IG5zW25uXTtcblxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoaXNTdHJlYW0obnYpKVxuXHRcdFx0XHRcdHsgbnYgPSBob29rU3RyZWFtKG52LCBnZXRWbShuKSk7IH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG9zID09IG51bGwgfHwgbnYgIT0gbnVsbCAmJiBudiAhPT0gb3Nbbm5dKVxuXHRcdFx0XHR7IG4uZWwuc3R5bGVbbm5dID0gYXV0b1B4KG5uLCBudik7IH1cblx0XHR9XG5cblx0XHQvLyBjbGVhbiBvbGRcblx0XHRpZiAob3MpIHtcblx0XHRcdGZvciAodmFyIG9uIGluIG9zKSB7XG5cdFx0XHRcdGlmIChuc1tvbl0gPT0gbnVsbClcblx0XHRcdFx0XHR7IG4uZWwuc3R5bGVbb25dID0gXCJcIjsgfVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG52YXIgZGlkUXVldWUgPSBbXTtcblxuZnVuY3Rpb24gZmlyZUhvb2soaG9va3MsIG5hbWUsIG8sIG4sIGltbWVkaWF0ZSkge1xuXHRpZiAoaG9va3MgIT0gbnVsbCkge1xuXHRcdHZhciBmbiA9IG8uaG9va3NbbmFtZV07XG5cblx0XHRpZiAoZm4pIHtcblx0XHRcdGlmIChuYW1lWzBdID09PSBcImRcIiAmJiBuYW1lWzFdID09PSBcImlcIiAmJiBuYW1lWzJdID09PSBcImRcIikge1x0Ly8gZGlkKlxuXHRcdFx0XHQvL1x0Y29uc29sZS5sb2cobmFtZSArIFwiIHNob3VsZCBxdWV1ZSB0aWxsIHJlcGFpbnRcIiwgbywgbik7XG5cdFx0XHRcdGltbWVkaWF0ZSA/IHJlcGFpbnQoby5wYXJlbnQpICYmIGZuKG8sIG4pIDogZGlkUXVldWUucHVzaChbZm4sIG8sIG5dKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1x0XHQvLyB3aWxsKlxuXHRcdFx0XHQvL1x0Y29uc29sZS5sb2cobmFtZSArIFwiIG1heSBkZWxheSBieSBwcm9taXNlXCIsIG8sIG4pO1xuXHRcdFx0XHRyZXR1cm4gZm4obywgbik7XHRcdC8vIG9yIHBhc3MgIGRvbmUoKSByZXNvbHZlclxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkcmFpbkRpZEhvb2tzKHZtKSB7XG5cdGlmIChkaWRRdWV1ZS5sZW5ndGgpIHtcblx0XHRyZXBhaW50KHZtLm5vZGUpO1xuXG5cdFx0dmFyIGl0ZW07XG5cdFx0d2hpbGUgKGl0ZW0gPSBkaWRRdWV1ZS5zaGlmdCgpKVxuXHRcdFx0eyBpdGVtWzBdKGl0ZW1bMV0sIGl0ZW1bMl0pOyB9XG5cdH1cbn1cblxudmFyIGRvYyA9IEVOVl9ET00gPyBkb2N1bWVudCA6IG51bGw7XG5cbmZ1bmN0aW9uIGNsb3Nlc3RWTm9kZShlbCkge1xuXHR3aGlsZSAoZWwuX25vZGUgPT0gbnVsbClcblx0XHR7IGVsID0gZWwucGFyZW50Tm9kZTsgfVxuXHRyZXR1cm4gZWwuX25vZGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBucykge1xuXHRpZiAobnMgIT0gbnVsbClcblx0XHR7IHJldHVybiBkb2MuY3JlYXRlRWxlbWVudE5TKG5zLCB0YWcpOyB9XG5cdHJldHVybiBkb2MuY3JlYXRlRWxlbWVudCh0YWcpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZShib2R5KSB7XG5cdHJldHVybiBkb2MuY3JlYXRlVGV4dE5vZGUoYm9keSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQoYm9keSkge1xuXHRyZXR1cm4gZG9jLmNyZWF0ZUNvbW1lbnQoYm9keSk7XG59XG5cbi8vID8gcmVtb3ZlcyBpZiAhcmVjeWNsZWRcbmZ1bmN0aW9uIG5leHRTaWIoc2liKSB7XG5cdHJldHVybiBzaWIubmV4dFNpYmxpbmc7XG59XG5cbi8vID8gcmVtb3ZlcyBpZiAhcmVjeWNsZWRcbmZ1bmN0aW9uIHByZXZTaWIoc2liKSB7XG5cdHJldHVybiBzaWIucHJldmlvdXNTaWJsaW5nO1xufVxuXG4vLyBUT0RPOiB0aGlzIHNob3VsZCBjb2xsZWN0IGFsbCBkZWVwIHByb21zIGZyb20gYWxsIGhvb2tzIGFuZCByZXR1cm4gUHJvbWlzZS5hbGwoKVxuZnVuY3Rpb24gZGVlcE5vdGlmeVJlbW92ZShub2RlKSB7XG5cdHZhciB2bSA9IG5vZGUudm07XG5cblx0dmFyIHd1UmVzID0gdm0gIT0gbnVsbCAmJiBmaXJlSG9vayh2bS5ob29rcywgXCJ3aWxsVW5tb3VudFwiLCB2bSwgdm0uZGF0YSk7XG5cblx0dmFyIHdyUmVzID0gZmlyZUhvb2sobm9kZS5ob29rcywgXCJ3aWxsUmVtb3ZlXCIsIG5vZGUpO1xuXG5cdGlmICgobm9kZS5mbGFncyAmIERFRVBfUkVNT1ZFKSA9PT0gREVFUF9SRU1PVkUgJiYgaXNBcnIobm9kZS5ib2R5KSkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5ib2R5Lmxlbmd0aDsgaSsrKVxuXHRcdFx0eyBkZWVwTm90aWZ5UmVtb3ZlKG5vZGUuYm9keVtpXSk7IH1cblx0fVxuXG5cdHJldHVybiB3dVJlcyB8fCB3clJlcztcbn1cblxuZnVuY3Rpb24gX3JlbW92ZUNoaWxkKHBhckVsLCBlbCwgaW1tZWRpYXRlKSB7XG5cdHZhciBub2RlID0gZWwuX25vZGUsIHZtID0gbm9kZS52bTtcblxuXHRpZiAoaXNBcnIobm9kZS5ib2R5KSkge1xuXHRcdGlmICgobm9kZS5mbGFncyAmIERFRVBfUkVNT1ZFKSA9PT0gREVFUF9SRU1PVkUpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5ib2R5Lmxlbmd0aDsgaSsrKVxuXHRcdFx0XHR7IF9yZW1vdmVDaGlsZChlbCwgbm9kZS5ib2R5W2ldLmVsKTsgfVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0XHR7IGRlZXBVbnJlZihub2RlKTsgfVxuXHR9XG5cblx0ZGVsZXRlIGVsLl9ub2RlO1xuXG5cdHBhckVsLnJlbW92ZUNoaWxkKGVsKTtcblxuXHRmaXJlSG9vayhub2RlLmhvb2tzLCBcImRpZFJlbW92ZVwiLCBub2RlLCBudWxsLCBpbW1lZGlhdGUpO1xuXG5cdGlmICh2bSAhPSBudWxsKSB7XG5cdFx0ZmlyZUhvb2sodm0uaG9va3MsIFwiZGlkVW5tb3VudFwiLCB2bSwgdm0uZGF0YSwgaW1tZWRpYXRlKTtcblx0XHR2bS5ub2RlID0gbnVsbDtcblx0fVxufVxuXG4vLyB0b2RvOiBzaG91bGQgZGVsYXkgcGFyZW50IHVubW91bnQoKSBieSByZXR1cm5pbmcgcmVzIHByb20/XG5mdW5jdGlvbiByZW1vdmVDaGlsZChwYXJFbCwgZWwpIHtcblx0dmFyIG5vZGUgPSBlbC5fbm9kZTtcblxuXHQvLyBhbHJlYWR5IG1hcmtlZCBmb3IgcmVtb3ZhbFxuXHRpZiAobm9kZS5fZGVhZCkgeyByZXR1cm47IH1cblxuXHR2YXIgcmVzID0gZGVlcE5vdGlmeVJlbW92ZShub2RlKTtcblxuXHRpZiAocmVzICE9IG51bGwgJiYgaXNQcm9tKHJlcykpIHtcblx0XHRub2RlLl9kZWFkID0gdHJ1ZTtcblx0XHRyZXMudGhlbihjdXJyeShfcmVtb3ZlQ2hpbGQsIFtwYXJFbCwgZWwsIHRydWVdKSk7XG5cdH1cblx0ZWxzZVxuXHRcdHsgX3JlbW92ZUNoaWxkKHBhckVsLCBlbCk7IH1cbn1cblxuZnVuY3Rpb24gZGVlcFVucmVmKG5vZGUpIHtcblx0dmFyIG9ib2R5ID0gbm9kZS5ib2R5O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgb2JvZHkubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgbzIgPSBvYm9keVtpXTtcblx0XHRkZWxldGUgbzIuZWwuX25vZGU7XG5cblx0XHRpZiAobzIudm0gIT0gbnVsbClcblx0XHRcdHsgbzIudm0ubm9kZSA9IG51bGw7IH1cblxuXHRcdGlmIChpc0FycihvMi5ib2R5KSlcblx0XHRcdHsgZGVlcFVucmVmKG8yKTsgfVxuXHR9XG59XG5cbmZ1bmN0aW9uIGNsZWFyQ2hpbGRyZW4ocGFyZW50KSB7XG5cdHZhciBwYXJFbCA9IHBhcmVudC5lbDtcblxuXHRpZiAoKHBhcmVudC5mbGFncyAmIERFRVBfUkVNT1ZFKSA9PT0gMCkge1xuXHRcdGlzQXJyKHBhcmVudC5ib2R5KSAmJiBkZWVwVW5yZWYocGFyZW50KTtcblx0XHRwYXJFbC50ZXh0Q29udGVudCA9IG51bGw7XG5cdH1cblx0ZWxzZSB7XG5cdFx0dmFyIGVsID0gcGFyRWwuZmlyc3RDaGlsZDtcblxuXHRcdGRvIHtcblx0XHRcdHZhciBuZXh0ID0gbmV4dFNpYihlbCk7XG5cdFx0XHRyZW1vdmVDaGlsZChwYXJFbCwgZWwpO1xuXHRcdH0gd2hpbGUgKGVsID0gbmV4dCk7XG5cdH1cbn1cblxuLy8gdG9kbzogaG9va3NcbmZ1bmN0aW9uIGluc2VydEJlZm9yZShwYXJFbCwgZWwsIHJlZkVsKSB7XG5cdHZhciBub2RlID0gZWwuX25vZGUsIGluRG9tID0gZWwucGFyZW50Tm9kZSAhPSBudWxsO1xuXG5cdC8vIGVsID09PSByZWZFbCBpcyBhc3NlcnRlZCBhcyBhIG5vLW9wIGluc2VydCBjYWxsZWQgdG8gZmlyZSBob29rc1xuXHR2YXIgdm0gPSAoZWwgPT09IHJlZkVsIHx8ICFpbkRvbSkgPyBub2RlLnZtIDogbnVsbDtcblxuXHRpZiAodm0gIT0gbnVsbClcblx0XHR7IGZpcmVIb29rKHZtLmhvb2tzLCBcIndpbGxNb3VudFwiLCB2bSwgdm0uZGF0YSk7IH1cblxuXHRmaXJlSG9vayhub2RlLmhvb2tzLCBpbkRvbSA/IFwid2lsbFJlaW5zZXJ0XCIgOiBcIndpbGxJbnNlcnRcIiwgbm9kZSk7XG5cdHBhckVsLmluc2VydEJlZm9yZShlbCwgcmVmRWwpO1xuXHRmaXJlSG9vayhub2RlLmhvb2tzLCBpbkRvbSA/IFwiZGlkUmVpbnNlcnRcIiA6IFwiZGlkSW5zZXJ0XCIsIG5vZGUpO1xuXG5cdGlmICh2bSAhPSBudWxsKVxuXHRcdHsgZmlyZUhvb2sodm0uaG9va3MsIFwiZGlkTW91bnRcIiwgdm0sIHZtLmRhdGEpOyB9XG59XG5cbmZ1bmN0aW9uIGluc2VydEFmdGVyKHBhckVsLCBlbCwgcmVmRWwpIHtcblx0aW5zZXJ0QmVmb3JlKHBhckVsLCBlbCwgcmVmRWwgPyBuZXh0U2liKHJlZkVsKSA6IG51bGwpO1xufVxuXG52YXIgb25lbWl0ID0ge307XG5cbmZ1bmN0aW9uIGVtaXRDZmcoY2ZnKSB7XG5cdGFzc2lnbk9iaihvbmVtaXQsIGNmZyk7XG59XG5cbmZ1bmN0aW9uIGVtaXQoZXZOYW1lKSB7XG5cdHZhciB0YXJnID0gdGhpcyxcblx0XHRzcmMgPSB0YXJnO1xuXG5cdHZhciBhcmdzID0gc2xpY2VBcmdzKGFyZ3VtZW50cywgMSkuY29uY2F0KHNyYywgc3JjLmRhdGEpO1xuXG5cdGRvIHtcblx0XHR2YXIgZXZzID0gdGFyZy5vbmVtaXQ7XG5cdFx0dmFyIGZuID0gZXZzID8gZXZzW2V2TmFtZV0gOiBudWxsO1xuXG5cdFx0aWYgKGZuKSB7XG5cdFx0XHRmbi5hcHBseSh0YXJnLCBhcmdzKTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSB3aGlsZSAodGFyZyA9IHRhcmcucGFyZW50KCkpO1xuXG5cdGlmIChvbmVtaXRbZXZOYW1lXSlcblx0XHR7IG9uZW1pdFtldk5hbWVdLmFwcGx5KHRhcmcsIGFyZ3MpOyB9XG59XG5cbnZhciBvbmV2ZW50ID0gbm9vcDtcblxuZnVuY3Rpb24gY29uZmlnKG5ld0NmZykge1xuXHRvbmV2ZW50ID0gbmV3Q2ZnLm9uZXZlbnQgfHwgb25ldmVudDtcblxuXHR7XG5cdFx0aWYgKG5ld0NmZy5vbmVtaXQpXG5cdFx0XHR7IGVtaXRDZmcobmV3Q2ZnLm9uZW1pdCk7IH1cblx0fVxuXG5cdHtcblx0XHRpZiAobmV3Q2ZnLnN0cmVhbSlcblx0XHRcdHsgc3RyZWFtQ2ZnKG5ld0NmZy5zdHJlYW0pOyB9XG5cdH1cbn1cblxuZnVuY3Rpb24gYmluZEV2KGVsLCB0eXBlLCBmbikge1xuXHRlbFt0eXBlXSA9IGZuO1xufVxuXG5mdW5jdGlvbiBleGVjKGZuLCBhcmdzLCBlLCBub2RlLCB2bSkge1xuXHR2YXIgb3V0ID0gZm4uYXBwbHkodm0sIGFyZ3MuY29uY2F0KFtlLCBub2RlLCB2bSwgdm0uZGF0YV0pKTtcblxuXHQvLyBzaG91bGQgdGhlc2UgcmVzcGVjdCBvdXQgPT09IGZhbHNlP1xuXHR2bS5vbmV2ZW50KGUsIG5vZGUsIHZtLCB2bS5kYXRhLCBhcmdzKTtcblx0b25ldmVudC5jYWxsKG51bGwsIGUsIG5vZGUsIHZtLCB2bS5kYXRhLCBhcmdzKTtcblxuXHRpZiAob3V0ID09PSBmYWxzZSkge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZShlKSB7XG5cdHZhciBub2RlID0gY2xvc2VzdFZOb2RlKGUudGFyZ2V0KTtcblx0dmFyIHZtID0gZ2V0Vm0obm9kZSk7XG5cblx0dmFyIGV2RGVmID0gZS5jdXJyZW50VGFyZ2V0Ll9ub2RlLmF0dHJzW1wib25cIiArIGUudHlwZV0sIGZuLCBhcmdzO1xuXG5cdGlmIChpc0FycihldkRlZikpIHtcblx0XHRmbiA9IGV2RGVmWzBdO1xuXHRcdGFyZ3MgPSBldkRlZi5zbGljZSgxKTtcblx0XHRleGVjKGZuLCBhcmdzLCBlLCBub2RlLCB2bSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Zm9yICh2YXIgc2VsIGluIGV2RGVmKSB7XG5cdFx0XHRpZiAoZS50YXJnZXQubWF0Y2hlcyhzZWwpKSB7XG5cdFx0XHRcdHZhciBldkRlZjIgPSBldkRlZltzZWxdO1xuXG5cdFx0XHRcdGlmIChpc0FycihldkRlZjIpKSB7XG5cdFx0XHRcdFx0Zm4gPSBldkRlZjJbMF07XG5cdFx0XHRcdFx0YXJncyA9IGV2RGVmMi5zbGljZSgxKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRmbiA9IGV2RGVmMjtcblx0XHRcdFx0XHRhcmdzID0gW107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRleGVjKGZuLCBhcmdzLCBlLCBub2RlLCB2bSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHBhdGNoRXZlbnQobm9kZSwgbmFtZSwgbnZhbCwgb3ZhbCkge1xuXHRpZiAobnZhbCA9PT0gb3ZhbClcblx0XHR7IHJldHVybjsgfVxuXG5cdHtcblx0XHRpZiAoaXNGdW5jKG52YWwpICYmIGlzRnVuYyhvdmFsKSAmJiBvdmFsLm5hbWUgPT0gbnZhbC5uYW1lKVxuXHRcdFx0eyBkZXZOb3RpZnkoXCJJTkxJTkVfSEFORExFUlwiLCBbbm9kZSwgb3ZhbCwgbnZhbF0pOyB9XG5cblx0XHRpZiAob3ZhbCAhPSBudWxsICYmIG52YWwgIT0gbnVsbCAmJlxuXHRcdFx0KFxuXHRcdFx0XHRpc0FycihvdmFsKSAhPSBpc0FycihudmFsKSB8fFxuXHRcdFx0XHRpc1BsYWluT2JqKG92YWwpICE9IGlzUGxhaW5PYmoobnZhbCkgfHxcblx0XHRcdFx0aXNGdW5jKG92YWwpICE9IGlzRnVuYyhudmFsKVxuXHRcdFx0KVxuXHRcdCkgeyBkZXZOb3RpZnkoXCJNSVNNQVRDSEVEX0hBTkRMRVJcIiwgW25vZGUsIG92YWwsIG52YWxdKTsgfVxuXHR9XG5cblx0dmFyIGVsID0gbm9kZS5lbDtcblxuXHRpZiAobnZhbCA9PSBudWxsIHx8IGlzRnVuYyhudmFsKSlcblx0XHR7IGJpbmRFdihlbCwgbmFtZSwgbnZhbCk7IH1cblx0ZWxzZSBpZiAob3ZhbCA9PSBudWxsKVxuXHRcdHsgYmluZEV2KGVsLCBuYW1lLCBoYW5kbGUpOyB9XG59XG5cbmZ1bmN0aW9uIHJlbUF0dHIobm9kZSwgbmFtZSwgYXNQcm9wKSB7XG5cdGlmIChuYW1lWzBdID09PSBcIi5cIikge1xuXHRcdG5hbWUgPSBuYW1lLnN1YnN0cigxKTtcblx0XHRhc1Byb3AgPSB0cnVlO1xuXHR9XG5cblx0aWYgKGFzUHJvcClcblx0XHR7IG5vZGUuZWxbbmFtZV0gPSBcIlwiOyB9XG5cdGVsc2Vcblx0XHR7IG5vZGUuZWwucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyB9XG59XG5cbi8vIHNldEF0dHJcbi8vIGRpZmYsIFwiLlwiLCBcIm9uKlwiLCBib29sIHZhbHMsIHNraXAgXyosIHZhbHVlL2NoZWNrZWQvc2VsZWN0ZWQgc2VsZWN0ZWRJbmRleFxuZnVuY3Rpb24gc2V0QXR0cihub2RlLCBuYW1lLCB2YWwsIGFzUHJvcCwgaW5pdGlhbCkge1xuXHR2YXIgZWwgPSBub2RlLmVsO1xuXG5cdGlmICh2YWwgPT0gbnVsbClcblx0XHR7ICFpbml0aWFsICYmIHJlbUF0dHIobm9kZSwgbmFtZSwgZmFsc2UpOyB9XHRcdC8vIHdpbGwgYWxzbyByZW1vdmVBdHRyIG9mIHN0eWxlOiBudWxsXG5cdGVsc2UgaWYgKG5vZGUubnMgIT0gbnVsbClcblx0XHR7IGVsLnNldEF0dHJpYnV0ZShuYW1lLCB2YWwpOyB9XG5cdGVsc2UgaWYgKG5hbWUgPT09IFwiY2xhc3NcIilcblx0XHR7IGVsLmNsYXNzTmFtZSA9IHZhbDsgfVxuXHRlbHNlIGlmIChuYW1lID09PSBcImlkXCIgfHwgdHlwZW9mIHZhbCA9PT0gXCJib29sZWFuXCIgfHwgYXNQcm9wKVxuXHRcdHsgZWxbbmFtZV0gPSB2YWw7IH1cblx0ZWxzZSBpZiAobmFtZVswXSA9PT0gXCIuXCIpXG5cdFx0eyBlbFtuYW1lLnN1YnN0cigxKV0gPSB2YWw7IH1cblx0ZWxzZVxuXHRcdHsgZWwuc2V0QXR0cmlidXRlKG5hbWUsIHZhbCk7IH1cbn1cblxuZnVuY3Rpb24gcGF0Y2hBdHRycyh2bm9kZSwgZG9ub3IsIGluaXRpYWwpIHtcblx0dmFyIG5hdHRycyA9IHZub2RlLmF0dHJzIHx8IGVtcHR5T2JqO1xuXHR2YXIgb2F0dHJzID0gZG9ub3IuYXR0cnMgfHwgZW1wdHlPYmo7XG5cblx0aWYgKG5hdHRycyA9PT0gb2F0dHJzKSB7XG5cdFx0eyBkZXZOb3RpZnkoXCJSRVVTRURfQVRUUlNcIiwgW3Zub2RlXSk7IH1cblx0fVxuXHRlbHNlIHtcblx0XHRmb3IgKHZhciBrZXkgaW4gbmF0dHJzKSB7XG5cdFx0XHR2YXIgbnZhbCA9IG5hdHRyc1trZXldO1xuXHRcdFx0dmFyIGlzRHluID0gaXNEeW5Qcm9wKHZub2RlLnRhZywga2V5KTtcblx0XHRcdHZhciBvdmFsID0gaXNEeW4gPyB2bm9kZS5lbFtrZXldIDogb2F0dHJzW2tleV07XG5cblx0XHRcdHtcblx0XHRcdFx0aWYgKGlzU3RyZWFtKG52YWwpKVxuXHRcdFx0XHRcdHsgbmF0dHJzW2tleV0gPSBudmFsID0gaG9va1N0cmVhbShudmFsLCBnZXRWbSh2bm9kZSkpOyB9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChudmFsID09PSBvdmFsKSB7fVxuXHRcdFx0ZWxzZSBpZiAoaXNTdHlsZVByb3Aoa2V5KSlcblx0XHRcdFx0eyBwYXRjaFN0eWxlKHZub2RlLCBkb25vcik7IH1cblx0XHRcdGVsc2UgaWYgKGlzU3BsUHJvcChrZXkpKSB7fVxuXHRcdFx0ZWxzZSBpZiAoaXNFdlByb3Aoa2V5KSlcblx0XHRcdFx0eyBwYXRjaEV2ZW50KHZub2RlLCBrZXksIG52YWwsIG92YWwpOyB9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHsgc2V0QXR0cih2bm9kZSwga2V5LCBudmFsLCBpc0R5biwgaW5pdGlhbCk7IH1cblx0XHR9XG5cblx0XHQvLyBUT0RPOiBiZW5jaCBzdHlsZS5jc3NUZXh0ID0gXCJcIiB2cyByZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKVxuXHRcdGZvciAodmFyIGtleSBpbiBvYXR0cnMpIHtcblx0XHRcdCEoa2V5IGluIG5hdHRycykgJiZcblx0XHRcdCFpc1NwbFByb3Aoa2V5KSAmJlxuXHRcdFx0cmVtQXR0cih2bm9kZSwga2V5LCBpc0R5blByb3Aodm5vZGUudGFnLCBrZXkpIHx8IGlzRXZQcm9wKGtleSkpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVWaWV3KHZpZXcsIGRhdGEsIGtleSwgb3B0cykge1xuXHRpZiAodmlldy50eXBlID09PSBWVklFVykge1xuXHRcdGRhdGFcdD0gdmlldy5kYXRhO1xuXHRcdGtleVx0XHQ9IHZpZXcua2V5O1xuXHRcdG9wdHNcdD0gdmlldy5vcHRzO1xuXHRcdHZpZXdcdD0gdmlldy52aWV3O1xuXHR9XG5cblx0cmV0dXJuIG5ldyBWaWV3TW9kZWwodmlldywgZGF0YSwga2V5LCBvcHRzKTtcbn1cblxuLy9pbXBvcnQgeyBYTUxfTlMsIFhMSU5LX05TIH0gZnJvbSAnLi9kZWZpbmVTdmdFbGVtZW50JztcbmZ1bmN0aW9uIGh5ZHJhdGVCb2R5KHZub2RlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGUuYm9keS5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB2bm9kZTIgPSB2bm9kZS5ib2R5W2ldO1xuXHRcdHZhciB0eXBlMiA9IHZub2RlMi50eXBlO1xuXG5cdFx0Ly8gRUxFTUVOVCxURVhULENPTU1FTlRcblx0XHRpZiAodHlwZTIgPD0gQ09NTUVOVClcblx0XHRcdHsgaW5zZXJ0QmVmb3JlKHZub2RlLmVsLCBoeWRyYXRlKHZub2RlMikpOyB9XHRcdC8vIHZub2RlLmVsLmFwcGVuZENoaWxkKGh5ZHJhdGUodm5vZGUyKSlcblx0XHRlbHNlIGlmICh0eXBlMiA9PT0gVlZJRVcpIHtcblx0XHRcdHZhciB2bSA9IGNyZWF0ZVZpZXcodm5vZGUyLnZpZXcsIHZub2RlMi5kYXRhLCB2bm9kZTIua2V5LCB2bm9kZTIub3B0cykuX3JlZHJhdyh2bm9kZSwgaSwgZmFsc2UpO1x0XHQvLyB0b2RvOiBoYW5kbGUgbmV3IGRhdGEgdXBkYXRlc1xuXHRcdFx0dHlwZTIgPSB2bS5ub2RlLnR5cGU7XG5cdFx0XHRpbnNlcnRCZWZvcmUodm5vZGUuZWwsIGh5ZHJhdGUodm0ubm9kZSkpO1xuXHRcdH1cblx0XHRlbHNlIGlmICh0eXBlMiA9PT0gVk1PREVMKSB7XG5cdFx0XHR2YXIgdm0gPSB2bm9kZTIudm07XG5cdFx0XHR2bS5fcmVkcmF3KHZub2RlLCBpKTtcdFx0XHRcdFx0Ly8gLCBmYWxzZVxuXHRcdFx0dHlwZTIgPSB2bS5ub2RlLnR5cGU7XG5cdFx0XHRpbnNlcnRCZWZvcmUodm5vZGUuZWwsIHZtLm5vZGUuZWwpO1x0XHQvLyAsIGh5ZHJhdGUodm0ubm9kZSlcblx0XHR9XG5cdH1cbn1cblxuLy8gIFRPRE86IERSWSB0aGlzIG91dC4gcmV1c2luZyBub3JtYWwgcGF0Y2ggaGVyZSBuZWdhdGl2ZWx5IGFmZmVjdHMgVjgncyBKSVRcbmZ1bmN0aW9uIGh5ZHJhdGUodm5vZGUsIHdpdGhFbCkge1xuXHRpZiAodm5vZGUuZWwgPT0gbnVsbCkge1xuXHRcdGlmICh2bm9kZS50eXBlID09PSBFTEVNRU5UKSB7XG5cdFx0XHR2bm9kZS5lbCA9IHdpdGhFbCB8fCBjcmVhdGVFbGVtZW50KHZub2RlLnRhZywgdm5vZGUubnMpO1xuXG5cdFx0Ly9cdGlmICh2bm9kZS50YWcgPT09IFwic3ZnXCIpXG5cdFx0Ly9cdFx0dm5vZGUuZWwuc2V0QXR0cmlidXRlTlMoWE1MX05TLCAneG1sbnM6eGxpbmsnLCBYTElOS19OUyk7XG5cblx0XHRcdGlmICh2bm9kZS5hdHRycyAhPSBudWxsKVxuXHRcdFx0XHR7IHBhdGNoQXR0cnModm5vZGUsIGVtcHR5T2JqLCB0cnVlKTsgfVxuXG5cdFx0XHRpZiAoKHZub2RlLmZsYWdzICYgTEFaWV9MSVNUKSA9PT0gTEFaWV9MSVNUKVx0Ly8gdm5vZGUuYm9keSBpbnN0YW5jZW9mIExhenlMaXN0XG5cdFx0XHRcdHsgdm5vZGUuYm9keS5ib2R5KHZub2RlKTsgfVxuXG5cdFx0XHRpZiAoaXNBcnIodm5vZGUuYm9keSkpXG5cdFx0XHRcdHsgaHlkcmF0ZUJvZHkodm5vZGUpOyB9XG5cdFx0XHRlbHNlIGlmICh2bm9kZS5ib2R5ICE9IG51bGwgJiYgdm5vZGUuYm9keSAhPT0gXCJcIilcblx0XHRcdFx0eyB2bm9kZS5lbC50ZXh0Q29udGVudCA9IHZub2RlLmJvZHk7IH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAodm5vZGUudHlwZSA9PT0gVEVYVClcblx0XHRcdHsgdm5vZGUuZWwgPSB3aXRoRWwgfHwgY3JlYXRlVGV4dE5vZGUodm5vZGUuYm9keSk7IH1cblx0XHRlbHNlIGlmICh2bm9kZS50eXBlID09PSBDT01NRU5UKVxuXHRcdFx0eyB2bm9kZS5lbCA9IHdpdGhFbCB8fCBjcmVhdGVDb21tZW50KHZub2RlLmJvZHkpOyB9XG5cdH1cblxuXHR2bm9kZS5lbC5fbm9kZSA9IHZub2RlO1xuXG5cdHJldHVybiB2bm9kZS5lbDtcbn1cblxuLy8gcHJldmVudCBHQ0MgZnJvbSBpbmxpbmluZyBzb21lIGxhcmdlIGZ1bmNzICh3aGljaCBuZWdhdGl2ZWx5IGFmZmVjdHMgQ2hyb21lJ3MgSklUKVxuLy93aW5kb3cuc3luY0NoaWxkcmVuID0gc3luY0NoaWxkcmVuO1xud2luZG93Lmxpc01vdmUgPSBsaXNNb3ZlO1xuXG5mdW5jdGlvbiBuZXh0Tm9kZShub2RlLCBib2R5KSB7XG5cdHJldHVybiBib2R5W25vZGUuaWR4ICsgMV07XG59XG5cbmZ1bmN0aW9uIHByZXZOb2RlKG5vZGUsIGJvZHkpIHtcblx0cmV0dXJuIGJvZHlbbm9kZS5pZHggLSAxXTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZShub2RlKSB7XG5cdHJldHVybiBub2RlLnBhcmVudDtcbn1cblxudmFyIEJSRUFLID0gMTtcbnZhciBCUkVBS19BTEwgPSAyO1xuXG5mdW5jdGlvbiBzeW5jRGlyKGFkdlNpYiwgYWR2Tm9kZSwgaW5zZXJ0LCBzaWJOYW1lLCBub2RlTmFtZSwgaW52U2liTmFtZSwgaW52Tm9kZU5hbWUsIGludkluc2VydCkge1xuXHRyZXR1cm4gZnVuY3Rpb24obm9kZSwgcGFyRWwsIGJvZHksIHN0YXRlLCBjb252VGVzdCwgbGlzKSB7XG5cdFx0dmFyIHNpYk5vZGUsIHRtcFNpYjtcblxuXHRcdGlmIChzdGF0ZVtzaWJOYW1lXSAhPSBudWxsKSB7XG5cdFx0XHQvLyBza2lwIGRvbSBlbGVtZW50cyBub3QgY3JlYXRlZCBieSBkb212bVxuXHRcdFx0aWYgKChzaWJOb2RlID0gc3RhdGVbc2liTmFtZV0uX25vZGUpID09IG51bGwpIHtcblx0XHRcdFx0eyBkZXZOb3RpZnkoXCJGT1JFSUdOX0VMRU1FTlRcIiwgW3N0YXRlW3NpYk5hbWVdXSk7IH1cblxuXHRcdFx0XHRzdGF0ZVtzaWJOYW1lXSA9IGFkdlNpYihzdGF0ZVtzaWJOYW1lXSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHBhcmVudE5vZGUoc2liTm9kZSkgIT09IG5vZGUpIHtcblx0XHRcdFx0dG1wU2liID0gYWR2U2liKHN0YXRlW3NpYk5hbWVdKTtcblx0XHRcdFx0c2liTm9kZS52bSAhPSBudWxsID8gc2liTm9kZS52bS51bm1vdW50KHRydWUpIDogcmVtb3ZlQ2hpbGQocGFyRWwsIHN0YXRlW3NpYk5hbWVdKTtcblx0XHRcdFx0c3RhdGVbc2liTmFtZV0gPSB0bXBTaWI7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoc3RhdGVbbm9kZU5hbWVdID09IGNvbnZUZXN0KVxuXHRcdFx0eyByZXR1cm4gQlJFQUtfQUxMOyB9XG5cdFx0ZWxzZSBpZiAoc3RhdGVbbm9kZU5hbWVdLmVsID09IG51bGwpIHtcblx0XHRcdGluc2VydChwYXJFbCwgaHlkcmF0ZShzdGF0ZVtub2RlTmFtZV0pLCBzdGF0ZVtzaWJOYW1lXSk7XHQvLyBzaG91bGQgbGlzIGJlIHVwZGF0ZWQgaGVyZT9cblx0XHRcdHN0YXRlW25vZGVOYW1lXSA9IGFkdk5vZGUoc3RhdGVbbm9kZU5hbWVdLCBib2R5KTtcdFx0Ly8gYWxzbyBuZWVkIHRvIGFkdmFuY2Ugc2liP1xuXHRcdH1cblx0XHRlbHNlIGlmIChzdGF0ZVtub2RlTmFtZV0uZWwgPT09IHN0YXRlW3NpYk5hbWVdKSB7XG5cdFx0XHRzdGF0ZVtub2RlTmFtZV0gPSBhZHZOb2RlKHN0YXRlW25vZGVOYW1lXSwgYm9keSk7XG5cdFx0XHRzdGF0ZVtzaWJOYW1lXSA9IGFkdlNpYihzdGF0ZVtzaWJOYW1lXSk7XG5cdFx0fVxuXHRcdC8vIGhlYWQtPnRhaWwgb3IgdGFpbC0+aGVhZFxuXHRcdGVsc2UgaWYgKCFsaXMgJiYgc2liTm9kZSA9PT0gc3RhdGVbaW52Tm9kZU5hbWVdKSB7XG5cdFx0XHR0bXBTaWIgPSBzdGF0ZVtzaWJOYW1lXTtcblx0XHRcdHN0YXRlW3NpYk5hbWVdID0gYWR2U2liKHRtcFNpYik7XG5cdFx0XHRpbnZJbnNlcnQocGFyRWwsIHRtcFNpYiwgc3RhdGVbaW52U2liTmFtZV0pO1xuXHRcdFx0c3RhdGVbaW52U2liTmFtZV0gPSB0bXBTaWI7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0e1xuXHRcdFx0XHRpZiAoc3RhdGVbbm9kZU5hbWVdLnZtICE9IG51bGwpXG5cdFx0XHRcdFx0eyBkZXZOb3RpZnkoXCJBTFJFQURZX0hZRFJBVEVEXCIsIFtzdGF0ZVtub2RlTmFtZV0udm1dKTsgfVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAobGlzICYmIHN0YXRlW3NpYk5hbWVdICE9IG51bGwpXG5cdFx0XHRcdHsgcmV0dXJuIGxpc01vdmUoYWR2U2liLCBhZHZOb2RlLCBpbnNlcnQsIHNpYk5hbWUsIG5vZGVOYW1lLCBwYXJFbCwgYm9keSwgc2liTm9kZSwgc3RhdGUpOyB9XG5cblx0XHRcdHJldHVybiBCUkVBSztcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIGxpc01vdmUoYWR2U2liLCBhZHZOb2RlLCBpbnNlcnQsIHNpYk5hbWUsIG5vZGVOYW1lLCBwYXJFbCwgYm9keSwgc2liTm9kZSwgc3RhdGUpIHtcblx0aWYgKHNpYk5vZGUuX2xpcykge1xuXHRcdGluc2VydChwYXJFbCwgc3RhdGVbbm9kZU5hbWVdLmVsLCBzdGF0ZVtzaWJOYW1lXSk7XG5cdFx0c3RhdGVbbm9kZU5hbWVdID0gYWR2Tm9kZShzdGF0ZVtub2RlTmFtZV0sIGJvZHkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIGZpbmQgY2xvc2VzdCB0b21iXG5cdFx0dmFyIHQgPSBiaW5hcnlGaW5kTGFyZ2VyKHNpYk5vZGUuaWR4LCBzdGF0ZS50b21icyk7XG5cdFx0c2liTm9kZS5fbGlzID0gdHJ1ZTtcblx0XHR2YXIgdG1wU2liID0gYWR2U2liKHN0YXRlW3NpYk5hbWVdKTtcblx0XHRpbnNlcnQocGFyRWwsIHN0YXRlW3NpYk5hbWVdLCB0ICE9IG51bGwgPyBib2R5W3N0YXRlLnRvbWJzW3RdXS5lbCA6IHQpO1xuXG5cdFx0aWYgKHQgPT0gbnVsbClcblx0XHRcdHsgc3RhdGUudG9tYnMucHVzaChzaWJOb2RlLmlkeCk7IH1cblx0XHRlbHNlXG5cdFx0XHR7IHN0YXRlLnRvbWJzLnNwbGljZSh0LCAwLCBzaWJOb2RlLmlkeCk7IH1cblxuXHRcdHN0YXRlW3NpYk5hbWVdID0gdG1wU2liO1xuXHR9XG59XG5cbnZhciBzeW5jTGZ0ID0gc3luY0RpcihuZXh0U2liLCBuZXh0Tm9kZSwgaW5zZXJ0QmVmb3JlLCBcImxmdFNpYlwiLCBcImxmdE5vZGVcIiwgXCJyZ3RTaWJcIiwgXCJyZ3ROb2RlXCIsIGluc2VydEFmdGVyKTtcbnZhciBzeW5jUmd0ID0gc3luY0RpcihwcmV2U2liLCBwcmV2Tm9kZSwgaW5zZXJ0QWZ0ZXIsIFwicmd0U2liXCIsIFwicmd0Tm9kZVwiLCBcImxmdFNpYlwiLCBcImxmdE5vZGVcIiwgaW5zZXJ0QmVmb3JlKTtcblxuZnVuY3Rpb24gc3luY0NoaWxkcmVuKG5vZGUsIGRvbm9yKSB7XG5cdHZhciBvYm9keVx0PSBkb25vci5ib2R5LFxuXHRcdHBhckVsXHQ9IG5vZGUuZWwsXG5cdFx0Ym9keVx0PSBub2RlLmJvZHksXG5cdFx0c3RhdGUgPSB7XG5cdFx0XHRsZnROb2RlOlx0Ym9keVswXSxcblx0XHRcdHJndE5vZGU6XHRib2R5W2JvZHkubGVuZ3RoIC0gMV0sXG5cdFx0XHRsZnRTaWI6XHRcdCgob2JvZHkpWzBdIHx8IGVtcHR5T2JqKS5lbCxcblx0XHRcdHJndFNpYjpcdFx0KG9ib2R5W29ib2R5Lmxlbmd0aCAtIDFdIHx8IGVtcHR5T2JqKS5lbCxcblx0XHR9O1xuXG5cdGNvbnZlcmdlOlxuXHR3aGlsZSAoMSkge1xuLy9cdFx0ZnJvbV9sZWZ0OlxuXHRcdHdoaWxlICgxKSB7XG5cdFx0XHR2YXIgbCA9IHN5bmNMZnQobm9kZSwgcGFyRWwsIGJvZHksIHN0YXRlLCBudWxsLCBmYWxzZSk7XG5cdFx0XHRpZiAobCA9PT0gQlJFQUspIHsgYnJlYWs7IH1cblx0XHRcdGlmIChsID09PSBCUkVBS19BTEwpIHsgYnJlYWsgY29udmVyZ2U7IH1cblx0XHR9XG5cbi8vXHRcdGZyb21fcmlnaHQ6XG5cdFx0d2hpbGUgKDEpIHtcblx0XHRcdHZhciByID0gc3luY1JndChub2RlLCBwYXJFbCwgYm9keSwgc3RhdGUsIHN0YXRlLmxmdE5vZGUsIGZhbHNlKTtcblx0XHRcdGlmIChyID09PSBCUkVBSykgeyBicmVhazsgfVxuXHRcdFx0aWYgKHIgPT09IEJSRUFLX0FMTCkgeyBicmVhayBjb252ZXJnZTsgfVxuXHRcdH1cblxuXHRcdHNvcnRET00obm9kZSwgcGFyRWwsIGJvZHksIHN0YXRlKTtcblx0XHRicmVhaztcblx0fVxufVxuXG4vLyBUT0RPOiBhbHNvIHVzZSB0aGUgc3RhdGUucmd0U2liIGFuZCBzdGF0ZS5yZ3ROb2RlIGJvdW5kcywgcGx1cyByZWR1Y2UgTElTIHJhbmdlXG5mdW5jdGlvbiBzb3J0RE9NKG5vZGUsIHBhckVsLCBib2R5LCBzdGF0ZSkge1xuXHR2YXIga2lkcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHBhckVsLmNoaWxkTm9kZXMpO1xuXHR2YXIgZG9tSWR4cyA9IFtdO1xuXG5cdGZvciAodmFyIGsgPSAwOyBrIDwga2lkcy5sZW5ndGg7IGsrKykge1xuXHRcdHZhciBuID0ga2lkc1trXS5fbm9kZTtcblxuXHRcdGlmIChuLnBhcmVudCA9PT0gbm9kZSlcblx0XHRcdHsgZG9tSWR4cy5wdXNoKG4uaWR4KTsgfVxuXHR9XG5cblx0Ly8gbGlzdCBvZiBub24tbW92YWJsZSB2bm9kZSBpbmRpY2VzIChhbHJlYWR5IGluIGNvcnJlY3Qgb3JkZXIgaW4gb2xkIGRvbSlcblx0dmFyIHRvbWJzID0gbG9uZ2VzdEluY3JlYXNpbmdTdWJzZXF1ZW5jZShkb21JZHhzKS5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGRvbUlkeHNbaV07IH0pO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgdG9tYnMubGVuZ3RoOyBpKyspXG5cdFx0eyBib2R5W3RvbWJzW2ldXS5fbGlzID0gdHJ1ZTsgfVxuXG5cdHN0YXRlLnRvbWJzID0gdG9tYnM7XG5cblx0d2hpbGUgKDEpIHtcblx0XHR2YXIgciA9IHN5bmNMZnQobm9kZSwgcGFyRWwsIGJvZHksIHN0YXRlLCBudWxsLCB0cnVlKTtcblx0XHRpZiAociA9PT0gQlJFQUtfQUxMKSB7IGJyZWFrOyB9XG5cdH1cbn1cblxuZnVuY3Rpb24gYWxyZWFkeUFkb3B0ZWQodm5vZGUpIHtcblx0cmV0dXJuIHZub2RlLmVsLl9ub2RlLnBhcmVudCAhPT0gdm5vZGUucGFyZW50O1xufVxuXG5mdW5jdGlvbiB0YWtlU2VxSW5kZXgobiwgb2JvZHksIGZyb21JZHgpIHtcblx0cmV0dXJuIG9ib2R5W2Zyb21JZHhdO1xufVxuXG5mdW5jdGlvbiBmaW5kU2VxVGhvcm91Z2gobiwgb2JvZHksIGZyb21JZHgpIHtcdFx0Ly8gcHJlLXRlc3RlZCBpc1ZpZXc/XG5cdGZvciAoOyBmcm9tSWR4IDwgb2JvZHkubGVuZ3RoOyBmcm9tSWR4KyspIHtcblx0XHR2YXIgbyA9IG9ib2R5W2Zyb21JZHhdO1xuXG5cdFx0aWYgKG8udm0gIT0gbnVsbCkge1xuXHRcdFx0Ly8gbWF0Y2ggYnkga2V5ICYgdmlld0ZuIHx8IHZtXG5cdFx0XHRpZiAobi50eXBlID09PSBWVklFVyAmJiBvLnZtLnZpZXcgPT09IG4udmlldyAmJiBvLnZtLmtleSA9PT0gbi5rZXkgfHwgbi50eXBlID09PSBWTU9ERUwgJiYgby52bSA9PT0gbi52bSlcblx0XHRcdFx0eyByZXR1cm4gbzsgfVxuXHRcdH1cblx0XHRlbHNlIGlmICghYWxyZWFkeUFkb3B0ZWQobykgJiYgbi50YWcgPT09IG8udGFnICYmIG4udHlwZSA9PT0gby50eXBlICYmIG4ua2V5ID09PSBvLmtleSAmJiAobi5mbGFncyAmIH5ERUVQX1JFTU9WRSkgPT09IChvLmZsYWdzICYgfkRFRVBfUkVNT1ZFKSlcblx0XHRcdHsgcmV0dXJuIG87IH1cblx0fVxuXG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBmaW5kSGFzaEtleWVkKG4sIG9ib2R5LCBmcm9tSWR4KSB7XG5cdHJldHVybiBvYm9keVtvYm9keS5fa2V5c1tuLmtleV1dO1xufVxuXG4vKlxuLy8gbGlzdCBtdXN0IGJlIGEgc29ydGVkIGxpc3Qgb2Ygdm5vZGVzIGJ5IGtleVxuZnVuY3Rpb24gZmluZEJpbktleWVkKG4sIGxpc3QpIHtcblx0dmFyIGlkeCA9IGJpbmFyeUtleVNlYXJjaChsaXN0LCBuLmtleSk7XG5cdHJldHVybiBpZHggPiAtMSA/IGxpc3RbaWR4XSA6IG51bGw7XG59XG4qL1xuXG4vLyBoYXZlIGl0IGhhbmRsZSBpbml0aWFsIGh5ZHJhdGU/ICFkb25vcj9cbi8vIHR5cGVzIChhbmQgdGFncyBpZiBFTEVNKSBhcmUgYXNzdW1lZCB0aGUgc2FtZSwgYW5kIGRvbm9yIGV4aXN0c1xuZnVuY3Rpb24gcGF0Y2godm5vZGUsIGRvbm9yKSB7XG5cdGZpcmVIb29rKGRvbm9yLmhvb2tzLCBcIndpbGxSZWN5Y2xlXCIsIGRvbm9yLCB2bm9kZSk7XG5cblx0dmFyIGVsID0gdm5vZGUuZWwgPSBkb25vci5lbDtcblxuXHR2YXIgb2JvZHkgPSBkb25vci5ib2R5O1xuXHR2YXIgbmJvZHkgPSB2bm9kZS5ib2R5O1xuXG5cdGVsLl9ub2RlID0gdm5vZGU7XG5cblx0Ly8gXCJcIiA9PiBcIlwiXG5cdGlmICh2bm9kZS50eXBlID09PSBURVhUICYmIG5ib2R5ICE9PSBvYm9keSkge1xuXHRcdGVsLm5vZGVWYWx1ZSA9IG5ib2R5O1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICh2bm9kZS5hdHRycyAhPSBudWxsIHx8IGRvbm9yLmF0dHJzICE9IG51bGwpXG5cdFx0eyBwYXRjaEF0dHJzKHZub2RlLCBkb25vciwgZmFsc2UpOyB9XG5cblx0Ly8gcGF0Y2ggZXZlbnRzXG5cblx0dmFyIG9sZElzQXJyID0gaXNBcnIob2JvZHkpO1xuXHR2YXIgbmV3SXNBcnIgPSBpc0FycihuYm9keSk7XG5cdHZhciBsYXp5TGlzdCA9ICh2bm9kZS5mbGFncyAmIExBWllfTElTVCkgPT09IExBWllfTElTVDtcblxuLy9cdHZhciBub25FcU5ld0JvZHkgPSBuYm9keSAhPSBudWxsICYmIG5ib2R5ICE9PSBvYm9keTtcblxuXHRpZiAob2xkSXNBcnIpIHtcblx0XHQvLyBbXSA9PiBbXVxuXHRcdGlmIChuZXdJc0FyciB8fCBsYXp5TGlzdClcblx0XHRcdHsgcGF0Y2hDaGlsZHJlbih2bm9kZSwgZG9ub3IpOyB9XG5cdFx0Ly8gW10gPT4gXCJcIiB8IG51bGxcblx0XHRlbHNlIGlmIChuYm9keSAhPT0gb2JvZHkpIHtcblx0XHRcdGlmIChuYm9keSAhPSBudWxsKVxuXHRcdFx0XHR7IGVsLnRleHRDb250ZW50ID0gbmJvZHk7IH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0eyBjbGVhckNoaWxkcmVuKGRvbm9yKTsgfVxuXHRcdH1cblx0fVxuXHRlbHNlIHtcblx0XHQvLyBcIlwiIHwgbnVsbCA9PiBbXVxuXHRcdGlmIChuZXdJc0Fycikge1xuXHRcdFx0Y2xlYXJDaGlsZHJlbihkb25vcik7XG5cdFx0XHRoeWRyYXRlQm9keSh2bm9kZSk7XG5cdFx0fVxuXHRcdC8vIFwiXCIgfCBudWxsID0+IFwiXCIgfCBudWxsXG5cdFx0ZWxzZSBpZiAobmJvZHkgIT09IG9ib2R5KSB7XG5cdFx0XHRpZiAoZWwuZmlyc3RDaGlsZClcblx0XHRcdFx0eyBlbC5maXJzdENoaWxkLm5vZGVWYWx1ZSA9IG5ib2R5OyB9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHsgZWwudGV4dENvbnRlbnQgPSBuYm9keTsgfVxuXHRcdH1cblx0fVxuXG5cdGZpcmVIb29rKGRvbm9yLmhvb2tzLCBcImRpZFJlY3ljbGVcIiwgZG9ub3IsIHZub2RlKTtcbn1cblxuLy8gbGFyZ2VyIHF0eXMgb2YgS0VZRURfTElTVCBjaGlsZHJlbiB3aWxsIHVzZSBiaW5hcnkgc2VhcmNoXG4vL2NvbnN0IFNFUV9GQUlMU19NQVggPSAxMDA7XG5cbi8vIFRPRE86IG1vZGlmeSB2dHJlZSBtYXRjaGVyIHRvIHdvcmsgc2ltaWxhciB0byBkb20gcmVjb25jaWxlciBmb3Iga2V5ZWQgZnJvbSBsZWZ0IC0+IGZyb20gcmlnaHQgLT4gaGVhZC90YWlsIC0+IGJpbmFyeVxuLy8gZmFsbCBiYWNrIHRvIGJpbmFyeSBpZiBhZnRlciBmYWlsaW5nIG5yaSAtIG5saSA+IFNFUV9GQUlMU19NQVhcbi8vIHdoaWxlLWFkdmFuY2Ugbm9uLWtleWVkIGZyb21JZHhcbi8vIFtdID0+IFtdXG5mdW5jdGlvbiBwYXRjaENoaWxkcmVuKHZub2RlLCBkb25vcikge1xuXHR2YXIgbmJvZHlcdFx0PSB2bm9kZS5ib2R5LFxuXHRcdG5sZW5cdFx0PSBuYm9keS5sZW5ndGgsXG5cdFx0b2JvZHlcdFx0PSBkb25vci5ib2R5LFxuXHRcdG9sZW5cdFx0PSBvYm9keS5sZW5ndGgsXG5cdFx0aXNMYXp5XHRcdD0gKHZub2RlLmZsYWdzICYgTEFaWV9MSVNUKSA9PT0gTEFaWV9MSVNULFxuXHRcdGlzRml4ZWRcdFx0PSAodm5vZGUuZmxhZ3MgJiBGSVhFRF9CT0RZKSA9PT0gRklYRURfQk9EWSxcblx0XHRpc0tleWVkXHRcdD0gKHZub2RlLmZsYWdzICYgS0VZRURfTElTVCkgPT09IEtFWUVEX0xJU1QsXG5cdFx0ZG9tU3luY1x0XHQ9ICFpc0ZpeGVkICYmIHZub2RlLnR5cGUgPT09IEVMRU1FTlQsXG5cdFx0ZG9GaW5kXHRcdD0gdHJ1ZSxcblx0XHRmaW5kXHRcdD0gKFxuXHRcdFx0aXNLZXllZCA/IGZpbmRIYXNoS2V5ZWQgOlx0XHRcdFx0Ly8ga2V5ZWQgbGlzdHMvbGF6eUxpc3RzXG5cdFx0XHRpc0ZpeGVkIHx8IGlzTGF6eSA/IHRha2VTZXFJbmRleCA6XHRcdC8vIHVua2V5ZWQgbGF6eUxpc3RzIGFuZCBGSVhFRF9CT0RZXG5cdFx0XHRmaW5kU2VxVGhvcm91Z2hcdFx0XHRcdFx0XHRcdC8vIG1vcmUgY29tcGxleCBzdHVmZlxuXHRcdCk7XG5cblx0aWYgKGlzS2V5ZWQpIHtcblx0XHR2YXIga2V5cyA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JvZHkubGVuZ3RoOyBpKyspXG5cdFx0XHR7IGtleXNbb2JvZHlbaV0ua2V5XSA9IGk7IH1cblx0XHRvYm9keS5fa2V5cyA9IGtleXM7XG5cdH1cblxuXHRpZiAoZG9tU3luYyAmJiBubGVuID09PSAwKSB7XG5cdFx0Y2xlYXJDaGlsZHJlbihkb25vcik7XG5cdFx0aWYgKGlzTGF6eSlcblx0XHRcdHsgdm5vZGUuYm9keSA9IFtdOyB9XHQvLyBuYm9keS50cGwoYWxsKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgZG9ub3IyLFxuXHRcdG5vZGUyLFxuXHRcdGZvdW5kSWR4LFxuXHRcdHBhdGNoZWQgPSAwLFxuXHRcdGV2ZXJOb25zZXEgPSBmYWxzZSxcblx0XHRmcm9tSWR4ID0gMDtcdFx0Ly8gZmlyc3QgdW5yZWN5Y2xlZCBub2RlIChzZWFyY2ggaGVhZClcblxuXHRpZiAoaXNMYXp5KSB7XG5cdFx0dmFyIGZub2RlMiA9IHtrZXk6IG51bGx9O1xuXHRcdHZhciBuYm9keU5ldyA9IEFycmF5KG5sZW4pO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBubGVuOyBpKyspIHtcblx0XHRpZiAoaXNMYXp5KSB7XG5cdFx0XHR2YXIgcmVtYWtlID0gZmFsc2U7XG5cdFx0XHR2YXIgZGlmZlJlcyA9IG51bGw7XG5cblx0XHRcdGlmIChkb0ZpbmQpIHtcblx0XHRcdFx0aWYgKGlzS2V5ZWQpXG5cdFx0XHRcdFx0eyBmbm9kZTIua2V5ID0gbmJvZHkua2V5KGkpOyB9XG5cblx0XHRcdFx0ZG9ub3IyID0gZmluZChmbm9kZTIsIG9ib2R5LCBmcm9tSWR4KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGRvbm9yMiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZm91bmRJZHggPSBkb25vcjIuaWR4O1xuXHRcdFx0XHRkaWZmUmVzID0gbmJvZHkuZGlmZihpLCBkb25vcjIpO1xuXG5cdFx0XHRcdC8vIGRpZmYgcmV0dXJucyBzYW1lLCBzbyBjaGVhcGx5IGFkb3B0IHZub2RlIHdpdGhvdXQgcGF0Y2hpbmdcblx0XHRcdFx0aWYgKGRpZmZSZXMgPT09IHRydWUpIHtcblx0XHRcdFx0XHRub2RlMiA9IGRvbm9yMjtcblx0XHRcdFx0XHRub2RlMi5wYXJlbnQgPSB2bm9kZTtcblx0XHRcdFx0XHRub2RlMi5pZHggPSBpO1xuXHRcdFx0XHRcdG5vZGUyLl9saXMgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBkaWZmIHJldHVybnMgbmV3IGRpZmZWYWxzLCBzbyBnZW5lcmF0ZSBuZXcgdm5vZGUgJiBwYXRjaFxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0eyByZW1ha2UgPSB0cnVlOyB9XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHsgcmVtYWtlID0gdHJ1ZTsgfVxuXG5cdFx0XHRpZiAocmVtYWtlKSB7XG5cdFx0XHRcdG5vZGUyID0gbmJvZHkudHBsKGkpO1x0XHRcdC8vIHdoYXQgaWYgdGhpcyBpcyBhIFZWSUVXLCBWTU9ERUwsIGluamVjdGVkIGVsZW1lbnQ/XG5cdFx0XHRcdHByZVByb2Mobm9kZTIsIHZub2RlLCBpKTtcblxuXHRcdFx0XHRub2RlMi5fZGlmZiA9IGRpZmZSZXMgIT0gbnVsbCA/IGRpZmZSZXMgOiBuYm9keS5kaWZmKGkpO1xuXG5cdFx0XHRcdGlmIChkb25vcjIgIT0gbnVsbClcblx0XHRcdFx0XHR7IHBhdGNoKG5vZGUyLCBkb25vcjIpOyB9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gVE9ETzogZmxhZyB0bXAgRklYRURfQk9EWSBvbiB1bmNoYW5nZWQgbm9kZXM/XG5cblx0XHRcdFx0Ly8gZG9tU3luYyA9IHRydWU7XHRcdGlmIGFueSBpZHggY2hhbmdlcyBvciBuZXcgbm9kZXMgYWRkZWQvcmVtb3ZlZFxuXHRcdFx0fVxuXG5cdFx0XHRuYm9keU5ld1tpXSA9IG5vZGUyO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHZhciBub2RlMiA9IG5ib2R5W2ldO1xuXHRcdFx0dmFyIHR5cGUyID0gbm9kZTIudHlwZTtcblxuXHRcdFx0Ly8gRUxFTUVOVCxURVhULENPTU1FTlRcblx0XHRcdGlmICh0eXBlMiA8PSBDT01NRU5UKSB7XG5cdFx0XHRcdGlmIChkb25vcjIgPSBkb0ZpbmQgJiYgZmluZChub2RlMiwgb2JvZHksIGZyb21JZHgpKSB7XG5cdFx0XHRcdFx0cGF0Y2gobm9kZTIsIGRvbm9yMik7XG5cdFx0XHRcdFx0Zm91bmRJZHggPSBkb25vcjIuaWR4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICh0eXBlMiA9PT0gVlZJRVcpIHtcblx0XHRcdFx0aWYgKGRvbm9yMiA9IGRvRmluZCAmJiBmaW5kKG5vZGUyLCBvYm9keSwgZnJvbUlkeCkpIHtcdFx0Ly8gdXBkYXRlL21vdmVUb1xuXHRcdFx0XHRcdGZvdW5kSWR4ID0gZG9ub3IyLmlkeDtcblx0XHRcdFx0XHR2YXIgdm0gPSBkb25vcjIudm0uX3VwZGF0ZShub2RlMi5kYXRhLCB2bm9kZSwgaSk7XHRcdC8vIHdpdGhET01cblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0eyB2YXIgdm0gPSBjcmVhdGVWaWV3KG5vZGUyLnZpZXcsIG5vZGUyLmRhdGEsIG5vZGUyLmtleSwgbm9kZTIub3B0cykuX3JlZHJhdyh2bm9kZSwgaSwgZmFsc2UpOyB9XHQvLyBjcmVhdGVWaWV3LCBubyBkb20gKHdpbGwgYmUgaGFuZGxlZCBieSBzeW5jIGJlbG93KVxuXG5cdFx0XHRcdHR5cGUyID0gdm0ubm9kZS50eXBlO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAodHlwZTIgPT09IFZNT0RFTCkge1xuXHRcdFx0XHQvLyBpZiB0aGUgaW5qZWN0ZWQgdm0gaGFzIG5ldmVyIGJlZW4gcmVuZGVyZWQsIHRoaXMgdm0uX3VwZGF0ZSgpIHNlcnZlcyBhcyB0aGVcblx0XHRcdFx0Ly8gaW5pdGlhbCB2dHJlZSBjcmVhdG9yLCBidXQgbXVzdCBhdm9pZCBoeWRyYXRpbmcgKGNyZWF0aW5nIC5lbCkgYmVjYXVzZSBzeW5jQ2hpbGRyZW4oKVxuXHRcdFx0XHQvLyB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgbW91bnRpbmcgYmVsb3cgKGFuZCBvcHRpb25hbGx5IGh5ZHJhdGluZyksIHRlc3RzIC5lbCBwcmVzZW5jZVxuXHRcdFx0XHQvLyB0byBkZXRlcm1pbmUgaWYgaHlkcmF0aW9uICYgbW91bnRpbmcgYXJlIG5lZWRlZFxuXHRcdFx0XHR2YXIgd2l0aERPTSA9IGlzSHlkcmF0ZWQobm9kZTIudm0pO1xuXG5cdFx0XHRcdHZhciB2bSA9IG5vZGUyLnZtLl91cGRhdGUobm9kZTIuZGF0YSwgdm5vZGUsIGksIHdpdGhET00pO1xuXHRcdFx0XHR0eXBlMiA9IHZtLm5vZGUudHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBmb3VuZCBkb25vciAmIGR1cmluZyBhIHNlcXVlbnRpYWwgc2VhcmNoIC4uLmF0IHNlYXJjaCBoZWFkXG5cdFx0aWYgKCFpc0tleWVkICYmIGRvbm9yMiAhPSBudWxsKSB7XG5cdFx0XHRpZiAoZm91bmRJZHggPT09IGZyb21JZHgpIHtcblx0XHRcdFx0Ly8gYWR2YW5jZSBoZWFkXG5cdFx0XHRcdGZyb21JZHgrKztcblx0XHRcdFx0Ly8gaWYgYWxsIG9sZCB2bm9kZXMgYWRvcHRlZCBhbmQgbW9yZSBleGlzdCwgc3RvcCBzZWFyY2hpbmdcblx0XHRcdFx0aWYgKGZyb21JZHggPT09IG9sZW4gJiYgbmxlbiA+IG9sZW4pIHtcblx0XHRcdFx0XHQvLyBzaG9ydC1jaXJjdWl0IGZpbmQsIGFsbG93IGxvb3AganVzdCBjcmVhdGUvaW5pdCByZXN0XG5cdFx0XHRcdFx0ZG9ub3IyID0gbnVsbDtcblx0XHRcdFx0XHRkb0ZpbmQgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR7IGV2ZXJOb25zZXEgPSB0cnVlOyB9XG5cblx0XHRcdGlmIChvbGVuID4gMTAwICYmIGV2ZXJOb25zZXEgJiYgKytwYXRjaGVkICUgMTAgPT09IDApXG5cdFx0XHRcdHsgd2hpbGUgKGZyb21JZHggPCBvbGVuICYmIGFscmVhZHlBZG9wdGVkKG9ib2R5W2Zyb21JZHhdKSlcblx0XHRcdFx0XHR7IGZyb21JZHgrKzsgfSB9XG5cdFx0fVxuXHR9XG5cblx0Ly8gcmVwbGFjZSBMaXN0IHcvIG5ldyBib2R5XG5cdGlmIChpc0xhenkpXG5cdFx0eyB2bm9kZS5ib2R5ID0gbmJvZHlOZXc7IH1cblxuXHRkb21TeW5jICYmIHN5bmNDaGlsZHJlbih2bm9kZSwgZG9ub3IpO1xufVxuXG5mdW5jdGlvbiBET01JbnN0cih3aXRoVGltZSkge1xuXHR2YXIgaXNFZGdlID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiRWRnZVwiKSAhPT0gLTE7XG5cdHZhciBpc0lFID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiVHJpZGVudC9cIikgIT09IC0xO1xuXHR2YXIgZ2V0RGVzY3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXHR2YXIgZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuXHR2YXIgbm9kZVByb3RvID0gTm9kZS5wcm90b3R5cGU7XG5cdHZhciB0ZXh0Q29udGVudCA9IGdldERlc2NyKG5vZGVQcm90bywgXCJ0ZXh0Q29udGVudFwiKTtcblx0dmFyIG5vZGVWYWx1ZSA9IGdldERlc2NyKG5vZGVQcm90bywgXCJub2RlVmFsdWVcIik7XG5cblx0dmFyIGh0bWxQcm90byA9IEhUTUxFbGVtZW50LnByb3RvdHlwZTtcblx0dmFyIGlubmVyVGV4dCA9IGdldERlc2NyKGh0bWxQcm90bywgXCJpbm5lclRleHRcIik7XG5cblx0dmFyIGVsZW1Qcm90b1x0PSBFbGVtZW50LnByb3RvdHlwZTtcblx0dmFyIGlubmVySFRNTFx0PSBnZXREZXNjcighaXNJRSA/IGVsZW1Qcm90byA6IGh0bWxQcm90bywgXCJpbm5lckhUTUxcIik7XG5cdHZhciBjbGFzc05hbWVcdD0gZ2V0RGVzY3IoIWlzSUUgPyBlbGVtUHJvdG8gOiBodG1sUHJvdG8sIFwiY2xhc3NOYW1lXCIpO1xuXHR2YXIgaWRcdFx0XHQ9IGdldERlc2NyKCFpc0lFID8gZWxlbVByb3RvIDogaHRtbFByb3RvLCBcImlkXCIpO1xuXG5cdHZhciBzdHlsZVByb3RvXHQ9IENTU1N0eWxlRGVjbGFyYXRpb24ucHJvdG90eXBlO1xuXG5cdHZhciBjc3NUZXh0XHRcdD0gZ2V0RGVzY3Ioc3R5bGVQcm90bywgXCJjc3NUZXh0XCIpO1xuXG5cdHZhciBpbnBQcm90byA9IEhUTUxJbnB1dEVsZW1lbnQucHJvdG90eXBlO1xuXHR2YXIgYXJlYVByb3RvID0gSFRNTFRleHRBcmVhRWxlbWVudC5wcm90b3R5cGU7XG5cdHZhciBzZWxQcm90byA9IEhUTUxTZWxlY3RFbGVtZW50LnByb3RvdHlwZTtcblx0dmFyIG9wdFByb3RvID0gSFRNTE9wdGlvbkVsZW1lbnQucHJvdG90eXBlO1xuXG5cdHZhciBpbnBDaGVja2VkID0gZ2V0RGVzY3IoaW5wUHJvdG8sIFwiY2hlY2tlZFwiKTtcblx0dmFyIGlucFZhbCA9IGdldERlc2NyKGlucFByb3RvLCBcInZhbHVlXCIpO1xuXG5cdHZhciBhcmVhVmFsID0gZ2V0RGVzY3IoYXJlYVByb3RvLCBcInZhbHVlXCIpO1xuXG5cdHZhciBzZWxWYWwgPSBnZXREZXNjcihzZWxQcm90bywgXCJ2YWx1ZVwiKTtcblx0dmFyIHNlbEluZGV4ID0gZ2V0RGVzY3Ioc2VsUHJvdG8sIFwic2VsZWN0ZWRJbmRleFwiKTtcblxuXHR2YXIgb3B0U2VsID0gZ2V0RGVzY3Iob3B0UHJvdG8sIFwic2VsZWN0ZWRcIik7XG5cblx0Ly8gb25jbGljaywgb25rZXkqLCBldGMuLlxuXG5cdC8vIHZhciBzdHlsZVByb3RvID0gQ1NTU3R5bGVEZWNsYXJhdGlvbi5wcm90b3R5cGU7XG5cdC8vIHZhciBzZXRQcm9wZXJ0eSA9IGdldERlc2NyKHN0eWxlUHJvdG8sIFwic2V0UHJvcGVydHlcIik7XG5cblx0dmFyIG9yaWdPcHMgPSB7XG5cdFx0XCJkb2N1bWVudC5jcmVhdGVFbGVtZW50XCI6IG51bGwsXG5cdFx0XCJkb2N1bWVudC5jcmVhdGVFbGVtZW50TlNcIjogbnVsbCxcblx0XHRcImRvY3VtZW50LmNyZWF0ZVRleHROb2RlXCI6IG51bGwsXG5cdFx0XCJkb2N1bWVudC5jcmVhdGVDb21tZW50XCI6IG51bGwsXG5cdFx0XCJkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50XCI6IG51bGwsXG5cblx0XHRcIkRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLmluc2VydEJlZm9yZVwiOiBudWxsLFx0XHQvLyBhcHBlbmRDaGlsZFxuXG5cdFx0XCJFbGVtZW50LnByb3RvdHlwZS5hcHBlbmRDaGlsZFwiOiBudWxsLFxuXHRcdFwiRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQ2hpbGRcIjogbnVsbCxcblx0XHRcIkVsZW1lbnQucHJvdG90eXBlLmluc2VydEJlZm9yZVwiOiBudWxsLFxuXHRcdFwiRWxlbWVudC5wcm90b3R5cGUucmVwbGFjZUNoaWxkXCI6IG51bGwsXG5cdFx0XCJFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVcIjogbnVsbCxcblxuXHRcdFwiRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlXCI6IG51bGwsXG5cdFx0XCJFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVOU1wiOiBudWxsLFxuXHRcdFwiRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlXCI6IG51bGwsXG5cdFx0XCJFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGVOU1wiOiBudWxsLFxuXG5cdFx0Ly8gYXNzaWduP1xuXHRcdC8vIGRhdGFzZXQsIGNsYXNzbGlzdCwgYW55IHByb3BzIGxpa2UgLm9uY2hhbmdlXG5cblx0XHQvLyAuc3R5bGUuc2V0UHJvcGVydHksIC5zdHlsZS5jc3NUZXh0XG5cdH07XG5cblx0dmFyIGNvdW50cyA9IHt9O1xuXHR2YXIgc3RhcnQgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIGN0eE5hbWUob3BOYW1lKSB7XG5cdFx0dmFyIG9wUGF0aCA9IG9wTmFtZS5zcGxpdChcIi5cIik7XG5cdFx0dmFyIG8gPSB3aW5kb3c7XG5cdFx0d2hpbGUgKG9wUGF0aC5sZW5ndGggPiAxKVxuXHRcdFx0eyBvID0gb1tvcFBhdGguc2hpZnQoKV07IH1cblxuXHRcdHJldHVybiB7Y3R4OiBvLCBsYXN0OiBvcFBhdGhbMF19O1xuXHR9XG5cblx0Zm9yICh2YXIgb3BOYW1lIGluIG9yaWdPcHMpIHtcblx0XHR2YXIgcCA9IGN0eE5hbWUob3BOYW1lKTtcblxuXHRcdGlmIChvcmlnT3BzW29wTmFtZV0gPT09IG51bGwpXG5cdFx0XHR7IG9yaWdPcHNbb3BOYW1lXSA9IHAuY3R4W3AubGFzdF07IH1cblxuXHRcdChmdW5jdGlvbihvcE5hbWUsIG9wU2hvcnQpIHtcblx0XHRcdGNvdW50c1tvcFNob3J0XSA9IDA7XG5cdFx0XHRwLmN0eFtvcFNob3J0XSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjb3VudHNbb3BTaG9ydF0rKztcblx0XHRcdFx0cmV0dXJuIG9yaWdPcHNbb3BOYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fTtcblx0XHR9KShvcE5hbWUsIHAubGFzdCk7XG5cdH1cblxuXHRjb3VudHMudGV4dENvbnRlbnQgPSAwO1xuXHRkZWZQcm9wKG5vZGVQcm90bywgXCJ0ZXh0Q29udGVudFwiLCB7XG5cdFx0c2V0OiBmdW5jdGlvbihzKSB7XG5cdFx0XHRjb3VudHMudGV4dENvbnRlbnQrKztcblx0XHRcdHRleHRDb250ZW50LnNldC5jYWxsKHRoaXMsIHMpO1xuXHRcdH0sXG5cdH0pO1xuXG5cdGNvdW50cy5ub2RlVmFsdWUgPSAwO1xuXHRkZWZQcm9wKG5vZGVQcm90bywgXCJub2RlVmFsdWVcIiwge1xuXHRcdHNldDogZnVuY3Rpb24ocykge1xuXHRcdFx0Y291bnRzLm5vZGVWYWx1ZSsrO1xuXHRcdFx0bm9kZVZhbHVlLnNldC5jYWxsKHRoaXMsIHMpO1xuXHRcdH0sXG5cdH0pO1xuXG5cdGNvdW50cy5pbm5lclRleHQgPSAwO1xuXHRkZWZQcm9wKGh0bWxQcm90bywgXCJpbm5lclRleHRcIiwge1xuXHRcdHNldDogZnVuY3Rpb24ocykge1xuXHRcdFx0Y291bnRzLmlubmVyVGV4dCsrO1xuXHRcdFx0aW5uZXJUZXh0LnNldC5jYWxsKHRoaXMsIHMpO1xuXHRcdH0sXG5cdH0pO1xuXG5cdGNvdW50cy5pbm5lckhUTUwgPSAwO1xuXHRkZWZQcm9wKCFpc0lFID8gZWxlbVByb3RvIDogaHRtbFByb3RvLCBcImlubmVySFRNTFwiLCB7XG5cdFx0c2V0OiBmdW5jdGlvbihzKSB7XG5cdFx0XHRjb3VudHMuaW5uZXJIVE1MKys7XG5cdFx0XHRpbm5lckhUTUwuc2V0LmNhbGwodGhpcywgcyk7XG5cdFx0fSxcblx0fSk7XG5cblx0Y291bnRzLmNsYXNzTmFtZSA9IDA7XG5cdGRlZlByb3AoIWlzSUUgPyBlbGVtUHJvdG8gOiBodG1sUHJvdG8sIFwiY2xhc3NOYW1lXCIsIHtcblx0XHRzZXQ6IGZ1bmN0aW9uKHMpIHtcblx0XHRcdGNvdW50cy5jbGFzc05hbWUrKztcblx0XHRcdGNsYXNzTmFtZS5zZXQuY2FsbCh0aGlzLCBzKTtcblx0XHR9LFxuXHR9KTtcblxuXHRjb3VudHMuY3NzVGV4dCA9IDA7XG5cdGRlZlByb3Aoc3R5bGVQcm90bywgXCJjc3NUZXh0XCIsIHtcblx0XHRzZXQ6IGZ1bmN0aW9uKHMpIHtcblx0XHRcdGNvdW50cy5jc3NUZXh0Kys7XG5cdFx0XHRjc3NUZXh0LnNldC5jYWxsKHRoaXMsIHMpO1xuXHRcdH0sXG5cdH0pO1xuXG5cdGNvdW50cy5pZCA9IDA7XG5cdGRlZlByb3AoIWlzSUUgPyBlbGVtUHJvdG8gOiBodG1sUHJvdG8sIFwiaWRcIiwge1xuXHRcdHNldDogZnVuY3Rpb24ocykge1xuXHRcdFx0Y291bnRzLmlkKys7XG5cdFx0XHRpZC5zZXQuY2FsbCh0aGlzLCBzKTtcblx0XHR9LFxuXHR9KTtcblxuXHRjb3VudHMuY2hlY2tlZCA9IDA7XG5cdGRlZlByb3AoaW5wUHJvdG8sIFwiY2hlY2tlZFwiLCB7XG5cdFx0c2V0OiBmdW5jdGlvbihzKSB7XG5cdFx0XHRjb3VudHMuY2hlY2tlZCsrO1xuXHRcdFx0aW5wQ2hlY2tlZC5zZXQuY2FsbCh0aGlzLCBzKTtcblx0XHR9LFxuXHR9KTtcblxuXHRjb3VudHMudmFsdWUgPSAwO1xuXHRkZWZQcm9wKGlucFByb3RvLCBcInZhbHVlXCIsIHtcblx0XHRzZXQ6IGZ1bmN0aW9uKHMpIHtcblx0XHRcdGNvdW50cy52YWx1ZSsrO1xuXHRcdFx0aW5wVmFsLnNldC5jYWxsKHRoaXMsIHMpO1xuXHRcdH0sXG5cdH0pO1xuXG5cdGRlZlByb3AoYXJlYVByb3RvLCBcInZhbHVlXCIsIHtcblx0XHRzZXQ6IGZ1bmN0aW9uKHMpIHtcblx0XHRcdGNvdW50cy52YWx1ZSsrO1xuXHRcdFx0YXJlYVZhbC5zZXQuY2FsbCh0aGlzLCBzKTtcblx0XHR9LFxuXHR9KTtcblxuXHRkZWZQcm9wKHNlbFByb3RvLCBcInZhbHVlXCIsIHtcblx0XHRzZXQ6IGZ1bmN0aW9uKHMpIHtcblx0XHRcdGNvdW50cy52YWx1ZSsrO1xuXHRcdFx0c2VsVmFsLnNldC5jYWxsKHRoaXMsIHMpO1xuXHRcdH0sXG5cdH0pO1xuXG5cdGNvdW50cy5zZWxlY3RlZEluZGV4ID0gMDtcblx0ZGVmUHJvcChzZWxQcm90bywgXCJzZWxlY3RlZEluZGV4XCIsIHtcblx0XHRzZXQ6IGZ1bmN0aW9uKHMpIHtcblx0XHRcdGNvdW50cy5zZWxlY3RlZEluZGV4Kys7XG5cdFx0XHRzZWxJbmRleC5zZXQuY2FsbCh0aGlzLCBzKTtcblx0XHR9LFxuXHR9KTtcblxuXHRjb3VudHMuc2VsZWN0ZWQgPSAwO1xuXHRkZWZQcm9wKG9wdFByb3RvLCBcInNlbGVjdGVkXCIsIHtcblx0XHRzZXQ6IGZ1bmN0aW9uKHMpIHtcblx0XHRcdGNvdW50cy5zZWxlY3RlZCsrO1xuXHRcdFx0b3B0U2VsLnNldC5jYWxsKHRoaXMsIHMpO1xuXHRcdH0sXG5cdH0pO1xuXG5cdC8qXG5cdGNvdW50cy5zZXRQcm9wZXJ0eSA9IDA7XG5cdGRlZlByb3Aoc3R5bGVQcm90bywgXCJzZXRQcm9wZXJ0eVwiLCB7XG5cdFx0c2V0OiBmdW5jdGlvbihzKSB7XG5cdFx0XHRjb3VudHMuc2V0UHJvcGVydHkrKztcblx0XHRcdHNldFByb3BlcnR5LnNldC5jYWxsKHRoaXMsIHMpO1xuXHRcdH0sXG5cdH0pO1xuXHQqL1xuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXHRcdGZvciAodmFyIGkgaW4gY291bnRzKVxuXHRcdFx0eyBjb3VudHNbaV0gPSAwOyB9XG5cdH1cblxuXHR0aGlzLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdFx0c3RhcnQgPSArbmV3IERhdGU7XG5cdH07XG5cblx0dGhpcy5lbmQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgX3RpbWUgPSArbmV3IERhdGUgLSBzdGFydDtcblx0XHRzdGFydCA9IG51bGw7XG4vKlxuXHRcdGZvciAodmFyIG9wTmFtZSBpbiBvcmlnT3BzKSB7XG5cdFx0XHR2YXIgcCA9IGN0eE5hbWUob3BOYW1lKTtcblx0XHRcdHAuY3R4W3AubGFzdF0gPSBvcmlnT3BzW29wTmFtZV07XG5cdFx0fVxuXG5cdFx0ZGVmUHJvcChub2RlUHJvdG8sIFwidGV4dENvbnRlbnRcIiwgdGV4dENvbnRlbnQpO1xuXHRcdGRlZlByb3Aobm9kZVByb3RvLCBcIm5vZGVWYWx1ZVwiLCBub2RlVmFsdWUpO1xuXHRcdGRlZlByb3AoaHRtbFByb3RvLCBcImlubmVyVGV4dFwiLCBpbm5lclRleHQpO1xuXHRcdGRlZlByb3AoIWlzSUUgPyBlbGVtUHJvdG8gOiBodG1sUHJvdG8sIFwiaW5uZXJIVE1MXCIsIGlubmVySFRNTCk7XG5cdFx0ZGVmUHJvcCghaXNJRSA/IGVsZW1Qcm90byA6IGh0bWxQcm90bywgXCJjbGFzc05hbWVcIiwgY2xhc3NOYW1lKTtcblx0XHRkZWZQcm9wKCFpc0lFID8gZWxlbVByb3RvIDogaHRtbFByb3RvLCBcImlkXCIsIGlkKTtcblx0XHRkZWZQcm9wKGlucFByb3RvLCAgXCJjaGVja2VkXCIsIGlucENoZWNrZWQpO1xuXHRcdGRlZlByb3AoaW5wUHJvdG8sICBcInZhbHVlXCIsIGlucFZhbCk7XG5cdFx0ZGVmUHJvcChhcmVhUHJvdG8sIFwidmFsdWVcIiwgYXJlYVZhbCk7XG5cdFx0ZGVmUHJvcChzZWxQcm90bywgIFwidmFsdWVcIiwgc2VsVmFsKTtcblx0XHRkZWZQcm9wKHNlbFByb3RvLCAgXCJzZWxlY3RlZEluZGV4XCIsIHNlbEluZGV4KTtcblx0XHRkZWZQcm9wKG9wdFByb3RvLCAgXCJzZWxlY3RlZFwiLCBvcHRTZWwpO1xuXHQvL1x0ZGVmUHJvcChzdHlsZVByb3RvLCBcInNldFByb3BlcnR5XCIsIHNldFByb3BlcnR5KTtcblx0XHRkZWZQcm9wKHN0eWxlUHJvdG8sIFwiY3NzVGV4dFwiLCBjc3NUZXh0KTtcbiovXG5cdFx0dmFyIG91dCA9IHt9O1xuXG5cdFx0Zm9yICh2YXIgaSBpbiBjb3VudHMpXG5cdFx0XHR7IGlmIChjb3VudHNbaV0gPiAwKVxuXHRcdFx0XHR7IG91dFtpXSA9IGNvdW50c1tpXTsgfSB9XG5cblx0XHRyZXNldCgpO1xuXG5cdFx0aWYgKHdpdGhUaW1lKVxuXHRcdFx0eyBvdXQuX3RpbWUgPSBfdGltZTsgfVxuXG5cdFx0cmV0dXJuIG91dDtcblx0fTtcbn1cblxudmFyIGluc3RyID0gbnVsbDtcblxue1xuXHRpZiAoREVWTU9ERS5tdXRhdGlvbnMpIHtcblx0XHRpbnN0ciA9IG5ldyBET01JbnN0cih0cnVlKTtcblx0fVxufVxuXG4vLyB2aWV3ICsga2V5IHNlcnZlIGFzIHRoZSB2bSdzIHVuaXF1ZSBpZGVudGl0eVxuZnVuY3Rpb24gVmlld01vZGVsKHZpZXcsIGRhdGEsIGtleSwgb3B0cykge1xuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdHZtLnZpZXcgPSB2aWV3O1xuXHR2bS5kYXRhID0gZGF0YTtcblx0dm0ua2V5ID0ga2V5O1xuXG5cdHtcblx0XHRpZiAoaXNTdHJlYW0oZGF0YSkpXG5cdFx0XHR7IHZtLl9zdHJlYW0gPSBob29rU3RyZWFtMihkYXRhLCB2bSk7IH1cblx0fVxuXG5cdGlmIChvcHRzKSB7XG5cdFx0dm0ub3B0cyA9IG9wdHM7XG5cdFx0dm0uY29uZmlnKG9wdHMpO1xuXHR9XG5cblx0dmFyIG91dCA9IGlzUGxhaW5PYmoodmlldykgPyB2aWV3IDogdmlldy5jYWxsKHZtLCB2bSwgZGF0YSwga2V5LCBvcHRzKTtcblxuXHRpZiAoaXNGdW5jKG91dCkpXG5cdFx0eyB2bS5yZW5kZXIgPSBvdXQ7IH1cblx0ZWxzZSB7XG5cdFx0dm0ucmVuZGVyID0gb3V0LnJlbmRlcjtcblx0XHR2bS5jb25maWcob3V0KTtcblx0fVxuXG5cdC8vIHRoZXNlIG11c3QgYmUgd3JhcHBlZCBoZXJlIHNpbmNlIHRoZXkncmUgZGVib3VuY2VkIHBlciB2aWV3XG5cdHZtLl9yZWRyYXdBc3luYyA9IHJhZnQoZnVuY3Rpb24gKF8pIHsgcmV0dXJuIHZtLnJlZHJhdyh0cnVlKTsgfSk7XG5cdHZtLl91cGRhdGVBc3luYyA9IHJhZnQoZnVuY3Rpb24gKG5ld0RhdGEpIHsgcmV0dXJuIHZtLnVwZGF0ZShuZXdEYXRhLCB0cnVlKTsgfSk7XG5cblx0dm0uaW5pdCAmJiB2bS5pbml0LmNhbGwodm0sIHZtLCB2bS5kYXRhLCB2bS5rZXksIG9wdHMpO1xufVxuXG52YXIgVmlld01vZGVsUHJvdG8gPSBWaWV3TW9kZWwucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVmlld01vZGVsLFxuXG5cdF9kaWZmOlx0bnVsbCxcdC8vIGRpZmYgY2FjaGVcblxuXHRpbml0Olx0bnVsbCxcblx0dmlldzpcdG51bGwsXG5cdGtleTpcdG51bGwsXG5cdGRhdGE6XHRudWxsLFxuXHRzdGF0ZTpcdG51bGwsXG5cdGFwaTpcdG51bGwsXG5cdG9wdHM6XHRudWxsLFxuXHRub2RlOlx0bnVsbCxcblx0aG9va3M6XHRudWxsLFxuXHRvbmV2ZW50OiBub29wLFxuXHRyZWZzOlx0bnVsbCxcblx0cmVuZGVyOlx0bnVsbCxcblxuXHRtb3VudDogbW91bnQsXG5cdHVubW91bnQ6IHVubW91bnQsXG5cdGNvbmZpZzogZnVuY3Rpb24ob3B0cykge1xuXHRcdHZhciB0ID0gdGhpcztcblxuXHRcdGlmIChvcHRzLmluaXQpXG5cdFx0XHR7IHQuaW5pdCA9IG9wdHMuaW5pdDsgfVxuXHRcdGlmIChvcHRzLmRpZmYpXG5cdFx0XHR7IHQuZGlmZiA9IG9wdHMuZGlmZjsgfVxuXHRcdGlmIChvcHRzLm9uZXZlbnQpXG5cdFx0XHR7IHQub25ldmVudCA9IG9wdHMub25ldmVudDsgfVxuXG5cdFx0Ly8gbWF5YmUgaW52ZXJ0IGFzc2lnbm1lbnQgb3JkZXI/XG5cdFx0aWYgKG9wdHMuaG9va3MpXG5cdFx0XHR7IHQuaG9va3MgPSBhc3NpZ25PYmoodC5ob29rcyB8fCB7fSwgb3B0cy5ob29rcyk7IH1cblxuXHRcdHtcblx0XHRcdGlmIChvcHRzLm9uZW1pdClcblx0XHRcdFx0eyB0Lm9uZW1pdCA9IGFzc2lnbk9iaih0Lm9uZW1pdCB8fCB7fSwgb3B0cy5vbmVtaXQpOyB9XG5cdFx0fVxuXHR9LFxuXHRwYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBnZXRWbSh0aGlzLm5vZGUucGFyZW50KTtcblx0fSxcblx0cm9vdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHAgPSB0aGlzLm5vZGU7XG5cblx0XHR3aGlsZSAocC5wYXJlbnQpXG5cdFx0XHR7IHAgPSBwLnBhcmVudDsgfVxuXG5cdFx0cmV0dXJuIHAudm07XG5cdH0sXG5cdHJlZHJhdzogZnVuY3Rpb24oc3luYykge1xuXHRcdHtcblx0XHRcdGlmIChERVZNT0RFLnN5bmNSZWRyYXcpIHtcblx0XHRcdFx0c3luYyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciB2bSA9IHRoaXM7XG5cdFx0c3luYyA/IHZtLl9yZWRyYXcobnVsbCwgbnVsbCwgaXNIeWRyYXRlZCh2bSkpIDogdm0uX3JlZHJhd0FzeW5jKCk7XG5cdFx0cmV0dXJuIHZtO1xuXHR9LFxuXHR1cGRhdGU6IGZ1bmN0aW9uKG5ld0RhdGEsIHN5bmMpIHtcblx0XHR7XG5cdFx0XHRpZiAoREVWTU9ERS5zeW5jUmVkcmF3KSB7XG5cdFx0XHRcdHN5bmMgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgdm0gPSB0aGlzO1xuXHRcdHN5bmMgPyB2bS5fdXBkYXRlKG5ld0RhdGEsIG51bGwsIG51bGwsIGlzSHlkcmF0ZWQodm0pKSA6IHZtLl91cGRhdGVBc3luYyhuZXdEYXRhKTtcblx0XHRyZXR1cm4gdm07XG5cdH0sXG5cblx0X3VwZGF0ZTogdXBkYXRlU3luYyxcblx0X3JlZHJhdzogcmVkcmF3U3luYyxcblx0X3JlZHJhd0FzeW5jOiBudWxsLFxuXHRfdXBkYXRlQXN5bmM6IG51bGwsXG59O1xuXG5mdW5jdGlvbiBtb3VudChlbCwgaXNSb290KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cblx0e1xuXHRcdGlmIChERVZNT0RFLm11dGF0aW9ucylcblx0XHRcdHsgaW5zdHIuc3RhcnQoKTsgfVxuXHR9XG5cblx0aWYgKGlzUm9vdCkge1xuXHRcdGNsZWFyQ2hpbGRyZW4oe2VsOiBlbCwgZmxhZ3M6IDB9KTtcblxuXHRcdHZtLl9yZWRyYXcobnVsbCwgbnVsbCwgZmFsc2UpO1xuXG5cdFx0Ly8gaWYgcGxhY2Vob2xkZXIgbm9kZSBkb2VzbnQgbWF0Y2ggcm9vdCB0YWdcblx0XHRpZiAoZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gdm0ubm9kZS50YWcpIHtcblx0XHRcdGh5ZHJhdGUodm0ubm9kZSk7XG5cdFx0XHRpbnNlcnRCZWZvcmUoZWwucGFyZW50Tm9kZSwgdm0ubm9kZS5lbCwgZWwpO1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHRcdHsgaW5zZXJ0QmVmb3JlKGVsLnBhcmVudE5vZGUsIGh5ZHJhdGUodm0ubm9kZSwgZWwpLCBlbCk7IH1cblx0fVxuXHRlbHNlIHtcblx0XHR2bS5fcmVkcmF3KG51bGwsIG51bGwpO1xuXG5cdFx0aWYgKGVsKVxuXHRcdFx0eyBpbnNlcnRCZWZvcmUoZWwsIHZtLm5vZGUuZWwpOyB9XG5cdH1cblxuXHRpZiAoZWwpXG5cdFx0eyBkcmFpbkRpZEhvb2tzKHZtKTsgfVxuXG5cdHtcblx0XHRpZiAoREVWTU9ERS5tdXRhdGlvbnMpXG5cdFx0XHR7IGNvbnNvbGUubG9nKGluc3RyLmVuZCgpKTsgfVxuXHR9XG5cblx0cmV0dXJuIHZtO1xufVxuXG4vLyBhc1N1YiBtZWFucyB0aGlzIHdhcyBjYWxsZWQgZnJvbSBhIHN1Yi1yb3V0aW5lLCBzbyBkb24ndCBkcmFpbiBkaWQqIGhvb2sgcXVldWVcbmZ1bmN0aW9uIHVubW91bnQoYXNTdWIpIHtcblx0dmFyIHZtID0gdGhpcztcblxuXHR7XG5cdFx0aWYgKGlzU3RyZWFtKHZtLl9zdHJlYW0pKVxuXHRcdFx0eyB1bnN1YlN0cmVhbSh2bS5fc3RyZWFtKTsgfVxuXHR9XG5cblx0dmFyIG5vZGUgPSB2bS5ub2RlO1xuXHR2YXIgcGFyRWwgPSBub2RlLmVsLnBhcmVudE5vZGU7XG5cblx0Ly8gZWRnZSBidWc6IHRoaXMgY291bGQgYWxzbyBiZSB3aWxsUmVtb3ZlIHByb21pc2UtZGVsYXllZDsgc2hvdWxkIC50aGVuKCkgb3Igc29tZXRoaW5nIHRvIG1ha2Ugc3VyZSBob29rcyBmaXJlIGluIG9yZGVyXG5cdHJlbW92ZUNoaWxkKHBhckVsLCBub2RlLmVsKTtcblxuXHRpZiAoIWFzU3ViKVxuXHRcdHsgZHJhaW5EaWRIb29rcyh2bSk7IH1cbn1cblxuZnVuY3Rpb24gcmVQYXJlbnQodm0sIHZvbGQsIG5ld1BhcmVudCwgbmV3SWR4KSB7XG5cdGlmIChuZXdQYXJlbnQgIT0gbnVsbCkge1xuXHRcdG5ld1BhcmVudC5ib2R5W25ld0lkeF0gPSB2b2xkO1xuXHRcdHZvbGQuaWR4ID0gbmV3SWR4O1xuXHRcdHZvbGQucGFyZW50ID0gbmV3UGFyZW50O1xuXHRcdHZvbGQuX2xpcyA9IGZhbHNlO1xuXHR9XG5cdHJldHVybiB2bTtcbn1cblxuZnVuY3Rpb24gcmVkcmF3U3luYyhuZXdQYXJlbnQsIG5ld0lkeCwgd2l0aERPTSkge1xuXHR2YXIgaXNSZWRyYXdSb290ID0gbmV3UGFyZW50ID09IG51bGw7XG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBpc01vdW50ZWQgPSB2bS5ub2RlICYmIHZtLm5vZGUuZWwgJiYgdm0ubm9kZS5lbC5wYXJlbnROb2RlO1xuXG5cdHtcblx0XHQvLyB3YXMgbW91bnRlZCAoaGFzIG5vZGUgYW5kIGVsKSwgYnV0IGVsIG5vIGxvbmdlciBoYXMgcGFyZW50ICh1bm1vdW50ZWQpXG5cdFx0aWYgKGlzUmVkcmF3Um9vdCAmJiB2bS5ub2RlICYmIHZtLm5vZGUuZWwgJiYgIXZtLm5vZGUuZWwucGFyZW50Tm9kZSlcblx0XHRcdHsgZGV2Tm90aWZ5KFwiVU5NT1VOVEVEX1JFRFJBV1wiLCBbdm1dKTsgfVxuXG5cdFx0aWYgKGlzUmVkcmF3Um9vdCAmJiBERVZNT0RFLm11dGF0aW9ucyAmJiBpc01vdW50ZWQpXG5cdFx0XHR7IGluc3RyLnN0YXJ0KCk7IH1cblx0fVxuXG5cdHZhciB2b2xkID0gdm0ubm9kZSwgb2xkRGlmZiwgbmV3RGlmZjtcblxuXHRpZiAodm0uZGlmZiAhPSBudWxsKSB7XG5cdFx0b2xkRGlmZiA9IHZtLl9kaWZmO1xuXHRcdHZtLl9kaWZmID0gbmV3RGlmZiA9IHZtLmRpZmYodm0sIHZtLmRhdGEpO1xuXG5cdFx0aWYgKHZvbGQgIT0gbnVsbCkge1xuXHRcdFx0dmFyIGNtcEZuID0gaXNBcnIob2xkRGlmZikgPyBjbXBBcnIgOiBjbXBPYmo7XG5cdFx0XHR2YXIgaXNTYW1lID0gb2xkRGlmZiA9PT0gbmV3RGlmZiB8fCBjbXBGbihvbGREaWZmLCBuZXdEaWZmKTtcblxuXHRcdFx0aWYgKGlzU2FtZSlcblx0XHRcdFx0eyByZXR1cm4gcmVQYXJlbnQodm0sIHZvbGQsIG5ld1BhcmVudCwgbmV3SWR4KTsgfVxuXHRcdH1cblx0fVxuXG5cdGlzTW91bnRlZCAmJiBmaXJlSG9vayh2bS5ob29rcywgXCJ3aWxsUmVkcmF3XCIsIHZtLCB2bS5kYXRhKTtcblxuXHR2YXIgdm5ldyA9IHZtLnJlbmRlci5jYWxsKHZtLCB2bSwgdm0uZGF0YSwgb2xkRGlmZiwgbmV3RGlmZik7XG5cblx0aWYgKHZuZXcgPT09IHZvbGQpXG5cdFx0eyByZXR1cm4gcmVQYXJlbnQodm0sIHZvbGQsIG5ld1BhcmVudCwgbmV3SWR4KTsgfVxuXG5cdC8vIHRvZG86IHRlc3QgcmVzdWx0IG9mIHdpbGxSZWRyYXcgaG9va3MgYmVmb3JlIGNsZWFyaW5nIHJlZnNcblx0dm0ucmVmcyA9IG51bGw7XG5cblx0Ly8gYWx3YXlzIGFzc2lnbiB2bSBrZXkgdG8gcm9vdCB2bm9kZSAodGhpcyBpcyBhIGRlLW9wdClcblx0aWYgKHZtLmtleSAhPSBudWxsICYmIHZuZXcua2V5ICE9PSB2bS5rZXkpXG5cdFx0eyB2bmV3LmtleSA9IHZtLmtleTsgfVxuXG5cdHZtLm5vZGUgPSB2bmV3O1xuXG5cdGlmIChuZXdQYXJlbnQpIHtcblx0XHRwcmVQcm9jKHZuZXcsIG5ld1BhcmVudCwgbmV3SWR4LCB2bSk7XG5cdFx0bmV3UGFyZW50LmJvZHlbbmV3SWR4XSA9IHZuZXc7XG5cdH1cblx0ZWxzZSBpZiAodm9sZCAmJiB2b2xkLnBhcmVudCkge1xuXHRcdHByZVByb2Modm5ldywgdm9sZC5wYXJlbnQsIHZvbGQuaWR4LCB2bSk7XG5cdFx0dm9sZC5wYXJlbnQuYm9keVt2b2xkLmlkeF0gPSB2bmV3O1xuXHR9XG5cdGVsc2Vcblx0XHR7IHByZVByb2Modm5ldywgbnVsbCwgbnVsbCwgdm0pOyB9XG5cblx0aWYgKHdpdGhET00gIT09IGZhbHNlKSB7XG5cdFx0aWYgKHZvbGQpIHtcblx0XHRcdC8vIHJvb3Qgbm9kZSByZXBsYWNlbWVudFxuXHRcdFx0aWYgKHZvbGQudGFnICE9PSB2bmV3LnRhZyB8fCB2b2xkLmtleSAhPT0gdm5ldy5rZXkpIHtcblx0XHRcdFx0Ly8gaGFjayB0byBwcmV2ZW50IHRoZSByZXBsYWNlbWVudCBmcm9tIHRyaWdnZXJpbmcgbW91bnQvdW5tb3VudFxuXHRcdFx0XHR2b2xkLnZtID0gdm5ldy52bSA9IG51bGw7XG5cblx0XHRcdFx0dmFyIHBhckVsID0gdm9sZC5lbC5wYXJlbnROb2RlO1xuXHRcdFx0XHR2YXIgcmVmRWwgPSBuZXh0U2liKHZvbGQuZWwpO1xuXHRcdFx0XHRyZW1vdmVDaGlsZChwYXJFbCwgdm9sZC5lbCk7XG5cdFx0XHRcdGluc2VydEJlZm9yZShwYXJFbCwgaHlkcmF0ZSh2bmV3KSwgcmVmRWwpO1xuXG5cdFx0XHRcdC8vIGFub3RoZXIgaGFjayB0aGF0IGFsbG93cyBhbnkgaGlnaGVyLWxldmVsIHN5bmNDaGlsZHJlbiB0byBzZXRcblx0XHRcdFx0Ly8gcmVjb25jaWxpYXRpb24gYm91bmRzIHVzaW5nIGEgbGl2ZSBub2RlXG5cdFx0XHRcdHZvbGQuZWwgPSB2bmV3LmVsO1xuXG5cdFx0XHRcdC8vIHJlc3RvcmVcblx0XHRcdFx0dm5ldy52bSA9IHZtO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR7IHBhdGNoKHZuZXcsIHZvbGQpOyB9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHRcdHsgaHlkcmF0ZSh2bmV3KTsgfVxuXHR9XG5cblx0aXNNb3VudGVkICYmIGZpcmVIb29rKHZtLmhvb2tzLCBcImRpZFJlZHJhd1wiLCB2bSwgdm0uZGF0YSk7XG5cblx0aWYgKGlzUmVkcmF3Um9vdCAmJiBpc01vdW50ZWQpXG5cdFx0eyBkcmFpbkRpZEhvb2tzKHZtKTsgfVxuXG5cdHtcblx0XHRpZiAoaXNSZWRyYXdSb290ICYmIERFVk1PREUubXV0YXRpb25zICYmIGlzTW91bnRlZClcblx0XHRcdHsgY29uc29sZS5sb2coaW5zdHIuZW5kKCkpOyB9XG5cdH1cblxuXHRyZXR1cm4gdm07XG59XG5cbi8vIHRoaXMgYWxzbyBkb3VibGVzIGFzIG1vdmVUb1xuLy8gVE9ETz8gQHdpdGhSZWRyYXcgKHByZXZlbnQgcmVkcmF3IGZyb20gZmlyaW5nKVxuZnVuY3Rpb24gdXBkYXRlU3luYyhuZXdEYXRhLCBuZXdQYXJlbnQsIG5ld0lkeCwgd2l0aERPTSkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdGlmIChuZXdEYXRhICE9IG51bGwpIHtcblx0XHRpZiAodm0uZGF0YSAhPT0gbmV3RGF0YSkge1xuXHRcdFx0e1xuXHRcdFx0XHRkZXZOb3RpZnkoXCJEQVRBX1JFUExBQ0VEXCIsIFt2bSwgdm0uZGF0YSwgbmV3RGF0YV0pO1xuXHRcdFx0fVxuXHRcdFx0ZmlyZUhvb2sodm0uaG9va3MsIFwid2lsbFVwZGF0ZVwiLCB2bSwgbmV3RGF0YSk7XG5cdFx0XHR2bS5kYXRhID0gbmV3RGF0YTtcblxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoaXNTdHJlYW0odm0uX3N0cmVhbSkpXG5cdFx0XHRcdFx0eyB1bnN1YlN0cmVhbSh2bS5fc3RyZWFtKTsgfVxuXHRcdFx0XHRpZiAoaXNTdHJlYW0obmV3RGF0YSkpXG5cdFx0XHRcdFx0eyB2bS5fc3RyZWFtID0gaG9va1N0cmVhbTIobmV3RGF0YSwgdm0pOyB9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZtLl9yZWRyYXcobmV3UGFyZW50LCBuZXdJZHgsIHdpdGhET00pO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVFbGVtZW50KHRhZywgYXJnMSwgYXJnMiwgZmxhZ3MpIHtcblx0dmFyIGF0dHJzLCBib2R5O1xuXG5cdGlmIChhcmcyID09IG51bGwpIHtcblx0XHRpZiAoaXNQbGFpbk9iaihhcmcxKSlcblx0XHRcdHsgYXR0cnMgPSBhcmcxOyB9XG5cdFx0ZWxzZVxuXHRcdFx0eyBib2R5ID0gYXJnMTsgfVxuXHR9XG5cdGVsc2Uge1xuXHRcdGF0dHJzID0gYXJnMTtcblx0XHRib2R5ID0gYXJnMjtcblx0fVxuXG5cdHJldHVybiBpbml0RWxlbWVudE5vZGUodGFnLCBhdHRycywgYm9keSwgZmxhZ3MpO1xufVxuXG4vL2V4cG9ydCBjb25zdCBYTUxfTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCI7XG52YXIgU1ZHX05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuXG5mdW5jdGlvbiBkZWZpbmVTdmdFbGVtZW50KHRhZywgYXJnMSwgYXJnMiwgZmxhZ3MpIHtcblx0dmFyIG4gPSBkZWZpbmVFbGVtZW50KHRhZywgYXJnMSwgYXJnMiwgZmxhZ3MpO1xuXHRuLm5zID0gU1ZHX05TO1xuXHRyZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tbWVudChib2R5KSB7XG5cdHZhciBub2RlID0gbmV3IFZOb2RlO1xuXHRub2RlLnR5cGUgPSBDT01NRU5UO1xuXHRub2RlLmJvZHkgPSBib2R5O1xuXHRyZXR1cm4gbm9kZTtcbn1cblxuLy8gcGxhY2Vob2xkZXIgZm9yIGRlY2xhcmVkIHZpZXdzXG5mdW5jdGlvbiBWVmlldyh2aWV3LCBkYXRhLCBrZXksIG9wdHMpIHtcblx0dGhpcy52aWV3ID0gdmlldztcblx0dGhpcy5kYXRhID0gZGF0YTtcblx0dGhpcy5rZXkgPSBrZXk7XG5cdHRoaXMub3B0cyA9IG9wdHM7XG59XG5cblZWaWV3LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFZWaWV3LFxuXG5cdHR5cGU6IFZWSUVXLFxuXHR2aWV3OiBudWxsLFxuXHRkYXRhOiBudWxsLFxuXHRrZXk6IG51bGwsXG5cdG9wdHM6IG51bGwsXG59O1xuXG5mdW5jdGlvbiBkZWZpbmVWaWV3KHZpZXcsIGRhdGEsIGtleSwgb3B0cykge1xuXHRyZXR1cm4gbmV3IFZWaWV3KHZpZXcsIGRhdGEsIGtleSwgb3B0cyk7XG59XG5cbi8vIHBsYWNlaG9sZGVyIGZvciBpbmplY3RlZCBWaWV3TW9kZWxzXG5mdW5jdGlvbiBWTW9kZWwodm0pIHtcblx0dGhpcy52bSA9IHZtO1xufVxuXG5WTW9kZWwucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVk1vZGVsLFxuXG5cdHR5cGU6IFZNT0RFTCxcblx0dm06IG51bGwsXG59O1xuXG5mdW5jdGlvbiBpbmplY3RWaWV3KHZtKSB7XG4vL1x0aWYgKHZtLm5vZGUgPT0gbnVsbClcbi8vXHRcdHZtLl9yZWRyYXcobnVsbCwgbnVsbCwgZmFsc2UpO1xuXG4vL1x0cmV0dXJuIHZtLm5vZGU7XG5cblx0cmV0dXJuIG5ldyBWTW9kZWwodm0pO1xufVxuXG5mdW5jdGlvbiBpbmplY3RFbGVtZW50KGVsKSB7XG5cdHZhciBub2RlID0gbmV3IFZOb2RlO1xuXHRub2RlLnR5cGUgPSBFTEVNRU5UO1xuXHRub2RlLmVsID0gbm9kZS5rZXkgPSBlbDtcblx0cmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGxhenlMaXN0KGl0ZW1zLCBjZmcpIHtcblx0dmFyIGxlbiA9IGl0ZW1zLmxlbmd0aDtcblxuXHR2YXIgc2VsZiA9IHtcblx0XHRpdGVtczogaXRlbXMsXG5cdFx0bGVuZ3RoOiBsZW4sXG5cdFx0Ly8gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIGl0ZW0gaWRlbnRpdHkgKG9yIHBvc2l0aW9uPylcblx0XHRrZXk6IGZ1bmN0aW9uKGkpIHtcblx0XHRcdHJldHVybiBjZmcua2V5KGl0ZW1zW2ldLCBpKTtcblx0XHR9LFxuXHRcdC8vIGRlZmF1bHQgcmV0dXJucyAwP1xuXHRcdGRpZmY6IGZ1bmN0aW9uKGksIGRvbm9yKSB7XG5cdFx0XHR2YXIgbmV3VmFscyA9IGNmZy5kaWZmKGl0ZW1zW2ldLCBpKTtcblx0XHRcdGlmIChkb25vciA9PSBudWxsKVxuXHRcdFx0XHR7IHJldHVybiBuZXdWYWxzOyB9XG5cdFx0XHR2YXIgb2xkVmFscyA9IGRvbm9yLl9kaWZmO1xuXHRcdFx0dmFyIHNhbWUgPSBuZXdWYWxzID09PSBvbGRWYWxzIHx8IGlzQXJyKG9sZFZhbHMpID8gY21wQXJyKG5ld1ZhbHMsIG9sZFZhbHMpIDogY21wT2JqKG5ld1ZhbHMsIG9sZFZhbHMpO1xuXHRcdFx0cmV0dXJuIHNhbWUgfHwgbmV3VmFscztcblx0XHR9LFxuXHRcdHRwbDogZnVuY3Rpb24oaSkge1xuXHRcdFx0cmV0dXJuIGNmZy50cGwoaXRlbXNbaV0sIGkpO1xuXHRcdH0sXG5cdFx0bWFwOiBmdW5jdGlvbih0cGwpIHtcblx0XHRcdGNmZy50cGwgPSB0cGw7XG5cdFx0XHRyZXR1cm4gc2VsZjtcblx0XHR9LFxuXHRcdGJvZHk6IGZ1bmN0aW9uKHZub2RlKSB7XG5cdFx0XHR2YXIgbmJvZHkgPSBBcnJheShsZW4pO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdHZhciB2bm9kZTIgPSBzZWxmLnRwbChpKTtcblxuXHRcdFx0Ly9cdGlmICgodm5vZGUuZmxhZ3MgJiBLRVlFRF9MSVNUKSA9PT0gS0VZRURfTElTVCAmJiBzZWxmLiAhPSBudWxsKVxuXHRcdFx0Ly9cdFx0dm5vZGUyLmtleSA9IGdldEtleShpdGVtKTtcblxuXHRcdFx0XHR2bm9kZTIuX2RpZmYgPSBzZWxmLmRpZmYoaSk7XHRcdFx0Ly8gaG9sZHMgb2xkVmFscyBmb3IgY21wXG5cblx0XHRcdFx0bmJvZHlbaV0gPSB2bm9kZTI7XG5cblx0XHRcdFx0Ly8gcnVuIHByZXByb2MgcGFzcyAoc2hvdWxkIHRoaXMgYmUganVzdCBwcmVQcm9jIGluIGFib3ZlIGxvb3A/KSBiZW5jaFxuXHRcdFx0XHRwcmVQcm9jKHZub2RlMiwgdm5vZGUsIGkpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyByZXBsYWNlIExpc3Qgd2l0aCBnZW5lcmF0ZWQgYm9keVxuXHRcdFx0dm5vZGUuYm9keSA9IG5ib2R5O1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn1cblxudmFyIG5hbm8gPSB7XG5cdGNvbmZpZzogY29uZmlnLFxuXG5cdFZpZXdNb2RlbDogVmlld01vZGVsLFxuXHRWTm9kZTogVk5vZGUsXG5cblx0Y3JlYXRlVmlldzogY3JlYXRlVmlldyxcblxuXHRkZWZpbmVFbGVtZW50OiBkZWZpbmVFbGVtZW50LFxuXHRkZWZpbmVTdmdFbGVtZW50OiBkZWZpbmVTdmdFbGVtZW50LFxuXHRkZWZpbmVUZXh0OiBkZWZpbmVUZXh0LFxuXHRkZWZpbmVDb21tZW50OiBkZWZpbmVDb21tZW50LFxuXHRkZWZpbmVWaWV3OiBkZWZpbmVWaWV3LFxuXG5cdGluamVjdFZpZXc6IGluamVjdFZpZXcsXG5cdGluamVjdEVsZW1lbnQ6IGluamVjdEVsZW1lbnQsXG5cblx0bGF6eUxpc3Q6IGxhenlMaXN0LFxuXG5cdEZJWEVEX0JPRFk6IEZJWEVEX0JPRFksXG5cdERFRVBfUkVNT1ZFOiBERUVQX1JFTU9WRSxcblx0S0VZRURfTElTVDogS0VZRURfTElTVCxcblx0TEFaWV9MSVNUOiBMQVpZX0xJU1QsXG59O1xuXG5mdW5jdGlvbiBwcm90b1BhdGNoKG4sIGRvUmVwYWludCkge1xuXHRwYXRjaCQxKHRoaXMsIG4sIGRvUmVwYWludCk7XG59XG5cbi8vIG5ld05vZGUgY2FuIGJlIGVpdGhlciB7Y2xhc3M6IHN0eWxlOiB9IG9yIGZ1bGwgbmV3IFZOb2RlXG4vLyB3aWxsL2RpZFBhdGNoIGhvb2tzP1xuZnVuY3Rpb24gcGF0Y2gkMShvLCBuLCBkb1JlcGFpbnQpIHtcblx0aWYgKG4udHlwZSAhPSBudWxsKSB7XG5cdFx0Ly8gbm8gZnVsbCBwYXRjaGluZyBvZiB2aWV3IHJvb3RzLCBqdXN0IHVzZSByZWRyYXchXG5cdFx0aWYgKG8udm0gIT0gbnVsbClcblx0XHRcdHsgcmV0dXJuOyB9XG5cblx0XHRwcmVQcm9jKG4sIG8ucGFyZW50LCBvLmlkeCwgbnVsbCk7XG5cdFx0by5wYXJlbnQuYm9keVtvLmlkeF0gPSBuO1xuXHRcdHBhdGNoKG4sIG8pO1xuXHRcdGRvUmVwYWludCAmJiByZXBhaW50KG4pO1xuXHRcdGRyYWluRGlkSG9va3MoZ2V0Vm0obikpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIFRPRE86IHJlLWVzdGFibGlzaCByZWZzXG5cblx0XHQvLyBzaGFsbG93LWNsb25lIHRhcmdldFxuXHRcdHZhciBkb25vciA9IE9iamVjdC5jcmVhdGUobyk7XG5cdFx0Ly8gZml4YXRlIG9yaWcgYXR0cnNcblx0XHRkb25vci5hdHRycyA9IGFzc2lnbk9iaih7fSwgby5hdHRycyk7XG5cdFx0Ly8gYXNzaWduIG5ldyBhdHRycyBpbnRvIGxpdmUgdGFyZyBub2RlXG5cdFx0dmFyIG9hdHRycyA9IGFzc2lnbk9iaihvLmF0dHJzLCBuKTtcblx0XHQvLyBwcmVwZW5kIGFueSBmaXhlZCBzaG9ydGhhbmQgY2xhc3Ncblx0XHRpZiAoby5fY2xhc3MgIT0gbnVsbCkge1xuXHRcdFx0dmFyIGFjbGFzcyA9IG9hdHRycy5jbGFzcztcblx0XHRcdG9hdHRycy5jbGFzcyA9IGFjbGFzcyAhPSBudWxsICYmIGFjbGFzcyAhPT0gXCJcIiA/IG8uX2NsYXNzICsgXCIgXCIgKyBhY2xhc3MgOiBvLl9jbGFzcztcblx0XHR9XG5cblx0XHRwYXRjaEF0dHJzKG8sIGRvbm9yKTtcblxuXHRcdGRvUmVwYWludCAmJiByZXBhaW50KG8pO1xuXHR9XG59XG5cblZOb2RlUHJvdG8ucGF0Y2ggPSBwcm90b1BhdGNoO1xuXG5mdW5jdGlvbiBuZXh0U3ViVm1zKG4sIGFjY3VtKSB7XG5cdHZhciBib2R5ID0gbi5ib2R5O1xuXG5cdGlmIChpc0Fycihib2R5KSkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIG4yID0gYm9keVtpXTtcblxuXHRcdFx0aWYgKG4yLnZtICE9IG51bGwpXG5cdFx0XHRcdHsgYWNjdW0ucHVzaChuMi52bSk7IH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0eyBuZXh0U3ViVm1zKG4yLCBhY2N1bSk7IH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYWNjdW07XG59XG5cbmZ1bmN0aW9uIGRlZmluZUVsZW1lbnRTcHJlYWQodGFnKSB7XG5cdHZhciBhcmdzID0gYXJndW1lbnRzO1xuXHR2YXIgbGVuID0gYXJncy5sZW5ndGg7XG5cdHZhciBib2R5LCBhdHRycztcblxuXHRpZiAobGVuID4gMSkge1xuXHRcdHZhciBib2R5SWR4ID0gMTtcblxuXHRcdGlmIChpc1BsYWluT2JqKGFyZ3NbMV0pKSB7XG5cdFx0XHRhdHRycyA9IGFyZ3NbMV07XG5cdFx0XHRib2R5SWR4ID0gMjtcblx0XHR9XG5cblx0XHRpZiAobGVuID09PSBib2R5SWR4ICsgMSAmJiAoaXNWYWwoYXJnc1tib2R5SWR4XSkgfHwgaXNBcnIoYXJnc1tib2R5SWR4XSkgfHwgYXR0cnMgJiYgKGF0dHJzLl9mbGFncyAmIExBWllfTElTVCkgPT09IExBWllfTElTVCkpXG5cdFx0XHR7IGJvZHkgPSBhcmdzW2JvZHlJZHhdOyB9XG5cdFx0ZWxzZVxuXHRcdFx0eyBib2R5ID0gc2xpY2VBcmdzKGFyZ3MsIGJvZHlJZHgpOyB9XG5cdH1cblxuXHRyZXR1cm4gaW5pdEVsZW1lbnROb2RlKHRhZywgYXR0cnMsIGJvZHkpO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVTdmdFbGVtZW50U3ByZWFkKCkge1xuXHR2YXIgbiA9IGRlZmluZUVsZW1lbnRTcHJlYWQuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcblx0bi5ucyA9IFNWR19OUztcblx0cmV0dXJuIG47XG59XG5cblZpZXdNb2RlbFByb3RvLmVtaXQgPSBlbWl0O1xuVmlld01vZGVsUHJvdG8ub25lbWl0ID0gbnVsbDtcblxuVmlld01vZGVsUHJvdG8uYm9keSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gbmV4dFN1YlZtcyh0aGlzLm5vZGUsIFtdKTtcbn07XG5cbm5hbm8uZGVmaW5lRWxlbWVudFNwcmVhZCA9IGRlZmluZUVsZW1lbnRTcHJlYWQ7XG5uYW5vLmRlZmluZVN2Z0VsZW1lbnRTcHJlYWQgPSBkZWZpbmVTdmdFbGVtZW50U3ByZWFkO1xuXG5WaWV3TW9kZWxQcm90by5fc3RyZWFtID0gbnVsbDtcblxuZnVuY3Rpb24gcHJvdG9BdHRhY2goZWwpIHtcblx0dmFyIHZtID0gdGhpcztcblx0aWYgKHZtLm5vZGUgPT0gbnVsbClcblx0XHR7IHZtLl9yZWRyYXcobnVsbCwgbnVsbCwgZmFsc2UpOyB9XG5cblx0YXR0YWNoKHZtLm5vZGUsIGVsKTtcblxuXHRyZXR1cm4gdm07XG59XG5cbi8vIHZlcnkgc2ltaWxhciB0byBoeWRyYXRlLCBUT0RPOiBkcnlcbmZ1bmN0aW9uIGF0dGFjaCh2bm9kZSwgd2l0aEVsKSB7XG5cdHZub2RlLmVsID0gd2l0aEVsO1xuXHR3aXRoRWwuX25vZGUgPSB2bm9kZTtcblxuXHR2YXIgbmF0dHJzID0gdm5vZGUuYXR0cnM7XG5cblx0Zm9yICh2YXIga2V5IGluIG5hdHRycykge1xuXHRcdHZhciBudmFsID0gbmF0dHJzW2tleV07XG5cdFx0dmFyIGlzRHluID0gaXNEeW5Qcm9wKHZub2RlLnRhZywga2V5KTtcblxuXHRcdGlmIChpc1N0eWxlUHJvcChrZXkpIHx8IGlzU3BsUHJvcChrZXkpKSB7fVxuXHRcdGVsc2UgaWYgKGlzRXZQcm9wKGtleSkpXG5cdFx0XHR7IHBhdGNoRXZlbnQodm5vZGUsIGtleSwgbnZhbCk7IH1cblx0XHRlbHNlIGlmIChudmFsICE9IG51bGwgJiYgaXNEeW4pXG5cdFx0XHR7IHNldEF0dHIodm5vZGUsIGtleSwgbnZhbCwgaXNEeW4pOyB9XG5cdH1cblxuXHRpZiAoKHZub2RlLmZsYWdzICYgTEFaWV9MSVNUKSA9PT0gTEFaWV9MSVNUKVxuXHRcdHsgdm5vZGUuYm9keS5ib2R5KHZub2RlKTsgfVxuXG5cdGlmIChpc0Fycih2bm9kZS5ib2R5KSAmJiB2bm9kZS5ib2R5Lmxlbmd0aCA+IDApIHtcblx0XHR2YXIgYyA9IHdpdGhFbC5maXJzdENoaWxkO1xuXHRcdHZhciBpID0gMDtcblx0XHR2YXIgdiA9IHZub2RlLmJvZHlbaV07XG5cdFx0ZG8ge1xuXHRcdFx0aWYgKHYudHlwZSA9PT0gVlZJRVcpXG5cdFx0XHRcdHsgdiA9IGNyZWF0ZVZpZXcodi52aWV3LCB2LmRhdGEsIHYua2V5LCB2Lm9wdHMpLl9yZWRyYXcodm5vZGUsIGksIGZhbHNlKS5ub2RlOyB9XG5cdFx0XHRlbHNlIGlmICh2LnR5cGUgPT09IFZNT0RFTClcblx0XHRcdFx0eyB2ID0gdi5ub2RlIHx8IHYuX3JlZHJhdyh2bm9kZSwgaSwgZmFsc2UpLm5vZGU7IH1cblxuXHRcdFx0e1xuXHRcdFx0XHRpZiAodm5vZGUudGFnID09PSBcInRhYmxlXCIgJiYgdi50YWcgPT09IFwidHJcIikge1xuXHRcdFx0XHRcdGRldk5vdGlmeShcIkFUVEFDSF9JTVBMSUNJVF9UQk9EWVwiLCBbdm5vZGUsIHZdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRhdHRhY2godiwgYyk7XG5cdFx0fSB3aGlsZSAoKGMgPSBjLm5leHRTaWJsaW5nKSAmJiAodiA9IHZub2RlLmJvZHlbKytpXSkpXG5cdH1cbn1cblxuZnVuY3Rpb24gdm1Qcm90b0h0bWwoZHluUHJvcHMpIHtcblx0dmFyIHZtID0gdGhpcztcblxuXHRpZiAodm0ubm9kZSA9PSBudWxsKVxuXHRcdHsgdm0uX3JlZHJhdyhudWxsLCBudWxsLCBmYWxzZSk7IH1cblxuXHRyZXR1cm4gaHRtbCh2bS5ub2RlLCBkeW5Qcm9wcyk7XG59XG5cbmZ1bmN0aW9uIHZQcm90b0h0bWwoZHluUHJvcHMpIHtcblx0cmV0dXJuIGh0bWwodGhpcywgZHluUHJvcHMpO1xufVxuXG5mdW5jdGlvbiBjYW1lbERhc2godmFsKSB7XG5cdHJldHVybiB2YWwucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gc3R5bGVTdHIoY3NzKSB7XG5cdHZhciBzdHlsZSA9IFwiXCI7XG5cblx0Zm9yICh2YXIgcG5hbWUgaW4gY3NzKSB7XG5cdFx0aWYgKGNzc1twbmFtZV0gIT0gbnVsbClcblx0XHRcdHsgc3R5bGUgKz0gY2FtZWxEYXNoKHBuYW1lKSArIFwiOiBcIiArIGF1dG9QeChwbmFtZSwgY3NzW3BuYW1lXSkgKyAnOyAnOyB9XG5cdH1cblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHRvU3RyKHZhbCkge1xuXHRyZXR1cm4gdmFsID09IG51bGwgPyAnJyA6ICcnK3ZhbDtcbn1cblxudmFyIHZvaWRUYWdzID0ge1xuICAgIGFyZWE6IHRydWUsXG4gICAgYmFzZTogdHJ1ZSxcbiAgICBicjogdHJ1ZSxcbiAgICBjb2w6IHRydWUsXG4gICAgY29tbWFuZDogdHJ1ZSxcbiAgICBlbWJlZDogdHJ1ZSxcbiAgICBocjogdHJ1ZSxcbiAgICBpbWc6IHRydWUsXG4gICAgaW5wdXQ6IHRydWUsXG4gICAga2V5Z2VuOiB0cnVlLFxuICAgIGxpbms6IHRydWUsXG4gICAgbWV0YTogdHJ1ZSxcbiAgICBwYXJhbTogdHJ1ZSxcbiAgICBzb3VyY2U6IHRydWUsXG4gICAgdHJhY2s6IHRydWUsXG5cdHdicjogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZXNjSHRtbChzKSB7XG5cdHMgPSB0b1N0cihzKTtcblxuXHRmb3IgKHZhciBpID0gMCwgb3V0ID0gJyc7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG5cdFx0c3dpdGNoIChzW2ldKSB7XG5cdFx0XHRjYXNlICcmJzogb3V0ICs9ICcmYW1wOyc7ICBicmVhaztcblx0XHRcdGNhc2UgJzwnOiBvdXQgKz0gJyZsdDsnOyAgIGJyZWFrO1xuXHRcdFx0Y2FzZSAnPic6IG91dCArPSAnJmd0Oyc7ICAgYnJlYWs7XG5cdFx0Ly9cdGNhc2UgJ1wiJzogb3V0ICs9ICcmcXVvdDsnOyBicmVhaztcblx0XHQvL1x0Y2FzZSBcIidcIjogb3V0ICs9ICcmIzAzOTsnOyBicmVhaztcblx0XHQvL1x0Y2FzZSAnLyc6IG91dCArPSAnJiN4MmY7JzsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiAgb3V0ICs9IHNbaV07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gZXNjUXVvdGVzKHMpIHtcblx0cyA9IHRvU3RyKHMpO1xuXG5cdGZvciAodmFyIGkgPSAwLCBvdXQgPSAnJzsgaSA8IHMubGVuZ3RoOyBpKyspXG5cdFx0eyBvdXQgKz0gc1tpXSA9PT0gJ1wiJyA/ICcmcXVvdDsnIDogc1tpXTsgfVx0XHQvLyBhbHNvICY/XG5cblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gZWFjaEh0bWwoYXJyLCBkeW5Qcm9wcykge1xuXHR2YXIgYnVmID0gJyc7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKVxuXHRcdHsgYnVmICs9IGh0bWwoYXJyW2ldLCBkeW5Qcm9wcyk7IH1cblx0cmV0dXJuIGJ1Zjtcbn1cblxudmFyIGlubmVySFRNTCA9IFwiLmlubmVySFRNTFwiO1xuXG5mdW5jdGlvbiBodG1sKG5vZGUsIGR5blByb3BzKSB7XG5cdHZhciBvdXQsIHN0eWxlO1xuXG5cdHN3aXRjaCAobm9kZS50eXBlKSB7XG5cdFx0Y2FzZSBWVklFVzpcblx0XHRcdG91dCA9IGNyZWF0ZVZpZXcobm9kZS52aWV3LCBub2RlLmRhdGEsIG5vZGUua2V5LCBub2RlLm9wdHMpLmh0bWwoZHluUHJvcHMpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBWTU9ERUw6XG5cdFx0XHRvdXQgPSBub2RlLnZtLmh0bWwoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgRUxFTUVOVDpcblx0XHRcdGlmIChub2RlLmVsICE9IG51bGwgJiYgbm9kZS50YWcgPT0gbnVsbCkge1xuXHRcdFx0XHRvdXQgPSBub2RlLmVsLm91dGVySFRNTDtcdFx0Ly8gcHJlLWV4aXN0aW5nIGRvbSBlbGVtZW50cyAoZG9lcyBub3QgY3VycmVudGx5IGFjY291bnQgZm9yIGFueSBwcm9wcyBhcHBsaWVkIHRvIHRoZW0pXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYnVmID0gXCJcIjtcblxuXHRcdFx0YnVmICs9IFwiPFwiICsgbm9kZS50YWc7XG5cblx0XHRcdHZhciBhdHRycyA9IG5vZGUuYXR0cnMsXG5cdFx0XHRcdGhhc0F0dHJzID0gYXR0cnMgIT0gbnVsbDtcblxuXHRcdFx0aWYgKGhhc0F0dHJzKSB7XG5cdFx0XHRcdGZvciAodmFyIHBuYW1lIGluIGF0dHJzKSB7XG5cdFx0XHRcdFx0aWYgKGlzRXZQcm9wKHBuYW1lKSB8fCBwbmFtZVswXSA9PT0gXCIuXCIgfHwgcG5hbWVbMF0gPT09IFwiX1wiIHx8IGR5blByb3BzID09PSBmYWxzZSAmJiBpc0R5blByb3Aobm9kZS50YWcsIHBuYW1lKSlcblx0XHRcdFx0XHRcdHsgY29udGludWU7IH1cblxuXHRcdFx0XHRcdHZhciB2YWwgPSBhdHRyc1twbmFtZV07XG5cblx0XHRcdFx0XHRpZiAocG5hbWUgPT09IFwic3R5bGVcIiAmJiB2YWwgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0c3R5bGUgPSB0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiID8gc3R5bGVTdHIodmFsKSA6IHZhbDtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICh2YWwgPT09IHRydWUpXG5cdFx0XHRcdFx0XHR7IGJ1ZiArPSBcIiBcIiArIGVzY0h0bWwocG5hbWUpICsgJz1cIlwiJzsgfVxuXHRcdFx0XHRcdGVsc2UgaWYgKHZhbCA9PT0gZmFsc2UpIHt9XG5cdFx0XHRcdFx0ZWxzZSBpZiAodmFsICE9IG51bGwpXG5cdFx0XHRcdFx0XHR7IGJ1ZiArPSBcIiBcIiArIGVzY0h0bWwocG5hbWUpICsgJz1cIicgKyBlc2NRdW90ZXModmFsKSArICdcIic7IH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzdHlsZSAhPSBudWxsKVxuXHRcdFx0XHRcdHsgYnVmICs9ICcgc3R5bGU9XCInICsgZXNjUXVvdGVzKHN0eWxlLnRyaW0oKSkgKyAnXCInOyB9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIGJvZHktbGVzcyBzdmcgbm9kZSwgYXV0by1jbG9zZSAmIHJldHVyblxuXHRcdFx0aWYgKG5vZGUuYm9keSA9PSBudWxsICYmIG5vZGUubnMgIT0gbnVsbCAmJiBub2RlLnRhZyAhPT0gXCJzdmdcIilcblx0XHRcdFx0eyByZXR1cm4gYnVmICsgXCIvPlwiOyB9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHsgYnVmICs9IFwiPlwiOyB9XG5cblx0XHRcdGlmICghdm9pZFRhZ3Nbbm9kZS50YWddKSB7XG5cdFx0XHRcdGlmIChoYXNBdHRycyAmJiBhdHRyc1tpbm5lckhUTUxdICE9IG51bGwpXG5cdFx0XHRcdFx0eyBidWYgKz0gYXR0cnNbaW5uZXJIVE1MXTsgfVxuXHRcdFx0XHRlbHNlIGlmIChpc0Fycihub2RlLmJvZHkpKVxuXHRcdFx0XHRcdHsgYnVmICs9IGVhY2hIdG1sKG5vZGUuYm9keSwgZHluUHJvcHMpOyB9XG5cdFx0XHRcdGVsc2UgaWYgKChub2RlLmZsYWdzICYgTEFaWV9MSVNUKSA9PT0gTEFaWV9MSVNUKSB7XG5cdFx0XHRcdFx0bm9kZS5ib2R5LmJvZHkobm9kZSk7XG5cdFx0XHRcdFx0YnVmICs9IGVhY2hIdG1sKG5vZGUuYm9keSwgZHluUHJvcHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR7IGJ1ZiArPSBlc2NIdG1sKG5vZGUuYm9keSk7IH1cblxuXHRcdFx0XHRidWYgKz0gXCI8L1wiICsgbm9kZS50YWcgKyBcIj5cIjtcblx0XHRcdH1cblx0XHRcdG91dCA9IGJ1Zjtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgVEVYVDpcblx0XHRcdG91dCA9IGVzY0h0bWwobm9kZS5ib2R5KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgQ09NTUVOVDpcblx0XHRcdG91dCA9IFwiPCEtLVwiICsgZXNjSHRtbChub2RlLmJvZHkpICsgXCItLT5cIjtcblx0XHRcdGJyZWFrO1xuXHR9XG5cblx0cmV0dXJuIG91dDtcbn1cblxuVmlld01vZGVsUHJvdG8uYXR0YWNoID0gcHJvdG9BdHRhY2g7XG5cblZpZXdNb2RlbFByb3RvLmh0bWwgPSB2bVByb3RvSHRtbDtcblZOb2RlUHJvdG8uaHRtbCA9IHZQcm90b0h0bWw7XG5cbm5hbm8uREVWTU9ERSA9IERFVk1PREU7XG5cbnJldHVybiBuYW5vO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tdm0uZGV2LmpzLm1hcFxuIiwiLyoqXG4gKiBtYXJrZWQgLSBhIG1hcmtkb3duIHBhcnNlclxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMTgsIENocmlzdG9waGVyIEplZmZyZXkuIChNSVQgTGljZW5zZWQpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkXG4gKi9cblxuOyhmdW5jdGlvbihyb290KSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQmxvY2stTGV2ZWwgR3JhbW1hclxuICovXG5cbnZhciBibG9jayA9IHtcbiAgbmV3bGluZTogL15cXG4rLyxcbiAgY29kZTogL14oIHs0fVteXFxuXStcXG4qKSsvLFxuICBmZW5jZXM6IG5vb3AsXG4gIGhyOiAvXiB7MCwzfSgoPzotICopezMsfXwoPzpfICopezMsfXwoPzpcXCogKil7Myx9KSg/Olxcbit8JCkvLFxuICBoZWFkaW5nOiAvXiAqKCN7MSw2fSkgKihbXlxcbl0rPykgKig/OiMrICopPyg/Olxcbit8JCkvLFxuICBucHRhYmxlOiBub29wLFxuICBibG9ja3F1b3RlOiAvXiggezAsM30+ID8ocGFyYWdyYXBofFteXFxuXSopKD86XFxufCQpKSsvLFxuICBsaXN0OiAvXiggKikoYnVsbCkgW1xcc1xcU10rPyg/OmhyfGRlZnxcXG57Mix9KD8hICkoPyFcXDFidWxsIClcXG4qfFxccyokKS8sXG4gIGh0bWw6ICdeIHswLDN9KD86JyAvLyBvcHRpb25hbCBpbmRlbnRhdGlvblxuICAgICsgJzwoc2NyaXB0fHByZXxzdHlsZSlbXFxcXHM+XVtcXFxcc1xcXFxTXSo/KD86PC9cXFxcMT5bXlxcXFxuXSpcXFxcbit8JCknIC8vICgxKVxuICAgICsgJ3xjb21tZW50W15cXFxcbl0qKFxcXFxuK3wkKScgLy8gKDIpXG4gICAgKyAnfDxcXFxcP1tcXFxcc1xcXFxTXSo/XFxcXD8+XFxcXG4qJyAvLyAoMylcbiAgICArICd8PCFbQS1aXVtcXFxcc1xcXFxTXSo/PlxcXFxuKicgLy8gKDQpXG4gICAgKyAnfDwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj9cXFxcXVxcXFxdPlxcXFxuKicgLy8gKDUpXG4gICAgKyAnfDwvPyh0YWcpKD86ICt8XFxcXG58Lz8+KVtcXFxcc1xcXFxTXSo/KD86XFxcXG57Mix9fCQpJyAvLyAoNilcbiAgICArICd8PCg/IXNjcmlwdHxwcmV8c3R5bGUpKFthLXpdW1xcXFx3LV0qKSg/OmF0dHJpYnV0ZSkqPyAqLz8+KD89XFxcXGgqXFxcXG4pW1xcXFxzXFxcXFNdKj8oPzpcXFxcbnsyLH18JCknIC8vICg3KSBvcGVuIHRhZ1xuICAgICsgJ3w8Lyg/IXNjcmlwdHxwcmV8c3R5bGUpW2Etel1bXFxcXHctXSpcXFxccyo+KD89XFxcXGgqXFxcXG4pW1xcXFxzXFxcXFNdKj8oPzpcXFxcbnsyLH18JCknIC8vICg3KSBjbG9zaW5nIHRhZ1xuICAgICsgJyknLFxuICBkZWY6IC9eIHswLDN9XFxbKGxhYmVsKVxcXTogKlxcbj8gKjw/KFteXFxzPl0rKT4/KD86KD86ICtcXG4/ICp8ICpcXG4gKikodGl0bGUpKT8gKig/Olxcbit8JCkvLFxuICB0YWJsZTogbm9vcCxcbiAgbGhlYWRpbmc6IC9eKFteXFxuXSspXFxuICooPXwtKXsyLH0gKig/Olxcbit8JCkvLFxuICBwYXJhZ3JhcGg6IC9eKFteXFxuXSsoPzpcXG4oPyFocnxoZWFkaW5nfGxoZWFkaW5nfCB7MCwzfT58PFxcLz8oPzp0YWcpKD86ICt8XFxufFxcLz8+KXw8KD86c2NyaXB0fHByZXxzdHlsZXwhLS0pKVteXFxuXSspKikvLFxuICB0ZXh0OiAvXlteXFxuXSsvXG59O1xuXG5ibG9jay5fbGFiZWwgPSAvKD8hXFxzKlxcXSkoPzpcXFxcW1xcW1xcXV18W15cXFtcXF1dKSsvO1xuYmxvY2suX3RpdGxlID0gLyg/OlwiKD86XFxcXFwiP3xbXlwiXFxcXF0pKlwifCdbXidcXG5dKig/OlxcblteJ1xcbl0rKSpcXG4/J3xcXChbXigpXSpcXCkpLztcbmJsb2NrLmRlZiA9IGVkaXQoYmxvY2suZGVmKVxuICAucmVwbGFjZSgnbGFiZWwnLCBibG9jay5fbGFiZWwpXG4gIC5yZXBsYWNlKCd0aXRsZScsIGJsb2NrLl90aXRsZSlcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLmJ1bGxldCA9IC8oPzpbKistXXxcXGQrXFwuKS87XG5ibG9jay5pdGVtID0gL14oICopKGJ1bGwpIFteXFxuXSooPzpcXG4oPyFcXDFidWxsIClbXlxcbl0qKSovO1xuYmxvY2suaXRlbSA9IGVkaXQoYmxvY2suaXRlbSwgJ2dtJylcbiAgLnJlcGxhY2UoL2J1bGwvZywgYmxvY2suYnVsbGV0KVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2subGlzdCA9IGVkaXQoYmxvY2subGlzdClcbiAgLnJlcGxhY2UoL2J1bGwvZywgYmxvY2suYnVsbGV0KVxuICAucmVwbGFjZSgnaHInLCAnXFxcXG4rKD89XFxcXDE/KD86KD86LSAqKXszLH18KD86XyAqKXszLH18KD86XFxcXCogKil7Myx9KSg/OlxcXFxuK3wkKSknKVxuICAucmVwbGFjZSgnZGVmJywgJ1xcXFxuKyg/PScgKyBibG9jay5kZWYuc291cmNlICsgJyknKVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2suX3RhZyA9ICdhZGRyZXNzfGFydGljbGV8YXNpZGV8YmFzZXxiYXNlZm9udHxibG9ja3F1b3RlfGJvZHl8Y2FwdGlvbidcbiAgKyAnfGNlbnRlcnxjb2x8Y29sZ3JvdXB8ZGR8ZGV0YWlsc3xkaWFsb2d8ZGlyfGRpdnxkbHxkdHxmaWVsZHNldHxmaWdjYXB0aW9uJ1xuICArICd8ZmlndXJlfGZvb3Rlcnxmb3JtfGZyYW1lfGZyYW1lc2V0fGhbMS02XXxoZWFkfGhlYWRlcnxocnxodG1sfGlmcmFtZSdcbiAgKyAnfGxlZ2VuZHxsaXxsaW5rfG1haW58bWVudXxtZW51aXRlbXxtZXRhfG5hdnxub2ZyYW1lc3xvbHxvcHRncm91cHxvcHRpb24nXG4gICsgJ3xwfHBhcmFtfHNlY3Rpb258c291cmNlfHN1bW1hcnl8dGFibGV8dGJvZHl8dGR8dGZvb3R8dGh8dGhlYWR8dGl0bGV8dHInXG4gICsgJ3x0cmFja3x1bCc7XG5ibG9jay5fY29tbWVudCA9IC88IS0tKD8hLT8+KVtcXHNcXFNdKj8tLT4vO1xuYmxvY2suaHRtbCA9IGVkaXQoYmxvY2suaHRtbCwgJ2knKVxuICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZylcbiAgLnJlcGxhY2UoJ2F0dHJpYnV0ZScsIC8gK1thLXpBLVo6X11bXFx3LjotXSooPzogKj0gKlwiW15cIlxcbl0qXCJ8ICo9IConW14nXFxuXSonfCAqPSAqW15cXHNcIic9PD5gXSspPy8pXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5wYXJhZ3JhcGggPSBlZGl0KGJsb2NrLnBhcmFncmFwaClcbiAgLnJlcGxhY2UoJ2hyJywgYmxvY2suaHIpXG4gIC5yZXBsYWNlKCdoZWFkaW5nJywgYmxvY2suaGVhZGluZylcbiAgLnJlcGxhY2UoJ2xoZWFkaW5nJywgYmxvY2subGhlYWRpbmcpXG4gIC5yZXBsYWNlKCd0YWcnLCBibG9jay5fdGFnKSAvLyBwYXJzIGNhbiBiZSBpbnRlcnJ1cHRlZCBieSB0eXBlICg2KSBodG1sIGJsb2Nrc1xuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2suYmxvY2txdW90ZSA9IGVkaXQoYmxvY2suYmxvY2txdW90ZSlcbiAgLnJlcGxhY2UoJ3BhcmFncmFwaCcsIGJsb2NrLnBhcmFncmFwaClcbiAgLmdldFJlZ2V4KCk7XG5cbi8qKlxuICogTm9ybWFsIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay5ub3JtYWwgPSBtZXJnZSh7fSwgYmxvY2spO1xuXG4vKipcbiAqIEdGTSBCbG9jayBHcmFtbWFyXG4gKi9cblxuYmxvY2suZ2ZtID0gbWVyZ2Uoe30sIGJsb2NrLm5vcm1hbCwge1xuICBmZW5jZXM6IC9eICooYHszLH18fnszLH0pWyBcXC5dKihcXFMrKT8gKlxcbihbXFxzXFxTXSo/KVxcbj8gKlxcMSAqKD86XFxuK3wkKS8sXG4gIHBhcmFncmFwaDogL14vLFxuICBoZWFkaW5nOiAvXiAqKCN7MSw2fSkgKyhbXlxcbl0rPykgKiMqICooPzpcXG4rfCQpL1xufSk7XG5cbmJsb2NrLmdmbS5wYXJhZ3JhcGggPSBlZGl0KGJsb2NrLnBhcmFncmFwaClcbiAgLnJlcGxhY2UoJyg/IScsICcoPyEnXG4gICAgKyBibG9jay5nZm0uZmVuY2VzLnNvdXJjZS5yZXBsYWNlKCdcXFxcMScsICdcXFxcMicpICsgJ3wnXG4gICAgKyBibG9jay5saXN0LnNvdXJjZS5yZXBsYWNlKCdcXFxcMScsICdcXFxcMycpICsgJ3wnKVxuICAuZ2V0UmVnZXgoKTtcblxuLyoqXG4gKiBHRk0gKyBUYWJsZXMgQmxvY2sgR3JhbW1hclxuICovXG5cbmJsb2NrLnRhYmxlcyA9IG1lcmdlKHt9LCBibG9jay5nZm0sIHtcbiAgbnB0YWJsZTogL14gKihbXnxcXG4gXS4qXFx8LiopXFxuICooWy06XSsgKlxcfFstfCA6XSopKD86XFxuKCg/Oi4qW14+XFxuIF0uKig/OlxcbnwkKSkqKVxcbip8JCkvLFxuICB0YWJsZTogL14gKlxcfCguKylcXG4gKlxcfD8oICpbLTpdK1stfCA6XSopKD86XFxuKCg/OiAqW14+XFxuIF0uKig/OlxcbnwkKSkqKVxcbip8JCkvXG59KTtcblxuLyoqXG4gKiBQZWRhbnRpYyBncmFtbWFyXG4gKi9cblxuYmxvY2sucGVkYW50aWMgPSBtZXJnZSh7fSwgYmxvY2subm9ybWFsLCB7XG4gIGh0bWw6IGVkaXQoXG4gICAgJ14gKig/OmNvbW1lbnQgKig/OlxcXFxufFxcXFxzKiQpJ1xuICAgICsgJ3w8KHRhZylbXFxcXHNcXFxcU10rPzwvXFxcXDE+ICooPzpcXFxcbnsyLH18XFxcXHMqJCknIC8vIGNsb3NlZCB0YWdcbiAgICArICd8PHRhZyg/OlwiW15cIl0qXCJ8XFwnW15cXCddKlxcJ3xcXFxcc1teXFwnXCIvPlxcXFxzXSopKj8vPz4gKig/OlxcXFxuezIsfXxcXFxccyokKSknKVxuICAgIC5yZXBsYWNlKCdjb21tZW50JywgYmxvY2suX2NvbW1lbnQpXG4gICAgLnJlcGxhY2UoL3RhZy9nLCAnKD8hKD86J1xuICAgICAgKyAnYXxlbXxzdHJvbmd8c21hbGx8c3xjaXRlfHF8ZGZufGFiYnJ8ZGF0YXx0aW1lfGNvZGV8dmFyfHNhbXB8a2JkfHN1YidcbiAgICAgICsgJ3xzdXB8aXxifHV8bWFya3xydWJ5fHJ0fHJwfGJkaXxiZG98c3Bhbnxicnx3YnJ8aW5zfGRlbHxpbWcpJ1xuICAgICAgKyAnXFxcXGIpXFxcXHcrKD8hOnxbXlxcXFx3XFxcXHNAXSpAKVxcXFxiJylcbiAgICAuZ2V0UmVnZXgoKSxcbiAgZGVmOiAvXiAqXFxbKFteXFxdXSspXFxdOiAqPD8oW15cXHM+XSspPj8oPzogKyhbXCIoXVteXFxuXStbXCIpXSkpPyAqKD86XFxuK3wkKS9cbn0pO1xuXG4vKipcbiAqIEJsb2NrIExleGVyXG4gKi9cblxuZnVuY3Rpb24gTGV4ZXIob3B0aW9ucykge1xuICB0aGlzLnRva2VucyA9IFtdO1xuICB0aGlzLnRva2Vucy5saW5rcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xuICB0aGlzLnJ1bGVzID0gYmxvY2subm9ybWFsO1xuXG4gIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICB0aGlzLnJ1bGVzID0gYmxvY2sucGVkYW50aWM7XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmdmbSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudGFibGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzID0gYmxvY2sudGFibGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJ1bGVzID0gYmxvY2suZ2ZtO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEV4cG9zZSBCbG9jayBSdWxlc1xuICovXG5cbkxleGVyLnJ1bGVzID0gYmxvY2s7XG5cbi8qKlxuICogU3RhdGljIExleCBNZXRob2RcbiAqL1xuXG5MZXhlci5sZXggPSBmdW5jdGlvbihzcmMsIG9wdGlvbnMpIHtcbiAgdmFyIGxleGVyID0gbmV3IExleGVyKG9wdGlvbnMpO1xuICByZXR1cm4gbGV4ZXIubGV4KHNyYyk7XG59O1xuXG4vKipcbiAqIFByZXByb2Nlc3NpbmdcbiAqL1xuXG5MZXhlci5wcm90b3R5cGUubGV4ID0gZnVuY3Rpb24oc3JjKSB7XG4gIHNyYyA9IHNyY1xuICAgIC5yZXBsYWNlKC9cXHJcXG58XFxyL2csICdcXG4nKVxuICAgIC5yZXBsYWNlKC9cXHQvZywgJyAgICAnKVxuICAgIC5yZXBsYWNlKC9cXHUwMGEwL2csICcgJylcbiAgICAucmVwbGFjZSgvXFx1MjQyNC9nLCAnXFxuJyk7XG5cbiAgcmV0dXJuIHRoaXMudG9rZW4oc3JjLCB0cnVlKTtcbn07XG5cbi8qKlxuICogTGV4aW5nXG4gKi9cblxuTGV4ZXIucHJvdG90eXBlLnRva2VuID0gZnVuY3Rpb24oc3JjLCB0b3ApIHtcbiAgc3JjID0gc3JjLnJlcGxhY2UoL14gKyQvZ20sICcnKTtcbiAgdmFyIG5leHQsXG4gICAgICBsb29zZSxcbiAgICAgIGNhcCxcbiAgICAgIGJ1bGwsXG4gICAgICBiLFxuICAgICAgaXRlbSxcbiAgICAgIGxpc3RTdGFydCxcbiAgICAgIGxpc3RJdGVtcyxcbiAgICAgIHQsXG4gICAgICBzcGFjZSxcbiAgICAgIGksXG4gICAgICB0YWcsXG4gICAgICBsLFxuICAgICAgaXNvcmRlcmVkLFxuICAgICAgaXN0YXNrLFxuICAgICAgaXNjaGVja2VkO1xuXG4gIHdoaWxlIChzcmMpIHtcbiAgICAvLyBuZXdsaW5lXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubmV3bGluZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBpZiAoY2FwWzBdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ3NwYWNlJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb2RlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuY29kZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBjYXAgPSBjYXBbMF0ucmVwbGFjZSgvXiB7NH0vZ20sICcnKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgIHRleHQ6ICF0aGlzLm9wdGlvbnMucGVkYW50aWNcbiAgICAgICAgICA/IHJ0cmltKGNhcCwgJ1xcbicpXG4gICAgICAgICAgOiBjYXBcbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZmVuY2VzIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZmVuY2VzLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgIGxhbmc6IGNhcFsyXSxcbiAgICAgICAgdGV4dDogY2FwWzNdIHx8ICcnXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGhlYWRpbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5oZWFkaW5nLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIGRlcHRoOiBjYXBbMV0ubGVuZ3RoLFxuICAgICAgICB0ZXh0OiBjYXBbMl1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGFibGUgbm8gbGVhZGluZyBwaXBlIChnZm0pXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy5ucHRhYmxlLmV4ZWMoc3JjKSkpIHtcbiAgICAgIGl0ZW0gPSB7XG4gICAgICAgIHR5cGU6ICd0YWJsZScsXG4gICAgICAgIGhlYWRlcjogc3BsaXRDZWxscyhjYXBbMV0ucmVwbGFjZSgvXiAqfCAqXFx8ICokL2csICcnKSksXG4gICAgICAgIGFsaWduOiBjYXBbMl0ucmVwbGFjZSgvXiAqfFxcfCAqJC9nLCAnJykuc3BsaXQoLyAqXFx8ICovKSxcbiAgICAgICAgY2VsbHM6IGNhcFszXSA/IGNhcFszXS5yZXBsYWNlKC9cXG4kLywgJycpLnNwbGl0KCdcXG4nKSA6IFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAoaXRlbS5oZWFkZXIubGVuZ3RoID09PSBpdGVtLmFsaWduLmxlbmd0aCkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmFsaWduLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJztcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSsgKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaXRlbS5jZWxsc1tpXSA9IHNwbGl0Q2VsbHMoaXRlbS5jZWxsc1tpXSwgaXRlbS5oZWFkZXIubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goaXRlbSk7XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHJcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5oci5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2hyJ1xuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBibG9ja3F1b3RlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuYmxvY2txdW90ZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnYmxvY2txdW90ZV9zdGFydCdcbiAgICAgIH0pO1xuXG4gICAgICBjYXAgPSBjYXBbMF0ucmVwbGFjZSgvXiAqPiA/L2dtLCAnJyk7XG5cbiAgICAgIC8vIFBhc3MgYHRvcGAgdG8ga2VlcCB0aGUgY3VycmVudFxuICAgICAgLy8gXCJ0b3BsZXZlbFwiIHN0YXRlLiBUaGlzIGlzIGV4YWN0bHlcbiAgICAgIC8vIGhvdyBtYXJrZG93bi5wbCB3b3Jrcy5cbiAgICAgIHRoaXMudG9rZW4oY2FwLCB0b3ApO1xuXG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2Jsb2NrcXVvdGVfZW5kJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGxpc3RcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saXN0LmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGJ1bGwgPSBjYXBbMl07XG4gICAgICBpc29yZGVyZWQgPSBidWxsLmxlbmd0aCA+IDE7XG5cbiAgICAgIGxpc3RTdGFydCA9IHtcbiAgICAgICAgdHlwZTogJ2xpc3Rfc3RhcnQnLFxuICAgICAgICBvcmRlcmVkOiBpc29yZGVyZWQsXG4gICAgICAgIHN0YXJ0OiBpc29yZGVyZWQgPyArYnVsbCA6ICcnLFxuICAgICAgICBsb29zZTogZmFsc2VcbiAgICAgIH07XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2gobGlzdFN0YXJ0KTtcblxuICAgICAgLy8gR2V0IGVhY2ggdG9wLWxldmVsIGl0ZW0uXG4gICAgICBjYXAgPSBjYXBbMF0ubWF0Y2godGhpcy5ydWxlcy5pdGVtKTtcblxuICAgICAgbGlzdEl0ZW1zID0gW107XG4gICAgICBuZXh0ID0gZmFsc2U7XG4gICAgICBsID0gY2FwLmxlbmd0aDtcbiAgICAgIGkgPSAwO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpdGVtID0gY2FwW2ldO1xuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgbGlzdCBpdGVtJ3MgYnVsbGV0XG4gICAgICAgIC8vIHNvIGl0IGlzIHNlZW4gYXMgdGhlIG5leHQgdG9rZW4uXG4gICAgICAgIHNwYWNlID0gaXRlbS5sZW5ndGg7XG4gICAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL14gKihbKistXXxcXGQrXFwuKSArLywgJycpO1xuXG4gICAgICAgIC8vIE91dGRlbnQgd2hhdGV2ZXIgdGhlXG4gICAgICAgIC8vIGxpc3QgaXRlbSBjb250YWlucy4gSGFja3kuXG4gICAgICAgIGlmICh+aXRlbS5pbmRleE9mKCdcXG4gJykpIHtcbiAgICAgICAgICBzcGFjZSAtPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgICBpdGVtID0gIXRoaXMub3B0aW9ucy5wZWRhbnRpY1xuICAgICAgICAgICAgPyBpdGVtLnJlcGxhY2UobmV3IFJlZ0V4cCgnXiB7MSwnICsgc3BhY2UgKyAnfScsICdnbScpLCAnJylcbiAgICAgICAgICAgIDogaXRlbS5yZXBsYWNlKC9eIHsxLDR9L2dtLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXRlcm1pbmUgd2hldGhlciB0aGUgbmV4dCBsaXN0IGl0ZW0gYmVsb25ncyBoZXJlLlxuICAgICAgICAvLyBCYWNrcGVkYWwgaWYgaXQgZG9lcyBub3QgYmVsb25nIGluIHRoaXMgbGlzdC5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zbWFydExpc3RzICYmIGkgIT09IGwgLSAxKSB7XG4gICAgICAgICAgYiA9IGJsb2NrLmJ1bGxldC5leGVjKGNhcFtpICsgMV0pWzBdO1xuICAgICAgICAgIGlmIChidWxsICE9PSBiICYmICEoYnVsbC5sZW5ndGggPiAxICYmIGIubGVuZ3RoID4gMSkpIHtcbiAgICAgICAgICAgIHNyYyA9IGNhcC5zbGljZShpICsgMSkuam9pbignXFxuJykgKyBzcmM7XG4gICAgICAgICAgICBpID0gbCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgaXRlbSBpcyBsb29zZSBvciBub3QuXG4gICAgICAgIC8vIFVzZTogLyhefFxcbikoPyEgKVteXFxuXStcXG5cXG4oPyFcXHMqJCkvXG4gICAgICAgIC8vIGZvciBkaXNjb3VudCBiZWhhdmlvci5cbiAgICAgICAgbG9vc2UgPSBuZXh0IHx8IC9cXG5cXG4oPyFcXHMqJCkvLnRlc3QoaXRlbSk7XG4gICAgICAgIGlmIChpICE9PSBsIC0gMSkge1xuICAgICAgICAgIG5leHQgPSBpdGVtLmNoYXJBdChpdGVtLmxlbmd0aCAtIDEpID09PSAnXFxuJztcbiAgICAgICAgICBpZiAoIWxvb3NlKSBsb29zZSA9IG5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9vc2UpIHtcbiAgICAgICAgICBsaXN0U3RhcnQubG9vc2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIHRhc2sgbGlzdCBpdGVtc1xuICAgICAgICBpc3Rhc2sgPSAvXlxcW1sgeFhdXFxdIC8udGVzdChpdGVtKTtcbiAgICAgICAgaXNjaGVja2VkID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoaXN0YXNrKSB7XG4gICAgICAgICAgaXNjaGVja2VkID0gaXRlbVsxXSAhPT0gJyAnO1xuICAgICAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL15cXFtbIHhYXVxcXSArLywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgdCA9IHtcbiAgICAgICAgICB0eXBlOiAnbGlzdF9pdGVtX3N0YXJ0JyxcbiAgICAgICAgICB0YXNrOiBpc3Rhc2ssXG4gICAgICAgICAgY2hlY2tlZDogaXNjaGVja2VkLFxuICAgICAgICAgIGxvb3NlOiBsb29zZVxuICAgICAgICB9O1xuXG4gICAgICAgIGxpc3RJdGVtcy5wdXNoKHQpO1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHQpO1xuXG4gICAgICAgIC8vIFJlY3Vyc2UuXG4gICAgICAgIHRoaXMudG9rZW4oaXRlbSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdsaXN0X2l0ZW1fZW5kJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxpc3RTdGFydC5sb29zZSkge1xuICAgICAgICBsID0gbGlzdEl0ZW1zLmxlbmd0aDtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgbGlzdEl0ZW1zW2ldLmxvb3NlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2xpc3RfZW5kJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGh0bWxcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5odG1sLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiB0aGlzLm9wdGlvbnMuc2FuaXRpemVcbiAgICAgICAgICA/ICdwYXJhZ3JhcGgnXG4gICAgICAgICAgOiAnaHRtbCcsXG4gICAgICAgIHByZTogIXRoaXMub3B0aW9ucy5zYW5pdGl6ZXJcbiAgICAgICAgICAmJiAoY2FwWzFdID09PSAncHJlJyB8fCBjYXBbMV0gPT09ICdzY3JpcHQnIHx8IGNhcFsxXSA9PT0gJ3N0eWxlJyksXG4gICAgICAgIHRleHQ6IGNhcFswXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBkZWZcbiAgICBpZiAodG9wICYmIChjYXAgPSB0aGlzLnJ1bGVzLmRlZi5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgaWYgKGNhcFszXSkgY2FwWzNdID0gY2FwWzNdLnN1YnN0cmluZygxLCBjYXBbM10ubGVuZ3RoIC0gMSk7XG4gICAgICB0YWcgPSBjYXBbMV0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICBpZiAoIXRoaXMudG9rZW5zLmxpbmtzW3RhZ10pIHtcbiAgICAgICAgdGhpcy50b2tlbnMubGlua3NbdGFnXSA9IHtcbiAgICAgICAgICBocmVmOiBjYXBbMl0sXG4gICAgICAgICAgdGl0bGU6IGNhcFszXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGFibGUgKGdmbSlcbiAgICBpZiAodG9wICYmIChjYXAgPSB0aGlzLnJ1bGVzLnRhYmxlLmV4ZWMoc3JjKSkpIHtcbiAgICAgIGl0ZW0gPSB7XG4gICAgICAgIHR5cGU6ICd0YWJsZScsXG4gICAgICAgIGhlYWRlcjogc3BsaXRDZWxscyhjYXBbMV0ucmVwbGFjZSgvXiAqfCAqXFx8ICokL2csICcnKSksXG4gICAgICAgIGFsaWduOiBjYXBbMl0ucmVwbGFjZSgvXiAqfFxcfCAqJC9nLCAnJykuc3BsaXQoLyAqXFx8ICovKSxcbiAgICAgICAgY2VsbHM6IGNhcFszXSA/IGNhcFszXS5yZXBsYWNlKC8oPzogKlxcfCAqKT9cXG4kLywgJycpLnNwbGl0KCdcXG4nKSA6IFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAoaXRlbS5oZWFkZXIubGVuZ3RoID09PSBpdGVtLmFsaWduLmxlbmd0aCkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmFsaWduLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJztcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSsgKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaXRlbS5jZWxsc1tpXSA9IHNwbGl0Q2VsbHMoXG4gICAgICAgICAgICBpdGVtLmNlbGxzW2ldLnJlcGxhY2UoL14gKlxcfCAqfCAqXFx8ICokL2csICcnKSxcbiAgICAgICAgICAgIGl0ZW0uaGVhZGVyLmxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKGl0ZW0pO1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGxoZWFkaW5nXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubGhlYWRpbmcuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgZGVwdGg6IGNhcFsyXSA9PT0gJz0nID8gMSA6IDIsXG4gICAgICAgIHRleHQ6IGNhcFsxXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0b3AtbGV2ZWwgcGFyYWdyYXBoXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy5wYXJhZ3JhcGguZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICAgICAgdGV4dDogY2FwWzFdLmNoYXJBdChjYXBbMV0ubGVuZ3RoIC0gMSkgPT09ICdcXG4nXG4gICAgICAgICAgPyBjYXBbMV0uc2xpY2UoMCwgLTEpXG4gICAgICAgICAgOiBjYXBbMV1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGV4dFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnRleHQuZXhlYyhzcmMpKSB7XG4gICAgICAvLyBUb3AtbGV2ZWwgc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmUuXG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgdGV4dDogY2FwWzBdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzcmMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzLnRva2Vucztcbn07XG5cbi8qKlxuICogSW5saW5lLUxldmVsIEdyYW1tYXJcbiAqL1xuXG52YXIgaW5saW5lID0ge1xuICBlc2NhcGU6IC9eXFxcXChbIVwiIyQlJicoKSorLFxcLS4vOjs8PT4/QFxcW1xcXVxcXFxeX2B7fH1+XSkvLFxuICBhdXRvbGluazogL148KHNjaGVtZTpbXlxcc1xceDAwLVxceDFmPD5dKnxlbWFpbCk+LyxcbiAgdXJsOiBub29wLFxuICB0YWc6ICdeY29tbWVudCdcbiAgICArICd8XjwvW2EtekEtWl1bXFxcXHc6LV0qXFxcXHMqPicgLy8gc2VsZi1jbG9zaW5nIHRhZ1xuICAgICsgJ3xePFthLXpBLVpdW1xcXFx3LV0qKD86YXR0cmlidXRlKSo/XFxcXHMqLz8+JyAvLyBvcGVuIHRhZ1xuICAgICsgJ3xePFxcXFw/W1xcXFxzXFxcXFNdKj9cXFxcPz4nIC8vIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24sIGUuZy4gPD9waHAgPz5cbiAgICArICd8XjwhW2EtekEtWl0rXFxcXHNbXFxcXHNcXFxcU10qPz4nIC8vIGRlY2xhcmF0aW9uLCBlLmcuIDwhRE9DVFlQRSBodG1sPlxuICAgICsgJ3xePCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+JywgLy8gQ0RBVEEgc2VjdGlvblxuICBsaW5rOiAvXiE/XFxbKGxhYmVsKVxcXVxcKGhyZWYoPzpcXHMrKHRpdGxlKSk/XFxzKlxcKS8sXG4gIHJlZmxpbms6IC9eIT9cXFsobGFiZWwpXFxdXFxbKD8hXFxzKlxcXSkoKD86XFxcXFtcXFtcXF1dP3xbXlxcW1xcXVxcXFxdKSspXFxdLyxcbiAgbm9saW5rOiAvXiE/XFxbKD8hXFxzKlxcXSkoKD86XFxbW15cXFtcXF1dKlxcXXxcXFxcW1xcW1xcXV18W15cXFtcXF1dKSopXFxdKD86XFxbXFxdKT8vLFxuICBzdHJvbmc6IC9eX18oW15cXHNdKV9fKD8hXyl8XlxcKlxcKihbXlxcc10pXFwqXFwqKD8hXFwqKXxeX18oW15cXHNdW1xcc1xcU10qP1teXFxzXSlfXyg/IV8pfF5cXCpcXCooW15cXHNdW1xcc1xcU10qP1teXFxzXSlcXCpcXCooPyFcXCopLyxcbiAgZW06IC9eXyhbXlxcc19dKV8oPyFfKXxeXFwqKFteXFxzKlwiPFxcW10pXFwqKD8hXFwqKXxeXyhbXlxcc11bXFxzXFxTXSo/W15cXHNfXSlfKD8hX3xbXlxccy5dKXxeXyhbXlxcc19dW1xcc1xcU10qP1teXFxzXSlfKD8hX3xbXlxccy5dKXxeXFwqKFteXFxzXCI8XFxbXVtcXHNcXFNdKj9bXlxccypdKVxcKig/IVxcKil8XlxcKihbXlxccypcIjxcXFtdW1xcc1xcU10qP1teXFxzXSlcXCooPyFcXCopLyxcbiAgY29kZTogL14oYCspKFteYF18W15gXVtcXHNcXFNdKj9bXmBdKVxcMSg/IWApLyxcbiAgYnI6IC9eKCB7Mix9fFxcXFwpXFxuKD8hXFxzKiQpLyxcbiAgZGVsOiBub29wLFxuICB0ZXh0OiAvXihgK3xbXmBdKVtcXHNcXFNdKj8oPz1bXFxcXDwhXFxbYCpdfFxcYl98IHsyLH1cXG58JCkvXG59O1xuXG5pbmxpbmUuX2VzY2FwZXMgPSAvXFxcXChbIVwiIyQlJicoKSorLFxcLS4vOjs8PT4/QFxcW1xcXVxcXFxeX2B7fH1+XSkvZztcblxuaW5saW5lLl9zY2hlbWUgPSAvW2EtekEtWl1bYS16QS1aMC05Ky4tXXsxLDMxfS87XG5pbmxpbmUuX2VtYWlsID0gL1thLXpBLVowLTkuISMkJSYnKisvPT9eX2B7fH1+LV0rKEApW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSsoPyFbLV9dKS87XG5pbmxpbmUuYXV0b2xpbmsgPSBlZGl0KGlubGluZS5hdXRvbGluaylcbiAgLnJlcGxhY2UoJ3NjaGVtZScsIGlubGluZS5fc2NoZW1lKVxuICAucmVwbGFjZSgnZW1haWwnLCBpbmxpbmUuX2VtYWlsKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLl9hdHRyaWJ1dGUgPSAvXFxzK1thLXpBLVo6X11bXFx3LjotXSooPzpcXHMqPVxccypcIlteXCJdKlwifFxccyo9XFxzKidbXiddKid8XFxzKj1cXHMqW15cXHNcIic9PD5gXSspPy87XG5cbmlubGluZS50YWcgPSBlZGl0KGlubGluZS50YWcpXG4gIC5yZXBsYWNlKCdjb21tZW50JywgYmxvY2suX2NvbW1lbnQpXG4gIC5yZXBsYWNlKCdhdHRyaWJ1dGUnLCBpbmxpbmUuX2F0dHJpYnV0ZSlcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5fbGFiZWwgPSAvKD86XFxbW15cXFtcXF1dKlxcXXxcXFxcW1xcW1xcXV0/fGBbXmBdKmB8W15cXFtcXF1cXFxcXSkqPy87XG5pbmxpbmUuX2hyZWYgPSAvXFxzKig8KD86XFxcXFs8Pl0/fFteXFxzPD5cXFxcXSkqPnwoPzpcXFxcWygpXT98XFwoW15cXHNcXHgwMC1cXHgxZlxcXFxdKlxcKXxbXlxcc1xceDAwLVxceDFmKClcXFxcXSkqPykvO1xuaW5saW5lLl90aXRsZSA9IC9cIig/OlxcXFxcIj98W15cIlxcXFxdKSpcInwnKD86XFxcXCc/fFteJ1xcXFxdKSonfFxcKCg/OlxcXFxcXCk/fFteKVxcXFxdKSpcXCkvO1xuXG5pbmxpbmUubGluayA9IGVkaXQoaW5saW5lLmxpbmspXG4gIC5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpXG4gIC5yZXBsYWNlKCdocmVmJywgaW5saW5lLl9ocmVmKVxuICAucmVwbGFjZSgndGl0bGUnLCBpbmxpbmUuX3RpdGxlKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLnJlZmxpbmsgPSBlZGl0KGlubGluZS5yZWZsaW5rKVxuICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAuZ2V0UmVnZXgoKTtcblxuLyoqXG4gKiBOb3JtYWwgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUubm9ybWFsID0gbWVyZ2Uoe30sIGlubGluZSk7XG5cbi8qKlxuICogUGVkYW50aWMgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUucGVkYW50aWMgPSBtZXJnZSh7fSwgaW5saW5lLm5vcm1hbCwge1xuICBzdHJvbmc6IC9eX18oPz1cXFMpKFtcXHNcXFNdKj9cXFMpX18oPyFfKXxeXFwqXFwqKD89XFxTKShbXFxzXFxTXSo/XFxTKVxcKlxcKig/IVxcKikvLFxuICBlbTogL15fKD89XFxTKShbXFxzXFxTXSo/XFxTKV8oPyFfKXxeXFwqKD89XFxTKShbXFxzXFxTXSo/XFxTKVxcKig/IVxcKikvLFxuICBsaW5rOiBlZGl0KC9eIT9cXFsobGFiZWwpXFxdXFwoKC4qPylcXCkvKVxuICAgIC5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpXG4gICAgLmdldFJlZ2V4KCksXG4gIHJlZmxpbms6IGVkaXQoL14hP1xcWyhsYWJlbClcXF1cXHMqXFxbKFteXFxdXSopXFxdLylcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAgIC5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBHRk0gSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUuZ2ZtID0gbWVyZ2Uoe30sIGlubGluZS5ub3JtYWwsIHtcbiAgZXNjYXBlOiBlZGl0KGlubGluZS5lc2NhcGUpLnJlcGxhY2UoJ10pJywgJ358XSknKS5nZXRSZWdleCgpLFxuICBfZXh0ZW5kZWRfZW1haWw6IC9bQS1aYS16MC05Ll8rLV0rKEApW2EtekEtWjAtOS1fXSsoPzpcXC5bYS16QS1aMC05LV9dKlthLXpBLVowLTldKSsoPyFbLV9dKS8sXG4gIHVybDogL14oKD86ZnRwfGh0dHBzPyk6XFwvXFwvfHd3d1xcLikoPzpbYS16QS1aMC05XFwtXStcXC4/KStbXlxcczxdKnxeZW1haWwvLFxuICBfYmFja3BlZGFsOiAvKD86W14/IS4sOjsqX34oKSZdK3xcXChbXildKlxcKXwmKD8hW2EtekEtWjAtOV0rOyQpfFs/IS4sOjsqX34pXSsoPyEkKSkrLyxcbiAgZGVsOiAvXn4rKD89XFxTKShbXFxzXFxTXSo/XFxTKX4rLyxcbiAgdGV4dDogZWRpdChpbmxpbmUudGV4dClcbiAgICAucmVwbGFjZSgnXXwnLCAnfl18JylcbiAgICAucmVwbGFjZSgnfCQnLCAnfGh0dHBzPzovL3xmdHA6Ly98d3d3XFxcXC58W2EtekEtWjAtOS4hIyQlJlxcJyorLz0/Xl9ge1xcXFx8fX4tXStAfCQnKVxuICAgIC5nZXRSZWdleCgpXG59KTtcblxuaW5saW5lLmdmbS51cmwgPSBlZGl0KGlubGluZS5nZm0udXJsKVxuICAucmVwbGFjZSgnZW1haWwnLCBpbmxpbmUuZ2ZtLl9leHRlbmRlZF9lbWFpbClcbiAgLmdldFJlZ2V4KCk7XG4vKipcbiAqIEdGTSArIExpbmUgQnJlYWtzIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLmJyZWFrcyA9IG1lcmdlKHt9LCBpbmxpbmUuZ2ZtLCB7XG4gIGJyOiBlZGl0KGlubGluZS5icikucmVwbGFjZSgnezIsfScsICcqJykuZ2V0UmVnZXgoKSxcbiAgdGV4dDogZWRpdChpbmxpbmUuZ2ZtLnRleHQpLnJlcGxhY2UoJ3syLH0nLCAnKicpLmdldFJlZ2V4KClcbn0pO1xuXG4vKipcbiAqIElubGluZSBMZXhlciAmIENvbXBpbGVyXG4gKi9cblxuZnVuY3Rpb24gSW5saW5lTGV4ZXIobGlua3MsIG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG4gIHRoaXMubGlua3MgPSBsaW5rcztcbiAgdGhpcy5ydWxlcyA9IGlubGluZS5ub3JtYWw7XG4gIHRoaXMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXIgfHwgbmV3IFJlbmRlcmVyKCk7XG4gIHRoaXMucmVuZGVyZXIub3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICBpZiAoIXRoaXMubGlua3MpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rva2VucyBhcnJheSByZXF1aXJlcyBhIGBsaW5rc2AgcHJvcGVydHkuJyk7XG4gIH1cblxuICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgdGhpcy5ydWxlcyA9IGlubGluZS5wZWRhbnRpYztcbiAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5icmVha3MpIHtcbiAgICAgIHRoaXMucnVsZXMgPSBpbmxpbmUuYnJlYWtzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJ1bGVzID0gaW5saW5lLmdmbTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFeHBvc2UgSW5saW5lIFJ1bGVzXG4gKi9cblxuSW5saW5lTGV4ZXIucnVsZXMgPSBpbmxpbmU7XG5cbi8qKlxuICogU3RhdGljIExleGluZy9Db21waWxpbmcgTWV0aG9kXG4gKi9cblxuSW5saW5lTGV4ZXIub3V0cHV0ID0gZnVuY3Rpb24oc3JjLCBsaW5rcywgb3B0aW9ucykge1xuICB2YXIgaW5saW5lID0gbmV3IElubGluZUxleGVyKGxpbmtzLCBvcHRpb25zKTtcbiAgcmV0dXJuIGlubGluZS5vdXRwdXQoc3JjKTtcbn07XG5cbi8qKlxuICogTGV4aW5nL0NvbXBpbGluZ1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5vdXRwdXQgPSBmdW5jdGlvbihzcmMpIHtcbiAgdmFyIG91dCA9ICcnLFxuICAgICAgbGluayxcbiAgICAgIHRleHQsXG4gICAgICBocmVmLFxuICAgICAgdGl0bGUsXG4gICAgICBjYXAsXG4gICAgICBwcmV2Q2FwWmVybztcblxuICB3aGlsZSAoc3JjKSB7XG4gICAgLy8gZXNjYXBlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZXNjYXBlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSBjYXBbMV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBhdXRvbGlua1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmF1dG9saW5rLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKHRoaXMubWFuZ2xlKGNhcFsxXSkpO1xuICAgICAgICBocmVmID0gJ21haWx0bzonICsgdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBlc2NhcGUoY2FwWzFdKTtcbiAgICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICB9XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIG51bGwsIHRleHQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdXJsIChnZm0pXG4gICAgaWYgKCF0aGlzLmluTGluayAmJiAoY2FwID0gdGhpcy5ydWxlcy51cmwuZXhlYyhzcmMpKSkge1xuICAgICAgaWYgKGNhcFsyXSA9PT0gJ0AnKSB7XG4gICAgICAgIHRleHQgPSBlc2NhcGUoY2FwWzBdKTtcbiAgICAgICAgaHJlZiA9ICdtYWlsdG86JyArIHRleHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkbyBleHRlbmRlZCBhdXRvbGluayBwYXRoIHZhbGlkYXRpb25cbiAgICAgICAgZG8ge1xuICAgICAgICAgIHByZXZDYXBaZXJvID0gY2FwWzBdO1xuICAgICAgICAgIGNhcFswXSA9IHRoaXMucnVsZXMuX2JhY2twZWRhbC5leGVjKGNhcFswXSlbMF07XG4gICAgICAgIH0gd2hpbGUgKHByZXZDYXBaZXJvICE9PSBjYXBbMF0pO1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKGNhcFswXSk7XG4gICAgICAgIGlmIChjYXBbMV0gPT09ICd3d3cuJykge1xuICAgICAgICAgIGhyZWYgPSAnaHR0cDovLycgKyB0ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhyZWYgPSB0ZXh0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIubGluayhocmVmLCBudWxsLCB0ZXh0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRhZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnRhZy5leGVjKHNyYykpIHtcbiAgICAgIGlmICghdGhpcy5pbkxpbmsgJiYgL148YSAvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pbkxpbmsgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmluTGluayAmJiAvXjxcXC9hPi9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICB0aGlzLmluTGluayA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmluUmF3QmxvY2sgJiYgL148KHByZXxjb2RlfGtiZHxzY3JpcHQpKFxcc3w+KS9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICB0aGlzLmluUmF3QmxvY2sgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmluUmF3QmxvY2sgJiYgL148XFwvKHByZXxjb2RlfGtiZHxzY3JpcHQpKFxcc3w+KS9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICB0aGlzLmluUmF3QmxvY2sgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLm9wdGlvbnMuc2FuaXRpemVcbiAgICAgICAgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyXG4gICAgICAgICAgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyKGNhcFswXSlcbiAgICAgICAgICA6IGVzY2FwZShjYXBbMF0pXG4gICAgICAgIDogY2FwWzBdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gbGlua1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxpbmsuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy5pbkxpbmsgPSB0cnVlO1xuICAgICAgaHJlZiA9IGNhcFsyXTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgbGluayA9IC9eKFteJ1wiXSpbXlxcc10pXFxzKyhbJ1wiXSkoLiopXFwyLy5leGVjKGhyZWYpO1xuXG4gICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgaHJlZiA9IGxpbmtbMV07XG4gICAgICAgICAgdGl0bGUgPSBsaW5rWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpdGxlID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpdGxlID0gY2FwWzNdID8gY2FwWzNdLnNsaWNlKDEsIC0xKSA6ICcnO1xuICAgICAgfVxuICAgICAgaHJlZiA9IGhyZWYudHJpbSgpLnJlcGxhY2UoL148KFtcXHNcXFNdKik+JC8sICckMScpO1xuICAgICAgb3V0ICs9IHRoaXMub3V0cHV0TGluayhjYXAsIHtcbiAgICAgICAgaHJlZjogSW5saW5lTGV4ZXIuZXNjYXBlcyhocmVmKSxcbiAgICAgICAgdGl0bGU6IElubGluZUxleGVyLmVzY2FwZXModGl0bGUpXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyByZWZsaW5rLCBub2xpbmtcbiAgICBpZiAoKGNhcCA9IHRoaXMucnVsZXMucmVmbGluay5leGVjKHNyYykpXG4gICAgICAgIHx8IChjYXAgPSB0aGlzLnJ1bGVzLm5vbGluay5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgbGluayA9IChjYXBbMl0gfHwgY2FwWzFdKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICBsaW5rID0gdGhpcy5saW5rc1tsaW5rLnRvTG93ZXJDYXNlKCldO1xuICAgICAgaWYgKCFsaW5rIHx8ICFsaW5rLmhyZWYpIHtcbiAgICAgICAgb3V0ICs9IGNhcFswXS5jaGFyQXQoMCk7XG4gICAgICAgIHNyYyA9IGNhcFswXS5zdWJzdHJpbmcoMSkgKyBzcmM7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5pbkxpbmsgPSB0cnVlO1xuICAgICAgb3V0ICs9IHRoaXMub3V0cHV0TGluayhjYXAsIGxpbmspO1xuICAgICAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHN0cm9uZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnN0cm9uZy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5zdHJvbmcodGhpcy5vdXRwdXQoY2FwWzRdIHx8IGNhcFszXSB8fCBjYXBbMl0gfHwgY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBlbVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmVtLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmVtKHRoaXMub3V0cHV0KGNhcFs2XSB8fCBjYXBbNV0gfHwgY2FwWzRdIHx8IGNhcFszXSB8fCBjYXBbMl0gfHwgY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBjb2RlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuY29kZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5jb2Rlc3Bhbihlc2NhcGUoY2FwWzJdLnRyaW0oKSwgdHJ1ZSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYnJcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ici5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5icigpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZGVsIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZGVsLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmRlbCh0aGlzLm91dHB1dChjYXBbMV0pKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRleHRcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50ZXh0LmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmICh0aGlzLmluUmF3QmxvY2spIHtcbiAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIudGV4dChjYXBbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIudGV4dChlc2NhcGUodGhpcy5zbWFydHlwYW50cyhjYXBbMF0pKSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3JjKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3Agb24gYnl0ZTogJyArIHNyYy5jaGFyQ29kZUF0KDApKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcblxuSW5saW5lTGV4ZXIuZXNjYXBlcyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuIHRleHQgPyB0ZXh0LnJlcGxhY2UoSW5saW5lTGV4ZXIucnVsZXMuX2VzY2FwZXMsICckMScpIDogdGV4dDtcbn07XG5cbi8qKlxuICogQ29tcGlsZSBMaW5rXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLm91dHB1dExpbmsgPSBmdW5jdGlvbihjYXAsIGxpbmspIHtcbiAgdmFyIGhyZWYgPSBsaW5rLmhyZWYsXG4gICAgICB0aXRsZSA9IGxpbmsudGl0bGUgPyBlc2NhcGUobGluay50aXRsZSkgOiBudWxsO1xuXG4gIHJldHVybiBjYXBbMF0uY2hhckF0KDApICE9PSAnISdcbiAgICA/IHRoaXMucmVuZGVyZXIubGluayhocmVmLCB0aXRsZSwgdGhpcy5vdXRwdXQoY2FwWzFdKSlcbiAgICA6IHRoaXMucmVuZGVyZXIuaW1hZ2UoaHJlZiwgdGl0bGUsIGVzY2FwZShjYXBbMV0pKTtcbn07XG5cbi8qKlxuICogU21hcnR5cGFudHMgVHJhbnNmb3JtYXRpb25zXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLnNtYXJ0eXBhbnRzID0gZnVuY3Rpb24odGV4dCkge1xuICBpZiAoIXRoaXMub3B0aW9ucy5zbWFydHlwYW50cykgcmV0dXJuIHRleHQ7XG4gIHJldHVybiB0ZXh0XG4gICAgLy8gZW0tZGFzaGVzXG4gICAgLnJlcGxhY2UoLy0tLS9nLCAnXFx1MjAxNCcpXG4gICAgLy8gZW4tZGFzaGVzXG4gICAgLnJlcGxhY2UoLy0tL2csICdcXHUyMDEzJylcbiAgICAvLyBvcGVuaW5nIHNpbmdsZXNcbiAgICAucmVwbGFjZSgvKF58Wy1cXHUyMDE0LyhcXFt7XCJcXHNdKScvZywgJyQxXFx1MjAxOCcpXG4gICAgLy8gY2xvc2luZyBzaW5nbGVzICYgYXBvc3Ryb3BoZXNcbiAgICAucmVwbGFjZSgvJy9nLCAnXFx1MjAxOScpXG4gICAgLy8gb3BlbmluZyBkb3VibGVzXG4gICAgLnJlcGxhY2UoLyhefFstXFx1MjAxNC8oXFxbe1xcdTIwMThcXHNdKVwiL2csICckMVxcdTIwMWMnKVxuICAgIC8vIGNsb3NpbmcgZG91Ymxlc1xuICAgIC5yZXBsYWNlKC9cIi9nLCAnXFx1MjAxZCcpXG4gICAgLy8gZWxsaXBzZXNcbiAgICAucmVwbGFjZSgvXFwuezN9L2csICdcXHUyMDI2Jyk7XG59O1xuXG4vKipcbiAqIE1hbmdsZSBMaW5rc1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5tYW5nbGUgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGlmICghdGhpcy5vcHRpb25zLm1hbmdsZSkgcmV0dXJuIHRleHQ7XG4gIHZhciBvdXQgPSAnJyxcbiAgICAgIGwgPSB0ZXh0Lmxlbmd0aCxcbiAgICAgIGkgPSAwLFxuICAgICAgY2g7XG5cbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICBjaCA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkge1xuICAgICAgY2ggPSAneCcgKyBjaC50b1N0cmluZygxNik7XG4gICAgfVxuICAgIG91dCArPSAnJiMnICsgY2ggKyAnOyc7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBSZW5kZXJlclxuICovXG5cbmZ1bmN0aW9uIFJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG59XG5cblJlbmRlcmVyLnByb3RvdHlwZS5jb2RlID0gZnVuY3Rpb24oY29kZSwgbGFuZywgZXNjYXBlZCkge1xuICBpZiAodGhpcy5vcHRpb25zLmhpZ2hsaWdodCkge1xuICAgIHZhciBvdXQgPSB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KGNvZGUsIGxhbmcpO1xuICAgIGlmIChvdXQgIT0gbnVsbCAmJiBvdXQgIT09IGNvZGUpIHtcbiAgICAgIGVzY2FwZWQgPSB0cnVlO1xuICAgICAgY29kZSA9IG91dDtcbiAgICB9XG4gIH1cblxuICBpZiAoIWxhbmcpIHtcbiAgICByZXR1cm4gJzxwcmU+PGNvZGU+J1xuICAgICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgICArICc8L2NvZGU+PC9wcmU+JztcbiAgfVxuXG4gIHJldHVybiAnPHByZT48Y29kZSBjbGFzcz1cIidcbiAgICArIHRoaXMub3B0aW9ucy5sYW5nUHJlZml4XG4gICAgKyBlc2NhcGUobGFuZywgdHJ1ZSlcbiAgICArICdcIj4nXG4gICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgKyAnPC9jb2RlPjwvcHJlPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuYmxvY2txdW90ZSA9IGZ1bmN0aW9uKHF1b3RlKSB7XG4gIHJldHVybiAnPGJsb2NrcXVvdGU+XFxuJyArIHF1b3RlICsgJzwvYmxvY2txdW90ZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmh0bWwgPSBmdW5jdGlvbihodG1sKSB7XG4gIHJldHVybiBodG1sO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmhlYWRpbmcgPSBmdW5jdGlvbih0ZXh0LCBsZXZlbCwgcmF3KSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuaGVhZGVySWRzKSB7XG4gICAgcmV0dXJuICc8aCdcbiAgICAgICsgbGV2ZWxcbiAgICAgICsgJyBpZD1cIidcbiAgICAgICsgdGhpcy5vcHRpb25zLmhlYWRlclByZWZpeFxuICAgICAgKyByYXcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXlxcd10rL2csICctJylcbiAgICAgICsgJ1wiPidcbiAgICAgICsgdGV4dFxuICAgICAgKyAnPC9oJ1xuICAgICAgKyBsZXZlbFxuICAgICAgKyAnPlxcbic7XG4gIH1cbiAgLy8gaWdub3JlIElEc1xuICByZXR1cm4gJzxoJyArIGxldmVsICsgJz4nICsgdGV4dCArICc8L2gnICsgbGV2ZWwgKyAnPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuaHIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub3B0aW9ucy54aHRtbCA/ICc8aHIvPlxcbicgOiAnPGhyPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uKGJvZHksIG9yZGVyZWQsIHN0YXJ0KSB7XG4gIHZhciB0eXBlID0gb3JkZXJlZCA/ICdvbCcgOiAndWwnLFxuICAgICAgc3RhcnRhdHQgPSAob3JkZXJlZCAmJiBzdGFydCAhPT0gMSkgPyAoJyBzdGFydD1cIicgKyBzdGFydCArICdcIicpIDogJyc7XG4gIHJldHVybiAnPCcgKyB0eXBlICsgc3RhcnRhdHQgKyAnPlxcbicgKyBib2R5ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUubGlzdGl0ZW0gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGxpPicgKyB0ZXh0ICsgJzwvbGk+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5jaGVja2JveCA9IGZ1bmN0aW9uKGNoZWNrZWQpIHtcbiAgcmV0dXJuICc8aW5wdXQgJ1xuICAgICsgKGNoZWNrZWQgPyAnY2hlY2tlZD1cIlwiICcgOiAnJylcbiAgICArICdkaXNhYmxlZD1cIlwiIHR5cGU9XCJjaGVja2JveFwiJ1xuICAgICsgKHRoaXMub3B0aW9ucy54aHRtbCA/ICcgLycgOiAnJylcbiAgICArICc+ICc7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUucGFyYWdyYXBoID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxwPicgKyB0ZXh0ICsgJzwvcD5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRhYmxlID0gZnVuY3Rpb24oaGVhZGVyLCBib2R5KSB7XG4gIGlmIChib2R5KSBib2R5ID0gJzx0Ym9keT4nICsgYm9keSArICc8L3Rib2R5Pic7XG5cbiAgcmV0dXJuICc8dGFibGU+XFxuJ1xuICAgICsgJzx0aGVhZD5cXG4nXG4gICAgKyBoZWFkZXJcbiAgICArICc8L3RoZWFkPlxcbidcbiAgICArIGJvZHlcbiAgICArICc8L3RhYmxlPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGFibGVyb3cgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIHJldHVybiAnPHRyPlxcbicgKyBjb250ZW50ICsgJzwvdHI+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50YWJsZWNlbGwgPSBmdW5jdGlvbihjb250ZW50LCBmbGFncykge1xuICB2YXIgdHlwZSA9IGZsYWdzLmhlYWRlciA/ICd0aCcgOiAndGQnO1xuICB2YXIgdGFnID0gZmxhZ3MuYWxpZ25cbiAgICA/ICc8JyArIHR5cGUgKyAnIGFsaWduPVwiJyArIGZsYWdzLmFsaWduICsgJ1wiPidcbiAgICA6ICc8JyArIHR5cGUgKyAnPic7XG4gIHJldHVybiB0YWcgKyBjb250ZW50ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG59O1xuXG4vLyBzcGFuIGxldmVsIHJlbmRlcmVyXG5SZW5kZXJlci5wcm90b3R5cGUuc3Ryb25nID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxzdHJvbmc+JyArIHRleHQgKyAnPC9zdHJvbmc+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5lbSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8ZW0+JyArIHRleHQgKyAnPC9lbT4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmNvZGVzcGFuID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxjb2RlPicgKyB0ZXh0ICsgJzwvY29kZT4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmJyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGJyLz4nIDogJzxicj4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8ZGVsPicgKyB0ZXh0ICsgJzwvZGVsPic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIGhyZWYgPSBjbGVhblVybCh0aGlzLm9wdGlvbnMuc2FuaXRpemUsIHRoaXMub3B0aW9ucy5iYXNlVXJsLCBocmVmKTtcbiAgaWYgKGhyZWYgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuICB2YXIgb3V0ID0gJzxhIGhyZWY9XCInICsgZXNjYXBlKGhyZWYpICsgJ1wiJztcbiAgaWYgKHRpdGxlKSB7XG4gICAgb3V0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICB9XG4gIG91dCArPSAnPicgKyB0ZXh0ICsgJzwvYT4nO1xuICByZXR1cm4gb3V0O1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmltYWdlID0gZnVuY3Rpb24oaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgaHJlZiA9IGNsZWFuVXJsKHRoaXMub3B0aW9ucy5zYW5pdGl6ZSwgdGhpcy5vcHRpb25zLmJhc2VVcmwsIGhyZWYpO1xuICBpZiAoaHJlZiA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdmFyIG91dCA9ICc8aW1nIHNyYz1cIicgKyBocmVmICsgJ1wiIGFsdD1cIicgKyB0ZXh0ICsgJ1wiJztcbiAgaWYgKHRpdGxlKSB7XG4gICAgb3V0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICB9XG4gIG91dCArPSB0aGlzLm9wdGlvbnMueGh0bWwgPyAnLz4nIDogJz4nO1xuICByZXR1cm4gb3V0O1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiB0ZXh0O1xufTtcblxuLyoqXG4gKiBUZXh0UmVuZGVyZXJcbiAqIHJldHVybnMgb25seSB0aGUgdGV4dHVhbCBwYXJ0IG9mIHRoZSB0b2tlblxuICovXG5cbmZ1bmN0aW9uIFRleHRSZW5kZXJlcigpIHt9XG5cbi8vIG5vIG5lZWQgZm9yIGJsb2NrIGxldmVsIHJlbmRlcmVyc1xuXG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLnN0cm9uZyA9XG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmVtID1cblRleHRSZW5kZXJlci5wcm90b3R5cGUuY29kZXNwYW4gPVxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5kZWwgPVxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgcmV0dXJuIHRleHQ7XG59O1xuXG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmxpbmsgPVxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5pbWFnZSA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIHJldHVybiAnJyArIHRleHQ7XG59O1xuXG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmJyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJztcbn07XG5cbi8qKlxuICogUGFyc2luZyAmIENvbXBpbGluZ1xuICovXG5cbmZ1bmN0aW9uIFBhcnNlcihvcHRpb25zKSB7XG4gIHRoaXMudG9rZW5zID0gW107XG4gIHRoaXMudG9rZW4gPSBudWxsO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0cztcbiAgdGhpcy5vcHRpb25zLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuICB0aGlzLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyO1xuICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG59XG5cbi8qKlxuICogU3RhdGljIFBhcnNlIE1ldGhvZFxuICovXG5cblBhcnNlci5wYXJzZSA9IGZ1bmN0aW9uKHNyYywgb3B0aW9ucykge1xuICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zKTtcbiAgcmV0dXJuIHBhcnNlci5wYXJzZShzcmMpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBMb29wXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHNyYykge1xuICB0aGlzLmlubGluZSA9IG5ldyBJbmxpbmVMZXhlcihzcmMubGlua3MsIHRoaXMub3B0aW9ucyk7XG4gIC8vIHVzZSBhbiBJbmxpbmVMZXhlciB3aXRoIGEgVGV4dFJlbmRlcmVyIHRvIGV4dHJhY3QgcHVyZSB0ZXh0XG4gIHRoaXMuaW5saW5lVGV4dCA9IG5ldyBJbmxpbmVMZXhlcihcbiAgICBzcmMubGlua3MsXG4gICAgbWVyZ2Uoe30sIHRoaXMub3B0aW9ucywge3JlbmRlcmVyOiBuZXcgVGV4dFJlbmRlcmVyKCl9KVxuICApO1xuICB0aGlzLnRva2VucyA9IHNyYy5yZXZlcnNlKCk7XG5cbiAgdmFyIG91dCA9ICcnO1xuICB3aGlsZSAodGhpcy5uZXh0KCkpIHtcbiAgICBvdXQgKz0gdGhpcy50b2soKTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIE5leHQgVG9rZW5cbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9rZW4gPSB0aGlzLnRva2Vucy5wb3AoKTtcbn07XG5cbi8qKlxuICogUHJldmlldyBOZXh0IFRva2VuXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRva2Vuc1t0aGlzLnRva2Vucy5sZW5ndGggLSAxXSB8fCAwO1xufTtcblxuLyoqXG4gKiBQYXJzZSBUZXh0IFRva2Vuc1xuICovXG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VUZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBib2R5ID0gdGhpcy50b2tlbi50ZXh0O1xuXG4gIHdoaWxlICh0aGlzLnBlZWsoKS50eXBlID09PSAndGV4dCcpIHtcbiAgICBib2R5ICs9ICdcXG4nICsgdGhpcy5uZXh0KCkudGV4dDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmlubGluZS5vdXRwdXQoYm9keSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIEN1cnJlbnQgVG9rZW5cbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnRvayA9IGZ1bmN0aW9uKCkge1xuICBzd2l0Y2ggKHRoaXMudG9rZW4udHlwZSkge1xuICAgIGNhc2UgJ3NwYWNlJzoge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBjYXNlICdocic6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmhyKCk7XG4gICAgfVxuICAgIGNhc2UgJ2hlYWRpbmcnOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5oZWFkaW5nKFxuICAgICAgICB0aGlzLmlubGluZS5vdXRwdXQodGhpcy50b2tlbi50ZXh0KSxcbiAgICAgICAgdGhpcy50b2tlbi5kZXB0aCxcbiAgICAgICAgdW5lc2NhcGUodGhpcy5pbmxpbmVUZXh0Lm91dHB1dCh0aGlzLnRva2VuLnRleHQpKSk7XG4gICAgfVxuICAgIGNhc2UgJ2NvZGUnOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5jb2RlKHRoaXMudG9rZW4udGV4dCxcbiAgICAgICAgdGhpcy50b2tlbi5sYW5nLFxuICAgICAgICB0aGlzLnRva2VuLmVzY2FwZWQpO1xuICAgIH1cbiAgICBjYXNlICd0YWJsZSc6IHtcbiAgICAgIHZhciBoZWFkZXIgPSAnJyxcbiAgICAgICAgICBib2R5ID0gJycsXG4gICAgICAgICAgaSxcbiAgICAgICAgICByb3csXG4gICAgICAgICAgY2VsbCxcbiAgICAgICAgICBqO1xuXG4gICAgICAvLyBoZWFkZXJcbiAgICAgIGNlbGwgPSAnJztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnRva2VuLmhlYWRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjZWxsICs9IHRoaXMucmVuZGVyZXIudGFibGVjZWxsKFxuICAgICAgICAgIHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLmhlYWRlcltpXSksXG4gICAgICAgICAgeyBoZWFkZXI6IHRydWUsIGFsaWduOiB0aGlzLnRva2VuLmFsaWduW2ldIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGhlYWRlciArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50b2tlbi5jZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICByb3cgPSB0aGlzLnRva2VuLmNlbGxzW2ldO1xuXG4gICAgICAgIGNlbGwgPSAnJztcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IHJvdy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGNlbGwgKz0gdGhpcy5yZW5kZXJlci50YWJsZWNlbGwoXG4gICAgICAgICAgICB0aGlzLmlubGluZS5vdXRwdXQocm93W2pdKSxcbiAgICAgICAgICAgIHsgaGVhZGVyOiBmYWxzZSwgYWxpZ246IHRoaXMudG9rZW4uYWxpZ25bal0gfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBib2R5ICs9IHRoaXMucmVuZGVyZXIudGFibGVyb3coY2VsbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci50YWJsZShoZWFkZXIsIGJvZHkpO1xuICAgIH1cbiAgICBjYXNlICdibG9ja3F1b3RlX3N0YXJ0Jzoge1xuICAgICAgYm9keSA9ICcnO1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2Jsb2NrcXVvdGVfZW5kJykge1xuICAgICAgICBib2R5ICs9IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmJsb2NrcXVvdGUoYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2xpc3Rfc3RhcnQnOiB7XG4gICAgICBib2R5ID0gJyc7XG4gICAgICB2YXIgb3JkZXJlZCA9IHRoaXMudG9rZW4ub3JkZXJlZCxcbiAgICAgICAgICBzdGFydCA9IHRoaXMudG9rZW4uc3RhcnQ7XG5cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnbGlzdF9lbmQnKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdChib2R5LCBvcmRlcmVkLCBzdGFydCk7XG4gICAgfVxuICAgIGNhc2UgJ2xpc3RfaXRlbV9zdGFydCc6IHtcbiAgICAgIGJvZHkgPSAnJztcbiAgICAgIHZhciBsb29zZSA9IHRoaXMudG9rZW4ubG9vc2U7XG5cbiAgICAgIGlmICh0aGlzLnRva2VuLnRhc2spIHtcbiAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLmNoZWNrYm94KHRoaXMudG9rZW4uY2hlY2tlZCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnbGlzdF9pdGVtX2VuZCcpIHtcbiAgICAgICAgYm9keSArPSAhbG9vc2UgJiYgdGhpcy50b2tlbi50eXBlID09PSAndGV4dCdcbiAgICAgICAgICA/IHRoaXMucGFyc2VUZXh0KClcbiAgICAgICAgICA6IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmxpc3RpdGVtKGJvZHkpO1xuICAgIH1cbiAgICBjYXNlICdodG1sJzoge1xuICAgICAgLy8gVE9ETyBwYXJzZSBpbmxpbmUgY29udGVudCBpZiBwYXJhbWV0ZXIgbWFya2Rvd249MVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuaHRtbCh0aGlzLnRva2VuLnRleHQpO1xuICAgIH1cbiAgICBjYXNlICdwYXJhZ3JhcGgnOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgodGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4udGV4dCkpO1xuICAgIH1cbiAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMucGFyc2VUZXh0KCkpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBIZWxwZXJzXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGh0bWwsIGVuY29kZSkge1xuICBpZiAoZW5jb2RlKSB7XG4gICAgaWYgKGVzY2FwZS5lc2NhcGVUZXN0LnRlc3QoaHRtbCkpIHtcbiAgICAgIHJldHVybiBodG1sLnJlcGxhY2UoZXNjYXBlLmVzY2FwZVJlcGxhY2UsIGZ1bmN0aW9uIChjaCkgeyByZXR1cm4gZXNjYXBlLnJlcGxhY2VtZW50c1tjaF07IH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZXNjYXBlLmVzY2FwZVRlc3ROb0VuY29kZS50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZS5lc2NhcGVSZXBsYWNlTm9FbmNvZGUsIGZ1bmN0aW9uIChjaCkgeyByZXR1cm4gZXNjYXBlLnJlcGxhY2VtZW50c1tjaF07IH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBodG1sO1xufVxuXG5lc2NhcGUuZXNjYXBlVGVzdCA9IC9bJjw+XCInXS87XG5lc2NhcGUuZXNjYXBlUmVwbGFjZSA9IC9bJjw+XCInXS9nO1xuZXNjYXBlLnJlcGxhY2VtZW50cyA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjMzk7J1xufTtcblxuZXNjYXBlLmVzY2FwZVRlc3ROb0VuY29kZSA9IC9bPD5cIiddfCYoPyEjP1xcdys7KS87XG5lc2NhcGUuZXNjYXBlUmVwbGFjZU5vRW5jb2RlID0gL1s8PlwiJ118Jig/ISM/XFx3KzspL2c7XG5cbmZ1bmN0aW9uIHVuZXNjYXBlKGh0bWwpIHtcbiAgLy8gZXhwbGljaXRseSBtYXRjaCBkZWNpbWFsLCBoZXgsIGFuZCBuYW1lZCBIVE1MIGVudGl0aWVzXG4gIHJldHVybiBodG1sLnJlcGxhY2UoLyYoIyg/OlxcZCspfCg/OiN4WzAtOUEtRmEtZl0rKXwoPzpcXHcrKSk7Py9pZywgZnVuY3Rpb24oXywgbikge1xuICAgIG4gPSBuLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKG4gPT09ICdjb2xvbicpIHJldHVybiAnOic7XG4gICAgaWYgKG4uY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgIHJldHVybiBuLmNoYXJBdCgxKSA9PT0gJ3gnXG4gICAgICAgID8gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChuLnN1YnN0cmluZygyKSwgMTYpKVxuICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoK24uc3Vic3RyaW5nKDEpKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWRpdChyZWdleCwgb3B0KSB7XG4gIHJlZ2V4ID0gcmVnZXguc291cmNlIHx8IHJlZ2V4O1xuICBvcHQgPSBvcHQgfHwgJyc7XG4gIHJldHVybiB7XG4gICAgcmVwbGFjZTogZnVuY3Rpb24obmFtZSwgdmFsKSB7XG4gICAgICB2YWwgPSB2YWwuc291cmNlIHx8IHZhbDtcbiAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKC8oXnxbXlxcW10pXFxeL2csICckMScpO1xuICAgICAgcmVnZXggPSByZWdleC5yZXBsYWNlKG5hbWUsIHZhbCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGdldFJlZ2V4OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4LCBvcHQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xlYW5Vcmwoc2FuaXRpemUsIGJhc2UsIGhyZWYpIHtcbiAgaWYgKHNhbml0aXplKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBwcm90ID0gZGVjb2RlVVJJQ29tcG9uZW50KHVuZXNjYXBlKGhyZWYpKVxuICAgICAgICAucmVwbGFjZSgvW15cXHc6XS9nLCAnJylcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwcm90LmluZGV4T2YoJ2phdmFzY3JpcHQ6JykgPT09IDAgfHwgcHJvdC5pbmRleE9mKCd2YnNjcmlwdDonKSA9PT0gMCB8fCBwcm90LmluZGV4T2YoJ2RhdGE6JykgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAoYmFzZSAmJiAhb3JpZ2luSW5kZXBlbmRlbnRVcmwudGVzdChocmVmKSkge1xuICAgIGhyZWYgPSByZXNvbHZlVXJsKGJhc2UsIGhyZWYpO1xuICB9XG4gIHRyeSB7XG4gICAgaHJlZiA9IGVuY29kZVVSSShocmVmKS5yZXBsYWNlKC8lMjUvZywgJyUnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBocmVmO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlVXJsKGJhc2UsIGhyZWYpIHtcbiAgaWYgKCFiYXNlVXJsc1snICcgKyBiYXNlXSkge1xuICAgIC8vIHdlIGNhbiBpZ25vcmUgZXZlcnl0aGluZyBpbiBiYXNlIGFmdGVyIHRoZSBsYXN0IHNsYXNoIG9mIGl0cyBwYXRoIGNvbXBvbmVudCxcbiAgICAvLyBidXQgd2UgbWlnaHQgbmVlZCB0byBhZGQgX3RoYXRfXG4gICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zXG4gICAgaWYgKC9eW146XSs6XFwvKlteL10qJC8udGVzdChiYXNlKSkge1xuICAgICAgYmFzZVVybHNbJyAnICsgYmFzZV0gPSBiYXNlICsgJy8nO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlVXJsc1snICcgKyBiYXNlXSA9IHJ0cmltKGJhc2UsICcvJywgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIGJhc2UgPSBiYXNlVXJsc1snICcgKyBiYXNlXTtcblxuICBpZiAoaHJlZi5zbGljZSgwLCAyKSA9PT0gJy8vJykge1xuICAgIHJldHVybiBiYXNlLnJlcGxhY2UoLzpbXFxzXFxTXSovLCAnOicpICsgaHJlZjtcbiAgfSBlbHNlIGlmIChocmVmLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZSgvKDpcXC8qW14vXSopW1xcc1xcU10qLywgJyQxJykgKyBocmVmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlICsgaHJlZjtcbiAgfVxufVxudmFyIGJhc2VVcmxzID0ge307XG52YXIgb3JpZ2luSW5kZXBlbmRlbnRVcmwgPSAvXiR8XlthLXpdW2EtejAtOSsuLV0qOnxeWz8jXS9pO1xuXG5mdW5jdGlvbiBub29wKCkge31cbm5vb3AuZXhlYyA9IG5vb3A7XG5cbmZ1bmN0aW9uIG1lcmdlKG9iaikge1xuICB2YXIgaSA9IDEsXG4gICAgICB0YXJnZXQsXG4gICAgICBrZXk7XG5cbiAgZm9yICg7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB0YXJnZXQgPSBhcmd1bWVudHNbaV07XG4gICAgZm9yIChrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IHRhcmdldFtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHNwbGl0Q2VsbHModGFibGVSb3csIGNvdW50KSB7XG4gIC8vIGVuc3VyZSB0aGF0IGV2ZXJ5IGNlbGwtZGVsaW1pdGluZyBwaXBlIGhhcyBhIHNwYWNlXG4gIC8vIGJlZm9yZSBpdCB0byBkaXN0aW5ndWlzaCBpdCBmcm9tIGFuIGVzY2FwZWQgcGlwZVxuICB2YXIgcm93ID0gdGFibGVSb3cucmVwbGFjZSgvXFx8L2csIGZ1bmN0aW9uIChtYXRjaCwgb2Zmc2V0LCBzdHIpIHtcbiAgICAgICAgdmFyIGVzY2FwZWQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1cnIgPSBvZmZzZXQ7XG4gICAgICAgIHdoaWxlICgtLWN1cnIgPj0gMCAmJiBzdHJbY3Vycl0gPT09ICdcXFxcJykgZXNjYXBlZCA9ICFlc2NhcGVkO1xuICAgICAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgICAgIC8vIG9kZCBudW1iZXIgb2Ygc2xhc2hlcyBtZWFucyB8IGlzIGVzY2FwZWRcbiAgICAgICAgICAvLyBzbyB3ZSBsZWF2ZSBpdCBhbG9uZVxuICAgICAgICAgIHJldHVybiAnfCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYWRkIHNwYWNlIGJlZm9yZSB1bmVzY2FwZWQgfFxuICAgICAgICAgIHJldHVybiAnIHwnO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGNlbGxzID0gcm93LnNwbGl0KC8gXFx8LyksXG4gICAgICBpID0gMDtcblxuICBpZiAoY2VsbHMubGVuZ3RoID4gY291bnQpIHtcbiAgICBjZWxscy5zcGxpY2UoY291bnQpO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChjZWxscy5sZW5ndGggPCBjb3VudCkgY2VsbHMucHVzaCgnJyk7XG4gIH1cblxuICBmb3IgKDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlIGlzIGlnbm9yZWQgcGVyIHRoZSBnZm0gc3BlY1xuICAgIGNlbGxzW2ldID0gY2VsbHNbaV0udHJpbSgpLnJlcGxhY2UoL1xcXFxcXHwvZywgJ3wnKTtcbiAgfVxuICByZXR1cm4gY2VsbHM7XG59XG5cbi8vIFJlbW92ZSB0cmFpbGluZyAnYydzLiBFcXVpdmFsZW50IHRvIHN0ci5yZXBsYWNlKC9jKiQvLCAnJykuXG4vLyAvYyokLyBpcyB2dWxuZXJhYmxlIHRvIFJFRE9TLlxuLy8gaW52ZXJ0OiBSZW1vdmUgc3VmZml4IG9mIG5vbi1jIGNoYXJzIGluc3RlYWQuIERlZmF1bHQgZmFsc2V5LlxuZnVuY3Rpb24gcnRyaW0oc3RyLCBjLCBpbnZlcnQpIHtcbiAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvLyBMZW5ndGggb2Ygc3VmZml4IG1hdGNoaW5nIHRoZSBpbnZlcnQgY29uZGl0aW9uLlxuICB2YXIgc3VmZkxlbiA9IDA7XG5cbiAgLy8gU3RlcCBsZWZ0IHVudGlsIHdlIGZhaWwgdG8gbWF0Y2ggdGhlIGludmVydCBjb25kaXRpb24uXG4gIHdoaWxlIChzdWZmTGVuIDwgc3RyLmxlbmd0aCkge1xuICAgIHZhciBjdXJyQ2hhciA9IHN0ci5jaGFyQXQoc3RyLmxlbmd0aCAtIHN1ZmZMZW4gLSAxKTtcbiAgICBpZiAoY3VyckNoYXIgPT09IGMgJiYgIWludmVydCkge1xuICAgICAgc3VmZkxlbisrO1xuICAgIH0gZWxzZSBpZiAoY3VyckNoYXIgIT09IGMgJiYgaW52ZXJ0KSB7XG4gICAgICBzdWZmTGVuKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyKDAsIHN0ci5sZW5ndGggLSBzdWZmTGVuKTtcbn1cblxuLyoqXG4gKiBNYXJrZWRcbiAqL1xuXG5mdW5jdGlvbiBtYXJrZWQoc3JjLCBvcHQsIGNhbGxiYWNrKSB7XG4gIC8vIHRocm93IGVycm9yIGluIGNhc2Ugb2Ygbm9uIHN0cmluZyBpbnB1dFxuICBpZiAodHlwZW9mIHNyYyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3JjID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtYXJrZWQoKTogaW5wdXQgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZCBvciBudWxsJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBzcmMgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtYXJrZWQoKTogaW5wdXQgcGFyYW1ldGVyIGlzIG9mIHR5cGUgJ1xuICAgICAgKyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3JjKSArICcsIHN0cmluZyBleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrIHx8IHR5cGVvZiBvcHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdDtcbiAgICAgIG9wdCA9IG51bGw7XG4gICAgfVxuXG4gICAgb3B0ID0gbWVyZ2Uoe30sIG1hcmtlZC5kZWZhdWx0cywgb3B0IHx8IHt9KTtcblxuICAgIHZhciBoaWdobGlnaHQgPSBvcHQuaGlnaGxpZ2h0LFxuICAgICAgICB0b2tlbnMsXG4gICAgICAgIHBlbmRpbmcsXG4gICAgICAgIGkgPSAwO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRva2VucyA9IExleGVyLmxleChzcmMsIG9wdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgIH1cblxuICAgIHBlbmRpbmcgPSB0b2tlbnMubGVuZ3RoO1xuXG4gICAgdmFyIGRvbmUgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgb3B0LmhpZ2hsaWdodCA9IGhpZ2hsaWdodDtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIG91dCA9IFBhcnNlci5wYXJzZSh0b2tlbnMsIG9wdCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVyciA9IGU7XG4gICAgICB9XG5cbiAgICAgIG9wdC5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG5cbiAgICAgIHJldHVybiBlcnJcbiAgICAgICAgPyBjYWxsYmFjayhlcnIpXG4gICAgICAgIDogY2FsbGJhY2sobnVsbCwgb3V0KTtcbiAgICB9O1xuXG4gICAgaWYgKCFoaWdobGlnaHQgfHwgaGlnaGxpZ2h0Lmxlbmd0aCA8IDMpIHtcbiAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlIG9wdC5oaWdobGlnaHQ7XG5cbiAgICBpZiAoIXBlbmRpbmcpIHJldHVybiBkb25lKCk7XG5cbiAgICBmb3IgKDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgKGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbi50eXBlICE9PSAnY29kZScpIHtcbiAgICAgICAgICByZXR1cm4gLS1wZW5kaW5nIHx8IGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaGxpZ2h0KHRva2VuLnRleHQsIHRva2VuLmxhbmcsIGZ1bmN0aW9uKGVyciwgY29kZSkge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgaWYgKGNvZGUgPT0gbnVsbCB8fCBjb2RlID09PSB0b2tlbi50ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gLS1wZW5kaW5nIHx8IGRvbmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW4udGV4dCA9IGNvZGU7XG4gICAgICAgICAgdG9rZW4uZXNjYXBlZCA9IHRydWU7XG4gICAgICAgICAgLS1wZW5kaW5nIHx8IGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSh0b2tlbnNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuICB0cnkge1xuICAgIGlmIChvcHQpIG9wdCA9IG1lcmdlKHt9LCBtYXJrZWQuZGVmYXVsdHMsIG9wdCk7XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZShMZXhlci5sZXgoc3JjLCBvcHQpLCBvcHQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZS5tZXNzYWdlICs9ICdcXG5QbGVhc2UgcmVwb3J0IHRoaXMgdG8gaHR0cHM6Ly9naXRodWIuY29tL21hcmtlZGpzL21hcmtlZC4nO1xuICAgIGlmICgob3B0IHx8IG1hcmtlZC5kZWZhdWx0cykuc2lsZW50KSB7XG4gICAgICByZXR1cm4gJzxwPkFuIGVycm9yIG9jY3VycmVkOjwvcD48cHJlPidcbiAgICAgICAgKyBlc2NhcGUoZS5tZXNzYWdlICsgJycsIHRydWUpXG4gICAgICAgICsgJzwvcHJlPic7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpb25zXG4gKi9cblxubWFya2VkLm9wdGlvbnMgPVxubWFya2VkLnNldE9wdGlvbnMgPSBmdW5jdGlvbihvcHQpIHtcbiAgbWVyZ2UobWFya2VkLmRlZmF1bHRzLCBvcHQpO1xuICByZXR1cm4gbWFya2VkO1xufTtcblxubWFya2VkLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGJhc2VVcmw6IG51bGwsXG4gICAgYnJlYWtzOiBmYWxzZSxcbiAgICBnZm06IHRydWUsXG4gICAgaGVhZGVySWRzOiB0cnVlLFxuICAgIGhlYWRlclByZWZpeDogJycsXG4gICAgaGlnaGxpZ2h0OiBudWxsLFxuICAgIGxhbmdQcmVmaXg6ICdsYW5ndWFnZS0nLFxuICAgIG1hbmdsZTogdHJ1ZSxcbiAgICBwZWRhbnRpYzogZmFsc2UsXG4gICAgcmVuZGVyZXI6IG5ldyBSZW5kZXJlcigpLFxuICAgIHNhbml0aXplOiBmYWxzZSxcbiAgICBzYW5pdGl6ZXI6IG51bGwsXG4gICAgc2lsZW50OiBmYWxzZSxcbiAgICBzbWFydExpc3RzOiBmYWxzZSxcbiAgICBzbWFydHlwYW50czogZmFsc2UsXG4gICAgdGFibGVzOiB0cnVlLFxuICAgIHhodG1sOiBmYWxzZVxuICB9O1xufTtcblxubWFya2VkLmRlZmF1bHRzID0gbWFya2VkLmdldERlZmF1bHRzKCk7XG5cbi8qKlxuICogRXhwb3NlXG4gKi9cblxubWFya2VkLlBhcnNlciA9IFBhcnNlcjtcbm1hcmtlZC5wYXJzZXIgPSBQYXJzZXIucGFyc2U7XG5cbm1hcmtlZC5SZW5kZXJlciA9IFJlbmRlcmVyO1xubWFya2VkLlRleHRSZW5kZXJlciA9IFRleHRSZW5kZXJlcjtcblxubWFya2VkLkxleGVyID0gTGV4ZXI7XG5tYXJrZWQubGV4ZXIgPSBMZXhlci5sZXg7XG5cbm1hcmtlZC5JbmxpbmVMZXhlciA9IElubGluZUxleGVyO1xubWFya2VkLmlubGluZUxleGVyID0gSW5saW5lTGV4ZXIub3V0cHV0O1xuXG5tYXJrZWQucGFyc2UgPSBtYXJrZWQ7XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBtYXJrZWQ7XG59IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBtYXJrZWQ7IH0pO1xufSBlbHNlIHtcbiAgcm9vdC5tYXJrZWQgPSBtYXJrZWQ7XG59XG59KSh0aGlzIHx8ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkpO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gIGdsb2JhbCA9IHRoaXNcblxuICB2YXIgcXVldWVJZCA9IDFcbiAgdmFyIHF1ZXVlID0ge31cbiAgdmFyIGlzUnVubmluZ1Rhc2sgPSBmYWxzZVxuXG4gIGlmICghZ2xvYmFsLnNldEltbWVkaWF0ZSlcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS5zb3VyY2UgPT0gZ2xvYmFsKXtcbiAgICAgICAgaWYgKGlzUnVubmluZ1Rhc2spXG4gICAgICAgICAgbmV4dFRpY2socXVldWVbZS5kYXRhXSlcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNSdW5uaW5nVGFzayA9IHRydWVcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcXVldWVbZS5kYXRhXSgpXG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgICAgIGRlbGV0ZSBxdWV1ZVtlLmRhdGFdXG4gICAgICAgICAgaXNSdW5uaW5nVGFzayA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHNldEltbWVkaWF0ZShmbilcbiAgICAvLyBpZiBpbnNpZGUgb2Ygd2ViIHdvcmtlclxuICAgIGVsc2UgaWYgKGdsb2JhbC5pbXBvcnRTY3JpcHRzKSBzZXRUaW1lb3V0KGZuKVxuICAgIGVsc2Uge1xuICAgICAgcXVldWVJZCsrXG4gICAgICBxdWV1ZVtxdWV1ZUlkXSA9IGZuXG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UocXVldWVJZCwgJyonKVxuICAgIH1cbiAgfVxuXG4gIERlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoISh0aGlzLl9kID09IDEpKVxuICAgICAgdGhyb3cgVHlwZUVycm9yKClcblxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERlZmVycmVkKVxuICAgICAgcmV0dXJuIHZhbHVlXG5cbiAgICByZXR1cm4gbmV3IERlZmVycmVkKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpXG4gICAgfSlcbiAgfVxuXG4gIERlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICghKHRoaXMuX2QgPT0gMSkpXG4gICAgICB0aHJvdyBUeXBlRXJyb3IoKVxuXG4gICAgcmV0dXJuIG5ldyBEZWZlcnJlZChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHJlamVjdCh2YWx1ZSlcbiAgICB9KVxuICB9XG5cbiAgRGVmZXJyZWQuYWxsID0gZnVuY3Rpb24gKGFycikge1xuICAgIGlmICghKHRoaXMuX2QgPT0gMSkpXG4gICAgICB0aHJvdyBUeXBlRXJyb3IoKVxuXG4gICAgaWYgKCEoYXJyIGluc3RhbmNlb2YgQXJyYXkpKVxuICAgICAgcmV0dXJuIERlZmVycmVkLnJlamVjdChUeXBlRXJyb3IoKSlcblxuICAgIHZhciBkID0gbmV3IERlZmVycmVkKClcblxuICAgIGZ1bmN0aW9uIGRvbmUoZSwgdikge1xuICAgICAgaWYgKHYpXG4gICAgICAgIHJldHVybiBkLnJlc29sdmUodilcblxuICAgICAgaWYgKGUpXG4gICAgICAgIHJldHVybiBkLnJlamVjdChlKVxuXG4gICAgICB2YXIgdW5yZXNvbHZlZCA9IGFyci5yZWR1Y2UoZnVuY3Rpb24gKGNudCwgdikge1xuICAgICAgICBpZiAodiAmJiB2LnRoZW4pXG4gICAgICAgICAgcmV0dXJuIGNudCArIDFcbiAgICAgICAgcmV0dXJuIGNudFxuICAgICAgfSwgMClcblxuICAgICAgaWYodW5yZXNvbHZlZCA9PSAwKVxuICAgICAgICBkLnJlc29sdmUoYXJyKVxuXG4gICAgICBhcnIubWFwKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgIGlmICh2ICYmIHYudGhlbilcbiAgICAgICAgICB2LnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgIGFycltpXSA9IHJcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICAgICAgcmV0dXJuIHJcbiAgICAgICAgICB9LCBkb25lKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBkb25lKClcblxuICAgIHJldHVybiBkXG4gIH1cblxuICBEZWZlcnJlZC5yYWNlID0gZnVuY3Rpb24gKGFycikge1xuICAgIGlmICghKHRoaXMuX2QgPT0gMSkpXG4gICAgICB0aHJvdyBUeXBlRXJyb3IoKVxuXG4gICAgaWYgKCEoYXJyIGluc3RhbmNlb2YgQXJyYXkpKVxuICAgICAgcmV0dXJuIERlZmVycmVkLnJlamVjdChUeXBlRXJyb3IoKSlcblxuICAgIGlmIChhcnIubGVuZ3RoID09IDApXG4gICAgICByZXR1cm4gbmV3IERlZmVycmVkKClcblxuICAgIHZhciBkID0gbmV3IERlZmVycmVkKClcblxuICAgIGZ1bmN0aW9uIGRvbmUoZSwgdikge1xuICAgICAgaWYgKHYpXG4gICAgICAgIHJldHVybiBkLnJlc29sdmUodilcblxuICAgICAgaWYgKGUpXG4gICAgICAgIHJldHVybiBkLnJlamVjdChlKVxuXG4gICAgICB2YXIgdW5yZXNvbHZlZCA9IGFyci5yZWR1Y2UoZnVuY3Rpb24gKGNudCwgdikge1xuICAgICAgICBpZiAodiAmJiB2LnRoZW4pXG4gICAgICAgICAgcmV0dXJuIGNudCArIDFcbiAgICAgICAgcmV0dXJuIGNudFxuICAgICAgfSwgMClcblxuICAgICAgaWYodW5yZXNvbHZlZCA9PSAwKVxuICAgICAgICBkLnJlc29sdmUoYXJyKVxuXG4gICAgICBhcnIubWFwKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgIGlmICh2ICYmIHYudGhlbilcbiAgICAgICAgICB2LnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgIGRvbmUobnVsbCwgcilcbiAgICAgICAgICB9LCBkb25lKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBkb25lKClcblxuICAgIHJldHVybiBkXG4gIH1cblxuICBEZWZlcnJlZC5fZCA9IDFcblxuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGZ1bmN0aW9uIERlZmVycmVkKHJlc29sdmVyKSB7XG4gICAgJ3VzZSBzdHJpY3QnXG4gICAgaWYgKHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nICYmIHJlc29sdmVyICE9IHVuZGVmaW5lZClcbiAgICAgIHRocm93IFR5cGVFcnJvcigpXG5cbiAgICBpZiAodHlwZW9mIHRoaXMgIT0gJ29iamVjdCcgfHwgKHRoaXMgJiYgdGhpcy50aGVuKSlcbiAgICAgIHRocm93IFR5cGVFcnJvcigpXG5cbiAgICAvLyBzdGF0ZXNcbiAgICAvLyAwOiBwZW5kaW5nXG4gICAgLy8gMTogcmVzb2x2aW5nXG4gICAgLy8gMjogcmVqZWN0aW5nXG4gICAgLy8gMzogcmVzb2x2ZWRcbiAgICAvLyA0OiByZWplY3RlZFxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIHN0YXRlID0gMCxcbiAgICAgIHZhbCA9IDAsXG4gICAgICBuZXh0ID0gW10sXG4gICAgICBmbiwgZXI7XG5cbiAgICBzZWxmWydwcm9taXNlJ10gPSBzZWxmXG5cbiAgICBzZWxmWydyZXNvbHZlJ10gPSBmdW5jdGlvbiAodikge1xuICAgICAgZm4gPSBzZWxmLmZuXG4gICAgICBlciA9IHNlbGYuZXJcbiAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgdmFsID0gdlxuICAgICAgICBzdGF0ZSA9IDFcblxuICAgICAgICBuZXh0VGljayhmaXJlKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGZcbiAgICB9XG5cbiAgICBzZWxmWydyZWplY3QnXSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICBmbiA9IHNlbGYuZm5cbiAgICAgIGVyID0gc2VsZi5lclxuICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICB2YWwgPSB2XG4gICAgICAgIHN0YXRlID0gMlxuXG4gICAgICAgIG5leHRUaWNrKGZpcmUpXG5cbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmXG4gICAgfVxuXG4gICAgc2VsZlsnX2QnXSA9IDFcblxuICAgIHNlbGZbJ3RoZW4nXSA9IGZ1bmN0aW9uIChfZm4sIF9lcikge1xuICAgICAgaWYgKCEodGhpcy5fZCA9PSAxKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKClcblxuICAgICAgdmFyIGQgPSBuZXcgRGVmZXJyZWQoKVxuXG4gICAgICBkLmZuID0gX2ZuXG4gICAgICBkLmVyID0gX2VyXG4gICAgICBpZiAoc3RhdGUgPT0gMykge1xuICAgICAgICBkLnJlc29sdmUodmFsKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc3RhdGUgPT0gNCkge1xuICAgICAgICBkLnJlamVjdCh2YWwpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmV4dC5wdXNoKGQpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkXG4gICAgfVxuXG4gICAgc2VsZlsnY2F0Y2gnXSA9IGZ1bmN0aW9uIChfZXIpIHtcbiAgICAgIHJldHVybiBzZWxmWyd0aGVuJ10obnVsbCwgX2VyKVxuICAgIH1cblxuICAgIHZhciBmaW5pc2ggPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgc3RhdGUgPSB0eXBlIHx8IDRcbiAgICAgIG5leHQubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHN0YXRlID09IDMgJiYgcC5yZXNvbHZlKHZhbCkgfHwgcC5yZWplY3QodmFsKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiByZXNvbHZlciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXNvbHZlcihzZWxmWydyZXNvbHZlJ10sIHNlbGZbJ3JlamVjdCddKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNlbGZbJ3JlamVjdCddKGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGZcblxuICAgIC8vIHJlZiA6IHJlZmVyZW5jZSB0byAndGhlbicgZnVuY3Rpb25cbiAgICAvLyBjYiwgZWMsIGNuIDogc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2ssIG5vdFRoZW5uYWJsZUNhbGxiYWNrXG4gICAgZnVuY3Rpb24gdGhlbm5hYmxlIChyZWYsIGNiLCBlYywgY24pIHtcbiAgICAgIC8vIFByb21pc2VzIGNhbiBiZSByZWplY3RlZCB3aXRoIG90aGVyIHByb21pc2VzLCB3aGljaCBzaG91bGQgcGFzcyB0aHJvdWdoXG4gICAgICBpZiAoc3RhdGUgPT0gMikge1xuICAgICAgICByZXR1cm4gY24oKVxuICAgICAgfVxuICAgICAgaWYgKCh0eXBlb2YgdmFsID09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIHJlZiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAvLyBjbnQgcHJvdGVjdHMgYWdhaW5zdCBhYnVzZSBjYWxscyBmcm9tIHNwZWMgY2hlY2tlclxuICAgICAgICAgIHZhciBjbnQgPSAwXG4gICAgICAgICAgcmVmLmNhbGwodmFsLCBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgaWYgKGNudCsrKSByZXR1cm5cbiAgICAgICAgICAgIHZhbCA9IHZcbiAgICAgICAgICAgIGNiKClcbiAgICAgICAgICB9LCBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgaWYgKGNudCsrKSByZXR1cm5cbiAgICAgICAgICAgIHZhbCA9IHZcbiAgICAgICAgICAgIGVjKClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdmFsID0gZVxuICAgICAgICAgIGVjKClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY24oKVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBmaXJlKCkge1xuXG4gICAgICAvLyBjaGVjayBpZiBpdCdzIGEgdGhlbmFibGVcbiAgICAgIHZhciByZWY7XG4gICAgICB0cnkge1xuICAgICAgICByZWYgPSB2YWwgJiYgdmFsLnRoZW5cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFsID0gZVxuICAgICAgICBzdGF0ZSA9IDJcbiAgICAgICAgcmV0dXJuIGZpcmUoKVxuICAgICAgfVxuXG4gICAgICB0aGVubmFibGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0YXRlID0gMVxuICAgICAgICBmaXJlKClcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RhdGUgPSAyXG4gICAgICAgIGZpcmUoKVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PSAxICYmIHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YWwgPSBmbih2YWwpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxzZSBpZiAoc3RhdGUgPT0gMiAmJiB0eXBlb2YgZXIgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFsID0gZXIodmFsKVxuICAgICAgICAgICAgc3RhdGUgPSAxXG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdmFsID0gZVxuICAgICAgICAgIHJldHVybiBmaW5pc2goKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PSBzZWxmKSB7XG4gICAgICAgICAgdmFsID0gVHlwZUVycm9yKClcbiAgICAgICAgICBmaW5pc2goKVxuICAgICAgICB9IGVsc2UgdGhlbm5hYmxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZmluaXNoKDMpXG4gICAgICAgICAgfSwgZmluaXNoLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmaW5pc2goc3RhdGUgPT0gMSAmJiAzKVxuICAgICAgICAgIH0pXG5cbiAgICAgIH0pXG4gICAgfVxuXG5cbiAgfVxuXG4gIC8vIEV4cG9ydCBvdXIgbGlicmFyeSBvYmplY3QsIGVpdGhlciBmb3Igbm9kZS5qcyBvciBhcyBhIGdsb2JhbGx5IHNjb3BlZCB2YXJpYWJsZVxuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZVsnZXhwb3J0cyddID0gRGVmZXJyZWRcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWxbJ1Byb21pc2UnXSA9IGdsb2JhbFsnUHJvbWlzZSddIHx8IERlZmVycmVkXG4gIH1cbn0pKClcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIiwiZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9DYWxlbmRhclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy90eXBlc1wiO1xuIiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcbmltcG9ydCB7IGNyZWF0ZSwgZWwsIGluamVjdCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IEV2ZW50U3lzdGVtLCBJRXZlbnRTeXN0ZW0gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZXZlbnRzXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3ZpZXdcIjtcbmltcG9ydCB7IFRpbWVwaWNrZXIsIFRpbWVwaWNrZXJFdmVudHMgfSBmcm9tIFwiQGRoeC90cy10aW1lcGlja2VyXCI7XG5pbXBvcnQgeyBsaW5rQnV0dG9uQ2xhc3NlcyB9IGZyb20gXCIuL2hlbHBlclwiO1xuaW1wb3J0IHsgbG9jYWxlLCBnZXRGb3JtYXR0ZWREYXRlLCBEYXRlSGVscGVyIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RhdGVcIjtcbmltcG9ydCB7XG5cdENhbGVuZGFyRXZlbnRzLFxuXHRJQ2FsZW5kYXIsXG5cdElDYWxlbmRhckNvbmZpZyxcblx0SUNhbGVuZGFyV2Vlayxcblx0Vmlld01vZGUsXG5cdElDYWxlbmRhckhhbmRsZXJzTWFwLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgSUhhbmRsZXJzIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBpc0lFIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcblxuZXhwb3J0IGNsYXNzIENhbGVuZGFyIGV4dGVuZHMgVmlldyBpbXBsZW1lbnRzIElDYWxlbmRhciB7XG5cdHB1YmxpYyBldmVudHM6IElFdmVudFN5c3RlbTxDYWxlbmRhckV2ZW50cywgSUNhbGVuZGFySGFuZGxlcnNNYXA+O1xuXHRwdWJsaWMgY29uZmlnOiBJQ2FsZW5kYXJDb25maWc7XG5cblx0cHJpdmF0ZSBfc2VsZWN0ZWQ6IERhdGVbXSA9IFtdO1xuXHRwcml2YXRlIF9jdXJyZW50RGF0ZTogRGF0ZTtcblx0cHJpdmF0ZSBfY3VycmVudFZpZXdNb2RlOiBWaWV3TW9kZTtcblx0cHJpdmF0ZSBfaXNTZWxlY3RlZEluQ3VycmVudFJhbmdlOiBib29sZWFuO1xuXG5cdHByaXZhdGUgX2hhbmRsZXJzOiBJSGFuZGxlcnM7XG5cblx0cHJpdmF0ZSBfdGltZXBpY2tlcjogVGltZXBpY2tlcjtcblx0cHJpdmF0ZSBfdGltZTogc3RyaW5nO1xuXHRwcml2YXRlIF9saW5rZWRDYWxlbmRhcjogQ2FsZW5kYXI7XG5cblx0Y29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IHN0cmluZywgY29uZmlnOiBJQ2FsZW5kYXJDb25maWcgPSB7fSkge1xuXHRcdHN1cGVyKFxuXHRcdFx0Y29udGFpbmVyLFxuXHRcdFx0ZXh0ZW5kKFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0d2Vla1N0YXJ0OiBcInN1bmRheVwiLFxuXHRcdFx0XHRcdHRoaXNNb250aE9ubHk6IGZhbHNlLFxuXHRcdFx0XHRcdGRhdGVGb3JtYXQ6IHdpbmRvdyAmJiAod2luZG93IGFzIGFueSkuZGh4ICYmICh3aW5kb3cgYXMgYW55KS5kaHguZGF0ZUZvcm1hdCxcblx0XHRcdFx0XHR3aWR0aDogXCIyNTBweFwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRjb25maWdcblx0XHRcdClcblx0XHQpO1xuXG5cdFx0dGhpcy5ldmVudHMgPSBuZXcgRXZlbnRTeXN0ZW08Q2FsZW5kYXJFdmVudHM+KCk7XG5cdFx0dGhpcy5jb25maWcuZGlzYWJsZWREYXRlcyA9IHRoaXMuY29uZmlnLmRpc2FibGVkRGF0ZXMgfHwgdGhpcy5jb25maWcuYmxvY2s7IC8vIFRPRE86IHJlbW92ZSBzdWl0ZV83LjBcblx0XHR0aGlzLmNvbmZpZy5tb2RlID0gdGhpcy5jb25maWcubW9kZSB8fCB0aGlzLmNvbmZpZy52aWV3OyAvLyBUT0RPOiByZW1vdmUgc3VpdGVfNy4wXG5cblx0XHRpZiAoIXRoaXMuY29uZmlnLmRhdGVGb3JtYXQpIHtcblx0XHRcdGlmICh0aGlzLmNvbmZpZy50aW1lUGlja2VyKSB7XG5cdFx0XHRcdGlmICh0aGlzLmNvbmZpZy50aW1lRm9ybWF0ID09PSAxMikge1xuXHRcdFx0XHRcdHRoaXMuY29uZmlnLmRhdGVGb3JtYXQgPSBcIiVkLyVtLyV5ICVoOiVpICVBXCI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jb25maWcuZGF0ZUZvcm1hdCA9IFwiJWQvJW0vJXkgJUg6JWlcIjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5jb25maWcuZGF0ZUZvcm1hdCA9IFwiJWQvJW0vJXlcIjtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHRoaXMuY29uZmlnLnZhbHVlKSB7XG5cdFx0XHR0aGlzLl9zZXRTZWxlY3RlZCh0aGlzLmNvbmZpZy52YWx1ZSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmNvbmZpZy5kYXRlKSB7XG5cdFx0XHR0aGlzLl9jdXJyZW50RGF0ZSA9IERhdGVIZWxwZXIudG9EYXRlT2JqZWN0KHRoaXMuY29uZmlnLmRhdGUsIHRoaXMuY29uZmlnLmRhdGVGb3JtYXQpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5fZ2V0U2VsZWN0ZWQoKSkge1xuXHRcdFx0dGhpcy5fY3VycmVudERhdGUgPSBEYXRlSGVscGVyLmNvcHkodGhpcy5fZ2V0U2VsZWN0ZWQoKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2N1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcblx0XHR9XG5cdFx0c3dpdGNoICh0aGlzLmNvbmZpZy5tb2RlKSB7XG5cdFx0XHRjYXNlIFwibW9udGhcIjpcblx0XHRcdFx0dGhpcy5fY3VycmVudFZpZXdNb2RlID0gXCJtb250aFwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJ5ZWFyXCI6XG5cdFx0XHRcdHRoaXMuX2N1cnJlbnRWaWV3TW9kZSA9IFwieWVhclwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRoaXMuX2N1cnJlbnRWaWV3TW9kZSA9IFwiY2FsZW5kYXJcIjtcblx0XHR9XG5cblx0XHR0aGlzLl9pbml0SGFuZGxlcnMoKTtcblxuXHRcdGlmICh0aGlzLmNvbmZpZy50aW1lUGlja2VyKSB7XG5cdFx0XHR0aGlzLl90aW1lcGlja2VyID0gbmV3IFRpbWVwaWNrZXIobnVsbCwge1xuXHRcdFx0XHR0aW1lRm9ybWF0OiB0aGlzLmNvbmZpZy50aW1lRm9ybWF0LFxuXHRcdFx0XHRjb250cm9sczogdHJ1ZSxcblx0XHRcdH0pO1xuXHRcdFx0Y29uc3QgaW5pdFRpbWUgPSB0aGlzLl9nZXRTZWxlY3RlZCgpIHx8IG5ldyBEYXRlKCk7XG5cdFx0XHR0aGlzLl90aW1lcGlja2VyLnNldFZhbHVlKGluaXRUaW1lKTtcblx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl90aW1lcGlja2VyLmdldFZhbHVlKCk7XG5cblx0XHRcdHRoaXMuX3RpbWVwaWNrZXIuZXZlbnRzLm9uKFRpbWVwaWNrZXJFdmVudHMuYWZ0ZXJDbG9zZSwgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLl90aW1lcGlja2VyLnNldFZhbHVlKHRoaXMuX3RpbWUpO1xuXHRcdFx0XHR0aGlzLnNob3dEYXRlKG51bGwsIFwiY2FsZW5kYXJcIik7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5fdGltZXBpY2tlci5ldmVudHMub24oVGltZXBpY2tlckV2ZW50cy5hZnRlckFwcGx5LCAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHsgaG91ciwgbWludXRlLCBBTSB9ID0gdGhpcy5fdGltZXBpY2tlci5nZXRWYWx1ZSh0cnVlKTtcblx0XHRcdFx0Y29uc3Qgb2xkRGF0ZSA9IHRoaXMuX2dldFNlbGVjdGVkKCk7XG5cdFx0XHRcdGNvbnN0IG5ld0RhdGUgPSBEYXRlSGVscGVyLndpdGhIb3Vyc0FuZE1pbnV0ZXMoXG5cdFx0XHRcdFx0dGhpcy5fZ2V0U2VsZWN0ZWQoKSB8fCBuZXcgRGF0ZSgpLFxuXHRcdFx0XHRcdGhvdXIsXG5cdFx0XHRcdFx0bWludXRlLFxuXHRcdFx0XHRcdEFNXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGlmICh0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLmJlZm9yZUNoYW5nZSwgW25ld0RhdGUsIG9sZERhdGUsIHRydWVdKSkge1xuXHRcdFx0XHRcdHRoaXMuX3NlbGVjdGVkW3RoaXMuX3NlbGVjdGVkLmxlbmd0aCAtIDFdID0gbmV3RGF0ZTtcblx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLmNoYW5nZSwgW25ld0RhdGUsIG9sZERhdGUsIHRydWVdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl90aW1lID0gdGhpcy5fdGltZXBpY2tlci5nZXRWYWx1ZSgpO1xuXHRcdFx0XHR0aGlzLnNob3dEYXRlKG51bGwsIFwiY2FsZW5kYXJcIik7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRjb25zdCByZW5kZXIgPSAoKSA9PiB0aGlzLl9kcmF3KCk7XG5cdFx0dGhpcy5tb3VudChjb250YWluZXIsIGNyZWF0ZSh7IHJlbmRlciB9KSk7XG5cdH1cblx0c2V0VmFsdWUodmFsdWU6IERhdGUgfCBEYXRlW10gfCBzdHJpbmcgfCBzdHJpbmdbXSk6IGJvb2xlYW4ge1xuXHRcdGlmICghdmFsdWUgfHwgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR0aGlzLl9zZWxlY3RlZCA9IFtdO1xuXHRcdGNvbnN0IGN1cnJlbnREYXRlID0gdmFsdWUgaW5zdGFuY2VvZiBBcnJheSA/IHZhbHVlWzBdIDogdmFsdWU7XG5cdFx0Y29uc3QgZGF0ZSA9IERhdGVIZWxwZXIudG9EYXRlT2JqZWN0KGN1cnJlbnREYXRlLCB0aGlzLmNvbmZpZy5kYXRlRm9ybWF0KTtcblx0XHRjb25zdCBvbGREYXRlID0gRGF0ZUhlbHBlci5jb3B5KHRoaXMuX2dldFNlbGVjdGVkKCkpO1xuXG5cdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLmJlZm9yZUNoYW5nZSwgW2RhdGUsIG9sZERhdGUsIGZhbHNlXSkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLl9zZXRTZWxlY3RlZCh2YWx1ZSk7XG5cblx0XHRpZiAodGhpcy5fdGltZXBpY2tlcikge1xuXHRcdFx0dGhpcy5fdGltZXBpY2tlci5zZXRWYWx1ZShkYXRlKTtcblx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl90aW1lcGlja2VyLmdldFZhbHVlKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zaG93RGF0ZSh0aGlzLl9nZXRTZWxlY3RlZCgpKTtcblx0XHR0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLmNoYW5nZSwgW2RhdGUsIG9sZERhdGUsIGZhbHNlXSk7XG5cdFx0dGhpcy5wYWludCgpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGdldFZhbHVlPFQgZXh0ZW5kcyBib29sZWFuID0gZmFsc2U+KGFzRGF0ZU9iamVjdD86IFQpOiBEYXRlIHwgc3RyaW5nO1xuXHRnZXRWYWx1ZTxUIGV4dGVuZHMgYm9vbGVhbiA9IHRydWU+KGFzRGF0ZU9iamVjdD86IFQpOiBEYXRlW10gfCBzdHJpbmdbXTtcblx0Z2V0VmFsdWUoYXNEYXRlT2JqZWN0ID0gZmFsc2UpOiBEYXRlIHwgRGF0ZVtdIHwgc3RyaW5nIHwgc3RyaW5nW10ge1xuXHRcdGlmICghdGhpcy5fc2VsZWN0ZWRbMF0pIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblx0XHRpZiAodGhpcy5jb25maWcucmFuZ2UpIHtcblx0XHRcdHJldHVybiBhc0RhdGVPYmplY3Rcblx0XHRcdFx0PyB0aGlzLl9zZWxlY3RlZC5tYXAoZGF0ZSA9PiBEYXRlSGVscGVyLmNvcHkoZGF0ZSkpXG5cdFx0XHRcdDogdGhpcy5fc2VsZWN0ZWQubWFwKGRhdGUgPT4gZ2V0Rm9ybWF0dGVkRGF0ZSh0aGlzLmNvbmZpZy5kYXRlRm9ybWF0LCBkYXRlKSk7XG5cdFx0fVxuXHRcdHJldHVybiBhc0RhdGVPYmplY3Rcblx0XHRcdD8gRGF0ZUhlbHBlci5jb3B5KHRoaXMuX3NlbGVjdGVkWzBdKVxuXHRcdFx0OiBnZXRGb3JtYXR0ZWREYXRlKHRoaXMuY29uZmlnLmRhdGVGb3JtYXQsIHRoaXMuX3NlbGVjdGVkWzBdKTtcblx0fVxuXHRnZXRDdXJyZW50TW9kZSgpOiBWaWV3TW9kZSB7XG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnRWaWV3TW9kZTtcblx0fVxuXHRzaG93RGF0ZShkYXRlPzogRGF0ZSwgbW9kZT86IFZpZXdNb2RlKTogdm9pZCB7XG5cdFx0aWYgKGRhdGUpIHtcblx0XHRcdHRoaXMuX2N1cnJlbnREYXRlID0gRGF0ZUhlbHBlci5jb3B5KGRhdGUpO1xuXHRcdH1cblx0XHRpZiAobW9kZSkge1xuXHRcdFx0dGhpcy5fY3VycmVudFZpZXdNb2RlID0gbW9kZTtcblx0XHR9XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdGRlc3RydWN0b3IoKTogdm9pZCB7XG5cdFx0dGhpcy5fbGlua2VkQ2FsZW5kYXIgJiYgdGhpcy5fdW5saW5rKCk7XG5cdFx0dGhpcy5fdGltZXBpY2tlciAmJiB0aGlzLl90aW1lcGlja2VyLmRlc3RydWN0b3IoKTtcblx0XHR0aGlzLmV2ZW50cyAmJiB0aGlzLmV2ZW50cy5jbGVhcigpO1xuXG5cdFx0dGhpcy5jb25maWcgPSB0aGlzLmV2ZW50cyA9IG51bGw7XG5cdFx0dGhpcy5fdWlkID0gdGhpcy5fc2VsZWN0ZWQgPSB0aGlzLl9jdXJyZW50RGF0ZSA9IHRoaXMuX2N1cnJlbnRWaWV3TW9kZSA9IHRoaXMuX2hhbmRsZXJzID0gdGhpcy5fdGltZXBpY2tlciA9IHRoaXMuX3RpbWUgPSBudWxsO1xuXG5cdFx0dGhpcy51bm1vdW50KCk7XG5cdH1cblx0Y2xlYXIoKTogdm9pZCB7XG5cdFx0Y29uc3Qgb2xkRGF0ZSA9IHRoaXMuZ2V0VmFsdWUodHJ1ZSkgYXMgRGF0ZTtcblx0XHRpZiAodGhpcy5jb25maWcudGltZVBpY2tlcikge1xuXHRcdFx0dGhpcy5fdGltZXBpY2tlci5jbGVhcigpO1xuXHRcdFx0dGhpcy5fdGltZSA9IHRoaXMuX3RpbWVwaWNrZXIuZ2V0VmFsdWUoKTtcblx0XHR9XG5cdFx0dGhpcy5fc2VsZWN0ZWQgPSBbXTtcblx0XHR0aGlzLnNob3dEYXRlKG51bGwsIHRoaXMuY29uZmlnLm1vZGUpO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoQ2FsZW5kYXJFdmVudHMuY2hhbmdlLCBbdGhpcy5nZXRWYWx1ZSh0cnVlKSBhcyBEYXRlLCBvbGREYXRlLCBmYWxzZV0pO1xuXHR9XG5cdGxpbmsodGFyZ2V0Q2FsZW5kYXI6IENhbGVuZGFyKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuX2xpbmtlZENhbGVuZGFyKSB7XG5cdFx0XHR0aGlzLl91bmxpbmsoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9saW5rZWRDYWxlbmRhciA9IHRhcmdldENhbGVuZGFyO1xuXG5cdFx0Y29uc3QgcmF3TG93ZXJEYXRlID0gdGhpcy5nZXRWYWx1ZSh0cnVlKTtcblx0XHRjb25zdCByYXdVcHBlckRhdGUgPSB0YXJnZXRDYWxlbmRhci5nZXRWYWx1ZSh0cnVlKTtcblxuXHRcdGxldCBsb3dlckRhdGU6IERhdGUgPSByYXdMb3dlckRhdGUgJiYgRGF0ZUhlbHBlci5kYXlTdGFydChyYXdMb3dlckRhdGUgYXMgRGF0ZSk7XG5cdFx0bGV0IHVwcGVyRGF0ZTogRGF0ZSA9IHJhd1VwcGVyRGF0ZSAmJiBEYXRlSGVscGVyLmRheVN0YXJ0KHJhd1VwcGVyRGF0ZSBhcyBEYXRlKTtcblxuXHRcdGNvbnN0IGdldFJhbmdlQ2xhc3MgPSAoZGF0ZTogRGF0ZSkgPT4ge1xuXHRcdFx0aWYgKERhdGVIZWxwZXIuaXNTYW1lRGF5KHVwcGVyRGF0ZSwgbG93ZXJEYXRlKSkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHRcdGxldCBwb3NpdGlvbkluUmFuZ2UgPSBcImRoeF9jYWxlbmRhci1kYXktLWluLXJhbmdlXCI7XG5cdFx0XHRpZiAoRGF0ZUhlbHBlci5pc1NhbWVEYXkoZGF0ZSwgbG93ZXJEYXRlKSkge1xuXHRcdFx0XHRwb3NpdGlvbkluUmFuZ2UgKz0gXCIgZGh4X2NhbGVuZGFyLWRheS0tZmlyc3QtZGF0ZVwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKERhdGVIZWxwZXIuaXNTYW1lRGF5KGRhdGUsIHVwcGVyRGF0ZSkpIHtcblx0XHRcdFx0cG9zaXRpb25JblJhbmdlICs9IFwiIGRoeF9jYWxlbmRhci1kYXktLWxhc3QtZGF0ZVwiO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBvc2l0aW9uSW5SYW5nZTtcblx0XHR9O1xuXHRcdGNvbnN0IHJhbmdlTWFyayA9IChkYXRlOiBEYXRlKSA9PiB7XG5cdFx0XHRpZiAobG93ZXJEYXRlICYmIHVwcGVyRGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gZGF0ZSA+PSBsb3dlckRhdGUgJiYgZGF0ZSA8PSB1cHBlckRhdGUgJiYgZ2V0UmFuZ2VDbGFzcyhkYXRlKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGlmICghdGhpcy5jb25maWcuJHJhbmdlTWFyayB8fCAhdGhpcy5fbGlua2VkQ2FsZW5kYXIuY29uZmlnLiRyYW5nZU1hcmspIHtcblx0XHRcdHRoaXMuY29uZmlnLiRyYW5nZU1hcmsgPSB0aGlzLl9saW5rZWRDYWxlbmRhci5jb25maWcuJHJhbmdlTWFyayA9IHJhbmdlTWFyaztcblx0XHR9XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5kaXNhYmxlZERhdGVzIHx8ICF0aGlzLl9saW5rZWRDYWxlbmRhci5jb25maWcuZGlzYWJsZWREYXRlcykge1xuXHRcdFx0dGhpcy5jb25maWcuZGlzYWJsZWREYXRlcyA9IChkYXRlOiBEYXRlKSA9PiB7XG5cdFx0XHRcdGlmICh1cHBlckRhdGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0ZSA+IHVwcGVyRGF0ZTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHRoaXMuX2xpbmtlZENhbGVuZGFyLmNvbmZpZy5kaXNhYmxlZERhdGVzID0gKGRhdGU6IERhdGUpID0+IHtcblx0XHRcdFx0aWYgKGxvd2VyRGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRlIDwgbG93ZXJEYXRlO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHR0aGlzLmNvbmZpZy50aGlzTW9udGhPbmx5ID0gdHJ1ZTtcblx0XHR0YXJnZXRDYWxlbmRhci5jb25maWcudGhpc01vbnRoT25seSA9IHRydWU7XG5cblx0XHR0aGlzLmV2ZW50cy5vbihcblx0XHRcdENhbGVuZGFyRXZlbnRzLmNoYW5nZSxcblx0XHRcdGRhdGUgPT4ge1xuXHRcdFx0XHRsb3dlckRhdGUgPSBEYXRlSGVscGVyLmRheVN0YXJ0KGRhdGUpO1xuXHRcdFx0XHR0aGlzLl9saW5rZWRDYWxlbmRhci5wYWludCgpO1xuXHRcdFx0fSxcblx0XHRcdFwibGlua1wiXG5cdFx0KTtcblxuXHRcdHRoaXMuX2xpbmtlZENhbGVuZGFyLmV2ZW50cy5vbihcblx0XHRcdENhbGVuZGFyRXZlbnRzLmNoYW5nZSxcblx0XHRcdGRhdGUgPT4ge1xuXHRcdFx0XHR1cHBlckRhdGUgPSBEYXRlSGVscGVyLmRheVN0YXJ0KGRhdGUpO1xuXHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHR9LFxuXHRcdFx0XCJsaW5rXCJcblx0XHQpO1xuXG5cdFx0dGhpcy5fbGlua2VkQ2FsZW5kYXIucGFpbnQoKTtcblx0XHR0aGlzLnBhaW50KCk7XG5cdH1cblx0cHJpdmF0ZSBfdW5saW5rKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLl9saW5rZWRDYWxlbmRhcikge1xuXHRcdFx0dGhpcy5jb25maWcuJHJhbmdlTWFyayA9IHRoaXMuX2xpbmtlZENhbGVuZGFyLmNvbmZpZy4kcmFuZ2VNYXJrID0gbnVsbDtcblx0XHRcdHRoaXMuY29uZmlnLmRpc2FibGVkRGF0ZXMgPSB0aGlzLl9saW5rZWRDYWxlbmRhci5jb25maWcuZGlzYWJsZWREYXRlcyA9IG51bGw7XG5cblx0XHRcdHRoaXMuZXZlbnRzLmRldGFjaChDYWxlbmRhckV2ZW50cy5jaGFuZ2UsIFwibGlua1wiKTtcblx0XHRcdHRoaXMuX2xpbmtlZENhbGVuZGFyLmV2ZW50cy5kZXRhY2goQ2FsZW5kYXJFdmVudHMuY2hhbmdlLCBcImxpbmtcIik7XG5cdFx0XHR0aGlzLl9saW5rZWRDYWxlbmRhci5wYWludCgpO1xuXG5cdFx0XHR0aGlzLl9saW5rZWRDYWxlbmRhciA9IG51bGw7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX3NldFNlbGVjdGVkKHZhbHVlOiBEYXRlIHwgRGF0ZVtdIHwgc3RyaW5nIHwgc3RyaW5nW10pOiB2b2lkIHtcblx0XHRjb25zdCBjdXJyZW50RGF0ZSA9IHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgPyB2YWx1ZVswXSA6IHZhbHVlO1xuXHRcdGNvbnN0IGRhdGUgPSBEYXRlSGVscGVyLnRvRGF0ZU9iamVjdChjdXJyZW50RGF0ZSwgdGhpcy5jb25maWcuZGF0ZUZvcm1hdCk7XG5cblx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSAmJiB0aGlzLmNvbmZpZy5yYW5nZSkge1xuXHRcdFx0Y29uc3QgZmlsdGVyRGF0ZTogRGF0ZVtdID0gW107XG5cdFx0XHR2YWx1ZS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuXHRcdFx0XHRpZiAoaW5kZXggPCAyKSB7XG5cdFx0XHRcdFx0ZmlsdGVyRGF0ZS5wdXNoKERhdGVIZWxwZXIudG9EYXRlT2JqZWN0KGVsZW1lbnQsIHRoaXMuY29uZmlnLmRhdGVGb3JtYXQpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRpZiAoZmlsdGVyRGF0ZS5sZW5ndGggPT09IDIgJiYgZmlsdGVyRGF0ZVswXSA8IGZpbHRlckRhdGVbMV0pIHtcblx0XHRcdFx0ZmlsdGVyRGF0ZS5mb3JFYWNoKGVsZW1lbnQgPT4gdGhpcy5fc2VsZWN0ZWQucHVzaChlbGVtZW50KSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9zZWxlY3RlZFswXSA9IGZpbHRlckRhdGVbMF07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3NlbGVjdGVkWzBdID0gZGF0ZTtcblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfZ2V0U2VsZWN0ZWQoKTogRGF0ZSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlbGVjdGVkW3RoaXMuX3NlbGVjdGVkLmxlbmd0aCAtIDFdO1xuXHR9XG5cdHByaXZhdGUgX2RyYXcoKSB7XG5cdFx0c3dpdGNoICh0aGlzLl9jdXJyZW50Vmlld01vZGUpIHtcblx0XHRcdGNhc2UgXCJjYWxlbmRhclwiOlxuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLm1vZGVDaGFuZ2UsIFtcImNhbGVuZGFyXCJdKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2RyYXdDYWxlbmRhcigpO1xuXHRcdFx0Y2FzZSBcIm1vbnRoXCI6XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ2FsZW5kYXJFdmVudHMubW9kZUNoYW5nZSwgW1wibW9udGhcIl0pO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fZHJhd01vbnRoU2VsZWN0b3IoKTtcblx0XHRcdGNhc2UgXCJ5ZWFyXCI6XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ2FsZW5kYXJFdmVudHMubW9kZUNoYW5nZSwgW1wieWVhclwiXSk7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9kcmF3WWVhclNlbGVjdG9yKCk7XG5cdFx0XHRjYXNlIFwidGltZXBpY2tlclwiOlxuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLm1vZGVDaGFuZ2UsIFtcInRpbWVwaWNrZXJcIl0pO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fZHJhd1RpbWVwaWNrZXIoKTtcblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfaW5pdEhhbmRsZXJzKCkge1xuXHRcdGNvbnN0IGllX2tleV9tYXAgPSB7XG5cdFx0XHRVcDogXCJBcnJvd1VwXCIsXG5cdFx0XHREb3duOiBcIkFycm93RG93blwiLFxuXHRcdFx0UmlnaHQ6IFwiQXJyb3dSaWdodFwiLFxuXHRcdFx0TGVmdDogXCJBcnJvd0xlZnRcIixcblx0XHRcdEVzYzogXCJFc2NhcGVcIixcblx0XHRcdFNwYWNlYmFyOiBcIlNwYWNlXCIsXG5cdFx0fTtcblxuXHRcdGNvbnN0IGdldEtleSA9IGUgPT4ge1xuXHRcdFx0bGV0IGtleTtcblx0XHRcdGlmICgoZS53aGljaCA+PSA0OCAmJiBlLndoaWNoIDw9IDU3KSB8fCAoZS53aGljaCA+PSA2NSAmJiBlLndoaWNoIDw9IDkwKSkge1xuXHRcdFx0XHRrZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUud2hpY2gpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3Qga2V5TmFtZSA9IGUud2hpY2ggPT09IDMyID8gZS5jb2RlIDogZS5rZXk7XG5cdFx0XHRcdGtleSA9IGlzSUUoKSA/IGllX2tleV9tYXBba2V5TmFtZV0gfHwga2V5TmFtZSA6IGtleU5hbWU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBrZXk7XG5cdFx0fTtcblxuXHRcdGNvbnN0IGdldFZlcnRpY2FsUmFuZ2UgPSAoZGVjcmVhc2UgPSBmYWxzZSk6IG51bWJlciA9PiB7XG5cdFx0XHRsZXQgcmFuZ2UgPSAwO1xuXHRcdFx0c3dpdGNoICh0aGlzLl9jdXJyZW50Vmlld01vZGUpIHtcblx0XHRcdFx0Y2FzZSBcImNhbGVuZGFyXCI6XG5cdFx0XHRcdFx0cmFuZ2UgPSBkZWNyZWFzZSA/IC03IDogNztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIm1vbnRoXCI6XG5cdFx0XHRcdFx0cmFuZ2UgPSBkZWNyZWFzZSA/IC00IDogNDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInllYXJcIjpcblx0XHRcdFx0XHRyYW5nZSA9IGRlY3JlYXNlID8gLTQgOiA0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmFuZ2U7XG5cdFx0fTtcblxuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0b25rZXlkb3duOiB7XG5cdFx0XHRcdFwiLmRoeF9jYWxlbmRhci15ZWFyLCAuZGh4X2NhbGVuZGFyLW1vbnRoLCAuZGh4X2NhbGVuZGFyLWRheVwiOiAoX2UsIHZuKSA9PiB7XG5cdFx0XHRcdFx0c3dpdGNoIChnZXRLZXkoX2UpKSB7XG5cdFx0XHRcdFx0XHRjYXNlIFwiRW50ZXJcIjpcblx0XHRcdFx0XHRcdFx0dGhpcy5fc2VsZWN0RGF0ZShfZSwgdm4pO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJBcnJvd0xlZnRcIjpcblx0XHRcdFx0XHRcdFx0dGhpcy5fbW92ZUJyb3dzZUZvY3VzKF9lLCB2biwgLTEpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJBcnJvd1JpZ2h0XCI6XG5cdFx0XHRcdFx0XHRcdHRoaXMuX21vdmVCcm93c2VGb2N1cyhfZSwgdm4sIDEpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJBcnJvd1VwXCI6XG5cdFx0XHRcdFx0XHRcdHRoaXMuX21vdmVCcm93c2VGb2N1cyhfZSwgdm4sIGdldFZlcnRpY2FsUmFuZ2UodHJ1ZSkpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJBcnJvd0Rvd25cIjpcblx0XHRcdFx0XHRcdFx0dGhpcy5fbW92ZUJyb3dzZUZvY3VzKF9lLCB2biwgZ2V0VmVydGljYWxSYW5nZSgpKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdG9uY2xpY2s6IHtcblx0XHRcdFx0XCIuZGh4X2NhbGVuZGFyLXllYXIsIC5kaHhfY2FsZW5kYXItbW9udGgsIC5kaHhfY2FsZW5kYXItZGF5XCI6IChfZSwgdm4pID0+IHtcblx0XHRcdFx0XHR0aGlzLl9zZWxlY3REYXRlKF9lLCB2bik7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiLmRoeF9jYWxlbmRhci1hY3Rpb25fX2NhbmNlbFwiOiAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5zaG93RGF0ZSh0aGlzLl9nZXRTZWxlY3RlZCgpLCBcImNhbGVuZGFyXCIpO1xuXHRcdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ2FsZW5kYXJFdmVudHMuY2FuY2VsQ2xpY2ssIFtdKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0XCIuZGh4X2NhbGVuZGFyLWFjdGlvbl9fc2hvdy1tb250aFwiOiAoKSA9PiB0aGlzLnNob3dEYXRlKG51bGwsIFwibW9udGhcIiksXG5cdFx0XHRcdFwiLmRoeF9jYWxlbmRhci1hY3Rpb25fX3Nob3cteWVhclwiOiAoKSA9PiB0aGlzLnNob3dEYXRlKG51bGwsIFwieWVhclwiKSxcblx0XHRcdFx0XCIuZGh4X2NhbGVuZGFyLWFjdGlvbl9fbmV4dFwiOiAoKSA9PiB7XG5cdFx0XHRcdFx0bGV0IG5ld0RhdGU7XG5cdFx0XHRcdFx0c3dpdGNoICh0aGlzLl9jdXJyZW50Vmlld01vZGUpIHtcblx0XHRcdFx0XHRcdGNhc2UgXCJjYWxlbmRhclwiOlxuXHRcdFx0XHRcdFx0XHRuZXdEYXRlID0gRGF0ZUhlbHBlci5hZGRNb250aCh0aGlzLl9jdXJyZW50RGF0ZSwgMSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcIm1vbnRoXCI6XG5cdFx0XHRcdFx0XHRcdG5ld0RhdGUgPSBEYXRlSGVscGVyLmFkZFllYXIodGhpcy5fY3VycmVudERhdGUsIDEpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJ5ZWFyXCI6XG5cdFx0XHRcdFx0XHRcdG5ld0RhdGUgPSBEYXRlSGVscGVyLmFkZFllYXIodGhpcy5fY3VycmVudERhdGUsIDEyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5zaG93RGF0ZShuZXdEYXRlKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0XCIuZGh4X2NhbGVuZGFyLWFjdGlvbl9fcHJldlwiOiAoKSA9PiB7XG5cdFx0XHRcdFx0bGV0IG5ld0RhdGU7XG5cdFx0XHRcdFx0c3dpdGNoICh0aGlzLl9jdXJyZW50Vmlld01vZGUpIHtcblx0XHRcdFx0XHRcdGNhc2UgXCJjYWxlbmRhclwiOlxuXHRcdFx0XHRcdFx0XHRuZXdEYXRlID0gRGF0ZUhlbHBlci5hZGRNb250aCh0aGlzLl9jdXJyZW50RGF0ZSwgLTEpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJtb250aFwiOlxuXHRcdFx0XHRcdFx0XHRuZXdEYXRlID0gRGF0ZUhlbHBlci5hZGRZZWFyKHRoaXMuX2N1cnJlbnREYXRlLCAtMSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcInllYXJcIjpcblx0XHRcdFx0XHRcdFx0bmV3RGF0ZSA9IERhdGVIZWxwZXIuYWRkWWVhcih0aGlzLl9jdXJyZW50RGF0ZSwgLTEyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5zaG93RGF0ZShuZXdEYXRlKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0XCIuZGh4X2NhbGVuZGFyLWFjdGlvbl9fc2hvdy10aW1lcGlja2VyXCI6ICgpID0+IHtcblx0XHRcdFx0XHR0aGlzLl9jdXJyZW50Vmlld01vZGUgPSBcInRpbWVwaWNrZXJcIjtcblx0XHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0b25tb3VzZW92ZXI6IHtcblx0XHRcdFx0XCIuZGh4X2NhbGVuZGFyLWRheVwiOiAoZXZlbnQsIG5vZGUpID0+IHtcblx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLmRhdGVNb3VzZU92ZXIsIFtuZXcgRGF0ZShub2RlLmF0dHJzLl9kYXRlKSwgZXZlbnRdKTtcblx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLmRhdGVIb3ZlciwgW25ldyBEYXRlKG5vZGUuYXR0cnMuX2RhdGUpLCBldmVudF0pOyAvLyBUT0RPOiByZW1vdmUgc3VpdGVfNy4wXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cblx0cHJpdmF0ZSBfZ2V0RGF0YShkYXRlOiBEYXRlKTogSUNhbGVuZGFyV2Vla1tdIHtcblx0XHR0aGlzLl9pc1NlbGVjdGVkSW5DdXJyZW50UmFuZ2UgPSBmYWxzZTtcblx0XHRjb25zdCBmaXJzdERheSA9IHRoaXMuY29uZmlnLndlZWtTdGFydCA9PT0gXCJtb25kYXlcIiA/IDEgOiAwO1xuXHRcdGNvbnN0IGZpcnN0ID0gRGF0ZUhlbHBlci53ZWVrU3RhcnQoRGF0ZUhlbHBlci5tb250aFN0YXJ0KGRhdGUpLCBmaXJzdERheSk7XG5cdFx0Y29uc3QgZGF0YSA9IFtdO1xuXG5cdFx0bGV0IHdlZWtzQ291bnQgPSA2O1xuXHRcdGxldCBjdXJyZW50RGF0ZSA9IGZpcnN0O1xuXG5cdFx0d2hpbGUgKHdlZWtzQ291bnQtLSkge1xuXHRcdFx0Y29uc3QgY3VycmVudFdlZWsgPSBEYXRlSGVscGVyLmdldFdlZWtOdW1iZXIoY3VycmVudERhdGUpO1xuXHRcdFx0bGV0IGRpc2FibGVkRGF5cyA9IDA7XG5cdFx0XHRsZXQgZGF5c0NvdW50ID0gNztcblx0XHRcdGNvbnN0IGRheXMgPSBbXTtcblxuXHRcdFx0d2hpbGUgKGRheXNDb3VudC0tKSB7XG5cdFx0XHRcdGNvbnN0IGlzRGF0ZVdlZWtFbmQgPSBEYXRlSGVscGVyLmlzV2Vla0VuZChjdXJyZW50RGF0ZSk7XG5cdFx0XHRcdGNvbnN0IGlzQ3VycmVudE1vbnRoID0gZGF0ZS5nZXRNb250aCgpID09PSBjdXJyZW50RGF0ZS5nZXRNb250aCgpO1xuXHRcdFx0XHRjb25zdCBpc0Jsb2NrZWQgPSB0aGlzLmNvbmZpZy5kaXNhYmxlZERhdGVzICYmIHRoaXMuY29uZmlnLmRpc2FibGVkRGF0ZXMoY3VycmVudERhdGUpO1xuXG5cdFx0XHRcdGNvbnN0IGNzcyA9IFtdO1xuXG5cdFx0XHRcdGlmICh0aGlzLmNvbmZpZy5yYW5nZSAmJiB0aGlzLl9zZWxlY3RlZFswXSAmJiB0aGlzLl9zZWxlY3RlZFsxXSkge1xuXHRcdFx0XHRcdGNvbnN0IGdldFJhbmdlQ2xhc3MgPSAoKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoRGF0ZUhlbHBlci5pc1NhbWVEYXkodGhpcy5fc2VsZWN0ZWRbMF0sIHRoaXMuX3NlbGVjdGVkWzFdKSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBcImRoeF9jYWxlbmRhci1kYXktLWluLXJhbmdlXCI7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRjb25zdCByYW5nZU1hcmsgPSAoKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5fc2VsZWN0ZWRbMF0gJiYgdGhpcy5fc2VsZWN0ZWRbMV0pIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZmlyc3REYXRlID0gRGF0ZUhlbHBlci5kYXlTdGFydCh0aGlzLl9zZWxlY3RlZFswXSk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGxhc3REYXRlID0gRGF0ZUhlbHBlci5kYXlTdGFydCh0aGlzLl9zZWxlY3RlZFsxXSk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBjdXJyZW50RGF0ZSA+PSBmaXJzdERhdGUgJiYgY3VycmVudERhdGUgPD0gbGFzdERhdGUgJiYgZ2V0UmFuZ2VDbGFzcygpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHR0aGlzLmNvbmZpZy4kcmFuZ2VNYXJrID0gcmFuZ2VNYXJrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpc0RhdGVXZWVrRW5kICYmIGlzQ3VycmVudE1vbnRoKSB7XG5cdFx0XHRcdFx0Y3NzLnB1c2goXCJkaHhfY2FsZW5kYXItZGF5LS13ZWVrZW5kXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghaXNDdXJyZW50TW9udGgpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5jb25maWcudGhpc01vbnRoT25seSkge1xuXHRcdFx0XHRcdFx0ZGlzYWJsZWREYXlzKys7XG5cdFx0XHRcdFx0XHRjc3MucHVzaChcImRoeF9jYWxlbmRhci1kYXktLWhpZGRlblwiKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y3NzLnB1c2goXCJkaHhfY2FsZW5kYXItZGF5LS1tdWZmbGVkXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5jb25maWcubWFyaykge1xuXHRcdFx0XHRcdGNvbnN0IG1hcmtlZENzcyA9IHRoaXMuY29uZmlnLm1hcmsoY3VycmVudERhdGUpO1xuXHRcdFx0XHRcdGlmIChtYXJrZWRDc3MpIHtcblx0XHRcdFx0XHRcdGNzcy5wdXNoKG1hcmtlZENzcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLmNvbmZpZy4kcmFuZ2VNYXJrKSB7XG5cdFx0XHRcdFx0Y29uc3QgcmFuZ2VNYXJrID0gdGhpcy5jb25maWcuJHJhbmdlTWFyayhjdXJyZW50RGF0ZSk7XG5cdFx0XHRcdFx0aWYgKHJhbmdlTWFyaykge1xuXHRcdFx0XHRcdFx0Y3NzLnB1c2gocmFuZ2VNYXJrKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGlzQmxvY2tlZCkge1xuXHRcdFx0XHRcdGlmIChpc0RhdGVXZWVrRW5kKSB7XG5cdFx0XHRcdFx0XHRjc3MucHVzaChcImRoeF9jYWxlbmRhci1kYXktLXdlZWtlbmQtZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNzcy5wdXNoKFwiZGh4X2NhbGVuZGFyLWRheS0tZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3NlbGVjdGVkLmZvckVhY2goKHNlbGVjdGVkLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRcdGlmIChzZWxlY3RlZCAmJiBEYXRlSGVscGVyLmlzU2FtZURheShzZWxlY3RlZCwgY3VycmVudERhdGUpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9pc1NlbGVjdGVkSW5DdXJyZW50UmFuZ2UgPSB0cnVlO1xuXHRcdFx0XHRcdFx0bGV0IGRheUNzcyA9IFwiZGh4X2NhbGVuZGFyLWRheS0tc2VsZWN0ZWRcIjtcblx0XHRcdFx0XHRcdGlmICh0aGlzLmNvbmZpZy5yYW5nZSkge1xuXHRcdFx0XHRcdFx0XHRkYXlDc3MgKz0gYCBkaHhfY2FsZW5kYXItZGF5LS1zZWxlY3RlZC0ke2luZGV4ID09PSAwID8gXCJmaXJzdCBcIiA6IFwibGFzdFwifWA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjc3MucHVzaChkYXlDc3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdGRheXMucHVzaCh7XG5cdFx0XHRcdFx0ZGF0ZTogY3VycmVudERhdGUsXG5cdFx0XHRcdFx0ZGF5OiBjdXJyZW50RGF0ZS5nZXREYXRlKCksXG5cdFx0XHRcdFx0Y3NzOiBjc3Muam9pbihcIiBcIiksXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRjdXJyZW50RGF0ZSA9IERhdGVIZWxwZXIuYWRkRGF5KGN1cnJlbnREYXRlKTtcblx0XHRcdH1cblx0XHRcdGRhdGEucHVzaCh7XG5cdFx0XHRcdHdlZWtOdW1iZXI6IGN1cnJlbnRXZWVrLFxuXHRcdFx0XHRkYXlzLFxuXHRcdFx0XHRkaXNhYmxlZFdlZWtOdW1iZXI6IGRpc2FibGVkRGF5cyA9PT0gNyxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXHRwcml2YXRlIF9kcmF3Q2FsZW5kYXIoKSB7XG5cdFx0Y29uc3QgZGF0ZSA9IHRoaXMuX2N1cnJlbnREYXRlO1xuXHRcdGNvbnN0IHsgd2Vla1N0YXJ0LCB0aGlzTW9udGhPbmx5LCBjc3MsIHRpbWVQaWNrZXIsIHdpZHRoIH0gPSB0aGlzLmNvbmZpZztcblxuXHRcdGNvbnN0IHdlZWtEYXlzID1cblx0XHRcdHdlZWtTdGFydCA9PT0gXCJtb25kYXlcIiA/IFsuLi5sb2NhbGUuZGF5c1Nob3J0LnNsaWNlKDEpLCBsb2NhbGUuZGF5c1Nob3J0WzBdXSA6IGxvY2FsZS5kYXlzU2hvcnQ7XG5cdFx0Y29uc3Qgd2Vla0RheXNIZWFkZXIgPSB3ZWVrRGF5cy5tYXAoZGF5ID0+IGVsKFwiLmRoeF9jYWxlbmRhci13ZWVrZGF5XCIsIGRheSkpO1xuXG5cdFx0Y29uc3QgZGF0YSA9IHRoaXMuX2dldERhdGEoZGF0ZSk7XG5cblx0XHRsZXQgaXNGaXJzdEl0ZW0gPSB0cnVlO1xuXHRcdGNvbnN0IHNlbGVjdGVkRGF0ZSA9IHRoaXMuX2dldFNlbGVjdGVkKCk7XG5cdFx0Y29uc3QgaXNEYXRlU2VsZWN0ZWQgPSAoZGF0ZTogRGF0ZSkgPT5cblx0XHRcdGRhdGUgJiYgc2VsZWN0ZWREYXRlICYmIGRhdGUuZ2V0VGltZSgpID09PSBzZWxlY3RlZERhdGUuZ2V0VGltZSgpO1xuXHRcdGNvbnN0IGdldENlbGxBcmlhQXR0cnMgPSBpdGVtID0+IHtcblx0XHRcdGNvbnN0IGF0dHJzID0ge1xuXHRcdFx0XHRyb2xlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHR0YWJpbmRleDogLTEsXG5cdFx0XHRcdFwiYXJpYS1wcmVzc2VkXCI6IFwiZmFsc2VcIixcblx0XHRcdH07XG5cblx0XHRcdGlmIChpdGVtKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9pc1NlbGVjdGVkSW5DdXJyZW50UmFuZ2UpIHtcblx0XHRcdFx0XHQvLyBpdCBpcyBjb3JyZWN0IHRoYXQgY29uZGl0aW9ucyBhcmUgc2VwYXJhdGVkXG5cdFx0XHRcdFx0aWYgKGlzRGF0ZVNlbGVjdGVkKGl0ZW0uZGF0ZSkpIHtcblx0XHRcdFx0XHRcdGF0dHJzW1widGFiaW5kZXhcIl0gPSAwO1xuXHRcdFx0XHRcdFx0YXR0cnNbXCJhcmlhLXByZXNzZWRcIl0gPSBcInRydWVcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoaXNGaXJzdEl0ZW0pIHtcblx0XHRcdFx0XHRhdHRyc1tcInRhYmluZGV4XCJdID0gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlzRmlyc3RJdGVtID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhdHRycztcblx0XHR9O1xuXG5cdFx0bGV0IGNvbnRlbnQgPSBbXTtcblx0XHRjb25zdCB3ZWVrTnVtYmVycyA9IFtdO1xuXHRcdGxldCB3ZWVrTnVtYmVyc1dyYXBwZXI7XG5cdFx0Zm9yIChjb25zdCB3ZWVrIG9mIGRhdGEpIHtcblx0XHRcdGNvbnN0IHdlZWtSb3cgPSB3ZWVrLmRheXMubWFwKGl0ZW0gPT5cblx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XCJkaXYuZGh4X2NhbGVuZGFyLWRheVwiLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGNsYXNzOiBpdGVtLmNzcyxcblx0XHRcdFx0XHRcdF9kYXRlOiBpdGVtLmRhdGUsXG5cdFx0XHRcdFx0XHQuLi5nZXRDZWxsQXJpYUF0dHJzKGl0ZW0pLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0aXRlbS5kYXlcblx0XHRcdFx0KVxuXHRcdFx0KTtcblxuXHRcdFx0aWYgKHRoaXMuY29uZmlnLndlZWtOdW1iZXJzICYmICEod2Vlay5kaXNhYmxlZFdlZWtOdW1iZXIgJiYgdGhpc01vbnRoT25seSkpIHtcblx0XHRcdFx0d2Vla051bWJlcnMucHVzaChcblx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFwiZGl2XCIsXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGNsYXNzOiBcImRoeF9jYWxlbmRhci13ZWVrLW51bWJlclwiLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHdlZWsud2Vla051bWJlclxuXHRcdFx0XHRcdClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdGNvbnRlbnQgPSBjb250ZW50LmNvbmNhdCh3ZWVrUm93KTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY29uZmlnLndlZWtOdW1iZXJzKSB7XG5cdFx0XHR3ZWVrTnVtYmVyc1dyYXBwZXIgPSBlbChcIi5kaHhfY2FsZW5kYXJfX3dlZWstbnVtYmVyc1wiLCB3ZWVrTnVtYmVycyk7XG5cdFx0fVxuXHRcdGNvbnN0IHdpZGdldENsYXNzID1cblx0XHRcdFwiZGh4X2NhbGVuZGFyIGRoeF93aWRnZXRcIiArXG5cdFx0XHQoY3NzID8gXCIgXCIgKyBjc3MgOiBcIlwiKSArXG5cdFx0XHQodGltZVBpY2tlciA/IFwiIGRoeF9jYWxlbmRhci0td2l0aF90aW1lcGlja2VyXCIgOiBcIlwiKSArXG5cdFx0XHQodGhpcy5jb25maWcud2Vla051bWJlcnMgPyBcIiBkaHhfY2FsZW5kYXItLXdpdGhfd2Vlay1udW1iZXJzXCIgOiBcIlwiKTtcblx0XHRyZXR1cm4gZWwoXG5cdFx0XHRcImRpdlwiLFxuXHRcdFx0e1xuXHRcdFx0XHRjbGFzczogd2lkZ2V0Q2xhc3MsXG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0d2lkdGg6IHRoaXMuY29uZmlnLndlZWtOdW1iZXJzID8gYGNhbGMoJHt3aWR0aH0gKyA0OHB4IClgIDogd2lkdGgsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC4uLnRoaXMuX2hhbmRsZXJzLFxuXHRcdFx0fSxcblx0XHRcdFtcblx0XHRcdFx0ZWwoXCIuZGh4X2NhbGVuZGFyX193cmFwcGVyXCIsIFtcblx0XHRcdFx0XHR0aGlzLl9kcmF3SGVhZGVyKFxuXHRcdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRcdFwiYnV0dG9uLmRoeF9jYWxlbmRhci1hY3Rpb25fX3Nob3ctbW9udGguZGh4X2J1dHRvbi5kaHhfYnV0dG9uLS12aWV3X2xpbmsuZGh4X2J1dHRvbi0tc2l6ZV9zbWFsbC5kaHhfYnV0dG9uLS1jb2xvcl9zZWNvbmRhcnkuZGh4X2J1dHRvbi0tY2lyY2xlXCIsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcImFyaWEtbGl2ZVwiOiBcInBvbGl0ZVwiLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdGxvY2FsZS5tb250aHNbZGF0ZS5nZXRNb250aCgpXSArIFwiIFwiICsgZGF0ZS5nZXRGdWxsWWVhcigpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR0aGlzLmNvbmZpZy53ZWVrTnVtYmVycyAmJlxuXHRcdFx0XHRcdFx0ZWwoXCIuZGh4X2NhbGVuZGFyX19kYXRlcy13cmFwcGVyXCIsIFtcblx0XHRcdFx0XHRcdFx0ZWwoXCIuZGh4X2NhbGVuZGFyX193ZWVrZGF5c1wiLCB3ZWVrRGF5c0hlYWRlciksXG5cdFx0XHRcdFx0XHRcdGVsKFwiLmRoeF9jYWxlbmRhcl9fZGF5c1wiLCBjb250ZW50KSxcblx0XHRcdFx0XHRcdFx0d2Vla051bWJlcnNXcmFwcGVyLFxuXHRcdFx0XHRcdFx0XSksXG5cdFx0XHRcdFx0IXRoaXMuY29uZmlnLndlZWtOdW1iZXJzICYmIGVsKFwiLmRoeF9jYWxlbmRhcl9fd2Vla2RheXNcIiwgd2Vla0RheXNIZWFkZXIpLFxuXHRcdFx0XHRcdCF0aGlzLmNvbmZpZy53ZWVrTnVtYmVycyAmJiBlbChcIi5kaHhfY2FsZW5kYXJfX2RheXNcIiwgY29udGVudCksXG5cdFx0XHRcdFx0dGltZVBpY2tlclxuXHRcdFx0XHRcdFx0PyBlbChcIi5kaHhfdGltZXBpY2tlcl9fYWN0aW9uc1wiLCBbXG5cdFx0XHRcdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcImJ1dHRvbi5kaHhfY2FsZW5kYXJfX3RpbWVwaWNrZXItYnV0dG9uLlwiICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XCJkaHhfYnV0dG9uLmRoeF9idXR0b24tLXZpZXdfbGluay5kaHhfYnV0dG9uLS1zaXplX3NtYWxsLmRoeF9idXR0b24tLWNvbG9yX3NlY29uZGFyeS5kaHhfYnV0dG9uLS13aWR0aF9mdWxsLmRoeF9idXR0b24tLWNpcmNsZS5kaHhfY2FsZW5kYXItYWN0aW9uX19zaG93LXRpbWVwaWNrZXJcIixcblx0XHRcdFx0XHRcdFx0XHRcdHsgdHlwZTogXCJidXR0b25cIiB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbChcInNwYW4uZGh4X2J1dHRvbl9faWNvbi5keGkuZHhpLWNsb2NrLW91dGxpbmVcIiksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVsKFwic3Bhbi5kaHhfYnV0dG9uX190ZXh0XCIsIHRoaXMuX3RpbWUpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHQgIF0pXG5cdFx0XHRcdFx0XHQ6IG51bGwsXG5cdFx0XHRcdF0pLFxuXHRcdFx0XVxuXHRcdCk7XG5cdH1cblx0cHJpdmF0ZSBfZHJhd01vbnRoU2VsZWN0b3IoKSB7XG5cdFx0Y29uc3QgZGF0ZSA9IHRoaXMuX2N1cnJlbnREYXRlO1xuXHRcdGNvbnN0IGN1cnJlbnRNb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcblx0XHRjb25zdCBjdXJyZW50WWVhciA9IHRoaXMuX2dldFNlbGVjdGVkKCkgPyB0aGlzLl9nZXRTZWxlY3RlZCgpLmdldEZ1bGxZZWFyKCkgOiBudWxsO1xuXHRcdGNvbnN0IHsgY3NzLCB0aW1lUGlja2VyLCB3ZWVrTnVtYmVycywgd2lkdGgsIG1vZGUgfSA9IHRoaXMuY29uZmlnO1xuXHRcdGNvbnN0IHdpZGdldENsYXNzID1cblx0XHRcdFwiZGh4X2NhbGVuZGFyIGRoeF93aWRnZXRcIiArXG5cdFx0XHQoY3NzID8gXCIgXCIgKyBjc3MgOiBcIlwiKSArXG5cdFx0XHQodGltZVBpY2tlciA/IFwiIGRoeF9jYWxlbmRhci0td2l0aF90aW1lcGlja2VyXCIgOiBcIlwiKSArXG5cdFx0XHQod2Vla051bWJlcnMgPyBcIiBkaHhfY2FsZW5kYXItLXdpdGhfd2Vlay1udW1iZXJzXCIgOiBcIlwiKTtcblxuXHRcdGxldCBpc0ZpcnN0SXRlbSA9IHRydWU7XG5cdFx0Y29uc3QgaXNDdXJyZW50WWVhciA9IGN1cnJlbnRZZWFyID09PSBkYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0Y29uc3QgaXNNb250aFNlbGVjdGVkID0gaSA9PiBpc0N1cnJlbnRZZWFyICYmIGN1cnJlbnRNb250aCA9PT0gaTtcblx0XHRjb25zdCBnZXRDZWxsQXJpYUF0dHJzID0gKGl0ZW0sIGkpID0+IHtcblx0XHRcdGNvbnN0IGF0dHJzID0ge1xuXHRcdFx0XHRyb2xlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHR0YWJpbmRleDogLTEsXG5cdFx0XHRcdFwiYXJpYS1wcmVzc2VkXCI6IFwiZmFsc2VcIixcblx0XHRcdH07XG5cblx0XHRcdGlmIChpdGVtKSB7XG5cdFx0XHRcdGlmIChpc0N1cnJlbnRZZWFyKSB7XG5cdFx0XHRcdFx0Ly8gaXQgaXMgY29ycmVjdCB0aGF0IGNvbmRpdGlvbnMgYXJlIHNlcGFyYXRlZFxuXHRcdFx0XHRcdGlmIChpc01vbnRoU2VsZWN0ZWQoaSkpIHtcblx0XHRcdFx0XHRcdGF0dHJzW1widGFiaW5kZXhcIl0gPSAwO1xuXHRcdFx0XHRcdFx0YXR0cnNbXCJhcmlhLXByZXNzZWRcIl0gPSBcInRydWVcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoaXNGaXJzdEl0ZW0pIHtcblx0XHRcdFx0XHRhdHRyc1tcInRhYmluZGV4XCJdID0gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlzRmlyc3RJdGVtID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhdHRycztcblx0XHR9O1xuXG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCJkaXZcIixcblx0XHRcdHtcblx0XHRcdFx0Y2xhc3M6IHdpZGdldENsYXNzLFxuXHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdHdpZHRoOiB3ZWVrTnVtYmVycyA/IGBjYWxjKCR7d2lkdGh9ICsgNDhweClgIDogd2lkdGgsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC4uLnRoaXMuX2hhbmRsZXJzLFxuXHRcdFx0fSxcblx0XHRcdFtcblx0XHRcdFx0ZWwoXCIuZGh4X2NhbGVuZGFyX193cmFwcGVyXCIsIFtcblx0XHRcdFx0XHR0aGlzLl9kcmF3SGVhZGVyKFxuXHRcdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRcdFwiYnV0dG9uLmRoeF9jYWxlbmRhci1hY3Rpb25fX3Nob3cteWVhci5kaHhfYnV0dG9uLmRoeF9idXR0b24tLXZpZXdfbGluay5kaHhfYnV0dG9uLS1zaXplX3NtYWxsLmRoeF9idXR0b24tLWNvbG9yX3NlY29uZGFyeS5kaHhfYnV0dG9uLS1jaXJjbGVcIixcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFwiYXJpYS1saXZlXCI6IFwicG9saXRlXCIsXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0ZGF0ZS5nZXRGdWxsWWVhcigpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFwiLmRoeF9jYWxlbmRhcl9fbW9udGhzXCIsXG5cdFx0XHRcdFx0XHRsb2NhbGUubW9udGhzU2hvcnQubWFwKChpdGVtLCBpKSA9PlxuXHRcdFx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFx0XHRcImRpdlwiLFxuXHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcImRoeF9jYWxlbmRhci1tb250aFwiICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KGlzTW9udGhTZWxlY3RlZChpKSA/IFwiIGRoeF9jYWxlbmRhci1tb250aC0tc2VsZWN0ZWRcIiA6IFwiXCIpLFxuXHRcdFx0XHRcdFx0XHRcdFx0Li4uZ2V0Q2VsbEFyaWFBdHRycyhpdGVtLCBpKSxcblx0XHRcdFx0XHRcdFx0XHRcdF9kYXRlOiBpLFxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0aXRlbVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRtb2RlICE9PSBcIm1vbnRoXCJcblx0XHRcdFx0XHRcdD8gZWwoXCIuZGh4X2NhbGVuZGFyX19hY3Rpb25zXCIsIFtcblx0XHRcdFx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFx0XHRcdFwiYnV0dG9uLmRoeF9idXR0b24uZGh4X2J1dHRvbi0tY29sb3JfcHJpbWFyeS5kaHhfYnV0dG9uLS12aWV3X2xpbmsuZGh4X2J1dHRvbi0tc2l6ZV9zbWFsbC5kaHhfYnV0dG9uLS13aWR0aF9mdWxsLmRoeF9idXR0b24tLWNpcmNsZS5kaHhfY2FsZW5kYXItYWN0aW9uX19jYW5jZWxcIixcblx0XHRcdFx0XHRcdFx0XHRcdHsgdHlwZTogXCJidXR0b25cIiB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0bG9jYWxlLmNhbmNlbFxuXHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHQgIF0pXG5cdFx0XHRcdFx0XHQ6IG51bGwsXG5cdFx0XHRcdF0pLFxuXHRcdFx0XVxuXHRcdCk7XG5cdH1cblx0cHJpdmF0ZSBfZHJhd1llYXJTZWxlY3RvcigpIHtcblx0XHRjb25zdCBkYXRlID0gdGhpcy5fY3VycmVudERhdGU7XG5cdFx0Y29uc3QgeWVhcnNEaWFwYXNvbiA9IERhdGVIZWxwZXIuZ2V0VHdlbHdlWWVhcnMoZGF0ZSk7XG5cdFx0Y29uc3QgeyBjc3MsIHRpbWVQaWNrZXIsIHdlZWtOdW1iZXJzLCB3aWR0aCwgbW9kZSB9ID0gdGhpcy5jb25maWc7XG5cdFx0Y29uc3Qgd2lkZ2V0Q2xhc3MgPVxuXHRcdFx0XCJkaHhfY2FsZW5kYXIgZGh4X3dpZGdldFwiICtcblx0XHRcdChjc3MgPyBcIiBcIiArIGNzcyA6IFwiXCIpICtcblx0XHRcdCh0aW1lUGlja2VyID8gXCIgZGh4X2NhbGVuZGFyLS13aXRoX3RpbWVwaWNrZXJcIiA6IFwiXCIpICtcblx0XHRcdCh3ZWVrTnVtYmVycyA/IFwiIGRoeF9jYWxlbmRhci0td2l0aF93ZWVrLW51bWJlcnNcIiA6IFwiXCIpO1xuXG5cdFx0bGV0IGlzRmlyc3RJdGVtID0gdHJ1ZTtcblx0XHRjb25zdCBpc1NlbGVjdGVkWWVhckluUmFuZ2UgPVxuXHRcdFx0dGhpcy5fZ2V0U2VsZWN0ZWQoKSAmJiB5ZWFyc0RpYXBhc29uLmluY2x1ZGVzKHRoaXMuX2dldFNlbGVjdGVkKCkuZ2V0RnVsbFllYXIoKSk7XG5cdFx0Y29uc3QgaXNZZWFyU2VsZWN0ZWQgPSBpdGVtID0+IHRoaXMuX2dldFNlbGVjdGVkKCkgJiYgaXRlbSA9PT0gdGhpcy5fZ2V0U2VsZWN0ZWQoKS5nZXRGdWxsWWVhcigpO1xuXHRcdGNvbnN0IGdldENlbGxBcmlhQXR0cnMgPSBpdGVtID0+IHtcblx0XHRcdGNvbnN0IGF0dHJzID0ge1xuXHRcdFx0XHRyb2xlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHR0YWJpbmRleDogLTEsXG5cdFx0XHRcdFwiYXJpYS1wcmVzc2VkXCI6IFwiZmFsc2VcIixcblx0XHRcdH07XG5cblx0XHRcdGlmIChpdGVtKSB7XG5cdFx0XHRcdGlmIChpc1NlbGVjdGVkWWVhckluUmFuZ2UpIHtcblx0XHRcdFx0XHQvLyBpdCBpcyBjb3JyZWN0IHRoYXQgY29uZGl0aW9ucyBhcmUgc2VwYXJhdGVkXG5cdFx0XHRcdFx0aWYgKGlzWWVhclNlbGVjdGVkKGl0ZW0pKSB7XG5cdFx0XHRcdFx0XHRhdHRyc1tcInRhYmluZGV4XCJdID0gMDtcblx0XHRcdFx0XHRcdGF0dHJzW1wiYXJpYS1wcmVzc2VkXCJdID0gXCJ0cnVlXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGlzRmlyc3RJdGVtKSB7XG5cdFx0XHRcdFx0YXR0cnNbXCJ0YWJpbmRleFwiXSA9IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpc0ZpcnN0SXRlbSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYXR0cnM7XG5cdFx0fTtcblxuXHRcdHJldHVybiBlbChcblx0XHRcdFwiZGl2XCIsXG5cdFx0XHR7XG5cdFx0XHRcdGNsYXNzOiB3aWRnZXRDbGFzcyxcblx0XHRcdFx0c3R5bGU6IHsgd2lkdGg6IHdlZWtOdW1iZXJzID8gYGNhbGMoJHt3aWR0aH0gKyA0OHB4KWAgOiB3aWR0aCB9LFxuXHRcdFx0XHQuLi50aGlzLl9oYW5kbGVycyxcblx0XHRcdH0sXG5cdFx0XHRbXG5cdFx0XHRcdGVsKFwiLmRoeF9jYWxlbmRhcl9fd3JhcHBlclwiLCBbXG5cdFx0XHRcdFx0dGhpcy5fZHJhd0hlYWRlcihcblx0XHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XHRcImJ1dHRvbi5kaHhfYnV0dG9uLmRoeF9idXR0b24tLXZpZXdfbGluay5kaHhfYnV0dG9uLS1zaXplX3NtYWxsLmRoeF9idXR0b24tLWNvbG9yX3NlY29uZGFyeS5kaHhfYnV0dG9uLS1jaXJjbGVcIixcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFwiYXJpYS1saXZlXCI6IFwicG9saXRlXCIsXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0eWVhcnNEaWFwYXNvblswXSArIFwiLVwiICsgeWVhcnNEaWFwYXNvblt5ZWFyc0RpYXBhc29uLmxlbmd0aCAtIDFdXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFwiLmRoeF9jYWxlbmRhcl9feWVhcnNcIixcblx0XHRcdFx0XHRcdHllYXJzRGlhcGFzb24ubWFwKGl0ZW0gPT5cblx0XHRcdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRcdFx0XCJkaXZcIixcblx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRjbGFzczpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XCJkaHhfY2FsZW5kYXIteWVhclwiICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KGlzWWVhclNlbGVjdGVkKGl0ZW0pID8gXCIgZGh4X2NhbGVuZGFyLXllYXItLXNlbGVjdGVkXCIgOiBcIlwiKSxcblx0XHRcdFx0XHRcdFx0XHRcdF9kYXRlOiBpdGVtLFxuXHRcdFx0XHRcdFx0XHRcdFx0Li4uZ2V0Q2VsbEFyaWFBdHRycyhpdGVtKSxcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdGl0ZW1cblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0bW9kZSAhPT0gXCJ5ZWFyXCIgJiYgbW9kZSAhPT0gXCJtb250aFwiXG5cdFx0XHRcdFx0XHQ/IGVsKFwiLmRoeF9jYWxlbmRhcl9fYWN0aW9uc1wiLCBbXG5cdFx0XHRcdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcImJ1dHRvbi5kaHhfYnV0dG9uLmRoeF9idXR0b24tLWNvbG9yX3ByaW1hcnkuZGh4X2J1dHRvbi0tdmlld19saW5rLmRoeF9idXR0b24tLXNpemVfc21hbGwuZGh4X2J1dHRvbi0td2lkdGhfZnVsbC5kaHhfYnV0dG9uLS1jaXJjbGUuZGh4X2NhbGVuZGFyLWFjdGlvbl9fY2FuY2VsXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHR7IHR5cGU6IFwiYnV0dG9uXCIgfSxcblx0XHRcdFx0XHRcdFx0XHRcdGxvY2FsZS5jYW5jZWxcblx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0ICBdKVxuXHRcdFx0XHRcdFx0OiBudWxsLFxuXHRcdFx0XHRdKSxcblx0XHRcdF1cblx0XHQpO1xuXHR9XG5cdHByaXZhdGUgX2RyYXdIZWFkZXIoYWN0aW9uQ29udGVudCkge1xuXHRcdHJldHVybiBlbChcIi5kaHhfY2FsZW5kYXJfX25hdmlnYXRpb25cIiwgW1xuXHRcdFx0ZWwoXG5cdFx0XHRcdFwiYnV0dG9uLmRoeF9jYWxlbmRhci1uYXZpZ2F0aW9uX19idXR0b24uZGh4X2NhbGVuZGFyLWFjdGlvbl9fcHJldlwiICtcblx0XHRcdFx0XHRsaW5rQnV0dG9uQ2xhc3NlcyArXG5cdFx0XHRcdFx0XCIuZGh4X2J1dHRvbi0taWNvbi5kaHhfYnV0dG9uLS1jaXJjbGVcIixcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwiYXJpYS1sYWJlbFwiOiBcInByZXZcIixcblx0XHRcdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRbZWwoXCIuZGh4X2J1dHRvbl9faWNvbi5keGkuZHhpLWNoZXZyb24tbGVmdFwiKV1cblx0XHRcdCksXG5cdFx0XHRhY3Rpb25Db250ZW50LFxuXHRcdFx0ZWwoXG5cdFx0XHRcdFwiYnV0dG9uLmRoeF9jYWxlbmRhci1uYXZpZ2F0aW9uX19idXR0b24uZGh4X2NhbGVuZGFyLWFjdGlvbl9fbmV4dFwiICtcblx0XHRcdFx0XHRsaW5rQnV0dG9uQ2xhc3NlcyArXG5cdFx0XHRcdFx0XCIuZGh4X2J1dHRvbi0taWNvbi5kaHhfYnV0dG9uLS1jaXJjbGVcIixcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwiYXJpYS1sYWJlbFwiOiBcIm5leHRcIixcblx0XHRcdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRbZWwoXCIuZGh4X2J1dHRvbl9faWNvbi5keGkuZHhpLWNoZXZyb24tcmlnaHRcIildXG5cdFx0XHQpLFxuXHRcdF0pO1xuXHR9XG5cdHByaXZhdGUgX2RyYXdUaW1lcGlja2VyKCkge1xuXHRcdGNvbnN0IHsgY3NzLCB3ZWVrTnVtYmVycywgd2lkdGggfSA9IHRoaXMuY29uZmlnO1xuXHRcdHJldHVybiBlbChcblx0XHRcdFwiLmRoeF93aWRnZXQuZGh4LWNhbGVuZGFyXCIsXG5cdFx0XHR7XG5cdFx0XHRcdGNsYXNzOiBjc3MgPyBcIiBcIiArIGNzcyA6IFwiXCIsXG5cdFx0XHRcdHN0eWxlOiB7IHdpZHRoOiB3ZWVrTnVtYmVycyA/IGBjYWxjKCR7d2lkdGh9ICsgNDhweClgIDogd2lkdGggfSxcblx0XHRcdH0sXG5cdFx0XHRbaW5qZWN0KHRoaXMuX3RpbWVwaWNrZXIuZ2V0Um9vdFZpZXcoKSldXG5cdFx0KTtcblx0fVxuXHRwcml2YXRlIF9zZWxlY3REYXRlKF9lLCB2bikge1xuXHRcdGNvbnN0IGRhdGUgPSB2bi5hdHRycy5fZGF0ZTtcblx0XHRjb25zdCBvbGREYXRlID0gRGF0ZUhlbHBlci5jb3B5KHRoaXMuX2dldFNlbGVjdGVkKCkpO1xuXHRcdHN3aXRjaCAodGhpcy5fY3VycmVudFZpZXdNb2RlKSB7XG5cdFx0XHRjYXNlIFwiY2FsZW5kYXJcIjoge1xuXHRcdFx0XHRjb25zdCBtZXJnZWREYXRlID0gdGhpcy5jb25maWcudGltZVBpY2tlclxuXHRcdFx0XHRcdD8gRGF0ZUhlbHBlci5tZXJnZUhvdXJzQW5kTWludXRlcyhkYXRlLCB0aGlzLl9nZXRTZWxlY3RlZCgpIHx8IHRoaXMuX2N1cnJlbnREYXRlKVxuXHRcdFx0XHRcdDogZGF0ZTtcblx0XHRcdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLmJlZm9yZUNoYW5nZSwgW21lcmdlZERhdGUsIG9sZERhdGUsIHRydWVdKSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5jb25maWcucmFuZ2UgJiYgdGhpcy5fc2VsZWN0ZWQubGVuZ3RoID09PSAxICYmIHRoaXMuX3NlbGVjdGVkWzBdIDwgbWVyZ2VkRGF0ZSkge1xuXHRcdFx0XHRcdHRoaXMuX3NlbGVjdGVkLnB1c2gobWVyZ2VkRGF0ZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fc2VsZWN0ZWQgPSBbXTtcblx0XHRcdFx0XHR0aGlzLl9zZWxlY3RlZFswXSA9IG1lcmdlZERhdGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dm4uZWwuYmx1cigpO1xuXHRcdFx0XHR0aGlzLnNob3dEYXRlKHRoaXMuX2dldFNlbGVjdGVkKCkpO1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLmNoYW5nZSwgW2RhdGUsIG9sZERhdGUsIHRydWVdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRjYXNlIFwibW9udGhcIjpcblx0XHRcdFx0aWYgKHRoaXMuY29uZmlnLm1vZGUgIT09IFwibW9udGhcIikge1xuXHRcdFx0XHRcdERhdGVIZWxwZXIuc2V0TW9udGgodGhpcy5fY3VycmVudERhdGUsIGRhdGUpO1xuXHRcdFx0XHRcdHRoaXMuc2hvd0RhdGUobnVsbCwgXCJjYWxlbmRhclwiKTtcblx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLm1vbnRoU2VsZWN0ZWQsIFtkYXRlXSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgbmV3RGF0ZSA9IERhdGVIZWxwZXIuZnJvbVllYXJBbmRNb250aChcblx0XHRcdFx0XHRcdHRoaXMuX2N1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCkgfHwgdGhpcy5fZ2V0U2VsZWN0ZWQoKS5nZXRGdWxsWWVhcigpLFxuXHRcdFx0XHRcdFx0ZGF0ZVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLmJlZm9yZUNoYW5nZSwgW25ld0RhdGUsIG9sZERhdGUsIHRydWVdKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl9jdXJyZW50RGF0ZSA9IG5ld0RhdGU7XG5cdFx0XHRcdFx0dGhpcy5fc2VsZWN0ZWRbMF0gPSBuZXdEYXRlO1xuXHRcdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ2FsZW5kYXJFdmVudHMuY2hhbmdlLCBbdGhpcy5fZ2V0U2VsZWN0ZWQoKSwgb2xkRGF0ZSwgdHJ1ZV0pO1xuXHRcdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ2FsZW5kYXJFdmVudHMubW9udGhTZWxlY3RlZCwgW2RhdGVdKTtcblx0XHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwieWVhclwiOlxuXHRcdFx0XHRpZiAodGhpcy5jb25maWcubW9kZSAhPT0gXCJ5ZWFyXCIpIHtcblx0XHRcdFx0XHREYXRlSGVscGVyLnNldFllYXIodGhpcy5fY3VycmVudERhdGUsIGRhdGUpO1xuXHRcdFx0XHRcdHRoaXMuc2hvd0RhdGUobnVsbCwgXCJtb250aFwiKTtcblx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENhbGVuZGFyRXZlbnRzLnllYXJTZWxlY3RlZCwgW2RhdGVdKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBuZXdEYXRlID0gRGF0ZUhlbHBlci5mcm9tWWVhcihkYXRlKTtcblx0XHRcdFx0XHRpZiAoIXRoaXMuZXZlbnRzLmZpcmUoQ2FsZW5kYXJFdmVudHMuYmVmb3JlQ2hhbmdlLCBbbmV3RGF0ZSwgb2xkRGF0ZSwgdHJ1ZV0pKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX2N1cnJlbnREYXRlID0gbmV3RGF0ZTtcblx0XHRcdFx0XHR0aGlzLl9zZWxlY3RlZFswXSA9IG5ld0RhdGU7XG5cdFx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShDYWxlbmRhckV2ZW50cy5jaGFuZ2UsIFt0aGlzLl9nZXRTZWxlY3RlZCgpLCBvbGREYXRlLCB0cnVlXSk7XG5cdFx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShDYWxlbmRhckV2ZW50cy55ZWFyU2VsZWN0ZWQsIFtkYXRlXSk7XG5cdFx0XHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBfbW92ZUJyb3dzZUZvY3VzKGUsIG5vZGUsIHJhbmdlOiBudW1iZXIpIHtcblx0XHRpZiAobm9kZSkge1xuXHRcdFx0Y29uc3QgbmV4dE5vZGUgPSBub2RlLnBhcmVudC5ib2R5W25vZGUuaWR4ICsgcmFuZ2VdO1xuXHRcdFx0aWYgKG5leHROb2RlKSB7XG5cdFx0XHRcdGNvbnN0ICRuZXh0Tm9kZSA9IG5leHROb2RlLmVsO1xuXHRcdFx0XHRpZiAoJG5leHROb2RlKSB7XG5cdFx0XHRcdFx0ZS50YXJnZXQudGFiSW5kZXggPSAtMTtcblx0XHRcdFx0XHQkbmV4dE5vZGUudGFiSW5kZXggPSAwO1xuXHRcdFx0XHRcdCRuZXh0Tm9kZS5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiIsImV4cG9ydCBjb25zdCBsaW5rQnV0dG9uQ2xhc3NlcyA9XG5cdFwiLmRoeF9idXR0b24uZGh4X2J1dHRvbi0tdmlld19saW5rLmRoeF9idXR0b24tLWljb24uZGh4X2J1dHRvbi0tc2l6ZV9tZWRpdW0uZGh4X2J1dHRvbi0tY29sb3Jfc2Vjb25kYXJ5XCI7XG4iLCJleHBvcnQgaW50ZXJmYWNlIElDYWxlbmRhckNvbmZpZyB7XG5cdHZhbHVlPzogRGF0ZSB8IERhdGVbXSB8IHN0cmluZyB8IHN0cmluZ1tdO1xuXHRkYXRlPzogRGF0ZSB8IHN0cmluZztcblx0Y3NzPzogc3RyaW5nO1xuXHRtYXJrPzogKGE6IERhdGUpID0+IHN0cmluZztcblx0ZGlzYWJsZWREYXRlcz86IChhOiBEYXRlKSA9PiBib29sZWFuO1xuXHR3ZWVrU3RhcnQ/OiBcIm1vbmRheVwiIHwgXCJzdW5kYXlcIjtcblx0d2Vla051bWJlcnM/OiBib29sZWFuO1xuXHRtb2RlPzogVmlld01vZGU7XG5cdHRpbWVQaWNrZXI/OiBib29sZWFuO1xuXHRkYXRlRm9ybWF0Pzogc3RyaW5nO1xuXHR0aW1lRm9ybWF0PzogMjQgfCAxMjtcblx0dGhpc01vbnRoT25seT86IGJvb2xlYW47XG5cdHdpZHRoPzogc3RyaW5nIHwgbnVtYmVyO1xuXHRyYW5nZT86IGJvb2xlYW47XG5cdCRyYW5nZU1hcms/OiAoYTogRGF0ZSkgPT4gc3RyaW5nO1xuXG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0YmxvY2s/OiAoYTogRGF0ZSkgPT4gYm9vbGVhbjtcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHR2aWV3PzogVmlld01vZGU7XG59XG5leHBvcnQgaW50ZXJmYWNlIElDYWxlbmRhciB7XG5cdHBhaW50KCk6IHZvaWQ7XG5cdGRlc3RydWN0b3IoKTogdm9pZDtcblx0Y2xlYXIoKTogdm9pZDtcblx0c2hvd0RhdGUoZGF0ZT86IERhdGUsIG1vZGU/OiBWaWV3TW9kZSk6IHZvaWQ7XG5cdHNldFZhbHVlKHZhbHVlOiBEYXRlIHwgRGF0ZVtdIHwgc3RyaW5nIHwgc3RyaW5nW10pOiBib29sZWFuO1xuXHRnZXRWYWx1ZShhc0RhdE9iaj86IGJvb2xlYW4pOiBEYXRlIHwgRGF0ZVtdIHwgc3RyaW5nIHwgc3RyaW5nW107XG5cdGdldEN1cnJlbnRNb2RlKCk6IFZpZXdNb2RlO1xuXHRsaW5rKGNhbGVuZGFyOiBJQ2FsZW5kYXIpOiB2b2lkO1xufVxuZXhwb3J0IHR5cGUgVmlld01vZGUgPSBcImNhbGVuZGFyXCIgfCBcInllYXJcIiB8IFwibW9udGhcIiB8IFwidGltZXBpY2tlclwiO1xuZXhwb3J0IGludGVyZmFjZSBJQ2FsZW5kYXJEYXkge1xuXHRjc3M6IHN0cmluZztcblx0ZGF0ZTogRGF0ZTtcblx0ZGF5OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIElDYWxlbmRhcldlZWsge1xuXHR3ZWVrTnVtYmVyOiBudW1iZXI7XG5cdGRheXM6IElDYWxlbmRhckRheVtdO1xuXHRkaXNhYmxlZFdlZWtOdW1iZXI/OiBib29sZWFuO1xufVxuZXhwb3J0IGVudW0gQ2FsZW5kYXJFdmVudHMge1xuXHRjaGFuZ2UgPSBcImNoYW5nZVwiLFxuXHRiZWZvcmVDaGFuZ2UgPSBcImJlZm9yZWNoYW5nZVwiLFxuXHRtb2RlQ2hhbmdlID0gXCJtb2RlQ2hhbmdlXCIsXG5cdG1vbnRoU2VsZWN0ZWQgPSBcIm1vbnRoU2VsZWN0ZWRcIixcblx0eWVhclNlbGVjdGVkID0gXCJ5ZWFyU2VsZWN0ZWRcIixcblx0Y2FuY2VsQ2xpY2sgPSBcImNhbmNlbENsaWNrXCIsXG5cdGRhdGVNb3VzZU92ZXIgPSBcImRhdGVNb3VzZU92ZXJcIixcblxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGRhdGVIb3ZlciA9IFwiZGF0ZUhvdmVyXCIsXG59XG5leHBvcnQgaW50ZXJmYWNlIElDYWxlbmRhckhhbmRsZXJzTWFwIHtcblx0W2tleTogc3RyaW5nXTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cdFtDYWxlbmRhckV2ZW50cy5jaGFuZ2VdOiAoZGF0ZTogRGF0ZSwgb2xkRGF0ZTogRGF0ZSwgYnlDbGljazogYm9vbGVhbikgPT4gdm9pZDtcblx0W0NhbGVuZGFyRXZlbnRzLmJlZm9yZUNoYW5nZV06IChkYXRlOiBEYXRlLCBvbGREYXRlOiBEYXRlLCBieUNsaWNrOiBib29sZWFuKSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0NhbGVuZGFyRXZlbnRzLmRhdGVNb3VzZU92ZXJdOiAoZGF0ZTogRGF0ZSwgZTogTW91c2VFdmVudCkgPT4gdm9pZDtcblx0W0NhbGVuZGFyRXZlbnRzLm1vZGVDaGFuZ2VdOiAobW9kZTogc3RyaW5nKSA9PiB2b2lkO1xuXHRbQ2FsZW5kYXJFdmVudHMubW9udGhTZWxlY3RlZF06IChtb250aDogbnVtYmVyKSA9PiB2b2lkO1xuXHRbQ2FsZW5kYXJFdmVudHMueWVhclNlbGVjdGVkXTogKHllYXI6IG51bWJlcikgPT4gdm9pZDtcblx0W0NhbGVuZGFyRXZlbnRzLmNhbmNlbENsaWNrXTogKCkgPT4gdm9pZDtcblxuXHRbQ2FsZW5kYXJFdmVudHMuZGF0ZUhvdmVyXTogKGRhdGU6IERhdGUsIGU6IE1vdXNlRXZlbnQpID0+IGFueTtcbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvQ29sb3JwaWNrZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvdHlwZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvY29sb3JzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL2hlbHBlcnMvY29sb3JcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbG9jYWxlIH0gZnJvbSBcIi4vc291cmNlcy9sb2NhbGVzL2VuXCI7XG4iLCJpbXBvcnQgeyBjcmVhdGUsIGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgRXZlbnRTeXN0ZW0sIElFdmVudFN5c3RlbSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9ldmVudHNcIjtcbmltcG9ydCB7IGxvY2F0ZSwgbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdmlld1wiO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcbmltcG9ydCB7IEhleFRvSFNWLCBpc0hleCB9IGZyb20gXCIuL2hlbHBlcnMvY29sb3JcIjtcbmltcG9ydCB7IGdyYXlTaGFkZXMsIHBhbGV0dGUgfSBmcm9tIFwiLi9jb2xvcnNcIjtcbmltcG9ydCBsb2NhbGUgZnJvbSBcIi4vbG9jYWxlcy9lblwiO1xuaW1wb3J0IHtcblx0Q29sb3JwaWNrZXJFdmVudHMsXG5cdElDb2xvcnBpY2tlcixcblx0SUNvbG9ycGlja2VyQ29uZmlnLFxuXHRJUGlja2VyU3RhdGUsXG5cdFZpZXdzTW9kZSxcblx0SUV2ZW50SGFuZGxlcnNNYXAsXG59IGZyb20gXCIuL3R5cGVzXCI7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCB7IHRvb2x0aXAgfSBmcm9tIFwiQGRoeC90cy1tZXNzYWdlL3NvdXJjZXMvdG9vbHRpcFwiO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgeyBQb3NpdGlvbiBhcyBUb29sdGlwUG9zaXRpb24gfSBmcm9tIFwiQGRoeC90cy1tZXNzYWdlL1wiO1xuaW1wb3J0IHsgZ2V0UGlja2VyIH0gZnJvbSBcIi4vcGlja2VyXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVSYW5nZUdyaXAsIGNhbGN1bGF0ZVBhbGV0dGVHcmlwIH0gZnJvbSBcIi4vaGVscGVycy9jYWxjdWxhdGlvbnNcIjtcbmltcG9ydCB7IElIYW5kbGVycyB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi90eXBlc1wiO1xuaW1wb3J0IHsgSUtleU1hbmFnZXIsIEtleU1hbmFnZXIgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vS2V5TWFuYWdlclwiO1xuaW1wb3J0IHsgZm9jdXNNYW5hZ2VyIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL0ZvY3VzTWFuYWdlclwiO1xuaW1wb3J0IHsgcmdiVG9IZXggfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29sb3JwaWNrZXIgZXh0ZW5kcyBWaWV3IGltcGxlbWVudHMgSUNvbG9ycGlja2VyIHtcblx0Y29uZmlnOiBJQ29sb3JwaWNrZXJDb25maWc7XG5cdGV2ZW50czogSUV2ZW50U3lzdGVtPENvbG9ycGlja2VyRXZlbnRzLCBJRXZlbnRIYW5kbGVyc01hcD47XG5cdHByaXZhdGUgX2tleU1hbmFnZXI6IElLZXlNYW5hZ2VyO1xuXHRwcml2YXRlIF9zZWxlY3RlZDogc3RyaW5nO1xuXHRwcml2YXRlIF9oYW5kbGVyczogSUhhbmRsZXJzO1xuXHRwcml2YXRlIF9waWNrZXJTdGF0ZTogSVBpY2tlclN0YXRlO1xuXHRwcml2YXRlIF9pbnB1dFRpbWVvdXQ6IGFueTtcblxuXHRjb25zdHJ1Y3Rvcihjb250YWluZXI6IHN0cmluZyB8IEhUTUxFbGVtZW50LCBjb25maWc/OiBJQ29sb3JwaWNrZXJDb25maWcpIHtcblx0XHRzdXBlcihjb250YWluZXIsIGNvbmZpZyk7XG5cdFx0dGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyO1xuXHRcdHRoaXMuY29uZmlnID0gZXh0ZW5kKFxuXHRcdFx0KHtcblx0XHRcdFx0Y3NzOiBcIlwiLFxuXHRcdFx0XHRncmF5U2hhZGVzOiB0cnVlLFxuXHRcdFx0XHRwaWNrZXJPbmx5OiBmYWxzZSxcblx0XHRcdFx0cGFsZXR0ZU9ubHk6IGZhbHNlLFxuXHRcdFx0XHRjdXN0b21Db2xvcnM6IFtdLFxuXHRcdFx0XHRwYWxldHRlLFxuXHRcdFx0XHR3aWR0aDogXCIyMzhweFwiLFxuXHRcdFx0XHRtb2RlOiBcInBhbGV0dGVcIixcblx0XHRcdH0gYXMgYW55KSBhcyBJQ29sb3JwaWNrZXJDb25maWcsXG5cdFx0XHR0aGlzLmNvbmZpZ1xuXHRcdCk7XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5wYWxldHRlKSB7XG5cdFx0XHR0aGlzLmNvbmZpZy5wYWxldHRlID0gcGFsZXR0ZTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY29uZmlnLmN1c3RvbUNvbG9ycykge1xuXHRcdFx0dGhpcy5jb25maWcuY3VzdG9tQ29sb3JzID0gdGhpcy5jb25maWcuY3VzdG9tQ29sb3JzLm1hcChjb2xvciA9PiBjb2xvci50b1VwcGVyQ2FzZSgpKTtcblx0XHR9XG5cdFx0dGhpcy5fcGlja2VyU3RhdGUgPSB7XG5cdFx0XHRoc3Y6IHsgaDogMCwgczogMSwgdjogMSB9LFxuXHRcdFx0Y3VzdG9tSGV4OiBcIlwiLFxuXHRcdH07XG5cblx0XHR0aGlzLmV2ZW50cyA9IG5ldyBFdmVudFN5c3RlbSh0aGlzKTtcblx0XHR0aGlzLl9zZXRIYW5kbGVycygpO1xuXG5cdFx0dGhpcy5fa2V5TWFuYWdlciA9IG5ldyBLZXlNYW5hZ2VyKChlOiBFdmVudCwgZm9jdXNJZDogc3RyaW5nKSA9PiBmb2N1c0lkID09PSB0aGlzLl91aWQpO1xuXHRcdHRoaXMuX2luaXRIb3RLZXkoKTtcblxuXHRcdGNvbnN0IHZpZXcgPSBjcmVhdGUoeyByZW5kZXI6ICgpID0+IHRoaXMuX2dldENvbnRlbnQoKSB9KTtcblx0XHR0aGlzLm1vdW50KHRoaXMuX2NvbnRhaW5lciwgdmlldyk7XG5cdH1cblx0ZGVzdHJ1Y3RvcigpOiB2b2lkIHtcblx0XHR0aGlzLmV2ZW50cyAmJiB0aGlzLmV2ZW50cy5jbGVhcigpO1xuXG5cdFx0dGhpcy5jb25maWcgPSB0aGlzLmV2ZW50cyA9IHRoaXMuX3NlbGVjdGVkID0gdGhpcy5faGFuZGxlcnMgPSB0aGlzLl9waWNrZXJTdGF0ZSA9IHRoaXMuX2lucHV0VGltZW91dCA9IG51bGw7XG5cdFx0dGhpcy51bm1vdW50KCk7XG5cdH1cblx0Y2xlYXIoKTogdm9pZCB7XG5cdFx0dGhpcy5fc2VsZWN0ZWQgPSBcIlwiO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoQ29sb3JwaWNrZXJFdmVudHMuY2hhbmdlLCBbdGhpcy5fc2VsZWN0ZWRdKTtcblx0XHR0aGlzLnBhaW50KCk7XG5cdH1cblx0c2V0VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuXHRcdGlmICh0aGlzLl9mb2N1c0NvbG9yKHZhbHVlKSB8fCBmb2N1c01hbmFnZXIuZ2V0Rm9jdXNJZCgpID09PSB0aGlzLl91aWQpIHtcblx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ29sb3JwaWNrZXJFdmVudHMuY2hhbmdlLCBbdGhpcy5fc2VsZWN0ZWRdKTtcblx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ29sb3JwaWNrZXJFdmVudHMuY29sb3JDaGFuZ2UsIFt0aGlzLl9zZWxlY3RlZF0pOyAvLyBUT0RPOiByZW1vdmUgc3VpdGVfNy4wXG5cdFx0fVxuXHR9XG5cdHNldEZvY3VzKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5fZm9jdXNDb2xvcih2YWx1ZSkpIHtcblx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHR9XG5cdH1cblx0Z2V0VmFsdWUoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VsZWN0ZWQgfHwgXCJcIjtcblx0fVxuXHRnZXRDdXN0b21Db2xvcnMoKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiB0aGlzLmNvbmZpZy5jdXN0b21Db2xvcnM7XG5cdH1cblx0c2V0Q3VzdG9tQ29sb3JzKGN1c3RvbUNvbG9yczogc3RyaW5nW10pOiB2b2lkIHtcblx0XHR0aGlzLmNvbmZpZy5jdXN0b21Db2xvcnMgPSBjdXN0b21Db2xvcnMubWFwKGNvbG9yID0+IGNvbG9yLnRvVXBwZXJDYXNlKCkpO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRzZXRDdXJyZW50TW9kZShtb2RlOiBWaWV3c01vZGUpOiB2b2lkIHtcblx0XHRpZiAobW9kZSA9PT0gXCJwYWxldHRlXCIgfHwgbW9kZSA9PT0gXCJwaWNrZXJcIikge1xuXHRcdFx0dGhpcy5jb25maWcubW9kZSA9IG1vZGU7XG5cdFx0XHR0aGlzLmV2ZW50cy5maXJlKENvbG9ycGlja2VyRXZlbnRzLm1vZGVDaGFuZ2UsIFttb2RlXSk7XG5cdFx0XHR0aGlzLmV2ZW50cy5maXJlKENvbG9ycGlja2VyRXZlbnRzLnZpZXdDaGFuZ2UsIFttb2RlXSk7IC8vIFRPRE86IHJlbW92ZSBzdWl0ZV83LjBcblx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHR9XG5cdH1cblx0Z2V0Q3VycmVudE1vZGUoKTogVmlld3NNb2RlIHtcblx0XHRyZXR1cm4gdGhpcy5jb25maWcubW9kZTtcblx0fVxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGdldFZpZXcoKTogVmlld3NNb2RlIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRDdXJyZW50TW9kZSgpO1xuXHR9XG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0c2V0Vmlldyhtb2RlOiBWaWV3c01vZGUpOiB2b2lkIHtcblx0XHR0aGlzLnNldEN1cnJlbnRNb2RlKG1vZGUpO1xuXHR9XG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0Zm9jdXNWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0dGhpcy5zZXRGb2N1cyh2YWx1ZSk7XG5cdH1cblx0cHJpdmF0ZSBfc2V0SGFuZGxlcnMoKTogdm9pZCB7XG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHRjbGljazoge1xuXHRcdFx0XHRcIi5kaHhfcGFsZXR0ZV9fY2VsbFwiOiB0aGlzLl9vbkNvbG9yQ2xpY2ssXG5cdFx0XHR9LFxuXHRcdFx0bW91c2Vkb3duOiAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9waWNrZXJNb3ZlKGUpO1xuXHRcdFx0fSxcblx0XHRcdHRvdWNoc3RhcnQ6IChlOiBUb3VjaEV2ZW50KSA9PiB7XG5cdFx0XHRcdHRoaXMuX3BpY2tlck1vdmUoZSk7XG5cdFx0XHR9LFxuXHRcdFx0YnV0dG9uc0NsaWNrOiAoYnV0dG9uOiBcImNhbmNlbFwiIHwgXCJhcHBseVwiKSA9PiB7XG5cdFx0XHRcdHRoaXMuc2V0Q3VycmVudE1vZGUoXCJwYWxldHRlXCIpO1xuXG5cdFx0XHRcdGlmIChidXR0b24gPT09IFwiY2FuY2VsXCIpIHtcblx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENvbG9ycGlja2VyRXZlbnRzLmNhbmNlbENsaWNrLCBbXSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChidXR0b24gPT09IFwiYXBwbHlcIiAmJiAhdGhpcy5jb25maWcuY3VzdG9tQ29sb3JzLmluY2x1ZGVzKHRoaXMuX3BpY2tlclN0YXRlLmJhY2tncm91bmQpKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRWYWx1ZSh0aGlzLl9waWNrZXJTdGF0ZS5iYWNrZ3JvdW5kKTtcblx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKENvbG9ycGlja2VyRXZlbnRzLmFwcGx5LCBbXSk7XG5cdFx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShDb2xvcnBpY2tlckV2ZW50cy5zZWxlY3RDbGljaywgW10pOyAvLyBUT0RPOiByZW1vdmUgc3VpdGVfNy4wXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRjdXN0b21Db2xvckNsaWNrOiAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuc2V0VmlldyhcInBpY2tlclwiKTtcblx0XHRcdH0sXG5cdFx0XHRvbmlucHV0OiAoZTogYW55KSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLl9pbnB1dFRpbWVvdXQpIHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5faW5wdXRUaW1lb3V0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9pbnB1dFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRsZXQgdmFsID0gZS50YXJnZXQudmFsdWU7XG5cdFx0XHRcdFx0aWYgKHZhbC5pbmRleE9mKFwiI1wiKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdHZhbCA9IGAjJHt2YWx9YDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fcGlja2VyU3RhdGUuY3VzdG9tSGV4ID0gdmFsO1xuXHRcdFx0XHRcdGlmIChpc0hleCh2YWwpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9waWNrZXJTdGF0ZS5oc3YgPSBIZXhUb0hTVih2YWwpO1xuXHRcdFx0XHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgMTAwKTtcblx0XHRcdH0sXG5cdFx0XHRjb250ZXh0bWVudToge1xuXHRcdFx0XHRcIi5kaHhfcGFsZXR0ZV9fY2VsbFwiOiAoZSwgbm9kZSkgPT4ge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRjb25zdCBpbmRleCA9IHRoaXMuY29uZmlnLmN1c3RvbUNvbG9ycy5pbmRleE9mKG5vZGUuZGF0YS5jb2xvcik7XG5cdFx0XHRcdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0dGhpcy5fcmVtb3ZlQ3VzdG9tQ29sb3IoaW5kZXgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdG1vdXNlb3Zlcjoge1xuXHRcdFx0XHRcIi5kaHhfcGFsZXR0ZV9fY2VsbFwiOiAoZTogYW55KSA9PiB7XG5cdFx0XHRcdFx0aWYgKGUudGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHR0b29sdGlwKGxvY2FsZS5yaWdodENsaWNrVG9EZWxldGUsIHtcblx0XHRcdFx0XHRcdFx0bm9kZTogZS50YXJnZXQsXG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiBUb29sdGlwUG9zaXRpb24uYm90dG9tLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIi5kaHhfY29sb3JwaWNrZXItY3VzdG9tLWNvbG9yc19fcGlja2VyXCI6IChlOiBhbnkpID0+IHtcblx0XHRcdFx0XHRpZiAoZS50YXJnZXQpIHtcblx0XHRcdFx0XHRcdHRvb2x0aXAobG9jYWxlLmFkZE5ld0NvbG9yLCB7XG5cdFx0XHRcdFx0XHRcdG5vZGU6IGUudGFyZ2V0LFxuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogVG9vbHRpcFBvc2l0aW9uLmJvdHRvbSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fTtcblx0XHR0aGlzLmV2ZW50cy5vbihDb2xvcnBpY2tlckV2ZW50cy5jaGFuZ2UsICgpID0+IHtcblx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHR9KTtcblx0XHQvLyBUT0RPOiByZW1vdmUgc3VpdGVfNy4wXG5cdFx0dGhpcy5ldmVudHMub24oQ29sb3JwaWNrZXJFdmVudHMuY29sb3JDaGFuZ2UsICgpID0+IHtcblx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHR9KTtcblx0fVxuXHRwcml2YXRlIF9waWNrZXJNb3ZlKGU6IGFueSk6IHZvaWQge1xuXHRcdGNvbnN0IG5hbWUgPSBsb2NhdGUoZSk7XG5cdFx0dGhpcy5fcGlja2VyU3RhdGUuY3VzdG9tSGV4ID0gXCJcIjtcblxuXHRcdGlmIChuYW1lID09PSBcInBpY2tlcl9wYWxldHRlXCIpIHtcblx0XHRcdHRoaXMuX3NldFBhbGV0dGVHcmlwKGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9zZXRSYW5nZUdyaXAoZSk7XG5cdFx0fVxuXHRcdGNvbnN0IGhhbmRsZXIgPSBuYW1lID09PSBcInBpY2tlcl9wYWxldHRlXCIgPyB0aGlzLl9zZXRQYWxldHRlR3JpcCA6IHRoaXMuX3NldFJhbmdlR3JpcDtcblxuXHRcdGNvbnN0IG1vdmUgPSBlLnRhcmdldFRvdWNoZXMgPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcblx0XHRjb25zdCB1cCA9IGUudGFyZ2V0VG91Y2hlcyA/IFwidG91Y2hlbmRcIiA6IFwibW91c2V1cFwiO1xuXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihtb3ZlLCBoYW5kbGVyKTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHVwLCAoKSA9PiB7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKG1vdmUsIGhhbmRsZXIpO1xuXHRcdH0pO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRwcml2YXRlIF9mb2N1c0NvbG9yKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZS5sZW5ndGggPCA0KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGNvbnN0IGhleCA9IHZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cdFx0aWYgKCFpc0hleChoZXgpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGNvbnN0IGlzSW5QYWxldHRlID0gdGhpcy5jb25maWcucGFsZXR0ZS5yZWR1Y2UoKHN0YXRlLCBjb2wpID0+IHtcblx0XHRcdGlmIChzdGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHR9XG5cdFx0XHRjb2wuZm9yRWFjaChjb2xvciA9PiB7XG5cdFx0XHRcdGlmIChjb2xvci50b1VwcGVyQ2FzZSgpID09PSBoZXgpIHtcblx0XHRcdFx0XHRzdGF0ZSA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHR9LCBmYWxzZSk7XG5cdFx0Y29uc3QgaXNJbkdyYXlTaGFkZXMgPSBncmF5U2hhZGVzLmluY2x1ZGVzKGhleCk7XG5cdFx0aWYgKCFpc0luUGFsZXR0ZSAmJiAhaXNJbkdyYXlTaGFkZXMpIHtcblx0XHRcdGNvbnN0IGNvbG9ycyA9IHRoaXMuZ2V0Q3VzdG9tQ29sb3JzKCk7XG5cdFx0XHRpZiAoIWNvbG9ycy5pbmNsdWRlcyhoZXgudG9VcHBlckNhc2UoKSkpIHtcblx0XHRcdFx0Y29sb3JzLnB1c2goaGV4LnRvVXBwZXJDYXNlKCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl9zZWxlY3RlZCA9IGhleCB8fCBudWxsO1xuXHRcdHRoaXMuX3BpY2tlclN0YXRlLmhzdiA9IEhleFRvSFNWKGhleCk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cHJpdmF0ZSBfc2V0UGFsZXR0ZUdyaXAgPSBlID0+IHtcblx0XHRjb25zdCBwYWxldHRlUmVjdCA9IHRoaXMuZ2V0Um9vdFZpZXcoKS5yZWZzLnBpY2tlcl9wYWxldHRlLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0Y29uc3QgY2xpZW50WCA9IGUudGFyZ2V0VG91Y2hlcyA/IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYO1xuXHRcdGNvbnN0IGNsaWVudFkgPSBlLnRhcmdldFRvdWNoZXMgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WTtcblxuXHRcdGNvbnN0IHRvcCA9IGNsaWVudFkgLSBwYWxldHRlUmVjdC50b3A7XG5cdFx0Y29uc3QgbGVmdCA9IGNsaWVudFggLSBwYWxldHRlUmVjdC5sZWZ0O1xuXHRcdGNvbnN0IHsgcywgdiB9ID0gY2FsY3VsYXRlUGFsZXR0ZUdyaXAocGFsZXR0ZVJlY3QsIHRvcCwgbGVmdCk7XG5cdFx0dGhpcy5fcGlja2VyU3RhdGUuaHN2LnMgPSBzO1xuXHRcdHRoaXMuX3BpY2tlclN0YXRlLmhzdi52ID0gdjtcblx0XHR0aGlzLnBhaW50KCk7XG5cdH07XG5cdHByaXZhdGUgX3NldFJhbmdlR3JpcCA9IGUgPT4ge1xuXHRcdGNvbnN0IHJhbmdlUmVjdCA9IHRoaXMuZ2V0Um9vdFZpZXcoKS5yZWZzLmh1ZV9yYW5nZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRjb25zdCBjbGllbnRYID0gZS50YXJnZXRUb3VjaGVzID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7XG5cdFx0Y29uc3QgbGVmdCA9IGNsaWVudFggLSByYW5nZVJlY3QubGVmdDtcblxuXHRcdGNvbnN0IHsgaCwgcmFuZ2VMZWZ0IH0gPSBjYWxjdWxhdGVSYW5nZUdyaXAocmFuZ2VSZWN0LCBsZWZ0KTtcblx0XHR0aGlzLl9waWNrZXJTdGF0ZS5oc3YuaCA9IGg7XG5cdFx0dGhpcy5fcGlja2VyU3RhdGUucmFuZ2VMZWZ0ID0gcmFuZ2VMZWZ0O1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fTtcblx0cHJpdmF0ZSBfb25Db2xvckNsaWNrID0gKF9lLCBub2RlKSA9PiB7XG5cdFx0dGhpcy5fc2VsZWN0ZWQgPSBub2RlLmRhdGEuY29sb3IudG9VcHBlckNhc2UoKTtcblx0XHR0aGlzLmV2ZW50cy5maXJlKENvbG9ycGlja2VyRXZlbnRzLmNoYW5nZSwgW3RoaXMuX3NlbGVjdGVkXSk7XG5cdFx0dGhpcy5ldmVudHMuZmlyZShDb2xvcnBpY2tlckV2ZW50cy5jb2xvckNoYW5nZSwgW3RoaXMuX3NlbGVjdGVkXSk7IC8vIFRPRE86IHJlbW92ZSBzdWl0ZV83LjBcblx0fTtcblx0cHJpdmF0ZSBfcmVtb3ZlQ3VzdG9tQ29sb3IoaW5kZXg6IG51bWJlcikge1xuXHRcdHRoaXMuY29uZmlnLmN1c3RvbUNvbG9ycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHR9XG5cdHByaXZhdGUgX2dldENlbGxzKGNvbG9yczogYW55W10sIGNlbGxDbGFzcyA9IFwiXCIpOiBhbnlbXSB7XG5cdFx0cmV0dXJuIGNvbG9ycy5yZWR1Y2UoKGNlbGxzLCBjb2xvcikgPT4ge1xuXHRcdFx0Y29uc3Qgc2VsZWN0ZWQgPVxuXHRcdFx0XHQodGhpcy5fc2VsZWN0ZWQgfHwgXCJcIikudG9VcHBlckNhc2UoKSA9PT0gY29sb3IudG9VcHBlckNhc2UoKVxuXHRcdFx0XHRcdD8gXCJkaHhfcGFsZXR0ZV9fY2VsbC0tc2VsZWN0ZWRcIlxuXHRcdFx0XHRcdDogXCJcIjtcblx0XHRcdGNlbGxzLnB1c2goXG5cdFx0XHRcdGVsKFwiLmRoeF9wYWxldHRlX19jZWxsXCIsIHtcblx0XHRcdFx0XHRjbGFzczogYCR7c2VsZWN0ZWR9ICR7Y2VsbENsYXNzfWAsXG5cdFx0XHRcdFx0X2RhdGE6IHsgY29sb3IgfSxcblx0XHRcdFx0XHRzdHlsZTogYGJhY2tncm91bmQ6JHtjb2xvcn1gLFxuXHRcdFx0XHRcdHRhYmluZGV4OiAwLFxuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0XHRcdHJldHVybiBjZWxscztcblx0XHR9LCBbXSk7XG5cdH1cblx0cHJpdmF0ZSBfZ2V0R3JheVNoYWRlcygpOiBhbnkge1xuXHRcdHJldHVybiBlbChcIi5kaHhfcGFsZXR0ZV9fcm93XCIsIHRoaXMuX2dldENlbGxzKGdyYXlTaGFkZXMpKTtcblx0fVxuXHRwcml2YXRlIF9nZXRQYWxldHRlKCk6IGFueVtdIHtcblx0XHRyZXR1cm4gdGhpcy5jb25maWcucGFsZXR0ZS5yZWR1Y2UoKHRvdGFsLCByb3cpID0+IHtcblx0XHRcdHRvdGFsLnB1c2goZWwoXCIuZGh4X3BhbGV0dGVfX2NvbFwiLCB0aGlzLl9nZXRDZWxscyhyb3cpKSk7XG5cdFx0XHRyZXR1cm4gdG90YWw7XG5cdFx0fSwgW10pO1xuXHR9XG5cdHByaXZhdGUgX2dldENvbnRlbnQoKSB7XG5cdFx0bGV0IHZpZXc6IGFueVtdO1xuXHRcdGlmICh0aGlzLmNvbmZpZy5waWNrZXJPbmx5KSB7XG5cdFx0XHR2aWV3ID0gW2dldFBpY2tlcih0aGlzLCB0aGlzLl9waWNrZXJTdGF0ZSwgdGhpcy5faGFuZGxlcnMpXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmlldyA9XG5cdFx0XHRcdHRoaXMuY29uZmlnLm1vZGUgPT09IFwicGFsZXR0ZVwiXG5cdFx0XHRcdFx0PyBbXG5cdFx0XHRcdFx0XHRcdHRoaXMuY29uZmlnLmdyYXlTaGFkZXMgJiYgdGhpcy5fZ2V0R3JheVNoYWRlcygpLFxuXHRcdFx0XHRcdFx0XHQuLi50aGlzLl9nZXRQYWxldHRlKCksXG5cdFx0XHRcdFx0XHRcdCF0aGlzLmNvbmZpZy5wYWxldHRlT25seSAmJlxuXHRcdFx0XHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XCIuZGh4X2NvbG9ycGlja2VyLWN1c3RvbS1jb2xvcnNcIixcblx0XHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0b25tb3VzZW92ZXI6IHRoaXMuX2hhbmRsZXJzLm1vdXNlb3Zlcixcblx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVsKFwiLmRoeF9jb2xvcnBpY2tlci1jdXN0b20tY29sb3JzX19oZWFkZXJcIiwgW2xvY2FsZS5jdXN0b21Db2xvcnNdKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWwoXCIuZGh4X3BhbGV0dGUtLWN1c3RvbS5kaHhfcGFsZXR0ZV9fcm93XCIsIFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuLi50aGlzLl9nZXRDZWxscyhcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuY29uZmlnLmN1c3RvbUNvbG9ycyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiZGh4X2N1c3RvbS1jb2xvcl9fY2VsbFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlbChcIi5kaHhfY29sb3JwaWNrZXItY3VzdG9tLWNvbG9yc19fcGlja2VyXCIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzOiBcImR4aSBkeGktcGx1c1wiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b25jbGljazogdGhpcy5faGFuZGxlcnMuY3VzdG9tQ29sb3JDbGljayxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9ubW91c2VvdmVyOiB0aGlzLl9oYW5kbGVycy5tb3VzZW92ZXIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0YWJpbmRleDogMCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XSksXG5cdFx0XHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHQgIF1cblx0XHRcdFx0XHQ6IFtnZXRQaWNrZXIodGhpcywgdGhpcy5fcGlja2VyU3RhdGUsIHRoaXMuX2hhbmRsZXJzKV07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCIuZGh4X3dpZGdldC5kaHhfY29sb3JwaWNrZXJcIixcblx0XHRcdHtcblx0XHRcdFx0Y2xhc3M6IHRoaXMuY29uZmlnLmNzcyxcblx0XHRcdFx0c3R5bGU6IHsgd2lkdGg6IHRoaXMuY29uZmlnLndpZHRoIH0sXG5cdFx0XHRcdGRoeF93aWRnZXRfaWQ6IHRoaXMuX3VpZCxcblx0XHRcdH0sXG5cdFx0XHRbXG5cdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFwiLmRoeF9wYWxldHRlXCIsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0b25jbGljazogdGhpcy5faGFuZGxlcnMuY2xpY2ssXG5cdFx0XHRcdFx0XHRvbmNvbnRleHRtZW51OiB0aGlzLl9oYW5kbGVycy5jb250ZXh0bWVudSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHZpZXdcblx0XHRcdFx0KSxcblx0XHRcdF1cblx0XHQpO1xuXHR9XG5cdHByaXZhdGUgX2luaXRIb3RLZXkoKSB7XG5cdFx0Y29uc3QgaGFuZGxlcnMgPSB7XG5cdFx0XHRlbnRlcjogZSA9PiB7XG5cdFx0XHRcdGlmIChsb2NhdGVOb2RlQnlDbGFzc05hbWUoZSwgXCJkaHhfcGFsZXR0ZV9fY2VsbFwiKSkge1xuXHRcdFx0XHRcdHRoaXMuX3NlbGVjdGVkID0gcmdiVG9IZXgoZS50YXJnZXQuc3R5bGUuYmFja2dyb3VuZCk7XG5cdFx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShDb2xvcnBpY2tlckV2ZW50cy5jaGFuZ2UsIFt0aGlzLl9zZWxlY3RlZF0pO1xuXHRcdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ29sb3JwaWNrZXJFdmVudHMuY29sb3JDaGFuZ2UsIFt0aGlzLl9zZWxlY3RlZF0pOyAvLyBUT0RPOiByZW1vdmUgc3VpdGVfNy4wXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGxvY2F0ZU5vZGVCeUNsYXNzTmFtZShlLCBcImRoeF9jb2xvcnBpY2tlci1jdXN0b20tY29sb3JzX19waWNrZXJcIikpIHtcblx0XHRcdFx0XHR0aGlzLnNldEN1cnJlbnRNb2RlKFwicGlja2VyXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRmb3IgKGNvbnN0IGtleSBpbiBoYW5kbGVycykge1xuXHRcdFx0dGhpcy5fa2V5TWFuYWdlci5hZGRIb3RLZXkoa2V5LCBoYW5kbGVyc1trZXldKTtcblx0XHR9XG5cdH1cbn1cbiIsImV4cG9ydCBjb25zdCBncmF5U2hhZGVzID0gW1xuXHRcIiMwMDAwMDBcIixcblx0XCIjNEM0QzRDXCIsXG5cdFwiIzY2NjY2NlwiLFxuXHRcIiM4MDgwODBcIixcblx0XCIjOTk5OTk5XCIsXG5cdFwiI0IzQjNCM1wiLFxuXHRcIiNDQ0NDQ0NcIixcblx0XCIjRTZFNkU2XCIsXG5cdFwiI0YyRjJGMlwiLFxuXHRcIiNGRkZGRkZcIixcbl07XG5cbmV4cG9ydCBjb25zdCBwYWxldHRlID0gW1xuXHRbXCIjRDREQUU0XCIsIFwiI0IwQjhDRFwiLCBcIiM5NDlEQjFcIiwgXCIjNzI3QThDXCIsIFwiIzVFNjY3N1wiLCBcIiMzRjQ3NTdcIiwgXCIjMUQyNTM0XCJdLFxuXHRbXCIjRkZDREQyXCIsIFwiI0ZFOTk5OFwiLCBcIiNGMzVDNEVcIiwgXCIjRTk0NjMzXCIsIFwiI0Q3M0MyRFwiLCBcIiNDQTM2MjZcIiwgXCIjQkIyQjFBXCJdLFxuXG5cdFtcIiNGOUU2QURcIiwgXCIjRjRENjc5XCIsIFwiI0VEQjkwRlwiLCBcIiNFQUExMDBcIiwgXCIjRUE4RjAwXCIsIFwiI0VBN0UwMFwiLCBcIiNFQTVEMDBcIl0sXG5cblx0W1wiI0JDRTRDRVwiLCBcIiM5MEQyQUZcIiwgXCIjMzNCNTc5XCIsIFwiIzM2OTU1RlwiLCBcIiMyNDczNDZcIiwgXCIjMUQ1QjM4XCIsIFwiIzE3NDkyRFwiXSxcblx0W1wiI0JERjBFOVwiLCBcIiM5MkU3RENcIiwgXCIjMDJEN0M1XCIsIFwiIzExQjNBNVwiLCBcIiMwMThCODBcIiwgXCIjMDI2QjYwXCIsIFwiIzAyNEY0M1wiXSxcblx0W1wiI0IzRTVGQ1wiLCBcIiM4MUQ0RkFcIiwgXCIjMjlCNkY2XCIsIFwiIzAzOUJFNVwiLCBcIiMwMjg4RDFcIiwgXCIjMDI3N0JEXCIsIFwiIzAxNTc5QlwiXSxcblx0W1wiI0FFQzFGRlwiLCBcIiM4OEEzRjlcIiwgXCIjNTg3NENEXCIsIFwiIzIzNDlBRVwiLCBcIiMxNjNGQTJcIiwgXCIjMDgzNTk2XCIsIFwiIzAwMjM4MVwiXSxcblx0W1wiI0M1QzBEQVwiLCBcIiM5Rjk3QzFcIiwgXCIjN0U2QkFEXCIsIFwiIzU4NEE4RlwiLCBcIiM0RjQwODNcIiwgXCIjNDczNzc2XCIsIFwiIzNBMjY1RlwiXSxcblx0W1wiI0Q2QkRDQ1wiLCBcIiNDNDkyQUNcIiwgXCIjQTk1MzdDXCIsIFwiIzk2M0E2NFwiLCBcIiM4MTM1NUFcIiwgXCIjNkUzMDUxXCIsIFwiIzRDMjY0MFwiXSxcblx0W1wiI0QyQzVDMVwiLCBcIiNCNEEwOUFcIiwgXCIjODI2MzU4XCIsIFwiIzYyNDMzOVwiLCBcIiM1RDQwMzdcIiwgXCIjNEUzNDJFXCIsIFwiIzNFMjcyM1wiXSxcbl07XG4iLCJleHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUGFsZXR0ZUdyaXAoY2xpZW50UmVjdDogQ2xpZW50UmVjdCwgdG9wOiBudW1iZXIsIGxlZnQ6IG51bWJlcikge1xuXHRjb25zdCBib3R0b20gPSBjbGllbnRSZWN0LmhlaWdodDtcblx0Y29uc3QgcmlnaHQgPSBjbGllbnRSZWN0LndpZHRoO1xuXG5cdHRvcCA9IHRvcCA8IDAgPyAwIDogdG9wID4gYm90dG9tID8gYm90dG9tIDogdG9wO1xuXHRsZWZ0ID0gbGVmdCA8IDAgPyAwIDogbGVmdCA+IHJpZ2h0ID8gcmlnaHQgOiBsZWZ0O1xuXG5cdGNvbnN0IHBMZWZ0ID0gTWF0aC5yb3VuZChsZWZ0IC8gKHJpZ2h0IC8gMTAwKSk7XG5cdGNvbnN0IHBUb3AgPSAxMDAgLSBNYXRoLnJvdW5kKHRvcCAvIChib3R0b20gLyAxMDApKTtcblxuXHRyZXR1cm4ge1xuXHRcdHM6IHBMZWZ0IC8gMTAwLFxuXHRcdHY6IHBUb3AgLyAxMDAsXG5cdH07XG59XG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUmFuZ2VHcmlwKGNsaWVudFJlY3Q6IENsaWVudFJlY3QsIGxlZnQ6IG51bWJlcikge1xuXHRjb25zdCByaWdodCA9IGNsaWVudFJlY3Qud2lkdGg7XG5cdGxlZnQgPSBsZWZ0IDwgMCA/IDAgOiBsZWZ0ID4gcmlnaHQgPyByaWdodCA6IGxlZnQ7XG5cblx0cmV0dXJuIHtcblx0XHRoOiBNYXRoLnJvdW5kKDM2MCAqIChsZWZ0IC8gcmlnaHQpKSxcblx0XHRyYW5nZUxlZnQ6IGxlZnQsXG5cdH07XG59XG4iLCJleHBvcnQgaW50ZXJmYWNlIElSZ2Ige1xuXHRyOiBudW1iZXI7XG5cdGc6IG51bWJlcjtcblx0YjogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBJSHN2IHtcblx0aDogbnVtYmVyO1xuXHRzOiBudW1iZXI7XG5cdHY6IG51bWJlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBIU1Z0b1JHQihoc3Y6IElIc3YpOiBJUmdiIHtcblx0Y29uc3QgcmdiID0geyByOiAwLCBnOiAwLCBiOiAwIH07XG5cdGNvbnN0IGggPSBoc3YuaCAvIDYwO1xuXHRjb25zdCBzID0gaHN2LnM7XG5cdGxldCB2ID0gaHN2LnY7XG5cblx0Y29uc3QgaSA9IE1hdGguZmxvb3IoaCkgJSA2O1xuXG5cdGNvbnN0IGYgPSBoIC0gTWF0aC5mbG9vcihoKTtcblx0Y29uc3QgcCA9IDI1NSAqIHYgKiAoMSAtIHMpO1xuXHRjb25zdCBxID0gMjU1ICogdiAqICgxIC0gcyAqIGYpO1xuXHRjb25zdCB0ID0gMjU1ICogdiAqICgxIC0gcyAqICgxIC0gZikpO1xuXHR2ICo9IDI1NTtcblxuXHRzd2l0Y2ggKGkpIHtcblx0XHRjYXNlIDA6XG5cdFx0XHRyZ2IuciA9IHY7XG5cdFx0XHRyZ2IuZyA9IHQ7XG5cdFx0XHRyZ2IuYiA9IHA7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDE6XG5cdFx0XHRyZ2IuciA9IHE7XG5cdFx0XHRyZ2IuZyA9IHY7XG5cdFx0XHRyZ2IuYiA9IHA7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDI6XG5cdFx0XHRyZ2IuciA9IHA7XG5cdFx0XHRyZ2IuZyA9IHY7XG5cdFx0XHRyZ2IuYiA9IHQ7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDM6XG5cdFx0XHRyZ2IuciA9IHA7XG5cdFx0XHRyZ2IuZyA9IHE7XG5cdFx0XHRyZ2IuYiA9IHY7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDQ6XG5cdFx0XHRyZ2IuciA9IHQ7XG5cdFx0XHRyZ2IuZyA9IHA7XG5cdFx0XHRyZ2IuYiA9IHY7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDU6XG5cdFx0XHRyZ2IuciA9IHY7XG5cdFx0XHRyZ2IuZyA9IHA7XG5cdFx0XHRyZ2IuYiA9IHE7XG5cdFx0XHRicmVhaztcblx0fVxuXHRmb3IgKGNvbnN0IGtleSBpbiByZ2IpIHtcblx0XHRyZ2Jba2V5XSA9IE1hdGgucm91bmQocmdiW2tleV0pO1xuXHR9XG5cdHJldHVybiByZ2I7XG59XG5leHBvcnQgZnVuY3Rpb24gUkdCVG9IZXgocmdiOiBJUmdiKTogc3RyaW5nIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKHJnYikucmVkdWNlKChoZXgsIGMpID0+IHtcblx0XHRsZXQgaCA9IHJnYltjXS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0XHRoID0gaC5sZW5ndGggPT09IDEgPyBcIjBcIiArIGggOiBoO1xuXHRcdHJldHVybiAoaGV4ICs9IGgpO1xuXHR9LCBcIiNcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZXhUb1JHQihoZXg6IHN0cmluZyk6IElSZ2Ige1xuXHRjb25zdCBzaG9ydGhhbmRSZWdleCA9IC9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2k7XG5cdGhleCA9IGhleC5yZXBsYWNlKHNob3J0aGFuZFJlZ2V4LCAoX20sIHIsIGcsIGIpID0+IHIgKyByICsgZyArIGcgKyBiICsgYik7XG5cblx0Y29uc3QgcmVzdWx0ID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG5cdHJldHVybiByZXN1bHRcblx0XHQ/IHtcblx0XHRcdFx0cjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksXG5cdFx0XHRcdGc6IHBhcnNlSW50KHJlc3VsdFsyXSwgMTYpLFxuXHRcdFx0XHRiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KSxcblx0XHQgIH1cblx0XHQ6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSR0JUb0hTVihyZ2I6IElSZ2IpOiBJSHN2IHtcblx0bGV0IGg7XG5cdGxldCBzO1xuXG5cdGNvbnN0IHIgPSByZ2IuciAvIDI1NTtcblx0Y29uc3QgZyA9IHJnYi5nIC8gMjU1O1xuXHRjb25zdCBiID0gcmdiLmIgLyAyNTU7XG5cdGNvbnN0IHYgPSBNYXRoLm1heChyLCBnLCBiKTtcblx0Y29uc3QgZGlmZiA9IHYgLSBNYXRoLm1pbihyLCBnLCBiKTtcblx0Y29uc3QgZGlmZmMgPSBjID0+IHtcblx0XHRyZXR1cm4gKHYgLSBjKSAvIDYgLyBkaWZmICsgMSAvIDI7XG5cdH07XG5cblx0aWYgKGRpZmYgPT09IDApIHtcblx0XHRoID0gcyA9IDA7XG5cdH0gZWxzZSB7XG5cdFx0cyA9IGRpZmYgLyB2O1xuXHRcdGNvbnN0IHJkaWYgPSBkaWZmYyhyKTtcblx0XHRjb25zdCBnZGlmID0gZGlmZmMoZyk7XG5cdFx0Y29uc3QgYmRpZiA9IGRpZmZjKGIpO1xuXG5cdFx0aWYgKHIgPT09IHYpIHtcblx0XHRcdGggPSBiZGlmIC0gZ2RpZjtcblx0XHR9IGVsc2UgaWYgKGcgPT09IHYpIHtcblx0XHRcdGggPSAxIC8gMyArIHJkaWYgLSBiZGlmO1xuXHRcdH0gZWxzZSBpZiAoYiA9PT0gdikge1xuXHRcdFx0aCA9IDIgLyAzICsgZ2RpZiAtIHJkaWY7XG5cdFx0fVxuXHRcdGlmIChoIDwgMCkge1xuXHRcdFx0aCArPSAxO1xuXHRcdH0gZWxzZSBpZiAoaCA+IDEpIHtcblx0XHRcdGggLT0gMTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHtcblx0XHRoOiBNYXRoLmZsb29yKGggKiAzNjApLFxuXHRcdHMsXG5cdFx0dixcblx0fTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBIZXhUb0hTVihoZXg6IHN0cmluZyk6IElIc3Yge1xuXHRyZXR1cm4gUkdCVG9IU1YoSGV4VG9SR0IoaGV4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNIZXgoaGV4OiBzdHJpbmcpOiBib29sZWFuIHtcblx0cmV0dXJuIC8oXiNbMC05QS1GXXs2fSQpfCheI1swLTlBLUZdezN9JCkvaS50ZXN0KGhleCk7XG59XG4iLCJjb25zdCBlbiA9IHtcblx0Y2FuY2VsOiBcIkNhbmNlbFwiLFxuXHRzZWxlY3Q6IFwiU2VsZWN0XCIsXG5cdHJpZ2h0Q2xpY2tUb0RlbGV0ZTogXCJSaWdodCBjbGljayB0byBkZWxldGVcIixcblx0Y3VzdG9tQ29sb3JzOiBcIkN1c3RvbSBjb2xvcnNcIixcblx0YWRkTmV3Q29sb3I6IFwiQWRkIG5ldyBjb2xvclwiLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZW47XG4iLCJpbXBvcnQgeyBIU1Z0b1JHQiwgUkdCVG9IZXgsIGlzSGV4IH0gZnJvbSBcIi4vaGVscGVycy9jb2xvclwiO1xuaW1wb3J0IHsgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgbG9jYWxlIGZyb20gXCIuL2xvY2FsZXMvZW5cIjtcbmltcG9ydCB7IElQaWNrZXJTdGF0ZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xvcnBpY2tlciB9IGZyb20gXCIuL0NvbG9ycGlja2VyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQaWNrZXIoY29sb3JwaWNrZXI6IENvbG9ycGlja2VyLCBwaWNrZXJTdGF0ZTogSVBpY2tlclN0YXRlLCBoYW5kbGVyczogYW55KSB7XG5cdGNvbnN0IHJnYiA9IEhTVnRvUkdCKHBpY2tlclN0YXRlLmhzdik7XG5cdHBpY2tlclN0YXRlLmJhY2tncm91bmQgPSBSR0JUb0hleChyZ2IpO1xuXG5cdGNvbnN0IGN1cnJlbnRCYWNrZ3JvdW5kID0gUkdCVG9IZXgoSFNWdG9SR0IoeyBoOiBwaWNrZXJTdGF0ZS5oc3YuaCwgczogMSwgdjogMSB9KSk7XG5cdGNvbnN0IHJvb3QgPSBjb2xvcnBpY2tlci5nZXRSb290VmlldygpO1xuXHRjb25zdCBib3ggPSByb290LnJlZnNcblx0XHQ/IHJvb3QucmVmcy5waWNrZXJfcGFsZXR0ZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXHRcdDogeyBoZWlnaHQ6IDIwMCwgd2lkdGg6IDIxOCwgeDogMCwgeTogMCB9O1xuXG5cdGNvbnN0IGhlaWdodCA9IGJveC5oZWlnaHQgLSAyO1xuXHRjb25zdCB3aWR0aCA9IGJveC53aWR0aCAtIDI7XG5cblx0Y29uc3QgZ3JpcFRvcCA9IGhlaWdodCAtIHBpY2tlclN0YXRlLmhzdi52ICogaGVpZ2h0IC0gNDtcblx0Y29uc3QgZ3JpcExlZnQgPSBwaWNrZXJTdGF0ZS5oc3YucyAqIHdpZHRoIC0gNDtcblxuXHRjb25zdCByYW5nZVdpZHRoID0gYm94LndpZHRoIC0gNjtcblx0Y29uc3QgcmFuZ2VHcmlwTGVmdCA9IHJhbmdlV2lkdGggLSAoKDM2MCAtIHBpY2tlclN0YXRlLmhzdi5oKSAvIDM2MCkgKiByYW5nZVdpZHRoO1xuXG5cdGNvbnN0IGlucHV0VmFsdWUgPSBpc0hleChwaWNrZXJTdGF0ZS5jdXN0b21IZXgpXG5cdFx0PyBwaWNrZXJTdGF0ZS5jdXN0b21IZXgucmVwbGFjZShcIiNcIiwgXCJcIilcblx0XHQ6IHBpY2tlclN0YXRlLmJhY2tncm91bmQucmVwbGFjZShcIiNcIiwgXCJcIik7XG5cblx0cmV0dXJuIGVsKFwiLmRoeF9jb2xvcnBpY2tlci1waWNrZXJcIiwge30sIFtcblx0XHRlbChcblx0XHRcdFwiLmRoeF9jb2xvcnBpY2tlci1waWNrZXJfX3BhbGV0dGVcIixcblx0XHRcdHtcblx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRoZWlnaHQ6IDEzMixcblx0XHRcdFx0XHRiYWNrZ3JvdW5kOiBjdXJyZW50QmFja2dyb3VuZCxcblx0XHRcdFx0fSxcblx0XHRcdFx0b25tb3VzZWRvd246IGhhbmRsZXJzLm1vdXNlZG93bixcblx0XHRcdFx0b250b3VjaHN0YXJ0OiBoYW5kbGVycy50b3VjaHN0YXJ0LFxuXHRcdFx0XHRkaHhfaWQ6IFwicGlja2VyX3BhbGV0dGVcIixcblx0XHRcdFx0X3JlZjogXCJwaWNrZXJfcGFsZXR0ZVwiLFxuXHRcdFx0fSxcblx0XHRcdFtcblx0XHRcdFx0ZWwoXCIuZGh4X3BhbGV0dGVfZ3JpcFwiLCB7XG5cdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdHRvcDogZ3JpcFRvcCxcblx0XHRcdFx0XHRcdGxlZnQ6IGdyaXBMZWZ0LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0dGFiaW5kZXg6IDAsXG5cdFx0XHRcdH0pLFxuXHRcdFx0XVxuXHRcdCksXG5cdFx0ZWwoXG5cdFx0XHRcIi5kaHhfY29sb3JwaWNrZXItaHVlLXJhbmdlXCIsXG5cdFx0XHR7XG5cdFx0XHRcdHN0eWxlOiB7IGhlaWdodDogMTYgfSxcblx0XHRcdFx0b25tb3VzZWRvd246IGhhbmRsZXJzLm1vdXNlZG93bixcblx0XHRcdFx0b250b3VjaHN0YXJ0OiBoYW5kbGVycy50b3VjaHN0YXJ0LFxuXHRcdFx0XHRkaHhfaWQ6IFwiaHVlX3JhbmdlXCIsXG5cdFx0XHRcdF9rZXk6IFwiaHVlX3JhbmdlXCIsXG5cdFx0XHRcdF9yZWY6IFwiaHVlX3JhbmdlXCIsXG5cdFx0XHR9LFxuXHRcdFx0W1xuXHRcdFx0XHRlbChcIi5kaHhfY29sb3JwaWNrZXItaHVlLXJhbmdlX19ncmlwXCIsIHtcblx0XHRcdFx0XHRzdHlsZTogeyBsZWZ0OiByYW5nZUdyaXBMZWZ0IH0sXG5cdFx0XHRcdFx0dGFiaW5kZXg6IDAsXG5cdFx0XHRcdH0pLFxuXHRcdFx0XVxuXHRcdCksXG5cdFx0ZWwoXCIuZGh4X2NvbG9ycGlja2VyLXZhbHVlXCIsIFtcblx0XHRcdGVsKFwiLmRoeF9jb2xvcnBpY2tlci12YWx1ZV9fY29sb3JcIiwge1xuXHRcdFx0XHRzdHlsZTogeyBiYWNrZ3JvdW5kOiBwaWNrZXJTdGF0ZS5iYWNrZ3JvdW5kIH0sXG5cdFx0XHR9KSxcblx0XHRcdGVsKFwiLmRoeF9jb2xvcnBpY2tlci12YWx1ZV9faW5wdXRfX3dyYXBwZXJcIiwgW1xuXHRcdFx0XHRlbChcImlucHV0XCIsIHtcblx0XHRcdFx0XHRjbGFzczogXCJkaHhfY29sb3JwaWNrZXItdmFsdWVfX2lucHV0XCIsXG5cdFx0XHRcdFx0dmFsdWU6IGlucHV0VmFsdWUsXG5cdFx0XHRcdFx0b25pbnB1dDogaGFuZGxlcnMub25pbnB1dCxcblx0XHRcdFx0XHRtYXhsZW5ndGg6IFwiN1wiLFxuXHRcdFx0XHRcdF9rZXk6IFwiaGV4X2lucHV0XCIsXG5cdFx0XHRcdFx0XCJhcmlhLWxhYmVsXCI6IFwidHlwZSBjb2xvciBpbiBIRVggZm9ybWF0XCIsXG5cdFx0XHRcdH0pLFxuXHRcdFx0XSksXG5cdFx0XSksXG5cdFx0ZWwoXCIuZGh4X2NvbG9ycGlja2VyLXBpY2tlcl9fYnV0dG9uc1wiLCBbXG5cdFx0XHQhY29sb3JwaWNrZXIuY29uZmlnLnBpY2tlck9ubHkgJiZcblx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XCJidXR0b25cIixcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRjbGFzczpcblx0XHRcdFx0XHRcdFx0XCJkaHhfYnV0dG9uIGRoeF9idXR0b24tLXNpemVfbWVkaXVtIGRoeF9idXR0b24tLXZpZXdfbGluayBkaHhfYnV0dG9uLS1jb2xvcl9wcmltYXJ5XCIsXG5cdFx0XHRcdFx0XHRvbmNsaWNrOiBbaGFuZGxlcnMuYnV0dG9uc0NsaWNrLCBcImNhbmNlbFwiXSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGxvY2FsZS5jYW5jZWxcblx0XHRcdFx0KSxcblx0XHRcdGVsKFxuXHRcdFx0XHRcImJ1dHRvblwiLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y2xhc3M6XG5cdFx0XHRcdFx0XHRcImRoeF9idXR0b24gZGh4X2J1dHRvbi0tc2l6ZV9tZWRpdW0gZGh4X2J1dHRvbi0tdmlld19mbGF0IGRoeF9idXR0b24tLWNvbG9yX3ByaW1hcnlcIixcblx0XHRcdFx0XHRvbmNsaWNrOiBbaGFuZGxlcnMuYnV0dG9uc0NsaWNrLCBcImFwcGx5XCJdLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRsb2NhbGUuc2VsZWN0XG5cdFx0XHQpLFxuXHRcdF0pLFxuXHRdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVBhbGV0dGVHcmlwKHJvb3RWaWV3OiBhbnksIHRvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIpIHtcblx0Y29uc3QgcGFsZXR0ZVJlY3QgPSByb290Vmlldy5yZWZzLnBpY2tlcl9wYWxldHRlLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRjb25zdCBib3R0b20gPSBwYWxldHRlUmVjdC5oZWlnaHQ7XG5cdGNvbnN0IHJpZ2h0ID0gcGFsZXR0ZVJlY3Qud2lkdGg7XG5cblx0dG9wID0gdG9wIDwgMCA/IDAgOiB0b3AgPiBib3R0b20gPyBib3R0b20gOiB0b3A7XG5cdGxlZnQgPSBsZWZ0IDwgMCA/IDAgOiBsZWZ0ID4gcmlnaHQgPyByaWdodCA6IGxlZnQ7XG5cblx0Y29uc3QgcExlZnQgPSBNYXRoLnJvdW5kKGxlZnQgLyAocmlnaHQgLyAxMDApKTtcblx0Y29uc3QgcFRvcCA9IDEwMCAtIE1hdGgucm91bmQodG9wIC8gKGJvdHRvbSAvIDEwMCkpO1xuXG5cdHRoaXMuX3BpY2tlclN0YXRlLmhzdi5zID0gcExlZnQgLyAxMDA7XG5cdHRoaXMuX3BpY2tlclN0YXRlLmhzdi52ID0gcFRvcCAvIDEwMDtcbn1cbiIsImltcG9ydCB7IElFdmVudFN5c3RlbSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9ldmVudHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJQ29sb3JwaWNrZXIge1xuXHRldmVudHM6IElFdmVudFN5c3RlbTxDb2xvcnBpY2tlckV2ZW50cz47XG5cdHBhaW50KCk6IHZvaWQ7XG5cdGRlc3RydWN0b3IoKTogdm9pZDtcblx0Y2xlYXIoKTogdm9pZDtcblx0c2V0Q3VzdG9tQ29sb3JzKGN1c3RvbUNvbG9yczogc3RyaW5nW10pOiB2b2lkO1xuXHRzZXRWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZDtcblx0c2V0Q3VycmVudE1vZGUodmlldzogVmlld3NNb2RlKTogdm9pZDtcblx0c2V0Rm9jdXModmFsdWU6IHN0cmluZyk6IHZvaWQ7XG5cdGdldEN1c3RvbUNvbG9ycygpOiBzdHJpbmdbXTtcblx0Z2V0VmFsdWUoKTogc3RyaW5nO1xuXHRnZXRDdXJyZW50TW9kZSgpOiBWaWV3c01vZGU7XG5cblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRnZXRWaWV3KCk6IFZpZXdzTW9kZTtcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRzZXRWaWV3KHZpZXc6IFZpZXdzTW9kZSk6IHZvaWQ7XG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0Zm9jdXNWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbG9ycGlja2VyQ29uZmlnIHtcblx0Y3NzPzogc3RyaW5nO1xuXHRncmF5U2hhZGVzPzogYm9vbGVhbjtcblx0Y3VzdG9tQ29sb3JzPzogc3RyaW5nW107XG5cdHBhbGV0dGU/OiBzdHJpbmdbXVtdO1xuXHR3aWR0aD86IHN0cmluZyB8IG51bWJlcjtcblx0bW9kZT86IFZpZXdzTW9kZTtcblx0cGlja2VyT25seT86IGJvb2xlYW47XG5cdHBhbGV0dGVPbmx5PzogYm9vbGVhbjtcbn1cbmV4cG9ydCBlbnVtIENvbG9ycGlja2VyRXZlbnRzIHtcblx0Y2hhbmdlID0gXCJjaGFuZ2VcIixcblx0YXBwbHkgPSBcImFwcGx5XCIsXG5cdGNhbmNlbENsaWNrID0gXCJjYW5jZWxDbGlja1wiLFxuXHRtb2RlQ2hhbmdlID0gXCJtb2RlQ2hhbmdlXCIsXG5cblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRzZWxlY3RDbGljayA9IFwic2VsZWN0Q2xpY2tcIixcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRjb2xvckNoYW5nZSA9IFwiY29sb3JDaGFuZ2VcIixcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHR2aWV3Q2hhbmdlID0gXCJ2aWV3Q2hhbmdlXCIsXG59XG5leHBvcnQgaW50ZXJmYWNlIElFdmVudEhhbmRsZXJzTWFwIHtcblx0W2tleTogc3RyaW5nXTogKC4uLmFyZ3MpID0+IGFueTtcblx0W0NvbG9ycGlja2VyRXZlbnRzLmNoYW5nZV06IChjb2xvcjogc3RyaW5nKSA9PiB2b2lkO1xuXHRbQ29sb3JwaWNrZXJFdmVudHMuYXBwbHldOiAoKSA9PiB2b2lkO1xuXHRbQ29sb3JwaWNrZXJFdmVudHMuY2FuY2VsQ2xpY2tdOiAoKSA9PiB2b2lkO1xuXHRbQ29sb3JwaWNrZXJFdmVudHMubW9kZUNoYW5nZV06ICh2aWV3OiBWaWV3c01vZGUpID0+IHZvaWQ7XG5cblx0W0NvbG9ycGlja2VyRXZlbnRzLnNlbGVjdENsaWNrXTogKCkgPT4gdm9pZDtcblx0W0NvbG9ycGlja2VyRXZlbnRzLmNvbG9yQ2hhbmdlXTogKGNvbG9yOiBzdHJpbmcpID0+IHZvaWQ7XG5cdFtDb2xvcnBpY2tlckV2ZW50cy52aWV3Q2hhbmdlXTogKHZpZXc6IFZpZXdzTW9kZSkgPT4gdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUhTViB7XG5cdGg6IG51bWJlcjtcblx0czogbnVtYmVyO1xuXHR2OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIElQaWNrZXJTdGF0ZSB7XG5cdGhzdjogSUhTVjtcblx0Y3VzdG9tSGV4OiBzdHJpbmc7XG5cdGJhY2tncm91bmQ/OiBzdHJpbmc7XG5cdHJhbmdlTGVmdD86IG51bWJlcjtcbn1cbmV4cG9ydCB0eXBlIFZpZXdzTW9kZSA9IFwicGFsZXR0ZVwiIHwgXCJwaWNrZXJcIjtcbiIsImV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvQ29tYm9ib3hcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvUHJvQ29tYm9ib3hcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvdHlwZXNcIjtcbiIsImltcG9ydCB7IGV4dGVuZCwgaXNFcXVhbFN0cmluZywgdW53cmFwQm94LCB3cmFwQm94IH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcbmltcG9ydCB7IGF3YWl0UmVkcmF3LCBjcmVhdGUsIGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgRXZlbnRTeXN0ZW0sIElFdmVudFN5c3RlbSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9ldmVudHNcIjtcbmltcG9ydCB7IGdldExhYmVsU3R5bGUsIGxvY2F0ZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQgeyBLRVlfQ09ERVMgfSBmcm9tIFwiQGRoeC90cy1jb21tb24va2V5Y29kZXNcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdmlld1wiO1xuaW1wb3J0IHsgRGF0YUNvbGxlY3Rpb24sIERhdGFFdmVudHMsIElEYXRhRXZlbnRzSGFuZGxlcnNNYXAgfSBmcm9tIFwiQGRoeC90cy1kYXRhXCI7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tIFwiQGRoeC90cy1sYXlvdXRcIjtcbmltcG9ydCB7IExpc3QsIExpc3RFdmVudHMsIE1PVkVfRE9XTiwgTU9WRV9VUCB9IGZyb20gXCJAZGh4L3RzLWxpc3RcIjtcbmltcG9ydCB7IFBvcHVwLCBQb3B1cEV2ZW50cyB9IGZyb20gXCJAZGh4L3RzLXBvcHVwXCI7XG5pbXBvcnQgeyBLZXlMaXN0ZW5lciB9IGZyb20gXCIuL2tleUxpc3RlbmVyXCI7XG5pbXBvcnQgbG9jYWxlIGZyb20gXCIuL2xvY2FsZXMvZW5cIjtcblxuaW1wb3J0IHsgSWQsIElIYW5kbGVycywgU2VsZWN0aW9uRXZlbnRzIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBlbXB0eUxpc3RWaWV3LCBzZWxlY3RBbGxWaWV3LCB1bnNlbGVjdEFsbFZpZXcgfSBmcm9tIFwiLi9oZWxwZXJcIjtcbmltcG9ydCB7XG5cdENvbWJvYm94RXZlbnRzLFxuXHRDb21ib1N0YXRlLFxuXHRJQ29tYm9ib3gsXG5cdElDb21ib2JveENvbmZpZyxcblx0SUNvbWJvYm94RXZlbnRIYW5kbGVyc01hcCxcblx0U3RhdGUsXG59IGZyb20gXCIuL3R5cGVzXCI7XG5cbnR5cGUgVGVtcGxhdGVGbiA9IChjb3VudDogbnVtYmVyKSA9PiBzdHJpbmc7XG5mdW5jdGlvbiBpdGVtc0NvdW50VGVtcGxhdGUoY291bnQsIHRlbXBsYXRlRk46IGJvb2xlYW4gfCBUZW1wbGF0ZUZuKSB7XG5cdGlmICh0eXBlb2YgdGVtcGxhdGVGTiA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0cmV0dXJuIHRlbXBsYXRlRk4oY291bnQpO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBjb3VudCArIFwiIFwiICsgbG9jYWxlLnNlbGVjdGVkSXRlbXM7XG5cdH1cbn1cblxuY29uc3QgdGVtcGxhdGUgPSBpdGVtID0+IHtcblx0aWYgKGl0ZW0uaWNvbikge1xuXHRcdHJldHVybiBgPHNwYW4gY2xhc3M9XCIke2l0ZW0uaWNvbn0gZGh4X2NvbWJvYm94LW9wdGlvbnNfX2ljb25cIj48L3NwYW4+IDxzcGFuIGNsYXNzPVwiZGh4X2NvbWJvYm94LW9wdGlvbnNfX3ZhbHVlXCI+JHtpdGVtLnZhbHVlfTwvc3Bhbj5gO1xuXHR9XG5cdGlmIChpdGVtLnNyYykge1xuXHRcdHJldHVybiBgPGltZyBzcmM9XCIke2l0ZW0uc3JjfVwiIGNsYXNzPVwiZGh4X2NvbWJvYm94LW9wdGlvbnNfX2ltYWdlXCIgYWx0PSR7aXRlbS52YWx1ZX0+PC9pbWc+IDxzcGFuIGNsYXNzPVwiZGh4X2NvbWJvYm94LW9wdGlvbnNfX3ZhbHVlXCI+JHtpdGVtLnZhbHVlfTwvc3Bhbj5gO1xuXHR9XG5cdHJldHVybiBgPHNwYW4gY2xhc3M9XCJkaHhfY29tYm9ib3gtb3B0aW9uc19fdmFsdWVcIj4ke2l0ZW0udmFsdWV9PC9zcGFuPmA7XG59O1xuXG5leHBvcnQgY2xhc3MgQ29tYm9ib3ggZXh0ZW5kcyBWaWV3IGltcGxlbWVudHMgSUNvbWJvYm94IHtcblx0cHVibGljIGRhdGE6IERhdGFDb2xsZWN0aW9uO1xuXHRwdWJsaWMgY29uZmlnOiBJQ29tYm9ib3hDb25maWc7XG5cdHB1YmxpYyBldmVudHM6IElFdmVudFN5c3RlbTxcblx0XHREYXRhRXZlbnRzIHwgQ29tYm9ib3hFdmVudHMsXG5cdFx0SUNvbWJvYm94RXZlbnRIYW5kbGVyc01hcCB8IElEYXRhRXZlbnRzSGFuZGxlcnNNYXBcblx0Pjtcblx0cHVibGljIGxpc3Q6IExpc3Q7XG5cdHB1YmxpYyBwb3B1cDogUG9wdXA7XG5cblx0cHJvdGVjdGVkIF9oZWxwZXI6IFBvcHVwO1xuXG5cdHByaXZhdGUgX2tleUxpc3RlbmVyOiBLZXlMaXN0ZW5lcjtcblx0cHJvdGVjdGVkIF9sYXlvdXQ6IExheW91dDtcblx0cHJpdmF0ZSBfaXNQb3B1cENvbmZpcXVyZXRlZDogYm9vbGVhbjtcblxuXHRwcml2YXRlIF9zdGF0ZToge1xuXHRcdHZhbHVlOiBzdHJpbmc7XG5cdFx0aWdub3JlTmV4dDogYm9vbGVhbjtcblx0XHRjYW5EZWxldGU6IGJvb2xlYW47XG5cdFx0dW5zZWxlY3RBY3RpdmU6IGJvb2xlYW47XG5cdFx0Y3VycmVudFN0YXRlOiBDb21ib1N0YXRlO1xuXHR9O1xuXG5cdHByb3RlY3RlZCBfaGFuZGxlcnM6IElIYW5kbGVycztcblxuXHRjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCB8IHN0cmluZywgY29uZmlnOiBJQ29tYm9ib3hDb25maWcpIHtcblx0XHRzdXBlcihcblx0XHRcdGVsZW1lbnQsXG5cdFx0XHRleHRlbmQoXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0ZW1wbGF0ZSxcblx0XHRcdFx0XHRsaXN0SGVpZ2h0OiAyMjQsXG5cdFx0XHRcdFx0aXRlbUhlaWdodDogMzYsXG5cdFx0XHRcdFx0ZGlzYWJsZWQ6IGZhbHNlLFxuXHRcdFx0XHRcdHJlYWRPbmx5OiBmYWxzZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0Y29uZmlnXG5cdFx0XHQpXG5cdFx0KTtcblx0XHR0aGlzLmNvbmZpZy5pdGVtc0NvdW50ID0gdGhpcy5jb25maWcuaXRlbXNDb3VudCB8fCB0aGlzLmNvbmZpZy5zaG93SXRlbXNDb3VudDsgLy8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdHRoaXMuY29uZmlnLmhlbHBNZXNzYWdlID0gdGhpcy5jb25maWcuaGVscE1lc3NhZ2UgfHwgdGhpcy5jb25maWcuaGVscDsgLy8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdGlmICh0aGlzLmNvbmZpZy5jZWxsSGVpZ2h0ICYmIHRoaXMuY29uZmlnLml0ZW1IZWlnaHQgPT09IDM2KSB7XG5cdFx0XHR0aGlzLmNvbmZpZy5pdGVtSGVpZ2h0ID0gdGhpcy5jb25maWcuY2VsbEhlaWdodDsgLy8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdH1cblx0XHRpZiAodGhpcy5jb25maWcubGFiZWxJbmxpbmUpIHtcblx0XHRcdHRoaXMuY29uZmlnLmxhYmVsUG9zaXRpb24gPSBcImxlZnRcIjsgLy8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdH1cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmNvbmZpZy5kYXRhKSkge1xuXHRcdFx0dGhpcy5ldmVudHMgPSBuZXcgRXZlbnRTeXN0ZW08Q29tYm9ib3hFdmVudHM+KHRoaXMpO1xuXHRcdFx0dGhpcy5kYXRhID0gbmV3IERhdGFDb2xsZWN0aW9uKHt9KTtcblx0XHRcdHRoaXMuZGF0YS5wYXJzZSh0aGlzLmNvbmZpZy5kYXRhKTtcblx0XHR9IGVsc2UgaWYgKHRoaXMuY29uZmlnLmRhdGEpIHtcblx0XHRcdHRoaXMuZGF0YSA9IHRoaXMuY29uZmlnLmRhdGE7XG5cdFx0XHR0aGlzLmV2ZW50cyA9IG5ldyBFdmVudFN5c3RlbTxDb21ib2JveEV2ZW50cz4odGhpcyk7XG5cdFx0XHR0aGlzLmV2ZW50cy5jb250ZXh0ID0gdGhpcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5ldmVudHMgPSBuZXcgRXZlbnRTeXN0ZW08Q29tYm9ib3hFdmVudHM+KHRoaXMpO1xuXHRcdFx0dGhpcy5kYXRhID0gbmV3IERhdGFDb2xsZWN0aW9uKHt9KTtcblx0XHR9XG5cblx0XHR0aGlzLnBvcHVwID0gbmV3IFBvcHVwKCk7XG5cdFx0dGhpcy5wb3B1cC5ldmVudHMub24oUG9wdXBFdmVudHMuYWZ0ZXJTaG93LCAoKSA9PiB7XG5cdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5wb3B1cC5ldmVudHMub24oUG9wdXBFdmVudHMuYWZ0ZXJIaWRlLCAoKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pIHtcblx0XHRcdFx0dGhpcy5fc3RhdGUudmFsdWUgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdH0pO1xuXHRcdHRoaXMucG9wdXAuZXZlbnRzLm9uKFBvcHVwRXZlbnRzLmJlZm9yZUhpZGUsIGZyb21PdXRlckNsaWNrID0+IHtcblx0XHRcdGZyb21PdXRlckNsaWNrICYmIHRoaXMuX2hpZGVPcHRpb25zKCk7XG5cdFx0fSk7XG5cdFx0aWYgKHRoaXMuY29uZmlnLnJlYWRvbmx5IHx8IHRoaXMuY29uZmlnLnJlYWRPbmx5KSB7XG5cdFx0XHR0aGlzLmNvbmZpZy5yZWFkT25seSA9IHRoaXMuY29uZmlnLnJlYWRPbmx5IHx8IHRoaXMuY29uZmlnLnJlYWRvbmx5O1xuXHRcdFx0dGhpcy5fa2V5TGlzdGVuZXIgPSBuZXcgS2V5TGlzdGVuZXIoKTtcblx0XHR9XG5cdFx0dGhpcy5fc3RhdGUgPSB7XG5cdFx0XHR2YWx1ZTogXCJcIixcblx0XHRcdGlnbm9yZU5leHQ6IGZhbHNlLFxuXHRcdFx0Y2FuRGVsZXRlOiBmYWxzZSxcblx0XHRcdHVuc2VsZWN0QWN0aXZlOiBmYWxzZSxcblx0XHRcdGN1cnJlbnRTdGF0ZTogQ29tYm9TdGF0ZS5kZWZhdWx0LFxuXHRcdH07XG5cblx0XHR0aGlzLl9pbml0SGFuZGxlcnMoKTtcblx0XHR0aGlzLl9jcmVhdGVMYXlvdXQoKTtcblxuXHRcdGlmICh0aGlzLmNvbmZpZy52YWx1ZSkge1xuXHRcdFx0dGhpcy5fc2V0VmFsdWUodGhpcy5jb25maWcudmFsdWUsIHRydWUpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2luaXRFdmVudHMoKTtcblxuXHRcdGNvbnN0IHZub2RlID0gY3JlYXRlKHtcblx0XHRcdHJlbmRlcjogKCkgPT4gdGhpcy5fZHJhdygpLFxuXHRcdFx0aG9va3M6IHtcblx0XHRcdFx0ZGlkUmVkcmF3OiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYgKHRoaXMucG9wdXAuaXNWaXNpYmxlKCkpIHtcblx0XHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRcdHRoaXMuX2NvbmZpZ3VyZVBvcHVwKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHQvLyBjb25zdCBjb250YWluZXIgPSB0b05vZGUoZWxlbWVudCk7XG5cdFx0dGhpcy5tb3VudChlbGVtZW50LCB2bm9kZSk7XG5cdH1cblx0Zm9jdXMoKTogdm9pZCB8IGJvb2xlYW4ge1xuXHRcdGlmICh0aGlzLmNvbmZpZy5kaXNhYmxlZCkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0Y29uc3Qgcm9vdFZpZXcgPSB0aGlzLmdldFJvb3RWaWV3KCk7XG5cdFx0cm9vdFZpZXcucmVmcy5pbnB1dC5lbC5mb2N1cygpO1xuXHR9XG5cdGJsdXIoKTogdm9pZCB8IGJvb2xlYW4ge1xuXHRcdGlmICh0aGlzLmNvbmZpZy5kaXNhYmxlZCkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0Y29uc3Qgcm9vdFZpZXcgPSB0aGlzLmdldFJvb3RWaWV3KCk7XG5cdFx0cm9vdFZpZXcucmVmcy5pbnB1dC5lbC5ibHVyKCk7XG5cdFx0dGhpcy5wb3B1cC5oaWRlKCk7XG5cdH1cblx0ZW5hYmxlKCk6IHZvaWQge1xuXHRcdHRoaXMuY29uZmlnLmRpc2FibGVkID0gZmFsc2U7XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdGRpc2FibGUoKTogdm9pZCB7XG5cdFx0dGhpcy5jb25maWcuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRpc0Rpc2FibGVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmNvbmZpZy5kaXNhYmxlZDtcblx0fVxuXHRjbGVhcigpOiB2b2lkIHwgYm9vbGVhbiB7XG5cdFx0aWYgKHRoaXMuY29uZmlnLmRpc2FibGVkKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHRoaXMubGlzdC5zZWxlY3Rpb24ucmVtb3ZlKCk7XG5cdFx0dGhpcy5fc3RhdGUudmFsdWUgPSBcIlwiO1xuXHRcdHRoaXMuX2ZpbHRlcigpO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRnZXRWYWx1ZTxUIGV4dGVuZHMgYm9vbGVhbiA9IGZhbHNlPihhc0FycmF5PzogVCk6IFQgZXh0ZW5kcyB0cnVlID8gc3RyaW5nW10gOiBzdHJpbmcge1xuXHRcdGNvbnN0IGlkcyA9IHRoaXMubGlzdC5zZWxlY3Rpb24uZ2V0SWQoKTtcblx0XHRpZiAoYXNBcnJheSkge1xuXHRcdFx0cmV0dXJuIHdyYXBCb3goaWRzKSBhcyBhbnk7XG5cdFx0fVxuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KGlkcykgPyBpZHMuam9pbihcIixcIikgOiAoaWRzIGFzIGFueSk7XG5cdH1cblx0c2V0VmFsdWUoaWRzOiBJZFtdIHwgSWQpOiB2b2lkIHwgYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuX3NldFZhbHVlKGlkcyk7XG5cdH1cblx0ZGVzdHJ1Y3RvcigpOiB2b2lkIHtcblx0XHR0aGlzLnBvcHVwICYmIHRoaXMucG9wdXAuZGVzdHJ1Y3RvcigpO1xuXHRcdHRoaXMuZXZlbnRzICYmIHRoaXMuZXZlbnRzLmNsZWFyKCk7XG5cdFx0dGhpcy5saXN0ICYmIHRoaXMubGlzdC5kZXN0cnVjdG9yKCk7XG5cdFx0dGhpcy5faGVscGVyICYmIHRoaXMuX2hlbHBlci5kZXN0cnVjdG9yKCk7XG5cdFx0dGhpcy5fbGF5b3V0ICYmIHRoaXMuX2xheW91dC5kZXN0cnVjdG9yKCk7XG5cblx0XHR0aGlzLmNvbmZpZyA9IHRoaXMuZXZlbnRzID0gdGhpcy5saXN0ID0gdGhpcy5wb3B1cCA9IG51bGw7XG5cdFx0dGhpcy5faGVscGVyID0gdGhpcy5fa2V5TGlzdGVuZXIgPSB0aGlzLl9oYW5kbGVycyA9IHRoaXMuX3N0YXRlID0gdGhpcy5fdWlkID0gdGhpcy5faXNQb3B1cENvbmZpcXVyZXRlZCA9IG51bGw7XG5cdFx0dGhpcy51bm1vdW50KCk7XG5cdH1cblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRzZXRTdGF0ZShzdGF0ZTogU3RhdGUpIHtcblx0XHRzd2l0Y2ggKHN0YXRlKSB7XG5cdFx0XHRjYXNlIFwic3VjY2Vzc1wiOlxuXHRcdFx0XHR0aGlzLl9zdGF0ZS5jdXJyZW50U3RhdGUgPSBDb21ib1N0YXRlLnN1Y2Nlc3M7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImVycm9yXCI6XG5cdFx0XHRcdHRoaXMuX3N0YXRlLmN1cnJlbnRTdGF0ZSA9IENvbWJvU3RhdGUuZXJyb3I7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhpcy5fc3RhdGUuY3VycmVudFN0YXRlID0gQ29tYm9TdGF0ZS5kZWZhdWx0O1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdHByaXZhdGUgX3NldFZhbHVlKGlkczogSWQgfCBJZFtdLCBzaWxlbnQgPSBmYWxzZSk6IGJvb2xlYW4gfCB2b2lkIHtcblx0XHRpZiAodGhpcy5jb25maWcuZGlzYWJsZWQgfHwgIXRoaXMuX2V4c2lzdElkKGlkcykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dGhpcy5fZmlsdGVyKCk7XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbikge1xuXHRcdFx0dGhpcy5saXN0LnNlbGVjdGlvbi5yZW1vdmUoKTtcblx0XHRcdHRoaXMuX3N0YXRlLnZhbHVlID0gXCJcIjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY29uZmlnLm11bHRpc2VsZWN0aW9uKSB7XG5cdFx0XHRpZiAodHlwZW9mIGlkcyA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRpZHMgPSBpZHMuc3BsaXQoXCIsXCIpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHR5cGVvZiBpZHMgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0aWRzID0gW2lkc107XG5cdFx0XHR9XG5cdFx0XHRpZHMuZm9yRWFjaChpZCA9PiB7XG5cdFx0XHRcdHRoaXMubGlzdC5zZWxlY3Rpb24uYWRkKGlkLCBmYWxzZSwgZmFsc2UsIHNpbGVudCk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgaWQgPSB1bndyYXBCb3goaWRzKTtcblx0XHRcdHRoaXMubGlzdC5zZWxlY3Rpb24uYWRkKGlkLCBmYWxzZSwgZmFsc2UsIHNpbGVudCk7XG5cdFx0XHRjb25zdCBpdGVtID0gdGhpcy5kYXRhLmdldEl0ZW0oaWQpO1xuXHRcdFx0aWYgKGl0ZW0pIHtcblx0XHRcdFx0dGhpcy5fc3RhdGUudmFsdWUgPSB0aGlzLl9nZXRJdGVtVGV4dChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdHByb3RlY3RlZCBfY3JlYXRlTGF5b3V0KCkge1xuXHRcdGNvbnN0IGxpc3QgPSAodGhpcy5saXN0ID0gbmV3IExpc3QobnVsbCwge1xuXHRcdFx0dGVtcGxhdGU6IHRoaXMuY29uZmlnLnRlbXBsYXRlLFxuXHRcdFx0dmlydHVhbDogdGhpcy5jb25maWcudmlydHVhbCxcblx0XHRcdGtleU5hdmlnYXRpb246IGZhbHNlLFxuXHRcdFx0bXVsdGlzZWxlY3Rpb246IHRoaXMuY29uZmlnLm11bHRpc2VsZWN0aW9uLFxuXHRcdFx0aXRlbUhlaWdodDogdGhpcy5jb25maWcuaXRlbUhlaWdodCxcblx0XHRcdGhlaWdodDogdGhpcy5jb25maWcubGlzdEhlaWdodCxcblx0XHRcdGRhdGE6IHRoaXMuZGF0YSxcblx0XHR9KSk7XG5cblx0XHRjb25zdCBsYXlvdXQgPSAodGhpcy5fbGF5b3V0ID0gbmV3IExheW91dCh0aGlzLnBvcHVwLmdldENvbnRhaW5lcigpLCB7XG5cdFx0XHRjc3M6IFwiZGh4X2NvbWJvYm94LW9wdGlvbnMgZGh4X2NvbWJvYm94X19vcHRpb25zXCIsXG5cdFx0XHRyb3dzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZDogXCJzZWxlY3QtdW5zZWxlY3QtYWxsXCIsXG5cdFx0XHRcdFx0aGlkZGVuOiAhdGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24gfHwgIXRoaXMuY29uZmlnLnNlbGVjdEFsbEJ1dHRvbixcblx0XHRcdFx0fSxcblx0XHRcdFx0eyBpZDogXCJsaXN0XCIsIGhlaWdodDogXCJjb250ZW50XCIgfSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlkOiBcIm5vdC1mb3VuZFwiLFxuXHRcdFx0XHRcdGhpZGRlbjogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0XHRvbjoge1xuXHRcdFx0XHRjbGljazoge1xuXHRcdFx0XHRcdFwiLmRoeF9jb21ib2JveF9fYWN0aW9uLXNlbGVjdC1hbGxcIjogdGhpcy5faGFuZGxlcnMuc2VsZWN0QWxsLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9KSk7XG5cblx0XHRsYXlvdXQuZ2V0Q2VsbChcImxpc3RcIikuYXR0YWNoKGxpc3QpO1xuXHRcdGlmICh0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbiAmJiB0aGlzLmNvbmZpZy5zZWxlY3RBbGxCdXR0b24pIHtcblx0XHRcdGxheW91dC5nZXRDZWxsKFwic2VsZWN0LXVuc2VsZWN0LWFsbFwiKS5hdHRhY2goc2VsZWN0QWxsVmlldyk7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX2luaXRIYW5kbGVycygpIHtcblx0XHRpZiAodGhpcy5jb25maWcuaGVscE1lc3NhZ2UpIHtcblx0XHRcdHRoaXMuX2hlbHBlciA9IG5ldyBQb3B1cCh7XG5cdFx0XHRcdGNzczogXCJkaHhfdG9vbHRpcCBkaHhfdG9vbHRpcC0tZm9yY2VkIGRoeF90b29sdGlwLS1saWdodFwiLFxuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLl9oZWxwZXIuYXR0YWNoSFRNTCh0aGlzLmNvbmZpZy5oZWxwTWVzc2FnZSk7XG5cdFx0fVxuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0c2hvd0hlbHBlcjogZSA9PiB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0dGhpcy5faGVscGVyLnNob3coZS50YXJnZXQsIHtcblx0XHRcdFx0XHRtb2RlOiB0aGlzLmNvbmZpZy5sYWJlbFBvc2l0aW9uID09PSBcImxlZnRcIiA/IFwiYm90dG9tXCIgOiBcInJpZ2h0XCIsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblxuXHRcdFx0c2VsZWN0QWxsOiAoKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLl9zdGF0ZS51bnNlbGVjdEFjdGl2ZSkge1xuXHRcdFx0XHRcdHRoaXMubGlzdC5zZWxlY3Rpb24ucmVtb3ZlKCk7XG5cdFx0XHRcdFx0aWYgKHRoaXMuY29uZmlnLnNlbGVjdEFsbEJ1dHRvbikge1xuXHRcdFx0XHRcdFx0dGhpcy5fbGF5b3V0LmdldENlbGwoXCJzZWxlY3QtdW5zZWxlY3QtYWxsXCIpLmF0dGFjaChzZWxlY3RBbGxWaWV3KTtcblx0XHRcdFx0XHRcdHRoaXMuX3N0YXRlLnVuc2VsZWN0QWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuZGF0YS5maWx0ZXIoKTtcblx0XHRcdFx0XHR0aGlzLmxpc3Quc2VsZWN0aW9uLmFkZCgpO1xuXHRcdFx0XHRcdGlmICh0aGlzLmNvbmZpZy5zZWxlY3RBbGxCdXR0b24pIHtcblx0XHRcdFx0XHRcdHRoaXMuX2xheW91dC5nZXRDZWxsKFwic2VsZWN0LXVuc2VsZWN0LWFsbFwiKS5hdHRhY2godW5zZWxlY3RBbGxWaWV3KTtcblx0XHRcdFx0XHRcdHRoaXMuX3N0YXRlLnVuc2VsZWN0QWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fY2hhbmdlUG9wdXBQb3NpdGlvbigpO1xuXHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHR9LFxuXHRcdFx0b25rZXlkb3duOiAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdFx0XHRpZiAoZS5rZXkgPT09IFwiVGFiXCIgJiYgdGhpcy5wb3B1cC5pc1Zpc2libGUoKSkge1xuXHRcdFx0XHRcdHRoaXMuX2hpZGVPcHRpb25zKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKCF0aGlzLnBvcHVwLmlzVmlzaWJsZSgpICYmIGUud2hpY2ggPT09IEtFWV9DT0RFUy5ET1dOX0FSUk9XKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zaG93T3B0aW9ucygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5wb3B1cC5pc1Zpc2libGUoKSAmJiBlLndoaWNoID09PSBLRVlfQ09ERVMuUklHSFRfQVJST1cpIHtcblx0XHRcdFx0XHRcdGlmICh0aGlzLmNvbmZpZy5yZWFkT25seSAmJiAhdGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5saXN0Lm1vdmVGb2N1cyhNT1ZFX0RPV04pO1xuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLnBvcHVwLmlzVmlzaWJsZSgpICYmIGUud2hpY2ggPT09IEtFWV9DT0RFUy5MRUZUX0FSUk9XKSB7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5jb25maWcucmVhZE9ubHkgJiYgIXRoaXMuY29uZmlnLm11bHRpc2VsZWN0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMubGlzdC5tb3ZlRm9jdXMoTU9WRV9VUCk7XG5cdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMucG9wdXAuaXNWaXNpYmxlKCkgJiYgZS53aGljaCA9PT0gS0VZX0NPREVTLkRPV05fQVJST1cpIHtcblx0XHRcdFx0XHRcdHRoaXMubGlzdC5tb3ZlRm9jdXMoTU9WRV9ET1dOKTtcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMucG9wdXAuaXNWaXNpYmxlKCkgJiYgZS53aGljaCA9PT0gS0VZX0NPREVTLlVQX0FSUk9XKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmxpc3QubW92ZUZvY3VzKE1PVkVfVVApO1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5wb3B1cC5pc1Zpc2libGUoKSAmJiBlLndoaWNoID09PSBLRVlfQ09ERVMuRVNDKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9oaWRlT3B0aW9ucygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5wb3B1cC5pc1Zpc2libGUoKSAmJiBlLndoaWNoID09PSBLRVlfQ09ERVMuRU5URVIpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0VmFsdWUodGhpcy5saXN0LmdldEZvY3VzKCkpO1xuXHRcdFx0XHRcdFx0aWYgKCF0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbikgdGhpcy5faGlkZU9wdGlvbnMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShDb21ib2JveEV2ZW50cy5rZXlkb3duLCBbZSwgdGhpcy5wb3B1cC5pc1Zpc2libGUoKSAmJiB0aGlzLmxpc3QuZ2V0Rm9jdXMoKV0pO1xuXHRcdFx0fSxcblx0XHRcdG9ua2V5dXA6IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmICghdGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24gfHwgdGhpcy5jb25maWcuaXRlbXNDb3VudCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5fc3RhdGUuaWdub3JlTmV4dCkge1xuXHRcdFx0XHRcdHRoaXMuX3N0YXRlLmlnbm9yZU5leHQgPSBmYWxzZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdGUud2hpY2ggPT09IEtFWV9DT0RFUy5CQUNLU1BBQ0UgJiZcblx0XHRcdFx0XHQhdGhpcy5fc3RhdGUudmFsdWUgJiZcblx0XHRcdFx0XHR0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbiAmJlxuXHRcdFx0XHRcdCh0aGlzLmxpc3Quc2VsZWN0aW9uLmdldElkKCkgYXMgc3RyaW5nW10pLmxlbmd0aFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjb25zdCBzZWxlY3RlZCA9IHRoaXMubGlzdC5zZWxlY3Rpb24uZ2V0SWQoKSBhcyBzdHJpbmdbXTtcblx0XHRcdFx0XHRjb25zdCBpZCA9IHNlbGVjdGVkW3NlbGVjdGVkLmxlbmd0aCAtIDFdO1xuXHRcdFx0XHRcdHRoaXMubGlzdC5zZWxlY3Rpb24ucmVtb3ZlKGlkKTtcblx0XHRcdFx0XHR0aGlzLl9jaGFuZ2VQb3B1cFBvc2l0aW9uKCk7XG5cblx0XHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRvbmlucHV0OiAoZTogRXZlbnQpID0+IHtcblx0XHRcdFx0aWYgKHRoaXMuY29uZmlnLmRpc2FibGVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IGlucHV0ID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBpbnB1dC52YWx1ZTtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShDb21ib2JveEV2ZW50cy5pbnB1dCwgW3ZhbHVlXSk7XG5cblx0XHRcdFx0dGhpcy5fc3RhdGUudmFsdWUgPSB2YWx1ZTtcblx0XHRcdFx0dGhpcy5fZmlsdGVyKCk7XG5cblx0XHRcdFx0aWYgKCF2YWx1ZS5sZW5ndGgpIHtcblx0XHRcdFx0XHR0aGlzLl9zdGF0ZS5pZ25vcmVOZXh0ID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLl9zdGF0ZS5jYW5EZWxldGUgPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX3N0YXRlLmNhbkRlbGV0ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCF0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbikge1xuXHRcdFx0XHRcdHRoaXMubGlzdC5zZWxlY3Rpb24ucmVtb3ZlKCk7XG5cdFx0XHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCF0aGlzLnBvcHVwLmlzVmlzaWJsZSgpKSB7XG5cdFx0XHRcdFx0dGhpcy5fc2hvd09wdGlvbnMoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl91cGRhdGVQb3B1cCgpO1xuXHRcdFx0fSxcblx0XHRcdG9uaW5wdXRjbGljazogKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0aWYgKHRoaXMuY29uZmlnLmRpc2FibGVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0aWYgKChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X2NvbWJvYm94X19hY3Rpb24tcmVtb3ZlXCIpKSB7XG5cdFx0XHRcdFx0Y29uc3QgaWQgPSBsb2NhdGUoZSk7XG5cdFx0XHRcdFx0aWYgKCFpZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLmxpc3Quc2VsZWN0aW9uLnJlbW92ZShpZCk7XG5cdFx0XHRcdFx0dGhpcy5fY2hhbmdlUG9wdXBQb3NpdGlvbigpO1xuXHRcdFx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X2NvbWJvYm94X19hY3Rpb24tY2xlYXItYWxsXCIpKSB7XG5cdFx0XHRcdFx0KHRoaXMubGlzdC5zZWxlY3Rpb24uZ2V0SWQoKSBhcyBzdHJpbmdbXSkuZm9yRWFjaChpZCA9PiB0aGlzLmxpc3Quc2VsZWN0aW9uLnJlbW92ZShpZCkpO1xuXHRcdFx0XHRcdGlmICh0aGlzLmNvbmZpZy5zZWxlY3RBbGxCdXR0b24gJiYgdGhpcy5fc3RhdGUudW5zZWxlY3RBY3RpdmUpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2xheW91dC5nZXRDZWxsKFwic2VsZWN0LXVuc2VsZWN0LWFsbFwiKS5hdHRhY2goc2VsZWN0QWxsVmlldyk7XG5cdFx0XHRcdFx0XHR0aGlzLl9zdGF0ZS51bnNlbGVjdEFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0aWYgKCF0aGlzLnBvcHVwLmlzVmlzaWJsZSgpKSB7XG5cdFx0XHRcdFx0dGhpcy5fc2hvd09wdGlvbnMoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0fSxcblx0XHRcdHRvZ2dsZUljb246ICgpID0+IHtcblx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRpZiAodGhpcy5wb3B1cC5pc1Zpc2libGUoKSkge1xuXHRcdFx0XHRcdHRoaXMuX2hpZGVPcHRpb25zKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fc2hvd09wdGlvbnMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG9uZm9jdXM6ICgpID0+IHRoaXMuZXZlbnRzPy5maXJlKENvbWJvYm94RXZlbnRzLmZvY3VzLCBbXSksXG5cdFx0XHRvbmJsdXI6ICgpID0+IHRoaXMuZXZlbnRzPy5maXJlKENvbWJvYm94RXZlbnRzLmJsdXIsIFtdKSxcblx0XHR9O1xuXHR9XG5cdHByaXZhdGUgX2luaXRFdmVudHMoKSB7XG5cdFx0dGhpcy5kYXRhLmV2ZW50cy5vbihEYXRhRXZlbnRzLmxvYWQsICgpID0+IHtcblx0XHRcdGlmICh0aGlzLmNvbmZpZy52YWx1ZSkge1xuXHRcdFx0XHR0aGlzLl9zZXRWYWx1ZSh0aGlzLmNvbmZpZy52YWx1ZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dGhpcy5saXN0LmV2ZW50cy5vbihMaXN0RXZlbnRzLmNsaWNrLCAoKSA9PiB7XG5cdFx0XHRpZiAoIXRoaXMuY29uZmlnLm11bHRpc2VsZWN0aW9uKSB7XG5cdFx0XHRcdHRoaXMuX2hpZGVPcHRpb25zKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9jaGFuZ2VQb3B1cFBvc2l0aW9uKCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5saXN0LnNlbGVjdGlvbi5ldmVudHMub24oU2VsZWN0aW9uRXZlbnRzLmFmdGVyU2VsZWN0LCAoKSA9PiB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pO1xuXHRcdFx0dGhpcy5ldmVudHMuZmlyZShDb21ib2JveEV2ZW50cy5jaGFuZ2UsIFt2YWx1ZV0pO1xuXHRcdFx0dGhpcy5fdXBkYXRlU2VsZWN0ZWRJdGVtKHZhbHVlKTtcblx0XHR9KTtcblx0XHR0aGlzLmxpc3Quc2VsZWN0aW9uLmV2ZW50cy5vbihTZWxlY3Rpb25FdmVudHMuYWZ0ZXJVblNlbGVjdCwgKCkgPT4ge1xuXHRcdFx0Y29uc3QgbXVsdGkgPSB0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbjtcblx0XHRcdGlmICh0aGlzLmNvbmZpZy5yZWFkT25seSAmJiAhbXVsdGkpIHJldHVybjtcblxuXHRcdFx0Y29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlKG11bHRpKTtcblx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ29tYm9ib3hFdmVudHMuY2hhbmdlLCBbdmFsdWVdKTtcblx0XHRcdGlmIChtdWx0aSkgdGhpcy5fdXBkYXRlU2VsZWN0ZWRJdGVtKHZhbHVlKTtcblx0XHR9KTtcblx0XHR0aGlzLnBvcHVwLmV2ZW50cy5vbihQb3B1cEV2ZW50cy5iZWZvcmVTaG93LCAoKSA9PiB7XG5cdFx0XHRpZiAoIXRoaXMucG9wdXAuaXNWaXNpYmxlKCkgJiYgIXRoaXMuX2lzUG9wdXBDb25maXF1cmV0ZWQpIHtcblx0XHRcdFx0dGhpcy5fY29uZmlndXJlUG9wdXAoKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlmICh0aGlzLmNvbmZpZy5yZWFkT25seSkge1xuXHRcdFx0dGhpcy5wb3B1cC5ldmVudHMub24oUG9wdXBFdmVudHMuYWZ0ZXJTaG93LCAoKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLl9zdGF0ZS52YWx1ZSkge1xuXHRcdFx0XHRcdGNvbnN0IGlkID0gdGhpcy5saXN0LnNlbGVjdGlvbi5nZXRJZCgpO1xuXHRcdFx0XHRcdHRoaXMubGlzdC5zZXRGb2N1cyhpZCBhcyBzdHJpbmcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMubGlzdC5zZXRGb2N1cyh0aGlzLmRhdGEuZ2V0SWQoMCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2tleUxpc3RlbmVyLnN0YXJ0TmV3TGlzdGVuKHZhbCA9PiB0aGlzLl9maW5kQmVzdCh2YWwpKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9zaG93T3B0aW9ucygpIHtcblx0XHRpZiAoIXRoaXMuZXZlbnRzLmZpcmUoQ29tYm9ib3hFdmVudHMuYmVmb3JlT3BlbikpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX3N0YXRlLnZhbHVlLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5fc3RhdGUuY2FuRGVsZXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0dGhpcy5fZmlsdGVyKCk7XG5cdFx0aWYgKHRoaXMuX2NvbmZpZ3VyZVBvcHVwKCkpIHtcblx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoQ29tYm9ib3hFdmVudHMub3Blbik7XG5cdFx0XHR0aGlzLmV2ZW50cy5maXJlKENvbWJvYm94RXZlbnRzLmFmdGVyT3Blbik7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX2NvbmZpZ3VyZVBvcHVwKCkge1xuXHRcdHRoaXMuX2lzUG9wdXBDb25maXF1cmV0ZWQgPSB0cnVlO1xuXHRcdGNvbnN0IHJvb3RWaWV3ID0gdGhpcy5nZXRSb290VmlldygpO1xuXHRcdGlmICghcm9vdFZpZXcgfHwgIXJvb3RWaWV3LnJlZnMgfHwgIXJvb3RWaWV3LnJlZnMuaG9sZGVyKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5wb3B1cC5pc1Zpc2libGUoKSkge1xuXHRcdFx0dGhpcy5fdXBkYXRlUG9wdXAoKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cHJpdmF0ZSBfaGlkZU9wdGlvbnMoKSB7XG5cdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKENvbWJvYm94RXZlbnRzLmJlZm9yZUNsb3NlKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5jb25maWcucmVhZE9ubHkpIHtcblx0XHRcdHRoaXMuX2tleUxpc3RlbmVyLmVuZExpc3RlbigpO1xuXHRcdH1cblx0XHR0aGlzLmxpc3Quc2V0Rm9jdXModGhpcy5kYXRhLmdldElkKDApKTtcblx0XHRpZiAoIXRoaXMuY29uZmlnLm11bHRpc2VsZWN0aW9uICYmICF0aGlzLmNvbmZpZy5yZWFkT25seSAmJiAhdGhpcy5saXN0LnNlbGVjdGlvbi5jb250YWlucygpKSB7XG5cdFx0XHR0aGlzLl9zdGF0ZS52YWx1ZSA9IFwiXCI7XG5cdFx0fVxuXHRcdGF3YWl0UmVkcmF3KCkudGhlbigoKSA9PiB0aGlzLnBvcHVwLmlzVmlzaWJsZSgpICYmIHRoaXMucG9wdXAuaGlkZSgpKTtcblx0XHR0aGlzLmV2ZW50cy5maXJlKENvbWJvYm94RXZlbnRzLmFmdGVyQ2xvc2UpO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoQ29tYm9ib3hFdmVudHMuY2xvc2UpOyAvLyBUT0RPOiByZW1vdmUgc3VpdGVfNy4wXG5cdFx0dGhpcy5fZmlsdGVyKCk7XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdHByaXZhdGUgX2ZpbHRlcigpIHtcblx0XHRpZiAodGhpcy5jb25maWcucmVhZE9ubHkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5kYXRhLmZpbHRlcihpdGVtID0+XG5cdFx0XHR0aGlzLmNvbmZpZy5maWx0ZXJcblx0XHRcdFx0PyB0aGlzLmNvbmZpZy5maWx0ZXIoaXRlbSwgdGhpcy5fc3RhdGUudmFsdWUpXG5cdFx0XHRcdDogaXNFcXVhbFN0cmluZyh0aGlzLl9zdGF0ZS52YWx1ZSwgdGhpcy5fZ2V0SXRlbVRleHQoaXRlbSkpXG5cdFx0KTtcblx0XHRpZiAodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pIHtcblx0XHRcdHRoaXMubGlzdC5zZXRGb2N1cyh0aGlzLmRhdGEuZ2V0SWQoMCkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBpbmRleCA9IHRoaXMuZGF0YS5nZXRJbmRleCh0aGlzLmxpc3Quc2VsZWN0aW9uLmdldElkKCkgYXMgSWQpO1xuXHRcdFx0dGhpcy5saXN0LnNldEZvY3VzKHRoaXMuZGF0YS5nZXRJZChpbmRleCA+IC0xID8gaW5kZXggOiAwKSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmRhdGEuZ2V0TGVuZ3RoKCkgPT09IDApIHtcblx0XHRcdGlmICh0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbiAmJiB0aGlzLmNvbmZpZy5zZWxlY3RBbGxCdXR0b24pIHtcblx0XHRcdFx0dGhpcy5fbGF5b3V0LmdldENlbGwoXCJzZWxlY3QtdW5zZWxlY3QtYWxsXCIpLmhpZGUoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2xheW91dC5nZXRDZWxsKFwibGlzdFwiKS5oaWRlKCk7XG5cdFx0XHR0aGlzLl9sYXlvdXQuZ2V0Q2VsbChcIm5vdC1mb3VuZFwiKS5hdHRhY2goZW1wdHlMaXN0Vmlldyk7XG5cdFx0XHR0aGlzLl9sYXlvdXQuZ2V0Q2VsbChcIm5vdC1mb3VuZFwiKS5zaG93KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbiAmJiB0aGlzLmNvbmZpZy5zZWxlY3RBbGxCdXR0b24pIHtcblx0XHRcdFx0dGhpcy5fbGF5b3V0LmdldENlbGwoXCJzZWxlY3QtdW5zZWxlY3QtYWxsXCIpLnNob3coKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9sYXlvdXQuZ2V0Q2VsbChcIm5vdC1mb3VuZFwiKS5pc1Zpc2libGUoKSkge1xuXHRcdFx0XHR0aGlzLl9sYXlvdXQuZ2V0Q2VsbChcImxpc3RcIikuc2hvdygpO1xuXHRcdFx0XHR0aGlzLl9sYXlvdXQuZ2V0Q2VsbChcIm5vdC1mb3VuZFwiKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX2ZpbmRCZXN0KHZhbHVlOiBzdHJpbmcpIHtcblx0XHRjb25zdCBiZXN0ID0gdGhpcy5kYXRhLmZpbmQoaXRlbSA9PiBpc0VxdWFsU3RyaW5nKHZhbHVlLCB0aGlzLl9nZXRJdGVtVGV4dChpdGVtKSkpO1xuXHRcdGlmICghYmVzdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmxpc3Quc2VsZWN0aW9uLmdldElkKCkgPT09IGJlc3QuaWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmxpc3Quc2V0Rm9jdXMoYmVzdC5pZCk7XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdHByaXZhdGUgX2V4c2lzdElkKGlkOiBJZCB8IElkW10pIHtcblx0XHRpZiAoaWQgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0cmV0dXJuIGlkLmV2ZXJ5KGkgPT4gdGhpcy5kYXRhLmV4aXN0cyhpKSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmRhdGEuZXhpc3RzKGlkKTtcblx0fVxuXHRwcml2YXRlIF9kcmF3KCkge1xuXHRcdGlmICghdGhpcy5jb25maWcpIHJldHVybiBlbChcImRpdlwiKTtcblx0XHRjb25zdCB7XG5cdFx0XHRtdWx0aXNlbGVjdGlvbixcblx0XHRcdGxhYmVsUG9zaXRpb24sXG5cdFx0XHRoaWRkZW5MYWJlbCxcblx0XHRcdHJlcXVpcmVkLFxuXHRcdFx0ZGlzYWJsZWQsXG5cdFx0XHRjc3MsXG5cdFx0XHRoZWxwTWVzc2FnZSxcblx0XHRcdHJlYWRPbmx5LFxuXHRcdFx0cGxhY2Vob2xkZXIsXG5cdFx0fSA9IHRoaXMuY29uZmlnO1xuXHRcdGNvbnN0IGl0ZW0gPSBtdWx0aXNlbGVjdGlvbiA/IG51bGwgOiB0aGlzLmRhdGEuZ2V0SXRlbSh0aGlzLmxpc3Quc2VsZWN0aW9uLmdldElkKCkgYXMgSWQpO1xuXHRcdGNvbnN0IHNob3dQbGFjZWhvbGRlciA9XG5cdFx0XHQhdGhpcy5saXN0LnNlbGVjdGlvbi5nZXRJZCgpIHx8XG5cdFx0XHQodHlwZW9mIHRoaXMubGlzdC5zZWxlY3Rpb24uZ2V0SWQoKSA9PT0gXCJvYmplY3RcIiAmJlxuXHRcdFx0XHQodGhpcy5saXN0LnNlbGVjdGlvbi5nZXRJZCgpIGFzIElkW10pLmxlbmd0aCA9PT0gMCk7XG5cdFx0Y29uc3QgbGFiZWxTdHlsZSA9IGdldExhYmVsU3R5bGUodGhpcy5jb25maWcpO1xuXHRcdHJldHVybiBlbChcblx0XHRcdFwiZGl2XCIsXG5cdFx0XHR7XG5cdFx0XHRcdGRoeF93aWRnZXRfaWQ6IHRoaXMuX3VpZCxcblx0XHRcdFx0b25rZXlkb3duOiB0aGlzLl9oYW5kbGVycy5vbmtleWRvd24sXG5cdFx0XHRcdG9ua2V5dXA6IHRoaXMuX2hhbmRsZXJzLm9ua2V5dXAsXG5cdFx0XHRcdGNsYXNzOlxuXHRcdFx0XHRcdFwiZGh4X3dpZGdldCBkaHhfY29tYm9ib3hcIiArXG5cdFx0XHRcdFx0KGxhYmVsUG9zaXRpb24gPT09IFwibGVmdFwiID8gXCIgZGh4X2NvbWJvYm94LS1sYWJlbC1pbmxpbmVcIiA6IFwiXCIpICtcblx0XHRcdFx0XHQoaGlkZGVuTGFiZWwgPyBcIiBkaHhfY29tYm9ib3gtLXNyX29ubHlcIiA6IFwiXCIpICtcblx0XHRcdFx0XHQocmVxdWlyZWQgPyBcIiBkaHhfY29tYm9ib3gtLXJlcXVpcmVkXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0KGRpc2FibGVkID8gXCIgZGh4X2NvbWJvYm94LS1kaXNhYmxlZFwiIDogXCJcIikgK1xuXHRcdFx0XHRcdChjc3MgPyBgICR7Y3NzfWAgOiBcIlwiKSxcblx0XHRcdH0sXG5cdFx0XHRbXG5cdFx0XHRcdGxhYmVsU3R5bGVcblx0XHRcdFx0XHQ/IGVsKFxuXHRcdFx0XHRcdFx0XHRcImxhYmVsLmRoeF9sYWJlbC5kaHhfY29tYm9ib3hfX2xhYmVsXCIsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRzdHlsZTogbGFiZWxTdHlsZS5zdHlsZSxcblx0XHRcdFx0XHRcdFx0XHRjbGFzczogaGVscE1lc3NhZ2UgPyBcImRoeF9sYWJlbC0td2l0aC1oZWxwXCIgOiBcIlwiLFxuXHRcdFx0XHRcdFx0XHRcdG9uY2xpY2s6IHRoaXMuX2hhbmRsZXJzLm9uaW5wdXRjbGljayxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0aGVscE1lc3NhZ2Vcblx0XHRcdFx0XHRcdFx0XHQ/IFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KGxhYmVsU3R5bGUubGFiZWwgfHwgcmVxdWlyZWQpICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZWwoXCJzcGFuLmRoeF9sYWJlbF9faG9sZGVyXCIsIGxhYmVsU3R5bGUubGFiZWwpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbChcInNwYW4uZGh4X2xhYmVsLWhlbHAuZHhpLmR4aS1oZWxwLWNpcmNsZS1vdXRsaW5lXCIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0YWJpbmRleDogXCIwXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cm9sZTogXCJidXR0b25cIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvbmNsaWNrOiB0aGlzLl9oYW5kbGVycy5zaG93SGVscGVyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlkOiBgZGh4X2xhYmVsX19oZWxwXyR7dGhpcy5fdWlkfWAsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XHRcdCAgXVxuXHRcdFx0XHRcdFx0XHRcdDogbGFiZWxTdHlsZS5sYWJlbFxuXHRcdFx0XHRcdCAgKVxuXHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XCJkaXYuZGh4X2NvbWJvYm94LWlucHV0LWJveFwiICtcblx0XHRcdFx0XHRcdC8vICh0aGlzLnBvcHVwLmlzVmlzaWJsZSgpID8gXCIuZGh4X2NvbWJvYm94LWlucHV0LWJveFwiIDogXCJcIikgK1xuXHRcdFx0XHRcdFx0KGRpc2FibGVkID8gXCIuZGh4X2NvbWJvYm94LWlucHV0LWJveC0tZGlzYWJsZWRcIiA6IFwiXCIpICtcblx0XHRcdFx0XHRcdChyZWFkT25seSA/IFwiLmRoeF9jb21ib2JveC1pbnB1dC1ib3gtLXJlYWRvbmx5XCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0XHQodGhpcy5fc3RhdGUuY3VycmVudFN0YXRlID09PSBDb21ib1N0YXRlLmVycm9yXG5cdFx0XHRcdFx0XHRcdD8gXCIuZGh4X2NvbWJvYm94LWlucHV0LWJveC0tc3RhdGVfZXJyb3JcIlxuXHRcdFx0XHRcdFx0XHQ6IFwiXCIpICtcblx0XHRcdFx0XHRcdCh0aGlzLl9zdGF0ZS5jdXJyZW50U3RhdGUgPT09IENvbWJvU3RhdGUuc3VjY2Vzc1xuXHRcdFx0XHRcdFx0XHQ/IFwiLmRoeF9jb21ib2JveC1pbnB1dC1ib3gtLXN0YXRlX3N1Y2Nlc3NcIlxuXHRcdFx0XHRcdFx0XHQ6IFwiXCIpLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdF9yZWY6IFwiaG9sZGVyXCIsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFx0XCJkaXYuZGh4X2NvbWJvYm94LWlucHV0X19pY29uXCIsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRvbmNsaWNrOiB0aGlzLl9oYW5kbGVycy50b2dnbGVJY29uLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcInNwYW5cIiArXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCh0aGlzLnBvcHVwLmlzVmlzaWJsZSgpID8gXCIuZHhpLmR4aS1tZW51LXVwXCIgOiBcIi5keGkuZHhpLW1lbnUtZG93blwiKVxuXHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFx0XCJkaXYuZGh4X2NvbWJvYm94LWlucHV0LWxpc3Qtd3JhcHBlclwiLFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0b25jbGljazogdGhpcy5faGFuZGxlcnMub25pbnB1dGNsaWNrLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0ZWwoXCJ1bC5kaHhfY29tYm9ib3gtaW5wdXQtbGlzdFwiLCBbXG5cdFx0XHRcdFx0XHRcdFx0XHQuLi50aGlzLl9kcmF3U2VsZWN0ZWRJdGVtcygpLCAvLyBzZWxlY3RlZCBpdGVtcyBmb3IgbXVsdGlzZWxlY3Rpb24gbW9kZVxuXHRcdFx0XHRcdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFwibGkuZGh4X2NvbWJvYm94LWlucHV0LWxpc3RfX2l0ZW0uZGh4X2NvbWJvYm94LWlucHV0LWxpc3RfX2l0ZW0tLWlucHV0XCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlbChcImlucHV0LmRoeF9jb21ib2JveC1pbnB1dFwiLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvbmlucHV0OiB0aGlzLl9oYW5kbGVycy5vbmlucHV0LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b25mb2N1czogdGhpcy5faGFuZGxlcnMub25mb2N1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9uYmx1cjogdGhpcy5faGFuZGxlcnMub25ibHVyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0X3JlZjogXCJpbnB1dFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0X2tleTogdGhpcy5fdWlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwbGFjZUhvbGRlcjpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2hvd1BsYWNlaG9sZGVyICYmIHBsYWNlaG9sZGVyID8gcGxhY2Vob2xkZXIgOiB1bmRlZmluZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVhZE9ubHkgJiYgaXRlbVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdD8gdGhpcy5fZ2V0SXRlbVRleHQoaXRlbSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ6IHRoaXMuX3N0YXRlLnZhbHVlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVhZE9ubHk6IHJlYWRPbmx5IHx8IGRpc2FibGVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVxdWlyZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcImFyaWEtbGFiZWxcIjogcmVhZE9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PyBcIlNlbGVjdCB2YWx1ZVwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDogXCJUeXBlIG9yIHNlbGVjdCB2YWx1ZVwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGhlbHBNZXNzYWdlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdD8gYGRoeF9sYWJlbF9faGVscF8ke3RoaXMuX3VpZH1gXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdF0pLFxuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KSxcblx0XHRcdF1cblx0XHQpO1xuXHR9XG5cdHByaXZhdGUgX2RyYXdTZWxlY3RlZEl0ZW1zKCkge1xuXHRcdGlmICghdGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pIHtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY29uZmlnLml0ZW1zQ291bnQpIHtcblx0XHRcdGNvbnN0IGNvdW50ID0gKHRoaXMubGlzdC5zZWxlY3Rpb24uZ2V0SWQoKSBhcyBJZFtdKS5sZW5ndGg7XG5cdFx0XHRyZXR1cm4gY291bnRcblx0XHRcdFx0PyBbXG5cdFx0XHRcdFx0XHRlbChcImxpLmRoeF9jb21ib2JveC1pbnB1dC1saXN0X19pdGVtLmRoeF9jb21ib2JveC10YWdcIiwgW1xuXHRcdFx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFx0XHRcInNwYW4uZGh4X2NvbWJvYm94LXRhZ19fdmFsdWVcIixcblx0XHRcdFx0XHRcdFx0XHRpdGVtc0NvdW50VGVtcGxhdGUoY291bnQsIHRoaXMuY29uZmlnLml0ZW1zQ291bnQpXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XHRcdFwiYnV0dG9uLmRoeF9idXR0b24uZGh4X2NvbWJvYm94LXRhZ19fYWN0aW9uLmRoeF9jb21ib2JveF9fYWN0aW9uLWNsZWFyLWFsbFwiLFxuXHRcdFx0XHRcdFx0XHRcdHsgXCJhcmlhLWxhYmVsXCI6IFwiY2xlYXIgYWxsXCIgfSxcblx0XHRcdFx0XHRcdFx0XHRbZWwoXCJzcGFuLmRoeF9idXR0b25fX2ljb24uZHhpLmR4aS1jbG9zZS1jaXJjbGVcIildXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRdKSxcblx0XHRcdFx0ICBdXG5cdFx0XHRcdDogW107XG5cdFx0fVxuXHRcdHJldHVybiAodGhpcy5saXN0LnNlbGVjdGlvbi5nZXRJZCgpIGFzIHN0cmluZ1tdKS5tYXAoaWQgPT4ge1xuXHRcdFx0Y29uc3QgaXRlbSA9IHRoaXMuZGF0YS5nZXRJdGVtKGlkKTtcblx0XHRcdGlmICghaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBlbChcImxpLmRoeF9jb21ib2JveC1pbnB1dC1saXN0X19pdGVtLmRoeF9jb21ib2JveC10YWdcIiwgeyBkaHhfaWQ6IGlkIH0sIFtcblx0XHRcdFx0dGhpcy5fZHJhd0ltYWdlT3JJY29uKGl0ZW0pLFxuXHRcdFx0XHRlbChcInNwYW4uZGh4X2NvbWJvYm94LXRhZ19fdmFsdWVcIiwgdGhpcy5fZ2V0SXRlbVRleHQoaXRlbSkpLFxuXHRcdFx0XHRlbChcblx0XHRcdFx0XHRcImJ1dHRvbi5kaHhfYnV0dG9uLmRoeF9idXR0b24tLWljb24uZGh4X2NvbWJvYm94LXRhZ19fYWN0aW9uLmRoeF9jb21ib2JveF9fYWN0aW9uLXJlbW92ZVwiLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdFx0XHRcImFyaWEtbGFiZWxcIjogXCJyZW1vdmVcIixcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFtlbChcInNwYW4uZGh4X2J1dHRvbl9faWNvbi5keGkuZHhpLWNsb3NlLWNpcmNsZVwiKV1cblx0XHRcdFx0KSxcblx0XHRcdF0pO1xuXHRcdH0pO1xuXHR9XG5cdHByaXZhdGUgX2RyYXdJbWFnZU9ySWNvbihpdGVtOiBhbnkpIHtcblx0XHRpZiAoaXRlbS5zcmMpIHtcblx0XHRcdHJldHVybiBlbChcImltZy5kaHhfY29tYm9ib3gtdGFnX19pbWFnZVwiLCB7IHNyYzogaXRlbS5zcmMsIGFsdDogXCJcIiB9KTtcblx0XHR9IGVsc2UgaWYgKGl0ZW0uaWNvbikge1xuXHRcdFx0cmV0dXJuIGVsKFwic3Bhbi5kaHhfY29tYm9ib3gtdGFnX19pY29uXCIsIHsgY2xhc3M6IGl0ZW0uaWNvbiB9KTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0cHJpdmF0ZSBfZ2V0SXRlbVRleHQoaXRlbTogYW55KSB7XG5cdFx0aWYgKCFpdGVtKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIGl0ZW0udmFsdWU7XG5cdH1cblx0cHJpdmF0ZSBfdXBkYXRlU2VsZWN0ZWRJdGVtKGlkOiBJZCB8IElkW10pIHtcblx0XHRpZiAodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pIHtcblx0XHRcdGlmIChcblx0XHRcdFx0dGhpcy5jb25maWcuc2VsZWN0QWxsQnV0dG9uICYmXG5cdFx0XHRcdCF0aGlzLl9zdGF0ZS51bnNlbGVjdEFjdGl2ZSAmJlxuXHRcdFx0XHR0aGlzLmRhdGEuZ2V0TGVuZ3RoKCkgPT09IChpZCBhcyBJZFtdKS5sZW5ndGhcblx0XHRcdCkge1xuXHRcdFx0XHR0aGlzLl9sYXlvdXQuZ2V0Q2VsbChcInNlbGVjdC11bnNlbGVjdC1hbGxcIikuYXR0YWNoKHVuc2VsZWN0QWxsVmlldyk7XG5cdFx0XHRcdHRoaXMuX3N0YXRlLnVuc2VsZWN0QWN0aXZlID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5jb25maWcuc2VsZWN0QWxsQnV0dG9uICYmIHRoaXMuX3N0YXRlLnVuc2VsZWN0QWN0aXZlKSB7XG5cdFx0XHRcdHRoaXMuX2xheW91dC5nZXRDZWxsKFwic2VsZWN0LXVuc2VsZWN0LWFsbFwiKS5hdHRhY2goc2VsZWN0QWxsVmlldyk7XG5cdFx0XHRcdHRoaXMuX3N0YXRlLnVuc2VsZWN0QWN0aXZlID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLl9zdGF0ZS52YWx1ZSkge1xuXHRcdFx0XHR0aGlzLl9zdGF0ZS52YWx1ZSA9IFwiXCI7XG5cdFx0XHRcdHRoaXMuX3N0YXRlLmNhbkRlbGV0ZSA9IChpZCBhcyBJZFtdKS5sZW5ndGggPT09IDA7XG5cdFx0XHRcdHRoaXMuX2ZpbHRlcigpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9zdGF0ZS52YWx1ZSA9IHRoaXMuX2dldEl0ZW1UZXh0KHRoaXMuZGF0YS5nZXRJdGVtKGlkIGFzIElkKSkgPz8gXCJcIjtcblx0XHR9XG5cblx0XHR0aGlzLnBhaW50KCk7XG5cdH1cblx0cHJpdmF0ZSBfY2hhbmdlUG9wdXBQb3NpdGlvbigpIHtcblx0XHRpZiAodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pIHtcblx0XHRcdGF3YWl0UmVkcmF3KCkudGhlbigoKSA9PiB7XG5cdFx0XHRcdHRoaXMuX3VwZGF0ZVBvcHVwKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfdXBkYXRlUG9wdXAoKSB7XG5cdFx0Y29uc3QgaG9sZGVyTm9kZTogSFRNTEVsZW1lbnQgPSB0aGlzLmdldFJvb3RWaWV3KCkucmVmcy5ob2xkZXIuZWw7XG5cdFx0dGhpcy5wb3B1cC5nZXRDb250YWluZXIoKS5zdHlsZS53aWR0aCA9IGhvbGRlck5vZGUub2Zmc2V0V2lkdGggKyBcInB4XCI7XG5cblx0XHRjb25zdCBpdGVtc0hlaWdodCA9IHRoaXMuZGF0YS5nZXRMZW5ndGgoKSAqICgodGhpcy5jb25maWcuaXRlbUhlaWdodCBhcyBudW1iZXIpIHx8IDM2KTtcblx0XHRpZiAodHlwZW9mIHRoaXMuY29uZmlnLmxpc3RIZWlnaHQgPT09IFwic3RyaW5nXCIgJiYgdGhpcy5jb25maWcubGlzdEhlaWdodC5pbmNsdWRlcyhcInB4XCIpKSB7XG5cdFx0XHR0aGlzLmNvbmZpZy5saXN0SGVpZ2h0ID0gdGhpcy5jb25maWcubGlzdEhlaWdodC5yZXBsYWNlKFwicHhcIiwgXCJcIik7XG5cdFx0fVxuXHRcdGNvbnN0IGxpc3RIZWlnaHQgPSBpdGVtc0hlaWdodCA8IHRoaXMuY29uZmlnLmxpc3RIZWlnaHQgPyBpdGVtc0hlaWdodCA6IHRoaXMuY29uZmlnLmxpc3RIZWlnaHQ7XG5cdFx0dGhpcy5wb3B1cC5nZXRDb250YWluZXIoKS5zdHlsZS5oZWlnaHQgPVxuXHRcdFx0KHRoaXMuY29uZmlnLnNlbGVjdEFsbEJ1dHRvbiAmJiB0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvblxuXHRcdFx0XHQ/IChsaXN0SGVpZ2h0IGFzIGFueSkgKyAzM1xuXHRcdFx0XHQ6IGxpc3RIZWlnaHQpICsgXCJweFwiO1xuXG5cdFx0dGhpcy5wb3B1cC5zaG93KGhvbGRlck5vZGUsIHsgbW9kZTogXCJib3R0b21cIiB9KTtcblx0fVxufVxuIiwiaW1wb3J0IHsgQ29tYm9ib3ggfSBmcm9tIFwiLi9Db21ib2JveFwiO1xuaW1wb3J0IHsgSUNvbWJvYm94Q29uZmlnIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IFByb0xpc3QgfSBmcm9tIFwiQGRoeC90cy1saXN0XCI7XG5pbXBvcnQgeyBQcm9MYXlvdXQgfSBmcm9tIFwiQGRoeC90cy1sYXlvdXRcIjtcbmltcG9ydCB7IHNlbGVjdEFsbFZpZXcgfSBmcm9tIFwiLi9oZWxwZXJcIjtcblxuZXhwb3J0IGNsYXNzIFByb0NvbWJvYm94IGV4dGVuZHMgQ29tYm9ib3gge1xuXHRjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCB8IHN0cmluZywgY29uZmlnOiBJQ29tYm9ib3hDb25maWcpIHtcblx0XHRzdXBlcihlbGVtZW50LCBjb25maWcpO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9jcmVhdGVMYXlvdXQoKSB7XG5cdFx0Y29uc3QgbGlzdCA9ICh0aGlzLmxpc3QgPSBuZXcgUHJvTGlzdChudWxsLCB7XG5cdFx0XHR0ZW1wbGF0ZTogdGhpcy5jb25maWcudGVtcGxhdGUsXG5cdFx0XHR2aXJ0dWFsOiB0aGlzLmNvbmZpZy52aXJ0dWFsLFxuXHRcdFx0a2V5TmF2aWdhdGlvbjogZmFsc2UsXG5cdFx0XHRtdWx0aXNlbGVjdGlvbjogdGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24sXG5cdFx0XHRpdGVtSGVpZ2h0OiB0aGlzLmNvbmZpZy5pdGVtSGVpZ2h0LFxuXHRcdFx0aGVpZ2h0OiB0aGlzLmNvbmZpZy5saXN0SGVpZ2h0LFxuXHRcdFx0ZGF0YTogdGhpcy5kYXRhLFxuXHRcdH0pKTtcblxuXHRcdGNvbnN0IGxheW91dCA9ICh0aGlzLl9sYXlvdXQgPSBuZXcgUHJvTGF5b3V0KHRoaXMucG9wdXAuZ2V0Q29udGFpbmVyKCksIHtcblx0XHRcdGNzczogXCJkaHhfY29tYm9ib3gtb3B0aW9ucyBkaHhfY29tYm9ib3hfX29wdGlvbnNcIixcblx0XHRcdHJvd3M6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlkOiBcInNlbGVjdC11bnNlbGVjdC1hbGxcIixcblx0XHRcdFx0XHRoaWRkZW46ICF0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbiB8fCAhdGhpcy5jb25maWcuc2VsZWN0QWxsQnV0dG9uLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7IGlkOiBcImxpc3RcIiwgaGVpZ2h0OiBcImNvbnRlbnRcIiB9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWQ6IFwibm90LWZvdW5kXCIsXG5cdFx0XHRcdFx0aGlkZGVuOiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdG9uOiB7XG5cdFx0XHRcdGNsaWNrOiB7XG5cdFx0XHRcdFx0XCIuZGh4X2NvbWJvYm94X19hY3Rpb24tc2VsZWN0LWFsbFwiOiB0aGlzLl9oYW5kbGVycy5zZWxlY3RBbGwsXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH0pKTtcblxuXHRcdGxheW91dC5nZXRDZWxsKFwibGlzdFwiKS5hdHRhY2gobGlzdCk7XG5cdFx0aWYgKHRoaXMuY29uZmlnLm11bHRpc2VsZWN0aW9uICYmIHRoaXMuY29uZmlnLnNlbGVjdEFsbEJ1dHRvbikge1xuXHRcdFx0bGF5b3V0LmdldENlbGwoXCJzZWxlY3QtdW5zZWxlY3QtYWxsXCIpLmF0dGFjaChzZWxlY3RBbGxWaWV3KTtcblx0XHR9XG5cdH1cbn1cbiIsImltcG9ydCB7IGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IGxvY2FsZSBmcm9tIFwiLi9sb2NhbGVzL2VuXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RBbGxWaWV3KCkge1xuXHRyZXR1cm4gZWwoXG5cdFx0XCIuZGh4X2xpc3QtaXRlbS5kaHhfY29tYm9ib3gtb3B0aW9uc19faXRlbS5kaHhfY29tYm9ib3gtb3B0aW9uc19faXRlbS0tc2VsZWN0LWFsbC5kaHhfY29tYm9ib3hfX2FjdGlvbi1zZWxlY3QtYWxsXCIsXG5cdFx0bG9jYWxlLnNlbGVjdEFsbFxuXHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zZWxlY3RBbGxWaWV3KCkge1xuXHRyZXR1cm4gZWwoXG5cdFx0XCIuZGh4X2xpc3QtaXRlbS5kaHhfY29tYm9ib3gtb3B0aW9uc19faXRlbS5kaHhfY29tYm9ib3gtb3B0aW9uc19faXRlbS0tc2VsZWN0LWFsbC5kaHhfY29tYm9ib3hfX2FjdGlvbi1zZWxlY3QtYWxsXCIsXG5cdFx0bG9jYWxlLnVuc2VsZWN0QWxsXG5cdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbXB0eUxpc3RWaWV3KCkge1xuXHRyZXR1cm4gZWwoXCJ1bC5kaHhfbGlzdFwiLCBbZWwoXCJsaS5kaHhfbGlzdC1pdGVtLmRoeF9jb21ib2JveC1vcHRpb25zX19pdGVtXCIsIHt9LCBsb2NhbGUubm90Rm91bmQpXSk7XG59XG4iLCJjb25zdCBDTEVBUl9USU1FT1VUID0gMjAwMDtcblxuZXhwb3J0IGNsYXNzIEtleUxpc3RlbmVyIHtcblx0cHJpdmF0ZSBfaXNBY3RpdmU6IGJvb2xlYW47XG5cblx0cHJpdmF0ZSBfc2VxdWVuY2U6IHN0cmluZztcblx0cHJpdmF0ZSBfY3VycmVudEFjdGlvbjogKHNlcTogc3RyaW5nKSA9PiBhbnk7XG5cblx0cHJpdmF0ZSBfY2xlYXJUaW1lb3V0OiBhbnk7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5fc2VxdWVuY2UgPSBcIlwiO1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cdFx0XHRpZiAoIXRoaXMuX2lzQWN0aXZlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGtleSA9IGUua2V5O1xuXHRcdFx0aWYgKGtleSA9PT0gXCJCYWNrc3BhY2VcIiAmJiB0aGlzLl9zZXF1ZW5jZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRoaXMuX3NlcXVlbmNlID0gdGhpcy5fc2VxdWVuY2Uuc2xpY2UoMCwgdGhpcy5fc2VxdWVuY2UubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdHRoaXMuX2NoYW5nZSgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGtleS5sZW5ndGggPCAyKSB7XG5cdFx0XHRcdC8vIGhhbmRsZSBvbmx5IHNpbmdsZSBrZXkgdmFsdWVcblx0XHRcdFx0dGhpcy5fc2VxdWVuY2UgKz0ga2V5O1xuXHRcdFx0XHR0aGlzLl9jaGFuZ2UoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRwdWJsaWMgc3RhcnROZXdMaXN0ZW4oYWN0aW9uOiAoc2VxOiBzdHJpbmcpID0+IGFueSkge1xuXHRcdHRoaXMuX2lzQWN0aXZlID0gdHJ1ZTtcblx0XHR0aGlzLl9zZXF1ZW5jZSA9IFwiXCI7XG5cdFx0dGhpcy5fY3VycmVudEFjdGlvbiA9IGFjdGlvbjtcblx0fVxuXHRwdWJsaWMgZW5kTGlzdGVuKCkge1xuXHRcdHRoaXMuX2N1cnJlbnRBY3Rpb24gPSBudWxsO1xuXHRcdHRoaXMucmVzZXQoKTtcblx0XHR0aGlzLl9pc0FjdGl2ZSA9IGZhbHNlO1xuXHR9XG5cdHB1YmxpYyByZXNldCgpIHtcblx0XHR0aGlzLl9zZXF1ZW5jZSA9IFwiXCI7XG5cdH1cblx0cHJpdmF0ZSBfY2hhbmdlKCkge1xuXHRcdHRoaXMuX2N1cnJlbnRBY3Rpb24odGhpcy5fc2VxdWVuY2UpO1xuXHRcdHRoaXMuX2FkZENsZWFyVGltZW91dCgpO1xuXHR9XG5cdHByaXZhdGUgX2FkZENsZWFyVGltZW91dCgpIHtcblx0XHRpZiAodGhpcy5fY2xlYXJUaW1lb3V0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy5fY2xlYXJUaW1lb3V0KTtcblx0XHR9XG5cdFx0dGhpcy5fY2xlYXJUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHR0aGlzLl9jbGVhclRpbWVvdXQgPSBudWxsO1xuXHRcdH0sIENMRUFSX1RJTUVPVVQpO1xuXHR9XG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG5cdG5vdEZvdW5kOiBcIk5vdCBGb3VuZFwiLFxuXHRzZWxlY3RBbGw6IFwiU2VsZWN0IEFsbFwiLFxuXHR1bnNlbGVjdEFsbDogXCJVbnNlbGVjdCBBbGxcIixcblx0c2VsZWN0ZWRJdGVtczogXCJzZWxlY3RlZCBpdGVtc1wiLFxufTtcbiIsImltcG9ydCB7IElkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBEYXRhQ29sbGVjdGlvbiB9IGZyb20gXCJAZGh4L3RzLWRhdGFcIjtcblxuZXhwb3J0IHR5cGUgSUxhYmVsUG9zaXRpb24gPSBcImxlZnRcIiB8IFwidG9wXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbWJvYm94Q29uZmlnIHtcblx0ZGF0YT86IERhdGFDb2xsZWN0aW9uPGFueT4gfCBhbnlbXTtcblx0ZGlzYWJsZWQ/OiBib29sZWFuO1xuXHRyZWFkT25seT86IGJvb2xlYW47XG5cdHRlbXBsYXRlPzogKGl0ZW06IGFueSkgPT4gc3RyaW5nO1xuXHRmaWx0ZXI/OiAoaXRlbTogYW55LCBpbnB1dDogc3RyaW5nKSA9PiBib29sZWFuO1xuXHRtdWx0aXNlbGVjdGlvbj86IGJvb2xlYW47XG5cdGxhYmVsPzogc3RyaW5nO1xuXHRsYWJlbFBvc2l0aW9uPzogSUxhYmVsUG9zaXRpb247XG5cdGxhYmVsV2lkdGg/OiBzdHJpbmcgfCBudW1iZXI7XG5cdHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuXHRzZWxlY3RBbGxCdXR0b24/OiBib29sZWFuO1xuXHRpdGVtc0NvdW50PzogYm9vbGVhbiB8ICgoY291bnQ6IG51bWJlcikgPT4gc3RyaW5nKTtcblx0aXRlbUhlaWdodD86IG51bWJlciB8IHN0cmluZztcblx0dmlydHVhbD86IGJvb2xlYW47XG5cdGxpc3RIZWlnaHQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cdHJlcXVpcmVkPzogYm9vbGVhbjtcblx0aGVscE1lc3NhZ2U/OiBzdHJpbmc7XG5cdGhpZGRlbkxhYmVsPzogYm9vbGVhbjtcblx0Y3NzPzogc3RyaW5nO1xuXHR2YWx1ZT86IHN0cmluZyB8IHN0cmluZ1tdO1xuXG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0Y2VsbEhlaWdodD86IG51bWJlcjtcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRoZWxwPzogc3RyaW5nO1xuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdHNob3dJdGVtc0NvdW50PzogYm9vbGVhbiB8ICgoY291bnQ6IG51bWJlcikgPT4gc3RyaW5nKTtcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRsYWJlbElubGluZT86IGJvb2xlYW47XG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0cmVhZG9ubHk/OiBib29sZWFuO1xufVxuZXhwb3J0IGludGVyZmFjZSBJQ29tYm9GaWx0ZXJDb25maWcge1xuXHRkYXRhPzogRGF0YUNvbGxlY3Rpb248YW55PiB8IGFueVtdO1xuXHRyZWFkb25seT86IGJvb2xlYW47XG5cdHRlbXBsYXRlPzogKGl0ZW06IGFueSkgPT4gc3RyaW5nO1xuXHRmaWx0ZXI/OiAoaXRlbTogYW55LCBpbnB1dDogc3RyaW5nKSA9PiBib29sZWFuO1xuXHRwbGFjZWhvbGRlcj86IHN0cmluZztcblx0dmlydHVhbD86IGJvb2xlYW47XG5cdG11bHRpc2VsZWN0aW9uPzogYm9vbGVhbjtcbn1cbmV4cG9ydCBlbnVtIENvbWJvYm94RXZlbnRzIHtcblx0Y2hhbmdlID0gXCJjaGFuZ2VcIixcblx0Zm9jdXMgPSBcImZvY3VzXCIsXG5cdGJsdXIgPSBcImJsdXJcIixcblx0a2V5ZG93biA9IFwia2V5ZG93blwiLFxuXHRpbnB1dCA9IFwiaW5wdXRcIixcblx0YmVmb3JlT3BlbiA9IFwiYmVmb3JlT3BlblwiLFxuXHRhZnRlck9wZW4gPSBcImFmdGVyT3BlblwiLFxuXHRiZWZvcmVDbG9zZSA9IFwiYmVmb3JlQ2xvc2VcIixcblx0YWZ0ZXJDbG9zZSA9IFwiYWZ0ZXJDbG9zZVwiLFxuXG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0b3BlbiA9IFwib3BlblwiLFxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGNsb3NlID0gXCJjbG9zZVwiLFxufVxuZXhwb3J0IGludGVyZmFjZSBJQ29tYm9ib3hFdmVudEhhbmRsZXJzTWFwIHtcblx0W2tleTogc3RyaW5nXTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cdFtDb21ib2JveEV2ZW50cy5jaGFuZ2VdOiAoaWRzOiBJZCB8IElkW10pID0+IHZvaWQ7XG5cdFtDb21ib2JveEV2ZW50cy5mb2N1c106ICgpID0+IHZvaWQ7XG5cdFtDb21ib2JveEV2ZW50cy5ibHVyXTogKCkgPT4gdm9pZDtcblx0W0NvbWJvYm94RXZlbnRzLmtleWRvd25dOiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQsIGlkOiBJZCB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcblx0W0NvbWJvYm94RXZlbnRzLmlucHV0XTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG5cdFtDb21ib2JveEV2ZW50cy5iZWZvcmVPcGVuXTogKCkgPT4gYm9vbGVhbiB8IHZvaWQ7XG5cdFtDb21ib2JveEV2ZW50cy5hZnRlck9wZW5dOiAoKSA9PiB2b2lkO1xuXHRbQ29tYm9ib3hFdmVudHMuYmVmb3JlQ2xvc2VdOiAoKSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0NvbWJvYm94RXZlbnRzLmFmdGVyQ2xvc2VdOiAoKSA9PiB2b2lkO1xuXG5cdFtDb21ib2JveEV2ZW50cy5vcGVuXTogKCkgPT4gdm9pZDtcblx0W0NvbWJvYm94RXZlbnRzLmNsb3NlXTogKCkgPT4gdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbWJvYm94IHtcblx0ZGlzYWJsZSgpOiB2b2lkO1xuXHRlbmFibGUoKTogdm9pZDtcblx0aXNEaXNhYmxlZCgpOiBib29sZWFuO1xuXHRkZXN0cnVjdG9yKCk6IHZvaWQ7XG5cdHBhaW50KCk6IHZvaWQ7XG5cdGNsZWFyKCk6IHZvaWQ7XG5cdGZvY3VzKCk6IHZvaWQ7XG5cdGJsdXIoKTogdm9pZDtcblx0Z2V0VmFsdWUoYXNBcnJheT86IGJvb2xlYW4pOiBJZFtdIHwgc3RyaW5nO1xuXHRzZXRWYWx1ZShpZHM6IElkW10gfCBJZCk6IHZvaWQ7XG5cblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRzZXRTdGF0ZShzdGF0ZTogU3RhdGUpOiB2b2lkO1xufVxuZXhwb3J0IGVudW0gQ29tYm9TdGF0ZSB7XG5cdGRlZmF1bHQsXG5cdGVycm9yLFxuXHRzdWNjZXNzLFxufVxuXG4vKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5leHBvcnQgdHlwZSBTdGF0ZSA9IFwic3VjY2Vzc1wiIHwgXCJlcnJvclwiIHwgXCJkZWZhdWx0XCI7XG4iLCJpbXBvcnQgeyBsb2NhdGUgfSBmcm9tIFwiLi9odG1sXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZvY3VzTWFuYWdlciB7XG5cdGdldEZvY3VzSWQoKTogc3RyaW5nO1xuXHRzZXRGb2N1c0lkKGlkOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5jbGFzcyBGb2N1c01hbmFnZXIgaW1wbGVtZW50cyBJRm9jdXNNYW5hZ2VyIHtcblx0cHJpdmF0ZSBfYWN0aXZlV2lkZ2V0SWQ6IHN0cmluZztcblx0cHJpdmF0ZSBfaW5pdEhhbmRsZXIgPSAoZTogRXZlbnQpID0+ICh0aGlzLl9hY3RpdmVXaWRnZXRJZCA9IGxvY2F0ZShlLCBcImRoeF93aWRnZXRfaWRcIikpO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIHRoaXMuX2luaXRIYW5kbGVyKTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faW5pdEhhbmRsZXIpO1xuXHR9XG5cblx0Z2V0Rm9jdXNJZCgpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLl9hY3RpdmVXaWRnZXRJZDtcblx0fVxuXG5cdHNldEZvY3VzSWQoaWQ6IHN0cmluZyk6IHZvaWQge1xuXHRcdHRoaXMuX2FjdGl2ZVdpZGdldElkID0gaWQ7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGZvY3VzTWFuYWdlciA9IG5ldyBGb2N1c01hbmFnZXIoKTtcbiIsImltcG9ydCB7IGZvY3VzTWFuYWdlciB9IGZyb20gXCIuL0ZvY3VzTWFuYWdlclwiO1xuaW1wb3J0IHsgaXNJRSB9IGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCB7IGFueUZ1bmN0aW9uIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZnVuY3Rpb24gZ2V0SG90S2V5Q29kZShjb2RlOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRjb25zdCBtYXRjaGVzID0gY29kZS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9cXHcrL2cpO1xuXHRsZXQgY29tcCA9IDA7XG5cdGxldCBrZXkgPSBcIlwiO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBjaGVjayA9IG1hdGNoZXNbaV07XG5cdFx0aWYgKGNoZWNrID09PSBcImN0cmxcIikge1xuXHRcdFx0Y29tcCArPSA0O1xuXHRcdH0gZWxzZSBpZiAoY2hlY2sgPT09IFwic2hpZnRcIikge1xuXHRcdFx0Y29tcCArPSAyO1xuXHRcdH0gZWxzZSBpZiAoY2hlY2sgPT09IFwiYWx0XCIpIHtcblx0XHRcdGNvbXAgKz0gMTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0a2V5ID0gY2hlY2s7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBjb21wICsga2V5O1xufVxuXG5jb25zdCBpZV9rZXlfbWFwID0ge1xuXHRVcDogXCJhcnJvd1VwXCIsXG5cdERvd246IFwiYXJyb3dEb3duXCIsXG5cdFJpZ2h0OiBcImFycm93UmlnaHRcIixcblx0TGVmdDogXCJhcnJvd0xlZnRcIixcblx0RXNjOiBcImVzY2FwZVwiLFxuXHRTcGFjZWJhcjogXCJzcGFjZVwiLFxufTtcblxuaW50ZXJmYWNlIElLZXlTdG9yYWdlIHtcblx0W2tleTogc3RyaW5nXTogeyBoYW5kbGVyOiAoZTogRXZlbnQpID0+IGFueSB9W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUtleU1hbmFnZXIge1xuXHRkZXN0cnVjdG9yKCk6IHZvaWQ7XG5cdGFkZEhvdEtleShrZXk6IHN0cmluZywgaGFuZGxlcjogYW55KTogdm9pZDtcblx0cmVtb3ZlSG90S2V5KGtleT86IHN0cmluZywgY29udGV4dD86IGFueSk6IHZvaWQ7XG5cdGV4aXN0KGtleTogc3RyaW5nKTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEtleU1hbmFnZXIgaW1wbGVtZW50cyBJS2V5TWFuYWdlciB7XG5cdHByaXZhdGUgX2tleXNTdG9yYWdlOiBJS2V5U3RvcmFnZSA9IHt9O1xuXHRwcml2YXRlIF9iZWZvcmVDYWxsOiAoZTogRXZlbnQsIGZvY3VzOiBhbnkpID0+IGJvb2xlYW47XG5cblx0cHJpdmF0ZSBfaW5pdEhhbmRsZXIgPSAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdGxldCBrZXk7XG5cdFx0aWYgKChlLndoaWNoID49IDQ4ICYmIGUud2hpY2ggPD0gNTcpIHx8IChlLndoaWNoID49IDY1ICYmIGUud2hpY2ggPD0gOTApKSB7XG5cdFx0XHRrZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUud2hpY2gpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBrZXlOYW1lID0gZS53aGljaCA9PT0gMzIgPyBlLmNvZGUgOiBlLmtleTtcblx0XHRcdGtleSA9IGlzSUUoKSA/IGllX2tleV9tYXBba2V5TmFtZV0gfHwga2V5TmFtZSA6IGtleU5hbWU7XG5cdFx0fVxuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2tleXNTdG9yYWdlW1xuXHRcdFx0KGUuY3RybEtleSB8fCBlLm1ldGFLZXkgPyA0IDogMCkgK1xuXHRcdFx0XHQoZS5zaGlmdEtleSA/IDIgOiAwKSArXG5cdFx0XHRcdChlLmFsdEtleSA/IDEgOiAwKSArXG5cdFx0XHRcdChrZXkgJiYga2V5LnRvTG93ZXJDYXNlKCkpXG5cdFx0XTtcblxuXHRcdGlmIChhY3Rpb25zKSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFjdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHRoaXMuX2JlZm9yZUNhbGwgJiYgdGhpcy5fYmVmb3JlQ2FsbChlLCBmb2N1c01hbmFnZXIuZ2V0Rm9jdXNJZCgpKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0YWN0aW9uc1tpXS5oYW5kbGVyKGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRjb25zdHJ1Y3RvcihiZWZvcmVDYWxsPzogKGU6IEV2ZW50LCBmb2N1czogYW55KSA9PiBib29sZWFuKSB7XG5cdFx0aWYgKGJlZm9yZUNhbGwpIHtcblx0XHRcdHRoaXMuX2JlZm9yZUNhbGwgPSBiZWZvcmVDYWxsO1xuXHRcdH1cblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9pbml0SGFuZGxlcik7XG5cdH1cblxuXHRkZXN0cnVjdG9yKCkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2luaXRIYW5kbGVyKTtcblx0XHR0aGlzLnJlbW92ZUhvdEtleSgpO1xuXHR9XG5cblx0YWRkSG90S2V5KGtleTogc3RyaW5nLCBoYW5kbGVyKTogdm9pZCB7XG5cdFx0Y29uc3QgY29kZSA9IGdldEhvdEtleUNvZGUoa2V5KTtcblx0XHRpZiAoIXRoaXMuX2tleXNTdG9yYWdlW2NvZGVdKSB7XG5cdFx0XHR0aGlzLl9rZXlzU3RvcmFnZVtjb2RlXSA9IFtdO1xuXHRcdH1cblx0XHR0aGlzLl9rZXlzU3RvcmFnZVtjb2RlXS5wdXNoKHsgaGFuZGxlciB9KTtcblx0fVxuXG5cdHJlbW92ZUhvdEtleShrZXk/OiBzdHJpbmcsIGhhbmRsZXI/OiBhbnlGdW5jdGlvbik6IHZvaWQge1xuXHRcdGlmIChrZXkpIHtcblx0XHRcdGlmIChrZXkgJiYgaGFuZGxlcikge1xuXHRcdFx0XHRjb25zdCBjb2RlID0gZ2V0SG90S2V5Q29kZShrZXkpO1xuXHRcdFx0XHRjb25zdCBmdW5jdGlvblRvU3RyaW5nID0gZnVuID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuXG5cdFx0XHRcdFx0XHQudG9TdHJpbmcoKVxuXHRcdFx0XHRcdFx0LnJlcGxhY2UoL1xcbi9nLCBcIlwiKVxuXHRcdFx0XHRcdFx0LnJlcGxhY2UoL1xccy9nLCBcIlwiKTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLl9rZXlzU3RvcmFnZVtjb2RlXS5mb3JFYWNoKChleGlzdEhvdEtleSwgaSkgPT4ge1xuXHRcdFx0XHRcdGlmIChmdW5jdGlvblRvU3RyaW5nKGV4aXN0SG90S2V5LmhhbmRsZXIpID09PSBmdW5jdGlvblRvU3RyaW5nKGhhbmRsZXIpKSB7XG5cdFx0XHRcdFx0XHRkZWxldGUgdGhpcy5fa2V5c1N0b3JhZ2VbY29kZV1baV07XG5cdFx0XHRcdFx0XHR0aGlzLl9rZXlzU3RvcmFnZVtjb2RlXSA9IHRoaXMuX2tleXNTdG9yYWdlW2NvZGVdLmZpbHRlcihlbCA9PiBlbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IGNvZGUgPSBnZXRIb3RLZXlDb2RlKGtleSk7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLl9rZXlzU3RvcmFnZVtjb2RlXTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fa2V5c1N0b3JhZ2UgPSB7fTtcblx0XHR9XG5cdH1cblxuXHRleGlzdChrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRcdGNvbnN0IGNvZGUgPSBnZXRIb3RLZXlDb2RlKGtleSk7XG5cdFx0cmV0dXJuICEhdGhpcy5fa2V5c1N0b3JhZ2VbY29kZV07XG5cdH1cbn1cbiIsImltcG9ydCB7IGV4dGVuZCwgZGVib3VuY2UgfSBmcm9tIFwiLi9jb3JlXCI7XG5pbXBvcnQgeyBlbCB9IGZyb20gXCIuL2RvbVwiO1xuaW1wb3J0IHsgZ2V0U2Nyb2xsYmFyV2lkdGgsIGlzSUUsIGdldFNjcm9sbGJhckhlaWdodCwgbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lIH0gZnJvbSBcIi4vaHRtbFwiO1xuaW1wb3J0IHsgSUhhbmRsZXJzLCBhbnlGdW5jdGlvbiB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmludGVyZmFjZSBJU2Nyb2xsVmlld0NvbmZpZyB7XG5cdGVuYWJsZTogYm9vbGVhbjtcblx0YXV0b0hpZGU6IGJvb2xlYW47XG5cdHRpbWVvdXQ6IG51bWJlcjtcblx0c2Nyb2xsSGFuZGxlcjogYW55RnVuY3Rpb247XG59XG5cbmV4cG9ydCBjb25zdCBzY3JvbGxWaWV3Q29uZmlnOiBJU2Nyb2xsVmlld0NvbmZpZyA9IHtcblx0ZW5hYmxlOiBmYWxzZSxcblx0YXV0b0hpZGU6IHRydWUsXG5cdHRpbWVvdXQ6IDEwMDAsXG5cdHNjcm9sbEhhbmRsZXI6ICgpID0+IHt9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBJU2Nyb2xsVmlldyB7XG5cdGNvbmZpZzogSVNjcm9sbFZpZXdDb25maWc7XG5cdGVuYWJsZSgpOiB2b2lkO1xuXHRkaXNhYmxlKCk6IHZvaWQ7XG5cdHJlbmRlcihub2RzPzogYW55W10pOiBhbnk7XG5cdHVwZGF0ZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgU2Nyb2xsVmlldyBpbXBsZW1lbnRzIElTY3JvbGxWaWV3IHtcblx0cHVibGljIGNvbmZpZzogSVNjcm9sbFZpZXdDb25maWc7XG5cblx0cHJpdmF0ZSBfZ2V0Um9vdFZpZXc7XG5cdHByaXZhdGUgX3Njcm9sbFlUb3A6IG51bWJlcjtcblx0cHJpdmF0ZSBfc2Nyb2xsWExlZnQ6IG51bWJlcjtcblx0cHJpdmF0ZSBfcnVubmVyWVRvcDogbnVtYmVyO1xuXHRwcml2YXRlIF9ydW5uZXJYTGVmdDogbnVtYmVyO1xuXHRwcml2YXRlIF9ydW5uZXJIZWlnaHQ6IG51bWJlcjtcblx0cHJpdmF0ZSBfcnVubmVyV2lkdGg6IG51bWJlcjtcblx0cHJpdmF0ZSBfdmlzaWJsZVlBcmVhOiBudW1iZXI7XG5cdHByaXZhdGUgX3Zpc2libGVYQXJlYTogbnVtYmVyO1xuXHRwcml2YXRlIF9zY3JvbGxXaWR0aDogbnVtYmVyO1xuXHRwcml2YXRlIF9zY3JvbGxIZWlnaHQ6IG51bWJlcjtcblx0cHJpdmF0ZSBfd2hlZWxOYW1lOiBzdHJpbmc7XG5cdHByaXZhdGUgX2hhbmRsZXJzOiBJSGFuZGxlcnM7XG5cdHByaXZhdGUgX2F1dG9IaWRlRnVuYzogYW55RnVuY3Rpb247XG5cdHByaXZhdGUgX3VpZDogc3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKGdldFJvb3RWaWV3LCBjb25maWcgPSB7fSkge1xuXHRcdHRoaXMuY29uZmlnID0gZXh0ZW5kKFxuXHRcdFx0e1xuXHRcdFx0XHRlbmFibGU6IHNjcm9sbFZpZXdDb25maWcuZW5hYmxlLFxuXHRcdFx0XHRhdXRvSGlkZTogc2Nyb2xsVmlld0NvbmZpZy5hdXRvSGlkZSxcblx0XHRcdFx0dGltZW91dDogc2Nyb2xsVmlld0NvbmZpZy50aW1lb3V0LFxuXHRcdFx0XHRzY3JvbGxIYW5kbGVyOiBzY3JvbGxWaWV3Q29uZmlnLnNjcm9sbEhhbmRsZXIsXG5cdFx0XHR9LFxuXHRcdFx0Y29uZmlnXG5cdFx0KTtcblxuXHRcdHRoaXMuX3doZWVsTmFtZSA9IGlzSUUoKSA/IFwib25tb3VzZXdoZWVsXCIgOiBcIm9ud2hlZWxcIjtcblxuXHRcdHRoaXMuX2dldFJvb3RWaWV3ID0gZ2V0Um9vdFZpZXc7XG5cdFx0dGhpcy5fc2Nyb2xsWVRvcCA9IHRoaXMuX3Njcm9sbFhMZWZ0ID0gdGhpcy5fcnVubmVyWVRvcCA9IHRoaXMuX3J1bm5lclhMZWZ0ID0gdGhpcy5fcnVubmVySGVpZ2h0ID0gdGhpcy5fcnVubmVyV2lkdGggPSAwO1xuXHRcdHRoaXMuX3Zpc2libGVZQXJlYSA9IHRoaXMuX3Zpc2libGVYQXJlYSA9IDE7XG5cblx0XHR0aGlzLl9zY3JvbGxXaWR0aCA9IGdldFNjcm9sbGJhcldpZHRoKCk7XG5cdFx0dGhpcy5fc2Nyb2xsSGVpZ2h0ID0gZ2V0U2Nyb2xsYmFySGVpZ2h0KCk7XG5cblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdG9uc2Nyb2xsOiBlID0+IHtcblx0XHRcdFx0dGhpcy5jb25maWcuc2Nyb2xsSGFuZGxlcihlKTtcblx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdH0sXG5cdFx0XHRbdGhpcy5fd2hlZWxOYW1lXTogZSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlzWSA9ICEhbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lKGUudGFyZ2V0LCBcInktc2Nyb2xsXCIpO1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0Y29uc3Qgc2lnbiA9IChlLmRlbHRhWSB8fCAtZS53aGVlbERlbHRhKSA+IDAgPyAxIDogLTE7XG5cdFx0XHRcdGNvbnN0IGRlbHRhID0gc2lnbiAqIDQwO1xuXHRcdFx0XHRjb25zdCB7IGFyZWEgfSA9IHRoaXMuX2dldFJlZnMoKTtcblx0XHRcdFx0aWYgKGlzWSkge1xuXHRcdFx0XHRcdGNvbnN0IG1heEJvdHRvbSA9IGFyZWEuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5fcnVubmVySGVpZ2h0O1xuXHRcdFx0XHRcdGNvbnN0IG5ld1Njcm9sbFRvcCA9IHRoaXMuX3Njcm9sbFlUb3AgKyBkZWx0YTtcblxuXHRcdFx0XHRcdGlmIChuZXdTY3JvbGxUb3AgPCAwKSB7XG5cdFx0XHRcdFx0XHRhcmVhLnNjcm9sbFRvcCA9IDA7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChuZXdTY3JvbGxUb3AgPiBtYXhCb3R0b20pIHtcblx0XHRcdFx0XHRcdGFyZWEuc2Nyb2xsVG9wID0gbWF4Qm90dG9tO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRhcmVhLnNjcm9sbFRvcCA9IG5ld1Njcm9sbFRvcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgbWF4UmlnaHQgPSBhcmVhLnNjcm9sbFdpZHRoIC0gdGhpcy5fcnVubmVyV2lkdGg7XG5cdFx0XHRcdFx0Y29uc3QgbmV3U2Nyb2xsTGVmdCA9IHRoaXMuX3Njcm9sbFhMZWZ0ICsgZGVsdGE7XG5cblx0XHRcdFx0XHRpZiAobmV3U2Nyb2xsTGVmdCA8IDApIHtcblx0XHRcdFx0XHRcdGFyZWEuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChuZXdTY3JvbGxMZWZ0ID4gbWF4UmlnaHQpIHtcblx0XHRcdFx0XHRcdGFyZWEuc2Nyb2xsTGVmdCA9IG1heFJpZ2h0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRhcmVhLnNjcm9sbExlZnQgPSBuZXdTY3JvbGxMZWZ0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHR9LFxuXHRcdFx0b25tb3VzZWRvd25SdW5uZXI6IG1vdXNlRG93bkV2ID0+IHtcblx0XHRcdFx0bW91c2VEb3duRXYucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0Y29uc3QgaXNZID0gISFsb2NhdGVOb2RlQnlDbGFzc05hbWUobW91c2VEb3duRXYudGFyZ2V0LCBcInktc2Nyb2xsXCIpO1xuXG5cdFx0XHRcdGNvbnN0IHsgYXJlYSwgcnVubmVyWSwgcnVubmVyWCB9ID0gdGhpcy5fZ2V0UmVmcygpO1xuXG5cdFx0XHRcdGNvbnN0IHJlY3QgPSBhcmVhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHRcdGNvbnN0IHRvcCA9IHJlY3QudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRcdFx0XHRjb25zdCBib3R0b20gPSByZWN0LmJvdHRvbSArIHdpbmRvdy5wYWdlWU9mZnNldDtcblx0XHRcdFx0Y29uc3QgbWF4Qm90dG9tID0gYXJlYS5zY3JvbGxIZWlnaHQgLSB0aGlzLl9ydW5uZXJIZWlnaHQ7XG5cdFx0XHRcdGNvbnN0IGRlbHRhWSA9IG1vdXNlRG93bkV2LnBhZ2VZIC0gcnVubmVyWS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cblx0XHRcdFx0Y29uc3QgbGVmdCA9IHJlY3QubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldDtcblx0XHRcdFx0Y29uc3QgcmlnaHQgPSByZWN0LnJpZ2h0ICsgd2luZG93LnBhZ2VYT2Zmc2V0O1xuXHRcdFx0XHRjb25zdCBtYXhSaWdodCA9IGFyZWEuc2Nyb2xsV2lkdGggLSB0aGlzLl9ydW5uZXJXaWR0aDtcblx0XHRcdFx0Y29uc3QgZGVsdGFYID0gbW91c2VEb3duRXYucGFnZVggLSBydW5uZXJYLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB3aW5kb3cucGFnZVhPZmZzZXQ7XG5cblx0XHRcdFx0Y29uc3QgbW91c2VNb3ZlID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0XHRpZiAoaXNZKSB7XG5cdFx0XHRcdFx0XHRjb25zdCB5ID0gZS5wYWdlWSAtIGRlbHRhWTtcblx0XHRcdFx0XHRcdGlmICh5IDw9IHRvcCkge1xuXHRcdFx0XHRcdFx0XHRhcmVhLnNjcm9sbFRvcCA9IDA7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHkgPiBib3R0b20pIHtcblx0XHRcdFx0XHRcdFx0YXJlYS5zY3JvbGxUb3AgPSBtYXhCb3R0b207XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRhcmVhLnNjcm9sbFRvcCA9ICh5IC0gdG9wKSAvIHRoaXMuX3Zpc2libGVZQXJlYTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc3QgeCA9IGUucGFnZVggLSBkZWx0YVg7XG5cdFx0XHRcdFx0XHRpZiAoeCA8PSBsZWZ0KSB7XG5cdFx0XHRcdFx0XHRcdGFyZWEuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHggPiByaWdodCkge1xuXHRcdFx0XHRcdFx0XHRhcmVhLnNjcm9sbExlZnQgPSBtYXhSaWdodDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGFyZWEuc2Nyb2xsTGVmdCA9ICh4IC0gbGVmdCkgLyB0aGlzLl92aXNpYmxlWEFyZWE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRjb25zdCBtb3VzZVVwID0gKCkgPT4ge1xuXHRcdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlKTtcblx0XHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBtb3VzZVVwKTtcblx0XHRcdFx0XHRkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJkaHgtbm8tc2VsZWN0XCIpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImRoeC1uby1zZWxlY3RcIik7XG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlKTtcblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgbW91c2VVcCk7XG5cdFx0XHR9LFxuXHRcdFx0b25tb3VzZWRvd25BcmVhOiBlID0+IHtcblx0XHRcdFx0aWYgKGxvY2F0ZU5vZGVCeUNsYXNzTmFtZShlLCBcInNjcm9sbC1ydW5uZXJcIikpIHJldHVybjtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRjb25zdCBpc1kgPSAhIWxvY2F0ZU5vZGVCeUNsYXNzTmFtZShlLnRhcmdldCwgXCJ5LXNjcm9sbFwiKTtcblxuXHRcdFx0XHRjb25zdCB7IGFyZWEsIHJ1bm5lclksIHJ1bm5lclggfSA9IHRoaXMuX2dldFJlZnMoKTtcblxuXHRcdFx0XHRpZiAoaXNZKSB7XG5cdFx0XHRcdFx0YXJlYS5zY3JvbGxUb3AgKz0gKGUucGFnZVkgLSBydW5uZXJZLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCkgLyB0aGlzLl92aXNpYmxlWUFyZWE7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YXJlYS5zY3JvbGxMZWZ0ICs9IChlLnBhZ2VYIC0gcnVubmVyWC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAvIHRoaXMuX3Zpc2libGVYQXJlYTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHR9LFxuXHRcdFx0b25tb3VzZWVudGVyOiBlID0+IHtcblx0XHRcdFx0aWYgKGxvY2F0ZU5vZGVCeUNsYXNzTmFtZShlLCBcInNjcm9sbC1ydW5uZXJcIikpIHJldHVybjtcblx0XHRcdFx0Y29uc3QgcmVmcyA9IHRoaXMuX2dldFJlZnMoKTtcblx0XHRcdFx0aWYgKCFyZWZzKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgaXNZID0gISFsb2NhdGVOb2RlQnlDbGFzc05hbWUoZS50YXJnZXQsIFwieS1zY3JvbGxcIik7XG5cdFx0XHRcdGNvbnN0IHsgYXJlYVgsIGFyZWFZIH0gPSByZWZzO1xuXG5cdFx0XHRcdGlmIChpc1kgJiYgdGhpcy5fcnVubmVySGVpZ2h0ID4gMCkge1xuXHRcdFx0XHRcdGFyZWFZLnN0eWxlLmJhY2tncm91bmQgPSBcIiNlZWVcIjtcblx0XHRcdFx0fSBlbHNlIGlmICghaXNZICYmIHRoaXMuX3J1bm5lcldpZHRoID4gMCkge1xuXHRcdFx0XHRcdGFyZWFYLnN0eWxlLmJhY2tncm91bmQgPSBcIiNlZWVcIjtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG9ubW91c2VsZWF2ZTogZSA9PiB7XG5cdFx0XHRcdGlmIChsb2NhdGVOb2RlQnlDbGFzc05hbWUoZSwgXCJzY3JvbGwtcnVubmVyXCIpKSByZXR1cm47XG5cdFx0XHRcdGNvbnN0IHJlZnMgPSB0aGlzLl9nZXRSZWZzKCk7XG5cdFx0XHRcdGlmICghcmVmcykge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGlzWSA9ICEhbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lKGUudGFyZ2V0LCBcInktc2Nyb2xsXCIpO1xuXHRcdFx0XHRjb25zdCB7IGFyZWFYLCBhcmVhWSB9ID0gcmVmcztcblxuXHRcdFx0XHRpZiAoaXNZICYmIHRoaXMuX3J1bm5lckhlaWdodCA+IDApIHtcblx0XHRcdFx0XHRhcmVhWS5zdHlsZS5iYWNrZ3JvdW5kID0gXCJ0cmFuc3BhcmVudFwiO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCFpc1kgJiYgdGhpcy5fcnVubmVyV2lkdGggPiAwKSB7XG5cdFx0XHRcdFx0YXJlYVguc3R5bGUuYmFja2dyb3VuZCA9IFwidHJhbnNwYXJlbnRcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cblx0ZW5hYmxlKCkge1xuXHRcdHRoaXMuY29uZmlnLmVuYWJsZSA9IHRydWU7XG5cdFx0dGhpcy5fZ2V0Um9vdFZpZXcoKS5yZWRyYXcoKTtcblx0fVxuXHRkaXNhYmxlKCkge1xuXHRcdHRoaXMuY29uZmlnLmVuYWJsZSA9IGZhbHNlO1xuXHRcdHRoaXMuX2dldFJvb3RWaWV3KCkucmVkcmF3KCk7XG5cdH1cblx0cmVuZGVyKGVsZW1lbnQsIHVpZCA9IFwiXCIpIHtcblx0XHRpZiAodGhpcy5fc2Nyb2xsV2lkdGggPT09IDAgfHwgIXRoaXMuY29uZmlnLmVuYWJsZSB8fCAhZWxlbWVudC5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdH1cblx0XHRpZiAodWlkKSB0aGlzLl91aWQgPSB1aWQ7XG5cblx0XHRjb25zdCBzY3JvbGxWaWV3ID0gdGhpcy5jb25maWcuZW5hYmxlXG5cdFx0XHQ/IFtcblx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFwiLnktc2Nyb2xsXCIsXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFt0aGlzLl93aGVlbE5hbWVdOiB0aGlzLl9oYW5kbGVyc1t0aGlzLl93aGVlbE5hbWVdLFxuXHRcdFx0XHRcdFx0XHRfcmVmOiB1aWQgPyBgc2Nyb2xsLXktYXJlYS0ke3VpZH1gIDogYHNjcm9sbC15LWFyZWFgLFxuXHRcdFx0XHRcdFx0XHRvbm1vdXNlZG93bjogdGhpcy5faGFuZGxlcnMub25tb3VzZWRvd25BcmVhLFxuXHRcdFx0XHRcdFx0XHRvbm1vdXNlZW50ZXI6IHRoaXMuX2hhbmRsZXJzLm9ubW91c2VlbnRlcixcblx0XHRcdFx0XHRcdFx0b25tb3VzZWxlYXZlOiB0aGlzLl9oYW5kbGVycy5vbm1vdXNlbGVhdmUsXG5cdFx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdFx0d2lkdGg6IFwiNnB4XCIsXG5cdFx0XHRcdFx0XHRcdFx0aGVpZ2h0OiBcIjEwMCVcIixcblx0XHRcdFx0XHRcdFx0XHRyaWdodDogMCxcblx0XHRcdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpb246IFwiYWJzb2x1dGVcIixcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdGVsKGAuc2Nyb2xsLXJ1bm5lcmAsIHtcblx0XHRcdFx0XHRcdFx0XHRfcmVmOiB1aWQgPyBgc2Nyb2xsLXktcnVubmVyLSR7dWlkfWAgOiBcInNjcm9sbC15LXJ1bm5lclwiLFxuXHRcdFx0XHRcdFx0XHRcdG9ubW91c2Vkb3duOiB0aGlzLl9oYW5kbGVycy5vbm1vdXNlZG93blJ1bm5lcixcblx0XHRcdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0aGVpZ2h0OiB0aGlzLl9ydW5uZXJIZWlnaHQgKyBcInB4XCIsXG5cdFx0XHRcdFx0XHRcdFx0XHR0b3A6IHRoaXMuX3J1bm5lcllUb3AsXG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFwiLngtc2Nyb2xsXCIsXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFt0aGlzLl93aGVlbE5hbWVdOiB0aGlzLl9oYW5kbGVyc1t0aGlzLl93aGVlbE5hbWVdLFxuXHRcdFx0XHRcdFx0XHRfcmVmOiB1aWQgPyBgc2Nyb2xsLXgtYXJlYS0ke3VpZH1gIDogYHNjcm9sbC14LWFyZWFgLFxuXHRcdFx0XHRcdFx0XHRvbm1vdXNlZG93bjogdGhpcy5faGFuZGxlcnMub25tb3VzZWRvd25BcmVhLFxuXHRcdFx0XHRcdFx0XHRvbm1vdXNlZW50ZXI6IHRoaXMuX2hhbmRsZXJzLm9ubW91c2VlbnRlcixcblx0XHRcdFx0XHRcdFx0b25tb3VzZWxlYXZlOiB0aGlzLl9oYW5kbGVycy5vbm1vdXNlbGVhdmUsXG5cdFx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdFx0d2lkdGg6IFwiMTAwJVwiLFxuXHRcdFx0XHRcdFx0XHRcdGhlaWdodDogXCI2cHhcIixcblx0XHRcdFx0XHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRcdFx0XHRcdGJvdHRvbTogMCxcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0ZWwoYC5zY3JvbGwtcnVubmVyYCwge1xuXHRcdFx0XHRcdFx0XHRcdF9yZWY6IHVpZCA/IGBzY3JvbGwteC1ydW5uZXItJHt1aWR9YCA6IFwic2Nyb2xsLXgtcnVubmVyXCIsXG5cdFx0XHRcdFx0XHRcdFx0b25tb3VzZWRvd246IHRoaXMuX2hhbmRsZXJzLm9ubW91c2Vkb3duUnVubmVyLFxuXHRcdFx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHR3aWR0aDogdGhpcy5fcnVubmVyV2lkdGggKyBcInB4XCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRsZWZ0OiB0aGlzLl9ydW5uZXJYTGVmdCxcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHQpLFxuXHRcdFx0ICBdXG5cdFx0XHQ6IG51bGw7XG5cblx0XHRyZXR1cm4gZWwoXG5cdFx0XHRcIi5zY3JvbGwtdmlldy13cmFwcGVyXCIsXG5cdFx0XHRbXG5cdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFwiLnNjcm9sbC12aWV3XCIsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0b25zY3JvbGw6IHRoaXMuX2hhbmRsZXJzLm9uc2Nyb2xsLFxuXHRcdFx0XHRcdFx0X3JlZjogdWlkID8gYHNjcm9sbC12aWV3LSR7dWlkfWAgOiBcInNjcm9sbC12aWV3XCIsXG5cdFx0XHRcdFx0XHRfaG9va3M6IHtcblx0XHRcdFx0XHRcdFx0ZGlkSW5zZXJ0OiAoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0ZGlkUmVjeWNsZTogKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdFx0d2lkdGg6IGBjYWxjKDEwMCUgKyAke3RoaXMuX3Njcm9sbFdpZHRofXB4KWAsXG5cdFx0XHRcdFx0XHRcdGhlaWdodDogYGNhbGMoMTAwJSArICR7dGhpcy5fc2Nyb2xsSGVpZ2h0fXB4KWAsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZWxlbWVudFxuXHRcdFx0XHQpLFxuXHRcdFx0XS5jb25jYXQoc2Nyb2xsVmlldylcblx0XHQpO1xuXHR9XG5cdHVwZGF0ZSgpIHtcblx0XHRjb25zdCByZWZzID0gdGhpcy5fZ2V0UmVmcygpO1xuXHRcdGlmICghcmVmcykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IHsgYXJlYSwgYXJlYVgsIGFyZWFZLCBydW5uZXJZLCBydW5uZXJYIH0gPSByZWZzO1xuXG5cdFx0dGhpcy5fdmlzaWJsZVlBcmVhID0gYXJlYS5jbGllbnRIZWlnaHQgLyBhcmVhLnNjcm9sbEhlaWdodDtcblx0XHR0aGlzLl92aXNpYmxlWEFyZWEgPSBhcmVhLmNsaWVudFdpZHRoIC8gYXJlYS5zY3JvbGxXaWR0aDtcblx0XHR0aGlzLl9zY3JvbGxZVG9wID0gYXJlYS5zY3JvbGxUb3A7XG5cdFx0dGhpcy5fc2Nyb2xsWExlZnQgPSBhcmVhLnNjcm9sbExlZnQ7XG5cdFx0dGhpcy5fcnVubmVyWVRvcCA9IHRoaXMuX3Njcm9sbFlUb3AgKiB0aGlzLl92aXNpYmxlWUFyZWE7XG5cdFx0dGhpcy5fcnVubmVyWExlZnQgPSB0aGlzLl9zY3JvbGxYTGVmdCAqIHRoaXMuX3Zpc2libGVYQXJlYTtcblxuXHRcdHRoaXMuX3J1bm5lckhlaWdodCA9IHRoaXMuX3Zpc2libGVZQXJlYSA8IDEgPyBhcmVhLmNsaWVudEhlaWdodCAqIHRoaXMuX3Zpc2libGVZQXJlYSA6IDA7XG5cdFx0dGhpcy5fcnVubmVyV2lkdGggPSB0aGlzLl92aXNpYmxlWEFyZWEgPCAxID8gYXJlYS5jbGllbnRXaWR0aCAqIHRoaXMuX3Zpc2libGVYQXJlYSA6IDA7XG5cblx0XHRjb25zdCBpbml0aWFsVG9wID0gcnVubmVyWS5zdHlsZS50b3A7XG5cdFx0Y29uc3QgaW5pdGlhbExlZnQgPSBydW5uZXJYLnN0eWxlLmxlZnQ7XG5cblx0XHQvLyB1cGRhdGUgZG9tXG5cdFx0cnVubmVyWS5zdHlsZS5vcGFjaXR5ID0gMTtcblx0XHRydW5uZXJZLnN0eWxlLnRvcCA9IHRoaXMuX3J1bm5lcllUb3AgKyBcInB4XCI7XG5cdFx0cnVubmVyWS5zdHlsZS5oZWlnaHQgPSB0aGlzLl9ydW5uZXJIZWlnaHQgKyBcInB4XCI7XG5cblx0XHRydW5uZXJYLnN0eWxlLm9wYWNpdHkgPSAxO1xuXHRcdHJ1bm5lclguc3R5bGUubGVmdCA9IHRoaXMuX3J1bm5lclhMZWZ0ICsgXCJweFwiO1xuXHRcdHJ1bm5lclguc3R5bGUud2lkdGggPSB0aGlzLl9ydW5uZXJXaWR0aCArIFwicHhcIjtcblxuXHRcdGlmIChpbml0aWFsVG9wICE9PSBydW5uZXJZLnN0eWxlLnRvcCkge1xuXHRcdFx0YXJlYVkuc3R5bGUub3BhY2l0eSA9IDAuOTtcblx0XHRcdGFyZWFZLnN0eWxlLndpZHRoID0gXCIxMHB4XCI7XG5cdFx0fVxuXHRcdGlmIChpbml0aWFsTGVmdCAhPT0gcnVubmVyWC5zdHlsZS5sZWZ0KSB7XG5cdFx0XHRhcmVhWC5zdHlsZS5vcGFjaXR5ID0gMC45O1xuXHRcdFx0YXJlYVguc3R5bGUuaGVpZ2h0ID0gXCIxMHB4XCI7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuY29uZmlnLmF1dG9IaWRlKSB7XG5cdFx0XHQhdGhpcy5fYXV0b0hpZGVGdW5jICYmXG5cdFx0XHRcdCh0aGlzLl9hdXRvSGlkZUZ1bmMgPSBkZWJvdW5jZSgoKSA9PiB7XG5cdFx0XHRcdFx0cnVubmVyWS5zdHlsZS5vcGFjaXR5ID0gMDtcblx0XHRcdFx0XHRhcmVhWS5zdHlsZS53aWR0aCA9IFwiNnB4XCI7XG5cblx0XHRcdFx0XHRydW5uZXJYLnN0eWxlLm9wYWNpdHkgPSAwO1xuXHRcdFx0XHRcdGFyZWFYLnN0eWxlLmhlaWdodCA9IFwiNnB4XCI7XG5cdFx0XHRcdH0sIHRoaXMuY29uZmlnLnRpbWVvdXQpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fYXV0b0hpZGVGdW5jID0gZGVib3VuY2UoKCkgPT4ge1xuXHRcdFx0XHRhcmVhWS5zdHlsZS53aWR0aCA9IFwiNnB4XCI7XG5cdFx0XHRcdGFyZWFYLnN0eWxlLmhlaWdodCA9IFwiNnB4XCI7XG5cdFx0XHR9LCB0aGlzLmNvbmZpZy50aW1lb3V0KTtcblx0XHR9XG5cdFx0dGhpcy5fYXV0b0hpZGVGdW5jKCk7XG5cdH1cblx0cHJpdmF0ZSBfZ2V0UmVmcygpIHtcblx0XHRjb25zdCByb290VmlldyA9IHRoaXMuX2dldFJvb3RWaWV3KCk7XG5cblx0XHRjb25zdCByZWZzQ2hlY2sgPSAhIShcblx0XHRcdHJvb3RWaWV3LnJlZnNbXCJzY3JvbGwtdmlld1wiXSAmJlxuXHRcdFx0KHJvb3RWaWV3LnJlZnNbXCJzY3JvbGwteC1ydW5uZXJcIl0gfHwgcm9vdFZpZXcucmVmc1tcInNjcm9sbC15LXJ1bm5lclwiXSlcblx0XHQpO1xuXG5cdFx0Y29uc3QgcmVmc0lkQ2hlY2sgPSAhIShcblx0XHRcdHRoaXMuX3VpZCAmJlxuXHRcdFx0cm9vdFZpZXcucmVmc1tgc2Nyb2xsLXZpZXctJHt0aGlzLl91aWR9YF0gJiZcblx0XHRcdChyb290Vmlldy5yZWZzW2BzY3JvbGwteC1ydW5uZXItJHt0aGlzLl91aWR9YF0gfHwgcm9vdFZpZXcucmVmc1tgc2Nyb2xsLXktcnVubmVyLSR7dGhpcy5fdWlkfWBdKVxuXHRcdCk7XG5cblx0XHRpZiAocm9vdFZpZXcucmVmcykge1xuXHRcdFx0aWYgKHJlZnNDaGVjaykge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGFyZWE6IHJvb3RWaWV3LnJlZnNbXCJzY3JvbGwtdmlld1wiXS5lbCxcblx0XHRcdFx0XHRhcmVhWTogcm9vdFZpZXcucmVmc1tcInNjcm9sbC15LWFyZWFcIl0uZWwsXG5cdFx0XHRcdFx0YXJlYVg6IHJvb3RWaWV3LnJlZnNbXCJzY3JvbGwteC1hcmVhXCJdLmVsLFxuXHRcdFx0XHRcdHJ1bm5lclk6IHJvb3RWaWV3LnJlZnNbXCJzY3JvbGwteS1ydW5uZXJcIl0uZWwsXG5cdFx0XHRcdFx0cnVubmVyWDogcm9vdFZpZXcucmVmc1tcInNjcm9sbC14LXJ1bm5lclwiXS5lbCxcblx0XHRcdFx0fTtcblx0XHRcdH0gZWxzZSBpZiAocmVmc0lkQ2hlY2spIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRhcmVhOiByb290Vmlldy5yZWZzW2BzY3JvbGwtdmlldy0ke3RoaXMuX3VpZH1gXS5lbCxcblx0XHRcdFx0XHRhcmVhWTogcm9vdFZpZXcucmVmc1tgc2Nyb2xsLXktYXJlYS0ke3RoaXMuX3VpZH1gXS5lbCxcblx0XHRcdFx0XHRhcmVhWDogcm9vdFZpZXcucmVmc1tgc2Nyb2xsLXgtYXJlYS0ke3RoaXMuX3VpZH1gXS5lbCxcblx0XHRcdFx0XHRydW5uZXJZOiByb290Vmlldy5yZWZzW2BzY3JvbGwteS1ydW5uZXItJHt0aGlzLl91aWR9YF0uZWwsXG5cdFx0XHRcdFx0cnVubmVyWDogcm9vdFZpZXcucmVmc1tgc2Nyb2xsLXgtcnVubmVyLSR7dGhpcy5fdWlkfWBdLmVsLFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIiwiaW1wb3J0IHsgbG9jYXRlIH0gZnJvbSBcIi4vaHRtbFwiO1xuXG50eXBlIGZuPFQgZXh0ZW5kcyBhbnlbXSwgSz4gPSAoLi4uYXJnczogVCkgPT4gSztcbnR5cGUgYW55RnVuY3Rpb24gPSBmbjxhbnlbXSwgYW55PjtcblxubGV0IGNvdW50ZXIgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcbmV4cG9ydCBmdW5jdGlvbiB1aWQoKTogc3RyaW5nIHtcblx0cmV0dXJuIFwidVwiICsgY291bnRlcisrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc291cmNlLCBkZWVwID0gdHJ1ZSkge1xuXHRpZiAoc291cmNlKSB7XG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gc291cmNlKSB7XG5cdFx0XHRjb25zdCBzb2JqID0gc291cmNlW2tleV07XG5cdFx0XHRjb25zdCB0b2JqID0gdGFyZ2V0W2tleV07XG5cdFx0XHRpZiAoc29iaiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGRlbGV0ZSB0YXJnZXRba2V5XTtcblx0XHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRcdGRlZXAgJiZcblx0XHRcdFx0dHlwZW9mIHRvYmogPT09IFwib2JqZWN0XCIgJiZcblx0XHRcdFx0ISh0b2JqIGluc3RhbmNlb2YgRGF0ZSkgJiZcblx0XHRcdFx0ISh0b2JqIGluc3RhbmNlb2YgQXJyYXkpXG5cdFx0XHQpIHtcblx0XHRcdFx0ZXh0ZW5kKHRvYmosIHNvYmopO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGFyZ2V0W2tleV0gPSBzb2JqO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG5pbnRlcmZhY2UgSU9CaiB7XG5cdFtrZXk6IHN0cmluZ106IGFueTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZTogSU9Caiwgd2l0aG91dElubmVyPzogYm9vbGVhbik6IElPQmoge1xuXHRjb25zdCByZXN1bHQ6IElPQmogPSB7fTtcblx0Zm9yIChjb25zdCBrZXkgaW4gc291cmNlKSB7XG5cdFx0aWYgKCF3aXRob3V0SW5uZXIgfHwgIWtleS5zdGFydHNXaXRoKFwiJFwiKSkge1xuXHRcdFx0cmVzdWx0W2tleV0gPSBzb3VyY2Vba2V5XTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5hdHVyYWxTb3J0KGFycik6IGFueVtdIHtcblx0cmV0dXJuIGFyci5zb3J0KChhOiBhbnksIGI6IGFueSkgPT4ge1xuXHRcdGNvbnN0IG5uID0gdHlwZW9mIGEgPT09IFwic3RyaW5nXCIgPyBhLmxvY2FsZUNvbXBhcmUoYikgOiBhIC0gYjtcblx0XHRyZXR1cm4gbm47XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEluZGV4PFQgPSBhbnk+KGFycjogVFtdLCBwcmVkaWNhdGU6IChvYmo6IFQpID0+IGJvb2xlYW4pOiBudW1iZXIge1xuXHRjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0aWYgKHByZWRpY2F0ZShhcnJbaV0pKSB7XG5cdFx0XHRyZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFcXVhbFN0cmluZyhmcm9tOiBzdHJpbmcsIHRvOiBzdHJpbmcpOiBib29sZWFuIHtcblx0ZnJvbSA9IGZyb20udG9TdHJpbmcoKTtcblx0dG8gPSB0by50b1N0cmluZygpO1xuXHRpZiAoZnJvbS5sZW5ndGggPiB0by5sZW5ndGgpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBmcm9tLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKGZyb21baV0udG9Mb3dlckNhc2UoKSAhPT0gdG9baV0udG9Mb3dlckNhc2UoKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbmdsZU91dGVyQ2xpY2soZm46IChlOiBNb3VzZUV2ZW50KSA9PiBib29sZWFuKSB7XG5cdGNvbnN0IGNsaWNrID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRpZiAoZm4oZSkpIHtcblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGljayk7XG5cdFx0fVxuXHR9O1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0V2lkZ2V0Q2xpY2sod2lkZ2V0SWQ6IHN0cmluZywgY2I6IChpbm5lcjogYm9vbGVhbikgPT4gdm9pZCk6ICgpID0+IHZvaWQge1xuXHRjb25zdCBjbGljayA9IChlOiBNb3VzZUV2ZW50KSA9PiBjYihsb2NhdGUoZSwgXCJkaHhfd2lkZ2V0X2lkXCIpID09PSB3aWRnZXRJZCk7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGljayk7XG5cblx0cmV0dXJuICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGljayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bndyYXBCb3g8VD4oYm94OiBUIHwgVFtdKTogVCB7XG5cdGlmIChBcnJheS5pc0FycmF5KGJveCkpIHtcblx0XHRyZXR1cm4gYm94WzBdO1xuXHR9XG5cdHJldHVybiBib3g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQm94PFQ+KHVuYm94ZWQ6IFQgfCBUW10pOiBUW10ge1xuXHRpZiAoQXJyYXkuaXNBcnJheSh1bmJveGVkKSkge1xuXHRcdHJldHVybiB1bmJveGVkO1xuXHR9XG5cdHJldHVybiBbdW5ib3hlZF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluZWQ8VD4oc29tZTogVCk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gc29tZSAhPT0gbnVsbCAmJiBzb21lICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5nZShmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdGlmIChmcm9tID4gdG8pIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0Y29uc3QgcmVzdWx0ID0gW107XG5cdHdoaWxlIChmcm9tIDw9IHRvKSB7XG5cdFx0cmVzdWx0LnB1c2goZnJvbSsrKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtZXJpYyh2YWw6IGFueSk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gIWlzTmFOKHZhbCAtIHBhcnNlRmxvYXQodmFsKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZEZpbGUoZGF0YTogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nLCBtaW1lVHlwZSA9IFwidGV4dC9wbGFpblwiKTogdm9pZCB7XG5cdGNvbnN0IGZpbGUgPSBuZXcgQmxvYihbZGF0YV0sIHsgdHlwZTogbWltZVR5cGUgfSk7XG5cdGlmICh3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IpIHtcblx0XHQvLyBJRTEwK1xuXHRcdHdpbmRvdy5uYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihmaWxlLCBmaWxlbmFtZSk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXHRcdGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XG5cblx0XHRhLmhyZWYgPSB1cmw7XG5cdFx0YS5kb3dubG9hZCA9IGZpbGVuYW1lO1xuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG5cdFx0YS5jbGljaygpO1xuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpO1xuXHRcdFx0d2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcblx0XHR9LCAwKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYzogYW55RnVuY3Rpb24sIHdhaXQ6IG51bWJlciwgaW1tZWRpYXRlPzogYm9vbGVhbikge1xuXHRsZXQgdGltZW91dDtcblx0cmV0dXJuIGZ1bmN0aW9uIGV4ZWN1dGVkRnVuY3Rpb24oLi4uYXJncykge1xuXHRcdGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuXHRcdFx0dGltZW91dCA9IG51bGw7XG5cdFx0XHRpZiAoIWltbWVkaWF0ZSkge1xuXHRcdFx0XHRmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0Y29uc3QgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuXHRcdGlmIChjYWxsTm93KSB7XG5cdFx0XHRmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdH1cblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmUob2JqMSwgb2JqMikge1xuXHRmb3IgKGNvbnN0IHAgaW4gb2JqMSkge1xuXHRcdGlmIChvYmoxLmhhc093blByb3BlcnR5KHApICE9PSBvYmoyLmhhc093blByb3BlcnR5KHApKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0c3dpdGNoICh0eXBlb2Ygb2JqMVtwXSkge1xuXHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRpZiAoIWNvbXBhcmUob2JqMVtwXSwgb2JqMltwXSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHR5cGVvZiBvYmoyW3BdID09PSBcInVuZGVmaW5lZFwiIHx8XG5cdFx0XHRcdFx0KHAgIT09IFwiY29tcGFyZVwiICYmIG9iajFbcF0udG9TdHJpbmcoKSAhPT0gb2JqMltwXS50b1N0cmluZygpKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZiAob2JqMVtwXSAhPT0gb2JqMltwXSkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZvciAoY29uc3QgcCBpbiBvYmoyKSB7XG5cdFx0aWYgKHR5cGVvZiBvYmoxW3BdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgY29uc3QgaXNUeXBlID0gKHZhbHVlOiBhbnkpOiBzdHJpbmcgPT4ge1xuXHRjb25zdCByZWdleCA9IC9eXFxbb2JqZWN0IChcXFMrPylcXF0kLztcblx0Y29uc3QgbWF0Y2hlcyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkubWF0Y2gocmVnZXgpIHx8IFtdO1xuXG5cdHJldHVybiAobWF0Y2hlc1sxXSB8fCBcInVuZGVmaW5lZFwiKS50b0xvd2VyQ2FzZSgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRW1wdHlPYmogPSBvYmogPT4ge1xuXHRmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIHRydWU7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TWF4QXJyYXlOeW1iZXIgPSAoYXJyYXk6IG51bWJlcltdKTogbnVtYmVyID0+IHtcblx0aWYgKCFhcnJheS5sZW5ndGgpIHJldHVybjtcblxuXHRsZXQgbWF4TnVtYmVyID0gLUluZmluaXR5O1xuXHRsZXQgaW5kZXggPSAwO1xuXHRjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cblx0Zm9yIChpbmRleDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcblx0XHRpZiAoYXJyYXlbaW5kZXhdID4gbWF4TnVtYmVyKSBtYXhOdW1iZXIgPSBhcnJheVtpbmRleF07XG5cdH1cblx0cmV0dXJuIG1heE51bWJlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRNaW5BcnJheU55bWJlciA9IChhcnJheTogbnVtYmVyW10pOiBudW1iZXIgPT4ge1xuXHRpZiAoIWFycmF5Lmxlbmd0aCkgcmV0dXJuO1xuXG5cdGxldCBtaW5OdW1iZXIgPSArSW5maW5pdHk7XG5cdGxldCBpbmRleCA9IDA7XG5cdGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuXHRmb3IgKGluZGV4OyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuXHRcdGlmIChhcnJheVtpbmRleF0gPCBtaW5OdW1iZXIpIG1pbk51bWJlciA9IGFycmF5W2luZGV4XTtcblx0fVxuXHRyZXR1cm4gbWluTnVtYmVyO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBJQ29udGFpbmVyQ29uZmlnIHtcblx0bGluZUhlaWdodD86IG51bWJlcjtcblx0Zm9udD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGdldFN0cmluZ1dpZHRoID0gKHZhbHVlOiBzdHJpbmcsIGNvbmZpZz86IElDb250YWluZXJDb25maWcpOiBudW1iZXIgPT4ge1xuXHRjb25maWcgPSB7XG5cdFx0Zm9udDogXCJub3JtYWwgMTRweCBSb2JvdG9cIixcblx0XHRsaW5lSGVpZ2h0OiAyMCxcblx0XHQuLi5jb25maWcsXG5cdH07XG5cblx0Y29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcblx0Y29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblx0aWYgKGNvbmZpZy5mb250KSBjdHguZm9udCA9IGNvbmZpZy5mb250O1xuXG5cdGNvbnN0IHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHZhbHVlKS53aWR0aDtcblxuXHRjYW52YXMucmVtb3ZlKCk7XG5cblx0cmV0dXJuIHdpZHRoO1xufTtcblxuZXhwb3J0IGNvbnN0IHJnYlRvSGV4ID0gKGNvbG9yOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuXHRpZiAoY29sb3Iuc3Vic3RyKDAsIDEpID09PSBcIiNcIikge1xuXHRcdHJldHVybiBjb2xvcjtcblx0fVxuXHRjb25zdCBkaWdpdHMgPSAvKC4qPylyZ2JbYV0/XFwoKFxcZCspLCAqKFxcZCspLCAqKFxcZCspLCogKihbXFxkKy5dKilcXCkvLmV4ZWMoY29sb3IpO1xuXG5cdGNvbnN0IHJlZCA9IHBhcnNlSW50KGRpZ2l0c1syXSwgMTApXG5cdFx0LnRvU3RyaW5nKDE2KVxuXHRcdC5wYWRTdGFydCgyLCBcIjBcIik7XG5cdGNvbnN0IGdyZWVuID0gcGFyc2VJbnQoZGlnaXRzWzNdLCAxMClcblx0XHQudG9TdHJpbmcoMTYpXG5cdFx0LnBhZFN0YXJ0KDIsIFwiMFwiKTtcblx0Y29uc3QgYmx1ZSA9IHBhcnNlSW50KGRpZ2l0c1s0XSwgMTApXG5cdFx0LnRvU3RyaW5nKDE2KVxuXHRcdC5wYWRTdGFydCgyLCBcIjBcIik7XG5cblx0cmV0dXJuIGAjJHtyZWR9JHtncmVlbn0ke2JsdWV9YDtcbn1cbiIsImltcG9ydCB7IHJhbmdlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcbmltcG9ydCB7IGZpbmRJbmRleCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5cbmV4cG9ydCBjb25zdCBsb2NhbGUgPSB7XG5cdG1vbnRoc1Nob3J0OiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl0sXG5cdG1vbnRoczogW1xuXHRcdFwiSmFudWFyeVwiLFxuXHRcdFwiRmVicnVhcnlcIixcblx0XHRcIk1hcmNoXCIsXG5cdFx0XCJBcHJpbFwiLFxuXHRcdFwiTWF5XCIsXG5cdFx0XCJKdW5lXCIsXG5cdFx0XCJKdWx5XCIsXG5cdFx0XCJBdWd1c3RcIixcblx0XHRcIlNlcHRlbWJlclwiLFxuXHRcdFwiT2N0b2JlclwiLFxuXHRcdFwiTm92ZW1iZXJcIixcblx0XHRcIkRlY2VtYmVyXCIsXG5cdF0sXG5cdGRheXNTaG9ydDogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuXHRkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiLCBcIk1vbmRheVwiXSxcblx0Y2FuY2VsOiBcIkNhbmNlbFwiLFxufTtcblxuLypcblx0JWRcdGRheSBhcyBhIG51bWJlciB3aXRoIGxlYWRpbmcgemVybywgMDEuLjMxXG5cdCVqXHRkYXkgYXMgYSBudW1iZXIsIDEuLjMxXG5cdCVEXHRzaG9ydCBuYW1lIG9mIHRoZSBkYXksIFN1IE1vIFR1Li4uXG5cdCVsXHRmdWxsIG5hbWUgb2YgdGhlIGRheSwgU3VuZGF5IE1vbmRheSBUdWVzZGF5Li4uXG5cdCVtXHRtb250aCBhcyBhIG51bWJlciB3aXRoIGxlYWRpbmcgemVybywgMDEuLjEyXG5cdCVuXHRtb250aCBhcyBhIG51bWJlciwgMS4uMTJcblx0JU1cdHNob3J0IG5hbWUgb2YgdGhlIG1vbnRoLCBKYW4gRmViIE1hci4uLlxuXHQlRlx0ZnVsbCBuYW1lIG9mIHRoZSBtb250aCwgSmFudWFyeSBGZWJydWFyeSBNYXJjaC4uLlxuXHQleVx0eWVhciBhcyBhIG51bWJlciwgMiBkaWdpdHNcblx0JVlcdHllYXIgYXMgYSBudW1iZXIsIDQgZGlnaXRzXG5cdCVoXHRob3VycyAxMi1mb3JtYXQgd2l0aCBsZWFkaW5nIHplcm8sIDAxLi4xMilcblx0JWdcdGhvdXJzIDEyLWZvcm1hdCwgMS4uMTIpXG5cdCVIXHRob3VycyAyNC1mb3JtYXQgd2l0aCBsZWFkaW5nIHplcm8sIDAxLi4yNFxuXHQlR1x0aG91cnMgMjQtZm9ybWF0LCAxLi4yNFxuXHQlaVx0bWludXRlcyB3aXRoIGxlYWRpbmcgemVybywgMDEuLjU5XG5cdCVzXHRzZWNvbmRzIHdpdGggbGVhZGluZyB6ZXJvLCAwMS4uNTlcblx0JWFcdGFtIG9yIHBtXG5cdCVBXHRBTSBvciBQTVxuXHQldVx0bWlsbGlzZWNvbmRzXG4qL1xuXG5jb25zdCBmb3JtYXR0ZXJzID0ge1xuXHRcIiVkXCI6IChkYXRlOiBEYXRlKSA9PiB7XG5cdFx0Y29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cdFx0cmV0dXJuIGRheSA8IDEwID8gXCIwXCIgKyBkYXkgOiBkYXk7XG5cdH0sXG5cdFwiJWpcIjogKGRhdGU6IERhdGUpID0+IGRhdGUuZ2V0RGF0ZSgpLFxuXHRcIiVsXCI6IChkYXRlOiBEYXRlKSA9PiB7XG5cdFx0cmV0dXJuIGxvY2FsZS5kYXlzW2RhdGUuZ2V0RGF5KCldO1xuXHR9LFxuXHRcIiVEXCI6IChkYXRlOiBEYXRlKSA9PiB7XG5cdFx0cmV0dXJuIGxvY2FsZS5kYXlzU2hvcnRbZGF0ZS5nZXREYXkoKV07XG5cdH0sXG5cdFwiJW1cIjogKGRhdGU6IERhdGUpID0+IHtcblx0XHRjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG5cdFx0cmV0dXJuIG1vbnRoIDwgMTAgPyBcIjBcIiArIG1vbnRoIDogbW9udGg7XG5cdH0sXG5cdFwiJW5cIjogKGRhdGU6IERhdGUpID0+IGRhdGUuZ2V0TW9udGgoKSArIDEsXG5cdFwiJU1cIjogKGRhdGU6IERhdGUpID0+IGxvY2FsZS5tb250aHNTaG9ydFtkYXRlLmdldE1vbnRoKCldLFxuXHRcIiVGXCI6IChkYXRlOiBEYXRlKSA9PiBsb2NhbGUubW9udGhzW2RhdGUuZ2V0TW9udGgoKV0sXG5cdFwiJXlcIjogKGRhdGU6IERhdGUpID0+XG5cdFx0ZGF0ZVxuXHRcdFx0LmdldEZ1bGxZZWFyKClcblx0XHRcdC50b1N0cmluZygpXG5cdFx0XHQuc2xpY2UoMiksXG5cdFwiJVlcIjogKGRhdGU6IERhdGUpID0+IGRhdGUuZ2V0RnVsbFllYXIoKSxcblx0XCIlaFwiOiAoZGF0ZTogRGF0ZSkgPT4ge1xuXHRcdGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKSAlIDEyO1xuXHRcdGlmIChob3VycyA9PT0gMCkge1xuXHRcdFx0aG91cnMgPSAxMjtcblx0XHR9XG5cdFx0cmV0dXJuIGhvdXJzIDwgMTAgPyBcIjBcIiArIGhvdXJzIDogaG91cnM7XG5cdH0sXG5cdFwiJWdcIjogKGRhdGU6IERhdGUpID0+IHtcblx0XHRsZXQgaG91cnMgPSBkYXRlLmdldEhvdXJzKCkgJSAxMjtcblx0XHRpZiAoaG91cnMgPT09IDApIHtcblx0XHRcdGhvdXJzID0gMTI7XG5cdFx0fVxuXHRcdHJldHVybiBob3Vycztcblx0fSxcblx0XCIlSFwiOiAoZGF0ZTogRGF0ZSkgPT4ge1xuXHRcdGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuXHRcdHJldHVybiBob3VycyA8IDEwID8gXCIwXCIgKyBob3VycyA6IGhvdXJzO1xuXHR9LFxuXHRcIiVHXCI6IChkYXRlOiBEYXRlKSA9PiBkYXRlLmdldEhvdXJzKCksXG5cdFwiJWlcIjogKGRhdGU6IERhdGUpID0+IHtcblx0XHRjb25zdCBtaW51dGVzID0gZGF0ZS5nZXRNaW51dGVzKCk7XG5cdFx0cmV0dXJuIG1pbnV0ZXMgPCAxMCA/IFwiMFwiICsgbWludXRlcyA6IG1pbnV0ZXM7XG5cdH0sXG5cdFwiJXNcIjogKGRhdGU6IERhdGUpID0+IHtcblx0XHRjb25zdCBzZWNvbmRzID0gZGF0ZS5nZXRTZWNvbmRzKCk7XG5cdFx0cmV0dXJuIHNlY29uZHMgPCAxMCA/IFwiMFwiICsgc2Vjb25kcyA6IHNlY29uZHM7XG5cdH0sXG5cdFwiJWFcIjogKGRhdGU6IERhdGUpID0+IHtcblx0XHRyZXR1cm4gZGF0ZS5nZXRIb3VycygpID49IDEyID8gXCJwbVwiIDogXCJhbVwiO1xuXHR9LFxuXHRcIiVBXCI6IChkYXRlOiBEYXRlKSA9PiB7XG5cdFx0cmV0dXJuIGRhdGUuZ2V0SG91cnMoKSA+PSAxMiA/IFwiUE1cIiA6IFwiQU1cIjtcblx0fSxcblx0XCIldVwiOiAoZGF0ZTogRGF0ZSkgPT4gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSxcbn07XG5cbmNvbnN0IHNldEZvcm1hdHRlcnMgPSB7XG5cdFwiJWRcIjogKGRhdGU6IERhdGUsIHZhbHVlOiBzdHJpbmcpID0+IHtcblx0XHRjb25zdCBjaGVjayA9IC8oXihbMC05XVswLTldKSQpL2kudGVzdCh2YWx1ZSk7XG5cdFx0Y2hlY2sgPyBkYXRlLnNldERhdGUoTnVtYmVyKHZhbHVlKSkgOiBkYXRlLnNldERhdGUoTnVtYmVyKDEpKTtcblx0fSxcblx0XCIlalwiOiAoZGF0ZTogRGF0ZSwgdmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdGNvbnN0IGNoZWNrID0gLyheKFswLTldP1swLTldKSQpL2kudGVzdCh2YWx1ZSk7XG5cdFx0Y2hlY2sgPyBkYXRlLnNldERhdGUoTnVtYmVyKHZhbHVlKSkgOiBkYXRlLnNldERhdGUoTnVtYmVyKDEpKTtcblx0fSxcblx0XCIlbVwiOiAoZGF0ZTogRGF0ZSwgdmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdGNvbnN0IGNoZWNrID0gLyheKFswLTldWzAtOV0pJCkvaS50ZXN0KHZhbHVlKTtcblx0XHRjaGVjayA/IGRhdGUuc2V0TW9udGgoTnVtYmVyKHZhbHVlKSAtIDEpIDogZGF0ZS5zZXRNb250aChOdW1iZXIoMCkpO1xuXHRcdGlmIChjaGVjayAmJiBkYXRlLmdldE1vbnRoKCkgIT09IE51bWJlcih2YWx1ZSkgLSAxKSBkYXRlLnNldE1vbnRoKE51bWJlcih2YWx1ZSkgLSAxKTtcblx0fSxcblx0XCIlblwiOiAoZGF0ZTogRGF0ZSwgdmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdGNvbnN0IGNoZWNrID0gLyheKFswLTldP1swLTldKSQpL2kudGVzdCh2YWx1ZSk7XG5cdFx0Y2hlY2sgPyBkYXRlLnNldE1vbnRoKE51bWJlcih2YWx1ZSkgLSAxKSA6IGRhdGUuc2V0TW9udGgoTnVtYmVyKDApKTtcblx0XHRpZiAoY2hlY2sgJiYgZGF0ZS5nZXRNb250aCgpICE9PSBOdW1iZXIodmFsdWUpIC0gMSkgZGF0ZS5zZXRNb250aChOdW1iZXIodmFsdWUpIC0gMSk7XG5cdH0sXG5cdFwiJU1cIjogKGRhdGU6IERhdGUsIHZhbHVlOiBzdHJpbmcpID0+IHtcblx0XHRjb25zdCBpbmRleCA9IGZpbmRJbmRleChsb2NhbGUubW9udGhzU2hvcnQsIHYgPT4gdiA9PT0gdmFsdWUpO1xuXHRcdGluZGV4ID09PSAtMSA/IGRhdGUuc2V0TW9udGgoMCkgOiBkYXRlLnNldE1vbnRoKGluZGV4KTtcblx0XHRpZiAoaW5kZXggIT09IC0xICYmIGRhdGUuZ2V0TW9udGgoKSAhPT0gaW5kZXgpIGRhdGUuc2V0TW9udGgoaW5kZXgpO1xuXHR9LFxuXHRcIiVGXCI6IChkYXRlOiBEYXRlLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG5cdFx0Y29uc3QgaW5kZXggPSBmaW5kSW5kZXgobG9jYWxlLm1vbnRocywgdiA9PiB2ID09PSB2YWx1ZSk7XG5cdFx0aW5kZXggPT09IC0xID8gZGF0ZS5zZXRNb250aCgwKSA6IGRhdGUuc2V0TW9udGgoaW5kZXgpO1xuXHRcdGlmIChpbmRleCAhPT0gLTEgJiYgZGF0ZS5nZXRNb250aCgpICE9PSBpbmRleCkgZGF0ZS5zZXRNb250aChpbmRleCk7XG5cdH0sXG5cdFwiJXlcIjogKGRhdGU6IERhdGUsIHZhbHVlOiBzdHJpbmcpID0+IHtcblx0XHRjb25zdCBjaGVjayA9IC8oXihbMC05XVswLTldKSQpL2kudGVzdCh2YWx1ZSk7XG5cdFx0Y2hlY2sgPyBkYXRlLnNldEZ1bGxZZWFyKE51bWJlcihcIjIwXCIgKyB2YWx1ZSkpIDogZGF0ZS5zZXRGdWxsWWVhcihOdW1iZXIoXCIyMDAwXCIpKTtcblx0fSxcblx0XCIlWVwiOiAoZGF0ZTogRGF0ZSwgdmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdGNvbnN0IGNoZWNrID0gLyheKFswLTldWzAtOV1bMC05XVswLTldKSQpL2kudGVzdCh2YWx1ZSk7XG5cdFx0Y2hlY2sgPyBkYXRlLnNldEZ1bGxZZWFyKE51bWJlcih2YWx1ZSkpIDogZGF0ZS5zZXRGdWxsWWVhcihOdW1iZXIoXCIyMDAwXCIpKTtcblx0fSxcblx0XCIlaFwiOiAoZGF0ZTogRGF0ZSwgdmFsdWU6IHN0cmluZywgZGF0ZUZvcm1hdDogc3RyaW5nKSA9PiB7XG5cdFx0Y29uc3QgY2hlY2sgPSAvKF4wWzEtOV18MVswLTJdJCkvaS50ZXN0KHZhbHVlKTtcblx0XHQoY2hlY2sgJiYgZGF0ZUZvcm1hdCA9PT0gXCJwbVwiKSB8fCBkYXRlRm9ybWF0ID09PSBcIlBNXCJcblx0XHRcdD8gZGF0ZS5zZXRIb3VycyhOdW1iZXIodmFsdWUpKVxuXHRcdFx0OiBkYXRlLnNldEhvdXJzKE51bWJlcigwKSk7XG5cdH0sXG5cdFwiJWdcIjogKGRhdGU6IERhdGUsIHZhbHVlOiBzdHJpbmcsIGRhdGVGb3JtYXQ6IHN0cmluZykgPT4ge1xuXHRcdGNvbnN0IGNoZWNrID0gLyheWzEtOV0kKXwoXjBbMS05XXwxWzAtMl0kKS9pLnRlc3QodmFsdWUpO1xuXHRcdChjaGVjayAmJiBkYXRlRm9ybWF0ID09PSBcInBtXCIpIHx8IGRhdGVGb3JtYXQgPT09IFwiUE1cIlxuXHRcdFx0PyBkYXRlLnNldEhvdXJzKE51bWJlcih2YWx1ZSkpXG5cdFx0XHQ6IGRhdGUuc2V0SG91cnMoTnVtYmVyKDApKTtcblx0fSxcblx0XCIlSFwiOiAoZGF0ZTogRGF0ZSwgdmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdGNvbnN0IGNoZWNrID0gLyheWzAtMl1bMC05XSQpL2kudGVzdCh2YWx1ZSk7XG5cdFx0Y2hlY2sgPyBkYXRlLnNldEhvdXJzKE51bWJlcih2YWx1ZSkpIDogZGF0ZS5zZXRIb3VycyhOdW1iZXIoMCkpO1xuXHR9LFxuXHRcIiVHXCI6IChkYXRlOiBEYXRlLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG5cdFx0Y29uc3QgY2hlY2sgPSAvKF5bMS05XVswLTldPyQpL2kudGVzdCh2YWx1ZSk7XG5cdFx0Y2hlY2sgPyBkYXRlLnNldEhvdXJzKE51bWJlcih2YWx1ZSkpIDogZGF0ZS5zZXRIb3VycyhOdW1iZXIoMCkpO1xuXHR9LFxuXHRcIiVpXCI6IChkYXRlOiBEYXRlLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG5cdFx0Y29uc3QgY2hlY2sgPSAvKF4oWzAtNV1bMC05XSkkKS9pLnRlc3QodmFsdWUpO1xuXHRcdGNoZWNrID8gZGF0ZS5zZXRNaW51dGVzKE51bWJlcih2YWx1ZSkpIDogZGF0ZS5zZXRNaW51dGVzKE51bWJlcigwKSk7XG5cdH0sXG5cdFwiJXNcIjogKGRhdGU6IERhdGUsIHZhbHVlOiBzdHJpbmcpID0+IHtcblx0XHRjb25zdCBjaGVjayA9IC8oXihbMC01XVswLTldKSQpL2kudGVzdCh2YWx1ZSk7XG5cdFx0Y2hlY2sgPyBkYXRlLnNldFNlY29uZHMoTnVtYmVyKHZhbHVlKSkgOiBkYXRlLnNldFNlY29uZHMoTnVtYmVyKDApKTtcblx0fSxcblx0XCIlYVwiOiAoZGF0ZTogRGF0ZSwgdmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdGlmICh2YWx1ZSA9PT0gXCJwbVwiKSB7XG5cdFx0XHRkYXRlLnNldEhvdXJzKGRhdGUuZ2V0SG91cnMoKSArIDEyKTtcblx0XHR9XG5cdH0sXG5cdFwiJUFcIjogKGRhdGU6IERhdGUsIHZhbHVlOiBzdHJpbmcpID0+IHtcblx0XHRpZiAodmFsdWUgPT09IFwiUE1cIikge1xuXHRcdFx0ZGF0ZS5zZXRIb3VycyhkYXRlLmdldEhvdXJzKCkgKyAxMik7XG5cdFx0fVxuXHR9LFxufTtcblxuZW51bSBUb2tlblR5cGUge1xuXHRzZXBhcmF0b3IsXG5cdGRhdGVQYXJ0LFxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUZvcm1hdChmb3JtYXQ6IHN0cmluZyk6IElUb2tlbltdIHtcblx0Y29uc3QgdG9rZW5zID0gW107XG5cdGxldCBjdXJyZW50U2VwYXJhdG9yID0gXCJcIjtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBmb3JtYXQubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoZm9ybWF0W2ldID09PSBcIiVcIikge1xuXHRcdFx0aWYgKGN1cnJlbnRTZXBhcmF0b3IubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dHlwZTogVG9rZW5UeXBlLnNlcGFyYXRvcixcblx0XHRcdFx0XHR2YWx1ZTogY3VycmVudFNlcGFyYXRvcixcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGN1cnJlbnRTZXBhcmF0b3IgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR0eXBlOiBUb2tlblR5cGUuZGF0ZVBhcnQsXG5cdFx0XHRcdHZhbHVlOiBmb3JtYXRbaV0gKyBmb3JtYXRbaSArIDFdLFxuXHRcdFx0fSk7XG5cdFx0XHRpKys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1cnJlbnRTZXBhcmF0b3IgKz0gZm9ybWF0W2ldO1xuXHRcdH1cblx0fVxuXHRpZiAoY3VycmVudFNlcGFyYXRvci5sZW5ndGggPiAwKSB7XG5cdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0dHlwZTogVG9rZW5UeXBlLnNlcGFyYXRvcixcblx0XHRcdHZhbHVlOiBjdXJyZW50U2VwYXJhdG9yLFxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiB0b2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtYXR0ZWREYXRlKGZvcm1hdDogc3RyaW5nLCBkYXRlOiBEYXRlKTogc3RyaW5nIHtcblx0cmV0dXJuIHRva2VuaXplRm9ybWF0KGZvcm1hdCkucmVkdWNlKChyZXMsIHRva2VuKSA9PiB7XG5cdFx0aWYgKHRva2VuLnR5cGUgPT09IFRva2VuVHlwZS5zZXBhcmF0b3IpIHtcblx0XHRcdHJldHVybiByZXMgKyB0b2tlbi52YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCFmb3JtYXR0ZXJzW3Rva2VuLnZhbHVlXSkge1xuXHRcdFx0XHRyZXR1cm4gcmVzO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlcyArIGZvcm1hdHRlcnNbdG9rZW4udmFsdWVdKGRhdGUpO1xuXHRcdH1cblx0fSwgXCJcIik7XG59XG5cbmludGVyZmFjZSBJVG9rZW4ge1xuXHR0eXBlOiBUb2tlblR5cGU7XG5cdHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdUb0RhdGUoc3RyOiBzdHJpbmcsIGZvcm1hdDogc3RyaW5nLCB2YWxpZGF0ZT86IGJvb2xlYW4pOiBhbnkge1xuXHRpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikge1xuXHRcdHJldHVybjtcblx0fVxuXHRjb25zdCB0b2tlbnMgPSB0b2tlbml6ZUZvcm1hdChmb3JtYXQpO1xuXHRjb25zdCBkYXRlUGFydHMgPSBbXTtcblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGZvcm1hdHRlciA9IG51bGw7XG5cblx0Zm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcblx0XHRpZiAodG9rZW4udHlwZSA9PT0gVG9rZW5UeXBlLnNlcGFyYXRvcikge1xuXHRcdFx0Y29uc3Qgc2VwcmF0b3JJbmRleCA9IHN0ci5pbmRleE9mKHRva2VuLnZhbHVlLCBpbmRleCk7XG5cdFx0XHRpZiAoc2VwcmF0b3JJbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0aWYgKHZhbGlkYXRlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcIkluY29ycmVjdCBkYXRlLCBzZWUgZG9jczogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vc3VpdGUvY2FsZW5kYXJfX2FwaV9fY2FsZW5kYXJfZGF0ZWZvcm1hdF9jb25maWcuaHRtbFwiXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZm9ybWF0dGVyKSB7XG5cdFx0XHRcdGRhdGVQYXJ0cy5wdXNoKHtcblx0XHRcdFx0XHRmb3JtYXR0ZXIsXG5cdFx0XHRcdFx0dmFsdWU6IHN0ci5zbGljZShpbmRleCwgc2VwcmF0b3JJbmRleCksXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRmb3JtYXR0ZXIgPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0aW5kZXggPSBzZXByYXRvckluZGV4ICsgdG9rZW4udmFsdWUubGVuZ3RoO1xuXHRcdH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gVG9rZW5UeXBlLmRhdGVQYXJ0KSB7XG5cdFx0XHRmb3JtYXR0ZXIgPSB0b2tlbi52YWx1ZTtcblx0XHR9XG5cdH1cblx0aWYgKGZvcm1hdHRlciA9PT0gXCIlQVwiIHx8IGZvcm1hdHRlciA9PT0gXCIlYVwiKSB7XG5cdFx0ZGF0ZVBhcnRzLnVuc2hpZnQoe1xuXHRcdFx0Zm9ybWF0dGVyLFxuXHRcdFx0dmFsdWU6IHN0ci5zbGljZShpbmRleCksXG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZm9ybWF0dGVyKSB7XG5cdFx0ZGF0ZVBhcnRzLnB1c2goe1xuXHRcdFx0Zm9ybWF0dGVyLFxuXHRcdFx0dmFsdWU6IHN0ci5zbGljZShpbmRleCksXG5cdFx0fSk7XG5cdH1cblxuXHRkYXRlUGFydHMucmV2ZXJzZSgpO1xuXG5cdGxldCBkYXRlRm9ybWF0O1xuXHRmb3IgKGNvbnN0IGRhdGVQYXJ0IG9mIGRhdGVQYXJ0cykge1xuXHRcdGlmIChkYXRlUGFydC5mb3JtYXR0ZXIgPT09IFwiJUFcIiB8fCBkYXRlUGFydC5mb3JtYXR0ZXIgPT09IFwiJWFcIikge1xuXHRcdFx0ZGF0ZUZvcm1hdCA9IGRhdGVQYXJ0LnZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgwKTtcblx0Zm9yIChjb25zdCBkYXRlUGFydCBvZiBkYXRlUGFydHMpIHtcblx0XHRpZiAoc2V0Rm9ybWF0dGVyc1tkYXRlUGFydC5mb3JtYXR0ZXJdKSB7XG5cdFx0XHRzZXRGb3JtYXR0ZXJzW2RhdGVQYXJ0LmZvcm1hdHRlcl0oZGF0ZSwgZGF0ZVBhcnQudmFsdWUsIGRhdGVGb3JtYXQpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWxpZGF0ZSA/IHRydWUgOiBkYXRlO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0ZUhlbHBlciB7XG5cdHN0YXRpYyBudWxsVGltZXN0YW1wRGF0ZSA9IG5ldyBEYXRlKDApO1xuXHRzdGF0aWMgY29weShkOiBEYXRlKTogRGF0ZSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKGQpO1xuXHR9XG5cdHN0YXRpYyBmcm9tWWVhcih5ZWFyOiBudW1iZXIpOiBEYXRlIHtcblx0XHRyZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgMSk7XG5cdH1cblx0c3RhdGljIGZyb21ZZWFyQW5kTW9udGgoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKTogRGF0ZSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKTtcblx0fVxuXHRzdGF0aWMgd2Vla1N0YXJ0KGQ6IERhdGUsIGZpcnN0V2Vla2RheTogMSB8IDApOiBEYXRlIHtcblx0XHRjb25zdCBkaWZmID0gKGQuZ2V0RGF5KCkgKyA3IC0gZmlyc3RXZWVrZGF5KSAlIDc7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCBkLmdldERhdGUoKSAtIGRpZmYpO1xuXHR9XG5cdHN0YXRpYyBtb250aFN0YXJ0KGQ6IERhdGUpOiBEYXRlIHtcblx0XHRyZXR1cm4gbmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCksIDEpO1xuXHR9XG5cdHN0YXRpYyB5ZWFyU3RhcnQoZDogRGF0ZSk6IERhdGUge1xuXHRcdHJldHVybiBuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuXHR9XG5cdHN0YXRpYyBkYXlTdGFydChkOiBEYXRlKTogRGF0ZSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCBkLmdldERhdGUoKSk7XG5cdH1cblx0c3RhdGljIGFkZERheShkOiBEYXRlLCBjb3VudCA9IDEpOiBEYXRlIHtcblx0XHRyZXR1cm4gbmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCksIGQuZ2V0RGF0ZSgpICsgY291bnQpO1xuXHR9XG5cdHN0YXRpYyBhZGRNb250aChkOiBEYXRlLCBjb3VudCA9IDEpOiBEYXRlIHtcblx0XHRyZXR1cm4gbmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCkgKyBjb3VudCk7XG5cdH1cblx0c3RhdGljIGFkZFllYXIoZDogRGF0ZSwgY291bnQgPSAxKTogRGF0ZSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSArIGNvdW50LCBkLmdldE1vbnRoKCkpO1xuXHR9XG5cdHN0YXRpYyB3aXRoSG91cnNBbmRNaW51dGVzKGQ6IERhdGUsIGhvdXJzOiBudW1iZXIsIG1pbnV0ZXM6IG51bWJlciwgZGF0ZUZvcm1hdDogYm9vbGVhbik6IERhdGUge1xuXHRcdGlmIChkYXRlRm9ybWF0ID09PSB1bmRlZmluZWQgfHwgKCFkYXRlRm9ybWF0ICYmIGhvdXJzID09PSAxMikgfHwgKGRhdGVGb3JtYXQgJiYgaG91cnMgIT09IDEyKSkge1xuXHRcdFx0cmV0dXJuIG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCBkLmdldERhdGUoKSwgaG91cnMsIG1pbnV0ZXMpO1xuXHRcdH0gZWxzZSBpZiAoZGF0ZUZvcm1hdCAmJiBob3VycyA9PT0gMTIpIHtcblx0XHRcdHJldHVybiBuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSwgZC5nZXREYXRlKCksIDAsIG1pbnV0ZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCksIGQuZ2V0RGF0ZSgpLCBob3VycyArIDEyLCBtaW51dGVzKTtcblx0XHR9XG5cdH1cblx0c3RhdGljIHNldE1vbnRoKGQ6IERhdGUsIG1vbnRoOiBudW1iZXIpOiB2b2lkIHtcblx0XHRkLnNldE1vbnRoKG1vbnRoKTtcblx0fVxuXHRzdGF0aWMgc2V0WWVhcihkOiBEYXRlLCB5ZWFyOiBudW1iZXIpOiB2b2lkIHtcblx0XHRkLnNldEZ1bGxZZWFyKHllYXIpO1xuXHR9XG5cdHN0YXRpYyBtZXJnZUhvdXJzQW5kTWludXRlcyhzb3VyY2U6IERhdGUsIHRhcmdldDogRGF0ZSk6IERhdGUge1xuXHRcdHJldHVybiBuZXcgRGF0ZShcblx0XHRcdHNvdXJjZS5nZXRGdWxsWWVhcigpLFxuXHRcdFx0c291cmNlLmdldE1vbnRoKCksXG5cdFx0XHRzb3VyY2UuZ2V0RGF0ZSgpLFxuXHRcdFx0dGFyZ2V0LmdldEhvdXJzKCksXG5cdFx0XHR0YXJnZXQuZ2V0TWludXRlcygpXG5cdFx0KTtcblx0fVxuXHRzdGF0aWMgaXNXZWVrRW5kKGQ6IERhdGUpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gZC5nZXREYXkoKSA9PT0gMCB8fCBkLmdldERheSgpID09PSA2O1xuXHR9XG5cdHN0YXRpYyBnZXRUd2Vsd2VZZWFycyhkOiBEYXRlKTogbnVtYmVyW10ge1xuXHRcdGNvbnN0IHkgPSBkLmdldEZ1bGxZZWFyKCk7XG5cdFx0Y29uc3QgZmlyc3RZZWFyID0geSAtICh5ICUgMTIpO1xuXHRcdHJldHVybiByYW5nZShmaXJzdFllYXIsIGZpcnN0WWVhciArIDExKTtcblx0fVxuXHRzdGF0aWMgZ2V0V2Vla051bWJlcihkOiBEYXRlKTogbnVtYmVyIHtcblx0XHRpZiAoZC5nZXREYXkoKSAhPT0gNikge1xuXHRcdFx0ZCA9IERhdGVIZWxwZXIuYWRkRGF5KGQsIDYgLSBkLmdldERheSgpKTtcblx0XHR9XG5cdFx0Y29uc3QgZGF5TVMgPSAyNCAqIDYwICogNjAgKiAxMDAwO1xuXHRcdGNvbnN0IG9yZGluYWwgPSAoZC52YWx1ZU9mKCkgLSBEYXRlSGVscGVyLnllYXJTdGFydChkKS52YWx1ZU9mKCkpIC8gZGF5TVM7XG5cdFx0cmV0dXJuIE1hdGguZmxvb3IoKG9yZGluYWwgLSBkLmdldERheSgpICsgMTApIC8gNyk7XG5cdH1cblx0c3RhdGljIGlzU2FtZURheShkMTogRGF0ZSwgZDI6IERhdGUpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0ZDEuZ2V0RnVsbFllYXIoKSA9PT0gZDIuZ2V0RnVsbFllYXIoKSAmJlxuXHRcdFx0ZDEuZ2V0TW9udGgoKSA9PT0gZDIuZ2V0TW9udGgoKSAmJlxuXHRcdFx0ZDEuZ2V0RGF0ZSgpID09PSBkMi5nZXREYXRlKClcblx0XHQpO1xuXHR9XG5cdHN0YXRpYyB0b0RhdGVPYmplY3QoZGF0ZTogRGF0ZSB8IHN0cmluZywgZGF0ZUZvcm1hdDogc3RyaW5nKTogRGF0ZSB7XG5cdFx0aWYgKHR5cGVvZiBkYXRlID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4gc3RyaW5nVG9EYXRlKGRhdGUsIGRhdGVGb3JtYXQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbmV3IERhdGUoZGF0ZSk7XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgKiBhcyBkb20gZnJvbSBcImRvbXZtL2Rpc3QvZGV2L2RvbXZtLmRldi5qc1wiO1xuZXhwb3J0IGNvbnN0IGVsID0gZG9tLmRlZmluZUVsZW1lbnQ7XG5leHBvcnQgY29uc3Qgc3YgPSBkb20uZGVmaW5lU3ZnRWxlbWVudDtcbmV4cG9ydCBjb25zdCB2aWV3ID0gZG9tLmRlZmluZVZpZXc7XG5leHBvcnQgY29uc3QgY3JlYXRlID0gZG9tLmNyZWF0ZVZpZXc7XG5leHBvcnQgY29uc3QgaW5qZWN0ID0gZG9tLmluamVjdFZpZXc7XG5leHBvcnQgY29uc3QgS0VZRURfTElTVCA9IGRvbS5LRVlFRF9MSVNUO1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZUhlbHAoKSB7XG5cdGRvbS5ERVZNT0RFLm11dGF0aW9ucyA9IGZhbHNlO1xuXHRkb20uREVWTU9ERS53YXJuaW5ncyA9IGZhbHNlO1xuXHRkb20uREVWTU9ERS52ZXJib3NlID0gZmFsc2U7XG5cdGRvbS5ERVZNT0RFLlVOS0VZRURfSU5QVVQgPSBmYWxzZTtcbn1cblxuZXhwb3J0IHR5cGUgVk5vZGUgPSBhbnk7XG5leHBvcnQgaW50ZXJmYWNlIElEb21WaWV3IHtcblx0cmVkcmF3KCk7XG5cdG1vdW50KGVsOiBIVE1MRWxlbWVudCk7XG59XG5leHBvcnQgaW50ZXJmYWNlIElEb21SZW5kZXIge1xuXHRyZW5kZXIodmlldzogSURvbVZpZXcsIGRhdGE6IGFueSk6IFZOb2RlO1xufVxuZXhwb3J0IGludGVyZmFjZSBJVmlld0hhc2gge1xuXHRbbmFtZTogc3RyaW5nXTogSURvbVJlbmRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZXIoaGFuZGxlcikge1xuXHRjb25zdCByZXNpemUgPSAod2luZG93IGFzIGFueSkuUmVzaXplT2JzZXJ2ZXI7XG5cdGNvbnN0IGFjdGl2ZUhhbmRsZXIgPSBub2RlID0+IHtcblx0XHRjb25zdCBoZWlnaHQgPSBub2RlLmVsLm9mZnNldEhlaWdodDtcblx0XHRjb25zdCB3aWR0aCA9IG5vZGUuZWwub2Zmc2V0V2lkdGg7XG5cdFx0aGFuZGxlcih3aWR0aCwgaGVpZ2h0KTtcblx0fTtcblxuXHRpZiAocmVzaXplKSB7XG5cdFx0cmV0dXJuIGVsKFwiZGl2LmRoeC1yZXNpemUtb2JzZXJ2ZXJcIiwge1xuXHRcdFx0X2hvb2tzOiB7XG5cdFx0XHRcdGRpZEluc2VydChub2RlKSB7XG5cdFx0XHRcdFx0bmV3IHJlc2l6ZSgoKSA9PiBhY3RpdmVIYW5kbGVyKG5vZGUpKS5vYnNlcnZlKG5vZGUuZWwpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiBlbChcImlmcmFtZS5kaHgtcmVzaXplLW9ic2VydmVyXCIsIHtcblx0XHRfaG9va3M6IHtcblx0XHRcdGRpZEluc2VydChub2RlKSB7XG5cdFx0XHRcdG5vZGUuZWwuY29udGVudFdpbmRvdy5vbnJlc2l6ZSA9ICgpID0+IGFjdGl2ZUhhbmRsZXIobm9kZSk7XG5cdFx0XHRcdGFjdGl2ZUhhbmRsZXIobm9kZSk7XG5cdFx0XHR9LFxuXHRcdH0sXG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzaXplSGFuZGxlcihjb250YWluZXIsIGhhbmRsZXIpIHtcblx0cmV0dXJuIGNyZWF0ZSh7XG5cdFx0cmVuZGVyKCkge1xuXHRcdFx0cmV0dXJuIHJlc2l6ZXIoaGFuZGxlcik7XG5cdFx0fSxcblx0fSkubW91bnQoY29udGFpbmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF3YWl0UmVkcmF3KCk6IFByb21pc2U8YW55PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZShyZXMgPT4ge1xuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG5cdFx0XHRyZXMoKTtcblx0XHR9KTtcblx0fSk7XG59XG4iLCJleHBvcnQgdHlwZSBDYWxsYmFjayA9ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuZXhwb3J0IGludGVyZmFjZSBJRXZlbnRTeXN0ZW08RSwgVCBleHRlbmRzIElFdmVudEhhbmRsZXJzTWFwID0gSUV2ZW50SGFuZGxlcnNNYXA+IHtcblx0Y29udGV4dDogYW55O1xuXHRldmVudHM6IElFdmVudHM7XG5cdG9uPEsgZXh0ZW5kcyBrZXlvZiBUPihuYW1lOiBLLCBjYWxsYmFjazogVFtLXSwgY29udGV4dD86IGFueSk7XG5cdGRldGFjaChuYW1lOiBFLCBjb250ZXh0PzogYW55KTtcblx0Y2xlYXIoKTogdm9pZDtcblx0ZmlyZTxLIGV4dGVuZHMga2V5b2YgVD4obmFtZTogSywgYXJncz86IEFyZ3VtZW50VHlwZXM8VFtLXT4pOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgSUV2ZW50IHtcblx0Y2FsbGJhY2s6IENhbGxiYWNrO1xuXHRjb250ZXh0OiBhbnk7XG59XG5pbnRlcmZhY2UgSUV2ZW50cyB7XG5cdFtrZXk6IHN0cmluZ106IElFdmVudFtdO1xufVxuXG5pbnRlcmZhY2UgSUV2ZW50SGFuZGxlcnNNYXAge1xuXHRba2V5OiBzdHJpbmddOiBDYWxsYmFjaztcbn1cbnR5cGUgQXJndW1lbnRUeXBlczxGIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+ID0gRiBleHRlbmRzICguLi5hcmdzOiBpbmZlciBBKSA9PiBhbnkgPyBBIDogbmV2ZXI7XG5cbmV4cG9ydCBjbGFzcyBFdmVudFN5c3RlbTxFIGV4dGVuZHMgc3RyaW5nLCBUIGV4dGVuZHMgSUV2ZW50SGFuZGxlcnNNYXAgPSBJRXZlbnRIYW5kbGVyc01hcD5cblx0aW1wbGVtZW50cyBJRXZlbnRTeXN0ZW08RSwgVD4ge1xuXHRwdWJsaWMgZXZlbnRzOiBJRXZlbnRzO1xuXHRwdWJsaWMgY29udGV4dDogYW55O1xuXG5cdGNvbnN0cnVjdG9yKGNvbnRleHQ/OiBhbnkpIHtcblx0XHR0aGlzLmV2ZW50cyA9IHt9O1xuXHRcdHRoaXMuY29udGV4dCA9IGNvbnRleHQgfHwgdGhpcztcblx0fVxuXHRvbjxLIGV4dGVuZHMga2V5b2YgVD4obmFtZTogSywgY2FsbGJhY2s6IFRbS10sIGNvbnRleHQ/OiBhbnkpIHtcblx0XHRjb25zdCBldmVudDogc3RyaW5nID0gKG5hbWUgYXMgc3RyaW5nKS50b0xvd2VyQ2FzZSgpO1xuXHRcdHRoaXMuZXZlbnRzW2V2ZW50XSA9IHRoaXMuZXZlbnRzW2V2ZW50XSB8fCBbXTtcblx0XHR0aGlzLmV2ZW50c1tldmVudF0ucHVzaCh7IGNhbGxiYWNrLCBjb250ZXh0OiBjb250ZXh0IHx8IHRoaXMuY29udGV4dCB9KTtcblx0fVxuXHRkZXRhY2gobmFtZTogRSwgY29udGV4dD86IGFueSkge1xuXHRcdGNvbnN0IGV2ZW50OiBzdHJpbmcgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRjb25zdCBlU3RhY2sgPSB0aGlzLmV2ZW50c1tldmVudF07XG5cdFx0aWYgKGNvbnRleHQgJiYgZVN0YWNrICYmIGVTdGFjay5sZW5ndGgpIHtcblx0XHRcdGZvciAobGV0IGkgPSBlU3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0aWYgKGVTdGFja1tpXS5jb250ZXh0ID09PSBjb250ZXh0KSB7XG5cdFx0XHRcdFx0ZVN0YWNrLnNwbGljZShpLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmV2ZW50c1tldmVudF0gPSBbXTtcblx0XHR9XG5cdH1cblx0ZmlyZTxLIGV4dGVuZHMga2V5b2YgVD4obmFtZTogSywgYXJnczogQXJndW1lbnRUeXBlczxUW0tdPik6IGJvb2xlYW4ge1xuXHRcdGlmICh0eXBlb2YgYXJncyA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0YXJncyA9IFtdIGFzIGFueTtcblx0XHR9XG5cblx0XHRjb25zdCBldmVudDogc3RyaW5nID0gKG5hbWUgYXMgc3RyaW5nKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKHRoaXMuZXZlbnRzW2V2ZW50XSkge1xuXHRcdFx0Y29uc3QgcmVzID0gdGhpcy5ldmVudHNbZXZlbnRdLm1hcChlID0+IGUuY2FsbGJhY2suYXBwbHkoZS5jb250ZXh0LCBhcmdzKSk7XG5cdFx0XHRyZXR1cm4gIXJlcy5pbmNsdWRlcyhmYWxzZSk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGNsZWFyKCkge1xuXHRcdHRoaXMuZXZlbnRzID0ge307XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEV2ZW50c01peGluKG9iajogYW55KSB7XG5cdG9iaiA9IG9iaiB8fCB7fTtcblx0Y29uc3QgZXZlbnRTeXN0ZW0gPSBuZXcgRXZlbnRTeXN0ZW0ob2JqKTtcblx0b2JqLmRldGFjaEV2ZW50ID0gZXZlbnRTeXN0ZW0uZGV0YWNoLmJpbmQoZXZlbnRTeXN0ZW0pO1xuXHRvYmouYXR0YWNoRXZlbnQgPSBldmVudFN5c3RlbS5vbi5iaW5kKGV2ZW50U3lzdGVtKTtcblx0b2JqLmNhbGxFdmVudCA9IGV2ZW50U3lzdGVtLmZpcmUuYmluZChldmVudFN5c3RlbSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUV2ZW50RmFjYWRlIHtcblx0YXR0YWNoRXZlbnQ6IGFueTtcblx0Y2FsbEV2ZW50OiBhbnk7XG59XG4iLCJpbXBvcnQgeyBhbnlGdW5jdGlvbiB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b05vZGUobm9kZTogc3RyaW5nIHwgSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XG5cdHJldHVybiB0eXBlb2Ygbm9kZSA9PT0gXCJzdHJpbmdcIlxuXHRcdD8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm9kZSkgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihub2RlKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGh4X3Jvb3RfaWQ9JHtub2RlfV1gKT8ucGFyZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5XG5cdFx0OiBub2RlIHx8IGRvY3VtZW50LmJvZHk7XG59XG5cbnR5cGUgZXZlbnRQcmVwYXJlID0gKGV2OiBFdmVudCkgPT4gYW55O1xuXG5pbnRlcmZhY2UgSUhhbmRsZXJIYXNoIHtcblx0W25hbWU6IHN0cmluZ106ICguLi5hcmdzOiBhbnlbXSkgPT4gYm9vbGVhbiB8IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmVudEhhbmRsZXIocHJlcGFyZTogZXZlbnRQcmVwYXJlLCBoYXNoOiBJSGFuZGxlckhhc2gsIGFmdGVyQ2FsbD86IGFueUZ1bmN0aW9uKSB7XG5cdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhoYXNoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oZXY6IEV2ZW50KSB7XG5cdFx0Y29uc3QgZGF0YSA9IHByZXBhcmUoZXYpO1xuXHRcdGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGxldCBub2RlID0gZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50IHwgU1ZHRWxlbWVudDtcblxuXHRcdFx0b3V0ZXJfYmxvY2s6IHdoaWxlIChub2RlKSB7XG5cdFx0XHRcdGNvbnN0IGNzc3N0cmluZyA9IG5vZGUuZ2V0QXR0cmlidXRlID8gbm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiIDogXCJcIjtcblx0XHRcdFx0aWYgKGNzc3N0cmluZy5sZW5ndGgpIHtcblx0XHRcdFx0XHRjb25zdCBjc3MgPSBjc3NzdHJpbmcuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwga2V5cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0aWYgKGNzcy5pbmNsdWRlcyhrZXlzW2pdKSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoaGFzaFtrZXlzW2pdXShldiwgZGF0YSkgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGVsc2UgYnJlYWsgb3V0ZXJfYmxvY2s7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdG5vZGUgPSBub2RlLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQgfCBTVkdFbGVtZW50O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChhZnRlckNhbGwpIGFmdGVyQ2FsbChldik7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsb2NhdGVOb2RlKHRhcmdldDogRXZlbnQgfCBFbGVtZW50LCBhdHRyID0gXCJkaHhfaWRcIiwgZGlyID0gXCJ0YXJnZXRcIik6IEVsZW1lbnQge1xuXHRpZiAodGFyZ2V0IGluc3RhbmNlb2YgRXZlbnQpIHtcblx0XHR0YXJnZXQgPSB0YXJnZXRbZGlyXSBhcyBIVE1MRWxlbWVudDtcblx0fVxuXHR3aGlsZSAodGFyZ2V0KSB7XG5cdFx0aWYgKHRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyKSkge1xuXHRcdFx0cmV0dXJuIHRhcmdldDtcblx0XHR9XG5cdFx0dGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQ7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2F0ZSh0YXJnZXQ6IEV2ZW50IHwgRWxlbWVudCwgYXR0ciA9IFwiZGh4X2lkXCIpOiBzdHJpbmcge1xuXHRjb25zdCBub2RlID0gbG9jYXRlTm9kZSh0YXJnZXQsIGF0dHIpO1xuXHRyZXR1cm4gbm9kZSA/IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHIpIDogXCJcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2F0ZU5vZGVCeUNsYXNzTmFtZSh0YXJnZXQ6IEV2ZW50IHwgRWxlbWVudCwgY2xhc3NOYW1lPzogc3RyaW5nKTogRWxlbWVudCB7XG5cdGlmICh0YXJnZXQgaW5zdGFuY2VvZiBFdmVudCkge1xuXHRcdHRhcmdldCA9IHRhcmdldC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdH1cblx0d2hpbGUgKHRhcmdldCkge1xuXHRcdGlmIChjbGFzc05hbWUpIHtcblx0XHRcdGlmICh0YXJnZXQuY2xhc3NMaXN0ICYmIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGh4X2lkXCIpKSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblx0XHR0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudDtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm94KGVsZW0pIHtcblx0Y29uc3QgYm94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0Y29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG5cblx0Y29uc3Qgc2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGJvZHkuc2Nyb2xsVG9wO1xuXHRjb25zdCBzY3JvbGxMZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGJvZHkuc2Nyb2xsTGVmdDtcblxuXHRjb25zdCB0b3AgPSBib3gudG9wICsgc2Nyb2xsVG9wO1xuXHRjb25zdCBsZWZ0ID0gYm94LmxlZnQgKyBzY3JvbGxMZWZ0O1xuXHRjb25zdCByaWdodCA9IGJvZHkub2Zmc2V0V2lkdGggLSBib3gucmlnaHQ7XG5cdGNvbnN0IGJvdHRvbSA9IGJvZHkub2Zmc2V0SGVpZ2h0IC0gYm94LmJvdHRvbTtcblx0Y29uc3Qgd2lkdGggPSBib3gucmlnaHQgLSBib3gubGVmdDtcblx0Y29uc3QgaGVpZ2h0ID0gYm94LmJvdHRvbSAtIGJveC50b3A7XG5cblx0cmV0dXJuIHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCB3aWR0aCwgaGVpZ2h0IH07XG59XG5cbmxldCBzY3JvbGxXaWR0aCA9IC0xO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbGJhcldpZHRoKCk6IG51bWJlciB7XG5cdGlmIChzY3JvbGxXaWR0aCA+IC0xKSB7XG5cdFx0cmV0dXJuIHNjcm9sbFdpZHRoO1xuXHR9XG5cblx0Y29uc3Qgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuXHRzY3JvbGxEaXYuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246IGFic29sdXRlO2xlZnQ6IC05OTk5OXB4O292ZXJmbG93OnNjcm9sbDt3aWR0aDogMTAwcHg7aGVpZ2h0OiAxMDBweDtcIjtcblx0c2Nyb2xsV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG5cdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcblx0cmV0dXJuIHNjcm9sbFdpZHRoO1xufVxuXG5sZXQgc2Nyb2xsSGVpZ2h0ID0gLTE7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFySGVpZ2h0KCk6IG51bWJlciB7XG5cdGlmIChzY3JvbGxIZWlnaHQgPiAtMSkge1xuXHRcdHJldHVybiBzY3JvbGxIZWlnaHQ7XG5cdH1cblxuXHRjb25zdCBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG5cdHNjcm9sbERpdi5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjogYWJzb2x1dGU7bGVmdDogLTk5OTk5cHg7b3ZlcmZsb3c6c2Nyb2xsO3dpZHRoOiAxMDBweDtoZWlnaHQ6IDEwMHB4O1wiO1xuXHRzY3JvbGxIZWlnaHQgPSBzY3JvbGxEaXYub2Zmc2V0SGVpZ2h0IC0gc2Nyb2xsRGl2LmNsaWVudEhlaWdodDtcblx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuXHRyZXR1cm4gc2Nyb2xsSGVpZ2h0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGaXRUYXJnZXQge1xuXHR0b3A6IG51bWJlcjtcblx0bGVmdDogbnVtYmVyO1xuXHR3aWR0aDogbnVtYmVyO1xuXHRoZWlnaHQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRml0UG9zaXRpb24ge1xuXHRsZWZ0OiBudW1iZXI7XG5cdHJpZ2h0OiBudW1iZXI7XG5cdHRvcDogbnVtYmVyO1xuXHRib3R0b206IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRml0UG9zaXRpb25Db25maWcge1xuXHRtb2RlPzogUG9zaXRpb247XG5cdGF1dG8/OiBib29sZWFuO1xuXHRjZW50ZXJpbmc/OiBib29sZWFuO1xuXHR3aWR0aDogbnVtYmVyO1xuXHRoZWlnaHQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgSUFsaWduID0gXCJsZWZ0XCIgfCBcImNlbnRlclwiIHwgXCJyaWdodFwiO1xuXG5leHBvcnQgdHlwZSBQb3NpdGlvbiA9IFwibGVmdFwiIHwgXCJyaWdodFwiIHwgXCJib3R0b21cIiB8IFwidG9wXCI7XG5cbmV4cG9ydCB0eXBlIEZsZXhEaXJlY3Rpb24gPSBcInN0YXJ0XCIgfCBcImNlbnRlclwiIHwgXCJlbmRcIiB8IFwiYmV0d2VlblwiIHwgXCJhcm91bmRcIiB8IFwiZXZlbmx5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lFKCkge1xuXHRjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXHRyZXR1cm4gdWEuaW5jbHVkZXMoXCJNU0lFIFwiKSB8fCB1YS5pbmNsdWRlcyhcIlRyaWRlbnQvXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG5cdGNvbnN0IGNoZWNrID0gc3RyID0+IHN0ci50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcblx0Y29uc3QgY2hyb21lID0gY2hlY2soL0Nocm9tZS8pO1xuXHRjb25zdCBmaXJlZm94ID0gY2hlY2soL0ZpcmVmb3gvKTtcblx0cmV0dXJuICFjaHJvbWUgJiYgIWZpcmVmb3ggJiYgY2hlY2soL1NhZmFyaS8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGaXJlZm94KCkge1xuXHRjb25zdCBjaGVjayA9IHN0ciA9PiBzdHIudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cdGNvbnN0IGNocm9tZSA9IGNoZWNrKC9DaHJvbWUvKTtcblx0Y29uc3Qgc2FmYXJpID0gY2hlY2soL1NhZmFyaS8pO1xuXHRyZXR1cm4gIWNocm9tZSAmJiAhc2FmYXJpICYmIGNoZWNrKC9GaXJlZm94Lyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWFsUG9zaXRpb24obm9kZTogSFRNTEVsZW1lbnQpOiBJRml0UG9zaXRpb24ge1xuXHRjb25zdCByZWN0cyA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdHJldHVybiB7XG5cdFx0bGVmdDogcmVjdHMubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRyaWdodDogcmVjdHMucmlnaHQgKyB3aW5kb3cucGFnZVhPZmZzZXQsXG5cdFx0dG9wOiByZWN0cy50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdFx0Ym90dG9tOiByZWN0cy5ib3R0b20gKyB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdH07XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd0JvcmRlcnMoKSB7XG5cdHJldHVybiB7XG5cdFx0cmlnaHRCb3JkZXI6IHdpbmRvdy5wYWdlWE9mZnNldCArIHdpbmRvdy5pbm5lcldpZHRoLFxuXHRcdGJvdHRvbUJvcmRlcjogd2luZG93LnBhZ2VZT2Zmc2V0ICsgd2luZG93LmlubmVySGVpZ2h0LFxuXHR9O1xufVxuXG5mdW5jdGlvbiBob3Jpem9udGFsQ2VudGVyaW5nKHBvczogSUZpdFBvc2l0aW9uLCB3aWR0aDogbnVtYmVyLCByaWdodEJvcmRlcjogbnVtYmVyKSB7XG5cdGNvbnN0IG5vZGVXaWR0aCA9IHBvcy5yaWdodCAtIHBvcy5sZWZ0O1xuXHRjb25zdCBkaWZmID0gKHdpZHRoIC0gbm9kZVdpZHRoKSAvIDI7XG5cblx0Y29uc3QgbGVmdCA9IHBvcy5sZWZ0IC0gZGlmZjtcblx0Y29uc3QgcmlnaHQgPSBwb3MucmlnaHQgKyBkaWZmO1xuXG5cdGlmIChsZWZ0ID49IDAgJiYgcmlnaHQgPD0gcmlnaHRCb3JkZXIpIHtcblx0XHRyZXR1cm4gbGVmdDtcblx0fVxuXG5cdGlmIChsZWZ0IDwgMCkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0cmV0dXJuIHJpZ2h0Qm9yZGVyIC0gd2lkdGg7XG59XG5cbmZ1bmN0aW9uIHZlcnRpY2FsQ2VudGVyaW5nKHBvczogSUZpdFBvc2l0aW9uLCBoZWlnaHQ6IG51bWJlciwgYm90dG9tQm9yZGVyOiBudW1iZXIpIHtcblx0Y29uc3Qgbm9kZUhlaWdodCA9IHBvcy5ib3R0b20gLSBwb3MudG9wO1xuXHRjb25zdCBkaWZmID0gKGhlaWdodCAtIG5vZGVIZWlnaHQpIC8gMjtcblxuXHRjb25zdCB0b3AgPSBwb3MudG9wIC0gZGlmZjtcblx0Y29uc3QgYm90dG9tID0gcG9zLmJvdHRvbSArIGRpZmY7XG5cblx0aWYgKHRvcCA+PSAwICYmIGJvdHRvbSA8PSBib3R0b21Cb3JkZXIpIHtcblx0XHRyZXR1cm4gdG9wO1xuXHR9XG5cblx0aWYgKHRvcCA8IDApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdHJldHVybiBib3R0b21Cb3JkZXIgLSBoZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIHBsYWNlQm90dG9tT3JUb3AocG9zOiBJRml0UG9zaXRpb24sIGNvbmZpZzogSUZpdFBvc2l0aW9uQ29uZmlnKSB7XG5cdGNvbnN0IHsgcmlnaHRCb3JkZXIsIGJvdHRvbUJvcmRlciB9ID0gZ2V0V2luZG93Qm9yZGVycygpO1xuXG5cdGxldCBsZWZ0O1xuXHRsZXQgdG9wO1xuXG5cdGNvbnN0IGJvdHRvbURpZmYgPSBib3R0b21Cb3JkZXIgLSBwb3MuYm90dG9tIC0gY29uZmlnLmhlaWdodDtcblx0Y29uc3QgdG9wRGlmZiA9IHBvcy50b3AgLSBjb25maWcuaGVpZ2h0O1xuXG5cdGlmIChjb25maWcubW9kZSA9PT0gXCJib3R0b21cIikge1xuXHRcdGlmIChib3R0b21EaWZmID49IDApIHtcblx0XHRcdHRvcCA9IHBvcy5ib3R0b207XG5cdFx0fSBlbHNlIGlmICh0b3BEaWZmID49IDApIHtcblx0XHRcdHRvcCA9IHRvcERpZmY7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGlmICh0b3BEaWZmID49IDApIHtcblx0XHRcdHRvcCA9IHRvcERpZmY7XG5cdFx0fSBlbHNlIGlmIChib3R0b21EaWZmID49IDApIHtcblx0XHRcdHRvcCA9IHBvcy5ib3R0b207XG5cdFx0fVxuXHR9XG5cblx0aWYgKGJvdHRvbURpZmYgPCAwICYmIHRvcERpZmYgPCAwKSB7XG5cdFx0aWYgKGNvbmZpZy5hdXRvKSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG5cdFx0XHRyZXR1cm4gcGxhY2VSaWdodE9yTGVmdChwb3MsIHtcblx0XHRcdFx0Li4uY29uZmlnLFxuXHRcdFx0XHRtb2RlOiBcInJpZ2h0XCIsXG5cdFx0XHRcdGF1dG86IGZhbHNlLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHRvcCA9IGJvdHRvbURpZmYgPiB0b3BEaWZmID8gcG9zLmJvdHRvbSA6IHRvcERpZmY7XG5cdH1cblxuXHRpZiAoY29uZmlnLmNlbnRlcmluZykge1xuXHRcdGxlZnQgPSBob3Jpem9udGFsQ2VudGVyaW5nKHBvcywgY29uZmlnLndpZHRoLCByaWdodEJvcmRlcik7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc3QgbGVmdERpZmYgPSByaWdodEJvcmRlciAtIHBvcy5sZWZ0IC0gY29uZmlnLndpZHRoO1xuXHRcdGNvbnN0IHJpZ2h0RGlmZiA9IHBvcy5yaWdodCAtIGNvbmZpZy53aWR0aDtcblxuXHRcdGlmIChsZWZ0RGlmZiA+PSAwKSB7XG5cdFx0XHRsZWZ0ID0gcG9zLmxlZnQ7XG5cdFx0fSBlbHNlIGlmIChyaWdodERpZmYgPj0gMCkge1xuXHRcdFx0bGVmdCA9IHJpZ2h0RGlmZjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGVmdCA9IHJpZ2h0RGlmZiA+IGxlZnREaWZmID8gcG9zLmxlZnQgOiByaWdodERpZmY7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgbGVmdCwgdG9wIH07XG59XG5cbmZ1bmN0aW9uIHBsYWNlUmlnaHRPckxlZnQocG9zOiBJRml0UG9zaXRpb24sIGNvbmZpZzogSUZpdFBvc2l0aW9uQ29uZmlnKSB7XG5cdGNvbnN0IHsgcmlnaHRCb3JkZXIsIGJvdHRvbUJvcmRlciB9ID0gZ2V0V2luZG93Qm9yZGVycygpO1xuXG5cdGxldCBsZWZ0O1xuXHRsZXQgdG9wO1xuXG5cdGNvbnN0IHJpZ2h0RGlmZiA9IHJpZ2h0Qm9yZGVyIC0gcG9zLnJpZ2h0IC0gY29uZmlnLndpZHRoO1xuXHRjb25zdCBsZWZ0RGlmZiA9IHBvcy5sZWZ0IC0gY29uZmlnLndpZHRoO1xuXG5cdGlmIChjb25maWcubW9kZSA9PT0gXCJyaWdodFwiKSB7XG5cdFx0aWYgKHJpZ2h0RGlmZiA+PSAwKSB7XG5cdFx0XHRsZWZ0ID0gcG9zLnJpZ2h0O1xuXHRcdH0gZWxzZSBpZiAobGVmdERpZmYgPj0gMCkge1xuXHRcdFx0bGVmdCA9IGxlZnREaWZmO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRpZiAobGVmdERpZmYgPj0gMCkge1xuXHRcdFx0bGVmdCA9IGxlZnREaWZmO1xuXHRcdH0gZWxzZSBpZiAocmlnaHREaWZmID49IDApIHtcblx0XHRcdGxlZnQgPSBwb3MucmlnaHQ7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGxlZnREaWZmIDwgMCAmJiByaWdodERpZmYgPCAwKSB7XG5cdFx0aWYgKGNvbmZpZy5hdXRvKSB7XG5cdFx0XHRyZXR1cm4gcGxhY2VCb3R0b21PclRvcChwb3MsIHtcblx0XHRcdFx0Li4uY29uZmlnLFxuXHRcdFx0XHRtb2RlOiBcImJvdHRvbVwiLFxuXHRcdFx0XHRhdXRvOiBmYWxzZSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRsZWZ0ID0gbGVmdERpZmYgPiByaWdodERpZmYgPyBsZWZ0RGlmZiA6IHBvcy5yaWdodDtcblx0fVxuXG5cdGlmIChjb25maWcuY2VudGVyaW5nKSB7XG5cdFx0dG9wID0gdmVydGljYWxDZW50ZXJpbmcocG9zLCBjb25maWcuaGVpZ2h0LCByaWdodEJvcmRlcik7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc3QgYm90dG9tRGlmZiA9IHBvcy5ib3R0b20gLSBjb25maWcuaGVpZ2h0O1xuXHRcdGNvbnN0IHRvcERpZmYgPSBib3R0b21Cb3JkZXIgLSBwb3MudG9wIC0gY29uZmlnLmhlaWdodDtcblxuXHRcdGlmICh0b3BEaWZmID49IDApIHtcblx0XHRcdHRvcCA9IHBvcy50b3A7XG5cdFx0fSBlbHNlIGlmIChib3R0b21EaWZmID4gMCkge1xuXHRcdFx0dG9wID0gYm90dG9tRGlmZjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dG9wID0gYm90dG9tRGlmZiA+IHRvcERpZmYgPyBib3R0b21EaWZmIDogcG9zLnRvcDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBsZWZ0LCB0b3AgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uKHBvczogSUZpdFBvc2l0aW9uLCBjb25maWc6IElGaXRQb3NpdGlvbkNvbmZpZykge1xuXHRjb25zdCB7IGxlZnQsIHRvcCB9ID1cblx0XHRjb25maWcubW9kZSA9PT0gXCJib3R0b21cIiB8fCBjb25maWcubW9kZSA9PT0gXCJ0b3BcIlxuXHRcdFx0PyBwbGFjZUJvdHRvbU9yVG9wKHBvcywgY29uZmlnKVxuXHRcdFx0OiBwbGFjZVJpZ2h0T3JMZWZ0KHBvcywgY29uZmlnKTtcblx0cmV0dXJuIHtcblx0XHRsZWZ0OiBNYXRoLnJvdW5kKGxlZnQpICsgXCJweFwiLFxuXHRcdHRvcDogTWF0aC5yb3VuZCh0b3ApICsgXCJweFwiLFxuXHRcdG1pbldpZHRoOiBNYXRoLnJvdW5kKGNvbmZpZy53aWR0aCkgKyBcInB4XCIsXG5cdFx0cG9zaXRpb246IFwiYWJzb2x1dGVcIixcblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdFBvc2l0aW9uKG5vZGU6IEhUTUxFbGVtZW50LCBjb25maWc6IElGaXRQb3NpdGlvbkNvbmZpZykge1xuXHRyZXR1cm4gY2FsY3VsYXRlUG9zaXRpb24oZ2V0UmVhbFBvc2l0aW9uKG5vZGUpLCBjb25maWcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFnZUNzcygpIHtcblx0Y29uc3QgY3NzID0gW107XG5cblx0Zm9yIChsZXQgc2hlZXRpID0gMDsgc2hlZXRpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBzaGVldGkrKykge1xuXHRcdGNvbnN0IHNoZWV0ID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbc2hlZXRpXTtcblx0XHRjb25zdCBydWxlcyA9IFwiY3NzUnVsZXNcIiBpbiBzaGVldCA/IChzaGVldCBhcyBhbnkpLmNzc1J1bGVzIDogKHNoZWV0IGFzIGFueSkucnVsZXM7XG5cdFx0Zm9yIChsZXQgcnVsZWkgPSAwOyBydWxlaSA8IHJ1bGVzLmxlbmd0aDsgcnVsZWkrKykge1xuXHRcdFx0Y29uc3QgcnVsZSA9IHJ1bGVzW3J1bGVpXTtcblx0XHRcdGlmIChcImNzc1RleHRcIiBpbiBydWxlKSB7XG5cdFx0XHRcdGNzcy5wdXNoKHJ1bGUuY3NzVGV4dCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjc3MucHVzaChgJHtydWxlLnNlbGVjdG9yVGV4dH0ge1xcbiR7cnVsZS5zdHlsZS5jc3NUZXh0fVxcbn1cXG5gKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY3NzLmpvaW4oXCJcXG5cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYWJlbFN0eWxlKGNvbmZpZykge1xuXHRjb25zdCB7IGhlbHBNZXNzYWdlLCB0eXBlLCBsYWJlbFdpZHRoLCBsYWJlbCB9ID0gY29uZmlnO1xuXHRjb25zdCBpc1plcm8gPSBsYWJlbFdpZHRoICYmIGxhYmVsV2lkdGgudG9TdHJpbmcoKS5zdGFydHNXaXRoKFwiMFwiKTtcblx0Y29uc3QgcmVxdWlyZWQgPSB0eXBlICE9PSBcInRleHRcIiAmJiBjb25maWcucmVxdWlyZWQ7XG5cdGlmICghaGVscE1lc3NhZ2UgJiYgIXJlcXVpcmVkICYmICghbGFiZWwgfHwgKGxhYmVsICYmIGlzWmVybykpICYmICghbGFiZWxXaWR0aCB8fCBpc1plcm8pKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzdHlsZTogKGxhYmVsIHx8IGxhYmVsV2lkdGgpICYmICFpc1plcm8gJiYgeyB3aWR0aDogbGFiZWxXaWR0aCwgXCJtYXgtd2lkdGhcIjogXCIxMDAlXCIgfSxcblx0XHRsYWJlbDogbGFiZWwgJiYgaXNaZXJvID8gbnVsbCA6IGxhYmVsLFxuXHR9O1xufVxuIiwiZXhwb3J0IGNvbnN0IEtFWV9DT0RFUyA9IHtcblx0QkFDS1NQQUNFOiA4LFxuXHRFTlRFUjogMTMsXG5cdEVTQzogMjcsXG5cdERPV05fQVJST1c6IDQwLFxuXHRVUF9BUlJPVzogMzgsXG5cdExFRlRfQVJST1c6IDM3LFxuXHRSSUdIVF9BUlJPVzogMzksXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2QgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbmlmICghQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzKSB7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiaW5jbHVkZXNcIiwge1xuXHRcdHZhbHVlOiBmdW5jdGlvbihzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpIHtcblx0XHRcdGlmICh0aGlzID09IG51bGwpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyAxLiBMZXQgTyBiZSA/IFRvT2JqZWN0KHRoaXMgdmFsdWUpLlxuXHRcdFx0Y29uc3QgbyA9IE9iamVjdCh0aGlzKTtcblxuXHRcdFx0Ly8gMi4gTGV0IGxlbiBiZSA/IFRvTGVuZ3RoKD8gR2V0KE8sIFwibGVuZ3RoXCIpKS5cblx0XHRcdGNvbnN0IGxlbiA9IG8ubGVuZ3RoID4+PiAwO1xuXG5cdFx0XHQvLyAzLiBJZiBsZW4gaXMgMCwgcmV0dXJuIGZhbHNlLlxuXHRcdFx0aWYgKGxlbiA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIDQuIExldCBuIGJlID8gVG9JbnRlZ2VyKGZyb21JbmRleCkuXG5cdFx0XHQvLyAgICAoSWYgZnJvbUluZGV4IGlzIHVuZGVmaW5lZCwgdGhpcyBzdGVwIHByb2R1Y2VzIHRoZSB2YWx1ZSAwLilcblx0XHRcdGNvbnN0IG4gPSBmcm9tSW5kZXggfCAwO1xuXG5cdFx0XHQvLyA1LiBJZiBuIOKJpSAwLCB0aGVuXG5cdFx0XHQvLyAgYS4gTGV0IGsgYmUgbi5cblx0XHRcdC8vIDYuIEVsc2UgbiA8IDAsXG5cdFx0XHQvLyAgYS4gTGV0IGsgYmUgbGVuICsgbi5cblx0XHRcdC8vICBiLiBJZiBrIDwgMCwgbGV0IGsgYmUgMC5cblx0XHRcdGxldCBrID0gTWF0aC5tYXgobiA+PSAwID8gbiA6IGxlbiAtIE1hdGguYWJzKG4pLCAwKTtcblxuXHRcdFx0ZnVuY3Rpb24gc2FtZVZhbHVlWmVybyh4LCB5KSB7XG5cdFx0XHRcdHJldHVybiB4ID09PSB5IHx8ICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgeSA9PT0gXCJudW1iZXJcIiAmJiBpc05hTih4KSAmJiBpc05hTih5KSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIDcuIFJlcGVhdCwgd2hpbGUgayA8IGxlblxuXHRcdFx0d2hpbGUgKGsgPCBsZW4pIHtcblx0XHRcdFx0Ly8gYS4gTGV0IGVsZW1lbnRLIGJlIHRoZSByZXN1bHQgb2YgPyBHZXQoTywgISBUb1N0cmluZyhrKSkuXG5cdFx0XHRcdC8vIGIuIElmIFNhbWVWYWx1ZVplcm8oc2VhcmNoRWxlbWVudCwgZWxlbWVudEspIGlzIHRydWUsIHJldHVybiB0cnVlLlxuXHRcdFx0XHRpZiAoc2FtZVZhbHVlWmVybyhvW2tdLCBzZWFyY2hFbGVtZW50KSkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGMuIEluY3JlYXNlIGsgYnkgMS5cblx0XHRcdFx0aysrO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyA4LiBSZXR1cm4gZmFsc2Vcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHR3cml0YWJsZTogdHJ1ZSxcblx0fSk7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiZmluZFwiLCB7XG5cdFx0dmFsdWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuXHRcdFx0Ly8gMS4gTGV0IE8gYmUgPyBUb09iamVjdCh0aGlzIHZhbHVlKS5cblx0XHRcdGlmICh0aGlzID09IG51bGwpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBvID0gT2JqZWN0KHRoaXMpO1xuXG5cdFx0XHQvLyAyLiBMZXQgbGVuIGJlID8gVG9MZW5ndGgoPyBHZXQoTywgXCJsZW5ndGhcIikpLlxuXHRcdFx0Y29uc3QgbGVuID0gby5sZW5ndGggPj4+IDA7XG5cblx0XHRcdC8vIDMuIElmIElzQ2FsbGFibGUocHJlZGljYXRlKSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuXHRcdFx0aWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwicHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gNC4gSWYgdGhpc0FyZyB3YXMgc3VwcGxpZWQsIGxldCBUIGJlIHRoaXNBcmc7IGVsc2UgbGV0IFQgYmUgdW5kZWZpbmVkLlxuXHRcdFx0Y29uc3QgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTtcblxuXHRcdFx0Ly8gNS4gTGV0IGsgYmUgMC5cblx0XHRcdGxldCBrID0gMDtcblxuXHRcdFx0Ly8gNi4gUmVwZWF0LCB3aGlsZSBrIDwgbGVuXG5cdFx0XHR3aGlsZSAoayA8IGxlbikge1xuXHRcdFx0XHQvLyBhLiBMZXQgUGsgYmUgISBUb1N0cmluZyhrKS5cblx0XHRcdFx0Ly8gYi4gTGV0IGtWYWx1ZSBiZSA/IEdldChPLCBQaykuXG5cdFx0XHRcdC8vIGMuIExldCB0ZXN0UmVzdWx0IGJlIFRvQm9vbGVhbig/IENhbGwocHJlZGljYXRlLCBULCDCqyBrVmFsdWUsIGssIE8gwrspKS5cblx0XHRcdFx0Ly8gZC4gSWYgdGVzdFJlc3VsdCBpcyB0cnVlLCByZXR1cm4ga1ZhbHVlLlxuXHRcdFx0XHRjb25zdCBrVmFsdWUgPSBvW2tdO1xuXHRcdFx0XHRpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywga1ZhbHVlLCBrLCBvKSkge1xuXHRcdFx0XHRcdHJldHVybiBrVmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gZS4gSW5jcmVhc2UgayBieSAxLlxuXHRcdFx0XHRrKys7XG5cdFx0XHR9XG5cblx0XHRcdC8vIDcuIFJldHVybiB1bmRlZmluZWQuXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH0sXG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdHdyaXRhYmxlOiB0cnVlLFxuXHR9KTtcbn1cblxuaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG5cdEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXggPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcblx0XHRpZiAodGhpcyA9PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWRcIik7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJwcmVkaWNhdGUgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuXHRcdH1cblx0XHRjb25zdCBsaXN0ID0gT2JqZWN0KHRoaXMpO1xuXHRcdGNvbnN0IGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuXHRcdGNvbnN0IHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XG5cdFx0bGV0IHZhbHVlO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0dmFsdWUgPSBsaXN0W2ldO1xuXHRcdFx0aWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9O1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kICovXG5pZiAoRWxlbWVudCAmJiAhRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuXHRjb25zdCBwcm90byA9IChFbGVtZW50IGFzIGFueSkucHJvdG90eXBlO1xuXHRwcm90by5tYXRjaGVzID1cblx0XHRwcm90by5tYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRwcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRwcm90by5tc01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdHByb3RvLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRwcm90by53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG59XG5cbi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL25hbWluaG8vc3ZnLWNsYXNzbGlzdC1wb2x5ZmlsbC9ibG9iL21hc3Rlci9wb2x5ZmlsbC5qc1xuaWYgKCEoXCJjbGFzc0xpc3RcIiBpbiBTVkdFbGVtZW50LnByb3RvdHlwZSkpIHtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KFNWR0VsZW1lbnQucHJvdG90eXBlLCBcImNsYXNzTGlzdFwiLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRjb25zdCBfdGhpcyA9IHRoaXM7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNvbnRhaW5zOiBmdW5jdGlvbiBjb250YWlucyhjbGFzc05hbWUpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3RoaXMuY2xhc3NOYW1lLmJhc2VWYWwuc3BsaXQoXCIgXCIpLmluZGV4T2YoY2xhc3NOYW1lKSAhPT0gLTE7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFkZDogZnVuY3Rpb24gYWRkKGNsYXNzTmFtZSkge1xuXHRcdFx0XHRcdHJldHVybiBfdGhpcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBfdGhpcy5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSArIFwiIFwiICsgY2xhc3NOYW1lKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0cmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoY2xhc3NOYW1lKSB7XG5cdFx0XHRcdFx0Y29uc3QgcmVtb3ZlZENsYXNzID0gX3RoaXNcblx0XHRcdFx0XHRcdC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKVxuXHRcdFx0XHRcdFx0LnJlcGxhY2UobmV3IFJlZ0V4cChcIihcXFxcc3xeKVwiLmNvbmNhdChjbGFzc05hbWUsIFwiKFxcXFxzfCQpXCIpLCBcImdcIiksIFwiJDJcIik7XG5cblx0XHRcdFx0XHRpZiAoX3RoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcblx0XHRcdFx0XHRcdF90aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHJlbW92ZWRDbGFzcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShjbGFzc05hbWUpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5jb250YWlucyhjbGFzc05hbWUpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJlbW92ZShjbGFzc05hbWUpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLmFkZChjbGFzc05hbWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdH07XG5cdFx0fSxcblx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdH0pO1xufVxuXG4vLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllcy9ibG9iL21hc3Rlci9wb2x5ZmlsbC5qc1xuaWYgKCFPYmplY3QuZW50cmllcykge1xuXHRjb25zdCByZWR1Y2UgPSBGdW5jdGlvbi5iaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgQXJyYXkucHJvdG90eXBlLnJlZHVjZSk7XG5cdGNvbnN0IGlzRW51bWVyYWJsZSA9IEZ1bmN0aW9uLmJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcblx0Y29uc3QgY29uY2F0ID0gRnVuY3Rpb24uYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xuXG5cdE9iamVjdC5lbnRyaWVzID0gZnVuY3Rpb24gZW50cmllcyhPKSB7XG5cdFx0cmV0dXJuIHJlZHVjZShcblx0XHRcdE9iamVjdC5rZXlzKE8pLFxuXHRcdFx0KGUsIGspID0+IGNvbmNhdChlLCB0eXBlb2YgayA9PT0gXCJzdHJpbmdcIiAmJiBpc0VudW1lcmFibGUoTywgaykgPyBbW2ssIE9ba11dXSA6IFtdKSxcblx0XHRcdFtdXG5cdFx0KTtcblx0fTtcbn1cblxuLy8gU291cmNlOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9yb2NraW5naGVsdmV0aWNhLzAwYjlmN2I1Yzk3YTE2ZDNkZTc1YmE5OTE5MmZmMDVjXG5pZiAoIUV2ZW50LnByb3RvdHlwZS5jb21wb3NlZFBhdGgpIHtcblx0RXZlbnQucHJvdG90eXBlLmNvbXBvc2VkUGF0aCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLnBhdGgpIHtcblx0XHRcdHJldHVybiB0aGlzLnBhdGg7XG5cdFx0fVxuXHRcdGxldCB0YXJnZXQgPSB0aGlzLnRhcmdldDtcblxuXHRcdHRoaXMucGF0aCA9IFtdO1xuXHRcdHdoaWxlICh0YXJnZXQucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5wYXRoLnB1c2godGFyZ2V0KTtcblx0XHRcdHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xuXHRcdH1cblx0XHR0aGlzLnBhdGgucHVzaChkb2N1bWVudCwgd2luZG93KTtcblx0XHRyZXR1cm4gdGhpcy5wYXRoO1xuXHR9O1xufVxuIiwiTWF0aC5zaWduID1cblx0TWF0aC5zaWduIHx8XG5cdGZ1bmN0aW9uKHgpIHtcblx0XHR4ID0gK3g7XG5cdFx0aWYgKHggPT09IDAgfHwgaXNOYU4oeCkpIHtcblx0XHRcdHJldHVybiB4O1xuXHRcdH1cblx0XHRyZXR1cm4geCA+IDAgPyAxIDogLTE7XG5cdH07XG4iLCJPYmplY3QudmFsdWVzID0gT2JqZWN0LnZhbHVlc1xuXHQ/IE9iamVjdC52YWx1ZXNcblx0OiBmdW5jdGlvbihvYmopIHtcblx0XHRcdGNvbnN0IGFsbG93ZWRUeXBlcyA9IFtcblx0XHRcdFx0XCJbb2JqZWN0IFN0cmluZ11cIixcblx0XHRcdFx0XCJbb2JqZWN0IE9iamVjdF1cIixcblx0XHRcdFx0XCJbb2JqZWN0IEFycmF5XVwiLFxuXHRcdFx0XHRcIltvYmplY3QgRnVuY3Rpb25dXCIsXG5cdFx0XHRdO1xuXHRcdFx0Y29uc3Qgb2JqVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xuXG5cdFx0XHRpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdFwiKTtcblx0XHRcdH0gZWxzZSBpZiAoIX5hbGxvd2VkVHlwZXMuaW5kZXhPZihvYmpUeXBlKSkge1xuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiBFUzYgaXMgc3VwcG9ydGVkXG5cdFx0XHRcdGlmIChPYmplY3Qua2V5cykge1xuXHRcdFx0XHRcdHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrZXkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBvYmpba2V5XTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFtdO1xuXHRcdFx0XHRmb3IgKGNvbnN0IHByb3AgaW4gb2JqKSB7XG5cdFx0XHRcdFx0aWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuXHRcdFx0XHRcdFx0cmVzdWx0LnB1c2gob2JqW3Byb3BdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHQgIH07XG5cbmlmICghT2JqZWN0LmFzc2lnbikge1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LCBcImFzc2lnblwiLCB7XG5cdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdHZhbHVlOiBmdW5jdGlvbih0YXJnZXQsIC4uLmFyZ3MpIHtcblx0XHRcdFwidXNlIHN0cmljdFwiO1xuXHRcdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgZmlyc3QgYXJndW1lbnQgdG8gb2JqZWN0XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB0byA9IE9iamVjdCh0YXJnZXQpO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IG5leHRTb3VyY2UgPSBhcmdzW2ldO1xuXHRcdFx0XHRpZiAobmV4dFNvdXJjZSA9PT0gdW5kZWZpbmVkIHx8IG5leHRTb3VyY2UgPT09IG51bGwpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG5cdFx0XHRcdGZvciAobGV0IG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4KyspIHtcblx0XHRcdFx0XHRjb25zdCBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG5cdFx0XHRcdFx0Y29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG5cdFx0XHRcdFx0aWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcblx0XHRcdFx0XHRcdHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0bztcblx0XHR9LFxuXHR9KTtcbn1cbiIsImlmICghU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcykge1xuXHRTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24oc2VhcmNoLCBzdGFydCkge1xuXHRcdFwidXNlIHN0cmljdFwiO1xuXHRcdGlmICh0eXBlb2Ygc3RhcnQgIT09IFwibnVtYmVyXCIpIHtcblx0XHRcdHN0YXJ0ID0gMDtcblx0XHR9XG5cblx0XHRpZiAoc3RhcnQgKyBzZWFyY2gubGVuZ3RoID4gdGhpcy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuaW5kZXhPZihzZWFyY2gsIHN0YXJ0KSAhPT0gLTE7XG5cdFx0fVxuXHR9O1xufVxuXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCkge1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgXCJzdGFydHNXaXRoXCIsIHtcblx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uKHNlYXJjaFN0cmluZywgcG9zaXRpb24pIHtcblx0XHRcdHBvc2l0aW9uID0gcG9zaXRpb24gfHwgMDtcblx0XHRcdHJldHVybiB0aGlzLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT09IHBvc2l0aW9uO1xuXHRcdH0sXG5cdH0pO1xufVxuXG5pZiAoIVN0cmluZy5wcm90b3R5cGUucGFkU3RhcnQpIHtcblx0U3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydCA9IGZ1bmN0aW9uIHBhZFN0YXJ0KHRhcmdldExlbmd0aCwgcGFkU3RyaW5nKSB7XG5cdFx0dGFyZ2V0TGVuZ3RoID0gdGFyZ2V0TGVuZ3RoID4+IDA7XG5cdFx0cGFkU3RyaW5nID0gU3RyaW5nKHBhZFN0cmluZyB8fCBcIiBcIik7XG5cdFx0aWYgKHRoaXMubGVuZ3RoID4gdGFyZ2V0TGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gU3RyaW5nKHRoaXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXRMZW5ndGggPSB0YXJnZXRMZW5ndGggLSB0aGlzLmxlbmd0aDtcblx0XHRcdGlmICh0YXJnZXRMZW5ndGggPiBwYWRTdHJpbmcubGVuZ3RoKSB7XG5cdFx0XHRcdHBhZFN0cmluZyArPSBwYWRTdHJpbmcucmVwZWF0KHRhcmdldExlbmd0aCAvIHBhZFN0cmluZy5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBhZFN0cmluZy5zbGljZSgwLCB0YXJnZXRMZW5ndGgpICsgU3RyaW5nKHRoaXMpO1xuXHRcdH1cblx0fTtcbn1cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLnBhZEVuZCkge1xuXHRTdHJpbmcucHJvdG90eXBlLnBhZEVuZCA9IGZ1bmN0aW9uIHBhZEVuZCh0YXJnZXRMZW5ndGgsIHBhZFN0cmluZykge1xuXHRcdHRhcmdldExlbmd0aCA9IHRhcmdldExlbmd0aCA+PiAwO1xuXHRcdHBhZFN0cmluZyA9IFN0cmluZyhwYWRTdHJpbmcgfHwgXCIgXCIpO1xuXHRcdGlmICh0aGlzLmxlbmd0aCA+IHRhcmdldExlbmd0aCkge1xuXHRcdFx0cmV0dXJuIFN0cmluZyh0aGlzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0TGVuZ3RoID0gdGFyZ2V0TGVuZ3RoIC0gdGhpcy5sZW5ndGg7XG5cdFx0XHRpZiAodGFyZ2V0TGVuZ3RoID4gcGFkU3RyaW5nLmxlbmd0aCkge1xuXHRcdFx0XHRwYWRTdHJpbmcgKz0gcGFkU3RyaW5nLnJlcGVhdCh0YXJnZXRMZW5ndGggLyBwYWRTdHJpbmcubGVuZ3RoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBTdHJpbmcodGhpcykgKyBwYWRTdHJpbmcuc2xpY2UoMCwgdGFyZ2V0TGVuZ3RoKTtcblx0XHR9XG5cdH07XG59XG4iLCJpbXBvcnQgeyBJRXZlbnRTeXN0ZW0gfSBmcm9tIFwiLi9ldmVudHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJSGFuZGxlcnMge1xuXHRba2V5OiBzdHJpbmddOiBhbnlGdW5jdGlvbiB8IElIYW5kbGVycztcbn1cblxuZXhwb3J0IHR5cGUgSWQgPSBzdHJpbmcgfCBudW1iZXI7XG5cbmV4cG9ydCB0eXBlIGZuPFQgZXh0ZW5kcyBhbnlbXSwgSz4gPSAoLi4uYXJnczogVCkgPT4gSztcbmV4cG9ydCB0eXBlIGFueUZ1bmN0aW9uID0gZm48YW55W10sIGFueT47XG5leHBvcnQgaW50ZXJmYWNlIElBbnlPYmoge1xuXHRba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlbGVjdGlvbkNvbmZpZyB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2VsZWN0aW9uIHtcblx0ZXZlbnRzOiBJRXZlbnRTeXN0ZW08U2VsZWN0aW9uRXZlbnRzPjtcblx0Y29uZmlnOiBJU2VsZWN0aW9uQ29uZmlnO1xuXG5cdGdldElkKCk6IElkO1xuXHRnZXRJdGVtKCk6IGFueTtcblx0YWRkKGlkOiBJZCk6IHZvaWQ7XG5cdHJlbW92ZShpZD86IElkKTogYm9vbGVhbjtcblx0ZW5hYmxlKCk6IHZvaWQ7XG5cdGRpc2FibGUoKTogdm9pZDtcbn1cblxuZXhwb3J0IGVudW0gU2VsZWN0aW9uRXZlbnRzIHtcblx0YmVmb3JlVW5TZWxlY3QgPSBcImJlZm9yZXVuc2VsZWN0XCIsXG5cdGFmdGVyVW5TZWxlY3QgPSBcImFmdGVydW5zZWxlY3RcIixcblx0YmVmb3JlU2VsZWN0ID0gXCJiZWZvcmVzZWxlY3RcIixcblx0YWZ0ZXJTZWxlY3QgPSBcImFmdGVyc2VsZWN0XCIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlbGVjdGlvbkV2ZW50c0hhbmRsZXJzTWFwIHtcblx0W2tleTogc3RyaW5nXTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cdFtTZWxlY3Rpb25FdmVudHMuYWZ0ZXJTZWxlY3RdOiAoaWQ6IElkKSA9PiB2b2lkO1xuXHRbU2VsZWN0aW9uRXZlbnRzLmFmdGVyVW5TZWxlY3RdOiAoaWQ6IElkKSA9PiB2b2lkO1xuXHRbU2VsZWN0aW9uRXZlbnRzLmJlZm9yZVNlbGVjdF06IChpZDogSWQpID0+IHZvaWQgfCBib29sZWFuO1xuXHRbU2VsZWN0aW9uRXZlbnRzLmJlZm9yZVVuU2VsZWN0XTogKGlkOiBJZCkgPT4gdm9pZCB8IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRvdWNoUGFyYW0ge1xuXHRkdXJhdGlvbj86IG51bWJlcjtcblx0dGltZXI/OiBhbnk7XG5cdHN0YXJ0PzogYm9vbGVhbjtcblx0dGltZVN0YW1wPzogbnVtYmVyO1xuXHRkYmxEdXJhdGlvbj86IG51bWJlcjtcbn1cbiIsImltcG9ydCB7IHVpZCB9IGZyb20gXCIuL2NvcmVcIjtcbmltcG9ydCB7IHRvTm9kZSB9IGZyb20gXCIuL2h0bWxcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJVmlldyB7XG5cdGdldFJvb3RWaWV3KCk6IGFueTtcblx0cGFpbnQoKTogdm9pZDtcblx0bW91bnQoY29udGFpbmVyOiBhbnksIHZub2RlPzogYW55KTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVmlld0xpa2Uge1xuXHRtb3VudD8oY29udGFpbmVyOiBhbnksIHZub2RlPzogYW55KTogdm9pZDtcblx0Z2V0Um9vdFZpZXcoKTogYW55O1xufVxuXG5leHBvcnQgY2xhc3MgVmlldyB7XG5cdHB1YmxpYyBjb25maWc6IGFueTtcblx0cHJvdGVjdGVkIF9jb250YWluZXI6IGFueTtcblx0cHJvdGVjdGVkIF91aWQ6IGFueTtcblx0cHJvdGVjdGVkIF9kb05vdFJlcGFpbnQ6IGJvb2xlYW47XG5cdHByaXZhdGUgX3ZpZXc6IGFueTtcblxuXHRjb25zdHJ1Y3RvcihfY29udGFpbmVyLCBjb25maWcpIHtcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblx0XHR0aGlzLl91aWQgPSB0aGlzLmNvbmZpZy5yb290SWQgfHwgdWlkKCk7XG5cdH1cblxuXHRwdWJsaWMgbW91bnQoY29udGFpbmVyLCB2bm9kZT86IGFueSkge1xuXHRcdGlmICh2bm9kZSkge1xuXHRcdFx0dGhpcy5fdmlldyA9IHZub2RlO1xuXHRcdH1cblx0XHRpZiAoY29udGFpbmVyICYmIHRoaXMuX3ZpZXcgJiYgdGhpcy5fdmlldy5tb3VudCkge1xuXHRcdFx0Ly8gaW5pdCB2aWV3IGluc2lkZSBvZiBIVE1MIGNvbnRhaW5lclxuXHRcdFx0dGhpcy5fY29udGFpbmVyID0gdG9Ob2RlKGNvbnRhaW5lcik7XG5cdFx0XHRpZiAodGhpcy5fY29udGFpbmVyLnRhZ05hbWUpIHtcblx0XHRcdFx0dGhpcy5fdmlldy5tb3VudCh0aGlzLl9jb250YWluZXIpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLl9jb250YWluZXIuYXR0YWNoKSB7XG5cdFx0XHRcdHRoaXMuX2NvbnRhaW5lci5hdHRhY2godGhpcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHVubW91bnQoKSB7XG5cdFx0Y29uc3Qgcm9vdFZpZXcgPSB0aGlzLmdldFJvb3RWaWV3KCk7XG5cdFx0aWYgKHJvb3RWaWV3ICYmIHJvb3RWaWV3Lm5vZGUpIHtcblx0XHRcdHJvb3RWaWV3LnVubW91bnQoKTtcblx0XHRcdHRoaXMuX3ZpZXcgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBnZXRSb290VmlldygpIHtcblx0XHRyZXR1cm4gdGhpcy5fdmlldztcblx0fVxuXHRwdWJsaWMgZ2V0Um9vdE5vZGUoKTogSFRNTEVsZW1lbnQge1xuXHRcdHJldHVybiB0aGlzLl92aWV3ICYmIHRoaXMuX3ZpZXcubm9kZSAmJiB0aGlzLl92aWV3Lm5vZGUuZWw7XG5cdH1cblxuXHRwdWJsaWMgcGFpbnQoKSB7XG5cdFx0aWYgKFxuXHRcdFx0dGhpcy5fdmlldyAmJiAvLyB3YXMgbW91bnRlZFxuXHRcdFx0KHRoaXMuX3ZpZXcubm9kZSB8fCAvLyBhbHJlYWR5IHJlbmRlcmVkIG5vZGVcblx0XHRcdFx0dGhpcy5fY29udGFpbmVyKVxuXHRcdCkge1xuXHRcdFx0Ly8gbm90IHJlbmRlcmVkLCBidXQgaGFzIGNvbnRhaW5lclxuXHRcdFx0dGhpcy5fZG9Ob3RSZXBhaW50ID0gZmFsc2U7XG5cdFx0XHR0aGlzLl92aWV3LnJlZHJhdygpO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9WaWV3TGlrZSh2aWV3KSB7XG5cdHJldHVybiB7XG5cdFx0Z2V0Um9vdFZpZXc6ICgpID0+IHZpZXcsXG5cdFx0cGFpbnQ6ICgpID0+IHZpZXcubm9kZSAmJiB2aWV3LnJlZHJhdygpLFxuXHRcdG1vdW50OiBjb250YWluZXIgPT4gdmlldy5tb3VudChjb250YWluZXIpLFxuXHR9O1xufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy90eXBlc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9kYXRhY29sbGVjdGlvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy90cmVlY29sbGVjdGlvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9EcmFnTWFuYWdlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9kYXRhcHJveHlcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvbGF6eWRhdGFwcm94eVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9oZWxwZXJzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL2RyaXZlcnMvQ3N2RHJpdmVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL2RyaXZlcnMvSnNvbkRyaXZlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9zZWxlY3Rpb25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvZHJpdmVycy9kcml2ZXJzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL2FqYXhcIjtcbiIsImltcG9ydCB7IElkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5cbmNsYXNzIENvbGxlY3Rpb25TdG9yZSB7XG5cdHByaXZhdGUgX3N0b3JlOiB7IFtpZDogc3RyaW5nXTogYW55IH0gPSB7fTtcblxuXHRzZXRJdGVtKGlkOiBJZCwgdGFyZ2V0OiBhbnkpOiB2b2lkIHtcblx0XHR0aGlzLl9zdG9yZVtpZF0gPSB0YXJnZXQ7XG5cdH1cblx0Z2V0SXRlbShpZDogSWQpIHtcblx0XHRpZiAoIXRoaXMuX3N0b3JlW2lkXSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9zdG9yZVtpZF07XG5cdH1cbn1cblxuY29uc3QgZGh4ID0gKCh3aW5kb3cgYXMgYW55KS5kaHhIZWxwZXJzID0gKHdpbmRvdyBhcyBhbnkpLmRoeEhlbHBlcnMgfHwge30pO1xuZGh4LmNvbGxlY3Rpb25TdG9yZSA9IGRoeC5jb2xsZWN0aW9uU3RvcmUgfHwgbmV3IENvbGxlY3Rpb25TdG9yZSgpO1xuZXhwb3J0IGNvbnN0IGNvbGxlY3Rpb25TdG9yZSA9IGRoeC5jb2xsZWN0aW9uU3RvcmU7XG4iLCJpbXBvcnQgeyBsb2NhdGUsIGxvY2F0ZU5vZGUsIGdldEJveCwgbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcbmltcG9ydCB7IElkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBHcmlkLCBQcm9HcmlkLCBJR3JpZENvbmZpZyB9IGZyb20gXCJAZGh4L3RzLWdyaWRcIjtcbmltcG9ydCB7IGNvbGxlY3Rpb25TdG9yZSB9IGZyb20gXCIuL0NvbGxlY3Rpb25TdG9yZVwiO1xuaW1wb3J0IHsgVHJlZUNvbGxlY3Rpb24gfSBmcm9tIFwiLi90cmVlY29sbGVjdGlvblwiO1xuaW1wb3J0IHsgRHJhZ0V2ZW50cywgSVRyYW5zZmVyRGF0YSwgSUNvcHlPYmplY3QgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgaXNUcmVlQ29sbGVjdGlvbiB9IGZyb20gXCIuL2hlbHBlcnNcIjtcblxuZnVuY3Rpb24gZ2V0UG9zaXRpb24oZTogTW91c2VFdmVudCkge1xuXHRjb25zdCB5ID0gZS5jbGllbnRZO1xuXHRjb25zdCBlbGVtZW50ID0gbG9jYXRlTm9kZShlKTtcblx0aWYgKCFlbGVtZW50KSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0Y29uc3QgdHJlZUxpbmU6IEhUTUxFbGVtZW50ID0gZWxlbWVudC5jaGlsZE5vZGVzWzBdIGFzIEhUTUxFbGVtZW50O1xuXHRpZiAodHJlZUxpbmUpIHtcblx0XHRjb25zdCB7IHRvcCwgaGVpZ2h0IH0gPSB0cmVlTGluZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRyZXR1cm4gKHkgLSB0b3ApIC8gaGVpZ2h0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRyYWdFdmVudENvbnRlbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGVsZW1lbnRzOiBOb2RlTGlzdCwgZXhoYXVzdGl2ZUxpc3QgPSBmYWxzZSkge1xuXHRjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0Y29uc3QgZ2hvc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRjb25zdCBjbG9uZSA9IGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xuXG5cdGNsb25lLnN0eWxlLndpZHRoID0gcmVjdC53aWR0aCArIFwicHhcIjtcblx0Y2xvbmUuc3R5bGUuaGVpZ2h0ID0gcmVjdC5oZWlnaHQgKyBcInB4XCI7XG5cdGNsb25lLnN0eWxlLm1heEhlaWdodCA9IHJlY3QuaGVpZ2h0ICsgXCJweFwiO1xuXHRjbG9uZS5zdHlsZS5mb250U2l6ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQucGFyZW50RWxlbWVudCkuZm9udFNpemU7XG5cdGNsb25lLnN0eWxlLm9wYWNpdHkgPSBcIjAuOFwiO1xuXHRjbG9uZS5zdHlsZS5mb250U2l6ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQucGFyZW50RWxlbWVudCkuZm9udFNpemU7XG5cblx0aWYgKCFleGhhdXN0aXZlTGlzdCB8fCAhZWxlbWVudHMgfHwgIWVsZW1lbnRzLmxlbmd0aCkge1xuXHRcdGdob3N0LmFwcGVuZENoaWxkKGNsb25lKTtcblx0fVxuXG5cdGlmIChlbGVtZW50cyAmJiBlbGVtZW50cy5sZW5ndGgpIHtcblx0XHRlbGVtZW50cy5mb3JFYWNoKChub2RlLCBrZXkpID0+IHtcblx0XHRcdGNvbnN0IG5vZGVDbG9uZSA9IG5vZGUuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0bm9kZUNsb25lLnN0eWxlLndpZHRoID0gcmVjdC53aWR0aCArIFwicHhcIjtcblx0XHRcdG5vZGVDbG9uZS5zdHlsZS5oZWlnaHQgPSByZWN0LmhlaWdodCArIFwicHhcIjtcblx0XHRcdG5vZGVDbG9uZS5zdHlsZS5tYXhIZWlnaHQgPSByZWN0LmhlaWdodCArIFwicHhcIjtcblx0XHRcdG5vZGVDbG9uZS5zdHlsZS50b3AgPSAoa2V5ICsgMSkgKiAxMiAtIHJlY3QuaGVpZ2h0IC0gcmVjdC5oZWlnaHQgKiBrZXkgKyBcInB4XCI7XG5cdFx0XHRub2RlQ2xvbmUuc3R5bGUubGVmdCA9IChrZXkgKyAxKSAqIDEyICsgXCJweFwiO1xuXHRcdFx0bm9kZUNsb25lLnN0eWxlLm9wYWNpdHkgPSBcIjAuNlwiO1xuXHRcdFx0bm9kZUNsb25lLnN0eWxlLnpJbmRleCA9IGAkey1rZXkgLSAxfWA7XG5cdFx0XHRnaG9zdC5hcHBlbmRDaGlsZChub2RlQ2xvbmUpO1xuXHRcdH0pO1xuXHR9XG5cdGdob3N0LmNsYXNzTmFtZSA9IFwiZGh4X2RyYWctZ2hvc3RcIjtcblx0cmV0dXJuIGdob3N0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEcmFnTWFuYWdlciB7XG5cdHNldEl0ZW0oaWQ6IElkLCBpdGVtOiBhbnkpOiB2b2lkO1xuXHRvbk1vdXNlRG93bihcblx0XHRlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCxcblx0XHRzb3VyY2U/OiBJZFtdLFxuXHRcdGl0ZW1zRm9yR2hvc3Q/OiBOb2RlTGlzdCB8IEhUTUxEaXZFbGVtZW50W10gfCBFbGVtZW50W11cblx0KTogdm9pZDtcblx0aXNEcmFnKCk6IGJvb2xlYW47XG5cdGNhbmNlbENhbkRyb3AoZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KTogdm9pZDtcbn1cblxuY2xhc3MgRHJhZ01hbmFnZXIgaW1wbGVtZW50cyBJRHJhZ01hbmFnZXIge1xuXHRwcml2YXRlIF90cmFuc2ZlckRhdGE6IElUcmFuc2ZlckRhdGEgPSB7fTtcblx0cHJpdmF0ZSBfaXRlbXNGb3JHaG9zdDogTm9kZUxpc3Q7XG5cdHByaXZhdGUgX2Nhbk1vdmUgPSB0cnVlO1xuXHRwcml2YXRlIF9pc0RyYWcgPSBmYWxzZTtcblxuXHRwdWJsaWMgc2V0SXRlbShpZDogSWQsIGl0ZW06IGFueSk6IHZvaWQge1xuXHRcdGNvbGxlY3Rpb25TdG9yZS5zZXRJdGVtKGlkLCBpdGVtKTtcblx0fVxuXHRwdWJsaWMgb25Nb3VzZURvd24oXG5cdFx0ZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50LFxuXHRcdHNvdXJjZT86IElkW10sXG5cdFx0aXRlbXNGb3JHaG9zdD86IE5vZGVMaXN0IHwgSFRNTERpdkVsZW1lbnRbXSB8IEVsZW1lbnRbXVxuXHQpOiB2b2lkIHtcblx0XHQvLyBvbm1vdXNlZG93biBvbmx5IGZvciB0YXJnZXQgb2JqZWN0c1xuXHRcdGlmIChldmVudC53aGljaCAhPT0gMSAmJiAhKGV2ZW50IGFzIFRvdWNoRXZlbnQpLnRhcmdldFRvdWNoZXMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIShldmVudCBhcyBUb3VjaEV2ZW50KS50YXJnZXRUb3VjaGVzKSB7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuX29uTW91c2VNb3ZlIGFzIGFueSk7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLl9vbk1vdXNlVXAgYXMgYW55KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLl9vbk1vdXNlTW92ZSBhcyBhbnksIGZhbHNlKTtcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLl9vbk1vdXNlVXAgYXMgYW55LCBmYWxzZSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaXRlbSA9IGxvY2F0ZU5vZGUoZXZlbnQsIFwiZGh4X2lkXCIpIGFzIEhUTUxFbGVtZW50O1xuXHRcdGNvbnN0IGlkID0gaXRlbSAmJiBpdGVtLmdldEF0dHJpYnV0ZShcImRoeF9pZFwiKTtcblx0XHRjb25zdCBjb21wb25lbnRJZCA9IGxvY2F0ZShldmVudCwgXCJkaHhfd2lkZ2V0X2lkXCIpO1xuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSAmJiBzb3VyY2UuaW5jbHVkZXMoaWQpKSB7XG5cdFx0XHR0aGlzLl90cmFuc2ZlckRhdGEuc291cmNlID0gWy4uLnNvdXJjZV07XG5cdFx0XHR0aGlzLl9pdGVtc0Zvckdob3N0ID0gaXRlbXNGb3JHaG9zdCBhcyBOb2RlTGlzdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fdHJhbnNmZXJEYXRhLnNvdXJjZSA9IFtpZF07XG5cdFx0XHR0aGlzLl9pdGVtc0Zvckdob3N0ID0gbnVsbDtcblx0XHR9XG5cdFx0aWYgKGlkICYmIGNvbXBvbmVudElkKSB7XG5cdFx0XHRjb25zdCB7IGxlZnQsIHRvcCB9ID0gZ2V0Qm94KGl0ZW0pO1xuXHRcdFx0Y29uc3QgcGFnZVggPSAoZXZlbnQgYXMgVG91Y2hFdmVudCkudGFyZ2V0VG91Y2hlc1xuXHRcdFx0XHQ/IChldmVudCBhcyBUb3VjaEV2ZW50KS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYXG5cdFx0XHRcdDogKGV2ZW50IGFzIE1vdXNlRXZlbnQpLnBhZ2VYO1xuXHRcdFx0Y29uc3QgcGFnZVkgPSAoZXZlbnQgYXMgVG91Y2hFdmVudCkudGFyZ2V0VG91Y2hlc1xuXHRcdFx0XHQ/IChldmVudCBhcyBUb3VjaEV2ZW50KS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZXG5cdFx0XHRcdDogKGV2ZW50IGFzIE1vdXNlRXZlbnQpLnBhZ2VZO1xuXG5cdFx0XHR0aGlzLl90cmFuc2ZlckRhdGEuaW5pdFhPZmZzZXQgPSBwYWdlWCAtIGxlZnQ7XG5cdFx0XHR0aGlzLl90cmFuc2ZlckRhdGEuaW5pdFlPZmZzZXQgPSBwYWdlWSAtIHRvcDtcblx0XHRcdHRoaXMuX3RyYW5zZmVyRGF0YS54ID0gcGFnZVg7XG5cdFx0XHR0aGlzLl90cmFuc2ZlckRhdGEueSA9IHBhZ2VZO1xuXHRcdFx0dGhpcy5fdHJhbnNmZXJEYXRhLmNvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG5cdFx0XHR0aGlzLl90cmFuc2ZlckRhdGEuc3RhcnQgPSBpZDtcblx0XHRcdHRoaXMuX3RyYW5zZmVyRGF0YS5pdGVtID0gaXRlbTtcblx0XHR9XG5cdH1cblx0cHVibGljIGlzRHJhZygpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5faXNEcmFnO1xuXHR9XG5cdHB1YmxpYyBjYW5jZWxDYW5Ecm9wKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG5cdFx0dGhpcy5fY2FuTW92ZSA9IGZhbHNlO1xuXHRcdHRoaXMuX2lzRHJhZyA9IGZhbHNlO1xuXHRcdGNvbnN0IHsgc3RhcnQsIHNvdXJjZSwgdGFyZ2V0LCBkcm9wQ29tcG9uZW50SWQgfSA9IHRoaXMuX3RyYW5zZmVyRGF0YTtcblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0c3RhcnQsXG5cdFx0XHRzb3VyY2UsXG5cdFx0XHR0YXJnZXQsXG5cdFx0fTtcblx0XHRjb25zdCBjb2xsZWN0aW9uID0gY29sbGVjdGlvblN0b3JlLmdldEl0ZW0oZHJvcENvbXBvbmVudElkKTtcblx0XHRpZiAoY29sbGVjdGlvbiAmJiB0YXJnZXQpIHtcblx0XHRcdGNvbGxlY3Rpb24uZXZlbnRzLmZpcmUoRHJhZ0V2ZW50cy5jYW5jZWxEcm9wLCBbZGF0YSwgZXZlbnRdKTtcblx0XHR9XG5cdFx0dGhpcy5fdHJhbnNmZXJEYXRhLmRyb3BDb21wb25lbnRJZCA9IG51bGw7XG5cdFx0dGhpcy5fdHJhbnNmZXJEYXRhLnRhcmdldCA9IG51bGw7XG5cdH1cblx0cHJpdmF0ZSBfb25Nb3VzZU1vdmUgPSAoZTogTW91c2VFdmVudCAmIFRvdWNoRXZlbnQpID0+IHtcblx0XHRpZiAoIXRoaXMuX3RyYW5zZmVyRGF0YS5zdGFydCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBhZ2VYID0gZS50YXJnZXRUb3VjaGVzID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcblx0XHRjb25zdCBwYWdlWSA9IGUudGFyZ2V0VG91Y2hlcyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cblx0XHRjb25zdCB7IHgsIHksIHN0YXJ0LCBjb21wb25lbnRJZCB9ID0gdGhpcy5fdHJhbnNmZXJEYXRhO1xuXHRcdGlmICghdGhpcy5fdHJhbnNmZXJEYXRhLmdob3N0KSB7XG5cdFx0XHRpZiAoTWF0aC5hYnMoeCAtIHBhZ2VYKSA8IDMgJiYgTWF0aC5hYnMoeSAtIHBhZ2VZKSA8IDMpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgZ2hvc3QgPSB0aGlzLl9vbkRyYWdTdGFydChzdGFydCwgY29tcG9uZW50SWQsIGUpO1xuXHRcdFx0XHRpZiAoIWdob3N0KSB7XG5cdFx0XHRcdFx0dGhpcy5fZW5kRHJvcChlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fdHJhbnNmZXJEYXRhLmdob3N0ID0gZ2hvc3Q7XG5cdFx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl90cmFuc2ZlckRhdGEuZ2hvc3QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuX21vdmVHaG9zdChwYWdlWCwgcGFnZVkpO1xuXHRcdHRoaXMuX29uRHJhZyhlKTtcblx0fTtcblx0cHJpdmF0ZSBfb25Nb3VzZVVwID0gKGU6IE1vdXNlRXZlbnQgJiBUb3VjaEV2ZW50KSA9PiB7XG5cdFx0aWYgKCF0aGlzLl90cmFuc2ZlckRhdGEueCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5fdHJhbnNmZXJEYXRhLmdob3N0KSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVHaG9zdCgpO1xuXHRcdFx0dGhpcy5fb25Ecm9wKGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9lbmREcm9wKGUpO1xuXHRcdH1cblxuXHRcdGlmICghZS50YXJnZXRUb3VjaGVzKSB7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuX29uTW91c2VNb3ZlIGFzIGFueSk7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLl9vbk1vdXNlVXAgYXMgYW55KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLl9vbk1vdXNlTW92ZSBhcyBhbnkpO1xuXHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMuX29uTW91c2VVcCBhcyBhbnkpO1xuXHRcdH1cblx0fTtcblx0cHJpdmF0ZSBfbW92ZUdob3N0KHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMuX3RyYW5zZmVyRGF0YS5naG9zdCkge1xuXHRcdFx0dGhpcy5fdHJhbnNmZXJEYXRhLmdob3N0LnN0eWxlLmxlZnQgPSB4IC0gdGhpcy5fdHJhbnNmZXJEYXRhLmluaXRYT2Zmc2V0ICsgXCJweFwiO1xuXHRcdFx0dGhpcy5fdHJhbnNmZXJEYXRhLmdob3N0LnN0eWxlLnRvcCA9IHkgLSB0aGlzLl90cmFuc2ZlckRhdGEuaW5pdFlPZmZzZXQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX3JlbW92ZUdob3N0KCkge1xuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5fdHJhbnNmZXJEYXRhLmdob3N0KTtcblx0fVxuXHRwcml2YXRlIF9vbkRyb3AoZTogTW91c2VFdmVudCkge1xuXHRcdGlmICghdGhpcy5fY2FuTW92ZSkge1xuXHRcdFx0dGhpcy5fZW5kRHJvcChlKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCB7IHN0YXJ0LCBzb3VyY2UsIHRhcmdldCwgZHJvcENvbXBvbmVudElkLCBkcm9wUG9zaXRpb24gfSA9IHRoaXMuX3RyYW5zZmVyRGF0YTtcblx0XHRjb25zdCBkYXRhID0geyBzdGFydCwgc291cmNlLCB0YXJnZXQsIGRyb3BQb3NpdGlvbiB9O1xuXHRcdGNvbnN0IGNvbXBvbmVudCA9IGNvbGxlY3Rpb25TdG9yZS5nZXRJdGVtKGRyb3BDb21wb25lbnRJZCk7XG5cdFx0Y29uc3QgY29uZmlnID0gY29tcG9uZW50ICYmIGNvbXBvbmVudC5jb25maWc7XG5cblx0XHRpZiAoIWNvbXBvbmVudCB8fCBjb25maWcuZHJhZ01vZGUgPT09IFwic291cmNlXCIpIHtcblx0XHRcdHRoaXMuX2VuZERyb3AoZSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChjb21wb25lbnQuZXZlbnRzLmZpcmUoRHJhZ0V2ZW50cy5iZWZvcmVEcm9wLCBbZGF0YSwgZV0pKSB7XG5cdFx0XHRjb25zdCB0byA9IHtcblx0XHRcdFx0aWQ6IHRhcmdldCxcblx0XHRcdFx0Y29tcG9uZW50LFxuXHRcdFx0fTtcblx0XHRcdGNvbnN0IGZyb20gPSB7XG5cdFx0XHRcdGlkOiBzdGFydCxcblx0XHRcdFx0Y29tcG9uZW50OiB0aGlzLl90cmFuc2ZlckRhdGEuY29tcG9uZW50LFxuXHRcdFx0fTtcblx0XHRcdHRoaXMuX21vdmUoZnJvbSwgdG8pO1xuXHRcdFx0dG8uY29tcG9uZW50LmV2ZW50cy5maXJlKERyYWdFdmVudHMuYWZ0ZXJEcm9wLCBbZGF0YSwgZV0pO1xuXHRcdH1cblx0XHR0aGlzLl9lbmREcm9wKGUpO1xuXHR9XG5cdHByaXZhdGUgX29uRHJhZ1N0YXJ0KGlkOiBJZCwgY29tcG9uZW50SWQ6IElkLCBlOiBNb3VzZUV2ZW50KSB7XG5cdFx0Y29uc3QgY29tcG9uZW50ID0gY29sbGVjdGlvblN0b3JlLmdldEl0ZW0oY29tcG9uZW50SWQpO1xuXHRcdGNvbnN0IGNvbmZpZyA9IGNvbXBvbmVudC5jb25maWc7XG5cdFx0Y29uc3QgeyBzdGFydCwgc291cmNlLCB0YXJnZXQgfSA9IHRoaXMuX3RyYW5zZmVyRGF0YTtcblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0c3RhcnQsXG5cdFx0XHRzb3VyY2UsXG5cdFx0XHR0YXJnZXQsXG5cdFx0fTtcblxuXHRcdGlmIChjb25maWcuZHJhZ01vZGUgPT09IFwidGFyZ2V0XCIgfHwgY29tcG9uZW50Ll9wcmVncm91cERhdGEpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRjb25zdCBnaG9zdCA9IGRyYWdFdmVudENvbnRlbnQoXG5cdFx0XHR0aGlzLl90cmFuc2ZlckRhdGEuaXRlbSxcblx0XHRcdHRoaXMuX2l0ZW1zRm9yR2hvc3QsXG5cdFx0XHRjb25maWcuZHJhZ0l0ZW0gPT09IFwiY29sdW1uXCIgfHwgY29uZmlnLmRyYWdJdGVtID09PSBcImJvdGhcIlxuXHRcdCk7XG5cdFx0Y29uc3QgYW5zID0gY29tcG9uZW50LmV2ZW50cy5maXJlKERyYWdFdmVudHMuYmVmb3JlRHJhZywgW2RhdGEsIGUsIGdob3N0XSk7XG5cdFx0aWYgKCFhbnMgfHwgIWlkKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0Y29tcG9uZW50LmV2ZW50cy5maXJlKERyYWdFdmVudHMuZHJhZ1N0YXJ0LCBbZGF0YSwgZV0pO1xuXHRcdHRoaXMuX2lzRHJhZyA9IHRydWU7XG5cdFx0dGhpcy5fdG9nZ2xlVGV4dFNlbGVjdGlvbih0cnVlKTtcblx0XHR0aGlzLl90cmFuc2ZlckRhdGEuY29tcG9uZW50ID0gY29tcG9uZW50O1xuXHRcdHRoaXMuX3RyYW5zZmVyRGF0YS5kcmFnQ29uZmlnID0gY29uZmlnO1xuXHRcdHJldHVybiBnaG9zdDtcblx0fVxuXHRwcml2YXRlIF9vbkRyYWcoZTogTW91c2VFdmVudCAmIFRvdWNoRXZlbnQpIHtcblx0XHRjb25zdCBjbGllbnRYID0gZS50YXJnZXRUb3VjaGVzID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7XG5cdFx0Y29uc3QgY2xpZW50WSA9IGUudGFyZ2V0VG91Y2hlcyA/IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZIDogZS5jbGllbnRZO1xuXHRcdGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KGNsaWVudFgsIGNsaWVudFkpO1xuXG5cdFx0Y29uc3QgY29sbGVjdGlvbklkID0gbG9jYXRlKGVsZW1lbnQsIFwiZGh4X3dpZGdldF9pZFwiKTtcblx0XHRpZiAoIWNvbGxlY3Rpb25JZCkge1xuXHRcdFx0aWYgKHRoaXMuX2Nhbk1vdmUpIHtcblx0XHRcdFx0dGhpcy5jYW5jZWxDYW5Ecm9wKGUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGNvbXBvbmVudCA9IGNvbGxlY3Rpb25TdG9yZS5nZXRJdGVtKGNvbGxlY3Rpb25JZCk7XG5cdFx0Y29uc3QgaXNUcmVlSGVhZGVyT3JGb290ZXIgPVxuXHRcdFx0ISFsb2NhdGVOb2RlQnlDbGFzc05hbWUoZWxlbWVudCwgXCJkaHhfZ3JpZC1oZWFkZXJcIikgfHxcblx0XHRcdCEhbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lKGVsZW1lbnQsIFwiZGh4X2dyaWQtZm9vdGVyXCIpO1xuXHRcdGNvbnN0IGdyaWRDb25maWcgPVxuXHRcdFx0Y29tcG9uZW50ICYmIChjb21wb25lbnQuY29uZmlnIGFzIElHcmlkQ29uZmlnKS5jb2x1bW5zXG5cdFx0XHRcdD8gKGNvbXBvbmVudC5jb25maWcgYXMgSUdyaWRDb25maWcpXG5cdFx0XHRcdDogdW5kZWZpbmVkO1xuXHRcdGNvbnN0IGlzQ29sdW1uRHJhZyA9XG5cdFx0XHRncmlkQ29uZmlnICYmIChncmlkQ29uZmlnLmRyYWdJdGVtID09PSBcImJvdGhcIiB8fCBncmlkQ29uZmlnLmRyYWdJdGVtID09PSBcImNvbHVtblwiKTtcblxuXHRcdGlmIChpc1RyZWVIZWFkZXJPckZvb3RlciAmJiAhaXNDb2x1bW5EcmFnKSB7XG5cdFx0XHRpZiAodGhpcy5fY2FuTW92ZSkge1xuXHRcdFx0XHR0aGlzLmNhbmNlbENhbkRyb3AoZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgaWQgPSBsb2NhdGUoZWxlbWVudCwgXCJkaHhfaWRcIik7XG5cdFx0Y29uc3Qgcm9vdElkID0gbG9jYXRlKGVsZW1lbnQsIFwiZGh4X3Jvb3RfaWRcIik7XG5cblx0XHRpZiAoIWlkICYmICFyb290SWQpIHtcblx0XHRcdHRoaXMuY2FuY2VsQ2FuRHJvcChlKTtcblx0XHRcdHRoaXMuX3RyYW5zZmVyRGF0YS5kcm9wQ29tcG9uZW50SWQgPSBjb2xsZWN0aW9uSWQ7XG5cdFx0XHR0aGlzLl90cmFuc2ZlckRhdGEudGFyZ2V0ID0gbnVsbDtcblx0XHRcdHRoaXMuX2NhbkRyb3AoZSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgeyBkcm9wQ29tcG9uZW50SWQsIHN0YXJ0LCBzb3VyY2UsIHRhcmdldCwgY29tcG9uZW50SWQsIGRyb3BQb3NpdGlvbiB9ID0gdGhpcy5fdHJhbnNmZXJEYXRhO1xuXG5cdFx0aWYgKGNvbXBvbmVudC5jb25maWcuZHJvcEJlaGF2aW91ciA9PT0gXCJjb21wbGV4XCIpIHtcblx0XHRcdGNvbnN0IHBvcyA9IGdldFBvc2l0aW9uKGUpO1xuXHRcdFx0aWYgKHBvcyA8PSAwLjI1KSB7XG5cdFx0XHRcdHRoaXMuX3RyYW5zZmVyRGF0YS5kcm9wUG9zaXRpb24gPSBcInRvcFwiO1xuXHRcdFx0fSBlbHNlIGlmIChwb3MgPj0gMC43NSkge1xuXHRcdFx0XHR0aGlzLl90cmFuc2ZlckRhdGEuZHJvcFBvc2l0aW9uID0gXCJib3R0b21cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3RyYW5zZmVyRGF0YS5kcm9wUG9zaXRpb24gPSBcImluXCI7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICgodGFyZ2V0ID09PSBpZCB8fCB0YXJnZXQgPT09IHJvb3RJZCkgJiYgZHJvcENvbXBvbmVudElkID09PSBjb2xsZWN0aW9uSWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBmcm9tOiBJQ29weU9iamVjdCA9IHtcblx0XHRcdGlkOiBzdGFydCxcblx0XHRcdGNvbXBvbmVudDogdGhpcy5fdHJhbnNmZXJEYXRhLmNvbXBvbmVudCxcblx0XHR9O1xuXHRcdGlmIChjb21wb25lbnQuY29uZmlnLmRyYWdNb2RlID09PSBcInNvdXJjZVwiKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZnJvbS5jb21wb25lbnQuZXZlbnRzLmZpcmUoRHJhZ0V2ZW50cy5kcmFnT3V0LCBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0YXJ0LFxuXHRcdFx0XHRzb3VyY2UsXG5cdFx0XHRcdHRhcmdldCxcblx0XHRcdH0sXG5cdFx0XHRlLFxuXHRcdF0pO1xuXG5cdFx0aWYgKFxuXHRcdFx0Y29sbGVjdGlvbklkICE9PSBjb21wb25lbnRJZCB8fFxuXHRcdFx0IWlzVHJlZUNvbGxlY3Rpb24oZnJvbS5jb21wb25lbnQuZGF0YSkgfHxcblx0XHRcdChpc1RyZWVDb2xsZWN0aW9uKGZyb20uY29tcG9uZW50LmRhdGEpICYmIGZyb20uY29tcG9uZW50LmRhdGEuY2FuQ29weShmcm9tLmlkLCBpZCkpXG5cdFx0KSB7XG5cdFx0XHR0aGlzLmNhbmNlbENhbkRyb3AoZSk7IC8vIGNsZWFyIGxhc3Rcblx0XHRcdHRoaXMuX3RyYW5zZmVyRGF0YS50YXJnZXQgPSBpZCB8fCByb290SWQ7XG5cdFx0XHR0aGlzLl90cmFuc2ZlckRhdGEuZHJvcENvbXBvbmVudElkID0gY29sbGVjdGlvbklkO1xuXHRcdFx0Y29uc3QgY2FuTW92ZSA9IGZyb20uY29tcG9uZW50LmV2ZW50cy5maXJlKERyYWdFdmVudHMuZHJhZ0luLCBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzdGFydCxcblx0XHRcdFx0XHRzb3VyY2UsXG5cdFx0XHRcdFx0dGFyZ2V0LFxuXHRcdFx0XHRcdGRyb3BQb3NpdGlvbixcblx0XHRcdFx0fSxcblx0XHRcdFx0ZSxcblx0XHRcdF0pO1xuXHRcdFx0aWYgKGNhbk1vdmUpIHtcblx0XHRcdFx0dGhpcy5fY2FuRHJvcChlKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5jYW5jZWxDYW5Ecm9wKGUpO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9tb3ZlKGZyb206IElDb3B5T2JqZWN0LCB0bzogSUNvcHlPYmplY3QpOiB2b2lkIHtcblx0XHRjb25zdCBmcm9tRGF0YSA9IGZyb20uY29tcG9uZW50LmRhdGE7XG5cdFx0Y29uc3QgdG9EYXRhID0gdG8uY29tcG9uZW50LmRhdGE7XG5cdFx0bGV0IGluZGV4ID0gMDtcblx0XHRsZXQgY29tcG9uZW50SWQgPSB0by5pZDtcblx0XHRjb25zdCBiZWhhdmlvdXIgPSBpc1RyZWVDb2xsZWN0aW9uKHRvRGF0YSkgPyB0by5jb21wb25lbnQuY29uZmlnLmRyb3BCZWhhdmlvdXIgOiB1bmRlZmluZWQ7XG5cblx0XHRjb25zdCBncmlkQ29uZmlnID0gKGZyb20uY29tcG9uZW50LmNvbmZpZyBhcyBJR3JpZENvbmZpZykuY29sdW1uc1xuXHRcdFx0PyAoZnJvbS5jb21wb25lbnQuY29uZmlnIGFzIElHcmlkQ29uZmlnKVxuXHRcdFx0OiB1bmRlZmluZWQ7XG5cblx0XHRjb25zdCBpc0NvbHVtbkRyYWcgPVxuXHRcdFx0Z3JpZENvbmZpZyAmJlxuXHRcdFx0KGdyaWRDb25maWcuZHJhZ0l0ZW0gPT09IFwiYm90aFwiIHx8IGdyaWRDb25maWcuZHJhZ0l0ZW0gPT09IFwiY29sdW1uXCIpICYmXG5cdFx0XHRncmlkQ29uZmlnLmNvbHVtbnMubWFwKGMgPT4gYy5pZCkuZmlsdGVyKGlkID0+IGlkID09PSBmcm9tLmlkIHx8IGlkID09PSB0by5pZCkubGVuZ3RoO1xuXG5cdFx0aWYgKGlzQ29sdW1uRHJhZyAmJiBmcm9tLmNvbXBvbmVudCA9PT0gdG8uY29tcG9uZW50KSB7XG5cdFx0XHRpZiAoZnJvbS5pZCA9PT0gdG8uaWQpIHJldHVybjtcblx0XHRcdGNvbnN0IGdyaWQgPSAoZnJvbS5jb21wb25lbnQgYXMgYW55KSBhcyBHcmlkO1xuXHRcdFx0Y29uc3QgY3VycmVudENvbHMgPSBncmlkLmNvbmZpZy5jb2x1bW5zLm1hcChjID0+ICh7IC4uLmMgfSkpO1xuXHRcdFx0Y29uc3Qgc291cmNlSW5kZXggPSBjdXJyZW50Q29scy5maW5kSW5kZXgoYyA9PiBjLmlkID09PSBmcm9tLmlkKTtcblx0XHRcdGNvbnN0IGNvbXBvbmVudEluZGV4ID0gY3VycmVudENvbHMuZmluZEluZGV4KGMgPT4gYy5pZCA9PT0gdG8uaWQpO1xuXHRcdFx0aWYgKGNvbXBvbmVudEluZGV4ID09PSAtMSkgcmV0dXJuO1xuXHRcdFx0Y3VycmVudENvbHMuc3BsaWNlKGNvbXBvbmVudEluZGV4LCAwLCBjdXJyZW50Q29scy5zcGxpY2Uoc291cmNlSW5kZXgsIDEpWzBdKTtcblx0XHRcdGdyaWQuc2V0Q29sdW1ucyhjdXJyZW50Q29scyk7XG5cdFx0XHRncmlkLnBhaW50KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fSBlbHNlIGlmIChpc0NvbHVtbkRyYWcgJiYgZnJvbS5jb21wb25lbnQgaW5zdGFuY2VvZiBQcm9HcmlkICYmIHRvLmNvbXBvbmVudCBpbnN0YW5jZW9mIFByb0dyaWQpIHtcblx0XHRcdGNvbnN0IGdyaWQgPSAoZnJvbS5jb21wb25lbnQgYXMgYW55KSBhcyBHcmlkO1xuXHRcdFx0Y29uc3QgbmV4dEdyaWQgPSAodG8uY29tcG9uZW50IGFzIGFueSkgYXMgR3JpZDtcblx0XHRcdGNvbnN0IGN1cnJlbnRDb2xzID0gZ3JpZC5jb25maWcuY29sdW1ucy5tYXAoYyA9PiAoeyAuLi5jIH0pKTtcblx0XHRcdGNvbnN0IHNvdXJjZUluZGV4ID0gY3VycmVudENvbHMuZmluZEluZGV4KGMgPT4gYy5pZCA9PT0gZnJvbS5pZCk7XG5cdFx0XHRjb25zdCBuZXh0R3JpZENvbHMgPSBuZXh0R3JpZC5jb25maWcuY29sdW1ucy5tYXAoYyA9PiAoeyAuLi5jIH0pKTtcblx0XHRcdGNvbnN0IGNvbXBvbmVudEluZGV4ID0gbmV4dEdyaWRDb2xzLmZpbmRJbmRleChjID0+IGMuaWQgPT09IHRvLmlkKTtcblx0XHRcdGNvbnN0IGlzSWRFeHNpc3QgPSBuZXh0R3JpZENvbHMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gZnJvbS5pZCk7XG5cdFx0XHRjb25zdCBjb3B5SWQgPSBpc0lkRXhzaXN0ID49IDAgPyBgJHtmcm9tLmlkfV9jb3B5YCA6IGZyb20uaWQ7XG5cblx0XHRcdGNvbnN0IGN1cnJlbnRDb2x1bW5EYXRhID0gW107XG5cdFx0XHRncmlkLmRhdGEuZm9yRWFjaChpdGVtID0+IHtcblx0XHRcdFx0Y3VycmVudENvbHVtbkRhdGEucHVzaCh7IFtjb3B5SWRdOiBpdGVtW2Zyb20uaWRdIH0pO1xuXHRcdFx0fSk7XG5cdFx0XHRuZXh0R3JpZC5kYXRhLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG5cdFx0XHRcdG5leHRHcmlkLmRhdGEudXBkYXRlKGl0ZW0uaWQsIHsgLi4uaXRlbSwgLi4uY3VycmVudENvbHVtbkRhdGFbaW5kZXhdIH0pO1xuXHRcdFx0fSk7XG5cdFx0XHRjb25zdCBjb2wgPSBjdXJyZW50Q29scy5zcGxpY2Uoc291cmNlSW5kZXgsIDEpWzBdO1xuXHRcdFx0Y29sLmlkID0gY29weUlkO1xuXHRcdFx0bmV4dEdyaWRDb2xzLnNwbGljZShjb21wb25lbnRJbmRleCwgMCwgY29sKTtcblx0XHRcdG5leHRHcmlkLnNldENvbHVtbnMobmV4dEdyaWRDb2xzKTtcblx0XHRcdG5leHRHcmlkLnBhaW50KCk7XG5cdFx0XHRncmlkLnNldENvbHVtbnMoY3VycmVudENvbHMpO1xuXHRcdFx0Z3JpZC5wYWludCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGlzUm9vdFBhcmVudCA9IHRvLmlkID09PSAodG8uY29tcG9uZW50IGFzIGFueSkuY29uZmlnLnJvb3RQYXJlbnQ7XG5cblx0XHRzd2l0Y2ggKGJlaGF2aW91cikge1xuXHRcdFx0Y2FzZSBcImNoaWxkXCI6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInNpYmxpbmdcIjpcblx0XHRcdFx0Y29tcG9uZW50SWQgPSAodG9EYXRhIGFzIFRyZWVDb2xsZWN0aW9uKS5nZXRQYXJlbnQoY29tcG9uZW50SWQpO1xuXHRcdFx0XHRpbmRleCA9IHRvRGF0YS5nZXRJbmRleCh0by5pZCkgKyAxO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJjb21wbGV4XCI6IHtcblx0XHRcdFx0Y29uc3QgZHJvcFBvc2l0aW9uID0gdGhpcy5fdHJhbnNmZXJEYXRhLmRyb3BQb3NpdGlvbjtcblx0XHRcdFx0aWYgKGlzUm9vdFBhcmVudCkge1xuXHRcdFx0XHRcdGNvbXBvbmVudElkID0gdG8uaWQ7XG5cdFx0XHRcdFx0aW5kZXggPSB0b0RhdGEuZ2V0TGVuZ3RoKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKGRyb3BQb3NpdGlvbiA9PT0gXCJ0b3BcIikge1xuXHRcdFx0XHRcdFx0Y29tcG9uZW50SWQgPSAodG9EYXRhIGFzIFRyZWVDb2xsZWN0aW9uKS5nZXRQYXJlbnQoY29tcG9uZW50SWQpO1xuXHRcdFx0XHRcdFx0aW5kZXggPSB0b0RhdGEuZ2V0SW5kZXgodG8uaWQpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZHJvcFBvc2l0aW9uID09PSBcImJvdHRvbVwiKSB7XG5cdFx0XHRcdFx0XHRjb21wb25lbnRJZCA9ICh0b0RhdGEgYXMgVHJlZUNvbGxlY3Rpb24pLmdldFBhcmVudChjb21wb25lbnRJZCk7XG5cdFx0XHRcdFx0XHRpbmRleCA9IHRvRGF0YS5nZXRJbmRleCh0by5pZCkgKyAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdC8vIGxpc3QgbW92ZVxuXHRcdFx0XHRpZiAoIXRvLmlkKSB7XG5cdFx0XHRcdFx0aW5kZXggPSAtMTtcblx0XHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0XHRmcm9tLmNvbXBvbmVudCA9PT0gdG8uY29tcG9uZW50ICYmXG5cdFx0XHRcdFx0dG9EYXRhLmdldEluZGV4KGZyb20uaWQpIDwgdG9EYXRhLmdldEluZGV4KHRvLmlkKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRpbmRleCA9IHRvRGF0YS5nZXRJbmRleCh0by5pZCkgLSAxO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGluZGV4ID0gdG9EYXRhLmdldEluZGV4KHRvLmlkKTtcblx0XHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0aGlzLl90cmFuc2ZlckRhdGEuZHJhZ0NvbmZpZy5kcmFnQ29weSkge1xuXHRcdFx0aWYgKHRoaXMuX3RyYW5zZmVyRGF0YS5zb3VyY2UgaW5zdGFuY2VvZiBBcnJheSAmJiB0aGlzLl90cmFuc2ZlckRhdGEuc291cmNlLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0dGhpcy5fdHJhbnNmZXJEYXRhLnNvdXJjZS5tYXAoc2VsY3RlZElkID0+IHtcblx0XHRcdFx0XHRmcm9tRGF0YS5jb3B5KHNlbGN0ZWRJZCwgaW5kZXgsIHRvRGF0YSwgY29tcG9uZW50SWQpO1xuXHRcdFx0XHRcdGlmIChpbmRleCA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmcm9tRGF0YS5jb3B5KGZyb20uaWQsIGluZGV4LCB0b0RhdGEsIGNvbXBvbmVudElkKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHRoaXMuX3RyYW5zZmVyRGF0YS5zb3VyY2UgaW5zdGFuY2VvZiBBcnJheSAmJiB0aGlzLl90cmFuc2ZlckRhdGEuc291cmNlLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0dGhpcy5fdHJhbnNmZXJEYXRhLnNvdXJjZS5tYXAoc2VsY3RlZElkID0+IHtcblx0XHRcdFx0XHQoZnJvbURhdGEgYXMgYW55KS5tb3ZlKHNlbGN0ZWRJZCwgaW5kZXgsIHRvRGF0YSwgY29tcG9uZW50SWQpO1xuXHRcdFx0XHRcdGlmIChpbmRleCA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQoZnJvbURhdGEgYXMgYW55KS5tb3ZlKGZyb20uaWQsIGluZGV4LCB0b0RhdGEsIGNvbXBvbmVudElkKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfZW5kRHJvcChlOiBNb3VzZUV2ZW50KSB7XG5cdFx0dGhpcy5fdG9nZ2xlVGV4dFNlbGVjdGlvbihmYWxzZSk7XG5cdFx0aWYgKHRoaXMuX3RyYW5zZmVyRGF0YS5jb21wb25lbnQpIHtcblx0XHRcdGNvbnN0IHsgc3RhcnQsIHNvdXJjZSwgdGFyZ2V0IH0gPSB0aGlzLl90cmFuc2ZlckRhdGE7XG5cdFx0XHRjb25zdCBkYXRhID0geyBzdGFydCwgc291cmNlLCB0YXJnZXQgfTtcblx0XHRcdHRoaXMuX3RyYW5zZmVyRGF0YS5jb21wb25lbnQuZXZlbnRzLmZpcmUoRHJhZ0V2ZW50cy5hZnRlckRyYWcsIFtkYXRhLCBlXSk7XG5cdFx0fVxuXHRcdHRoaXMuY2FuY2VsQ2FuRHJvcChlKTtcblx0XHR0aGlzLl9jYW5Nb3ZlID0gdHJ1ZTtcblx0XHR0aGlzLl90cmFuc2ZlckRhdGEgPSB7fTtcblx0XHR0aGlzLl90cmFuc2ZlckRhdGEudGFyZ2V0ID0gbnVsbDtcblx0XHR0aGlzLl90cmFuc2ZlckRhdGEuZHJvcENvbXBvbmVudElkID0gbnVsbDtcblx0fVxuXHRwcml2YXRlIF9jYW5Ecm9wKGU6IE1vdXNlRXZlbnQpIHtcblx0XHR0aGlzLl9jYW5Nb3ZlID0gdHJ1ZTtcblx0XHRjb25zdCB7IHN0YXJ0LCBzb3VyY2UsIHRhcmdldCwgZHJvcFBvc2l0aW9uIH0gPSB0aGlzLl90cmFuc2ZlckRhdGE7XG5cdFx0Y29uc3QgZGF0YSA9IHtcblx0XHRcdHN0YXJ0LFxuXHRcdFx0c291cmNlLFxuXHRcdFx0dGFyZ2V0LFxuXHRcdFx0ZHJvcFBvc2l0aW9uLFxuXHRcdH07XG5cblx0XHRjb25zdCBjb21wb25lbnQgPSBjb2xsZWN0aW9uU3RvcmUuZ2V0SXRlbSh0aGlzLl90cmFuc2ZlckRhdGEuZHJvcENvbXBvbmVudElkKTtcblx0XHRpZiAoY29tcG9uZW50ICYmIHRoaXMuX3RyYW5zZmVyRGF0YS50YXJnZXQpIHtcblx0XHRcdGNvbXBvbmVudC5ldmVudHMuZmlyZShEcmFnRXZlbnRzLmNhbkRyb3AsIFtkYXRhLCBlXSk7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX3RvZ2dsZVRleHRTZWxlY3Rpb24oYWRkOiBib29sZWFuKSB7XG5cdFx0aWYgKGFkZCkge1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiZGh4X25vLXNlbGVjdFwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwiZGh4X25vLXNlbGVjdFwiKTtcblx0XHR9XG5cdH1cbn1cblxuY29uc3QgZGh4ID0gKCh3aW5kb3cgYXMgYW55KS5kaHhIZWxwZXJzID0gKHdpbmRvdyBhcyBhbnkpLmRoeEhlbHBlcnMgfHwge30pO1xuZGh4LmRyYWdNYW5hZ2VyID0gZGh4LmRyYWdNYW5hZ2VyIHx8IG5ldyBEcmFnTWFuYWdlcigpO1xuZXhwb3J0IGNvbnN0IGRyYWdNYW5hZ2VyOiBJRHJhZ01hbmFnZXIgPSBkaHguZHJhZ01hbmFnZXI7XG4iLCJpbXBvcnQgeyBJQWpheEhlbHBlciwgSUFqYXhIZWxwZXJDb25maWcsIERhdGFEcml2ZXIsIEFqYXhSZXNwb25zZVR5cGUgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgdG9EYXRhRHJpdmVyIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgWE1MRHJpdmVyIH0gZnJvbSBcIi4vZHJpdmVycy9YTUxEcml2ZXJcIjtcblxuZnVuY3Rpb24gdG9RdWVyeVN0cmluZyhkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhkYXRhKVxuXHRcdC5yZWR1Y2UoKGVudHJpZXMsIGtleSkgPT4ge1xuXHRcdFx0Y29uc3QgdmFsdWUgPSB0eXBlb2YgZGF0YVtrZXldID09PSBcIm9iamVjdFwiID8gSlNPTi5zdHJpbmdpZnkoZGF0YVtrZXldKSA6IGRhdGFba2V5XTtcblx0XHRcdGVudHJpZXMucHVzaChrZXkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXHRcdFx0cmV0dXJuIGVudHJpZXM7XG5cdFx0fSwgW10pXG5cdFx0LmpvaW4oXCImXCIpO1xufVxuXG5mdW5jdGlvbiBpbmZlclJlc3BvbnNlVHlwZShjb250ZW50VHlwZTogc3RyaW5nKTogQWpheFJlc3BvbnNlVHlwZSB7XG5cdGlmICghY29udGVudFR5cGUpIHtcblx0XHRyZXR1cm4gXCJ0ZXh0XCI7XG5cdH1cblx0aWYgKGNvbnRlbnRUeXBlLmluY2x1ZGVzKFwianNvblwiKSkge1xuXHRcdHJldHVybiBcImpzb25cIjtcblx0fVxuXHRpZiAoY29udGVudFR5cGUuaW5jbHVkZXMoXCJ4bWxcIikpIHtcblx0XHRyZXR1cm4gXCJ4bWxcIjtcblx0fVxuXHRyZXR1cm4gXCJ0ZXh0XCI7XG59XG5cbmZ1bmN0aW9uIHNlbmQ8VD4oXG5cdHVybDogc3RyaW5nLFxuXHRkYXRhOiBhbnksXG5cdG1ldGhvZDogXCJHRVRcIiB8IFwiUE9TVFwiIHwgXCJQVVRcIiB8IFwiREVMRVRFXCIsXG5cdGhlYWRlcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9LFxuXHRyZXNwb25zZVR5cGU/OiBBamF4UmVzcG9uc2VUeXBlXG4pOiBQcm9taXNlPFQ+IHtcblx0ZnVuY3Rpb24gcGFyc2VSZXNwb25zZShyZXNwb25zZVRleHQsIGdlblJlc3BvbnNlVHlwZTogQWpheFJlc3BvbnNlVHlwZSkge1xuXHRcdHN3aXRjaCAoZ2VuUmVzcG9uc2VUeXBlKSB7XG5cdFx0XHRjYXNlIFwianNvblwiOiB7XG5cdFx0XHRcdHJldHVybiBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCk7XG5cdFx0XHR9XG5cdFx0XHRjYXNlIFwidGV4dFwiOiB7XG5cdFx0XHRcdHJldHVybiByZXNwb25zZVRleHQ7XG5cdFx0XHR9XG5cdFx0XHRjYXNlIFwieG1sXCI6IHtcblx0XHRcdFx0Y29uc3QgZHJpdmVyID0gdG9EYXRhRHJpdmVyKERhdGFEcml2ZXIueG1sKSBhcyBYTUxEcml2ZXI7XG5cdFx0XHRcdGlmIChkcml2ZXIpIHtcblx0XHRcdFx0XHRyZXR1cm4gZHJpdmVyLnRvSnNvbk9iamVjdChyZXNwb25zZVRleHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB7IHBhcnNlRXJyb3I6IFwiSW5jb3JyZWN0IGRhdGEgZHJpdmVyIHR5cGU6ICd4bWwnXCIgfTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2VUZXh0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGNvbnN0IGFsbEhlYWRlcnMgPSBoZWFkZXJzIHx8IHt9O1xuXG5cdGlmIChyZXNwb25zZVR5cGUpIHtcblx0XHRhbGxIZWFkZXJzLkFjY2VwdCA9IFwiYXBwbGljYXRpb24vXCIgKyByZXNwb25zZVR5cGU7XG5cdH1cblxuXHRpZiAobWV0aG9kICE9PSBcIkdFVFwiKSB7XG5cdFx0YWxsSGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9IGFsbEhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gfHwgXCJhcHBsaWNhdGlvbi9qc29uXCI7XG5cdH1cblxuXHRpZiAobWV0aG9kID09PSBcIkdFVFwiKSB7XG5cdFx0Y29uc3QgdXJsRGF0YSA9XG5cdFx0XHRkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiXG5cdFx0XHRcdD8gdG9RdWVyeVN0cmluZyhkYXRhKVxuXHRcdFx0XHQ6IGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCJcblx0XHRcdFx0PyBkYXRhXG5cdFx0XHRcdDogXCJcIjtcblx0XHRpZiAodXJsRGF0YSkge1xuXHRcdFx0dXJsICs9ICF1cmwuaW5jbHVkZXMoXCI/XCIpID8gXCI/XCIgOiBcIiZcIjtcblx0XHRcdHVybCArPSB1cmxEYXRhO1xuXHRcdH1cblx0XHRkYXRhID0gbnVsbDtcblx0fVxuXG5cdGlmICghd2luZG93LmZldGNoKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHRcdFx0eGhyLm9ubG9hZCA9ICgpID0+IHtcblx0XHRcdFx0aWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcblx0XHRcdFx0XHRpZiAocmVzcG9uc2VUeXBlID09PSBcInJhd1wiKSB7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKHtcblx0XHRcdFx0XHRcdFx0dXJsOiB4aHIucmVzcG9uc2VVUkwsXG5cdFx0XHRcdFx0XHRcdGhlYWRlcnM6IHhoclxuXHRcdFx0XHRcdFx0XHRcdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdC50cmltKClcblx0XHRcdFx0XHRcdFx0XHQuc3BsaXQoL1tcXHJcXG5dKy8pXG5cdFx0XHRcdFx0XHRcdFx0LnJlZHVjZSgoYWNjLCBjdXIpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGt2ID0gY3VyLnNwbGl0KFwiOiBcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRhY2Nba3ZbMF1dID0ga3ZbMV07XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYWNjO1xuXHRcdFx0XHRcdFx0XHRcdH0sIHt9KSxcblx0XHRcdFx0XHRcdFx0Ym9keTogeGhyLnJlc3BvbnNlLFxuXHRcdFx0XHRcdFx0fSBhcyBhbnkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoeGhyLnN0YXR1cyA9PT0gMjA0KSB7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdHBhcnNlUmVzcG9uc2UoXG5cdFx0XHRcdFx0XHRcdFx0eGhyLnJlc3BvbnNlVGV4dCxcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZVR5cGUgfHwgaW5mZXJSZXNwb25zZVR5cGUoeGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZWplY3Qoe1xuXHRcdFx0XHRcdFx0c3RhdHVzOiB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0c3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHR4aHIub25lcnJvciA9ICgpID0+IHtcblx0XHRcdFx0cmVqZWN0KHtcblx0XHRcdFx0XHRzdGF0dXM6IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0c3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG5cdFx0XHRcdFx0bWVzc2FnZTogeGhyLnJlc3BvbnNlVGV4dCxcblx0XHRcdFx0fSk7XG5cdFx0XHR9O1xuXHRcdFx0eGhyLm9wZW4obWV0aG9kLCB1cmwpO1xuXHRcdFx0Zm9yIChjb25zdCBoZWFkZXJLZXkgaW4gYWxsSGVhZGVycykge1xuXHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXJLZXksIGFsbEhlYWRlcnNbaGVhZGVyS2V5XSk7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKG1ldGhvZCkge1xuXHRcdFx0XHRjYXNlIFwiUE9TVFwiOlxuXHRcdFx0XHRjYXNlIFwiREVMRVRFXCI6XG5cdFx0XHRcdGNhc2UgXCJQVVRcIjpcblx0XHRcdFx0XHR4aHIuc2VuZChkYXRhICE9PSB1bmRlZmluZWQgPyBKU09OLnN0cmluZ2lmeShkYXRhKSA6IFwiXCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiR0VUXCI6XG5cdFx0XHRcdFx0eGhyLnNlbmQoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR4aHIuc2VuZCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiB3aW5kb3dcblx0XHRcdC5mZXRjaCh1cmwsIHtcblx0XHRcdFx0bWV0aG9kLFxuXHRcdFx0XHRib2R5OiBkYXRhID8gSlNPTi5zdHJpbmdpZnkoZGF0YSkgOiBudWxsLFxuXHRcdFx0XHRoZWFkZXJzOiBhbGxIZWFkZXJzLFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdFx0aWYgKHJlc3BvbnNlLm9rKSB7XG5cdFx0XHRcdFx0Y29uc3QgZ2VuUmVzcG9uc2VUeXBlID1cblx0XHRcdFx0XHRcdHJlc3BvbnNlVHlwZSB8fCBpbmZlclJlc3BvbnNlVHlwZShyZXNwb25zZS5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKSk7XG5cdFx0XHRcdFx0aWYgKGdlblJlc3BvbnNlVHlwZSA9PT0gXCJyYXdcIikge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtaWdub3JlXG5cdFx0XHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRcdFx0aGVhZGVyczogT2JqZWN0LmZyb21FbnRyaWVzKHJlc3BvbnNlLmhlYWRlcnMuZW50cmllcygpKSxcblx0XHRcdFx0XHRcdFx0dXJsOiByZXNwb25zZS51cmwsXG5cdFx0XHRcdFx0XHRcdGJvZHk6IHJlc3BvbnNlLmJvZHksXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDQpIHtcblx0XHRcdFx0XHRcdHN3aXRjaCAoZ2VuUmVzcG9uc2VUeXBlKSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJqc29uXCI6IHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJ4bWxcIjoge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGRyaXZlciA9IHRvRGF0YURyaXZlcihEYXRhRHJpdmVyLnhtbCkgYXMgWE1MRHJpdmVyO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChkcml2ZXIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZS50ZXh0KCkudGhlbih4bWxEYXRhID0+IGRyaXZlci50b0pzb25PYmplY3QoeG1sRGF0YSkpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZS50ZXh0KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiByZXNwb25zZS50ZXh0KCkudGhlbihtZXNzYWdlID0+XG5cdFx0XHRcdFx0XHRQcm9taXNlLnJlamVjdCh7XG5cdFx0XHRcdFx0XHRcdHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuXHRcdFx0XHRcdFx0XHRtZXNzYWdlLFxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fVxufVxuXG5leHBvcnQgY29uc3QgYWpheDogSUFqYXhIZWxwZXIgPSB7XG5cdGdldDogKHVybDogc3RyaW5nLCBkYXRhPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IHN0cmluZywgY29uZmlnPzogUGFydGlhbDxJQWpheEhlbHBlckNvbmZpZz4pID0+XG5cdFx0c2VuZChcblx0XHRcdHVybCxcblx0XHRcdGRhdGEsXG5cdFx0XHRcIkdFVFwiLFxuXHRcdFx0Y29uZmlnICYmIGNvbmZpZy5oZWFkZXJzLFxuXHRcdFx0Y29uZmlnICE9PSB1bmRlZmluZWQgPyBjb25maWcucmVzcG9uc2VUeXBlIDogdW5kZWZpbmVkXG5cdFx0KSxcblxuXHRwb3N0OiAodXJsOiBzdHJpbmcsIGRhdGE/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgc3RyaW5nLCBjb25maWc/OiBQYXJ0aWFsPElBamF4SGVscGVyQ29uZmlnPikgPT5cblx0XHRzZW5kKFxuXHRcdFx0dXJsLFxuXHRcdFx0ZGF0YSxcblx0XHRcdFwiUE9TVFwiLFxuXHRcdFx0Y29uZmlnICYmIGNvbmZpZy5oZWFkZXJzLFxuXHRcdFx0Y29uZmlnICE9PSB1bmRlZmluZWQgPyBjb25maWcucmVzcG9uc2VUeXBlIDogdW5kZWZpbmVkXG5cdFx0KSxcblxuXHRwdXQ6ICh1cmw6IHN0cmluZywgZGF0YT86IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBzdHJpbmcsIGNvbmZpZz86IFBhcnRpYWw8SUFqYXhIZWxwZXJDb25maWc+KSA9PlxuXHRcdHNlbmQoXG5cdFx0XHR1cmwsXG5cdFx0XHRkYXRhLFxuXHRcdFx0XCJQVVRcIixcblx0XHRcdGNvbmZpZyAmJiBjb25maWcuaGVhZGVycyxcblx0XHRcdGNvbmZpZyAhPT0gdW5kZWZpbmVkID8gY29uZmlnLnJlc3BvbnNlVHlwZSA6IHVuZGVmaW5lZFxuXHRcdCksXG5cblx0ZGVsZXRlOiAodXJsOiBzdHJpbmcsIGRhdGE/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgc3RyaW5nLCBjb25maWc/OiBQYXJ0aWFsPElBamF4SGVscGVyQ29uZmlnPikgPT5cblx0XHRzZW5kKFxuXHRcdFx0dXJsLFxuXHRcdFx0ZGF0YSxcblx0XHRcdFwiREVMRVRFXCIsXG5cdFx0XHRjb25maWcgJiYgY29uZmlnLmhlYWRlcnMsXG5cdFx0XHRjb25maWcgIT09IHVuZGVmaW5lZCA/IGNvbmZpZy5yZXNwb25zZVR5cGUgOiB1bmRlZmluZWRcblx0XHQpLFxufTtcbiIsImltcG9ydCB7IEV2ZW50U3lzdGVtLCBJRXZlbnRTeXN0ZW0gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZXZlbnRzXCI7XG5pbXBvcnQgeyBJZCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi90eXBlc1wiO1xuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSBcIi4vZGF0YWNvbGxlY3Rpb24vbG9hZGVyXCI7XG5pbXBvcnQgeyBTb3J0IH0gZnJvbSBcIi4vZGF0YWNvbGxlY3Rpb24vc29ydFwiO1xuaW1wb3J0IHsgRGF0YVByb3h5IH0gZnJvbSBcIi4vZGF0YXByb3h5XCI7XG5pbXBvcnQge1xuXHRkaHhFcnJvcixcblx0ZGh4V2FybmluZyxcblx0ZmluZEJ5Q29uZixcblx0aXNEZWJ1Zyxcblx0aXNFcXVhbE9iaixcblx0Y29weVdpdGhvdXRJbm5lcixcblx0dG9EYXRhRHJpdmVyLFxufSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5pbXBvcnQge1xuXHREYXRhQ2FsbGJhY2ssXG5cdERhdGFFdmVudHMsXG5cdElEYXRhQ2hhbmdlU3RhY2ssXG5cdElEYXRhQ29sbGVjdGlvbixcblx0SURhdGFJdGVtLFxuXHRJRGF0YVByb3h5LFxuXHRJRmlsdGVyQ2FsbGJhY2ssXG5cdElGaWx0ZXJDb25maWcsXG5cdElGaWx0ZXJNb2RlLFxuXHRJU29ydE1vZGUsXG5cdElUcmVlQ29sbGVjdGlvbixcblx0SVVwZGF0ZU9iamVjdCxcblx0UmVkdWNlQ2FsbEJhY2ssXG5cdFN0YXR1c2VzLFxuXHRJRGF0YUV2ZW50c0hhbmRsZXJzTWFwLFxuXHREYXRhRHJpdmVyLFxuXHRJRGF0YUNvbmZpZyxcblx0SVNvcnRDb25maWcsXG5cdElEYXRhRHJpdmVyLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuXG5pbXBvcnQgeyBjb3B5LCBleHRlbmQsIGZpbmRJbmRleCwgaXNOdW1lcmljLCB1aWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHsgVHJlZUNvbGxlY3Rpb24gfSBmcm9tIFwiLi90cmVlY29sbGVjdGlvblwiO1xuXG5leHBvcnQgY2xhc3MgRGF0YUNvbGxlY3Rpb248VCBleHRlbmRzIElEYXRhSXRlbSA9IElEYXRhSXRlbT4gaW1wbGVtZW50cyBJRGF0YUNvbGxlY3Rpb248VD4ge1xuXHRwdWJsaWMgbG9hZERhdGE6IFByb21pc2U8YW55Pjtcblx0cHVibGljIHNhdmVEYXRhOiBQcm9taXNlPGFueT47XG5cdHB1YmxpYyBkYXRhUHJveHk6IElEYXRhUHJveHk7XG5cdHB1YmxpYyBjb25maWc6IElEYXRhQ29uZmlnOyAvLyBUT0RPOiBub3QgZmluYWxcblx0cHVibGljIGV2ZW50czogSUV2ZW50U3lzdGVtPERhdGFFdmVudHMsIElEYXRhRXZlbnRzSGFuZGxlcnNNYXA+O1xuXG5cdHByb3RlY3RlZCBfb3JkZXI6IFRbXTtcblx0cHJvdGVjdGVkIF9wdWxsOiB7IFtpZDogc3RyaW5nXTogVCB9O1xuXHRwcm90ZWN0ZWQgX3NvcnQ6IFNvcnQ7XG5cdHByb3RlY3RlZCBfZmlsdGVyOiBhbnk7XG5cdHByb3RlY3RlZCBfc29ydGVyOiBJU29ydE1vZGU7XG5cdHByb3RlY3RlZCBfbWV0YTogYW55O1xuXHRwcm90ZWN0ZWQgX3JhbmdlOiBbbnVtYmVyLCBudW1iZXJdO1xuXHRwcm90ZWN0ZWQgX2xvYWRlZDogYm9vbGVhbjtcblxuXHRwcml2YXRlIF9jaGFuZ2VzOiBJRGF0YUNoYW5nZVN0YWNrID0geyBvcmRlcjogW10gfTtcblx0cHJpdmF0ZSBfaW5pdE9yZGVyOiBUW107XG5cdHByaXZhdGUgX2xvYWRlcjogTG9hZGVyO1xuXG5cdGNvbnN0cnVjdG9yKGNvbmZpZz86IGFueSwgZXZlbnRzPzogSUV2ZW50U3lzdGVtPGFueT4pIHtcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuXHRcdHRoaXMuX3NvcnQgPSBuZXcgU29ydCgpO1xuXHRcdHRoaXMuX2xvYWRlciA9IG5ldyBMb2FkZXIodGhpcywgdGhpcy5fY2hhbmdlcyk7XG5cdFx0dGhpcy5ldmVudHMgPSBldmVudHMgfHwgbmV3IEV2ZW50U3lzdGVtPGFueT4odGhpcyk7XG5cblx0XHR0aGlzLmV2ZW50cy5vbihcImRhdGFSZXF1ZXN0XCIsIChmcm9tLCB0bykgPT4ge1xuXHRcdFx0Y29uc3QgcHJveHkgPSB0aGlzLmRhdGFQcm94eTtcblx0XHRcdGlmIChwcm94eSAmJiBwcm94eS51cGRhdGVVcmwpIHtcblx0XHRcdFx0cHJveHkudXBkYXRlVXJsKG51bGwsIHsgZnJvbSwgbGltaXQ6IHByb3h5LmNvbmZpZy5saW1pdCB8fCB0byAtIGZyb20gfSk7XG5cdFx0XHRcdHRoaXMubG9hZChwcm94eSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLmV2ZW50cy5vbihEYXRhRXZlbnRzLmxvYWRFcnJvciwgcmVzcG9uc2UgPT4ge1xuXHRcdFx0aWYgKHR5cGVvZiByZXNwb25zZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRkaHhFcnJvcihyZXNwb25zZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkaHhXYXJuaW5nKHJlc3BvbnNlKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuX3Jlc2V0KCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX3Jlc2V0KCkge1xuXHRcdHRoaXMuX29yZGVyID0gW107XG5cdFx0dGhpcy5fcHVsbCA9IHt9O1xuXHRcdHRoaXMuX2NoYW5nZXMgPSB7IG9yZGVyOiBbXSB9O1xuXHRcdHRoaXMuX2luaXRPcmRlciA9IG51bGw7XG5cdFx0dGhpcy5fbWV0YSA9IG5ldyBXZWFrTWFwKCk7XG5cdFx0dGhpcy5fbG9hZGVkID0gZmFsc2U7XG5cdH1cblxuXHRhZGQobmV3SXRlbTogSURhdGFJdGVtLCBpbmRleD86IG51bWJlcik6IElkO1xuXHRhZGQobmV3SXRlbTogSURhdGFJdGVtW10sIGluZGV4PzogbnVtYmVyKTogSWRbXTtcblx0YWRkKG5ld0l0ZW06IElEYXRhSXRlbSB8IElEYXRhSXRlbVtdLCBpbmRleD86IG51bWJlcik6IElkIHwgSWRbXSB7XG5cdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKERhdGFFdmVudHMuYmVmb3JlQWRkLCBbbmV3SXRlbV0pKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGxldCBvdXQ6IElkIHwgSWRbXTtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShuZXdJdGVtKSkge1xuXHRcdFx0b3V0ID0gbmV3SXRlbS5tYXAoKGVsZW1lbnQsIGtleSkgPT4ge1xuXHRcdFx0XHRpZiAoa2V5ICE9PSAwKSB7XG5cdFx0XHRcdFx0aW5kZXggPSBpbmRleCArIDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMuX2FkZChlbGVtZW50LCBpbmRleCk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3V0ID0gdGhpcy5fYWRkKG5ld0l0ZW0sIGluZGV4KTtcblx0XHR9XG5cblx0XHR0aGlzLl9hcHBseVNtYXJ0KCk7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXHRyZW1vdmUoaWQ6IElkIHwgSWRbXSk6IHZvaWQge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0aWYgKGlkIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0Wy4uLmlkXS5tYXAoZWxlbWVudElkID0+IHtcblx0XHRcdFx0XHR0aGlzLl9yZW1vdmUoZWxlbWVudElkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmUoaWQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZW1vdmVBbGwoKTogdm9pZCB7XG5cdFx0dGhpcy5fcmVzZXQoKTtcblx0XHR0aGlzLmV2ZW50cy5maXJlKERhdGFFdmVudHMucmVtb3ZlQWxsKTtcblx0XHR0aGlzLmV2ZW50cy5maXJlKERhdGFFdmVudHMuY2hhbmdlKTtcblx0fVxuXHRleGlzdHMoaWQ6IElkKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuICEhdGhpcy5fcHVsbFtpZF07XG5cdH1cblx0Z2V0TmVhcklkKGlkOiBJZCkge1xuXHRcdGNvbnN0IGl0ZW0gPSB0aGlzLl9wdWxsW2lkXTtcblx0XHRpZiAoIWl0ZW0pIHtcblx0XHRcdHJldHVybiB0aGlzLl9vcmRlclswXS5pZCB8fCBcIlwiO1xuXHRcdH1cblx0fVxuXHRnZXRJdGVtKGlkOiBJZCk6IFQge1xuXHRcdHJldHVybiB0aGlzLl9wdWxsW2lkXTtcblx0fVxuXHR1cGRhdGUoaWQ6IElkLCBuZXdJdGVtOiBJVXBkYXRlT2JqZWN0LCBzaWxlbnQ/OiBib29sZWFuKSB7XG5cdFx0Y29uc3QgaXRlbSA9IHRoaXMuZ2V0SXRlbShpZCk7XG5cdFx0aWYgKGl0ZW0pIHtcblx0XHRcdGlmIChpc0VxdWFsT2JqKG5ld0l0ZW0sIGl0ZW0pKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG5ld0l0ZW0uaWQgJiYgaWQgIT09IG5ld0l0ZW0uaWQpIHtcblx0XHRcdFx0ZGh4V2FybmluZyhcInRoaXMgbWV0aG9kIGRvZXNuJ3QgYWxsb3cgY2hhbmdlIGlkXCIpO1xuXHRcdFx0XHRpZiAoaXNEZWJ1ZygpKSB7XG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyXG5cdFx0XHRcdFx0ZGVidWdnZXI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChuZXdJdGVtLnBhcmVudCAmJiBpdGVtLnBhcmVudCAmJiBuZXdJdGVtLnBhcmVudCAhPT0gaXRlbS5wYXJlbnQpIHtcblx0XHRcdFx0XHR0aGlzLm1vdmUoaWQsIC0xLCB0aGlzLCBuZXdJdGVtLnBhcmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZXh0ZW5kKHRoaXMuX3B1bGxbaWRdLCBuZXdJdGVtLCBmYWxzZSk7XG5cdFx0XHRcdGlmICh0aGlzLmNvbmZpZy51cGRhdGUpIHtcblx0XHRcdFx0XHR0aGlzLmNvbmZpZy51cGRhdGUodGhpcy5fcHVsbFtpZF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc2lsZW50KSB7XG5cdFx0XHRcdFx0dGhpcy5fb25DaGFuZ2UoXCJ1cGRhdGVcIiwgaWQsIHRoaXMuX3B1bGxbaWRdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5fYXBwbHlTbWFydCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkaHhXYXJuaW5nKFwiaXRlbSBub3QgZm91bmRcIik7XG5cdFx0fVxuXHR9XG5cdGdldEluZGV4KGlkOiBJZCk6IG51bWJlciB7XG5cdFx0aWYgKCFpZCkge1xuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH1cblx0XHRjb25zdCByZXMgPSBmaW5kSW5kZXgodGhpcy5fb3JkZXIsIGl0ZW0gPT4gaXRlbSAmJiBpdGVtLmlkLnRvU3RyaW5nKCkgPT09IGlkLnRvU3RyaW5nKCkpO1xuXHRcdGlmICh0aGlzLl9wdWxsW2lkXSAmJiByZXMgPj0gMCkge1xuXHRcdFx0cmV0dXJuIHJlcztcblx0XHR9XG5cdH1cblx0Z2V0SWQoaW5kZXg6IG51bWJlcik6IElkIHtcblx0XHRpZiAoIXRoaXMuX29yZGVyW2luZGV4XSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fb3JkZXJbaW5kZXhdLmlkO1xuXHR9XG5cdGdldExlbmd0aCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fb3JkZXIubGVuZ3RoO1xuXHR9XG5cdGlzRGF0YUxvYWRlZChmcm9tID0gMCwgdG86IG51bWJlciA9IHRoaXMuX29yZGVyLmxlbmd0aCk6IGJvb2xlYW4ge1xuXHRcdGlmIChpc051bWVyaWMoZnJvbSkgJiYgaXNOdW1lcmljKHRvKSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX29yZGVyLnNsaWNlKGZyb20sIHRvKS5maWx0ZXIoaXRlbSA9PiBpdGVtICYmIGl0ZW0uJGVtcHR5KS5sZW5ndGggPT09IDA7XG5cdFx0fVxuXG5cdFx0Ly8gaWYgY2hlY2sgc3VjY2VlZHMgb25jZSwgY29sbGVjdGlvbiBjYW4ndCBnbyBiYWNrIHRvIG5vdC1sb2FkZWQgc3RhdGVcblx0XHRpZiAoIXRoaXMuX2xvYWRlZCkge1xuXHRcdFx0dGhpcy5fbG9hZGVkID0gIXRoaXMuZmluZChpdGVtID0+IGl0ZW0uJGVtcHR5KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gISF0aGlzLl9sb2FkZWQ7XG5cdH1cblx0ZmlsdGVyKHJ1bGU/OiBJRmlsdGVyTW9kZSB8IElGaWx0ZXJDYWxsYmFjaywgY29uZmlnPzogSUZpbHRlckNvbmZpZykge1xuXHRcdGlmICghdGhpcy5pc0RhdGFMb2FkZWQoKSkge1xuXHRcdFx0ZGh4V2FybmluZyhcInRoZSBtZXRob2QgZG9lc24ndCB3b3JrIHdpdGggbGF6eUxvYWRcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCFjb25maWcgfHwgIWNvbmZpZy5hZGQpIHtcblx0XHRcdHRoaXMuX29yZGVyID0gdGhpcy5faW5pdE9yZGVyIHx8IHRoaXMuX29yZGVyO1xuXHRcdFx0dGhpcy5faW5pdE9yZGVyID0gbnVsbDtcblx0XHR9XG5cblx0XHRpZiAocnVsZSAmJiB0eXBlb2YgcnVsZSAhPT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRjb25zdCB0ID0gcnVsZSBhcyBJRmlsdGVyTW9kZTtcblx0XHRcdGlmICh0LmJ5ICE9PSB1bmRlZmluZWQgJiYgdC5tYXRjaCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJ1bGUgPSB0LmNvbXBhcmVcblx0XHRcdFx0XHQ/IG9iaiA9PiB0LmNvbXBhcmUob2JqW3QuYnldLCB0Lm1hdGNoLCBvYmosIHQubXVsdGkpXG5cdFx0XHRcdFx0OiBvYmogPT4gb2JqW3QuYnldID09IHQubWF0Y2g7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuX2ZpbHRlciA9IGNvbmZpZyAmJiBjb25maWcuc21hcnRGaWx0ZXIgPyBydWxlIDogbnVsbDtcblxuXHRcdHRoaXMuX2FwcGx5RmlsdGVycyhydWxlIGFzIElGaWx0ZXJDYWxsYmFjayk7XG5cdFx0dGhpcy5ldmVudHMuZmlyZShEYXRhRXZlbnRzLmNoYW5nZSk7XG5cdH1cblx0ZmluZChjb25mOiBJRmlsdGVyTW9kZSB8IERhdGFDYWxsYmFjazxUPik6IGFueSB7XG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gdGhpcy5fcHVsbCkge1xuXHRcdFx0Y29uc3QgcmVzID0gZmluZEJ5Q29uZih0aGlzLl9wdWxsW2tleV0sIGNvbmYpO1xuXHRcdFx0aWYgKHJlcykge1xuXHRcdFx0XHRyZXR1cm4gcmVzO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRmaW5kQWxsKGNvbmY6IElGaWx0ZXJNb2RlIHwgRGF0YUNhbGxiYWNrPFQ+KTogYW55W10ge1xuXHRcdGNvbnN0IHJlcyA9IFtdO1xuXHRcdGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3B1bGwpIHtcblx0XHRcdGNvbnN0IGl0ZW0gPSBmaW5kQnlDb25mKHRoaXMuX3B1bGxba2V5XSwgY29uZik7XG5cdFx0XHRpZiAoaXRlbSkge1xuXHRcdFx0XHRyZXMucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXHRzb3J0KHJ1bGU/OiBJU29ydE1vZGUsIGNvbmZpZz86IElTb3J0Q29uZmlnKTogdm9pZCB7XG5cdFx0aWYgKCF0aGlzLmlzRGF0YUxvYWRlZCgpKSB7XG5cdFx0XHRkaHhXYXJuaW5nKFwidGhlIG1ldGhvZCBkb2Vzbid0IHdvcmsgd2l0aCBsYXp5TG9hZFwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoY29uZmlnICYmIGNvbmZpZy5zbWFydFNvcnRpbmcpIHtcblx0XHRcdHRoaXMuX3NvcnRlciA9IHJ1bGU7XG5cdFx0fVxuXG5cdFx0aWYgKHJ1bGUpIHtcblx0XHRcdHRoaXMuX2FwcGx5U29ydGVycyhydWxlKTtcblx0XHR9XG5cblx0XHR0aGlzLmV2ZW50cy5maXJlKERhdGFFdmVudHMuY2hhbmdlKTtcblx0fVxuXHRjb3B5KGlkOiBJZCB8IElkW10sIGluZGV4OiBudW1iZXIsIHRhcmdldD86IElEYXRhQ29sbGVjdGlvbiB8IElUcmVlQ29sbGVjdGlvbiwgdGFyZ2V0SWQ/OiBJZCk6IElkIHwgSWRbXSB7XG5cdFx0aWYgKGlkIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdHJldHVybiBpZC5tYXAoKGVsZW1lbnRJZCwga2V5KSA9PiB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9jb3B5KGVsZW1lbnRJZCwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0SWQsIGtleSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2NvcHkoaWQsIGluZGV4LCB0YXJnZXQsIHRhcmdldElkKTtcblx0XHR9XG5cdH1cblx0bW92ZShpZDogSWQgfCBJZFtdLCBpbmRleDogbnVtYmVyLCB0YXJnZXQ/OiBEYXRhQ29sbGVjdGlvbiB8IFRyZWVDb2xsZWN0aW9uLCB0YXJnZXRJZD86IElkKTogSWQgfCBJZFtdIHtcblx0XHRpZiAoaWQgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0cmV0dXJuIGlkLm1hcCgoZWxlbWVudElkLCBrZXkpID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX21vdmUoZWxlbWVudElkLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRJZCwga2V5KTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fbW92ZShpZCwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0SWQpO1xuXHRcdH1cblx0fVxuXHRmb3JFYWNoKGNhbGxiYWNrOiBEYXRhQ2FsbGJhY2s8VD4pOiB2b2lkIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX29yZGVyLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjYWxsYmFjay5jYWxsKHRoaXMsIHRoaXMuX29yZGVyW2ldLCBpLCB0aGlzLl9vcmRlcik7XG5cdFx0fVxuXHR9XG5cdGxvYWQodXJsOiBJRGF0YVByb3h5IHwgc3RyaW5nLCBkcml2ZXI/OiBJRGF0YURyaXZlciB8IERhdGFEcml2ZXIpOiBQcm9taXNlPGFueT4ge1xuXHRcdGlmICh0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHR0aGlzLmRhdGFQcm94eSA9IHVybCA9IG5ldyBEYXRhUHJveHkodXJsKTtcblx0XHR9XG5cdFx0dGhpcy5kYXRhUHJveHkgPSB1cmw7XG5cdFx0cmV0dXJuIHRoaXMuX2xvYWRlci5sb2FkKHVybCwgZHJpdmVyKTtcblx0fVxuXHRwYXJzZShkYXRhOiBUW10sIGRyaXZlcj86IERhdGFEcml2ZXIgfCBJRGF0YURyaXZlcikge1xuXHRcdHRoaXMuX3Jlc2V0KCk7XG5cdFx0cmV0dXJuIHRoaXMuX2xvYWRlci5wYXJzZShkYXRhLCBkcml2ZXIpO1xuXHR9XG5cdCRwYXJzZShkYXRhOiBhbnlbXSkge1xuXHRcdGNvbnN0IGFweCA9IHRoaXMuY29uZmlnLmFwcHJveGltYXRlO1xuXHRcdGlmIChhcHgpIHtcblx0XHRcdGRhdGEgPSB0aGlzLl9hcHByb3hpbWF0ZShkYXRhLCBhcHgudmFsdWUsIGFweC5tYXhOdW0pO1xuXHRcdH1cblxuXHRcdHRoaXMuX3BhcnNlX2RhdGEoZGF0YSk7XG5cdFx0dGhpcy5fYXBwbHlTbWFydCgpO1xuXG5cdFx0dGhpcy5ldmVudHMuZmlyZShEYXRhRXZlbnRzLmNoYW5nZSwgW1wibG9hZFwiXSk7XG5cdFx0dGhpcy5ldmVudHMuZmlyZShEYXRhRXZlbnRzLmxvYWQpO1xuXHR9XG5cdHNhdmUodXJsOiBJRGF0YVByb3h5IHwgc3RyaW5nKSB7XG5cdFx0aWYgKHR5cGVvZiB1cmwgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdHVybCA9IG5ldyBEYXRhUHJveHkodXJsKTtcblx0XHR9XG5cdFx0dGhpcy5fbG9hZGVyLnNhdmUodXJsKTtcblx0fVxuXHRjaGFuZ2VJZChpZDogSWQsIG5ld0lkOiBJZCA9IHVpZCgpLCBzaWxlbnQ/OiBib29sZWFuKSB7XG5cdFx0aWYgKCFzaWxlbnQgJiYgIXRoaXMuaXNEYXRhTG9hZGVkKCkpIHtcblx0XHRcdGRoeFdhcm5pbmcoXCJ0aGUgbWV0aG9kIGRvZXNuJ3Qgd29yayB3aXRoIGxhenlMb2FkXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBpdGVtID0gdGhpcy5nZXRJdGVtKGlkKTtcblx0XHRpZiAoIWl0ZW0pIHtcblx0XHRcdGRoeFdhcm5pbmcoXCJpdGVtIG5vdCBmb3VuZFwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aXRlbS5pZCA9IG5ld0lkO1xuXHRcdFx0ZXh0ZW5kKHRoaXMuX3B1bGxbaWRdLCBpdGVtKTtcblx0XHRcdHRoaXMuX3B1bGxbbmV3SWRdID0gdGhpcy5fcHVsbFtpZF07XG5cdFx0XHRpZiAoIXNpbGVudCkge1xuXHRcdFx0XHR0aGlzLl9vbkNoYW5nZShcInVwZGF0ZVwiLCBuZXdJZCwgdGhpcy5fcHVsbFtuZXdJZF0pO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHRoaXMuX3B1bGxbaWRdO1xuXHRcdH1cblx0fVxuXHQvLyB0b2RvOiBsb29wIHRocm91Z2ggdGhlIGFycmF5IGFuZCBjaGVjayBzYXZlZCBzdGF0dXNlc1xuXHRpc1NhdmVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAhdGhpcy5fY2hhbmdlcy5vcmRlci5sZW5ndGg7IC8vIHRvZG86IGJhZCBzb2x1dGlvbiwgZXJyb3JzIGFuZCBob2xkZWQgZWxtZW50cyBhcmUgbWlzc2VkLi4uXG5cdH1cblx0bWFwKGNhbGxiYWNrOiBEYXRhQ2FsbGJhY2s8VD4pOiBhbnlbXSB7XG5cdFx0Y29uc3QgcmVzdWx0OiBhbnlbXSA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fb3JkZXIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHJlc3VsdC5wdXNoKGNhbGxiYWNrLmNhbGwodGhpcywgdGhpcy5fb3JkZXJbaV0sIGksIHRoaXMuX29yZGVyKSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblx0bWFwUmFuZ2UoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyLCBjYWxsYmFjazogRGF0YUNhbGxiYWNrPFQ+KTogYW55W10ge1xuXHRcdGlmIChmcm9tIDwgMCkge1xuXHRcdFx0ZnJvbSA9IDA7XG5cdFx0fVxuXHRcdGlmICh0byA+IHRoaXMuX29yZGVyLmxlbmd0aCAtIDEpIHtcblx0XHRcdHRvID0gdGhpcy5fb3JkZXIubGVuZ3RoIC0gMTtcblx0XHR9XG5cdFx0Y29uc3QgYXJyID0gdGhpcy5fb3JkZXIuc2xpY2UoZnJvbSwgdG8pO1xuXHRcdGNvbnN0IHJlc3VsdDogYW55W10gPSBbXTtcblx0XHRmb3IgKGxldCBpID0gZnJvbTsgaSA8PSB0bzsgaSsrKSB7XG5cdFx0XHRyZXN1bHQucHVzaChjYWxsYmFjay5jYWxsKHRoaXMsIHRoaXMuX29yZGVyW2ldLCBpLCBhcnIpKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXHRyZWR1Y2U8QT4oY2FsbGJhY2s6IFJlZHVjZUNhbGxCYWNrPFQsIEE+LCBhY2M6IEEpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX29yZGVyLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRhY2MgPSBjYWxsYmFjay5jYWxsKHRoaXMsIGFjYywgdGhpcy5fb3JkZXJbaV0sIGkpO1xuXHRcdH1cblx0XHRyZXR1cm4gYWNjO1xuXHR9XG5cdHNlcmlhbGl6ZShkcml2ZXI6IERhdGFEcml2ZXIgPSBEYXRhRHJpdmVyLmpzb24pIHtcblx0XHQvLyByZW1vdmUgJCBhdHRyc1xuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLm1hcChpdGVtID0+IHtcblx0XHRcdGNvbnN0IG5ld0l0ZW0gPSB7IC4uLihpdGVtIGFzIElEYXRhSXRlbSkgfTtcblx0XHRcdE9iamVjdC5rZXlzKG5ld0l0ZW0pLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdFx0aWYgKGtleS5zdGFydHNXaXRoKFwiJFwiKSkge1xuXHRcdFx0XHRcdGRlbGV0ZSBuZXdJdGVtW2tleV07XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIG5ld0l0ZW07XG5cdFx0fSk7XG5cdFx0Y29uc3QgZGF0YURyaXZlciA9IHRvRGF0YURyaXZlcihkcml2ZXIpO1xuXHRcdGlmIChkYXRhRHJpdmVyKSB7XG5cdFx0XHRyZXR1cm4gZGF0YURyaXZlci5zZXJpYWxpemUoZGF0YSk7XG5cdFx0fVxuXHR9XG5cdGdldEluaXRpYWxEYXRhKCkge1xuXHRcdHJldHVybiB0aGlzLl9pbml0T3JkZXI7XG5cdH1cblx0c2V0TWV0YShvYmo6IFQsIGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG5cdFx0aWYgKCFvYmopIHJldHVybjtcblx0XHRsZXQgbWFwID0gdGhpcy5fbWV0YS5nZXQob2JqKTtcblx0XHRpZiAoIW1hcCkge1xuXHRcdFx0bWFwID0ge307XG5cdFx0XHR0aGlzLl9tZXRhLnNldChvYmosIG1hcCk7XG5cdFx0fVxuXHRcdG1hcFtrZXldID0gdmFsdWU7XG5cdH1cblx0Z2V0TWV0YShvYmo6IFQsIGtleTogc3RyaW5nKTogYW55IHtcblx0XHRjb25zdCBtYXAgPSB0aGlzLl9tZXRhLmdldChvYmopO1xuXHRcdHJldHVybiBtYXAgPyBtYXBba2V5XSA6IG51bGw7XG5cdH1cblx0Z2V0TWV0YU1hcChvYmo6IFQpOiBhbnkge1xuXHRcdHJldHVybiB0aGlzLl9tZXRhLmdldChvYmopO1xuXHR9XG5cdHNldFJhbmdlKGZyb206IG51bWJlciwgdG86IG51bWJlcik6IHZvaWQge1xuXHRcdHRoaXMuX3JhbmdlID0gIXRvID8gbnVsbCA6IFtmcm9tLCB0b107XG5cdH1cblx0Z2V0UmF3RGF0YShmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIsIG9yZGVyPzogVFtdLCBtb2RlPzogbnVtYmVyKTogVFtdIHtcblx0XHRvcmRlciA9IG9yZGVyIHx8IHRoaXMuX29yZGVyO1xuXHRcdGlmIChtb2RlID09PSAxKSByZXR1cm4gb3JkZXI7XG5cblx0XHRpZiAodGhpcy5fcmFuZ2UpIHtcblx0XHRcdGZyb20gPSB0aGlzLl9yYW5nZVswXSArIGZyb207XG5cdFx0XHRpZiAodG8gPT09IC0xKSB7XG5cdFx0XHRcdHRvID0gdGhpcy5fcmFuZ2VbMV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCBkaWZmID0gdG8gLSBmcm9tO1xuXHRcdFx0XHR0byA9IGZyb20gKyBkaWZmID4gdGhpcy5fcmFuZ2VbMV0gPyB0aGlzLl9yYW5nZVsxXSA6IGZyb20gKyBkaWZmO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghdG8gfHwgKGZyb20gPT09IDAgJiYgKHRvID09PSAtMSB8fCB0byA9PT0gb3JkZXIubGVuZ3RoKSkpIHtcblx0XHRcdHJldHVybiBvcmRlcjtcblx0XHR9XG5cblx0XHRpZiAoZnJvbSA+PSBvcmRlci5sZW5ndGgpIHJldHVybiBbXTtcblx0XHRpZiAodG8gPT09IC0xIHx8IHRvID4gb3JkZXIubGVuZ3RoKSB0byA9IG9yZGVyLmxlbmd0aDtcblxuXHRcdGNvbnN0IHNsaWNlID0gb3JkZXIuc2xpY2UoZnJvbSwgdG8pO1xuXG5cdFx0aWYgKHNsaWNlLmZpbHRlcihpdGVtID0+IGl0ZW0uJGVtcHR5KS5sZW5ndGggIT09IDApIHtcblx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoXCJkYXRhUmVxdWVzdFwiLCBbZnJvbSwgdG9dKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc2xpY2U7XG5cdH1cblx0cHJvdGVjdGVkIF9hZGQobmV3SXRlbTogSURhdGFJdGVtLCBpbmRleDogbnVtYmVyKTogSWQge1xuXHRcdGlmICghdGhpcy5pc0RhdGFMb2FkZWQoKSkge1xuXHRcdFx0ZGh4V2FybmluZyhcInRoZSBtZXRob2QgZG9lc24ndCB3b3JrIHdpdGggbGF6eUxvYWRcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IGlkID0gdGhpcy5fYWRkQ29yZShuZXdJdGVtLCBpbmRleCk7XG5cdFx0dGhpcy5fb25DaGFuZ2UoXCJhZGRcIiwgbmV3SXRlbS5pZCwgbmV3SXRlbSk7XG5cdFx0dGhpcy5ldmVudHMuZmlyZShEYXRhRXZlbnRzLmFmdGVyQWRkLCBbbmV3SXRlbV0pO1xuXHRcdHJldHVybiBpZDtcblx0fVxuXHRwcm90ZWN0ZWQgX3JlbW92ZShpZDogSWQpIHtcblx0XHRpZiAoIXRoaXMuaXNEYXRhTG9hZGVkKCkpIHtcblx0XHRcdGRoeFdhcm5pbmcoXCJ0aGUgbWV0aG9kIGRvZXNuJ3Qgd29yayB3aXRoIGxhenlMb2FkXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCByZW1vdmVkSXRlbSA9IHRoaXMuX3B1bGxbaWRdO1xuXHRcdGlmIChyZW1vdmVkSXRlbSkge1xuXHRcdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKERhdGFFdmVudHMuYmVmb3JlUmVtb3ZlLCBbcmVtb3ZlZEl0ZW1dKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9yZW1vdmVDb3JlKHJlbW92ZWRJdGVtLmlkKTtcblx0XHRcdHRoaXMuX29uQ2hhbmdlKFwicmVtb3ZlXCIsIGlkLCByZW1vdmVkSXRlbSk7XG5cdFx0fVxuXHRcdHRoaXMuZXZlbnRzLmZpcmUoRGF0YUV2ZW50cy5hZnRlclJlbW92ZSwgW3JlbW92ZWRJdGVtXSk7XG5cdH1cblx0cHJvdGVjdGVkIF9jb3B5KFxuXHRcdGlkOiBJZCxcblx0XHRpbmRleDogbnVtYmVyLFxuXHRcdHRhcmdldD86IElEYXRhQ29sbGVjdGlvbiB8IElUcmVlQ29sbGVjdGlvbixcblx0XHR0YXJnZXRJZD86IElkLFxuXHRcdGtleT86IG51bWJlclxuXHQpOiBJZCB7XG5cdFx0aWYgKCF0aGlzLmlzRGF0YUxvYWRlZCgpKSB7XG5cdFx0XHRkaHhXYXJuaW5nKFwidGhlIG1ldGhvZCBkb2Vzbid0IHdvcmsgd2l0aCBsYXp5TG9hZFwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLmV4aXN0cyhpZCkpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRjb25zdCBuZXdpZCA9IHVpZCgpO1xuXHRcdGlmIChrZXkpIHtcblx0XHRcdGluZGV4ID0gaW5kZXggPT09IC0xID8gLTEgOiBpbmRleCArIGtleTtcblx0XHR9XG5cdFx0aWYgKHRhcmdldCkge1xuXHRcdFx0aWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgRGF0YUNvbGxlY3Rpb24pICYmIHRhcmdldElkKSB7XG5cdFx0XHRcdHRhcmdldC5hZGQoY29weVdpdGhvdXRJbm5lcih0aGlzLmdldEl0ZW0oaWQpKSwgaW5kZXgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAodGFyZ2V0LmV4aXN0cyhpZCkpIHtcblx0XHRcdFx0dGFyZ2V0LmFkZCh7IC4uLmNvcHlXaXRob3V0SW5uZXIodGhpcy5nZXRJdGVtKGlkKSksIGlkOiBuZXdpZCB9LCBpbmRleCk7XG5cdFx0XHRcdHJldHVybiBuZXdpZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRhcmdldC5hZGQoY29weVdpdGhvdXRJbm5lcih0aGlzLmdldEl0ZW0oaWQpKSwgaW5kZXgpO1xuXHRcdFx0XHRyZXR1cm4gaWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuYWRkKHsgLi4uY29weVdpdGhvdXRJbm5lcih0aGlzLmdldEl0ZW0oaWQpKSwgaWQ6IG5ld2lkIH0sIGluZGV4KTtcblx0XHRyZXR1cm4gbmV3aWQ7XG5cdH1cblx0cHJvdGVjdGVkIF9tb3ZlKFxuXHRcdGlkOiBJZCxcblx0XHRpbmRleDogbnVtYmVyLFxuXHRcdHRhcmdldD86IElEYXRhQ29sbGVjdGlvbiB8IElUcmVlQ29sbGVjdGlvbixcblx0XHR0YXJnZXRJZD86IElkLFxuXHRcdGtleT86IG51bWJlclxuXHQpOiBJZCB7XG5cdFx0aWYgKCF0aGlzLmlzRGF0YUxvYWRlZCgpKSB7XG5cdFx0XHRkaHhXYXJuaW5nKFwidGhlIG1ldGhvZCBkb2Vzbid0IHdvcmsgd2l0aCBsYXp5TG9hZFwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKGtleSkge1xuXHRcdFx0aW5kZXggPSBpbmRleCA9PT0gLTEgPyAtMSA6IGluZGV4ICsga2V5O1xuXHRcdH1cblx0XHRpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gdGhpcyAmJiB0aGlzLmV4aXN0cyhpZCkpIHtcblx0XHRcdGNvbnN0IGl0ZW0gPSBjb3B5KHRoaXMuZ2V0SXRlbShpZCksIHRydWUpO1xuXHRcdFx0aWYgKHRhcmdldC5leGlzdHMoaWQpKSB7XG5cdFx0XHRcdGl0ZW0uaWQgPSB1aWQoKTtcblx0XHRcdH1cblx0XHRcdGlmICh0YXJnZXRJZCkge1xuXHRcdFx0XHRpdGVtLnBhcmVudCA9IHRhcmdldElkO1xuXHRcdFx0fVxuXHRcdFx0dGFyZ2V0LmFkZChpdGVtLCBpbmRleCk7XG5cdFx0XHQvLyByZW1vdmUgZGF0YSBmcm9tIG9yaWdpbmFsIGNvbGxlY3Rpb25cblx0XHRcdHRoaXMucmVtb3ZlKGlkKTtcblx0XHRcdHJldHVybiBpdGVtLmlkO1xuXHRcdH1cblx0XHRpZiAodGhpcy5nZXRJbmRleChpZCkgPT09IGluZGV4KSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0Ly8gbW92ZSBvdGhlciBlbGVtZW50c1xuXHRcdGNvbnN0IHNwbGljZWQgPSB0aGlzLl9vcmRlci5zcGxpY2UodGhpcy5nZXRJbmRleChpZCksIDEpWzBdO1xuXHRcdGlmIChpbmRleCA9PT0gLTEpIHtcblx0XHRcdGluZGV4ID0gdGhpcy5fb3JkZXIubGVuZ3RoO1xuXHRcdH1cblx0XHR0aGlzLl9vcmRlci5zcGxpY2UoaW5kZXgsIDAsIHNwbGljZWQpO1xuXG5cdFx0dGhpcy5ldmVudHMuZmlyZShEYXRhRXZlbnRzLmNoYW5nZSwgW2lkLCBcInVwZGF0ZVwiLCB0aGlzLmdldEl0ZW0oaWQpXSk7XG5cdFx0cmV0dXJuIGlkO1xuXHR9XG5cdHByb3RlY3RlZCBfYWRkQ29yZShvYmo6IElEYXRhSXRlbSwgaW5kZXg6IG51bWJlcik6IElkIHtcblx0XHRpZiAodGhpcy5jb25maWcuaW5pdCkge1xuXHRcdFx0b2JqID0gdGhpcy5jb25maWcuaW5pdChvYmopO1xuXHRcdH1cblxuXHRcdG9iai5pZCA9IG9iai5pZCA/PyB1aWQoKTtcblxuXHRcdGlmICh0aGlzLl9wdWxsW29iai5pZF0pIHtcblx0XHRcdGRoeEVycm9yKGBJdGVtICR7b2JqLmlkfSBhbHJlYWR5IGV4aXN0YCk7XG5cdFx0fVxuXHRcdC8vIHRvZG86IG5vdCBpZGVhbCBzb2x1dGlvblxuXHRcdGlmICh0aGlzLl9pbml0T3JkZXIpIHtcblx0XHRcdHRoaXMuX2FkZFRvT3JkZXIodGhpcy5faW5pdE9yZGVyLCBvYmosIGluZGV4KTtcblx0XHR9XG5cdFx0dGhpcy5fYWRkVG9PcmRlcih0aGlzLl9vcmRlciwgb2JqLCBpbmRleCk7XG5cblx0XHRyZXR1cm4gb2JqLmlkO1xuXHR9XG5cdHByb3RlY3RlZCBfcmVtb3ZlQ29yZShpZDogSWQpIHtcblx0XHRpZiAodGhpcy5nZXRJbmRleChpZCkgPj0gMCkge1xuXHRcdFx0dGhpcy5fb3JkZXIgPSB0aGlzLl9vcmRlci5maWx0ZXIoZWwgPT4gZWwuaWQgIT09IGlkKTtcblx0XHRcdGRlbGV0ZSB0aGlzLl9wdWxsW2lkXTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5faW5pdE9yZGVyICYmIHRoaXMuX2luaXRPcmRlci5sZW5ndGgpIHtcblx0XHRcdHRoaXMuX2luaXRPcmRlciA9IHRoaXMuX2luaXRPcmRlci5maWx0ZXIoZWwgPT4gZWwuaWQgIT09IGlkKTtcblx0XHRcdGRlbGV0ZSB0aGlzLl9wdWxsW2lkXTtcblx0XHR9XG5cdH1cblx0cHJvdGVjdGVkIF9wYXJzZV9kYXRhKGRhdGE6IGFueVtdKSB7XG5cdFx0bGV0IGluZGV4ID0gdGhpcy5fb3JkZXIubGVuZ3RoO1xuXHRcdGlmICh0aGlzLmNvbmZpZy5wcmVwKSB7XG5cdFx0XHRkYXRhID0gdGhpcy5jb25maWcucHJlcChkYXRhKTtcblx0XHR9XG5cdFx0Zm9yIChjb25zdCBvYmogb2YgZGF0YSkge1xuXHRcdFx0dGhpcy5fYWRkQ29yZShvYmosIGluZGV4KyspO1xuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgX2FwcHJveGltYXRlKGRhdGE6IGFueVtdLCB2YWx1ZXM6IHN0cmluZ1tdLCBtYXhOdW06IG51bWJlcikge1xuXHRcdGNvbnN0IGxlbiA9IGRhdGEubGVuZ3RoO1xuXHRcdGNvbnN0IHZsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuXHRcdGNvbnN0IHJsZW4gPSBNYXRoLmZsb29yKGxlbiAvIG1heE51bSk7XG5cdFx0Y29uc3QgbmV3RGF0YSA9IEFycmF5KE1hdGguY2VpbChsZW4gLyBybGVuKSk7XG5cblx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IHJsZW4pIHtcblx0XHRcdGNvbnN0IG5ld0l0ZW0gPSBjb3B5KGRhdGFbaV0pO1xuXHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4obGVuLCBpICsgcmxlbik7XG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IHZsZW47IGorKykge1xuXHRcdFx0XHRsZXQgc3VtID0gMDtcblx0XHRcdFx0Zm9yIChsZXQgeiA9IGk7IHogPCBlbmQ7IHorKykge1xuXHRcdFx0XHRcdHN1bSArPSBkYXRhW3pdW3ZhbHVlc1tqXV07XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV3SXRlbVt2YWx1ZXNbal1dID0gc3VtIC8gKGVuZCAtIGkpO1xuXHRcdFx0fVxuXHRcdFx0bmV3RGF0YVtpbmRleCsrXSA9IG5ld0l0ZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ld0RhdGE7XG5cdH1cblx0cHJvdGVjdGVkIF9vbkNoYW5nZShzdGF0dXM6IFN0YXR1c2VzLCBpZDogSWQsIG9iajogYW55KTogdm9pZCB7XG5cdFx0Zm9yIChsZXQgaXRlbSBvZiB0aGlzLl9jaGFuZ2VzLm9yZGVyKSB7XG5cdFx0XHQvLyB1cGRhdGUgcGVuZGluZyBpdGVtIGlmIHByZXZpb3VzIHN0YXRlIGlzIFwic2F2aW5nXCIgb3IgaWYgaXRlbSBub3Qgc2F2ZWQgeWV0XG5cdFx0XHRpZiAoaXRlbS5pZCA9PT0gaWQgJiYgIWl0ZW0uc2F2aW5nKSB7XG5cdFx0XHRcdC8vIHVwZGF0ZSBpdGVtXG5cdFx0XHRcdGlmIChpdGVtLmVycm9yKSB7XG5cdFx0XHRcdFx0aXRlbS5lcnJvciA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gdGhpcy5fY2hhbmdlcy5vcmRlci5pbmRleE9mKGl0ZW0pO1xuXHRcdFx0XHRpdGVtID0geyAuLi5pdGVtLCBvYmosIHN0YXR1cyB9O1xuXHRcdFx0XHR0aGlzLl9jaGFuZ2VzLm9yZGVyLnNwbGljZShpbmRleCwgMSwgaXRlbSk7XG5cdFx0XHRcdHRoaXMuX2xvYWRlci51cGRhdGVDaGFuZ2VzKHRoaXMuX2NoYW5nZXMpO1xuXG5cdFx0XHRcdGlmIChzdGF0dXMgPT09IFwicmVtb3ZlXCIgJiYgb2JqLiRlbXB0eVJvdykgcmV0dXJuO1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKERhdGFFdmVudHMuY2hhbmdlLCBbaWQsIHN0YXR1cywgb2JqXSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5fY2hhbmdlcy5vcmRlci5wdXNoKHsgaWQsIHN0YXR1cywgb2JqOiB7IC4uLm9iaiB9LCBzYXZpbmc6IGZhbHNlIH0pO1xuXHRcdHRoaXMuX2xvYWRlci51cGRhdGVDaGFuZ2VzKHRoaXMuX2NoYW5nZXMpO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoRGF0YUV2ZW50cy5jaGFuZ2UsIFtpZCwgc3RhdHVzLCBvYmpdKTtcblx0fVxuXHRwcm90ZWN0ZWQgX2FkZFRvT3JkZXIoYXJyYXk6IGFueVtdLCBvYmo6IGFueSwgaW5kZXg/OiBudW1iZXIpIHtcblx0XHRpZiAoaW5kZXggPj0gMCAmJiBhcnJheVtpbmRleF0pIHtcblx0XHRcdHRoaXMuX3B1bGxbb2JqLmlkXSA9IG9iajtcblx0XHRcdGFycmF5LnNwbGljZShpbmRleCwgMCwgb2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fcHVsbFtvYmouaWRdID0gb2JqO1xuXHRcdFx0YXJyYXkucHVzaChvYmopO1xuXHRcdH1cblx0fVxuXG5cdHByb3RlY3RlZCBfYXBwbHlTbWFydCgpIHtcblx0XHRpZiAodGhpcy5fZmlsdGVyKSB7XG5cdFx0XHR0aGlzLl9hcHBseUZpbHRlcnMoKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fc29ydGVyKSB7XG5cdFx0XHR0aGlzLl9hcHBseVNvcnRlcnMoKTtcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2FwcGx5U29ydGVycyhieT86IElTb3J0TW9kZSkge1xuXHRcdHRoaXMuX3NvcnQuc29ydCh0aGlzLl9vcmRlciwgYnksIHRoaXMuX3NvcnRlcik7XG5cdFx0Ly8gc29ydCB0aGUgbm90LWZpbHRlcmVkIGRhdGFzZXRcblx0XHRpZiAodGhpcy5faW5pdE9yZGVyICYmIHRoaXMuX2luaXRPcmRlci5sZW5ndGgpIHtcblx0XHRcdHRoaXMuX3NvcnQuc29ydCh0aGlzLl9pbml0T3JkZXIsIGJ5LCB0aGlzLl9zb3J0ZXIpO1xuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgX2FwcGx5RmlsdGVycyhydWxlPzogSUZpbHRlckNhbGxiYWNrKSB7XG5cdFx0Y29uc3QgZmlsdGVyID0gdGhpcy5fZmlsdGVyO1xuXHRcdGlmIChydWxlID09PSBmaWx0ZXIpIHJ1bGUgPSBudWxsO1xuXG5cdFx0aWYgKHJ1bGUgfHwgZmlsdGVyKSB7XG5cdFx0XHRjb25zdCBmT3JkZXIgPSB0aGlzLl9vcmRlci5maWx0ZXIoXG5cdFx0XHRcdGl0ZW0gPT4gKHJ1bGUgPyBydWxlKGl0ZW0pIDogdHJ1ZSkgJiYgKGZpbHRlciA/IGZpbHRlcihpdGVtKSA6IHRydWUpXG5cdFx0XHQpO1xuXHRcdFx0aWYgKCF0aGlzLl9pbml0T3JkZXIpIHtcblx0XHRcdFx0dGhpcy5faW5pdE9yZGVyID0gdGhpcy5fb3JkZXI7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9vcmRlciA9IGZPcmRlcjtcblx0XHR9XG5cdH1cbn1cbiIsImltcG9ydCB7IElkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBEYXRhQ29sbGVjdGlvbiB9IGZyb20gXCIuLi9kYXRhY29sbGVjdGlvblwiO1xuaW1wb3J0IHsgZGh4RXJyb3IsIGRoeFdhcm5pbmcsIGlzRXF1YWxPYmosIHRvRGF0YURyaXZlciwgaGFzSnNvbk9yQXJyYXlTdHJ1Y3R1cmUgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgRGF0YUV2ZW50cywgSURhdGFDaGFuZ2VTdGFjaywgSURhdGFEcml2ZXIsIElEYXRhUHJveHksIERhdGFEcml2ZXIgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIExvYWRlciB7XG5cdHByaXZhdGUgX3BhcmVudDogRGF0YUNvbGxlY3Rpb247XG5cdHByaXZhdGUgX3NhdmluZzogYm9vbGVhbjtcblx0cHJpdmF0ZSBfY2hhbmdlczogYW55O1xuXG5cdGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YUNvbGxlY3Rpb24sIGNoYW5nZXM6IGFueSkge1xuXHRcdHRoaXMuX3BhcmVudCA9IHBhcmVudDtcblx0XHR0aGlzLl9jaGFuZ2VzID0gY2hhbmdlczsgLy8gdG9kbzogW2RpcnR5XSBtdXRhdGlvblxuXHR9XG5cblx0bG9hZCh1cmw6IElEYXRhUHJveHksIGRyaXZlcj86IElEYXRhRHJpdmVyIHwgRGF0YURyaXZlcik6IFByb21pc2U8YW55PiB7XG5cdFx0Ly8gVE9ETzogY2hhbmdlIHdheSBmb3IgY2hlY2tpbmcgbGF6eUxvYWRcblx0XHRpZiAodXJsLmNvbmZpZyAmJiAhdGhpcy5fcGFyZW50LmV2ZW50cy5maXJlKERhdGFFdmVudHMuYmVmb3JlTGF6eUxvYWQsIFtdKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRyZXR1cm4gKHRoaXMuX3BhcmVudC5sb2FkRGF0YSA9IHVybFxuXHRcdFx0LmxvYWQoKVxuXHRcdFx0LnRoZW4oZGF0YSA9PiB7XG5cdFx0XHRcdGlmIChkYXRhKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMucGFyc2UoZGF0YSwgZHJpdmVyKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZXJyb3IgPT4ge1xuXHRcdFx0XHR0aGlzLl9wYXJlbnQuZXZlbnRzLmZpcmUoRGF0YUV2ZW50cy5sb2FkRXJyb3IsIFtlcnJvcl0pO1xuXHRcdFx0fSkpO1xuXHR9XG5cblx0cGFyc2UoZGF0YTogYW55IHwgYW55W10sIGRyaXZlcjogSURhdGFEcml2ZXIgfCBEYXRhRHJpdmVyID0gRGF0YURyaXZlci5qc29uKSB7XG5cdFx0aWYgKGRyaXZlciA9PT0gXCJqc29uXCIgJiYgIWhhc0pzb25PckFycmF5U3RydWN0dXJlKGRhdGEpKSB7XG5cdFx0XHR0aGlzLl9wYXJlbnQuZXZlbnRzLmZpcmUoRGF0YUV2ZW50cy5sb2FkRXJyb3IsIFtcIlVuY2F1Z2h0IFN5bnRheEVycm9yOiBVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dFwiXSk7XG5cdFx0fVxuXHRcdGRyaXZlciA9IHRvRGF0YURyaXZlcihkcml2ZXIpO1xuXHRcdGRhdGEgPSBkcml2ZXIudG9Kc29uQXJyYXkoZGF0YSk7XG5cdFx0aWYgKCEoZGF0YSBpbnN0YW5jZW9mIEFycmF5KSkge1xuXHRcdFx0Y29uc3QgdG90YWxDb3VudCA9IGRhdGEudG90YWxfY291bnQgLSAxO1xuXHRcdFx0Y29uc3QgZnJvbSA9IGRhdGEuZnJvbTtcblx0XHRcdGRhdGEgPSBkYXRhLmRhdGE7XG5cdFx0XHRpZiAodGhpcy5fcGFyZW50LmdldExlbmd0aCgpID09PSAwKSB7XG5cdFx0XHRcdGNvbnN0IG5ld0RhdGEgPSBbXTtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDAsIGogPSAwOyBpIDw9IHRvdGFsQ291bnQ7IGkrKykge1xuXHRcdFx0XHRcdGlmIChpID49IGZyb20gJiYgaSA8PSBmcm9tICsgZGF0YS5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0XHRuZXdEYXRhLnB1c2goZGF0YVtqXSk7XG5cdFx0XHRcdFx0XHRqKys7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG5ld0RhdGEucHVzaCh7ICRlbXB0eTogdHJ1ZSB9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YSA9IG5ld0RhdGE7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhLmZvckVhY2goKG5ld0l0ZW0sIGkpID0+IHtcblx0XHRcdFx0XHRjb25zdCBpbmRleCA9IGZyb20gKyBpO1xuXHRcdFx0XHRcdGNvbnN0IG9sZElkID0gdGhpcy5fcGFyZW50LmdldElkKGluZGV4KTtcblx0XHRcdFx0XHRpZiAob2xkSWQpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGVtcHR5SXRlbSA9IHRoaXMuX3BhcmVudC5nZXRJdGVtKG9sZElkKTtcblx0XHRcdFx0XHRcdGlmIChlbXB0eUl0ZW0gJiYgZW1wdHlJdGVtLiRlbXB0eSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9wYXJlbnQuY2hhbmdlSWQob2xkSWQsIG5ld0l0ZW0uaWQsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9wYXJlbnQudXBkYXRlKG5ld0l0ZW0uaWQsIHsgLi4ubmV3SXRlbSwgJGVtcHR5OiB1bmRlZmluZWQgfSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRoeFdhcm5pbmcoXCJpdGVtIG5vdCBmb3VuZFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR0aGlzLl9wYXJlbnQuZXZlbnRzLmZpcmUoRGF0YUV2ZW50cy5hZnRlckxhenlMb2FkLCBbZnJvbSwgZGF0YS5sZW5ndGhdKTtcblx0XHRcdFx0dGhpcy5fcGFyZW50LmV2ZW50cy5maXJlKERhdGFFdmVudHMuY2hhbmdlKTtcblx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9wYXJlbnQuZ2V0SW5pdGlhbERhdGEoKSkge1xuXHRcdFx0dGhpcy5fcGFyZW50LnJlbW92ZUFsbCgpO1xuXHRcdH1cblx0XHR0aGlzLl9wYXJlbnQuJHBhcnNlKGRhdGEpO1xuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0c2F2ZSh1cmw6IElEYXRhUHJveHkpIHtcblx0XHRmb3IgKGNvbnN0IGVsIG9mIHRoaXMuX2NoYW5nZXMub3JkZXIpIHtcblx0XHRcdGlmIChlbC5zYXZpbmcgfHwgZWwucGVuZGluZykge1xuXHRcdFx0XHRkaHhXYXJuaW5nKFwiaXRlbSBpcyBzYXZpbmdcIik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCBwcmV2RWwgPSB0aGlzLl9maW5kUHJldlN0YXRlKGVsLmlkKTtcblxuXHRcdFx0XHRpZiAocHJldkVsICYmIHByZXZFbC5zYXZpbmcpIHtcblx0XHRcdFx0XHRjb25zdCBwZW5kaW5nID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG5cdFx0XHRcdFx0XHRwcmV2RWwucHJvbWlzZVxuXHRcdFx0XHRcdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0ZWwucGVuZGluZyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdHJlcyh0aGlzLl9zZXRQcm9taXNlKGVsLCB1cmwpKTtcblx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdFx0LmNhdGNoKGVyciA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fcmVtb3ZlRnJvbU9yZGVyKHByZXZFbCk7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fc2V0UHJvbWlzZShlbCwgdXJsKTtcblx0XHRcdFx0XHRcdFx0XHRkaHhXYXJuaW5nKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0cmVqKGVycik7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRoaXMuX2FkZFRvQ2hhaW4ocGVuZGluZyk7XG5cdFx0XHRcdFx0ZWwucGVuZGluZyA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fc2V0UHJvbWlzZShlbCwgdXJsKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAodGhpcy5fY2hhbmdlcy5vcmRlci5sZW5ndGgpIHtcblx0XHRcdHRoaXMuX3BhcmVudC5zYXZlRGF0YS50aGVuKCgpID0+IHtcblx0XHRcdFx0dGhpcy5fc2F2aW5nID0gZmFsc2U7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVDaGFuZ2VzKGNoYW5nZXM6IElEYXRhQ2hhbmdlU3RhY2spIHtcblx0XHR0aGlzLl9jaGFuZ2VzID0gY2hhbmdlcztcblx0fVxuXHRwcml2YXRlIF9zZXRQcm9taXNlKGVsLCB1cmwpOiBQcm9taXNlPGFueT4ge1xuXHRcdGxldCBzdGF0dXM7XG5cdFx0c3dpdGNoIChlbC5zdGF0dXMpIHtcblx0XHRcdGNhc2UgXCJyZW1vdmVcIjpcblx0XHRcdFx0c3RhdHVzID0gXCJkZWxldGVcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiYWRkXCI6XG5cdFx0XHRcdHN0YXR1cyA9IFwiaW5zZXJ0XCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0c3RhdHVzID0gZWwuc3RhdHVzO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0ZWwucHJvbWlzZSA9IHVybC5zYXZlKGVsLm9iaiwgc3RhdHVzKTtcblx0XHRlbC5wcm9taXNlXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZUZyb21PcmRlcihlbCk7XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGVyciA9PiB7XG5cdFx0XHRcdGVsLnNhdmluZyA9IGZhbHNlO1xuXHRcdFx0XHRlbC5lcnJvciA9IHRydWU7XG5cdFx0XHRcdGRoeEVycm9yKGVycik7XG5cdFx0XHR9KTtcblx0XHRlbC5zYXZpbmcgPSB0cnVlO1xuXHRcdHRoaXMuX3NhdmluZyA9IHRydWU7XG5cdFx0dGhpcy5fYWRkVG9DaGFpbihlbC5wcm9taXNlKTtcblx0XHRyZXR1cm4gZWwucHJvbWlzZTtcblx0fVxuXG5cdHByaXZhdGUgX2FkZFRvQ2hhaW4ocHJvbWlzZSk6IHZvaWQge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWlzdXNlZC1wcm9taXNlc1xuXHRcdGlmICh0aGlzLl9wYXJlbnQuc2F2ZURhdGEgJiYgdGhpcy5fc2F2aW5nKSB7XG5cdFx0XHR0aGlzLl9wYXJlbnQuc2F2ZURhdGEgPSB0aGlzLl9wYXJlbnQuc2F2ZURhdGEudGhlbigoKSA9PiBwcm9taXNlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fcGFyZW50LnNhdmVEYXRhID0gcHJvbWlzZTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIF9maW5kUHJldlN0YXRlKGlkOiBJZCk6IGFueSB7XG5cdFx0Zm9yIChjb25zdCBlbCBvZiB0aGlzLl9jaGFuZ2VzLm9yZGVyKSB7XG5cdFx0XHRpZiAoZWwuaWQgPT09IGlkKSB7XG5cdFx0XHRcdHJldHVybiBlbDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRwcml2YXRlIF9yZW1vdmVGcm9tT3JkZXIoZWwpIHtcblx0XHR0aGlzLl9jaGFuZ2VzLm9yZGVyID0gdGhpcy5fY2hhbmdlcy5vcmRlci5maWx0ZXIoaXRlbSA9PiAhaXNFcXVhbE9iaihpdGVtLCBlbCkpO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBuYXR1cmFsQ29tcGFyZSB9IGZyb20gXCIuLi9oZWxwZXJzXCI7XG5pbXBvcnQgeyBJRGlyLCBJU29ydE1vZGUgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxudHlwZSBDaGFuZ2VTdHJpbmcgPSAoYTogc3RyaW5nKSA9PiBzdHJpbmcgfCBudW1iZXI7XG5cbmV4cG9ydCBjbGFzcyBTb3J0IHtcblx0c29ydChhcnJheTogYW55W10sIGJ5OiBJU29ydE1vZGUsIHBlcm0/OiBJU29ydE1vZGUpIHtcblx0XHR0aGlzLl9jcmVhdGVTb3J0ZXIoYnkpO1xuXG5cdFx0aWYgKHBlcm0gPT09IGJ5KSBieSA9IG51bGw7XG5cdFx0aWYgKHBlcm0gfHwgYnkpIHRoaXMuX3NvcnQoYXJyYXksIHBlcm0sIGJ5KTtcblx0fVxuXHRwcml2YXRlIF9jcmVhdGVTb3J0ZXIoYnk/OiBJU29ydE1vZGUpIHtcblx0XHRpZiAoYnkgJiYgIWJ5LnJ1bGUpIHtcblx0XHRcdGJ5LnJ1bGUgPSAoYTogYW55LCBiOiBhbnkpID0+IHtcblx0XHRcdFx0Y29uc3QgYWEgPSB0aGlzLl9jaGVja1ZhbChieS5hcywgYVtieS5ieV0pO1xuXHRcdFx0XHRjb25zdCBiYiA9IHRoaXMuX2NoZWNrVmFsKGJ5LmFzLCBiW2J5LmJ5XSk7XG5cdFx0XHRcdC8vIFtUT0RPXSB3aHkgd2UgbmVlZCBuYXR1cmFsQ29tcGFyZVxuXHRcdFx0XHRyZXR1cm4gbmF0dXJhbENvbXBhcmUoYWEudG9TdHJpbmcoKSwgYmIudG9TdHJpbmcoKSk7XG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9jaGVja1ZhbChtZXRob2Q6IENoYW5nZVN0cmluZywgdmFsOiBzdHJpbmcgfCBudW1iZXIpIHtcblx0XHRyZXR1cm4gbWV0aG9kID8gbWV0aG9kLmNhbGwodGhpcywgdmFsKSA6IHZhbDtcblx0fVxuXHRwcml2YXRlIF9zb3J0KGFycjogYW55W10sIGNvbmY6IElTb3J0TW9kZSwgY29uZjI6IElTb3J0TW9kZSk6IGFueVtdIHtcblx0XHRjb25zdCBkaXI6IElEaXIgPSB7XG5cdFx0XHRhc2M6IDEsXG5cdFx0XHRkZXNjOiAtMSxcblx0XHR9O1xuXHRcdHJldHVybiBhcnIuc29ydCgoYTogYW55LCBiOiBhbnkpID0+IHtcblx0XHRcdGxldCB0ID0gMDtcblx0XHRcdGlmIChjb25mKSB0ID0gY29uZi5ydWxlLmNhbGwodGhpcywgYSwgYikgKiAoZGlyW2NvbmYuZGlyXSB8fCBkaXIuYXNjKTtcblx0XHRcdGlmICh0ID09PSAwICYmIGNvbmYyKSB0ID0gY29uZjIucnVsZS5jYWxsKHRoaXMsIGEsIGIpICogKGRpcltjb25mMi5kaXJdIHx8IGRpci5hc2MpO1xuXHRcdFx0cmV0dXJuIHQ7XG5cdFx0fSk7XG5cdH1cbn1cbiIsImltcG9ydCB7IElEYXRhUHJveHkgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgYWpheCB9IGZyb20gXCIuL2FqYXhcIjtcblxuZXhwb3J0IGNsYXNzIERhdGFQcm94eSBpbXBsZW1lbnRzIElEYXRhUHJveHkge1xuXHRwdWJsaWMgdXJsOiBzdHJpbmc7XG5cdHB1YmxpYyBjb25maWc6IGFueTtcblxuXHRwcm90ZWN0ZWQgX3VybDogc3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKHVybDogc3RyaW5nLCBjb25maWc/OiBhbnkpIHtcblx0XHR0aGlzLnVybCA9IHRoaXMuX3VybCA9IHVybDtcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZztcblx0fVxuXG5cdHVwZGF0ZVVybCh1cmw/OiBzdHJpbmcsIHBhcmFtczogYW55ID0ge30pIHtcblx0XHR0aGlzLl91cmwgPSB0aGlzLnVybCA9IHVybCB8fCB0aGlzLl91cmw7XG5cblx0XHR0aGlzLnVybCArPSB0aGlzLnVybC5pbmNsdWRlcyhcIj9cIikgPyBcIiZcIiA6IFwiP1wiO1xuXHRcdGZvciAoY29uc3QgcGFyYW0gaW4gcGFyYW1zKSB7XG5cdFx0XHR0aGlzLmNvbmZpZ1twYXJhbV0gPSBwYXJhbXNbcGFyYW1dO1xuXHRcdFx0dGhpcy51cmwgKz0gYCR7cGFyYW19PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtc1twYXJhbV0pfSZgO1xuXHRcdH1cblx0XHR0aGlzLnVybCA9IHRoaXMudXJsLnNsaWNlKDAsIC0xKTtcblx0fVxuXG5cdGxvYWQ8VCA9IHN0cmluZz4oKTogUHJvbWlzZTxUPiB7XG5cdFx0cmV0dXJuIGFqYXguZ2V0KHRoaXMudXJsLCBudWxsLCB7IHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCIgfSk7XG5cdH1cblxuXHRzYXZlKGRhdGE6IGFueSwgbW9kZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcblx0XHRzd2l0Y2ggKG1vZGUpIHtcblx0XHRcdGNhc2UgXCJkZWxldGVcIjpcblx0XHRcdFx0cmV0dXJuIGFqYXguZGVsZXRlKHRoaXMudXJsLCBkYXRhKTtcblx0XHRcdGNhc2UgXCJpbnNlcnRcIjpcblx0XHRcdFx0cmV0dXJuIGFqYXgucHV0KHRoaXMudXJsLCBkYXRhKTtcblx0XHRcdGNhc2UgXCJ1cGRhdGVcIjpcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBhamF4LnBvc3QodGhpcy51cmwsIGRhdGEpO1xuXHRcdH1cblx0fVxufVxuIiwiaW1wb3J0IHsgSURhdGFEcml2ZXIsIElDc3ZEcml2ZXJDb25maWcgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IElBbnlPYmogfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJQ3N2RHJpdmVyIGV4dGVuZHMgSURhdGFEcml2ZXIge1xuXHRnZXRGaWVsZHMoZGF0YTogc3RyaW5nLCBoZWFkZXJzPzogc3RyaW5nW10pO1xufVxuXG5leHBvcnQgY2xhc3MgQ3N2RHJpdmVyIGltcGxlbWVudHMgSUNzdkRyaXZlciB7XG5cdHB1YmxpYyBjb25maWc6IElDc3ZEcml2ZXJDb25maWc7XG5cblx0Y29uc3RydWN0b3IoY29uZmlnPzogSUNzdkRyaXZlckNvbmZpZykge1xuXHRcdGNvbnN0IGluaXRDb25maWc6IElDc3ZEcml2ZXJDb25maWcgPSB7XG5cdFx0XHRza2lwSGVhZGVyOiAwLFxuXHRcdFx0bmFtZUJ5SGVhZGVyOiBmYWxzZSxcblx0XHRcdHJvd0RlbGltaXRlcjogXCJcXG5cIixcblx0XHRcdGNvbHVtbkRlbGltaXRlcjogXCIsXCIsXG5cdFx0fTtcblxuXHRcdHRoaXMuY29uZmlnID0geyAuLi5pbml0Q29uZmlnLCAuLi5jb25maWcgfTtcblxuXHRcdGlmICh0aGlzLmNvbmZpZy5uYW1lQnlIZWFkZXIpIHtcblx0XHRcdHRoaXMuY29uZmlnLnNraXBIZWFkZXIgPSAxO1xuXHRcdH1cblx0fVxuXG5cdGdldEZpZWxkcyhyb3c6IHN0cmluZywgaGVhZGVycz86IHN0cmluZ1tdKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XG5cdFx0Y29uc3QgcGFydHMgPSByb3cudHJpbSgpLnNwbGl0KHRoaXMuY29uZmlnLmNvbHVtbkRlbGltaXRlcik7XG5cblx0XHRjb25zdCBvYmogPSB7fTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRvYmpbaGVhZGVycyA/IGhlYWRlcnNbaV0gOiBpICsgMV0gPSBpc05hTihOdW1iZXIocGFydHNbaV0pKSA/IHBhcnRzW2ldIDogcGFyc2VGbG9hdChwYXJ0c1tpXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fVxuXHRnZXRSb3dzKGRhdGE6IHN0cmluZyk6IHN0cmluZ1tdIHtcblx0XHRyZXR1cm4gZGF0YS50cmltKCkuc3BsaXQodGhpcy5jb25maWcucm93RGVsaW1pdGVyKTtcblx0fVxuXHR0b0pzb25BcnJheShkYXRhOiBzdHJpbmcpOiBhbnlbXSB7XG5cdFx0Y29uc3Qgcm93cyA9IHRoaXMuZ2V0Um93cyhkYXRhKTtcblx0XHRsZXQgbmFtZXMgPSB0aGlzLmNvbmZpZy5uYW1lcztcblxuXHRcdGlmICh0aGlzLmNvbmZpZy5za2lwSGVhZGVyKSB7XG5cdFx0XHRjb25zdCB0b3AgPSByb3dzLnNwbGljZSgwLCB0aGlzLmNvbmZpZy5za2lwSGVhZGVyKTtcblx0XHRcdGlmICh0aGlzLmNvbmZpZy5uYW1lQnlIZWFkZXIpIHtcblx0XHRcdFx0bmFtZXMgPSB0b3BbMF0udHJpbSgpLnNwbGl0KHRoaXMuY29uZmlnLmNvbHVtbkRlbGltaXRlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByb3dzLm1hcChyb3cgPT4gdGhpcy5nZXRGaWVsZHMocm93LCBuYW1lcykpO1xuXHR9XG5cdHNlcmlhbGl6ZShkYXRhOiBJQW55T2JqW10sIHdpdGhvdXRIZWFkZXI/OiBib29sZWFuKTogc3RyaW5nIHtcblx0XHRjb25zdCBoZWFkZXIgPSBkYXRhWzBdXG5cdFx0XHQ/IE9iamVjdC5rZXlzKGRhdGFbMF0pXG5cdFx0XHRcdFx0LmZpbHRlcihrZXkgPT4gIWtleS5zdGFydHNXaXRoKFwiJFwiKSlcblx0XHRcdFx0XHQuam9pbih0aGlzLmNvbmZpZy5jb2x1bW5EZWxpbWl0ZXIpICtcblx0XHRcdCAgdGhpcy5jb25maWcuY29sdW1uRGVsaW1pdGVyICtcblx0XHRcdCAgdGhpcy5jb25maWcucm93RGVsaW1pdGVyXG5cdFx0XHQ6IFwiXCI7XG5cblx0XHRjb25zdCByZWFkeURhdGEgPSB0aGlzLl9zZXJpYWxpemUoZGF0YSk7XG5cdFx0aWYgKHdpdGhvdXRIZWFkZXIpIHtcblx0XHRcdHJldHVybiByZWFkeURhdGE7XG5cdFx0fVxuXHRcdHJldHVybiBoZWFkZXIgKyByZWFkeURhdGE7XG5cdH1cblx0cHJpdmF0ZSBfc2VyaWFsaXplKGRhdGE6IElBbnlPYmpbXSk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIGRhdGEucmVkdWNlKChjc3YsIHJvdykgPT4ge1xuXHRcdFx0Y29uc3QgY2VsbHMgPSBPYmplY3Qua2V5cyhyb3cpLnJlZHVjZSgodG90YWwsIGtleSwgaSkgPT4ge1xuXHRcdFx0XHRpZiAoa2V5LnN0YXJ0c1dpdGgoXCIkXCIpIHx8IGtleSA9PT0gXCJpdGVtc1wiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRvdGFsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBgJHt0b3RhbH0ke3Jvd1trZXldfSR7aSA9PT0gcm93Lmxlbmd0aCAtIDEgPyBcIlwiIDogdGhpcy5jb25maWcuY29sdW1uRGVsaW1pdGVyfWA7XG5cdFx0XHR9LCBcIlwiKTtcblxuXHRcdFx0aWYgKHJvdy5pdGVtcykge1xuXHRcdFx0XHRyZXR1cm4gYCR7Y3N2fSR7Y3N2ID8gXCJcXG5cIiA6IFwiXCJ9JHtjZWxsc30ke3RoaXMuX3NlcmlhbGl6ZShyb3cuaXRlbXMpfWA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBgJHtjc3Z9JHtjc3YgPyB0aGlzLmNvbmZpZy5yb3dEZWxpbWl0ZXIgOiBcIlwifSR7Y2VsbHN9YDtcblx0XHR9LCBcIlwiKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgSURhdGFEcml2ZXIgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IElBbnlPYmogfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIEpzb25Ecml2ZXIgaW1wbGVtZW50cyBJRGF0YURyaXZlciB7XG5cdHRvSnNvbkFycmF5KGRhdGE6IGFueSkge1xuXHRcdHJldHVybiB0aGlzLmdldFJvd3MoZGF0YSk7XG5cdH1cblx0c2VyaWFsaXplKGRhdGE6IElBbnlPYmpbXSk6IElBbnlPYmpbXSB7XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblx0Z2V0RmllbGRzKHJvdzogYW55KTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XG5cdFx0cmV0dXJuIHJvdztcblx0fVxuXHRnZXRSb3dzKGRhdGE6IHN0cmluZyk6IGFueVtdIHtcblx0XHRyZXR1cm4gdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKGRhdGEpIDogZGF0YTtcblx0fVxufVxuIiwiaW1wb3J0IHsgSURhdGFEcml2ZXIgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IElBbnlPYmogfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcbmltcG9ydCB7IGpzb25Ub1hNTCB9IGZyb20gXCIuLi9zZXJpYWxpemVycy94bWxcIjtcblxuY29uc3QgQVJSQVlfTkFNRSA9IFwiaXRlbXNcIjtcbmNvbnN0IElURU1fTkFNRSA9IFwiaXRlbVwiO1xuXG4vLyBjb252ZXJ0IHhtbCB0YWcgdG8ganMgb2JqZWN0LCBhbGwgc3VidGFncyBhbmQgYXR0cmlidXRlcyBhcmUgbWFwcGVkIHRvIHRoZSBwcm9wZXJ0aWVzIG9mIHJlc3VsdCBvYmplY3RcbmZ1bmN0aW9uIHRhZ1RvT2JqZWN0KHRhZzogRWxlbWVudCwgaW5pdGlhbE9iaj86IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcblx0aW5pdGlhbE9iaiA9IGluaXRpYWxPYmogfHwge307XG5cblx0Ly8gbWFwIGF0dHJpYnV0ZXNcblx0Y29uc3QgYSA9IHRhZy5hdHRyaWJ1dGVzO1xuXHRpZiAoYSAmJiBhLmxlbmd0aCkge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aW5pdGlhbE9ialthW2ldLm5hbWVdID0gYVtpXS52YWx1ZTtcblx0XHR9XG5cdH1cblxuXHQvLyBtYXAgc3VidGFnc1xuXHRjb25zdCBiID0gdGFnLmNoaWxkTm9kZXM7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuXHRcdGlmIChiW2ldLm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRjb25zdCBuYW1lID0gKGJbaV0gYXMgRWxlbWVudCkudGFnTmFtZTtcblx0XHRcdGlmIChpbml0aWFsT2JqW25hbWVdKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgaW5pdGlhbE9ialtuYW1lXS5wdXNoICE9PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRpbml0aWFsT2JqW25hbWVdID0gW2luaXRpYWxPYmpbbmFtZV1dO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluaXRpYWxPYmpbbmFtZV0ucHVzaCh0YWdUb09iamVjdChiW2ldIGFzIEVsZW1lbnQsIHt9KSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpbml0aWFsT2JqW25hbWVdID0gdGFnVG9PYmplY3QoYltpXSBhcyBFbGVtZW50LCB7fSk7IC8vIHN1Yi1vYmplY3QgZm9yIGNvbXBsZXggc3VidGFnc1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBpbml0aWFsT2JqO1xufVxuXG5leHBvcnQgY2xhc3MgWE1MRHJpdmVyIGltcGxlbWVudHMgSURhdGFEcml2ZXIge1xuXHR0b0pzb25BcnJheShkYXRhOiBhbnkpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRSb3dzKGRhdGEpO1xuXHR9XG5cdHRvSnNvbk9iamVjdChkYXRhOiBzdHJpbmcpIHtcblx0XHRsZXQgZG9jOiBFbGVtZW50O1xuXHRcdGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0ZG9jID0gKHRoaXMuX2Zyb21TdHJpbmcoZGF0YSkgYXMgdW5rbm93bikgYXMgRWxlbWVudDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGFnVG9PYmplY3QoZG9jKTtcblx0fVxuXHRzZXJpYWxpemUoZGF0YTogSUFueU9ialtdKSB7XG5cdFx0cmV0dXJuIGpzb25Ub1hNTChkYXRhKTtcblx0fVxuXHRnZXRGaWVsZHMocm93OiBhbnkpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcblx0XHRyZXR1cm4gcm93O1xuXHR9XG5cdGdldFJvd3MoZGF0YTogRG9jdW1lbnQgfCBzdHJpbmcpOiBhbnlbXSB7XG5cdFx0aWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRkYXRhID0gdGhpcy5fZnJvbVN0cmluZyhkYXRhKTtcblx0XHR9XG5cdFx0aWYgKGRhdGEpIHtcblx0XHRcdGNvbnN0IGNoaWxkTm9kZXMgPSBkYXRhLmNoaWxkTm9kZXMgJiYgZGF0YS5jaGlsZE5vZGVzWzBdICYmIGRhdGEuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzO1xuXHRcdFx0aWYgKCFjaGlsZE5vZGVzIHx8ICFjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLl9nZXRSb3dzKGNoaWxkTm9kZXMpO1xuXHRcdH1cblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRwcml2YXRlIF9nZXRSb3dzKG5vZGVzOiBOb2RlTGlzdE9mPENoaWxkTm9kZT4pOiBhbnlbXSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKChub2Rlc1tpXSBhcyBIVE1MRWxlbWVudCkudGFnTmFtZSA9PT0gSVRFTV9OQU1FKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKHRoaXMuX25vZGVUb0pTKG5vZGVzW2ldIGFzIEhUTUxFbGVtZW50KSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblx0cHJpdmF0ZSBfZnJvbVN0cmluZyhkYXRhOiBzdHJpbmcpOiBEb2N1bWVudCB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRhdGEsIFwidGV4dC94bWxcIik7XG5cdFx0fSBjYXRjaCB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIF9ub2RlVG9KUyhub2RlOiBIVE1MRWxlbWVudCkge1xuXHRcdGNvbnN0IHJlc3VsdDogSUFueU9iaiA9IHt9O1xuXG5cdFx0aWYgKHRoaXMuX2hhdmVBdHRycyhub2RlKSkge1xuXHRcdFx0Y29uc3QgYXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGF0dHJzW2ldO1xuXHRcdFx0XHRyZXN1bHRbbmFtZV0gPSB0aGlzLl90b1R5cGUodmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuXHRcdFx0cmVzdWx0LnZhbHVlID0gcmVzdWx0LnZhbHVlIHx8IHRoaXMuX3RvVHlwZShub2RlLnRleHRDb250ZW50KTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXG5cdFx0Y29uc3QgY2hpbGROb2RlcyA9IG5vZGUuY2hpbGROb2Rlcztcblx0XHRpZiAoY2hpbGROb2Rlcykge1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IHN1Yk5vZGUgPSBjaGlsZE5vZGVzW2ldIGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0XHRjb25zdCB0YWcgPSBzdWJOb2RlLnRhZ05hbWU7XG5cdFx0XHRcdGlmICghdGFnKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRhZyA9PT0gQVJSQVlfTkFNRSAmJiBzdWJOb2RlLmNoaWxkTm9kZXMpIHtcblx0XHRcdFx0XHRyZXN1bHRbdGFnXSA9IHRoaXMuX2dldFJvd3Moc3ViTm9kZS5jaGlsZE5vZGVzKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAodGhpcy5faGF2ZUF0dHJzKHN1Yk5vZGUpKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRbdGFnXSA9IHRoaXMuX25vZGVUb0pTKHN1Yk5vZGUpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRbdGFnXSA9IHRoaXMuX3RvVHlwZShzdWJOb2RlLnRleHRDb250ZW50KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cdHByaXZhdGUgX3RvVHlwZSh2YWw6IGFueSkge1xuXHRcdGlmICh2YWwgPT09IFwiZmFsc2VcIiB8fCB2YWwgPT09IFwidHJ1ZVwiKSB7XG5cdFx0XHRyZXR1cm4gdmFsID09PSBcInRydWVcIjtcblx0XHR9XG5cdFx0aWYgKCFpc05hTih2YWwpKSB7XG5cdFx0XHRyZXR1cm4gTnVtYmVyKHZhbCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXHRwcml2YXRlIF9oYXZlQXR0cnMobm9kZTogSFRNTEVsZW1lbnQpIHtcblx0XHRyZXR1cm4gbm9kZS5hdHRyaWJ1dGVzICYmIG5vZGUuYXR0cmlidXRlcy5sZW5ndGg7XG5cdH1cbn1cbiIsImltcG9ydCB7IEpzb25Ecml2ZXIgfSBmcm9tIFwiLi9Kc29uRHJpdmVyXCI7XG5pbXBvcnQgeyBDc3ZEcml2ZXIgfSBmcm9tIFwiLi9Dc3ZEcml2ZXJcIjtcbmltcG9ydCB7IFhNTERyaXZlciB9IGZyb20gXCIuL1hNTERyaXZlclwiO1xuXG5leHBvcnQgY29uc3QgZGF0YURyaXZlcnMgPSB7XG5cdGpzb246IEpzb25Ecml2ZXIsXG5cdGNzdjogQ3N2RHJpdmVyLFxufTtcblxuZXhwb3J0IGNvbnN0IGRhdGFEcml2ZXJzUHJvID0ge1xuXHQuLi5kYXRhRHJpdmVycyxcblx0eG1sOiBYTUxEcml2ZXIsXG59O1xuIiwiaW1wb3J0IHsgSUFueU9iaiB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi90eXBlc1wiO1xuaW1wb3J0IHsgRGF0YVByb3h5IH0gZnJvbSBcIi4vZGF0YXByb3h5XCI7XG5pbXBvcnQge1xuXHRJRmlsdGVyQ2FsbGJhY2ssXG5cdElGaWx0ZXJNb2RlLFxuXHRJRGF0YUNvbGxlY3Rpb24sXG5cdElEYXRhSXRlbSxcblx0SVRyZWVDb2xsZWN0aW9uLFxuXHREYXRhRHJpdmVyLFxuXHRJRGF0YURyaXZlcixcbn0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IGRhdGFEcml2ZXJzIH0gZnJvbSBcIi4vZHJpdmVycy9kcml2ZXJzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VxdWFsT2JqKGE6IGFueSwgYjogYW55KSB7XG5cdGZvciAoY29uc3Qga2V5IGluIGEpIHtcblx0XHRpZiAoYVtrZXldICE9PSBiW2tleV0gfHwgQXJyYXkuaXNBcnJheShhW2tleV0pKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5hdHVyYWxDb21wYXJlKGEsIGIpIHtcblx0aWYgKGlzTmFOKGEpIHx8IGlzTmFOKGIpKSB7XG5cdFx0Y29uc3QgYXggPSBbXTtcblx0XHRjb25zdCBieCA9IFtdO1xuXG5cdFx0YS5yZXBsYWNlKC8oXFxkKyl8KFxcRCspL2csIChfLCAkMSwgJDIpID0+IHtcblx0XHRcdGF4LnB1c2goWyQxIHx8IEluZmluaXR5LCAkMiB8fCBcIlwiXSk7XG5cdFx0fSk7XG5cdFx0Yi5yZXBsYWNlKC8oXFxkKyl8KFxcRCspL2csIChfLCAkMSwgJDIpID0+IHtcblx0XHRcdGJ4LnB1c2goWyQxIHx8IEluZmluaXR5LCAkMiB8fCBcIlwiXSk7XG5cdFx0fSk7XG5cblx0XHR3aGlsZSAoYXgubGVuZ3RoICYmIGJ4Lmxlbmd0aCkge1xuXHRcdFx0Y29uc3QgYW4gPSBheC5zaGlmdCgpO1xuXHRcdFx0Y29uc3QgYm4gPSBieC5zaGlmdCgpO1xuXHRcdFx0Y29uc3Qgbm4gPSBhblswXSAtIGJuWzBdIHx8IGFuWzFdLmxvY2FsZUNvbXBhcmUoYm5bMV0pO1xuXHRcdFx0aWYgKG5uKSB7XG5cdFx0XHRcdHJldHVybiBubjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gYXgubGVuZ3RoIC0gYngubGVuZ3RoO1xuXHR9XG5cblx0cmV0dXJuIGEgLSBiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEJ5Q29uZihpdGVtOiBhbnksIGNvbmY6IElGaWx0ZXJNb2RlIHwgSUZpbHRlckNhbGxiYWNrKTogYW55IHtcblx0aWYgKHR5cGVvZiBjb25mID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRpZiAoY29uZi5jYWxsKHRoaXMsIGl0ZW0pKSB7XG5cdFx0XHRyZXR1cm4gaXRlbTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoY29uZi5ieSAmJiBjb25mLm1hdGNoKSB7XG5cdFx0aWYgKGl0ZW1bY29uZi5ieV0gPT09IGNvbmYubWF0Y2gpIHtcblx0XHRcdHJldHVybiBpdGVtO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWJ1ZygpOiBib29sZWFuIHtcblx0Y29uc3QgZGh4ID0gKHdpbmRvdyBhcyBhbnkpLmRoeDtcblx0aWYgKHR5cGVvZiBkaHggIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRyZXR1cm4gdHlwZW9mIGRoeC5kZWJ1ZyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkaHguZGVidWc7XG5cdH1cblx0Ly8gcmV0dXJuIHR5cGVvZiBESFhfREVCVUdfTU9ERSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBESFhfREVCVUdfTU9ERTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkaHhXYXJuaW5nKG1zZzogc3RyaW5nKSB7XG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG5cdGNvbnNvbGUud2Fybihtc2cpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRoeEVycm9yKG1zZzogc3RyaW5nKSB7XG5cdHRocm93IG5ldyBFcnJvcihtc2cpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Qcm94eShwcm94eTogYW55KTogRGF0YVByb3h5IHtcblx0Y29uc3QgdHlwZSA9IHR5cGVvZiBwcm94eTtcblxuXHRpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdHJldHVybiBuZXcgRGF0YVByb3h5KHByb3h5KTtcblx0fSBlbHNlIGlmICh0eXBlID09PSBcIm9iamVjdFwiKSB7XG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9XG59XG5leHBvcnQgZnVuY3Rpb24gdG9EYXRhRHJpdmVyKGRyaXZlcjogRGF0YURyaXZlciB8IElEYXRhRHJpdmVyKTogSURhdGFEcml2ZXIge1xuXHRpZiAodHlwZW9mIGRyaXZlciA9PT0gXCJzdHJpbmdcIikge1xuXHRcdGNvbnN0IGRoeCA9ICh3aW5kb3cgYXMgYW55KS5kaHg7XG5cdFx0Y29uc3QgZHJpdmVycyA9IChkaHggJiYgZGh4LmRhdGFEcml2ZXJzKSB8fCBkYXRhRHJpdmVycztcblxuXHRcdGlmIChkcml2ZXJzW2RyaXZlcl0pIHtcblx0XHRcdHJldHVybiBuZXcgZHJpdmVyc1tkcml2ZXJdKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG5cdFx0XHRjb25zb2xlLndhcm4oXCJJbmNvcnJlY3QgZGF0YSBkcml2ZXIgdHlwZTpcIiwgZHJpdmVyKTtcblx0XHRcdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG5cdFx0XHRjb25zb2xlLndhcm4oXCJBdmFpbGFibGUgdHlwZXM6XCIsIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKGRyaXZlcnMpKSk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHR5cGVvZiBkcml2ZXIgPT09IFwib2JqZWN0XCIpIHtcblx0XHRyZXR1cm4gZHJpdmVyO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5V2l0aG91dElubmVyKG9iajogSUFueU9iaiwgZm9yYmlkZGVuPzogSUFueU9iaik6IElBbnlPYmoge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblx0Zm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG5cdFx0aWYgKCFrZXkuc3RhcnRzV2l0aChcIiRcIikgJiYgKCFmb3JiaWRkZW4gfHwgIWZvcmJpZGRlbltrZXldKSkge1xuXHRcdFx0cmVzdWx0W2tleV0gPSBvYmpba2V5XTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJlZUNvbGxlY3Rpb24oXG5cdG9iajogSURhdGFDb2xsZWN0aW9uPGFueT4gfCBJVHJlZUNvbGxlY3Rpb248YW55PiB8IElEYXRhSXRlbVtdXG4pOiBvYmogaXMgSVRyZWVDb2xsZWN0aW9uPGFueT4ge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG5cdHJldHVybiBCb29sZWFuKChvYmogYXMgSVRyZWVDb2xsZWN0aW9uKS5nZXRSb290KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0pzb25PckFycmF5U3RydWN0dXJlKHN0cjogYW55KTogYm9vbGVhbiB7XG5cdGlmICh0eXBlb2Ygc3RyID09PSBcIm9iamVjdFwiKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHRjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKHN0cik7XG5cdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZXN1bHQpID09PSBcIltvYmplY3QgT2JqZWN0XVwiIHx8IEFycmF5LmlzQXJyYXkocmVzdWx0KTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBEYXRhUHJveHkgfSBmcm9tIFwiLi9kYXRhcHJveHlcIjtcbmltcG9ydCB7IGV4dGVuZCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5pbXBvcnQgeyBhamF4IH0gZnJvbSBcIi4vYWpheFwiO1xuaW1wb3J0IHsgSUxhenlDb25maWcsIElMYXp5RGF0YVByb3h5IH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIExhenlEYXRhUHJveHkgZXh0ZW5kcyBEYXRhUHJveHkgaW1wbGVtZW50cyBJTGF6eURhdGFQcm94eSB7XG5cdHB1YmxpYyBjb25maWc6IElMYXp5Q29uZmlnO1xuXG5cdHByaXZhdGUgX3RpbWVvdXQ7XG5cdHByaXZhdGUgX2Nvb2xpbmc6IGJvb2xlYW47XG5cblx0Y29uc3RydWN0b3IodXJsOiBzdHJpbmcsIGNvbmZpZz86IGFueSkge1xuXHRcdHN1cGVyKHVybCk7XG5cdFx0dGhpcy5jb25maWcgPSBleHRlbmQoXG5cdFx0XHR7XG5cdFx0XHRcdGZyb206IDAsXG5cdFx0XHRcdGxpbWl0OiA1MCxcblx0XHRcdFx0ZGVsYXk6IDUwLFxuXHRcdFx0XHRwcmVwYXJlOiAwLFxuXHRcdFx0fSxcblx0XHRcdGNvbmZpZ1xuXHRcdCk7XG5cblx0XHR0aGlzLnVwZGF0ZVVybCh1cmwsIHsgZnJvbTogdGhpcy5jb25maWcuZnJvbSwgbGltaXQ6IHRoaXMuY29uZmlnLmxpbWl0IH0pO1xuXHR9XG5cblx0bG9hZDxUID0gc3RyaW5nPigpOiBQcm9taXNlPFQ+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG5cdFx0XHRpZiAoIXRoaXMuX3RpbWVvdXQpIHtcblx0XHRcdFx0YWpheC5nZXQodGhpcy51cmwsIHsgcmVzcG9uc2VUeXBlOiBcInRleHRcIiB9KS50aGVuKHJlc29sdmUpO1xuXHRcdFx0XHR0aGlzLl9jb29saW5nID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG5cblx0XHRcdFx0dGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdGFqYXguZ2V0KHRoaXMudXJsLCB7IHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCIgfSkudGhlbihyZXNvbHZlKTtcblx0XHRcdFx0XHR0aGlzLl9jb29saW5nID0gdHJ1ZTtcblx0XHRcdFx0fSwgdGhpcy5jb25maWcuZGVsYXkpO1xuXG5cdFx0XHRcdGlmICh0aGlzLl9jb29saW5nKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShudWxsKTtcblx0XHRcdFx0XHR0aGlzLl9jb29saW5nID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuIiwiaW1wb3J0IHsgRXZlbnRTeXN0ZW0sIElFdmVudFN5c3RlbSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9ldmVudHNcIjtcbmltcG9ydCB7IFNlbGVjdGlvbkV2ZW50cywgSVNlbGVjdGlvbiwgSVNlbGVjdGlvbkNvbmZpZywgSWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcbmltcG9ydCB7IERhdGFDb2xsZWN0aW9uIH0gZnJvbSBcIi4vZGF0YWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7IERhdGFFdmVudHMgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgU2VsZWN0aW9uIGltcGxlbWVudHMgSVNlbGVjdGlvbiB7XG5cdHB1YmxpYyBldmVudHM6IElFdmVudFN5c3RlbTxTZWxlY3Rpb25FdmVudHM+O1xuXHRwdWJsaWMgY29uZmlnOiBJU2VsZWN0aW9uQ29uZmlnO1xuXG5cdHByaXZhdGUgX3NlbGVjdGVkOiBJZDtcblx0cHJpdmF0ZSBfZGF0YTogRGF0YUNvbGxlY3Rpb247XG5cblx0Y29uc3RydWN0b3IoY29uZmlnOiBJU2VsZWN0aW9uQ29uZmlnLCBkYXRhPzogRGF0YUNvbGxlY3Rpb24sIGV2ZW50cz86IElFdmVudFN5c3RlbTxhbnk+KSB7XG5cdFx0dGhpcy5ldmVudHMgPSBldmVudHMgfHwgbmV3IEV2ZW50U3lzdGVtPGFueT4odGhpcyk7XG5cdFx0dGhpcy5fZGF0YSA9IGRhdGE7XG5cdFx0dGhpcy5jb25maWcgPSBjb25maWc7XG5cblx0XHR0aGlzLl9kYXRhLmV2ZW50cy5vbihEYXRhRXZlbnRzLnJlbW92ZUFsbCwgKCkgPT4ge1xuXHRcdFx0dGhpcy5fc2VsZWN0ZWQgPSBudWxsO1xuXHRcdH0pO1xuXHRcdHRoaXMuX2RhdGEuZXZlbnRzLm9uKERhdGFFdmVudHMuY2hhbmdlLCAoKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5fc2VsZWN0ZWQpIHtcblx0XHRcdFx0Y29uc3QgbmVhciA9IHRoaXMuX2RhdGEuZ2V0TmVhcklkKHRoaXMuX3NlbGVjdGVkKTtcblx0XHRcdFx0aWYgKG5lYXIgIT09IHRoaXMuX3NlbGVjdGVkKSB7XG5cdFx0XHRcdFx0dGhpcy5fc2VsZWN0ZWQgPSBudWxsO1xuXHRcdFx0XHRcdGlmIChuZWFyKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmFkZChuZWFyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGdldElkKCk6IElkIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG5cdH1cblxuXHRnZXRJdGVtKCk6IGFueSB7XG5cdFx0aWYgKHRoaXMuX3NlbGVjdGVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZGF0YS5nZXRJdGVtKHRoaXMuX3NlbGVjdGVkKTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZW1vdmUoaWQ/OiBJZCk6IGJvb2xlYW4ge1xuXHRcdGlkID0gaWQgfHwgdGhpcy5fc2VsZWN0ZWQ7XG5cdFx0aWYgKCFpZCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmV2ZW50cy5maXJlKFNlbGVjdGlvbkV2ZW50cy5iZWZvcmVVblNlbGVjdCwgW2lkXSkpIHtcblx0XHRcdHRoaXMuX2RhdGEudXBkYXRlKGlkLCB7ICRzZWxlY3RlZDogZmFsc2UgfSwgdHJ1ZSk7XG5cdFx0XHR0aGlzLl9zZWxlY3RlZCA9IG51bGw7XG5cdFx0XHR0aGlzLmV2ZW50cy5maXJlKFNlbGVjdGlvbkV2ZW50cy5hZnRlclVuU2VsZWN0LCBbaWRdKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRhZGQoaWQ6IElkKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuX3NlbGVjdGVkID09PSBpZCB8fCAhIXRoaXMuY29uZmlnLmRpc2FibGVkIHx8ICF0aGlzLl9kYXRhLmV4aXN0cyhpZCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5yZW1vdmUoKTtcblxuXHRcdHRoaXMuX2FkZFNpbmdsZShpZCk7XG5cdH1cblxuXHRlbmFibGUoKTogdm9pZCB7XG5cdFx0dGhpcy5jb25maWcuZGlzYWJsZWQgPSBmYWxzZTtcblx0fVxuXG5cdGRpc2FibGUoKTogdm9pZCB7XG5cdFx0dGhpcy5yZW1vdmUoKTtcblx0XHR0aGlzLmNvbmZpZy5kaXNhYmxlZCA9IHRydWU7XG5cdH1cblxuXHRwcml2YXRlIF9hZGRTaW5nbGUoaWQ6IElkKSB7XG5cdFx0aWYgKHRoaXMuZXZlbnRzLmZpcmUoU2VsZWN0aW9uRXZlbnRzLmJlZm9yZVNlbGVjdCwgW2lkXSkpIHtcblx0XHRcdHRoaXMuX3NlbGVjdGVkID0gaWQ7XG5cdFx0XHR0aGlzLl9kYXRhLnVwZGF0ZShpZCwgeyAkc2VsZWN0ZWQ6IHRydWUgfSwgdHJ1ZSk7XG5cdFx0XHR0aGlzLmV2ZW50cy5maXJlKFNlbGVjdGlvbkV2ZW50cy5hZnRlclNlbGVjdCwgW2lkXSk7XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgeyBJQW55T2JqIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5cbmNvbnN0IElOREVOVF9TVEVQID0gNDtcblxuZnVuY3Rpb24gd3MoY291bnQ6IG51bWJlcikge1xuXHRyZXR1cm4gXCIgXCIucmVwZWF0KGNvdW50KTtcbn1cblxuZnVuY3Rpb24gaXRlbVRvWE1MKGl0ZW06IElBbnlPYmosIGluZGVudDogbnVtYmVyID0gSU5ERU5UX1NURVApIHtcblx0bGV0IHJlc3VsdCA9IHdzKGluZGVudCkgKyBcIjxpdGVtPlxcblwiO1xuXHRmb3IgKGNvbnN0IGtleSBpbiBpdGVtKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoaXRlbVtrZXldKSkge1xuXHRcdFx0cmVzdWx0ICs9IHdzKGluZGVudCArIElOREVOVF9TVEVQKSArIGA8JHtrZXl9PlxcbmA7XG5cdFx0XHRyZXN1bHQgKz1cblx0XHRcdFx0aXRlbVtrZXldLm1hcCgoc3ViSXRlbTogSUFueU9iaikgPT4gaXRlbVRvWE1MKHN1Ykl0ZW0sIGluZGVudCArIElOREVOVF9TVEVQICogMikpLmpvaW4oXCJcXG5cIikgK1xuXHRcdFx0XHRcIlxcblwiO1xuXHRcdFx0cmVzdWx0ICs9IHdzKGluZGVudCArIElOREVOVF9TVEVQKSArIGA8LyR7a2V5fT5cXG5gO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgKz0gd3MoaW5kZW50ICsgSU5ERU5UX1NURVApICsgYDwke2tleX0+JHtpdGVtW2tleV19PC8ke2tleX0+XFxuYDtcblx0XHR9XG5cdH1cblx0cmVzdWx0ICs9IHdzKGluZGVudCkgKyBcIjwvaXRlbT5cIjtcblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpzb25Ub1hNTChkYXRhOiBJQW55T2JqW10sIHJvb3QgPSBcInJvb3RcIik6IHN0cmluZyB7XG5cdGxldCByZXN1bHQgPSBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiaXNvLTg4NTktMVwiPz5cXG48JHtyb290fT5gO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcblx0XHRyZXN1bHQgKz0gXCJcXG5cIiArIGl0ZW1Ub1hNTChkYXRhW2ldKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0ICsgYFxcbjwvJHtyb290fT5gO1xufVxuIiwiaW1wb3J0IHsgZmluZEluZGV4LCB1aWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgRGF0YUNvbGxlY3Rpb24gfSBmcm9tIFwiLi9kYXRhY29sbGVjdGlvblwiO1xuaW1wb3J0IHsgRGF0YVByb3h5IH0gZnJvbSBcIi4vZGF0YXByb3h5XCI7XG5pbXBvcnQgeyB0b0RhdGFEcml2ZXIsIGlzVHJlZUNvbGxlY3Rpb24sIGNvcHlXaXRob3V0SW5uZXIsIGRoeEVycm9yIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuaW1wb3J0IHtcblx0RGF0YUNhbGxiYWNrLFxuXHREYXRhRXZlbnRzLFxuXHRJRGF0YUNvbGxlY3Rpb24sXG5cdElEYXRhSXRlbSxcblx0SVRyZWVDb2xsZWN0aW9uLFxuXHRUcmVlRmlsdGVyVHlwZSxcblx0SUZpbHRlckNhbGxiYWNrLFxuXHRJRmlsdGVyTW9kZSxcblx0SUZpbHRlckNvbXBsZXhNb2RlLFxuXHRJVHJlZUZpbHRlckNvbmZpZyxcblx0RGF0YURyaXZlcixcblx0SVNvcnRNb2RlLFxuXHRJRGF0YURyaXZlcixcbn0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IElBbnlPYmosIElkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5cbmZ1bmN0aW9uIGFkZFRvT3JkZXIoc3RvcmU6IGFueSwgb2JqOiBvYmplY3QsIHBhcmVudDogSWQsIGluZGV4OiBudW1iZXIpIHtcblx0aWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgaW5kZXggIT09IC0xICYmIHN0b3JlW3BhcmVudF0gJiYgc3RvcmVbcGFyZW50XVtpbmRleF0pIHtcblx0XHRzdG9yZVtwYXJlbnRdLnNwbGljZShpbmRleCwgMCwgb2JqKTtcblx0fSBlbHNlIHtcblx0XHRpZiAoIXN0b3JlW3BhcmVudF0pIHtcblx0XHRcdHN0b3JlW3BhcmVudF0gPSBbXTtcblx0XHR9XG5cdFx0c3RvcmVbcGFyZW50XS5wdXNoKG9iaik7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFRyZWVDb2xsZWN0aW9uPFQgZXh0ZW5kcyBJRGF0YUl0ZW0gPSBJRGF0YUl0ZW0+IGV4dGVuZHMgRGF0YUNvbGxlY3Rpb248VD5cblx0aW1wbGVtZW50cyBJVHJlZUNvbGxlY3Rpb248VD4ge1xuXHRwcm90ZWN0ZWQgX2NoaWxkczogeyBbaWQ6IHN0cmluZ106IFRbXSB9ID0ge307XG5cdHByb3RlY3RlZCBfcm9vdDogSWQ7XG5cdHByb3RlY3RlZCBfZmlsdGVyczoge1xuXHRcdGZpbHRlcnM6IElGaWx0ZXJDb21wbGV4TW9kZSB8IElGaWx0ZXJDYWxsYmFjaztcblx0XHRjb25maWc6IElUcmVlRmlsdGVyQ29uZmlnO1xuXHR9O1xuXG5cdHByaXZhdGUgX2luaXRDaGlsZHM6IHsgW2lkOiBzdHJpbmddOiBUW10gfTtcblxuXHRjb25zdHJ1Y3Rvcihjb25maWc/OiBhbnksIGV2ZW50cz86IElFdmVudFN5c3RlbTxEYXRhRXZlbnRzPikge1xuXHRcdHN1cGVyKGNvbmZpZywgZXZlbnRzKTtcblx0XHRjb25zdCByb290ID0gKHRoaXMuX3Jvb3QgPSAoY29uZmlnICYmIGNvbmZpZy5yb290SWQpIHx8IFwiX1JPT1RfXCIgKyB1aWQoKSk7XG5cdFx0dGhpcy5fY2hpbGRzID0geyBbcm9vdF06IFtdIH07XG5cdFx0dGhpcy5faW5pdENoaWxkcyA9IG51bGw7XG5cdH1cblxuXHRhZGQobmV3SXRlbTogSURhdGFJdGVtLCBpbmRleD86IG51bWJlciwgcGFyZW50PzogSWQpOiBJZDtcblx0YWRkKG5ld0l0ZW06IElEYXRhSXRlbVtdLCBpbmRleD86IG51bWJlciwgcGFyZW50PzogSWQpOiBJZFtdO1xuXHRhZGQobmV3SXRlbTogSURhdGFJdGVtIHwgSURhdGFJdGVtW10sIGluZGV4ID0gLTEsIHBhcmVudDogSWQgPSB0aGlzLl9yb290KTogSWQgfCBJZFtdIHtcblx0XHRpZiAoIXRoaXMuZXZlbnRzLmZpcmUoRGF0YUV2ZW50cy5iZWZvcmVBZGQsIFtuZXdJdGVtXSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBuZXdJdGVtICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRuZXdJdGVtID0ge1xuXHRcdFx0XHR2YWx1ZTogbmV3SXRlbSxcblx0XHRcdH07XG5cdFx0fVxuXHRcdGlmIChBcnJheS5pc0FycmF5KG5ld0l0ZW0pKSB7XG5cdFx0XHRyZXR1cm4gbmV3SXRlbS5tYXAoKGVsZW1lbnQsIGtleSkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fYWRkKGVsZW1lbnQsIGluZGV4LCBwYXJlbnQsIGtleSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2FkZChuZXdJdGVtLCBpbmRleCwgcGFyZW50KTtcblx0XHR9XG5cdH1cblx0Z2V0Um9vdCgpOiBJZCB7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvb3Q7XG5cdH1cblx0Z2V0UGFyZW50KGlkOiBJZCwgYXNPYmogPSBmYWxzZSk6IElkIHtcblx0XHRpZiAoIXRoaXMuX3B1bGxbaWRdKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5fcHVsbFtpZF0ucGFyZW50O1xuXHRcdHJldHVybiBhc09iaiA/IHRoaXMuX3B1bGxbcGFyZW50XSA6IHBhcmVudDtcblx0fVxuXHRnZXRJdGVtcyhpZDogSWQpOiBUW10ge1xuXHRcdGlmICh0aGlzLl9jaGlsZHMgJiYgdGhpcy5fY2hpbGRzW2lkXSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2NoaWxkc1tpZF07XG5cdFx0fVxuXHRcdHJldHVybiBbXTtcblx0fVxuXHRnZXRMZW5ndGgoaWQ6IElkID0gdGhpcy5fcm9vdCk6IG51bWJlciB7XG5cdFx0aWYgKCF0aGlzLl9jaGlsZHNbaWRdKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2NoaWxkc1tpZF0ubGVuZ3RoO1xuXHR9XG5cdHJlbW92ZUFsbChpZD86IElkKTogdm9pZCB7XG5cdFx0aWYgKCFpZCkge1xuXHRcdFx0c3VwZXIucmVtb3ZlQWxsKCk7XG5cdFx0XHRjb25zdCByb290ID0gdGhpcy5fcm9vdDtcblx0XHRcdHRoaXMuX2luaXRDaGlsZHMgPSBudWxsO1xuXHRcdFx0dGhpcy5fY2hpbGRzID0geyBbcm9vdF06IFtdIH07XG5cdFx0fSBlbHNlIGlmICh0aGlzLl9jaGlsZHNbaWRdKSB7XG5cdFx0XHRjb25zdCBjaGlsZHMgPSBbLi4udGhpcy5fY2hpbGRzW2lkXV07XG5cdFx0XHRmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcykge1xuXHRcdFx0XHR0aGlzLnJlbW92ZShjaGlsZC5pZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGdldEluZGV4KGlkOiBJZCk6IG51bWJlciB7XG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnQoaWQpO1xuXHRcdGlmICghcGFyZW50IHx8ICF0aGlzLl9jaGlsZHNbcGFyZW50XSkge1xuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH1cblx0XHRyZXR1cm4gZmluZEluZGV4KHRoaXMuX2NoaWxkc1twYXJlbnRdLCBpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTtcblx0fVxuXHRzb3J0KHJ1bGU/OiBJU29ydE1vZGUpOiB2b2lkIHtcblx0XHRpZiAoIXJ1bGUpIHtcblx0XHRcdHRoaXMuX2NoaWxkcyA9IHt9O1xuXHRcdFx0Ly8gW2RpcnR5XVxuXHRcdFx0dGhpcy5fcGFyc2VfZGF0YShPYmplY3Qua2V5cyh0aGlzLl9wdWxsKS5tYXAoa2V5ID0+IHRoaXMuX3B1bGxba2V5XSkpO1xuXHRcdFx0aWYgKHRoaXMuX2ZpbHRlcnMpIHRoaXMuZmlsdGVyKHRoaXMuX2ZpbHRlcnMuZmlsdGVycywgdGhpcy5fZmlsdGVycy5jb25maWcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9jaGlsZHMpIHtcblx0XHRcdFx0dGhpcy5fc29ydC5zb3J0KHRoaXMuX2NoaWxkc1trZXldLCBydWxlKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9pbml0Q2hpbGRzICYmIE9iamVjdC5rZXlzKHRoaXMuX2luaXRDaGlsZHMpLmxlbmd0aCkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9pbml0Q2hpbGRzKSB7XG5cdFx0XHRcdFx0dGhpcy5fc29ydC5zb3J0KHRoaXMuX2luaXRDaGlsZHNba2V5XSwgcnVsZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmV2ZW50cy5maXJlKERhdGFFdmVudHMuY2hhbmdlKTtcblx0fVxuXHRmaWx0ZXIocnVsZT86IElGaWx0ZXJNb2RlIHwgSUZpbHRlckNvbXBsZXhNb2RlIHwgSUZpbHRlckNhbGxiYWNrLCBjb25maWc6IElUcmVlRmlsdGVyQ29uZmlnID0ge30pOiB2b2lkIHtcblx0XHRpZiAoIXJ1bGUpIHtcblx0XHRcdHRoaXMucmVzdG9yZU9yZGVyKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLl9pbml0Q2hpbGRzKSB7XG5cdFx0XHR0aGlzLl9pbml0Q2hpbGRzID0gdGhpcy5fY2hpbGRzO1xuXHRcdH1cblx0XHRjb25maWcudHlwZSA9IGNvbmZpZy50eXBlIHx8IFRyZWVGaWx0ZXJUeXBlLmFsbDtcblxuXHRcdHRoaXMuX2ZpbHRlcnMgPSB7XG5cdFx0XHRmaWx0ZXJzOiB7fSxcblx0XHRcdGNvbmZpZzogY29uZmlnLFxuXHRcdH07XG5cdFx0aWYgKHR5cGVvZiBydWxlICE9PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdGlmIChydWxlW1wiYnlcIl0pIHtcblx0XHRcdFx0dGhpcy5fZmlsdGVycy5maWx0ZXJzW3J1bGUuYnkgYXMgc3RyaW5nXSA9IHJ1bGU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGNvbXBhcmUgaW4gcnVsZSkge1xuXHRcdFx0XHRcdHRoaXMuX2ZpbHRlcnMuZmlsdGVyc1tjb21wYXJlXSA9IHJ1bGVbY29tcGFyZV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fZmlsdGVycy5maWx0ZXJzID0gcnVsZTtcblx0XHR9XG5cblx0XHRjb25zdCBuZXdDaGlsZHMgPSB7fTtcblx0XHR0aGlzLl9yZWN1cnNpdmVGaWx0ZXIodGhpcy5fZmlsdGVycy5maWx0ZXJzLCBjb25maWcsIHRoaXMuX3Jvb3QsIDAsIG5ld0NoaWxkcyk7XG5cblx0XHRPYmplY3Qua2V5cyhuZXdDaGlsZHMpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdGxldCBwYXJlbnRJZCA9IHRoaXMuZ2V0UGFyZW50KGtleSk7XG5cdFx0XHRsZXQgY3VycmVudCA9IHRoaXMuZ2V0SXRlbShrZXkpO1xuXHRcdFx0d2hpbGUgKHBhcmVudElkKSB7XG5cdFx0XHRcdGlmICghbmV3Q2hpbGRzW3BhcmVudElkXSkge1xuXHRcdFx0XHRcdG5ld0NoaWxkc1twYXJlbnRJZF0gPSBbXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50ICYmICFuZXdDaGlsZHNbcGFyZW50SWRdLmZpbmQoeCA9PiB4LmlkID09PSBjdXJyZW50LmlkKSkge1xuXHRcdFx0XHRcdG5ld0NoaWxkc1twYXJlbnRJZF0ucHVzaChjdXJyZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjdXJyZW50ID0gdGhpcy5nZXRJdGVtKHBhcmVudElkKTtcblx0XHRcdFx0cGFyZW50SWQgPSB0aGlzLmdldFBhcmVudChwYXJlbnRJZCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLl9jaGlsZHMgPSBuZXdDaGlsZHM7XG5cblx0XHR0aGlzLmV2ZW50cy5maXJlKERhdGFFdmVudHMuY2hhbmdlKTtcblx0fVxuXHRyZXN0b3JlT3JkZXIoKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuX2luaXRDaGlsZHMpIHtcblx0XHRcdHRoaXMuX2NoaWxkcyA9IHRoaXMuX2luaXRDaGlsZHM7XG5cdFx0XHR0aGlzLl9pbml0Q2hpbGRzID0gbnVsbDtcblx0XHR9XG5cblx0XHR0aGlzLmV2ZW50cy5maXJlKERhdGFFdmVudHMuY2hhbmdlKTtcblx0fVxuXHRjb3B5KGlkOiBJZCwgaW5kZXg6IG51bWJlciwgdGFyZ2V0PzogSURhdGFDb2xsZWN0aW9uIHwgSVRyZWVDb2xsZWN0aW9uLCB0YXJnZXRJZD86IElkKTogSWQ7XG5cdGNvcHkoaWQ6IElkW10sIGluZGV4OiBudW1iZXIsIHRhcmdldD86IElEYXRhQ29sbGVjdGlvbiB8IElUcmVlQ29sbGVjdGlvbiwgdGFyZ2V0SWQ/OiBJZCk6IElkW107XG5cdGNvcHkoXG5cdFx0aWQ6IElkIHwgSWRbXSxcblx0XHRpbmRleDogbnVtYmVyLFxuXHRcdHRhcmdldDogSURhdGFDb2xsZWN0aW9uIHwgSVRyZWVDb2xsZWN0aW9uID0gdGhpcyxcblx0XHR0YXJnZXRJZDogSWQgPSB0aGlzLl9yb290XG5cdCk6IElkIHwgSWRbXSB7XG5cdFx0aWYgKGlkIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdHJldHVybiBpZC5tYXAoKGVsZW1lbnRJZCwga2V5KSA9PiB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9jb3B5KGVsZW1lbnRJZCwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0SWQsIGtleSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2NvcHkoaWQsIGluZGV4LCB0YXJnZXQsIHRhcmdldElkKTtcblx0XHR9XG5cdH1cblx0bW92ZShpZDogSWQsIGluZGV4OiBudW1iZXIsIHRhcmdldD86IElUcmVlQ29sbGVjdGlvbiB8IElEYXRhQ29sbGVjdGlvbiwgdGFyZ2V0SWQ/OiBJZCk6IElkO1xuXHRtb3ZlKGlkOiBJZFtdLCBpbmRleDogbnVtYmVyLCB0YXJnZXQ/OiBJVHJlZUNvbGxlY3Rpb24gfCBJRGF0YUNvbGxlY3Rpb24sIHRhcmdldElkPzogSWQpOiBJZFtdO1xuXHRtb3ZlKFxuXHRcdGlkOiBJZCB8IElkW10sXG5cdFx0aW5kZXg6IG51bWJlcixcblx0XHR0YXJnZXQ6IElUcmVlQ29sbGVjdGlvbiB8IElEYXRhQ29sbGVjdGlvbiA9IHRoaXMsXG5cdFx0dGFyZ2V0SWQ6IElkID0gdGhpcy5fcm9vdFxuXHQpOiBJZCB8IElkW10ge1xuXHRcdGlmIChpZCBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRyZXR1cm4gaWQubWFwKChlbGVtZW50SWQsIGtleSkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fbW92ZShlbGVtZW50SWQsIGluZGV4LCB0YXJnZXQsIHRhcmdldElkLCBrZXkpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLl9tb3ZlKGlkLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRJZCk7XG5cdFx0fVxuXHR9XG5cdGZvckVhY2goY2FsbGJhY2s6IERhdGFDYWxsYmFjazxhbnk+LCBwYXJlbnQ6IElkID0gdGhpcy5fcm9vdCwgbGV2ZWwgPSBJbmZpbml0eSk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5oYXZlSXRlbXMocGFyZW50KSB8fCBsZXZlbCA8IDEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgYXJyYXkgPSB0aGlzLl9jaGlsZHNbcGFyZW50XTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjYWxsYmFjay5jYWxsKHRoaXMsIGFycmF5W2ldLCBpLCBhcnJheSk7XG5cdFx0XHRpZiAodGhpcy5oYXZlSXRlbXMoYXJyYXlbaV0uaWQpKSB7XG5cdFx0XHRcdHRoaXMuZm9yRWFjaChjYWxsYmFjaywgYXJyYXlbaV0uaWQsIC0tbGV2ZWwpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRlYWNoQ2hpbGQoXG5cdFx0aWQ6IElkLFxuXHRcdGNhbGxiYWNrOiBEYXRhQ2FsbGJhY2s8VD4sXG5cdFx0ZGlyZWN0ID0gdHJ1ZSxcblx0XHRjaGVja0l0ZW06IChpdGVtOiBJRGF0YUl0ZW0pID0+IGJvb2xlYW4gPSAoKSA9PiB0cnVlXG5cdCk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5oYXZlSXRlbXMoaWQpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2hpbGRzW2lkXS5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2FsbGJhY2suY2FsbCh0aGlzLCB0aGlzLl9jaGlsZHNbaWRdW2ldLCBpKTtcblx0XHRcdGlmIChkaXJlY3QgJiYgY2hlY2tJdGVtKHRoaXMuX2NoaWxkc1tpZF1baV0pKSB7XG5cdFx0XHRcdHRoaXMuZWFjaENoaWxkKHRoaXMuX2NoaWxkc1tpZF1baV0uaWQsIGNhbGxiYWNrLCBkaXJlY3QsIGNoZWNrSXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGdldE5lYXJJZChpZDogSWQpOiBJZCB7XG5cdFx0cmV0dXJuIGlkOyAvLyBmb3Igc2VsZWN0aW9uXG5cdH1cblx0bG9hZEl0ZW1zKGlkOiBJZCwgZHJpdmVyOiBJRGF0YURyaXZlciB8IERhdGFEcml2ZXIgPSBEYXRhRHJpdmVyLmpzb24pOiB2b2lkIHtcblx0XHRjb25zdCB1cmwgPSB0aGlzLmNvbmZpZy5hdXRvbG9hZCArIFwiP2lkPVwiICsgaWQ7XG5cdFx0Y29uc3QgcHJveHkgPSBuZXcgRGF0YVByb3h5KHVybCk7XG5cdFx0cHJveHkubG9hZCgpLnRoZW4oZGF0YSA9PiB7XG5cdFx0XHRkcml2ZXIgPSB0b0RhdGFEcml2ZXIoZHJpdmVyKTtcblx0XHRcdGRhdGEgPSBkcml2ZXIudG9Kc29uQXJyYXkoZGF0YSkgYXMgYW55O1xuXHRcdFx0dGhpcy5fcGFyc2VfZGF0YShkYXRhLCBpZCk7XG5cblx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoRGF0YUV2ZW50cy5jaGFuZ2UpO1xuXHRcdH0pO1xuXHR9XG5cdHJlZnJlc2hJdGVtcyhpZDogSWQsIGRyaXZlcjogSURhdGFEcml2ZXIgfCBEYXRhRHJpdmVyID0gRGF0YURyaXZlci5qc29uKTogdm9pZCB7XG5cdFx0dGhpcy5yZW1vdmVBbGwoaWQpO1xuXHRcdHRoaXMubG9hZEl0ZW1zKGlkLCBkcml2ZXIpO1xuXHR9XG5cdGVhY2hQYXJlbnQoaWQ6IElkLCBjYWxsYmFjazogRGF0YUNhbGxiYWNrPFQ+LCBzZWxmID0gZmFsc2UpOiB2b2lkIHtcblx0XHRjb25zdCBpdGVtID0gdGhpcy5nZXRJdGVtKGlkKTtcblx0XHRpZiAoIWl0ZW0pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHNlbGYpIHtcblx0XHRcdGNhbGxiYWNrLmNhbGwodGhpcywgaXRlbSk7XG5cdFx0fVxuXHRcdGlmIChpdGVtLnBhcmVudCA9PT0gdGhpcy5fcm9vdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLmdldEl0ZW0oaXRlbS5wYXJlbnQpO1xuXHRcdGNhbGxiYWNrLmNhbGwodGhpcywgcGFyZW50KTtcblx0XHR0aGlzLmVhY2hQYXJlbnQoaXRlbS5wYXJlbnQsIGNhbGxiYWNrKTtcblx0fVxuXHRoYXZlSXRlbXMoaWQ6IElkKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIGlkIGluIHRoaXMuX2NoaWxkcztcblx0fVxuXHRjYW5Db3B5KGlkOiBJZCwgdGFyZ2V0OiBJZCk6IGJvb2xlYW4ge1xuXHRcdGlmIChpZCA9PT0gdGFyZ2V0KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGxldCBjYW5Db3B5ID0gdHJ1ZTtcblx0XHR0aGlzLmVhY2hQYXJlbnQodGFyZ2V0LCBpdGVtID0+IChpdGVtLmlkID09PSBpZCA/IChjYW5Db3B5ID0gZmFsc2UpIDogbnVsbCkpOyAvLyBsb2NhdGUgcmV0dXJuIHN0cmluZ1xuXHRcdHJldHVybiBjYW5Db3B5O1xuXHR9XG5cdHNlcmlhbGl6ZShkcml2ZXI6IERhdGFEcml2ZXIgPSBEYXRhRHJpdmVyLmpzb24sIGNoZWNrSXRlbT86IChpdGVtOiBhbnkpID0+IGFueSkge1xuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLl9zZXJpYWxpemUodGhpcy5fcm9vdCwgY2hlY2tJdGVtKTtcblx0XHRjb25zdCBkYXRhRHJpdmVyID0gdG9EYXRhRHJpdmVyKGRyaXZlcik7XG5cdFx0aWYgKGRhdGFEcml2ZXIpIHtcblx0XHRcdHJldHVybiBkYXRhRHJpdmVyLnNlcmlhbGl6ZShkYXRhKTtcblx0XHR9XG5cdH1cblx0Z2V0SWQoaW5kZXg6IG51bWJlciwgcGFyZW50OiBJZCA9IHRoaXMuX3Jvb3QpOiBJZCB7XG5cdFx0aWYgKCF0aGlzLl9jaGlsZHNbcGFyZW50XSB8fCAhdGhpcy5fY2hpbGRzW3BhcmVudF1baW5kZXhdKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9jaGlsZHNbcGFyZW50XVtpbmRleF0uaWQ7XG5cdH1cblx0Ly8gTm9uIHB1YmxpYyBBUEkgZnJvbSBzdWl0ZV82LjRcblx0bWFwKGNhbGxiYWNrOiBEYXRhQ2FsbGJhY2s8VD4sIHBhcmVudDogSWQgPSB0aGlzLl9yb290LCBkaXJlY3QgPSB0cnVlKTogYW55W10ge1xuXHRcdGxldCByZXN1bHQ6IGFueVtdID0gW107XG5cdFx0aWYgKCF0aGlzLmhhdmVJdGVtcyhwYXJlbnQpKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NoaWxkc1twYXJlbnRdLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRyZXN1bHQucHVzaChjYWxsYmFjay5jYWxsKHRoaXMsIHRoaXMuX2NoaWxkc1twYXJlbnRdW2ldLCBpLCB0aGlzLl9jaGlsZHMpKTtcblx0XHRcdGlmIChkaXJlY3QpIHtcblx0XHRcdFx0Y29uc3QgY2hpbGRSZXN1bHQgPSB0aGlzLm1hcChjYWxsYmFjaywgdGhpcy5fY2hpbGRzW3BhcmVudF1baV0uaWQsIGRpcmVjdCk7XG5cdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoY2hpbGRSZXN1bHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0Z2V0UmF3RGF0YShmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIsIG9yZGVyPzogVFtdLCBtb2RlPzogbnVtYmVyLCBwYXJlbnQ/OiBJZCk6IFRbXSB7XG5cdFx0cGFyZW50ID0gcGFyZW50IHx8IHRoaXMuX3Jvb3Q7XG5cdFx0bGV0IG91dDogVFtdO1xuXHRcdGlmICghdGhpcy5fY2hpbGRzW3BhcmVudF0pIHJldHVybiBbXTtcblx0XHRpZiAocGFyZW50ID09PSB0aGlzLl9yb290KSBvdXQgPSBzdXBlci5nZXRSYXdEYXRhKGZyb20sIHRvLCB0aGlzLl9jaGlsZHNbcGFyZW50XSk7XG5cdFx0ZWxzZSBvdXQgPSB0aGlzLl9jaGlsZHNbcGFyZW50XTtcblxuXHRcdGlmIChtb2RlID09PSAyKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5mbGF0dGVuKG91dCk7XG5cdFx0fVxuXHRcdHJldHVybiBvdXQ7XG5cdH1cblx0cHJvdGVjdGVkIGZsYXR0ZW4oaW5wdXQ6IFRbXSk6IFRbXSB7XG5cdFx0bGV0IG91dCA9IFtdO1xuXHRcdGlucHV0LmZvckVhY2goYSA9PiB7XG5cdFx0XHRvdXQucHVzaChhKTtcblx0XHRcdGNvbnN0IGtpZHMgPSB0aGlzLl9jaGlsZHNbYS5pZF07XG5cdFx0XHRpZiAoa2lkcyAmJiBhLiRvcGVuZWQpIHtcblx0XHRcdFx0b3V0ID0gb3V0LmNvbmNhdCh0aGlzLmZsYXR0ZW4oa2lkcykpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXHRwcm90ZWN0ZWQgX2FkZChuZXdJdGVtOiBJRGF0YUl0ZW0sIGluZGV4ID0gLTEsIHBhcmVudDogSWQgPSB0aGlzLl9yb290LCBrZXk/OiBudW1iZXIpOiBJZCB7XG5cdFx0bmV3SXRlbS5wYXJlbnQgPSBuZXdJdGVtLnBhcmVudCA/IG5ld0l0ZW0ucGFyZW50LnRvU3RyaW5nKCkgOiBwYXJlbnQ7XG5cdFx0aWYgKGtleSA+IDAgJiYgaW5kZXggIT09IC0xKSB7XG5cdFx0XHRpbmRleCA9IGluZGV4ICsgMTtcblx0XHR9XG5cdFx0Y29uc3QgaWQgPSBzdXBlci5fYWRkKG5ld0l0ZW0sIGluZGV4KTtcblxuXHRcdGlmIChBcnJheS5pc0FycmF5KG5ld0l0ZW0uaXRlbXMpKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGl0ZW0gb2YgbmV3SXRlbS5pdGVtcykge1xuXHRcdFx0XHR0aGlzLmFkZChpdGVtLCAtMSwgbmV3SXRlbS5pZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBpZDtcblx0fVxuXHRwcm90ZWN0ZWQgX2NvcHkoXG5cdFx0aWQ6IElkLFxuXHRcdGluZGV4OiBudW1iZXIsXG5cdFx0dGFyZ2V0OiBJRGF0YUNvbGxlY3Rpb24gfCBJVHJlZUNvbGxlY3Rpb24gPSB0aGlzLFxuXHRcdHRhcmdldElkOiBJZCA9IHRoaXMuX3Jvb3QsXG5cdFx0a2V5PzogbnVtYmVyXG5cdCk6IElkIHtcblx0XHRpZiAoIXRoaXMuZXhpc3RzKGlkKSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGNvbnN0IGN1cnJlbnRDaGlsZHMgPSB0aGlzLl9jaGlsZHNbaWRdO1xuXHRcdGlmIChrZXkpIHtcblx0XHRcdGluZGV4ID0gaW5kZXggPT09IC0xID8gLTEgOiBpbmRleCArIGtleTtcblx0XHR9XG5cdFx0aWYgKHRhcmdldCA9PT0gdGhpcyAmJiAhdGhpcy5jYW5Db3B5KGlkLCB0YXJnZXRJZCkpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRjb25zdCBpdGVtQ29weSA9IGNvcHlXaXRob3V0SW5uZXIodGhpcy5nZXRJdGVtKGlkKSwgeyBpdGVtczogdHJ1ZSB9KTtcblx0XHRpZiAodGFyZ2V0LmV4aXN0cyhpZCkpIHtcblx0XHRcdGl0ZW1Db3B5LmlkID0gdWlkKCk7XG5cdFx0fVxuXHRcdGlmICghaXNUcmVlQ29sbGVjdGlvbih0YXJnZXQpKSB7XG5cdFx0XHR0YXJnZXQuYWRkKGl0ZW1Db3B5LCBpbmRleCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICh0aGlzLmV4aXN0cyhpZCkpIHtcblx0XHRcdGl0ZW1Db3B5LnBhcmVudCA9IHRhcmdldElkO1xuXHRcdFx0aWYgKHRhcmdldCAhPT0gdGhpcyAmJiB0YXJnZXRJZCA9PT0gdGhpcy5fcm9vdCkge1xuXHRcdFx0XHRpdGVtQ29weS5wYXJlbnQgPSB0YXJnZXQuZ2V0Um9vdCgpO1xuXHRcdFx0fVxuXHRcdFx0dGFyZ2V0LmFkZChpdGVtQ29weSwgaW5kZXgpO1xuXHRcdFx0aWQgPSBpdGVtQ29weS5pZDtcblx0XHR9XG5cdFx0aWYgKGN1cnJlbnRDaGlsZHMpIHtcblx0XHRcdGZvciAoY29uc3QgY2hpbGQgb2YgY3VycmVudENoaWxkcykge1xuXHRcdFx0XHRjb25zdCBjaGlsZElkID0gY2hpbGQuaWQ7XG5cdFx0XHRcdGNvbnN0IGNoaWxkSW5kZXggPSB0aGlzLmdldEluZGV4KGNoaWxkSWQpO1xuXHRcdFx0XHRpZiAodHlwZW9mIGlkID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0dGhpcy5jb3B5KGNoaWxkSWQsIGNoaWxkSW5kZXgsIHRhcmdldCwgaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBpZDtcblx0fVxuXHRwcm90ZWN0ZWQgX21vdmUoXG5cdFx0aWQ6IElkLFxuXHRcdGluZGV4OiBudW1iZXIsXG5cdFx0dGFyZ2V0OiBJVHJlZUNvbGxlY3Rpb24gfCBJRGF0YUNvbGxlY3Rpb24gPSB0aGlzLFxuXHRcdHRhcmdldElkOiBJZCA9IHRoaXMuX3Jvb3QsXG5cdFx0a2V5PzogbnVtYmVyXG5cdCk6IElkIHtcblx0XHRpZiAoIXRoaXMuZXhpc3RzKGlkKSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGlmIChrZXkpIHtcblx0XHRcdGluZGV4ID0gaW5kZXggPT09IC0xID8gLTEgOiBpbmRleCArIGtleTtcblx0XHR9XG5cdFx0aWYgKHRhcmdldCAhPT0gdGhpcykge1xuXHRcdFx0aWYgKCFpc1RyZWVDb2xsZWN0aW9uKHRhcmdldCkpIHtcblx0XHRcdFx0Ly8gbW92ZSB0byBkYXRhY29sbGVjdGlvblxuXHRcdFx0XHR0YXJnZXQuYWRkKGNvcHlXaXRob3V0SW5uZXIodGhpcy5nZXRJdGVtKGlkKSksIGluZGV4KTtcblx0XHRcdFx0dGhpcy5yZW1vdmUoaWQpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCByZXR1cm5JZCA9IHRoaXMuY29weShpZCwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0SWQpO1xuXHRcdFx0dGhpcy5yZW1vdmUoaWQpO1xuXHRcdFx0cmV0dXJuIHJldHVybklkO1xuXHRcdH1cblx0XHQvLyBtb3ZlIGluc2lkZVxuXHRcdGlmICghdGhpcy5jYW5Db3B5KGlkLCB0YXJnZXRJZCkpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLmdldFBhcmVudChpZCk7XG5cdFx0Y29uc3QgcGFyZW50SW5kZXggPSB0aGlzLmdldEluZGV4KGlkKTtcblxuXHRcdC8vIGdldCBpdGVtIGZyb20gcGFyZW50IGFycmF5IGFuZCBtb3ZlIHRvIHRhcmdldCBhcnJheVxuXHRcdGNvbnN0IHNwbGljZWQgPSB0aGlzLl9jaGlsZHNbcGFyZW50XS5zcGxpY2UocGFyZW50SW5kZXgsIDEpWzBdO1xuXHRcdChzcGxpY2VkIGFzIElEYXRhSXRlbSkucGFyZW50ID0gdGFyZ2V0SWQ7IC8vIG5lZWQgZm9yIG5leHQgbW92aW5nLCAuLi4gbm90IGJlc3Qgc29sdXRpb24sIG1heSBiZSBmdWxsIG1ldGhvZCBmb3IgZ2V0IGl0ZW1cblxuXHRcdGlmICghdGhpcy5fY2hpbGRzW3BhcmVudF0ubGVuZ3RoKSB7XG5cdFx0XHRkZWxldGUgdGhpcy5fY2hpbGRzW3BhcmVudF07XG5cdFx0fVxuXHRcdGlmICghdGhpcy5oYXZlSXRlbXModGFyZ2V0SWQpKSB7XG5cdFx0XHR0aGlzLl9jaGlsZHNbdGFyZ2V0SWRdID0gW107XG5cdFx0fVxuXHRcdGlmIChpbmRleCA9PT0gLTEpIHtcblx0XHRcdGluZGV4ID0gdGhpcy5fY2hpbGRzW3RhcmdldElkXS5wdXNoKHNwbGljZWQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9jaGlsZHNbdGFyZ2V0SWRdLnNwbGljZShpbmRleCwgMCwgc3BsaWNlZCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5ldmVudHMuZmlyZShEYXRhRXZlbnRzLmNoYW5nZSwgW2lkLCBcInVwZGF0ZVwiLCB0aGlzLmdldEl0ZW0oaWQpXSk7XG5cblx0XHRyZXR1cm4gaWQ7XG5cdH1cblx0cHJvdGVjdGVkIF9yZXNldChpZD86IElkKSB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHRjb25zdCBjaGlsZHMgPSBbLi4udGhpcy5fY2hpbGRzW2lkXV07XG5cdFx0XHRmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcykge1xuXHRcdFx0XHR0aGlzLnJlbW92ZShjaGlsZC5pZCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN1cGVyLl9yZXNldCgpO1xuXHRcdFx0Y29uc3Qgcm9vdCA9IHRoaXMuX3Jvb3Q7XG5cdFx0XHR0aGlzLl9pbml0Q2hpbGRzID0gbnVsbDtcblx0XHRcdHRoaXMuX2NoaWxkcyA9IHsgW3Jvb3RdOiBbXSB9O1xuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgX3JlbW92ZUNvcmUoaWQpIHtcblx0XHRpZiAodGhpcy5fcHVsbFtpZF0pIHtcblx0XHRcdGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KGlkKTtcblx0XHRcdHRoaXMuX2NoaWxkc1twYXJlbnRdID0gdGhpcy5fY2hpbGRzW3BhcmVudF0uZmlsdGVyKGl0ZW0gPT4gaXRlbS5pZCAhPT0gaWQpO1xuXHRcdFx0aWYgKHBhcmVudCAhPT0gdGhpcy5fcm9vdCAmJiAhdGhpcy5fY2hpbGRzW3BhcmVudF0ubGVuZ3RoKSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLl9jaGlsZHNbcGFyZW50XTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9pbml0Q2hpbGRzICYmIHRoaXMuX2luaXRDaGlsZHNbcGFyZW50XSkge1xuXHRcdFx0XHR0aGlzLl9pbml0Q2hpbGRzW3BhcmVudF0gPSB0aGlzLl9pbml0Q2hpbGRzW3BhcmVudF0uZmlsdGVyKGl0ZW0gPT4gaXRlbS5pZCAhPT0gaWQpO1xuXHRcdFx0XHRpZiAocGFyZW50ICE9PSB0aGlzLl9yb290ICYmICF0aGlzLl9pbml0Q2hpbGRzW3BhcmVudF0ubGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2luaXRDaGlsZHNbcGFyZW50XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZmFzdERlbGV0ZUNoaWxkcyh0aGlzLl9jaGlsZHMsIGlkKTtcblx0XHRcdGlmICh0aGlzLl9pbml0Q2hpbGRzKSB7XG5cdFx0XHRcdHRoaXMuX2Zhc3REZWxldGVDaGlsZHModGhpcy5faW5pdENoaWxkcywgaWQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgX2FkZFRvT3JkZXIoX29yZGVyLCBvYmo6IGFueSwgaW5kZXg6IG51bWJlcik6IHZvaWQge1xuXHRcdGNvbnN0IGNoaWxkcyA9IHRoaXMuX2NoaWxkcztcblx0XHRjb25zdCBpbml0Q2hpbGRzID0gdGhpcy5faW5pdENoaWxkcztcblx0XHRjb25zdCBwYXJlbnQgPSBvYmoucGFyZW50O1xuXHRcdHRoaXMuX3B1bGxbb2JqLmlkXSA9IG9iajtcblxuXHRcdGlmIChcblx0XHRcdG9iai5wYXJlbnQgJiZcblx0XHRcdHRoaXMuX3B1bGxbb2JqLnBhcmVudF0gJiZcblx0XHRcdHRoaXMuX3B1bGxbb2JqLnBhcmVudF0uaXRlbXMgJiZcblx0XHRcdCF0aGlzLl9wdWxsW29iai5wYXJlbnRdLml0ZW1zLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBvYmouaWQpXG5cdFx0KSB7XG5cdFx0XHR0aGlzLl9wdWxsW29iai5wYXJlbnRdLml0ZW1zLnB1c2gob2JqKTtcblx0XHR9XG5cblx0XHRzdXBlci5fYWRkVG9PcmRlcihfb3JkZXIsIG9iaiwgaW5kZXgpO1xuXG5cdFx0YWRkVG9PcmRlcihjaGlsZHMsIG9iaiwgcGFyZW50LCBpbmRleCk7XG5cdFx0aWYgKGluaXRDaGlsZHMpIHtcblx0XHRcdGFkZFRvT3JkZXIoaW5pdENoaWxkcywgb2JqLCBwYXJlbnQsIGluZGV4KTtcblx0XHR9XG5cdH1cblx0cHJvdGVjdGVkIF9wYXJzZV9kYXRhKGRhdGE6IGFueSwgcGFyZW50ID0gdGhpcy5fcm9vdCkge1xuXHRcdGxldCBpbmRleCA9IHRoaXMuX29yZGVyLmxlbmd0aDtcblx0XHRmb3IgKGxldCBvYmogb2YgZGF0YSkge1xuXHRcdFx0aWYgKHRoaXMuY29uZmlnLmluaXQpIHtcblx0XHRcdFx0b2JqID0gdGhpcy5jb25maWcuaW5pdChvYmopO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9iaiAmJiB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdG9iaiA9IHtcblx0XHRcdFx0XHR2YWx1ZTogb2JqLFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRvYmouaWQgPSBvYmouaWQgPz8gdWlkKCk7XG5cdFx0XHRvYmoucGFyZW50ID1cblx0XHRcdFx0dHlwZW9mIG9iai5wYXJlbnQgPT09IFwidW5kZWZpbmVkXCIgfHwgb2JqLnBhcmVudCA9PT0gbnVsbCB8fCAob2JqLnBhcmVudCAmJiBvYmouJGl0ZW1zKVxuXHRcdFx0XHRcdD8gcGFyZW50XG5cdFx0XHRcdFx0OiBvYmoucGFyZW50O1xuXG5cdFx0XHRpZiAodGhpcy5fcHVsbFtvYmouaWRdKSB7XG5cdFx0XHRcdGRoeEVycm9yKGBJdGVtICR7b2JqLmlkfSBhbHJlYWR5IGV4aXN0YCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3B1bGxbb2JqLmlkXSA9IG9iajtcblx0XHRcdHRoaXMuX29yZGVyW2luZGV4KytdID0gb2JqO1xuXHRcdFx0aWYgKCF0aGlzLl9jaGlsZHNbb2JqLnBhcmVudF0pIHtcblx0XHRcdFx0dGhpcy5fY2hpbGRzW29iai5wYXJlbnRdID0gW107XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9jaGlsZHNbb2JqLnBhcmVudF0ucHVzaChvYmopO1xuXHRcdFx0aWYgKG9iai5pdGVtcyAmJiBvYmouaXRlbXMgaW5zdGFuY2VvZiBPYmplY3QpIHtcblx0XHRcdFx0dGhpcy5fcGFyc2VfZGF0YShvYmouaXRlbXMsIG9iai5pZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX2Zhc3REZWxldGVDaGlsZHModGFyZ2V0LCBpZDogSWQpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5fcHVsbFtpZF0pIHtcblx0XHRcdGRlbGV0ZSB0aGlzLl9wdWxsW2lkXTtcblx0XHR9XG5cdFx0aWYgKCF0YXJnZXRbaWRdKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0W2lkXS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5fZmFzdERlbGV0ZUNoaWxkcyh0YXJnZXQsIHRhcmdldFtpZF1baV0uaWQpO1xuXHRcdH1cblx0XHRkZWxldGUgdGFyZ2V0W2lkXTtcblx0fVxuXHRwcml2YXRlIF9yZWN1cnNpdmVGaWx0ZXIoXG5cdFx0cnVsZTogSUZpbHRlckNvbXBsZXhNb2RlIHwgSUZpbHRlckNhbGxiYWNrLFxuXHRcdGNvbmZpZzogSVRyZWVGaWx0ZXJDb25maWcsXG5cdFx0Y3VycmVudDogSWQsXG5cdFx0bGV2ZWw6IG51bWJlcixcblx0XHRuZXdDaGlsZHM6IElBbnlPYmpcblx0KTogdm9pZCB7XG5cdFx0Y29uc3QgY2hpbGRzID0gdGhpcy5fY2hpbGRzW2N1cnJlbnRdO1xuXHRcdGlmICghY2hpbGRzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IGNvbmRpdGlvbiA9IChpdGVtOiBUKTogYm9vbGVhbiA9PiB7XG5cdFx0XHRzd2l0Y2ggKGNvbmZpZy50eXBlKSB7XG5cdFx0XHRcdGNhc2UgVHJlZUZpbHRlclR5cGUuYWxsOiB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSBUcmVlRmlsdGVyVHlwZS5sZXZlbDoge1xuXHRcdFx0XHRcdHJldHVybiBsZXZlbCA9PT0gY29uZmlnLmxldmVsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNhc2UgVHJlZUZpbHRlclR5cGUubGVhZnM6IHtcblx0XHRcdFx0XHRyZXR1cm4gIXRoaXMuaGF2ZUl0ZW1zKGl0ZW0uaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRpZiAodHlwZW9mIHJ1bGUgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0Y29uc3QgY3VzdG9tUnVsZSA9IChpdGVtOiBUKSA9PiBjb25kaXRpb24oaXRlbSkgJiYgcnVsZShpdGVtKTtcblx0XHRcdGNvbnN0IGZpbHRlcmVkID0gY2hpbGRzLmZpbHRlcihjdXN0b21SdWxlKTtcblx0XHRcdGlmIChmaWx0ZXJlZC5sZW5ndGgpIHtcblx0XHRcdFx0bmV3Q2hpbGRzW2N1cnJlbnRdID0gZmlsdGVyZWQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGN1c3RvbVJ1bGUgPSAoaXRlbTogVCkgPT4ge1xuXHRcdFx0XHRsZXQgcmVzcG9uc2VPZlJ1bGUgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKGNvbnN0IGNvbXBhcmUgaW4gcnVsZSkge1xuXHRcdFx0XHRcdGlmIChydWxlW2NvbXBhcmVdLmJ5ICYmIHJ1bGVbY29tcGFyZV0ubWF0Y2ggIT09IFwiXCIpIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlT2ZSdWxlID1cblx0XHRcdFx0XHRcdFx0aXRlbVtydWxlW2NvbXBhcmVdLmJ5XSAmJlxuXHRcdFx0XHRcdFx0XHRpdGVtW3J1bGVbY29tcGFyZV0uYnldXG5cdFx0XHRcdFx0XHRcdFx0LnRvU3RyaW5nKClcblx0XHRcdFx0XHRcdFx0XHQudG9Mb2NhbGVMb3dlckNhc2UoKVxuXHRcdFx0XHRcdFx0XHRcdC5pbmRleE9mKHJ1bGVbY29tcGFyZV0ubWF0Y2gudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghcmVzcG9uc2VPZlJ1bGUpIGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBjb25kaXRpb24oaXRlbSkgJiYgcmVzcG9uc2VPZlJ1bGU7XG5cdFx0XHR9O1xuXHRcdFx0Y29uc3QgZmlsdGVyZWQgPSBjaGlsZHMuZmlsdGVyKGN1c3RvbVJ1bGUpO1xuXHRcdFx0aWYgKGZpbHRlcmVkLmxlbmd0aCkge1xuXHRcdFx0XHRuZXdDaGlsZHNbY3VycmVudF0gPSBmaWx0ZXJlZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHMpIHtcblx0XHRcdHRoaXMuX3JlY3Vyc2l2ZUZpbHRlcihydWxlLCBjb25maWcsIGNoaWxkLmlkLCBsZXZlbCArIDEsIG5ld0NoaWxkcyk7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX3NlcmlhbGl6ZShwYXJlbnQgPSB0aGlzLl9yb290LCBmbj8pIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoXG5cdFx0XHRpdGVtID0+IHtcblx0XHRcdFx0bGV0IGl0ZW1Db3B5OiBhbnkgPSB7fTtcblx0XHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gaXRlbSkge1xuXHRcdFx0XHRcdGlmIChrZXkgPT09IFwicGFyZW50XCIgfHwga2V5ID09PSBcIml0ZW1zXCIgfHwga2V5LnN0YXJ0c1dpdGgoXCIkXCIpKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aXRlbUNvcHlba2V5XSA9IGl0ZW1ba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZm4pIHtcblx0XHRcdFx0XHRpdGVtQ29weSA9IGZuKGl0ZW1Db3B5KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5oYXZlSXRlbXMoaXRlbS5pZCkpIHtcblx0XHRcdFx0XHRpdGVtQ29weS5pdGVtcyA9IHRoaXMuX3NlcmlhbGl6ZShpdGVtLmlkLCBmbik7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGl0ZW1Db3B5O1xuXHRcdFx0fSxcblx0XHRcdHBhcmVudCxcblx0XHRcdGZhbHNlXG5cdFx0KTtcblx0fVxufVxuIiwiaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgRGF0YUNvbGxlY3Rpb24gfSBmcm9tIFwiLi9kYXRhY29sbGVjdGlvblwiO1xuaW1wb3J0IHsgVHJlZUNvbGxlY3Rpb24gfSBmcm9tIFwiLi90cmVlY29sbGVjdGlvblwiO1xuaW1wb3J0IHsgYW55RnVuY3Rpb24sIElBbnlPYmosIElkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURhdGFQcm94eSB7XG5cdHVybDogc3RyaW5nO1xuXHRjb25maWc/OiBhbnk7XG5cdHVwZGF0ZVVybD86ICh1cmw/OiBzdHJpbmcsIHBhcmFtcz86IGFueSkgPT4gdm9pZDtcblx0bG9hZD86ICgpID0+IFByb21pc2U8YW55W10+O1xuXHRzYXZlPzogKGRhdGE6IGFueSwgbW9kZTogc3RyaW5nKSA9PiBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxhenlEYXRhUHJveHkgZXh0ZW5kcyBJRGF0YVByb3h5IHtcblx0Y29uZmlnOiBJTGF6eUNvbmZpZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTGF6eUNvbmZpZyB7XG5cdGZyb20/OiBudW1iZXI7XG5cdGxpbWl0PzogbnVtYmVyO1xuXHRkZWxheT86IG51bWJlcjtcblx0cHJlcGFyZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU29ydE1vZGUge1xuXHRieT86IHN0cmluZyB8IG51bWJlcjtcblx0ZGlyPzogc3RyaW5nO1xuXHRhcz86IChhOiBhbnkpID0+IGFueTtcblx0cnVsZT86IChhOiBhbnksIGI6IGFueSkgPT4gbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBJRmlsdGVyQ2FsbGJhY2sgPSAob2JqOiBhbnkpID0+IGJvb2xlYW47XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpbHRlck1vZGUge1xuXHRieT86IElkO1xuXHRtYXRjaD86IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW47XG5cdGNvbXBhcmU/OiAodmFsdWU6IGFueSwgbWF0Y2g6IGFueSwgb2JqOiBhbnksIG11bHRpPzogYm9vbGVhbikgPT4gYm9vbGVhbjtcblx0bXVsdGk/OiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpbHRlckNvbXBsZXhNb2RlIHtcblx0W2tleTogc3RyaW5nXTogSUZpbHRlck1vZGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpbHRlckNvbmZpZyB7XG5cdGFkZD86IGJvb2xlYW47XG5cdHNtYXJ0RmlsdGVyPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU29ydENvbmZpZyB7XG5cdHNtYXJ0U29ydGluZz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRyZWVGaWx0ZXJDb25maWcgZXh0ZW5kcyBJRmlsdGVyQ29uZmlnIHtcblx0dHlwZT86IFRyZWVGaWx0ZXJUeXBlO1xuXHRsZXZlbD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVXBkYXRlT2JqZWN0IHtcblx0W2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBcHByb3hpbWF0ZSB7XG5cdHZhbHVlOiBhbnk7XG5cdG1heE51bTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXRhQ29uZmlnIHtcblx0cHJlcD86IGFueUZ1bmN0aW9uO1xuXHRpbml0PzogYW55RnVuY3Rpb247XG5cdHVwZGF0ZT86IGFueUZ1bmN0aW9uO1xuXG5cdC8vIFRPRE86IFRyZWUgb25seVxuXHRhcHByb3hpbWF0ZT86IElBcHByb3hpbWF0ZTtcblx0Ly8gVE9ETzogVHJlZUNvbGxlY3Rpb25cblx0YXV0b2xvYWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXRhQ29sbGVjdGlvbjxUIGV4dGVuZHMgSURhdGFJdGVtID0gSURhdGFJdGVtPiB7XG5cdGNvbmZpZzogSURhdGFDb25maWc7IC8vIFRPRE86IG5vdCBmaW5hbFxuXHRldmVudHM6IElFdmVudFN5c3RlbTxEYXRhRXZlbnRzPjtcblx0ZGF0YVByb3h5OiBJRGF0YVByb3h5O1xuXHRsb2FkRGF0YTogUHJvbWlzZTxhbnk+O1xuXHRzYXZlRGF0YTogUHJvbWlzZTxhbnk+O1xuXG5cdGxvYWQodXJsOiBJRGF0YVByb3h5IHwgc3RyaW5nLCBkcml2ZXI/OiBJRGF0YURyaXZlciB8IERhdGFEcml2ZXIpOiBQcm9taXNlPGFueT47XG5cdHBhcnNlKGRhdGE6IFRbXSwgZHJpdmVyPzogRGF0YURyaXZlciB8IElEYXRhRHJpdmVyKTogdm9pZDtcblx0YWRkKG5ld0l0ZW06IElEYXRhSXRlbSwgaW5kZXg/OiBudW1iZXIpOiBJZDtcblx0YWRkKG5ld0l0ZW06IElEYXRhSXRlbVtdLCBpbmRleD86IG51bWJlcik6IElkW107XG5cdGFkZChuZXdJdGVtOiBJRGF0YUl0ZW0gfCBJRGF0YUl0ZW1bXSwgaW5kZXg/OiBudW1iZXIpOiBJZCB8IElkW107XG5cdHJlbW92ZShpZDogSWQgfCBJZFtdKTogdm9pZDtcblx0cmVtb3ZlQWxsKCk6IHZvaWQ7XG5cdHVwZGF0ZShpZDogSWQsIG5ld0l0ZW06IElVcGRhdGVPYmplY3QsIHNpbGVudD86IGJvb2xlYW4pOiB2b2lkO1xuXHRleGlzdHMoaWQ6IElkKTogYm9vbGVhbjtcblx0Z2V0SW5pdGlhbERhdGEoKTogVFtdO1xuXHRnZXRJdGVtKGlkOiBJZCk6IFQ7XG5cdGdldEluZGV4KGlkOiBJZCk6IG51bWJlcjtcblx0Z2V0TGVuZ3RoKCk6IG51bWJlcjtcblx0aXNEYXRhTG9hZGVkKGZyb20/OiBudW1iZXIsIHRvPzogbnVtYmVyKTogYm9vbGVhbjtcblx0Z2V0SWQoaW5kZXg6IG51bWJlcik6IElkO1xuXHRmaWx0ZXIocnVsZT86IElGaWx0ZXJNb2RlIHwgSUZpbHRlckNhbGxiYWNrLCBjb25maWc/OiBJRmlsdGVyQ29uZmlnKTogdm9pZDtcblx0ZmluZChydWxlOiBJRmlsdGVyTW9kZSk6IFQ7XG5cdHJlZHVjZTxBPihjYWxsYmFjazogUmVkdWNlQ2FsbEJhY2s8VCwgQT4sIGFjYzogQSk6IEE7XG5cdGZpbmRBbGwocnVsZTogSUZpbHRlck1vZGUpOiBUW107XG5cdG1hcChjYWxsYmFjazogRGF0YUNhbGxiYWNrPFQ+KTogVFtdO1xuXHRtYXBSYW5nZShmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIsIGNhbGxiYWNrOiBEYXRhQ2FsbGJhY2s8VD4pOiBUW107XG5cdHNvcnQocnVsZT86IElTb3J0TW9kZSwgY29uZmlnPzogSVNvcnRDb25maWcpOiB2b2lkO1xuXHRzZXJpYWxpemUoZHJpdmVyPzogRGF0YURyaXZlcik6IFRbXTtcblx0Y29weShpZDogSWQgfCBJZFtdLCBpbmRleDogbnVtYmVyLCB0YXJnZXQ/OiBJRGF0YUNvbGxlY3Rpb24gfCBJVHJlZUNvbGxlY3Rpb24sIHRhcmdldElkPzogSWQpOiBJZCB8IElkW107XG5cdG1vdmUoaWQ6IElkIHwgSWRbXSwgaW5kZXg6IG51bWJlciwgdGFyZ2V0PzogRGF0YUNvbGxlY3Rpb24gfCBUcmVlQ29sbGVjdGlvbiwgdGFyZ2V0SWQ/OiBJZCk6IElkIHwgSWRbXTtcblx0Y2hhbmdlSWQoaWQ6IElkLCBuZXdJZD86IElkLCBzaWxlbnQ/OiBib29sZWFuKTogdm9pZDtcblx0Zm9yRWFjaChjYWxsYmFjazogRGF0YUNhbGxiYWNrPFQ+KTogdm9pZDtcblx0c2F2ZSh1cmw6IElEYXRhUHJveHkgfCBzdHJpbmcpOiB2b2lkOyAvLyBQcm9taXNlPGFueT47XG5cdGlzU2F2ZWQoKTogYm9vbGVhbjtcblx0Z2V0UmF3RGF0YShmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIsIG9yZGVyPzogVFtdLCBtb2RlPzogbnVtYmVyKTogVFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXRhQ2hhbmdlU3RhY2sge1xuXHRvcmRlcjogSURhdGFDaGFuZ2VbXTtcbn1cblxuZXhwb3J0IHR5cGUgU3RhdHVzZXMgPSBcImFkZFwiIHwgXCJ1cGRhdGVcIiB8IFwicmVtb3ZlXCIgfCBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURhdGFDaGFuZ2Uge1xuXHRpZDogSWQ7XG5cdHN0YXR1czogU3RhdHVzZXM7XG5cdG9iajogYW55O1xuXHRzYXZpbmc6IGJvb2xlYW47XG5cdHByb21pc2U/OiBQcm9taXNlPGFueT47XG5cdHBlbmRpbmc/OiBib29sZWFuO1xuXHRlcnJvcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RTdGF0dXMgPSBcInNhdmluZ1wiIHwgXCJwZW5kaW5nXCIgfCBcImVycm9yXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURpciB7XG5cdFtrZXk6IHN0cmluZ106IGFueTtcblx0YXNjOiBudW1iZXI7XG5cdGRlc2M6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRGF0YURyaXZlciB7XG5cdHRvSnNvbkFycmF5KGRhdGE6IGFueSk6IGFueVtdO1xuXHRzZXJpYWxpemUoZGF0YTogSUFueU9ialtdKTogYW55O1xuXHRnZXRSb3dzKGRhdGE6IHN0cmluZyk6IGFueVtdO1xuXHRnZXRGaWVsZHMocm93OiBhbnkpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDc3ZEcml2ZXJDb25maWcge1xuXHRza2lwSGVhZGVyPzogbnVtYmVyO1xuXHRuYW1lQnlIZWFkZXI/OiBib29sZWFuO1xuXHRuYW1lcz86IHN0cmluZ1tdO1xuXHRyb3dEZWxpbWl0ZXI/OiBzdHJpbmc7XG5cdGNvbHVtbkRlbGltaXRlcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gVHJlZUZpbHRlclR5cGUge1xuXHRhbGwgPSBcImFsbFwiLFxuXHRsZXZlbCA9IFwibGV2ZWxcIixcblx0bGVhZnMgPSBcImxlYWZzXCIsXG59XG5cbmV4cG9ydCB0eXBlIERhdGFDYWxsYmFjazxUPiA9IChpdGVtOiBULCBpbmRleD86IG51bWJlciwgYXJyYXk/OiBUW10pID0+IGFueTtcblxuZXhwb3J0IHR5cGUgUmVkdWNlQ2FsbEJhY2s8VCwgQT4gPSAoYWNjOiBBLCBpdGVtOiBULCBpbmRleD86IG51bWJlcikgPT4gQTtcblxuZXhwb3J0IGludGVyZmFjZSBJVHJlZUNvbGxlY3Rpb248VCBleHRlbmRzIElEYXRhSXRlbSA9IElEYXRhSXRlbT4gZXh0ZW5kcyBJRGF0YUNvbGxlY3Rpb248VD4ge1xuXHRhZGQobmV3SXRlbTogSURhdGFJdGVtLCBpbmRleD86IG51bWJlciwgcGFyZW50PzogSWQpOiBJZDtcblx0YWRkKG5ld0l0ZW06IElEYXRhSXRlbVtdLCBpbmRleD86IG51bWJlciwgcGFyZW50PzogSWQpOiBJZFtdO1xuXHRhZGQobmV3SXRlbTogSURhdGFJdGVtIHwgSURhdGFJdGVtW10sIGluZGV4PzogbnVtYmVyLCBwYXJlbnQ/OiBJZCk6IElkIHwgSWRbXTtcblx0Z2V0Um9vdCgpOiBJZDtcblx0Z2V0UGFyZW50KGlkOiBJZCk6IElkO1xuXHRyZW1vdmVBbGwoaWQ/OiBJZCk6IHZvaWQ7XG5cdGdldExlbmd0aChpZD86IElkKTogbnVtYmVyO1xuXHRnZXRJbmRleChpZDogSWQpOiBudW1iZXI7XG5cdGdldEl0ZW1zKGlkOiBJZCk6IFRbXTtcblx0c29ydChydWxlPzogSVNvcnRNb2RlKTogdm9pZDtcblx0bWFwKGNhbGxiYWNrOiBEYXRhQ2FsbGJhY2s8VD4sIHBhcmVudD86IElkLCBkaXJlY3Q/OiBib29sZWFuKTogYW55O1xuXHRmaWx0ZXIocnVsZT86IElGaWx0ZXJNb2RlIHwgSUZpbHRlckNhbGxiYWNrLCBjb25maWc/OiBJVHJlZUZpbHRlckNvbmZpZyk6IHZvaWQ7XG5cdHJlc3RvcmVPcmRlcigpOiB2b2lkO1xuXHRjb3B5KGlkOiBJZCwgaW5kZXg6IG51bWJlciwgdGFyZ2V0PzogSURhdGFDb2xsZWN0aW9uIHwgSVRyZWVDb2xsZWN0aW9uLCB0YXJnZXRJZD86IElkKTogSWQ7XG5cdGNvcHkoaWQ6IElkW10sIGluZGV4OiBudW1iZXIsIHRhcmdldD86IElEYXRhQ29sbGVjdGlvbiB8IElUcmVlQ29sbGVjdGlvbiwgdGFyZ2V0SWQ/OiBJZCk6IElkW107XG5cdGNvcHkoaWQ6IElkIHwgSWRbXSwgaW5kZXg6IG51bWJlciwgdGFyZ2V0PzogSURhdGFDb2xsZWN0aW9uIHwgSVRyZWVDb2xsZWN0aW9uLCB0YXJnZXRJZD86IElkKTogSWQgfCBJZFtdO1xuXHRtb3ZlKGlkOiBJZCwgaW5kZXg6IG51bWJlciwgdGFyZ2V0PzogSVRyZWVDb2xsZWN0aW9uIHwgSURhdGFDb2xsZWN0aW9uLCB0YXJnZXRJZD86IElkKTogSWQ7XG5cdG1vdmUoaWQ6IElkW10sIGluZGV4OiBudW1iZXIsIHRhcmdldD86IElUcmVlQ29sbGVjdGlvbiB8IElEYXRhQ29sbGVjdGlvbiwgdGFyZ2V0SWQ/OiBJZCk6IElkW107XG5cdG1vdmUoaWQ6IElkIHwgSWRbXSwgaW5kZXg6IG51bWJlciwgdGFyZ2V0PzogSVRyZWVDb2xsZWN0aW9uIHwgSURhdGFDb2xsZWN0aW9uLCB0YXJnZXRJZD86IElkKTogSWQgfCBJZFtdO1xuXHRlYWNoQ2hpbGQoXG5cdFx0aWQ6IElkLFxuXHRcdGNhbGxiYWNrOiBEYXRhQ2FsbGJhY2s8VD4sXG5cdFx0ZGlyZWN0PzogYm9vbGVhbixcblx0XHRjaGVja0l0ZW0/OiAoaXRlbTogSURhdGFJdGVtKSA9PiBib29sZWFuXG5cdCk6IHZvaWQ7XG5cdGVhY2hQYXJlbnQoaWQ6IElkLCBjYWxsYmFjazogRGF0YUNhbGxiYWNrPFQ+LCBzZWxmPzogYm9vbGVhbik6IHZvaWQ7XG5cdGxvYWRJdGVtcyhpZDogSWQsIGRyaXZlcj86IElEYXRhRHJpdmVyIHwgRGF0YURyaXZlcik6IHZvaWQ7XG5cdHJlZnJlc2hJdGVtcyhpZDogSWQsIGRyaXZlcj86IElEYXRhRHJpdmVyIHwgRGF0YURyaXZlcik6IHZvaWQ7XG5cdGhhdmVJdGVtcyhpZDogSWQpOiBib29sZWFuO1xuXHRjYW5Db3B5KGlkOiBJZCwgdGFyZ2V0OiBJZCk6IGJvb2xlYW47XG5cdGZvckVhY2goY2FsbGJhY2s6IERhdGFDYWxsYmFjazxUPiwgcGFyZW50PzogSWQsIGxldmVsPzogbnVtYmVyKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRGF0YUl0ZW0ge1xuXHRpZD86IElkO1xuXHRba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCB0eXBlIERyb3BQb3NpdGlvbiA9IFwidG9wXCIgfCBcImJvdHRvbVwiIHwgXCJpblwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElPYmpXaXRoRGF0YSB7XG5cdGRhdGE6IFRyZWVDb2xsZWN0aW9uIHwgRGF0YUNvbGxlY3Rpb247XG5cdGV2ZW50czogSUV2ZW50U3lzdGVtPERyYWdFdmVudHMsIElEcmFnRXZlbnRzSGFuZGxlcnNNYXA+O1xuXHRjb25maWc6IElEcmFnQ29uZmlnO1xuXHRpZD86IElkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUcmFuc2ZlckRhdGEge1xuXHRpbml0WE9mZnNldD86IG51bWJlcjtcblx0aW5pdFlPZmZzZXQ/OiBudW1iZXI7XG5cdHg/OiBudW1iZXI7XG5cdHk/OiBudW1iZXI7XG5cdGdob3N0PzogSFRNTEVsZW1lbnQ7XG5cdGNvbXBvbmVudElkPzogSWQ7XG5cdGRyYWdDb25maWc/OiBJRHJhZ0NvbmZpZztcblx0Y29tcG9uZW50PzogSU9ialdpdGhEYXRhO1xuXHRkcm9wUG9zaXRpb24/OiBEcm9wUG9zaXRpb247XG5cdGRyb3BDb21wb25lbnRJZD86IElkO1xuXHRpdGVtPzogSFRNTEVsZW1lbnQ7XG5cdHN0YXJ0PzogSWQ7XG5cdHNvdXJjZT86IElkW107XG5cdHRhcmdldD86IElkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEcmFnQ29uZmlnIHtcblx0ZHJhZ0NvcHk/OiBib29sZWFuO1xuXHRkcm9wQmVoYXZpb3VyPzogRHJvcEJlaGF2aW91cjtcblx0ZHJhZ01vZGU/OiBEcmFnTW9kZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29weU9iamVjdCB7XG5cdGlkOiBJZDtcblx0Y29tcG9uZW50OiBJT2JqV2l0aERhdGE7XG59XG5cbmV4cG9ydCBlbnVtIERhdGFFdmVudHMge1xuXHRhZnRlckFkZCA9IFwiYWZ0ZXJhZGRcIixcblx0YmVmb3JlQWRkID0gXCJiZWZvcmVhZGRcIixcblx0cmVtb3ZlQWxsID0gXCJyZW1vdmVhbGxcIixcblx0YmVmb3JlUmVtb3ZlID0gXCJiZWZvcmVyZW1vdmVcIixcblx0YWZ0ZXJSZW1vdmUgPSBcImFmdGVycmVtb3ZlXCIsXG5cdGNoYW5nZSA9IFwiY2hhbmdlXCIsXG5cdGxvYWQgPSBcImxvYWRcIixcblx0bG9hZEVycm9yID0gXCJsb2FkZXJyb3JcIixcblx0YmVmb3JlTGF6eUxvYWQgPSBcImJlZm9yZWxhenlsb2FkXCIsXG5cdGFmdGVyTGF6eUxvYWQgPSBcImFmdGVybGF6eWxvYWRcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRGF0YUV2ZW50c0hhbmRsZXJzTWFwIHtcblx0W2tleTogc3RyaW5nXTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cdFtEYXRhRXZlbnRzLmNoYW5nZV06IChpZD86IElkLCBzdGF0dXM/OiBTdGF0dXNlcywgdXBkYXRlZEl0ZW0/OiBhbnkpID0+IHZvaWQ7XG5cdFtEYXRhRXZlbnRzLmFmdGVyQWRkXTogKG5ld0l0ZW06IGFueSkgPT4gdm9pZDtcblx0W0RhdGFFdmVudHMuYWZ0ZXJSZW1vdmVdOiAocmVtb3ZlZEl0ZW06IGFueSkgPT4gdm9pZDtcblx0W0RhdGFFdmVudHMuYmVmb3JlQWRkXTogKG5ld0l0ZW06IGFueSkgPT4gYm9vbGVhbiB8IHZvaWQ7XG5cdFtEYXRhRXZlbnRzLmJlZm9yZVJlbW92ZV06IChyZW1vdmVkSXRlbTogYW55KSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0RhdGFFdmVudHMubG9hZF06ICgpID0+IHZvaWQ7XG5cdFtEYXRhRXZlbnRzLnJlbW92ZUFsbF06ICgpID0+IHZvaWQ7XG5cdFtEYXRhRXZlbnRzLmxvYWRFcnJvcl06IChyZXNwb25zZTogYW55KSA9PiB2b2lkO1xuXHRbRGF0YUV2ZW50cy5iZWZvcmVMYXp5TG9hZF06ICgpID0+IGJvb2xlYW4gfCB2b2lkO1xuXHRbRGF0YUV2ZW50cy5hZnRlckxhenlMb2FkXTogKGZyb206IG51bWJlciwgY291bnQ6IG51bWJlcikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGVudW0gRHJhZ0V2ZW50cyB7XG5cdGJlZm9yZURyYWcgPSBcImJlZm9yZURyYWdcIixcblx0ZHJhZ1N0YXJ0ID0gXCJkcmFnU3RhcnRcIixcblx0ZHJhZ091dCA9IFwiZHJhZ091dFwiLFxuXHRkcmFnSW4gPSBcImRyYWdJblwiLFxuXHRjYW5Ecm9wID0gXCJjYW5Ecm9wXCIsXG5cdGNhbmNlbERyb3AgPSBcImNhbmNlbERyb3BcIixcblx0YmVmb3JlRHJvcCA9IFwiYmVmb3JlRHJvcFwiLFxuXHRhZnRlckRyb3AgPSBcImFmdGVyRHJvcFwiLFxuXHRhZnRlckRyYWcgPSBcImFmdGVyRHJhZ1wiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEcmFnSW5mbyB7XG5cdHN0YXJ0OiBJZDtcblx0c291cmNlOiBJZFtdO1xuXHR0YXJnZXQ6IElkO1xuXHRkcm9wUG9zaXRpb24/OiBEcm9wUG9zaXRpb247XG59XG5cbmV4cG9ydCB0eXBlIERyYWdNb2RlID0gXCJ0YXJnZXRcIiB8IFwiYm90aFwiIHwgXCJzb3VyY2VcIjtcblxuZXhwb3J0IHR5cGUgRHJvcEJlaGF2aW91ciA9IFwiY2hpbGRcIiB8IFwic2libGluZ1wiIHwgXCJjb21wbGV4XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURyYWdFdmVudHNIYW5kbGVyc01hcCB7XG5cdFtrZXk6IHN0cmluZ106ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuXHRbRHJhZ0V2ZW50cy5iZWZvcmVEcmFnXTogKGRhdGE6IElEcmFnSW5mbywgZXZlbnRzOiBNb3VzZUV2ZW50LCBnaG9zdDogSFRNTEVsZW1lbnQpID0+IHZvaWQgfCBib29sZWFuO1xuXHRbRHJhZ0V2ZW50cy5kcmFnU3RhcnRdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtEcmFnRXZlbnRzLmRyYWdPdXRdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtEcmFnRXZlbnRzLmRyYWdJbl06IChkYXRhOiBJRHJhZ0luZm8sIGV2ZW50czogTW91c2VFdmVudCkgPT4gdm9pZCB8IGJvb2xlYW47XG5cdFtEcmFnRXZlbnRzLmNhbkRyb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtEcmFnRXZlbnRzLmNhbmNlbERyb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtEcmFnRXZlbnRzLmJlZm9yZURyb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQgfCBib29sZWFuO1xuXHRbRHJhZ0V2ZW50cy5hZnRlckRyb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IGFueTtcblx0W0RyYWdFdmVudHMuYWZ0ZXJEcmFnXTogKGRhdGE6IElEcmFnSW5mbywgZXZlbnRzOiBNb3VzZUV2ZW50KSA9PiBhbnk7XG59XG5cbmV4cG9ydCBlbnVtIERhdGFEcml2ZXIge1xuXHRqc29uID0gXCJqc29uXCIsXG5cdGNzdiA9IFwiY3N2XCIsXG5cdHhtbCA9IFwieG1sXCIsXG59XG5cbmV4cG9ydCB0eXBlIEFqYXhSZXNwb25zZVR5cGUgPSBcImpzb25cIiB8IFwieG1sXCIgfCBcInRleHRcIiB8IFwicmF3XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFqYXhIZWxwZXJDb25maWcge1xuXHRoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuXHRyZXNwb25zZVR5cGU6IEFqYXhSZXNwb25zZVR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFqYXhIZWxwZXIge1xuXHRnZXQ8VD4oXG5cdFx0dXJsOiBzdHJpbmcsXG5cdFx0ZGF0YT86IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBzdHJpbmcsXG5cdFx0Y29uZmlnPzogUGFydGlhbDxJQWpheEhlbHBlckNvbmZpZz5cblx0KTogUHJvbWlzZTxUPjtcblx0cG9zdDxUPihcblx0XHR1cmw6IHN0cmluZyxcblx0XHRkYXRhPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IHN0cmluZyxcblx0XHRjb25maWc/OiBQYXJ0aWFsPElBamF4SGVscGVyQ29uZmlnPlxuXHQpOiBQcm9taXNlPFQ+O1xuXHRwdXQ8VD4oXG5cdFx0dXJsOiBzdHJpbmcsXG5cdFx0ZGF0YT86IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBzdHJpbmcsXG5cdFx0Y29uZmlnPzogUGFydGlhbDxJQWpheEhlbHBlckNvbmZpZz5cblx0KTogUHJvbWlzZTxUPjtcblx0ZGVsZXRlPFQ+KFxuXHRcdHVybDogc3RyaW5nLFxuXHRcdGRhdGE/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgc3RyaW5nLFxuXHRcdGNvbmZpZz86IFBhcnRpYWw8SUFqYXhIZWxwZXJDb25maWc+XG5cdCk6IFByb21pc2U8VD47XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL0dyaWRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvUHJvR3JpZFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy90eXBlc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9oZWxwZXJzL2NlbGxzXCI7XG5leHBvcnQgeyBnZXRUcmVlQ2VsbCB9IGZyb20gXCIuL3NvdXJjZXMvdWkvQ2VsbHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvaGVscGVycy9kYXRhXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL2hlbHBlcnMvbWFpblwiO1xuIiwiaW1wb3J0IHsgZ2V0U3R5bGVCeUNsYXNzLCByZW1vdmVIVE1MVGFncywgdHJhbnNwb3NlIH0gZnJvbSBcIi4vaGVscGVycy9tYWluXCI7XG5pbXBvcnQgeyBJQ3N2RXhwb3J0Q29uZmlnLCBJR3JpZCwgSVhsc3hFeHBvcnRDb25maWcgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgQ3N2RHJpdmVyLCBUcmVlQ29sbGVjdGlvbiB9IGZyb20gXCJAZGh4L3RzLWRhdGFcIjtcbmltcG9ydCB7IGRvd25sb2FkRmlsZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5cbmZ1bmN0aW9uIGZpbGxBcnJheShhcnI6IGFueVtdLCB2YWx1ZTogYW55KTogYW55W10ge1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHRcdGFycltpXSA9IHZhbHVlO1xuXHR9XG5cdHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBjbGFzcyBFeHBvcnRlciB7XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgX3ZpZXc6IElHcmlkKSB7fVxuXG5cdHhsc3goY29uZmlnPzogSVhsc3hFeHBvcnRDb25maWcpIHtcblx0XHRyZXR1cm4gdGhpcy5fZXhwb3J0KGNvbmZpZyk7XG5cdH1cblx0Y3N2KGNvbmZpZzogSUNzdkV4cG9ydENvbmZpZyA9IHt9KSB7XG5cdFx0Y29uZmlnID0ge1xuXHRcdFx0Li4ue1xuXHRcdFx0XHRhc0ZpbGU6IHRydWUsXG5cdFx0XHRcdHJvd0RlbGltaXRlcjogXCJcXG5cIixcblx0XHRcdFx0Y29sdW1uRGVsaW1pdGVyOiBcIixcIixcblx0XHRcdFx0c2tpcEhlYWRlcjogMCxcblx0XHRcdH0sXG5cdFx0XHQuLi5jb25maWcsXG5cdFx0fTtcblx0XHRsZXQgY3N2OiBzdHJpbmc7XG5cdFx0aWYgKFwiZ2V0Um9vdFwiIGluIHRoaXMuX3ZpZXcuZGF0YSAmJiBjb25maWcuZmxhdCkge1xuXHRcdFx0Y3N2ID0gdGhpcy5nZXRGbGF0Q1NWKGNvbmZpZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNzdiA9IHRoaXMuX2dldENTVihjb25maWcpO1xuXHRcdH1cblx0XHRjb25zdCBuYW1lID0gY29uZmlnLm5hbWUgfHwgXCJncmlkX2V4cG9ydFwiO1xuXG5cdFx0aWYgKGNvbmZpZy5hc0ZpbGUpIHtcblx0XHRcdGRvd25sb2FkRmlsZShjc3YsIGAke25hbWV9LmNzdmAsIFwidGV4dC9jc3ZcIik7XG5cdFx0fVxuXHRcdHJldHVybiBjc3Y7XG5cdH1cblx0cHJpdmF0ZSBfZXhwb3J0KGNvbmZpZzogSVhsc3hFeHBvcnRDb25maWcgPSB7fSkge1xuXHRcdGNvbnN0IGNvbmZpZ0NvbHMgPSB0aGlzLl92aWV3LmNvbmZpZy5jb2x1bW5zLmZpbHRlcihpID0+ICFpLmhpZGRlbik7XG5cdFx0Y29uc3Qgcm93c0luZGV4TWFwID0ge307XG5cdFx0Y29uc3QgaGVhZGVycyA9IHRyYW5zcG9zZShjb25maWdDb2xzLm1hcChjb2wgPT4gY29sLmhlYWRlci5tYXAobGV2ZWwgPT4gbGV2ZWwudGV4dCB8fCBcIiBcIikpKTtcblxuXHRcdGNvbnN0IGNvbHVtbnMgPSBbXTtcblx0XHRjb25zdCB1bmlxU3R5bGVzID0ge1xuXHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHRjb2xvcjogXCIjMDAwMDAwXCIsXG5cdFx0XHRcdGJhY2tncm91bmQ6IFwiI0ZGRkZGRlwiLFxuXHRcdFx0XHRmb250U2l6ZTogMTQsXG5cdFx0XHR9LFxuXHRcdH07XG5cdFx0Y29uc3QgY2VsbHMgPSBbXTtcblx0XHRjb25zdCBjb2x1bW5zSW5kZXhNYXAgPSB7fTtcblxuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLl92aWV3LmRhdGEuc2VyaWFsaXplKCkubWFwKChyb3csIGkpID0+IHtcblx0XHRcdHJvd3NJbmRleE1hcFtyb3cuaWRdID0gaTtcblx0XHRcdGNvbnN0IHJvd0RhdGEgPSBjb25maWdDb2xzLm1hcCgoY29sLCBrKSA9PiB7XG5cdFx0XHRcdGNvbHVtbnNJbmRleE1hcFtjb2wuaWRdID0gaztcblx0XHRcdFx0cmV0dXJuIHJlbW92ZUhUTUxUYWdzKHJvd1tjb2wuaWRdKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHJvd0RhdGE7XG5cdFx0fSk7XG5cdFx0Y29uc3QgZm9vdGVyID0gW107XG5cdFx0Y29uc3QgY29udGVudCA9IHRoaXMuX3ZpZXcuY29udGVudDtcblxuXHRcdGZvciAoY29uc3QgY29sIG9mIGNvbmZpZ0NvbHMpIHtcblx0XHRcdGlmIChjb2wuZm9vdGVyKSB7XG5cdFx0XHRcdGNvbnN0IGlkID0gY29sLmlkO1xuXHRcdFx0XHRjb25zdCBjb2x1bW5EYXRhID0gdGhpcy5fdmlldy5kYXRhLnNlcmlhbGl6ZSgpLnJlZHVjZSgoaXRlbXM6IGFueVtdLCBpdGVtKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGl0ZW1baWRdICE9PSB1bmRlZmluZWQgJiYgaXRlbVtpZF0gIT09IFwiXCIgJiYgIWlzTmFOKGl0ZW1baWRdKSkge1xuXHRcdFx0XHRcdFx0aXRlbXMucHVzaChwYXJzZUZsb2F0KGl0ZW1baWRdKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBpdGVtcztcblx0XHRcdFx0fSwgW10pO1xuXHRcdFx0XHRsZXQgcm9vdHMgPSBjb2x1bW5EYXRhO1xuXHRcdFx0XHRpZiAodGhpcy5fdmlldy5jb25maWcudHlwZSA9PT0gXCJ0cmVlXCIpIHtcblx0XHRcdFx0XHRjb25zdCBkYXRhY29sbGVjdGlvbiA9IHRoaXMuX3ZpZXcuZGF0YSBhcyBUcmVlQ29sbGVjdGlvbjtcblx0XHRcdFx0XHRjb25zdCBkYXRhID0gZGF0YWNvbGxlY3Rpb24uc2VyaWFsaXplKCk7XG5cdFx0XHRcdFx0cm9vdHMgPSBkYXRhLnJlZHVjZSgodG90YWwsIGl0ZW0pID0+IHtcblx0XHRcdFx0XHRcdGlmIChpdGVtLiRsZXZlbCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoaXRlbVtpZF0gIT09IHVuZGVmaW5lZCAmJiBpdGVtW2lkXSAhPT0gXCJcIiAmJiAhaXNOYU4oaXRlbVtpZF0pKSB7XG5cdFx0XHRcdFx0XHRcdFx0dG90YWwucHVzaChwYXJzZUZsb2F0KGl0ZW1baWRdKSB8fCAwKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRsZXQgdmFsdWUgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFjb2xsZWN0aW9uLmVhY2hDaGlsZChpdGVtLmlkLCBjZWxsID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICghZGF0YWNvbGxlY3Rpb24uaGF2ZUl0ZW1zKGNlbGwuaWQpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlICs9IHBhcnNlRmxvYXQoY2VsbFtpZF0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdHRvdGFsLnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gdG90YWw7XG5cdFx0XHRcdFx0fSwgW10pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGNvbC5mb290ZXJbMF0uY29udGVudCkge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGNvbnRlbnRbY29sLmZvb3RlclswXS5jb250ZW50XS5jYWxjdWxhdGUoY29sdW1uRGF0YSwgcm9vdHMpO1xuXHRcdFx0XHRcdGZvb3Rlci5wdXNoKHZhbCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm9vdGVyLnB1c2goY29sLmZvb3RlclswXS5jc3MgfHwgY29sLmZvb3RlclswXS50ZXh0IHx8IFwiIFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjb2x1bW5zLnB1c2goeyB3aWR0aDogY29sLndpZHRoIH0pO1xuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gY29sLiRjZWxsQ3NzKSB7XG5cdFx0XHRcdGNvbnN0IGNvbFN0eWxlID0gY29sLiRjZWxsQ3NzW2tleV07XG5cdFx0XHRcdGNvbnN0IGNvbFN0eWxlSGFzaCA9IGNvbFN0eWxlXG5cdFx0XHRcdFx0LnNwbGl0KFwiXCIpXG5cdFx0XHRcdFx0LnJlZHVjZSgoaCwgbGV0dGVyKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCBoaCA9IChoIDw8IDUpIC0gaCArIGxldHRlci5jaGFyQ29kZUF0KDApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIE1hdGguYWJzKGhoICYgaGgpO1xuXHRcdFx0XHRcdH0sIDApXG5cdFx0XHRcdFx0LnRvU3RyaW5nKCk7XG5cblx0XHRcdFx0aWYgKCF1bmlxU3R5bGVzW2NvbFN0eWxlSGFzaF0pIHtcblx0XHRcdFx0XHRjb25zdCBjb250ID0gZG9jdW1lbnQuYm9keTtcblx0XHRcdFx0XHRjb25zdCBjc3MgPSBnZXRTdHlsZUJ5Q2xhc3MoY29sU3R5bGUsIGNvbnQsIFwiZGh4X2dyaWQtcm93XCIsIHVuaXFTdHlsZXMuZGVmYXVsdCk7XG5cdFx0XHRcdFx0aWYgKGNzcykge1xuXHRcdFx0XHRcdFx0dW5pcVN0eWxlc1tjb2xTdHlsZUhhc2hdID0gY3NzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodW5pcVN0eWxlc1tjb2xTdHlsZUhhc2hdKSB7XG5cdFx0XHRcdFx0Y2VsbHMucHVzaChbcm93c0luZGV4TWFwW2tleV0sIGNvbmZpZ0NvbHMuaW5kZXhPZihjb2wpLCBjb2xTdHlsZUhhc2hdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoZm9vdGVyLmxlbmd0aCkge1xuXHRcdFx0ZGF0YS5wdXNoKGZvb3Rlcik7XG5cdFx0fVxuXHRcdGNvbnN0IGV4cG9ydERhdGEgPSB7XG5cdFx0XHRuYW1lOiBjb25maWcubmFtZSB8fCBcImRhdGFcIixcblx0XHRcdGNvbHVtbnMsXG5cdFx0XHRoZWFkZXI6IGhlYWRlcnMsXG5cdFx0XHRkYXRhLFxuXHRcdFx0c3R5bGVzOiB7XG5cdFx0XHRcdGNlbGxzLFxuXHRcdFx0XHRjc3M6IHVuaXFTdHlsZXMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRpZiAoY29uZmlnLnVybCkge1xuXHRcdFx0Y29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuXHRcdFx0Zm9ybS5zZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIiwgXCJfYmxhbmtcIik7XG5cdFx0XHRmb3JtLnNldEF0dHJpYnV0ZShcImFjdGlvblwiLCBjb25maWcudXJsKTtcblx0XHRcdGZvcm0uc2V0QXR0cmlidXRlKFwibWV0aG9kXCIsIFwiUE9TVFwiKTtcblx0XHRcdGZvcm0uc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG5cblx0XHRcdGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcImRhdGFcIik7XG5cdFx0XHRpbnB1dC52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KGV4cG9ydERhdGEpO1xuXG5cdFx0XHRmb3JtLmFwcGVuZENoaWxkKGlucHV0KTtcblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cdFx0XHRmb3JtLnN1Ym1pdCgpO1xuXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3JtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZm9ybSk7XG5cdFx0XHR9LCAxMDApO1xuXHRcdH1cblx0XHRyZXR1cm4gZXhwb3J0RGF0YTtcblx0fVxuXHRwcml2YXRlIGdldEZsYXRDU1YoY29uZmlnOiBJQ3N2RXhwb3J0Q29uZmlnKSB7XG5cdFx0Y29uc3QgdHJlZURhdGE6IGFueSA9IHRoaXMuX3ZpZXcuZGF0YTtcblx0XHRjb25zdCByb290ID0gdHJlZURhdGEuZ2V0Um9vdCgpO1xuXHRcdGNvbnN0IGZpcnN0Q29sID0gdGhpcy5fdmlldy5jb25maWcuY29sdW1uc1swXTtcblxuXHRcdGNvbnN0IG1heExldmVsID0gdHJlZURhdGEuZ2V0TWF4TGV2ZWwoKTtcblxuXHRcdGNvbnN0IGdldFBhcmVudHNDaGFpbiA9IChpdGVtOiBhbnksIGRhdGE6IGFueSk6IHN0cmluZ1tdID0+IHtcblx0XHRcdGNvbnN0IHBhcmVudHMgPSBbXTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDw9IG1heExldmVsOyBpKyspIHtcblx0XHRcdFx0aWYgKGl0ZW0gJiYgaXRlbVtmaXJzdENvbC5pZF0pIHtcblx0XHRcdFx0XHRwYXJlbnRzW2l0ZW0uJGxldmVsXSA9IGl0ZW1bZmlyc3RDb2wuaWRdO1xuXHRcdFx0XHRcdGNvbnN0IHBhcmVudCA9IGRhdGEuZ2V0UGFyZW50KGl0ZW0uaWQsIHRydWUpO1xuXHRcdFx0XHRcdGlmIChwYXJlbnQgJiYgcGFyZW50LmlkKSB7XG5cdFx0XHRcdFx0XHRpdGVtID0gcGFyZW50O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpdGVtID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cGFyZW50c1tpXSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHBhcmVudHM7XG5cdFx0fTtcblxuXHRcdGxldCB0b3RhbCA9IFwiXCI7XG5cdFx0dHJlZURhdGEuZWFjaENoaWxkKHJvb3QsIGl0ZW0gPT4ge1xuXHRcdFx0Y29uc3QgcGFyZW50cyA9IGdldFBhcmVudHNDaGFpbihpdGVtLCB0cmVlRGF0YSkuam9pbihjb25maWcuY29sdW1uRGVsaW1pdGVyKTtcblxuXHRcdFx0dG90YWwgKz1cblx0XHRcdFx0cGFyZW50cyArXG5cdFx0XHRcdE9iamVjdC5rZXlzKGl0ZW0pLnJlZHVjZSgodmFsdWVzLCBrZXksIGkpID0+IHtcblx0XHRcdFx0XHRpZiAoa2V5ICE9PSBcImlkXCIgJiYga2V5ICE9PSBcInBhcmVudFwiICYmICFrZXkuc3RhcnRzV2l0aChcIiRcIikgJiYgaSAhPT0gMCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlcyArIGNvbmZpZy5jb2x1bW5EZWxpbWl0ZXIgKyAoaXRlbVtrZXldID09PSBudWxsID8gXCJcIiA6IGl0ZW1ba2V5XSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHRcdH0sIFwiXCIpO1xuXG5cdFx0XHR0b3RhbCArPSBjb25maWcucm93RGVsaW1pdGVyO1xuXHRcdH0pO1xuXG5cdFx0Y29uc3QgZXhwb3J0RGF0YSA9IHRoaXMuX2V4cG9ydChjb25maWcpO1xuXG5cdFx0Ly8gW2RpcnR5XVxuXHRcdGNvbnN0IGVtcHR5SGVhZGVycyA9IGZpbGxBcnJheShuZXcgQXJyYXkobWF4TGV2ZWwgKyAxKSwgXCJcIik7XG5cblx0XHRjb25zdCBoZWFkZXJzID0gZXhwb3J0RGF0YS5oZWFkZXIubWFwKGhlYWRlciA9PiB7XG5cdFx0XHRoZWFkZXIuc3BsaWNlKDAsIDEsIC4uLmVtcHR5SGVhZGVycyk7XG5cdFx0XHRyZXR1cm4gaGVhZGVyO1xuXHRcdH0pO1xuXG5cdFx0Y29uc3QgaGVhZCA9IG5ldyBDc3ZEcml2ZXIoY29uZmlnKS5zZXJpYWxpemUoaGVhZGVycywgdHJ1ZSkgKyBjb25maWcucm93RGVsaW1pdGVyO1xuXHRcdHJldHVybiBoZWFkICsgdG90YWw7XG5cdH1cblx0cHJpdmF0ZSBfZ2V0Q1NWKGNvbmZpZzogSUNzdkV4cG9ydENvbmZpZykge1xuXHRcdGNvbnN0IGV4cG9ydERhdGEgPSB0aGlzLl9leHBvcnQoY29uZmlnKTtcblx0XHRjb25zdCBoZWFkZXJzID0gZXhwb3J0RGF0YS5oZWFkZXI7XG5cblx0XHRjb25zdCBkcml2ZXIgPSBuZXcgQ3N2RHJpdmVyKGNvbmZpZyk7XG5cblx0XHRjb25zdCBoZWFkID0gZHJpdmVyLnNlcmlhbGl6ZShoZWFkZXJzLCB0cnVlKTtcblx0XHRjb25zdCByZWFkeURhdGEgPSBkcml2ZXIuc2VyaWFsaXplKGV4cG9ydERhdGEuZGF0YSwgdHJ1ZSk7XG5cblx0XHRyZXR1cm4gaGVhZCArIFwiXFxuXCIgKyByZWFkeURhdGE7XG5cdH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZSwgYXdhaXRSZWRyYXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBFdmVudFN5c3RlbSwgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgZXZlbnRIYW5kbGVyLCBsb2NhdGUsIGxvY2F0ZU5vZGUsIGxvY2F0ZU5vZGVCeUNsYXNzTmFtZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQge1xuXHRleHRlbmQsXG5cdGZpbmRJbmRleCxcblx0Z2V0TWF4QXJyYXlOeW1iZXIsXG5cdGdldE1pbkFycmF5TnltYmVyLFxuXHRpc0VtcHR5T2JqLFxuXHRpc0RlZmluZWQsXG59IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5pbXBvcnQgeyBJS2V5TWFuYWdlciwgS2V5TWFuYWdlciB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9LZXlNYW5hZ2VyXCI7XG5pbXBvcnQgeyBJZCwgSVRvdWNoUGFyYW0gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdmlld1wiO1xuaW1wb3J0IHtcblx0RGF0YUNvbGxlY3Rpb24sXG5cdERhdGFFdmVudHMsXG5cdGRoeFdhcm5pbmcsXG5cdERyYWdFdmVudHMsXG5cdGRyYWdNYW5hZ2VyLFxuXHRJRGF0YUNvbGxlY3Rpb24sXG5cdElEYXRhRXZlbnRzSGFuZGxlcnNNYXAsXG5cdElEYXRhSXRlbSxcblx0SURyYWdFdmVudHNIYW5kbGVyc01hcCxcbn0gZnJvbSBcIkBkaHgvdHMtZGF0YVwiO1xuaW1wb3J0IHsgRXhwb3J0ZXIgfSBmcm9tIFwiLi9FeHBvcnRlclwiO1xuaW1wb3J0IHsgY291bnRDb2x1bW5zLCBnZXRNYXhDb2xzV2lkdGgsIGdldFVuaXF1ZSwgbm9ybWFsaXplQ29sdW1ucywgdG9Gb3JtYXQgfSBmcm9tIFwiLi9oZWxwZXJzL2RhdGFcIjtcbmltcG9ydCB7IGdldFdpZHRoLCBnZXRIZWlnaHQgfSBmcm9tIFwiLi9oZWxwZXJzL2NlbGxzXCI7XG5pbXBvcnQge1xuXHRpc1Jvd0VtcHR5LFxuXHRpc1NvcnRhYmxlLFxuXHRnZXRUb3RhbFdpZHRoLFxuXHRpc1Rvb2x0aXAsXG5cdGlzSHRtbEVuYWJsZSxcblx0Z2V0VG90YWxIZWlnaHQsXG59IGZyb20gXCIuL2hlbHBlcnMvbWFpblwiO1xuaW1wb3J0IHsgU2VsZWN0aW9uIH0gZnJvbSBcIi4vU2VsZWN0aW9uXCI7XG5pbXBvcnQge1xuXHREaXJzLFxuXHRFZGl0b3JUeXBlLFxuXHRHcmlkRXZlbnRzLFxuXHRJQWRqdXN0QnksXG5cdElDZWxsUmVjdCxcblx0SUNvbCxcblx0SUNvbnRlbnRMaXN0LFxuXHRJQ29vcmRzLFxuXHRJRXZlbnRIYW5kbGVyc01hcCxcblx0SUdyaWQsXG5cdElHcmlkQ29uZmlnLFxuXHRJUm93LFxuXHRJU2Nyb2xsU3RhdGUsXG5cdElTZWxlY3Rpb24sXG5cdElTcGFuLFxuXHRHcmlkU3lzdGVtRXZlbnRzLFxuXHRJU3lzdGVtRXZlbnRIYW5kbGVyc01hcCxcblx0SUNvbHVtbnNXaWR0aCxcblx0SVNvcnRpbmdTdGF0ZSxcblx0U29ydEZ1bmN0aW9uLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vdWkvcmVuZGVyXCI7XG5pbXBvcnQgeyBzdHJpbmdUb0RhdGUgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZGF0ZVwiO1xuaW1wb3J0IHsgZ2V0Q29udGVudCB9IGZyb20gXCIuL3VpL2NvbnRlbnRcIjtcbmltcG9ydCB7IHN0YXJ0UmVzaXplIH0gZnJvbSBcIi4vY29sdW1uc1Jlc2l6ZXJcIjtcbmltcG9ydCB7IHRvb2x0aXAgfSBmcm9tIFwiQGRoeC90cy1tZXNzYWdlXCI7XG5pbXBvcnQgeyBnZXRLZXlzSGFuZGxlcnMgfSBmcm9tIFwiLi9oZWxwZXJzL2tleXNcIjtcbmltcG9ydCB7IGZvY3VzTWFuYWdlciB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9Gb2N1c01hbmFnZXJcIjtcbmltcG9ydCB7IENvbWJvYm94IH0gZnJvbSBcIkBkaHgvdHMtY29tYm9ib3hcIjtcblxuZXhwb3J0IGNsYXNzIEdyaWQgZXh0ZW5kcyBWaWV3IGltcGxlbWVudHMgSUdyaWQge1xuXHRwdWJsaWMgZGF0YTogSURhdGFDb2xsZWN0aW9uO1xuXHRwdWJsaWMgY29uZmlnOiBJR3JpZENvbmZpZztcblx0cHVibGljIGV2ZW50czogSUV2ZW50U3lzdGVtPFxuXHRcdERhdGFFdmVudHMgfCBHcmlkRXZlbnRzIHwgRHJhZ0V2ZW50cyxcblx0XHRJRXZlbnRIYW5kbGVyc01hcCAmIElEYXRhRXZlbnRzSGFuZGxlcnNNYXAgJiBJRHJhZ0V2ZW50c0hhbmRsZXJzTWFwXG5cdD47XG5cdHB1YmxpYyBleHBvcnQ6IEV4cG9ydGVyO1xuXHRwdWJsaWMgY29udGVudDogSUNvbnRlbnRMaXN0O1xuXHRwdWJsaWMgc2VsZWN0aW9uOiBJU2VsZWN0aW9uO1xuXHRwdWJsaWMga2V5TWFuYWdlcjogSUtleU1hbmFnZXI7XG5cblx0cHJvdGVjdGVkIF90b3VjaDogSVRvdWNoUGFyYW0gPSB7XG5cdFx0ZHVyYXRpb246IDM1MCxcblx0XHRkYmxEdXJhdGlvbjogMzAwLFxuXHRcdHRpbWVyOiBudWxsLFxuXHRcdHN0YXJ0OiBmYWxzZSxcblx0XHR0aW1lU3RhbXA6IG51bGwsXG5cdH07XG5cblx0cHJvdGVjdGVkIF9zY3JvbGw6IElTY3JvbGxTdGF0ZTtcblx0cHJvdGVjdGVkIF9ldmVudHM6IElFdmVudFN5c3RlbTxHcmlkU3lzdGVtRXZlbnRzLCBJU3lzdGVtRXZlbnRIYW5kbGVyc01hcD47XG5cdHByb3RlY3RlZCBfaHRtbEV2ZW50czogYW55O1xuXHRwcml2YXRlIF9zb3J0RGlyOiBEaXJzO1xuXHRwcml2YXRlIF9zb3J0Qnk6IElkO1xuXHRwcml2YXRlIF9maWx0ZXJEYXRhOiBhbnlbXTtcblx0cHJvdGVjdGVkIF9hY3RpdmVGaWx0ZXJzOiB7fTtcblx0cHJpdmF0ZSBfaGlkZGVuRmlsdGVyczoge307XG5cblx0Y29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IHN0cmluZywgY29uZmlnPzogSUdyaWRDb25maWcpIHtcblx0XHRzdXBlcihjb250YWluZXIsIGNvbmZpZyk7XG5cdFx0dGhpcy5jb25maWcgPSBleHRlbmQoXG5cdFx0XHQoe1xuXHRcdFx0XHRyb3dIZWlnaHQ6IDQwLFxuXHRcdFx0XHRoZWFkZXJSb3dIZWlnaHQ6IDQwLFxuXHRcdFx0XHRmb290ZXJSb3dIZWlnaHQ6IDQwLFxuXHRcdFx0XHRrZXlOYXZpZ2F0aW9uOiB0cnVlLFxuXHRcdFx0XHQvLyBzZWxlY3Rpb246IFwiY2VsbFwiLCAvLyBUT0RPOiB0dXJuIGl0IG9uIHRvIHRlc3QgYXJpYSBhdHRycyBvbmx5IE9SIGZpeCBrZXluYXZpZ2F0aW9uIHRvIHdvcmsgd2l0aG91dCBzZWxlY3Rpb24gKG9yIHNwZWNpYWwgc2VsZWN0aW9uIG1vZGUgZW5hYmxlZCBieSBkZWZhdWx0KVxuXHRcdFx0XHRzb3J0YWJsZTogdHJ1ZSxcblx0XHRcdFx0Y29sdW1uczogW10sXG5cdFx0XHRcdGRhdGE6IFtdLFxuXHRcdFx0XHR0b29sdGlwOiB0cnVlLFxuXHRcdFx0XHRyb290UGFyZW50OiAodHlwZW9mIGNvbnRhaW5lciA9PT0gXCJzdHJpbmdcIiAmJiBjb250YWluZXIpIHx8IHRoaXMuX3VpZCxcblx0XHRcdFx0Ly8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdFx0XHRoZWFkZXJTb3J0OiB0cnVlLFxuXHRcdFx0fSBhcyBhbnkpIGFzIElHcmlkQ29uZmlnLFxuXHRcdFx0Y29uZmlnXG5cdFx0KTtcblxuXHRcdHRoaXMuY29udGVudCA9IGdldENvbnRlbnQoKTtcblx0XHR0aGlzLl9zY3JvbGwgPSB7XG5cdFx0XHR0b3A6IDAsXG5cdFx0XHRsZWZ0OiAwLFxuXHRcdH07XG5cblx0XHQvLyBUT0RPOiByZW1vdmUgc3VpdGVfNy4wXG5cdFx0dGhpcy5jb25maWcuYXV0b1dpZHRoID0gdGhpcy5jb25maWcuYXV0b1dpZHRoIHx8IHRoaXMuY29uZmlnLmZpdFRvQ29udGFpbmVyO1xuXHRcdHRoaXMuY29uZmlnLmFkanVzdCA9IHRoaXMuY29uZmlnLmFkanVzdCB8fCB0aGlzLmNvbmZpZy5jb2x1bW5zQXV0b1dpZHRoO1xuXHRcdHRoaXMuY29uZmlnLmVkaXRhYmxlID0gdGhpcy5jb25maWcuZWRpdGFibGUgfHwgdGhpcy5jb25maWcuZWRpdGluZztcblx0XHR0aGlzLmNvbmZpZy5sZWZ0U3BsaXQgPSB0aGlzLmNvbmZpZy5sZWZ0U3BsaXQgfHwgdGhpcy5jb25maWcuc3BsaXRBdDtcblx0XHRpZiAoIXRoaXMuY29uZmlnLnNvcnRhYmxlIHx8ICF0aGlzLmNvbmZpZy5oZWFkZXJTb3J0KSB7XG5cdFx0XHR0aGlzLmNvbmZpZy5zb3J0YWJsZSA9IGZhbHNlO1xuXHRcdH1cblx0XHR0aGlzLmNvbmZpZy5jb2x1bW5zLmZvckVhY2goY29sID0+IHtcblx0XHRcdGNvbC5mb3JtYXQgPSBjb2wuZm9ybWF0IHx8IGNvbC5kYXRlRm9ybWF0O1xuXHRcdH0pO1xuXG5cdFx0Y29uc3Qgc2hvd0NlbGxUb29sdGlwID0gKHJvdywgY29sdW1uLCBub2RlKSA9PiB7XG5cdFx0XHRpZiAocm93ICYmIGNvbHVtbiAmJiBpc1Rvb2x0aXAodGhpcy5jb25maWcsIGNvbHVtbikpIHtcblx0XHRcdFx0bGV0IHZhbHVlID0gdG9Gb3JtYXQocm93W2NvbHVtbi5pZF0sIGNvbHVtbi50eXBlLCBjb2x1bW4uZm9ybWF0KTtcblx0XHRcdFx0aWYgKGNvbHVtbi50b29sdGlwVGVtcGxhdGUpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNvbHVtbi50b29sdGlwVGVtcGxhdGUodmFsdWUsIHJvdywgY29sdW1uKTtcblx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSAmJiBjb2x1bW4udGVtcGxhdGUpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNvbHVtbi50ZW1wbGF0ZSh2YWx1ZSwgcm93LCBjb2x1bW4pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFsdWUgJiZcblx0XHRcdFx0XHR0b29sdGlwKHZhbHVlLCB7XG5cdFx0XHRcdFx0XHRjc3M6IFwiZGh4X2dyaWRfdG9vbHRpcFwiLFxuXHRcdFx0XHRcdFx0bm9kZSxcblx0XHRcdFx0XHRcdGh0bWxFbmFibGU6IGlzSHRtbEVuYWJsZSh0aGlzLmNvbmZpZywgY29sdW1uKSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2hvd0NvbnRlbnRUb290bGlwID0gKGUsIGNvbHVtbikgPT4ge1xuXHRcdFx0aWYgKGNvbHVtbiAmJiBpc1Rvb2x0aXAodGhpcy5jb25maWcsIGNvbHVtbikpIHtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPVxuXHRcdFx0XHRcdChlLnRhcmdldC5xdWVyeVNlbGVjdG9yKFwiLmRoeF9ncmlkLWhlYWRlci1jZWxsLXRleHQgc3BhblwiKSAmJlxuXHRcdFx0XHRcdFx0ZS50YXJnZXQucXVlcnlTZWxlY3RvcihcIi5kaHhfZ3JpZC1oZWFkZXItY2VsbC10ZXh0IHNwYW5cIikudGV4dENvbnRlbnQpIHx8XG5cdFx0XHRcdFx0KGUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIuZGh4X2dyaWQtZm9vdGVyLWNlbGwtdGV4dCBzcGFuXCIpICYmXG5cdFx0XHRcdFx0XHRlLnRhcmdldC5xdWVyeVNlbGVjdG9yKFwiLmRoeF9ncmlkLWZvb3Rlci1jZWxsLXRleHQgc3BhblwiKS50ZXh0Q29udGVudCkgfHxcblx0XHRcdFx0XHRcIlwiO1xuXHRcdFx0XHR2YWx1ZSAmJlxuXHRcdFx0XHRcdHRvb2x0aXAodmFsdWUsIHtcblx0XHRcdFx0XHRcdGNzczogXCJkaHhfZ3JpZF90b29sdGlwXCIsXG5cdFx0XHRcdFx0XHRub2RlOiBlLnRhcmdldCxcblx0XHRcdFx0XHRcdGh0bWxFbmFibGU6IGlzSHRtbEVuYWJsZSh0aGlzLmNvbmZpZywgY29sdW1uKSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5faHRtbEV2ZW50cyA9IHtcblx0XHRcdG9uY2xpY2s6IGV2ZW50SGFuZGxlcihlID0+IGxvY2F0ZShlKSwge1xuXHRcdFx0XHRcImRoeF9ncmlkLWhlYWRlci1jZWxsLS1zb3J0YWJsZVwiOiAoZSwgaWQpID0+IHtcblx0XHRcdFx0XHRjb25zdCBpc1Jlc2l6YWJsZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRoeF9yZXNpemVkXCIpO1xuXHRcdFx0XHRcdGNvbnN0IGNvbHVtbiA9IHRoaXMuX2dldENvbHVtbihpZCk7XG5cdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0Y29sdW1uICYmXG5cdFx0XHRcdFx0XHRpc1NvcnRhYmxlKHRoaXMuY29uZmlnLCBjb2x1bW4pICYmXG5cdFx0XHRcdFx0XHQhaXNSZXNpemFibGUgJiZcblx0XHRcdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5iZWZvcmVTb3J0LCBbY29sdW1uLCB0aGlzLl9zb3J0RGlyID8gXCJhc2NcIiA6IFwiZGVzY1wiXSlcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHRleHQgPSBsb2NhdGVOb2RlQnlDbGFzc05hbWUoZSwgXCJkaHhfZ3JpZC1oZWFkZXItY2VsbFwiKT8ucXVlcnlTZWxlY3Rvcihcblx0XHRcdFx0XHRcdFx0XCIuZGh4X2dyaWQtaGVhZGVyLWNlbGwtdGV4dF9jb250ZW50XCJcblx0XHRcdFx0XHRcdCkuaW5uZXJIVE1MO1xuXHRcdFx0XHRcdFx0Y29uc3QgY2VsbENvbmZpZyA9IHRleHQgPyBjb2x1bW4uaGVhZGVyLmZpbmQoaXRlbSA9PiBpdGVtLnRleHQgPT09IHRleHQpIDogbnVsbDtcblx0XHRcdFx0XHRcdGNvbnN0IGRpciA9IHRoaXMuX3NvcnREaXIgPT09IFwiYXNjXCIgPyBcImRlc2NcIiA6IFwiYXNjXCI7XG5cdFx0XHRcdFx0XHR0aGlzLl9zb3J0KGlkLCBkaXIsIGNlbGxDb25maWc/LnNvcnRBcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRoeF9ncmlkLWV4cGFuZC1jZWxsXCI6IChlLCByb3dJZCkgPT4ge1xuXHRcdFx0XHRcdGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJkaHhfZ3JpZC1leHBhbmQtY2VsbC1pY29uXCIpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuZXhwYW5kLCBbcm93SWRdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHR9KSxcblx0XHRcdG9uc2Nyb2xsOiBlID0+IHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLnNjcm9sbCwgW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHk6IGUudGFyZ2V0LnNjcm9sbFRvcCxcblx0XHRcdFx0XHRcdHg6IGUudGFyZ2V0LnNjcm9sbExlZnQsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSk7XG5cdFx0XHR9LFxuXHRcdFx0b25tb3VzZW92ZXI6IHtcblx0XHRcdFx0XCIuZGh4X2dyaWQtY2VsbFwiOiBlID0+IHtcblx0XHRcdFx0XHRjb25zdCByb3cgPSB0aGlzLmRhdGEuZ2V0SXRlbShlLmNvbXBvc2VkUGF0aCgpWzFdLmdldEF0dHJpYnV0ZShcImRoeF9pZFwiKSk7XG5cdFx0XHRcdFx0Y29uc3QgY29sdW1uID0gdGhpcy5fZ2V0Q29sdW1uKGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRoeF9jb2xfaWRcIikpO1xuXHRcdFx0XHRcdHNob3dDZWxsVG9vbHRpcChyb3csIGNvbHVtbiwgZS50YXJnZXQpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIi5kaHhfZ3JpZC1jZWxsOm5vdCguZGh4X3RyZWUtY2VsbCkgLmRoeF9ncmlkLWNlbGxfX2NvbnRlbnQsIC5kaHhfdHJlZS1jZWxsIDpub3QoLmRoeF9ncmlkLWNlbGxfX2NvbnRlbnQpXCI6IGUgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHBhdGggPSBlLmNvbXBvc2VkUGF0aCgpO1xuXHRcdFx0XHRcdGNvbnN0IHJvdyA9IHRoaXMuZGF0YS5nZXRJdGVtKHBhdGhbMl0uZ2V0QXR0cmlidXRlKFwiZGh4X2lkXCIpKTtcblx0XHRcdFx0XHRjb25zdCBjb2x1bW4gPSB0aGlzLl9nZXRDb2x1bW4ocGF0aFsxXS5nZXRBdHRyaWJ1dGUoXCJkaHhfY29sX2lkXCIpKTtcblx0XHRcdFx0XHRzaG93Q2VsbFRvb2x0aXAocm93LCBjb2x1bW4sIGUudGFyZ2V0KTtcblx0XHRcdFx0fSxcblx0XHRcdFx0XCIuZGh4X2dyaWQtY2VsbC5kaHhfdHJlZS1jZWxsIC5kaHhfZ3JpZC1jZWxsX19jb250ZW50XCI6IGUgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHBhdGggPSBlLmNvbXBvc2VkUGF0aCgpO1xuXHRcdFx0XHRcdGNvbnN0IHJvdyA9IHRoaXMuZGF0YS5nZXRJdGVtKHBhdGhbM10uZ2V0QXR0cmlidXRlKFwiZGh4X2lkXCIpKTtcblx0XHRcdFx0XHRjb25zdCBjb2x1bW4gPSB0aGlzLl9nZXRDb2x1bW4ocGF0aFsyXS5nZXRBdHRyaWJ1dGUoXCJkaHhfY29sX2lkXCIpKTtcblx0XHRcdFx0XHRzaG93Q2VsbFRvb2x0aXAocm93LCBjb2x1bW4sIHBhdGhbMl0pO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIi5kaHhfc3Bhbi1jZWxsOm5vdCguZGh4X2dyaWQtaGVhZGVyLWNlbGwpXCI6IGUgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHJvdyA9IHRoaXMuZGF0YS5nZXRJdGVtKGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRoeF9pZFwiKSk7XG5cdFx0XHRcdFx0Y29uc3QgY29sdW1uID0gdGhpcy5fZ2V0Q29sdW1uKGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRoeF9jb2xfaWRcIikpO1xuXHRcdFx0XHRcdGNvbnN0IHNwYW4gPSB0aGlzLmdldFNwYW4ocm93LmlkLCBjb2x1bW4uaWQpO1xuXG5cdFx0XHRcdFx0aWYgKHJvdyAmJiBzcGFuICYmIGlzVG9vbHRpcCh0aGlzLmNvbmZpZywgc3BhbikpIHtcblx0XHRcdFx0XHRcdGxldCB2YWx1ZSA9IHNwYW4udGV4dCB8fCB0b0Zvcm1hdChyb3dbY29sdW1uLmlkXSwgY29sdW1uLnR5cGUsIGNvbHVtbi5mb3JtYXQpO1xuXHRcdFx0XHRcdFx0aWYgKHNwYW4udG9vbHRpcFRlbXBsYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHZhbHVlID0gc3Bhbi50b29sdGlwVGVtcGxhdGUodmFsdWUsIHNwYW4pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChjb2x1bW4udGVtcGxhdGUpIHtcblx0XHRcdFx0XHRcdFx0dmFsdWUgPSBjb2x1bW4udGVtcGxhdGUodmFsdWUsIHJvdywgY29sdW1uKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFsdWUgJiZcblx0XHRcdFx0XHRcdFx0dG9vbHRpcCh2YWx1ZSwge1xuXHRcdFx0XHRcdFx0XHRcdGNzczogXCJkaHhfZ3JpZF90b29sdGlwXCIsXG5cdFx0XHRcdFx0XHRcdFx0bm9kZTogZS50YXJnZXQsXG5cdFx0XHRcdFx0XHRcdFx0aHRtbEVuYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIi5kaHhfZ3JpZC1oZWFkZXItY2VsbDpub3QoLmRoeF9zcGFuLWNlbGwpXCI6IGUgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGNvbHVtbiA9IHRoaXMuX2dldENvbHVtbihlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkaHhfaWRcIikpO1xuXHRcdFx0XHRcdHNob3dDb250ZW50VG9vdGxpcChlLCBjb2x1bW4pO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIi5kaHhfZ3JpZC1mb290ZXItY2VsbDpub3QoLmRoeF9zcGFuLWNlbGwpXCI6IGUgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGNvbHVtbiA9IHRoaXMuX2dldENvbHVtbihlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkaHhfaWRcIikpO1xuXHRcdFx0XHRcdHNob3dDb250ZW50VG9vdGxpcChlLCBjb2x1bW4pO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIi5kaHhfZ3JpZC1oZWFkZXItY2VsbC5kaHhfc3Bhbi1jZWxsXCI6IGUgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGNvbHVtbiA9IHRoaXMuX2dldENvbHVtbihlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkaHhfaWRcIikpO1xuXG5cdFx0XHRcdFx0Y29uc3QgaGVhZGVyU3BhbiA9IGNvbHVtbiAmJiBjb2x1bW4uaGVhZGVyLmZpbmQoaXRlbSA9PiAhIShpdGVtLnJvd3NwYW4gfHwgaXRlbS5jb2xzcGFuKSk7XG5cblx0XHRcdFx0XHRpZiAoY29sdW1uICYmIGhlYWRlclNwYW4gJiYgaXNUb29sdGlwKHRoaXMuY29uZmlnLCBjb2x1bW4pKSB7XG5cdFx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IGhlYWRlclNwYW4udGV4dCB8fCBcIlwiO1xuXHRcdFx0XHRcdFx0dmFsdWUgJiZcblx0XHRcdFx0XHRcdFx0dG9vbHRpcCh2YWx1ZSwge1xuXHRcdFx0XHRcdFx0XHRcdGNzczogXCJkaHhfZ3JpZF90b29sdGlwXCIsXG5cdFx0XHRcdFx0XHRcdFx0bm9kZTogZS50YXJnZXQsXG5cdFx0XHRcdFx0XHRcdFx0aHRtbEVuYWJsZTogaXNIdG1sRW5hYmxlKHRoaXMuY29uZmlnLCBjb2x1bW4pLFxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiLmRoeF9ncmlkLWhlYWRlci1jZWxsLXRleHRfY29udGVudFwiOiBlID0+IHtcblx0XHRcdFx0XHRjb25zdCBwYXRoID0gZS5jb21wb3NlZFBhdGgoKTtcblx0XHRcdFx0XHRjb25zdCBjb2x1bW4gPSB0aGlzLl9nZXRDb2x1bW4ocGF0aFsxXS5nZXRBdHRyaWJ1dGUoXCJkaHhfaWRcIikpO1xuXG5cdFx0XHRcdFx0aWYgKGNvbHVtbiAmJiBpc1Rvb2x0aXAodGhpcy5jb25maWcsIGNvbHVtbikpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHZhbHVlID1cblx0XHRcdFx0XHRcdFx0KHBhdGhbMl0ucXVlcnlTZWxlY3RvcihcIi5kaHhfZ3JpZC1oZWFkZXItY2VsbC10ZXh0X2NvbnRlbnRcIikgJiZcblx0XHRcdFx0XHRcdFx0XHRwYXRoWzJdLnF1ZXJ5U2VsZWN0b3IoXCIuZGh4X2dyaWQtaGVhZGVyLWNlbGwtdGV4dF9jb250ZW50XCIpLnRleHRDb250ZW50KSB8fFxuXHRcdFx0XHRcdFx0XHRcIlwiO1xuXG5cdFx0XHRcdFx0XHR2YWx1ZSAmJlxuXHRcdFx0XHRcdFx0XHR0b29sdGlwKHZhbHVlLCB7XG5cdFx0XHRcdFx0XHRcdFx0Y3NzOiBcImRoeF9ncmlkX3Rvb2x0aXBcIixcblx0XHRcdFx0XHRcdFx0XHRub2RlOiBwYXRoWzFdLFxuXHRcdFx0XHRcdFx0XHRcdGh0bWxFbmFibGU6IGlzSHRtbEVuYWJsZSh0aGlzLmNvbmZpZywgY29sdW1uKSxcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0aWYgKHRoaXMuY29uZmlnLmRyYWdNb2RlIHx8IHRoaXMuY29uZmlnLmRyYWdJdGVtKSB7XG5cdFx0XHRkcmFnTWFuYWdlci5zZXRJdGVtKHRoaXMuX3VpZCwgdGhpcyk7XG5cdFx0XHRpZiAoIXRoaXMuY29uZmlnLmRyYWdJdGVtKSB7XG5cdFx0XHRcdHRoaXMuY29uZmlnLmRyYWdJdGVtID0gXCJyb3dcIjtcblx0XHRcdH1cblx0XHRcdGlmICghdGhpcy5jb25maWcuZHJhZ01vZGUpIHtcblx0XHRcdFx0dGhpcy5jb25maWcuZHJhZ01vZGUgPSBcImJvdGhcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLl9pbml0KCk7XG5cblx0XHRpZiAodGhpcy5jb25maWcuY29sdW1ucykge1xuXHRcdFx0dGhpcy5fcGFyc2VDb2x1bW5zKHRydWUpO1xuXHRcdH1cblx0XHRpZiAoXG5cdFx0XHR0aGlzLmNvbmZpZy5kYXRhICYmXG5cdFx0XHR0aGlzLmNvbmZpZy5kYXRhIGluc3RhbmNlb2YgQXJyYXkgJiZcblx0XHRcdHRoaXMuY29uZmlnLmRhdGEubGVuZ3RoICYmXG5cdFx0XHR0aGlzLmNvbmZpZy5jb2x1bW5zXG5cdFx0KSB7XG5cdFx0XHR0aGlzLmRhdGEucGFyc2UodGhpcy5jb25maWcuZGF0YSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uKFxuXHRcdFx0dGhpcyxcblx0XHRcdHtcblx0XHRcdFx0ZGlzYWJsZWQ6ICF0aGlzLmNvbmZpZy5zZWxlY3Rpb24sXG5cdFx0XHR9LFxuXHRcdFx0dGhpcy5ldmVudHMsXG5cdFx0XHR0aGlzLl91aWRcblx0XHQpO1xuXG5cdFx0dGhpcy5tb3VudChjb250YWluZXIsIHRoaXMuX2NyZWF0ZVZpZXcoKSk7XG5cdFx0dGhpcy5jb25maWcuYXV0b1dpZHRoICYmIHRoaXMuY29uZmlnLmF1dG9IZWlnaHQgJiYgdGhpcy5fcHJlcGFyZURhdGEodGhpcy5jb25maWcuZGF0YSk7XG5cblx0XHRhd2FpdFJlZHJhdygpLnRoZW4oKCkgPT4ge1xuXHRcdFx0aWYgKHRoaXMuY29uZmlnLmtleU5hdmlnYXRpb24pIHtcblx0XHRcdFx0dGhpcy5rZXlNYW5hZ2VyID0gbmV3IEtleU1hbmFnZXIoKGU6IEV2ZW50LCBmb2N1c0lkOiBJZCkgPT4ge1xuXHRcdFx0XHRcdGlmIChmb2N1c0lkID09PSB0aGlzLl91aWQgJiYgdGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmJlZm9yZUtleURvd24sIFtlXSkpIHtcblx0XHRcdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlcktleURvd24sIFtlXSk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0dGhpcy5faW5pdEhvdEtleSgpO1xuXHRcdFx0XHRmb2N1c01hbmFnZXIuc2V0Rm9jdXNJZCh0aGlzLl91aWQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKGNvbmZpZy5hdXRvRW1wdHlSb3cgJiYgdGhpcy5kYXRhLmdldExlbmd0aCgpID09PSAwKSB7XG5cdFx0XHR0aGlzLl9hZGRFbXB0eVJvdygpO1xuXHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdH1cblx0fVxuXHRkZXN0cnVjdG9yKCkge1xuXHRcdHRoaXMuX2Rlc3Ryb3lDb250ZW50KCk7XG5cdFx0dGhpcy5rZXlNYW5hZ2VyICYmIHRoaXMua2V5TWFuYWdlci5kZXN0cnVjdG9yKCk7XG5cdFx0dGhpcy5ldmVudHMuZXZlbnRzID0ge307XG5cdFx0dGhpcy5ldmVudHMuY29udGV4dCA9IG51bGw7XG5cdFx0dGhpcy5fYWN0aXZlRmlsdGVycyA9IHRoaXMuX2ZpbHRlckRhdGEgPSB0aGlzLl9zY3JvbGwgPSB0aGlzLmNvbnRlbnQgPSBudWxsO1xuXHRcdHRoaXMudW5tb3VudCgpO1xuXHR9XG5cdHNldENvbHVtbnMoY29sdW1uczogSUNvbFtdKSB7XG5cdFx0dGhpcy5jb25maWcuY29sdW1ucyA9IGNvbHVtbnM7XG5cdFx0dGhpcy5fcGFyc2VDb2x1bW5zKHRydWUpO1xuXHRcdHRoaXMuX2FkanVzdENvbHVtbnMoKTtcblx0XHR0aGlzLl9jaGVja0ZpbHRlcnMoKTtcblx0XHR0aGlzLl9jaGVja01hcmtzKCk7XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdGFkZFJvd0Nzcyhyb3dJZDogSWQsIGNzczogc3RyaW5nKSB7XG5cdFx0Y29uc3QgaXRlbSA9IHRoaXMuZGF0YS5nZXRJdGVtKHJvd0lkKTtcblx0XHRjb25zdCBzdHlsZXMgPSBpdGVtLiRjc3MgfHwgXCJcIjtcblx0XHRpZiAoIXN0eWxlcy5tYXRjaChuZXcgUmVnRXhwKGNzcywgXCJnXCIpKSkge1xuXHRcdFx0aXRlbS4kY3NzID0gc3R5bGVzICsgYCAke2Nzc31gO1xuXHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdH1cblx0fVxuXHRyZW1vdmVSb3dDc3Mocm93SWQ6IElkLCBjc3M6IHN0cmluZykge1xuXHRcdGNvbnN0IGl0ZW0gPSB0aGlzLmRhdGEuZ2V0SXRlbShyb3dJZCk7XG5cdFx0Y29uc3Qgc3R5bGVzID0gaXRlbS4kY3NzID8gaXRlbS4kY3NzLnJlcGxhY2UoY3NzLCBcIlwiKSA6IFwiXCI7XG5cdFx0aXRlbS4kY3NzID0gc3R5bGVzO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRhZGRDZWxsQ3NzKHJvd0lkOiBJZCwgY29sSWQ6IElkLCBjc3M6IHN0cmluZykge1xuXHRcdGNvbnN0IGNvbHVtbiA9IHRoaXMuX2dldENvbHVtbihjb2xJZCk7XG5cdFx0aWYgKGNvbHVtbikge1xuXHRcdFx0aWYgKGNvbHVtbi4kY2VsbENzc1tyb3dJZF0pIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItcmVnZXhwLWV4ZWNcblx0XHRcdFx0Y29sdW1uLiRjZWxsQ3NzW3Jvd0lkXSArPSBjb2x1bW4uJGNlbGxDc3Nbcm93SWRdLm1hdGNoKG5ldyBSZWdFeHAoY3NzLCBcImdcIikpID8gXCJcIiA6IGAgJHtjc3N9YDtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5kYXRhLmdldEl0ZW0ocm93SWQpKSB7XG5cdFx0XHRcdGNvbHVtbi4kY2VsbENzc1tyb3dJZF0gPSBgJHtjc3N9IGA7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0fVxuXHR9XG5cdHJlbW92ZUNlbGxDc3Mocm93SWQ6IElkLCBjb2xJZDogSWQsIGNzczogc3RyaW5nKSB7XG5cdFx0Y29uc3QgY29sdW1uID0gdGhpcy5fZ2V0Q29sdW1uKGNvbElkKTtcblx0XHRpZiAoY29sdW1uKSB7XG5cdFx0XHRpZiAoY29sdW1uLiRjZWxsQ3NzW3Jvd0lkXSkge1xuXHRcdFx0XHRjb2x1bW4uJGNlbGxDc3Nbcm93SWRdID0gY29sdW1uLiRjZWxsQ3NzW3Jvd0lkXS5yZXBsYWNlKGNzcywgXCJcIik7XG5cdFx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5kYXRhLmdldEl0ZW0ocm93SWQpKSB7XG5cdFx0XHRcdGNvbHVtbi4kY2VsbENzc1tyb3dJZF0gPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRzaG93Q29sdW1uKGNvbElkOiBJZCkge1xuXHRcdGNvbnN0IGNvbHVtbiA9IHRoaXMuX2dldENvbHVtbihjb2xJZCk7XG5cdFx0aWYgKCFjb2x1bW4gfHwgIWNvbHVtbi5oaWRkZW4pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5iZWZvcmVDb2x1bW5TaG93LCBbY29sdW1uXSkpIHJldHVybjtcblx0XHRjb2x1bW4uaGlkZGVuID0gZmFsc2U7XG5cdFx0dGhpcy5jb25maWcuJHRvdGFsV2lkdGggKz0gY29sdW1uLiR3aWR0aDtcblx0XHRjb25zdCBmaWx0ZXIgPSB0aGlzLl9oaWRkZW5GaWx0ZXJzICYmIHRoaXMuX2hpZGRlbkZpbHRlcnNbY29sdW1uLmlkXTtcblx0XHRpZiAoZmlsdGVyKSB7XG5cdFx0XHR0aGlzLl9hY3RpdmVGaWx0ZXJzW2NvbHVtbi5pZF0gPSBmaWx0ZXI7XG5cdFx0XHRkZWxldGUgdGhpcy5faGlkZGVuRmlsdGVyc1tjb2x1bW4uaWRdO1xuXHRcdH1cblx0XHR0aGlzLnBhaW50KCk7XG5cdFx0dGhpcy5fY2hlY2tGaWx0ZXJzKCk7XG5cdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmFmdGVyQ29sdW1uU2hvdywgW2NvbHVtbl0pO1xuXHR9XG5cdGhpZGVDb2x1bW4oY29sSWQ6IElkKSB7XG5cdFx0Y29uc3QgY29sdW1uID0gdGhpcy5fZ2V0Q29sdW1uKGNvbElkKTtcblx0XHRpZiAoIWNvbHVtbiB8fCBjb2x1bW4uaGlkZGVuKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYmVmb3JlQ29sdW1uSGlkZSwgW2NvbHVtbl0pKSByZXR1cm47XG5cdFx0Y29sdW1uLmhpZGRlbiA9IHRydWU7XG5cdFx0dGhpcy5jb25maWcuJHRvdGFsV2lkdGggLT0gY29sdW1uLiR3aWR0aDtcblx0XHRjb25zdCBmaWx0ZXIgPSB0aGlzLl9hY3RpdmVGaWx0ZXJzICYmIHRoaXMuX2FjdGl2ZUZpbHRlcnNbY29sdW1uLmlkXTtcblx0XHRpZiAoZmlsdGVyKSB7XG5cdFx0XHRpZiAoIXRoaXMuX2hpZGRlbkZpbHRlcnMpIHtcblx0XHRcdFx0dGhpcy5faGlkZGVuRmlsdGVycyA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5faGlkZGVuRmlsdGVyc1tjb2x1bW4uaWRdID0gZmlsdGVyO1xuXHRcdFx0ZGVsZXRlIHRoaXMuX2FjdGl2ZUZpbHRlcnNbY29sdW1uLmlkXTtcblx0XHRcdHRoaXMuZGF0YS5maWx0ZXIoKTtcblx0XHR9XG5cdFx0dGhpcy5wYWludCgpO1xuXHRcdHRoaXMuX2NoZWNrRmlsdGVycygpO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlckNvbHVtbkhpZGUsIFtjb2x1bW5dKTtcblx0fVxuXHRpc0NvbHVtbkhpZGRlbihjb2xJZDogSWQpOiBib29sZWFuIHtcblx0XHRjb25zdCBjb2x1bW4gPSB0aGlzLl9nZXRDb2x1bW4oY29sSWQpO1xuXHRcdGlmIChjb2x1bW4pIHtcblx0XHRcdHJldHVybiAhIWNvbHVtbi5oaWRkZW47XG5cdFx0fVxuXHR9XG5cdHNob3dSb3cocm93SWQ6IElkKSB7XG5cdFx0aWYgKCFpc0RlZmluZWQocm93SWQpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IGlkID0gcm93SWQudG9TdHJpbmcoKTtcblx0XHRjb25zdCByb3cgPSB0aGlzLmRhdGEuZ2V0SXRlbShpZCk7XG5cdFx0aWYgKCFyb3cgfHwgIXJvdy5oaWRkZW4pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYmVmb3JlUm93U2hvdywgW3Jvd10pKSByZXR1cm47XG5cdFx0dGhpcy5kYXRhLnVwZGF0ZShpZCwgeyBoaWRkZW46IGZhbHNlIH0pO1xuXHRcdHRoaXMuZGF0YS5maWx0ZXIoaSA9PiAhaS5oaWRkZW4pO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlclJvd1Nob3csIFtyb3ddKTtcblx0fVxuXHRoaWRlUm93KHJvd0lkOiBJZCkge1xuXHRcdGlmICghaXNEZWZpbmVkKHJvd0lkKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBpZCA9IHJvd0lkLnRvU3RyaW5nKCk7XG5cdFx0Y29uc3Qgcm93ID0gdGhpcy5kYXRhLmdldEl0ZW0oaWQpO1xuXHRcdGlmICghcm93KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICghdGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmJlZm9yZVJvd0hpZGUsIFtyb3ddKSkgcmV0dXJuO1xuXHRcdHRoaXMuZGF0YS51cGRhdGUoaWQsIHsgaGlkZGVuOiB0cnVlIH0pO1xuXHRcdHRoaXMuZGF0YS5maWx0ZXIoaSA9PiAhaS5oaWRkZW4pO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlclJvd0hpZGUsIFtyb3ddKTtcblx0fVxuXHRpc1Jvd0hpZGRlbihyb3dJZDogSWQpOiBib29sZWFuIHtcblx0XHRpZiAoIWlzRGVmaW5lZChyb3dJZCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3Qgcm93ID0gdGhpcy5kYXRhLmdldEl0ZW0ocm93SWQudG9TdHJpbmcoKSk7XG5cdFx0aWYgKHJvdykge1xuXHRcdFx0cmV0dXJuICEhcm93LmhpZGRlbjtcblx0XHR9XG5cdH1cblx0Z2V0U2Nyb2xsU3RhdGUoKTogSUNvb3JkcyB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHRoaXMuX3Njcm9sbC5sZWZ0LFxuXHRcdFx0eTogdGhpcy5fc2Nyb2xsLnRvcCxcblx0XHR9O1xuXHR9XG5cdHNjcm9sbCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuXHRcdGNvbnN0IGdyaWRCb2R5ID0gdGhpcy5nZXRSb290VmlldygpLnJlZnMuZ3JpZF9ib2R5LmVsO1xuXHRcdGdyaWRCb2R5LnNjcm9sbExlZnQgPSB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IHggOiBncmlkQm9keS5zY3JvbGxMZWZ0O1xuXHRcdGdyaWRCb2R5LnNjcm9sbFRvcCA9IHR5cGVvZiB5ID09PSBcIm51bWJlclwiID8geSA6IGdyaWRCb2R5LnNjcm9sbFRvcDtcblx0XHR0aGlzLnBhaW50KCk7XG5cdH1cblx0c2Nyb2xsVG8ocm93SWQ6IElkLCBjb2xJZDogSWQpIHtcblx0XHRjb25zdCBzZWxlY3RlZENlbGwgPSB0aGlzLnNlbGVjdGlvbi5nZXRDZWxsKCk7XG5cblx0XHRjb25zdCBjb2x1bW5zID0gdGhpcy5jb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKTtcblx0XHRjb25zdCBjb2xJbmQgPSBmaW5kSW5kZXgoY29sdW1ucywgKHsgaWQgfSkgPT4gaWQgPT0gY29sSWQpO1xuXHRcdGNvbnN0IHByZXZDb2wgPSBzZWxlY3RlZENlbGwgPyBzZWxlY3RlZENlbGwuY29sdW1uIDogdGhpcy5jb25maWcuY29sdW1uc1swXTtcblx0XHRjb25zdCBwcmV2Q29sSW5kID0gZmluZEluZGV4KGNvbHVtbnMsIG9iaiA9PiBvYmouaWQgPT0gcHJldkNvbC5pZCk7XG5cdFx0Y29uc3QgZml4ZWRDb2xzV2lkdGggPSB0aGlzLmNvbmZpZy5sZWZ0U3BsaXRcblx0XHRcdD8gZ2V0VG90YWxXaWR0aChjb2x1bW5zLnNsaWNlKDAsIHRoaXMuY29uZmlnLmxlZnRTcGxpdCkpXG5cdFx0XHQ6IDA7XG5cdFx0Y29uc3QgeCA9IGdldFRvdGFsV2lkdGgoY29sdW1ucy5zbGljZSgwLCBjb2xJbmQpKSAtIChjb2xJbmQgLSBwcmV2Q29sSW5kIDwgMCA/IGZpeGVkQ29sc1dpZHRoIDogMCk7XG5cblx0XHRjb25zdCByb3dzID0gdGhpcy5kYXRhLmdldFJhd0RhdGEoMCwgLTEpO1xuXHRcdGNvbnN0IHJvd0luZCA9IGZpbmRJbmRleChyb3dzLCAoeyBpZCB9KSA9PiBpZCA9PSByb3dJZCk7XG5cdFx0Y29uc3QgeSA9IGdldFRvdGFsSGVpZ2h0KHJvd3Muc2xpY2UoMCwgcm93SW5kKSk7XG5cblx0XHRjb25zdCBzY3JvbGxTdGF0ZSA9IHRoaXMuZ2V0U2Nyb2xsU3RhdGUoKTtcblxuXHRcdGNvbnN0IGdyaWRSaWdodCA9IHRoaXMuY29uZmlnLndpZHRoICsgc2Nyb2xsU3RhdGUueDtcblx0XHRjb25zdCBncmlkQm90dG9tID1cblx0XHRcdHRoaXMuY29uZmlnLmhlaWdodCArIHNjcm9sbFN0YXRlLnkgLSB0aGlzLmNvbmZpZy5oZWFkZXJSb3dIZWlnaHQgKiB0aGlzLmNvbmZpZy4kaGVhZGVyTGV2ZWw7XG5cblx0XHRjb25zdCBjZWxsVG9wID0geSAtIHNjcm9sbFN0YXRlLnkgLSByb3dzW3Jvd0luZF0uJGhlaWdodDtcblx0XHRjb25zdCBjZWxsTGVmdCA9IHggLSBzY3JvbGxTdGF0ZS54IC0gY29sdW1uc1tjb2xJbmRdLiR3aWR0aDtcblxuXHRcdGNvbnN0IGNlbGxCb3R0b20gPSB5ICsgcm93c1tyb3dJbmRdLiRoZWlnaHQgKiAyICsgMTggLSBncmlkQm90dG9tO1xuXHRcdGNvbnN0IGNlbGxSaWdodCA9IHggKyBjb2x1bW5zW2NvbEluZF0uJHdpZHRoICogMiArIDE4IC0gZ3JpZFJpZ2h0O1xuXG5cdFx0Y29uc3Qgc2Nyb2xsVG9wID0gY2VsbFRvcCA+IDAgJiYgY2VsbEJvdHRvbSA8IDAgPyAwIDogY2VsbFRvcCA8IDAgPyBjZWxsVG9wIDogY2VsbEJvdHRvbTtcblx0XHRjb25zdCBzY3JvbGxMZWZ0ID0gY2VsbExlZnQgPiAwICYmIGNlbGxSaWdodCA8IDAgPyAwIDogY2VsbExlZnQgPCAwID8gY2VsbExlZnQgOiBjZWxsUmlnaHQ7XG5cblx0XHR0aGlzLnNjcm9sbChzY3JvbGxMZWZ0ICsgc2Nyb2xsU3RhdGUueCwgc2Nyb2xsVG9wICsgc2Nyb2xsU3RhdGUueSk7XG5cdH1cblx0YWRqdXN0Q29sdW1uV2lkdGgoY29sSWQ6IElkLCBhZGp1c3Q6IElBZGp1c3RCeSA9IHRydWUpIHtcblx0XHRjb25zdCBjb2x1bW5zID0gdGhpcy5jb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKTtcblx0XHRjb25zdCBjb2wgPSBjb2x1bW5zLmZpbHRlcihjb2wgPT4gY29sLmlkID09PSBjb2xJZCk7XG5cdFx0Y29uc3QgdG90YWxDb2xzID0gdGhpcy5fYWRqdXN0Q29sdW1uc1dpZHRoKHRoaXMuY29uZmlnLmRhdGEsIGNvbCwgYWRqdXN0KTtcblx0XHR0aGlzLmNvbmZpZy4kdG90YWxXaWR0aCA9IGNvbHVtbnMucmVkdWNlKCh0b3RhbFdpZHRoLCBjb2x1bW4pID0+IHtcblx0XHRcdGlmICh0b3RhbENvbHNbY29sdW1uLmlkXSkge1xuXHRcdFx0XHRjb2x1bW4uJGZpeGVkID0gdHJ1ZTtcblx0XHRcdFx0Y29uc3QgbWF4ID0gY29sdW1uLm1heFdpZHRoO1xuXHRcdFx0XHRjb25zdCBtaW4gPSBjb2x1bW4ubWluV2lkdGg7XG5cdFx0XHRcdGNvbnN0IHdpZHRoID0gdG90YWxDb2xzW2NvbHVtbi5pZF07XG5cdFx0XHRcdGNvbHVtbi4kd2lkdGggPSB3aWR0aDtcblxuXHRcdFx0XHRpZiAobWF4ICYmIHdpZHRoID4gbWF4KSB7XG5cdFx0XHRcdFx0Y29sdW1uLiR3aWR0aCA9IG1heDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobWluICYmIGNvbHVtbi4kd2lkdGggPCBtaW4pIHtcblx0XHRcdFx0XHRjb2x1bW4uJHdpZHRoID0gbWluO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKHRvdGFsV2lkdGggKz0gY29sdW1uLiR3aWR0aCk7XG5cdFx0fSwgMCk7XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdGdldENlbGxSZWN0KHJvd0lkOiBJZCwgY29sSWQ6IElkKTogSUNlbGxSZWN0IHtcblx0XHRjb25zdCBjb2x1bW5zID0gdGhpcy5jb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKTtcblx0XHRjb25zdCByb3dzID0gdGhpcy5kYXRhLmdldFJhd0RhdGEoMCwgLTEpO1xuXHRcdGNvbnN0IHNwYW4gPSB0aGlzLmdldFNwYW4ocm93SWQsIGNvbElkKTtcblxuXHRcdGNvbnN0IGNvbEluZCA9IGZpbmRJbmRleChjb2x1bW5zLCBvYmogPT4gb2JqLmlkID09IGNvbElkKTtcblx0XHRjb25zdCByb3dJbmQgPSBmaW5kSW5kZXgocm93cywgb2JqID0+IG9iai5pZCA9PSByb3dJZCk7XG5cblx0XHRjb25zdCB4ID0gZ2V0VG90YWxXaWR0aChjb2x1bW5zLnNsaWNlKDAsIGNvbEluZCkpO1xuXHRcdGNvbnN0IHkgPSBnZXRUb3RhbEhlaWdodChyb3dzLnNsaWNlKDAsIHJvd0luZCkpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHgsXG5cdFx0XHR5LFxuXHRcdFx0aGVpZ2h0OiBzcGFuPy5yb3dzcGFuXG5cdFx0XHRcdD8gZ2V0SGVpZ2h0KHJvd3MsIHNwYW4ucm93c3Bhbiwgcm93SW5kKVxuXHRcdFx0XHQ6IHJvd3Nbcm93SW5kXVxuXHRcdFx0XHQ/IHJvd3Nbcm93SW5kXS4kaGVpZ2h0XG5cdFx0XHRcdDogMCxcblx0XHRcdHdpZHRoOiBzcGFuPy5jb2xzcGFuXG5cdFx0XHRcdD8gZ2V0V2lkdGgoY29sdW1ucywgc3Bhbi5jb2xzcGFuLCBjb2xJbmQpXG5cdFx0XHRcdDogY29sdW1uc1tjb2xJbmRdXG5cdFx0XHRcdD8gY29sdW1uc1tjb2xJbmRdLiR3aWR0aFxuXHRcdFx0XHQ6IDAsXG5cdFx0fTtcblx0fVxuXHRnZXRDb2x1bW4oY29sSWQ6IElkKTogSUNvbCB7XG5cdFx0Y29uc3QgaWQgPSBmaW5kSW5kZXgodGhpcy5jb25maWcuY29sdW1ucywgY29sID0+IGNvbC5pZCA9PSBjb2xJZCk7XG5cdFx0aWYgKGlkID49IDApIHtcblx0XHRcdHJldHVybiB0aGlzLmNvbmZpZy5jb2x1bW5zW2lkXTtcblx0XHR9XG5cdH1cblx0YWRkU3BhbihzcGFuT2JqOiBJU3Bhbikge1xuXHRcdHRoaXMuY29uZmlnLnNwYW5zID0gdGhpcy5jb25maWcuc3BhbnMgfHwgW107XG5cdFx0Y29uc3QgaW5kZXggPSBmaW5kSW5kZXgoXG5cdFx0XHR0aGlzLmNvbmZpZy5zcGFucyxcblx0XHRcdHNwYW4gPT4gYCR7c3Bhbi5yb3d9YCA9PT0gYCR7c3Bhbk9iai5yb3d9YCAmJiBgJHtzcGFuLmNvbHVtbn1gID09PSBgJHtzcGFuT2JqLmNvbHVtbn1gXG5cdFx0KTtcblx0XHRpZiAoaW5kZXggPj0gMCkge1xuXHRcdFx0dGhpcy5jb25maWcuc3BhbnNbaW5kZXhdID0gc3Bhbk9iajtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5jb25maWcuc3BhbnMucHVzaChzcGFuT2JqKTtcblx0XHR0aGlzLnBhaW50KCk7XG5cdH1cblx0Z2V0U3Bhbihyb3dJZDogSWQsIGNvbElkOiBJZCk6IElTcGFuIHtcblx0XHRpZiAodGhpcy5jb25maWcuc3BhbnMpIHtcblx0XHRcdGNvbnN0IGluZGV4ID0gZmluZEluZGV4KFxuXHRcdFx0XHR0aGlzLmNvbmZpZy5zcGFucyxcblx0XHRcdFx0c3BhbiA9PiBgJHtzcGFuLnJvd31gID09IGAke3Jvd0lkfWAgJiYgYCR7c3Bhbi5jb2x1bW59YCA9PSBgJHtjb2xJZH1gXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXMuY29uZmlnLnNwYW5zW2luZGV4XTtcblx0XHR9XG5cdH1cblx0cmVtb3ZlU3Bhbihyb3dJZDogSWQsIGNvbElkOiBJZCkge1xuXHRcdGlmICh0aGlzLmNvbmZpZy5zcGFucykge1xuXHRcdFx0Y29uc3QgaW5kZXggPSBmaW5kSW5kZXgoXG5cdFx0XHRcdHRoaXMuY29uZmlnLnNwYW5zLFxuXHRcdFx0XHRzcGFuID0+IGAke3NwYW4ucm93fWAgPT0gYCR7cm93SWR9YCAmJiBgJHtzcGFuLmNvbHVtbn1gID09IGAke2NvbElkfWBcblx0XHRcdCk7XG5cdFx0XHR0aGlzLmNvbmZpZy5zcGFucy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdH1cblx0fVxuXHRlZGl0Q2VsbChyb3dJZDogSWQsIGNvbElkOiBJZCwgZWRpdG9yVHlwZT86IEVkaXRvclR5cGUpOiB2b2lkIHtcblx0XHRjb25zdCByb3cgPSB0aGlzLmRhdGEuZ2V0SXRlbShyb3dJZCk7XG5cdFx0Y29uc3QgY29sID0gdGhpcy5nZXRDb2x1bW4oY29sSWQpO1xuXHRcdGlmICghcm93IHx8ICFjb2wpIHtcblx0XHRcdGRoeFdhcm5pbmcoXCJpdGVtIG5vdCBmb3VuZFwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgY29sRWRpdG9yVHlwZSA9IGNvbC5lZGl0b3JUeXBlO1xuXHRcdGlmICghZWRpdG9yVHlwZSkge1xuXHRcdFx0aWYgKGNvbC50eXBlID09PSBcImRhdGVcIikge1xuXHRcdFx0XHRlZGl0b3JUeXBlID0gXCJkYXRlUGlja2VyXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY29sLnR5cGUgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRcdGVkaXRvclR5cGUgPSBcImNoZWNrYm94XCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY29sRWRpdG9yVHlwZSkge1xuXHRcdFx0XHRlZGl0b3JUeXBlID0gY29sRWRpdG9yVHlwZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYmVmb3JlRWRpdFN0YXJ0LCBbcm93LCBjb2wsIGVkaXRvclR5cGVdKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoXG5cdFx0XHR0aGlzLmNvbmZpZy4kZWRpdGFibGU/LmVkaXRvciB8fFxuXHRcdFx0KHRoaXMuY29uZmlnLiRlZGl0YWJsZSAmJlxuXHRcdFx0XHR0aGlzLmNvbmZpZy4kZWRpdGFibGUucm93ID09PSByb3dJZCAmJlxuXHRcdFx0XHR0aGlzLmNvbmZpZy4kZWRpdGFibGUuY29sID09PSBjb2xJZCAmJlxuXHRcdFx0XHR0aGlzLmNvbmZpZy4kZWRpdGFibGUuZWRpdG9yVHlwZSA9PT0gZWRpdG9yVHlwZSlcblx0XHQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5jb25maWcuJGVkaXRhYmxlID0ge1xuXHRcdFx0cm93OiByb3cuaWQsXG5cdFx0XHRjb2w6IGNvbC5pZCxcblx0XHRcdGVkaXRvclR5cGUsXG5cdFx0fTtcblx0XHRpZiAoIXRoaXMuc2VsZWN0aW9uLmNvbmZpZy5kaXNhYmxlZCkge1xuXHRcdFx0dGhpcy5zZWxlY3Rpb24uc2V0Q2VsbChyb3dJZC50b1N0cmluZygpLCBjb2xJZC50b1N0cmluZygpKTtcblx0XHR9XG5cdFx0dGhpcy5wYWludCgpO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlckVkaXRTdGFydCwgW3JvdywgY29sLCBlZGl0b3JUeXBlXSk7XG5cdH1cblx0ZWRpdEVuZCh3aXRob3V0U2F2ZT86IGJvb2xlYW4pIHtcblx0XHRpZiAodGhpcy5jb25maWcuJGVkaXRhYmxlICYmIHRoaXMuY29uZmlnLiRlZGl0YWJsZS5lZGl0b3IpIHtcblx0XHRcdHRoaXMuY29uZmlnLiRlZGl0YWJsZS5lZGl0b3IuZW5kRWRpdCh3aXRob3V0U2F2ZSk7XG5cdFx0fVxuXHR9XG5cdGdldFNvcnRpbmdTdGF0ZSgpOiBJU29ydGluZ1N0YXRlIHtcblx0XHRyZXR1cm4geyBkaXI6IHRoaXMuX3NvcnREaXIsIGJ5OiB0aGlzLl9zb3J0QnkgfTtcblx0fVxuXHRnZXRIZWFkZXJGaWx0ZXIoY29sSWQ6IElkKTogSFRNTEVsZW1lbnQgfCBDb21ib2JveCB7XG5cdFx0Y29uc3QgY29sID0gdGhpcy5nZXRDb2x1bW4oY29sSWQpO1xuXHRcdGlmICghY29sKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGxldCBmaWx0ZXIgPSBudWxsO1xuXHRcdGNvbC5oZWFkZXIuZm9yRWFjaChjZWxsID0+IHtcblx0XHRcdGlmIChjZWxsLmNvbnRlbnQpIHtcblx0XHRcdFx0Y29uc3QgZmlsdGVyRWwgPSB0aGlzLmNvbnRlbnRbY2VsbC5jb250ZW50XS5lbGVtZW50W2NvbElkXTtcblx0XHRcdFx0ZmlsdGVyID1cblx0XHRcdFx0XHRjZWxsLmNvbnRlbnQgPT09IFwiY29tYm9GaWx0ZXJcIiA/IGZpbHRlckVsIDogdGhpcy5nZXRSb290VmlldygpLnJlZnNbYCR7Y29sSWR9X2ZpbHRlcmBdLmVsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBmaWx0ZXI7XG5cdH1cblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRlZGl0KHJvd0lkOiBJZCwgY29sSWQ6IElkLCBlZGl0b3JUeXBlPzogRWRpdG9yVHlwZSk6IHZvaWQge1xuXHRcdHRoaXMuZWRpdENlbGwocm93SWQsIGNvbElkLCBlZGl0b3JUeXBlKTtcblx0fVxuXHRwcm90ZWN0ZWQgX2NyZWF0ZVZpZXcoKSB7XG5cdFx0cmV0dXJuIGNyZWF0ZShcblx0XHRcdHtcblx0XHRcdFx0cmVuZGVyOiAodm0sIG9iaikgPT4ge1xuXHRcdFx0XHRcdHJldHVybiByZW5kZXIodm0sIG9iaiwgdGhpcy5faHRtbEV2ZW50cywgdGhpcy5zZWxlY3Rpb24sIHRoaXMuX3VpZCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0dGhpc1xuXHRcdCk7XG5cdH1cblx0cHJvdGVjdGVkIF9wYXJzZUNvbHVtbnMoY29uZmlnQ2hhbmdlZCA9IGZhbHNlKSB7XG5cdFx0bm9ybWFsaXplQ29sdW1ucyh0aGlzLmNvbmZpZywgY29uZmlnQ2hhbmdlZCk7XG5cdFx0Y29uc3QgY29sdW1ucyA9IHRoaXMuY29uZmlnLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29sLmhpZGRlbik7XG5cdFx0Y291bnRDb2x1bW5zKHRoaXMuY29uZmlnLCBjb2x1bW5zKTtcblx0fVxuXHRwcm90ZWN0ZWQgX3BhcnNlRGF0YSgpIHtcblx0XHR0aGlzLmNvbmZpZy5kYXRhID0gdGhpcy5fcHJlcGFyZURhdGEodGhpcy5kYXRhKTtcblx0XHR0aGlzLl9kZXRlY3RDb2xzVHlwZXMoKTtcblx0XHR0aGlzLl9jaGVja0ZpbHRlcnMoKTtcblx0XHR0aGlzLl9jaGVja01hcmtzKCk7XG5cdFx0dGhpcy5kYXRhLmZpbHRlcihpID0+ICFpLmhpZGRlbik7XG5cdFx0dGhpcy5fcmVuZGVyKCk7XG5cdH1cblx0cHJvdGVjdGVkIF9jcmVhdGVDb2xsZWN0aW9uKHByZXA6IChkYXRhOiBhbnlbXSkgPT4gYW55W10pIHtcblx0XHR0aGlzLmRhdGEgPSBuZXcgRGF0YUNvbGxlY3Rpb24oeyBwcmVwIH0sIHRoaXMuZXZlbnRzKTtcblx0fVxuXHRwcm90ZWN0ZWQgX2dldFJvd0luZGV4KHJvd0lkOiBJZCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5nZXRJbmRleChyb3dJZCk7XG5cdH1cblx0cHJvdGVjdGVkIF9zZXRFdmVudEhhbmRsZXJzKCkge1xuXHRcdGNvbnN0IHVwZGF0ZXIgPSAodXBkYXRlT2JqOiBhbnkpID0+ICh7IHNvdXJjZSwgdGFyZ2V0IH0pID0+IHtcblx0XHRcdGlmIChzb3VyY2UgJiYgc291cmNlIGluc3RhbmNlb2YgQXJyYXkgJiYgc291cmNlLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0c291cmNlLm1hcChcblx0XHRcdFx0XHRzZWxlY3RlZElkID0+IHRoaXMuZGF0YS5leGlzdHMoc2VsZWN0ZWRJZCkgJiYgdGhpcy5kYXRhLnVwZGF0ZShzZWxlY3RlZElkLCB1cGRhdGVPYmopXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmRhdGEuZXhpc3RzKHRhcmdldCkpIHtcblx0XHRcdFx0dGhpcy5kYXRhLnVwZGF0ZSh0YXJnZXQsIHVwZGF0ZU9iaik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHR0aGlzLmRhdGEuZXZlbnRzLm9uKERhdGFFdmVudHMubG9hZCwgKCkgPT4ge1xuXHRcdFx0dGhpcy5kYXRhLmZpbHRlcihpID0+IGkpO1xuXHRcdFx0dGhpcy5fcGFyc2VEYXRhKCk7XG5cdFx0XHR0aGlzLl9jaGVja0ZpbHRlcnMoKTtcblx0XHR9KTtcblx0XHR0aGlzLmRhdGEuZXZlbnRzLm9uKERhdGFFdmVudHMuY2hhbmdlLCAoaWQsIHN0YXR1cywgb2JqKSA9PiB7XG5cdFx0XHRpZiAoc3RhdHVzID09PSBcInNldFBhZ2VcIikge1xuXHRcdFx0XHRhd2FpdFJlZHJhdygpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuc2Nyb2xsVG8odGhpcy5kYXRhLmdldElkKG9ialswXSkudG9TdHJpbmcoKSwgdGhpcy5jb25maWcuY29sdW1uc1swXS5pZC50b1N0cmluZygpKTtcblx0XHRcdFx0XHR0aGlzLl9yZW5kZXIoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmIChzdGF0dXMgPT09IFwiYWRkXCIgfHwgc3RhdHVzID09PSBcInVwZGF0ZVwiIHx8IHN0YXR1cyA9PT0gXCJyZW1vdmVcIikge1xuXHRcdFx0XHR0aGlzLmNvbmZpZy5kYXRhID0gdGhpcy5fcHJlcGFyZURhdGEodGhpcy5kYXRhKTtcblx0XHRcdH1cblx0XHRcdGlmIChpZCkge1xuXHRcdFx0XHR0aGlzLl9maWx0ZXJEYXRhID0gdGhpcy5kYXRhLm1hcChlbCA9PiBlbCkgfHwgW107XG5cdFx0XHRcdHRoaXMuX2NoZWNrRmlsdGVycygpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZGV0ZWN0Q29sc1R5cGVzKCk7XG5cdFx0XHR0aGlzLl9yZW1vdmVNYXJrcygpO1xuXHRcdFx0dGhpcy5fY2hlY2tNYXJrcygpO1xuXHRcdFx0aWYgKHRoaXMuY29uZmlnLmF1dG9FbXB0eVJvdyAmJiAoIXRoaXMuX2FjdGl2ZUZpbHRlcnMgfHwgaXNFbXB0eU9iaih0aGlzLl9hY3RpdmVGaWx0ZXJzKSkpIHtcblx0XHRcdFx0Y29uc3QgZW1wdHlSb3cgPSB0aGlzLmRhdGEuZmluZCh7IGJ5OiBcIiRlbXB0eVJvd1wiLCBtYXRjaDogdHJ1ZSB9KTtcblx0XHRcdFx0aWYgKGVtcHR5Um93KSB7XG5cdFx0XHRcdFx0aWYgKGVtcHR5Um93LmlkID09PSBpZCkgcmV0dXJuO1xuXHRcdFx0XHRcdHRoaXMuZGF0YS5tb3ZlKGVtcHR5Um93LmlkLCB0aGlzLmRhdGEuZ2V0TGVuZ3RoKCkgLSAxKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9hZGRFbXB0eVJvdygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9yZW5kZXIoKTtcblx0XHR9KTtcblx0XHR0aGlzLmRhdGEuZXZlbnRzLm9uKERhdGFFdmVudHMucmVtb3ZlQWxsLCAoKSA9PiB7XG5cdFx0XHR0aGlzLmNvbmZpZy5jb2x1bW5zLm1hcChjb2wgPT4ge1xuXHRcdFx0XHRjb2wuaGVhZGVyLm1hcChjZWxsID0+IHtcblx0XHRcdFx0XHRpZiAoY2VsbC5jb250ZW50ICYmIChjZWxsLmNvbnRlbnQgPT09IFwic2VsZWN0RmlsdGVyXCIgfHwgY2VsbC5jb250ZW50ID09PSBcImNvbWJvRmlsdGVyXCIpKSB7XG5cdFx0XHRcdFx0XHRjb2wuJHVuaXF1ZURhdGEgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmV2ZW50cy5vbihEcmFnRXZlbnRzLmJlZm9yZURyYWcsIChkYXRhLCBldmVudHMpID0+IHtcblx0XHRcdGlmICh0aGlzLmRhdGEuZ2V0SXRlbShkYXRhLnN0YXJ0KSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmJlZm9yZVJvd0RyYWcsIFtkYXRhLCBldmVudHNdKTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwiY29sdW1uXCIgfHwgdGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwiYm90aFwiKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYmVmb3JlQ29sdW1uRHJhZywgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKERyYWdFdmVudHMuZHJhZ1N0YXJ0LCAoZGF0YSwgZXZlbnRzKSA9PiB7XG5cdFx0XHR1cGRhdGVyKHsgJGRyYWd0YXJnZXQ6IHRydWUgfSk7XG5cdFx0XHRpZiAodGhpcy5kYXRhLmdldEl0ZW0oZGF0YS5zdGFydCkpIHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmRyYWdSb3dTdGFydCwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJjb2x1bW5cIiB8fCB0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJib3RoXCIpIHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmRyYWdDb2x1bW5TdGFydCwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKERyYWdFdmVudHMuZHJhZ0luLCAoZGF0YSwgZXZlbnRzKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5kYXRhLmdldEl0ZW0oZGF0YS5zdGFydCkpIHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmRyYWdSb3dJbiwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJjb2x1bW5cIiB8fCB0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJib3RoXCIpIHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmRyYWdDb2x1bW5JbiwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKERyYWdFdmVudHMuZHJhZ091dCwgKGRhdGEsIGV2ZW50cykgPT4ge1xuXHRcdFx0aWYgKHRoaXMuZGF0YS5nZXRJdGVtKGRhdGEuc3RhcnQpKSB7XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5kcmFnUm93T3V0LCBbZGF0YSwgZXZlbnRzXSk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuY29uZmlnLmRyYWdJdGVtID09PSBcImNvbHVtblwiIHx8IHRoaXMuY29uZmlnLmRyYWdJdGVtID09PSBcImJvdGhcIikge1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuZHJhZ0NvbHVtbk91dCwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKERyYWdFdmVudHMuY2FuRHJvcCwgKGRhdGEsIGV2ZW50cykgPT4ge1xuXHRcdFx0dXBkYXRlcih7ICRkcm9waGVyZTogdHJ1ZSB9KTtcblx0XHRcdGlmICh0aGlzLmRhdGEuZ2V0SXRlbShkYXRhLnN0YXJ0KSkge1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuY2FuUm93RHJvcCwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJjb2x1bW5cIiB8fCB0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJib3RoXCIpIHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmNhbkNvbHVtbkRyb3AsIFtkYXRhLCBldmVudHNdKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLmV2ZW50cy5vbihEcmFnRXZlbnRzLmNhbmNlbERyb3AsIChkYXRhLCBldmVudHMpID0+IHtcblx0XHRcdHVwZGF0ZXIoeyAkZHJvcGhlcmU6IHVuZGVmaW5lZCB9KTtcblx0XHRcdGlmICh0aGlzLmRhdGEuZ2V0SXRlbShkYXRhLnN0YXJ0KSkge1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuY2FuY2VsUm93RHJvcCwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJjb2x1bW5cIiB8fCB0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJib3RoXCIpIHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmNhbmNlbENvbHVtbkRyb3AsIFtkYXRhLCBldmVudHNdKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLmV2ZW50cy5vbihEcmFnRXZlbnRzLmJlZm9yZURyb3AsIChkYXRhLCBldmVudHMpID0+IHtcblx0XHRcdGlmIChcblx0XHRcdFx0dGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwicm93XCIgJiZcblx0XHRcdFx0KHRoaXMuY29uZmlnLmRyYWdNb2RlID09PSBcImJvdGhcIiB8fCB0aGlzLmNvbmZpZy5kcmFnTW9kZSA9PT0gXCJ0YXJnZXRcIilcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmJlZm9yZVJvd0Ryb3AsIFtkYXRhLCBldmVudHNdKTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwiY29sdW1uXCIgfHwgdGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwiYm90aFwiKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYmVmb3JlQ29sdW1uRHJvcCwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKERyYWdFdmVudHMuYWZ0ZXJEcm9wLCAoZGF0YSwgZXZlbnRzKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5kYXRhLmdldEl0ZW0oZGF0YS5zdGFydCkpIHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmFmdGVyUm93RHJvcCwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0XHRjb25zdCBpdGVtID0gdGhpcy5kYXRhLmdldEl0ZW0oZGF0YS5zdGFydCk7XG5cdFx0XHRcdGZvciAoY29uc3QgY29sIG9mIHRoaXMuY29uZmlnLmNvbHVtbnMpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGl0ZW1bY29sLmlkXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShpdGVtLmlkLCB7IFtjb2wuaWRdOiBudWxsIH0sIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJjb2x1bW5cIiB8fCB0aGlzLmNvbmZpZy5kcmFnSXRlbSA9PT0gXCJib3RoXCIpIHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmFmdGVyQ29sdW1uRHJvcCwgW2RhdGEsIGV2ZW50c10pO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5jb25maWcuZGF0YSA9IHRoaXMuX3ByZXBhcmVEYXRhKHRoaXMuZGF0YS5tYXAoaSA9PiBpKSk7XG5cdFx0XHR0aGlzLmRhdGEucGFyc2UodGhpcy5jb25maWcuZGF0YSk7XG5cdFx0fSk7XG5cdFx0dGhpcy5ldmVudHMub24oRHJhZ0V2ZW50cy5hZnRlckRyYWcsIChkYXRhLCBldmVudHMpID0+IHtcblx0XHRcdHVwZGF0ZXIoeyAkZHJhZ3RhcmdldDogdW5kZWZpbmVkIH0pO1xuXHRcdFx0aWYgKHRoaXMuZGF0YS5nZXRJdGVtKGRhdGEuc3RhcnQpKSB7XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlclJvd0RyYWcsIFtkYXRhLCBldmVudHNdKTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwiY29sdW1uXCIgfHwgdGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwiYm90aFwiKSB7XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlckNvbHVtbkRyYWcsIFtkYXRhLCBldmVudHNdKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuY29uZmlnLmRhdGEgPSB0aGlzLl9wcmVwYXJlRGF0YShcblx0XHRcdFx0dGhpcy5kYXRhIGluc3RhbmNlb2YgQXJyYXkgPyB0aGlzLmRhdGEubWFwKGkgPT4gaSkgOiB0aGlzLmRhdGFcblx0XHRcdCk7XG5cdFx0XHR0aGlzLmRhdGEucGFyc2UodGhpcy5jb25maWcuZGF0YSk7XG5cdFx0fSk7XG5cblx0XHQvLyBUT0RPOiBXaGVuIGludHJvZHVjaW5nIHRvdWNoIGV2ZW50cywgcmVtb3ZlIHN5c3RlbSBldmVudHNcblx0XHR0aGlzLmV2ZW50cy5vbihHcmlkRXZlbnRzLmNlbGxNb3VzZURvd24sIChyb3c6IElSb3csIGNvbDogSUNvbCwgZTogTW91c2VFdmVudCAmIFRvdWNoRXZlbnQpID0+IHtcblx0XHRcdGlmICghZS50YXJnZXRUb3VjaGVzKSB7XG5cdFx0XHRcdHRoaXMuX2RyYWdTdGFydChlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3RvdWNoLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fZHJhZ1N0YXJ0KGUpO1xuXHRcdFx0XHR9LCB0aGlzLl90b3VjaC5kdXJhdGlvbik7XG5cblx0XHRcdFx0aWYgKCF0aGlzLl90b3VjaC50aW1lU3RhbXApIHtcblx0XHRcdFx0XHR0aGlzLl90b3VjaC50aW1lU3RhbXAgPSArZS50aW1lU3RhbXAudG9GaXhlZCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IGRvdWJsZVRhcCA9XG5cdFx0XHRcdFx0XHR0aGlzLl90b3VjaC5kYmxEdXJhdGlvbiA+PSB0aGlzLl90b3VjaC50aW1lU3RhbXAgLSArZS50aW1lU3RhbXAudG9GaXhlZCgpO1xuXHRcdFx0XHRcdGlmIChkb3VibGVUYXApIHtcblx0XHRcdFx0XHRcdGlmICgoY29sLmVkaXRhYmxlICE9PSBmYWxzZSAmJiB0aGlzLmNvbmZpZy5lZGl0YWJsZSkgfHwgY29sLmVkaXRhYmxlKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZWRpdENlbGwocm93LmlkLCBjb2wuaWQsIGNvbC5lZGl0b3JUeXBlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdC8vIHRvIHNpbXVsYXRlIG9uIHRvdWNoIGRldmljZXNcblx0XHRcdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5jZWxsRGJsQ2xpY2ssIFtyb3csIGNvbCwgZV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl90b3VjaC50aW1lU3RhbXAgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuX3RvdWNoLnRpbWVTdGFtcCA9IG51bGw7XG5cdFx0XHRcdH0sIHRoaXMuX3RvdWNoLmRibER1cmF0aW9uKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLl9ldmVudHMub24oR3JpZFN5c3RlbUV2ZW50cy5jZWxsVG91Y2hNb3ZlLCAoX3JvdzogSVJvdywgX2NvbDogSUNvbCwgZTogVG91Y2hFdmVudCkgPT4ge1xuXHRcdFx0dGhpcy5fdG91Y2guc3RhcnQgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dGhpcy5fY2xlYXJUb3VjaFRpbWVyKCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5fZXZlbnRzLm9uKEdyaWRTeXN0ZW1FdmVudHMuY2VsbFRvdWNoRW5kLCAoKSA9PiB7XG5cdFx0XHR0aGlzLl90b3VjaC5zdGFydCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fY2xlYXJUb3VjaFRpbWVyKCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5ldmVudHMub24oR3JpZEV2ZW50cy5maWx0ZXJDaGFuZ2UsICh2YWw6IGFueSwgY29sSWQ6IElkLCBmaWx0ZXI6IHN0cmluZykgPT4ge1xuXHRcdFx0dmFsID0gdmFsID8/IFwiXCI7XG5cdFx0XHRpZiAodGhpcy5jb25maWcuYXV0b0VtcHR5Um93KSB7XG5cdFx0XHRcdGNvbnN0IGVtcHR5Um93ID0gdGhpcy5kYXRhLmZpbmQoeyBieTogXCIkZW1wdHlSb3dcIiwgbWF0Y2g6IHRydWUgfSk7XG5cdFx0XHRcdGlmIChlbXB0eVJvdykge1xuXHRcdFx0XHRcdHRoaXMuZGF0YS5yZW1vdmUoZW1wdHlSb3cuaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXRoaXMuX2FjdGl2ZUZpbHRlcnMpIHtcblx0XHRcdFx0dGhpcy5fYWN0aXZlRmlsdGVycyA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgY29sdW1uQ29uZmlnID0gdGhpcy5fZ2V0Q29sdW1uKGNvbElkKTtcblxuXHRcdFx0aWYgKHZhbCAhPT0gXCJcIikge1xuXHRcdFx0XHR0aGlzLl9hY3RpdmVGaWx0ZXJzW2NvbElkXSA9IHtcblx0XHRcdFx0XHRieTogY29sSWQsXG5cdFx0XHRcdFx0bWF0Y2g6IHZhbCxcblx0XHRcdFx0XHRjb21wYXJlOiB0aGlzLmNvbnRlbnRbZmlsdGVyXS5tYXRjaCxcblx0XHRcdFx0XHRtdWx0aTogY29sdW1uQ29uZmlnPy5lZGl0b3JUeXBlID09PSBcIm11bHRpc2VsZWN0XCIsXG5cdFx0XHRcdH07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5fYWN0aXZlRmlsdGVyc1tjb2xJZF07XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmRhdGEuZmlsdGVyKGkgPT4gaSk7XG5cdFx0XHRmb3IgKGNvbnN0IGNvbXBhcmUgaW4gdGhpcy5fYWN0aXZlRmlsdGVycykge1xuXHRcdFx0XHR0aGlzLmRhdGEuZmlsdGVyKHRoaXMuX2FjdGl2ZUZpbHRlcnNbY29tcGFyZV0sIHsgYWRkOiB0cnVlIH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKEdyaWRFdmVudHMuc2Nyb2xsLCBzY3JvbGxTdGF0ZSA9PiB7XG5cdFx0XHR0aGlzLl9zY3JvbGwgPSB7IHRvcDogc2Nyb2xsU3RhdGUueSwgbGVmdDogc2Nyb2xsU3RhdGUueCB9O1xuXHRcdFx0dGhpcy5lZGl0RW5kKCk7XG5cdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5ldmVudHMub24oR3JpZEV2ZW50cy5jZWxsRGJsQ2xpY2ssIChyb3csIGNvbCkgPT4ge1xuXHRcdFx0aWYgKChjb2wuZWRpdGFibGUgIT09IGZhbHNlICYmIHRoaXMuY29uZmlnLmVkaXRhYmxlKSB8fCBjb2wuZWRpdGFibGUpIHtcblx0XHRcdFx0dGhpcy5lZGl0Q2VsbChyb3cuaWQsIGNvbC5pZCwgY29sLmVkaXRvclR5cGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKEdyaWRFdmVudHMuYWZ0ZXJFZGl0RW5kLCAodmFsdWUsIGVSb3csIGVDb2wpID0+IHtcblx0XHRcdGlmIChcblx0XHRcdFx0dGhpcy5jb25maWcuJGVkaXRhYmxlPy5lZGl0b3IgJiZcblx0XHRcdFx0KHRoaXMuY29uZmlnLiRlZGl0YWJsZS5jb2wgIT09IGVDb2wuaWQgfHwgdGhpcy5jb25maWcuJGVkaXRhYmxlLnJvdyAhPT0gZVJvdy5pZClcblx0XHRcdClcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0bGV0IHJvdztcblx0XHRcdGxldCBjb2w7XG5cdFx0XHRpZiAoIXRoaXMuY29uZmlnLiRlZGl0YWJsZSkge1xuXHRcdFx0XHRyb3cgPSBlUm93LmlkO1xuXHRcdFx0XHRjb2wgPSBlQ29sLmlkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cm93ID0gdGhpcy5jb25maWcuJGVkaXRhYmxlLnJvdztcblx0XHRcdFx0Y29sID0gdGhpcy5jb25maWcuJGVkaXRhYmxlLmNvbDtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGl0ZW0gPSB0aGlzLmRhdGEuZ2V0SXRlbShyb3cpO1xuXHRcdFx0ZGVsZXRlIGl0ZW0uJGVtcHR5Um93O1xuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShyb3csIHsgLi4uaXRlbSwgW2NvbF06IHZhbHVlIH0pO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5jb25maWcuJGVkaXRhYmxlID0gbnVsbDtcblx0XHRcdHRoaXMuX2NoZWNrRmlsdGVycygpO1xuXHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKEdyaWRFdmVudHMuaGVhZGVyQ2VsbE1vdXNlRG93biwgKGNvbDogSUNvbCwgZTogTW91c2VFdmVudCAmIFRvdWNoRXZlbnQpID0+IHtcblx0XHRcdGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0Y29uc3QgcmVzaXplZENvbHVtbiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkaHhfcmVzaXplZFwiKTtcblxuXHRcdFx0aWYgKHJlc2l6ZWRDb2x1bW4gJiYgdGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmJlZm9yZVJlc2l6ZVN0YXJ0LCBbY29sLCBlXSkpIHtcblx0XHRcdFx0c3RhcnRSZXNpemUodGhpcywgcmVzaXplZENvbHVtbi50b1N0cmluZygpLCBlLCAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdFx0XHRcdHRoaXMuY29uZmlnLiRyZXNpemluZyA9IG51bGw7XG5cdFx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmFmdGVyUmVzaXplRW5kLCBbY29sLCBlXSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGUudGFyZ2V0VG91Y2hlcykge1xuXHRcdFx0XHRpZiAoIXRoaXMuX3RvdWNoLnRpbWVTdGFtcCkge1xuXHRcdFx0XHRcdHRoaXMuX3RvdWNoLnRpbWVTdGFtcCA9ICtlLnRpbWVTdGFtcC50b0ZpeGVkKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgZG91YmxlVGFwID1cblx0XHRcdFx0XHRcdHRoaXMuX3RvdWNoLmRibER1cmF0aW9uID49IHRoaXMuX3RvdWNoLnRpbWVTdGFtcCAtICtlLnRpbWVTdGFtcC50b0ZpeGVkKCk7XG5cdFx0XHRcdFx0aWYgKGRvdWJsZVRhcCkge1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0Ly8gdG8gc2ltdWxhdGUgb24gdG91Y2ggZGV2aWNlc1xuXHRcdFx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmhlYWRlckNlbGxEYmxDbGljaywgW2NvbCwgZV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl90b3VjaC50aW1lU3RhbXAgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuX3RvdWNoLnRpbWVTdGFtcCA9IG51bGw7XG5cdFx0XHRcdH0sIHRoaXMuX3RvdWNoLmRibER1cmF0aW9uKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLmV2ZW50cy5vbihHcmlkRXZlbnRzLmZvb3RlckNlbGxEYmxDbGljaywgKGNvbDogSUNvbCwgZTogYW55KSA9PiB7XG5cdFx0XHRpZiAoZS50YXJnZXRUb3VjaGVzKSB7XG5cdFx0XHRcdGlmICghdGhpcy5fdG91Y2gudGltZVN0YW1wKSB7XG5cdFx0XHRcdFx0dGhpcy5fdG91Y2gudGltZVN0YW1wID0gK2UudGltZVN0YW1wLnRvRml4ZWQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBkb3VibGVUYXAgPVxuXHRcdFx0XHRcdFx0dGhpcy5fdG91Y2guZGJsRHVyYXRpb24gPj0gdGhpcy5fdG91Y2gudGltZVN0YW1wIC0gK2UudGltZVN0YW1wLnRvRml4ZWQoKTtcblx0XHRcdFx0XHRpZiAoZG91YmxlVGFwKSB7XG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHQvLyB0byBzaW11bGF0ZSBvbiB0b3VjaCBkZXZpY2VzXG5cdFx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuZm9vdGVyQ2VsbERibENsaWNrLCBbY29sLCBlXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3RvdWNoLnRpbWVTdGFtcCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fdG91Y2gudGltZVN0YW1wID0gbnVsbDtcblx0XHRcdFx0fSwgdGhpcy5fdG91Y2guZGJsRHVyYXRpb24pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKEdyaWRFdmVudHMucmVzaXplLCAoKSA9PiB7XG5cdFx0XHR0aGlzLl9wYXJzZUNvbHVtbnMoKTtcblx0XHRcdHRoaXMuX2NoZWNrRmlsdGVycygpO1xuXHRcdH0pO1xuXHR9XG5cdHByb3RlY3RlZCBfYWRkRW1wdHlSb3coKSB7XG5cdFx0Y29uc3QgaWQgPSB0aGlzLmRhdGEuZ2V0SWQodGhpcy5kYXRhLmdldExlbmd0aCgpIC0gMSk7XG5cdFx0Y29uc3QgbGFzdFJvdyA9IHRoaXMuZGF0YS5nZXRJdGVtKGlkKTtcblx0XHRjb25zdCBjb2x1bW5zID0gdGhpcy5jb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKTtcblxuXHRcdGNvbnN0IGlzRW1wdHkgPSBpc1Jvd0VtcHR5KGxhc3RSb3cpO1xuXG5cdFx0aWYgKCFpc0VtcHR5KSB7XG5cdFx0XHR0aGlzLmRhdGEuYWRkKFxuXHRcdFx0XHRjb2x1bW5zLnJlZHVjZShcblx0XHRcdFx0XHQodG90YWwsIGNvbCkgPT4ge1xuXHRcdFx0XHRcdFx0dG90YWxbY29sLmlkXSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdG90YWw7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7ICRlbXB0eVJvdzogdHJ1ZSB9XG5cdFx0XHRcdClcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHByb3RlY3RlZCBfc29ydChieTogSWQsIGRpcj86IERpcnMsIHNvcnRBcz86IFNvcnRGdW5jdGlvbikge1xuXHRcdGlmICghZGlyKSB7XG5cdFx0XHRpZiAodGhpcy5fc29ydEJ5ID09PSBieSkge1xuXHRcdFx0XHR0aGlzLl9zb3J0RGlyID0gdGhpcy5fc29ydERpciA9PT0gXCJhc2NcIiA/IFwiZGVzY1wiIDogXCJhc2NcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3NvcnREaXIgPSBcImFzY1wiO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9zb3J0RGlyID0gZGlyO1xuXHRcdH1cblx0XHRjb25zdCBkZWZhdWx0QXMgPSBpdGVtID0+IHtcblx0XHRcdGNvbnN0IGNvbCA9IHRoaXMuZ2V0Q29sdW1uKGJ5KTtcblx0XHRcdGlmIChpdGVtICYmIGNvbC50eXBlID09PSBcImRhdGVcIikge1xuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIgPyBzdHJpbmdUb0RhdGUoaXRlbSwgY29sLmZvcm1hdCkuZ2V0VGltZSgpIDogaXRlbS5nZXRUaW1lKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gaXRlbSA/IGAke2l0ZW19YCA6IFwiXCI7XG5cdFx0fTtcblx0XHR0aGlzLl9zb3J0QnkgPSBieTtcblx0XHR0aGlzLmRhdGEuc29ydCh7XG5cdFx0XHRieSxcblx0XHRcdGRpcjogdGhpcy5fc29ydERpcixcblx0XHRcdGFzOiBzb3J0QXMgPz8gZGVmYXVsdEFzLFxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlclNvcnQsIFt0aGlzLmdldENvbHVtbihieSksIHRoaXMuX3NvcnREaXJdKTtcblx0fVxuXHRwcm90ZWN0ZWQgX2NsZWFyVG91Y2hUaW1lcigpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5fdG91Y2gudGltZXIpIHtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl90b3VjaC50aW1lcik7XG5cdFx0XHR0aGlzLl90b3VjaC50aW1lciA9IG51bGw7XG5cdFx0fVxuXHR9XG5cdHByb3RlY3RlZCBfY2hlY2tGaWx0ZXJzKCkge1xuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLl9maWx0ZXJEYXRhO1xuXHRcdGlmICghZGF0YSkgcmV0dXJuO1xuXHRcdHRoaXMuY29uZmlnLmNvbHVtbnMuZm9yRWFjaChjb2wgPT4ge1xuXHRcdFx0Y29sLmhlYWRlci5mb3JFYWNoKGNlbGwgPT4ge1xuXHRcdFx0XHRpZiAoY2VsbC5jb250ZW50ICYmIChjZWxsLmNvbnRlbnQgPT09IFwic2VsZWN0RmlsdGVyXCIgfHwgY2VsbC5jb250ZW50ID09PSBcImNvbWJvRmlsdGVyXCIpKSB7XG5cdFx0XHRcdFx0Y29uc3QgaGVhZGVyV2l0aEZpbHRlckNvbmZpZyA9IGNvbC5oZWFkZXIuZmluZChpID0+IGkuZmlsdGVyQ29uZmlnKTtcblx0XHRcdFx0XHRjb25zdCB1bmlxdWUgPSBnZXRVbmlxdWUoXG5cdFx0XHRcdFx0XHRkYXRhLFxuXHRcdFx0XHRcdFx0Y29sLmlkIGFzIHN0cmluZyxcblx0XHRcdFx0XHRcdGhlYWRlcldpdGhGaWx0ZXJDb25maWcgPyBoZWFkZXJXaXRoRmlsdGVyQ29uZmlnLmZpbHRlckNvbmZpZy5tdWx0aXNlbGVjdGlvbiA6IG51bGxcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGlmIChjb2wuJHVuaXF1ZURhdGEgJiYgY29sLiR1bmlxdWVEYXRhLmxlbmd0aCA+IHVuaXF1ZS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHVuaXF1ZS5mb3JFYWNoKGl0ZW0gPT4ge1xuXHRcdFx0XHRcdFx0XHRpZiAoIWNvbC4kdW5pcXVlRGF0YS5pbmNsdWRlcyhpdGVtKSkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbC4kdW5pcXVlRGF0YS5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29sLiR1bmlxdWVEYXRhID0gdW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0Zm9yIChjb25zdCBjb21wYXJlIGluIHRoaXMuX2FjdGl2ZUZpbHRlcnMpIHtcblx0XHRcdGNvbnN0IGNvbCA9IHRoaXMuY29uZmlnLmNvbHVtbnMuZmluZChpID0+IGkuaWQgPT09IGNvbXBhcmUpO1xuXHRcdFx0Y29uc3QgZmlsdGVyID0gY29sLmhlYWRlci5maW5kKGkgPT4gISFpLmNvbnRlbnQpO1xuXHRcdFx0bGV0IGV4aXN0ID0gZmFsc2U7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl9hY3RpdmVGaWx0ZXJzW2NvbXBhcmVdLm1hdGNoKSkge1xuXHRcdFx0XHRleGlzdCA9IHRoaXMuX2FjdGl2ZUZpbHRlcnNbY29tcGFyZV0ubWF0Y2gucmVkdWNlKChfLCBpKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGNvbC4kdW5pcXVlRGF0YS5maW5kKGogPT4gai50b1N0cmluZygpID09PSBpKSkgcmV0dXJuIHRydWU7XG5cdFx0XHRcdH0sIGZhbHNlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4aXN0ID0gY29sLiR1bmlxdWVEYXRhLmZpbmQoaSA9PiBpLnRvU3RyaW5nKCkgPT09IHRoaXMuX2FjdGl2ZUZpbHRlcnNbY29tcGFyZV0ubWF0Y2gpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGZpbHRlciAmJiAoZmlsdGVyLmNvbnRlbnQgPT09IFwic2VsZWN0RmlsdGVyXCIgfHwgZmlsdGVyLmNvbnRlbnQgPT09IFwiY29tYm9GaWx0ZXJcIikgJiYgIWV4aXN0KSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLl9hY3RpdmVGaWx0ZXJzW2NvbXBhcmVdO1xuXHRcdFx0XHR0aGlzLmRhdGEuZmlsdGVyKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmRhdGEuZmlsdGVyKHRoaXMuX2FjdGl2ZUZpbHRlcnNbY29tcGFyZV0sIHsgYWRkOiB0cnVlIH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgX2FkanVzdENvbHVtbnMoKSB7XG5cdFx0aWYgKFxuXHRcdFx0dHlwZW9mIHRoaXMuY29uZmlnLmFkanVzdCA9PT0gXCJib29sZWFuXCIgfHxcblx0XHRcdHRoaXMuY29uZmlnLmFkanVzdCA9PT0gXCJkYXRhXCIgfHxcblx0XHRcdHRoaXMuY29uZmlnLmFkanVzdCA9PT0gXCJoZWFkZXJcIiB8fFxuXHRcdFx0dGhpcy5jb25maWcuYWRqdXN0ID09PSBcImZvb3RlclwiXG5cdFx0KSB7XG5cdFx0XHRjb25zdCBjb2x1bW5zID0gdGhpcy5jb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKTtcblx0XHRcdGlmICghY29sdW1ucy5sZW5ndGgpIHJldHVybjtcblx0XHRcdGNvbnN0IGRhdGEgPVxuXHRcdFx0XHQhdGhpcy5jb25maWcuZGF0YSB8fCAhdGhpcy5jb25maWcuZGF0YS5sZW5ndGggPyB0aGlzLmRhdGEubWFwKHJvdyA9PiByb3cpIDogdGhpcy5jb25maWcuZGF0YTtcblx0XHRcdGNvbnN0IHRvdGFsQ29scyA9IHRoaXMuX2FkanVzdENvbHVtbnNXaWR0aChkYXRhLCBjb2x1bW5zKTtcblx0XHRcdHRoaXMuY29uZmlnLiR0b3RhbFdpZHRoID0gY29sdW1ucy5yZWR1Y2UoKHRvdGFsV2lkdGgsIGNvbHVtbikgPT4ge1xuXHRcdFx0XHRjb2x1bW4uJGZpeGVkID0gdHJ1ZTtcblx0XHRcdFx0Y29uc3QgbWF4ID0gY29sdW1uLm1heFdpZHRoO1xuXHRcdFx0XHRjb25zdCBtaW4gPSBjb2x1bW4ubWluV2lkdGg7XG5cdFx0XHRcdGNvbnN0IHdpZHRoID0gdG90YWxDb2xzW2NvbHVtbi5pZF07XG5cdFx0XHRcdGNvbHVtbi4kd2lkdGggPSB3aWR0aDtcblxuXHRcdFx0XHRpZiAobWF4ICYmIHdpZHRoID4gbWF4KSB7XG5cdFx0XHRcdFx0Y29sdW1uLiR3aWR0aCA9IG1heDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobWluICYmIGNvbHVtbi4kd2lkdGggPCBtaW4pIHtcblx0XHRcdFx0XHRjb2x1bW4uJHdpZHRoID0gbWluO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAodG90YWxXaWR0aCArPSBjb2x1bW4uJHdpZHRoKTtcblx0XHRcdH0sIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBjb2x1bW5zID0gdGhpcy5jb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuICYmIGNvbC5hZGp1c3QpO1xuXHRcdFx0aWYgKCFjb2x1bW5zLmxlbmd0aCkgcmV0dXJuO1xuXHRcdFx0Y29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG5cdFx0XHRcdHRoaXMuYWRqdXN0Q29sdW1uV2lkdGgoY29sLmlkLCBjb2wuYWRqdXN0KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgX3ByZXBhcmVEYXRhKGRhdGE6IElEYXRhSXRlbVtdIHwgSURhdGFDb2xsZWN0aW9uKSB7XG5cdFx0aWYgKHRoaXMuY29uZmlnLmF1dG9IZWlnaHQpIHRoaXMuY29uZmlnLmF1dG9IZWlnaHQgPSBmYWxzZTtcblxuXHRcdHRoaXMuX2FkanVzdENvbHVtbnMoKTtcblxuXHRcdHJldHVybiBkYXRhLm1hcChyb3cgPT4ge1xuXHRcdFx0cm93LiRoZWlnaHQgPSByb3cuaGVpZ2h0IHx8IHRoaXMuY29uZmlnLnJvd0hlaWdodDtcblx0XHRcdHJldHVybiByb3c7XG5cdFx0fSk7XG5cdH1cblx0cHJvdGVjdGVkIF9hZGp1c3RDb2x1bW5zV2lkdGgoXG5cdFx0cm93czogSVJvd1tdLFxuXHRcdGNvbHM6IElDb2xbXSxcblx0XHRhZGp1c3Q6IElBZGp1c3RCeSA9IHRoaXMuY29uZmlnLmFkanVzdFxuXHQpOiBJQ29sdW1uc1dpZHRoIHtcblx0XHRsZXQgY29sdW1uc1dpZHRoID0ge307XG5cdFx0aWYgKGFkanVzdCA9PT0gXCJoZWFkZXJcIiB8fCBhZGp1c3QgPT09IHRydWUpIHtcblx0XHRcdGNvbnN0IGN1cnJlbnRDb2xzID0gY29scy5maWx0ZXIoY29sID0+IGNvbC5oZWFkZXIpO1xuXHRcdFx0Y29uc3QgZGF0YSA9IGdldE1heENvbHNXaWR0aChcblx0XHRcdFx0dGhpcy5fcHJlcGFyZUNvbHVtbkRhdGEoY3VycmVudENvbHMsIFwiaGVhZGVyXCIpLFxuXHRcdFx0XHRjdXJyZW50Q29scyxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGZvbnQ6IFwiYm9sZCAxNC40cHggQXJpYWxcIixcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJoZWFkZXJcIlxuXHRcdFx0KTtcblx0XHRcdGlmIChkYXRhKSB7XG5cdFx0XHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XG5cdFx0XHRcdFx0Y29sdW1uc1dpZHRoID0gT2JqZWN0LmFzc2lnbihjb2x1bW5zV2lkdGgsIHtcblx0XHRcdFx0XHRcdFtrZXldOiArdmFsdWUgKyAoaXNTb3J0YWJsZSh0aGlzLmNvbmZpZywgdGhpcy5nZXRDb2x1bW4oa2V5KSkgPyAzNiA6IDE2KSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChhZGp1c3QgPT09IFwiZm9vdGVyXCIgfHwgYWRqdXN0ID09PSB0cnVlKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50Q29scyA9IGNvbHMuZmlsdGVyKGNvbCA9PiBjb2wuZm9vdGVyKTtcblx0XHRcdGNvbnN0IGRhdGEgPSBnZXRNYXhDb2xzV2lkdGgoXG5cdFx0XHRcdHRoaXMuX3ByZXBhcmVDb2x1bW5EYXRhKGN1cnJlbnRDb2xzLCBcImZvb3RlclwiKSxcblx0XHRcdFx0Y3VycmVudENvbHMsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRmb250OiBcImJvbGQgMTQuNHB4IEFyaWFsXCIsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZm9vdGVyXCJcblx0XHRcdCk7XG5cdFx0XHRpZiAoZGF0YSkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuXHRcdFx0XHRcdGlmICgoY29sdW1uc1dpZHRoW2tleV0gJiYgY29sdW1uc1dpZHRoW2tleV0gPCArdmFsdWUgKyAxNikgfHwgIWNvbHVtbnNXaWR0aFtrZXldKSB7XG5cdFx0XHRcdFx0XHRjb2x1bW5zV2lkdGggPSBPYmplY3QuYXNzaWduKGNvbHVtbnNXaWR0aCwge1xuXHRcdFx0XHRcdFx0XHRba2V5XTogK3ZhbHVlICsgMTYsXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoYWRqdXN0ID09PSBcImRhdGFcIiB8fCBhZGp1c3QgPT09IHRydWUpIHtcblx0XHRcdGNvbnN0IGRhdGEgPSBnZXRNYXhDb2xzV2lkdGgoXG5cdFx0XHRcdHJvd3MsXG5cdFx0XHRcdGNvbHMsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRmb250OiBcIm5vcm1hbCAxNC40cHggQXJpYWxcIixcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkYXRhXCJcblx0XHRcdCk7XG5cdFx0XHRpZiAoZGF0YSkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuXHRcdFx0XHRcdGlmICgoY29sdW1uc1dpZHRoW2tleV0gJiYgY29sdW1uc1dpZHRoW2tleV0gPCArdmFsdWUgKyAxNikgfHwgIWNvbHVtbnNXaWR0aFtrZXldKSB7XG5cdFx0XHRcdFx0XHRjb2x1bW5zV2lkdGggPSBPYmplY3QuYXNzaWduKGNvbHVtbnNXaWR0aCwge1xuXHRcdFx0XHRcdFx0XHRba2V5XTogK3ZhbHVlICsgMTYsXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY29sdW1uc1dpZHRoO1xuXHR9XG5cdHByb3RlY3RlZCBfcHJlcGFyZUNvbHVtbkRhdGEoZGF0YSwgdHlwZTogXCJoZWFkZXJcIiB8IFwiZm9vdGVyXCIpOiBJUm93W10ge1xuXHRcdGNvbnN0IHRvdGFsUm93ID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCByb3cgPSBbXTtcblx0XHRcdGZvciAobGV0IGsgPSAwOyBrIDwgZGF0YVtrXT8uW3R5cGVdLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdGNvbnN0IHJvd0RhdGEgPSB7fTtcblx0XHRcdFx0aWYgKGRhdGFbaV0/Llt0eXBlXVtrXT8udGV4dCkge1xuXHRcdFx0XHRcdHJvd0RhdGFbZGF0YVtpXS5pZF0gPSBkYXRhW2ldPy5bdHlwZV1ba10/LnRleHQgfHwgXCJcIjtcblx0XHRcdFx0XHRyb3cucHVzaChyb3dEYXRhKTtcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhW2ldPy5bdHlwZV1ba10/LmNvbnRlbnQpIHtcblx0XHRcdFx0XHRyb3dEYXRhW2RhdGFbaV0uaWRdID1cblx0XHRcdFx0XHRcdHRoaXMuY29udGVudFtkYXRhW2ldPy5bdHlwZV1ba10/LmNvbnRlbnRdLnRvSHRtbChcblx0XHRcdFx0XHRcdFx0dGhpcy5nZXRDb2x1bW4oZGF0YVtpXS5pZCksXG5cdFx0XHRcdFx0XHRcdHRoaXMuY29uZmlnIGFzIGFueVxuXHRcdFx0XHRcdFx0KSB8fCBcIlwiO1xuXHRcdFx0XHRcdHJvdy5wdXNoKHJvd0RhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IHJvdy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyb3dbal0pKSB7XG5cdFx0XHRcdFx0dG90YWxSb3dbal0gPSB7IC4uLnRvdGFsUm93W2pdIH0gfHwge307XG5cdFx0XHRcdFx0dG90YWxSb3dbal0gPSBPYmplY3QuYXNzaWduKHRvdGFsUm93W2pdLCB7IFtrZXldOiB2YWx1ZSB9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdG90YWxSb3c7XG5cdH1cblx0cHJpdmF0ZSBfZHJhZ1N0YXJ0KGU6IGFueSk6IHZvaWQge1xuXHRcdGlmIChcblx0XHRcdHRoaXMuY29uZmlnLmRyYWdNb2RlICYmXG5cdFx0XHQodGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwicm93XCIgfHwgdGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwiYm90aFwiKSAmJlxuXHRcdFx0IXRoaXMuY29uZmlnLiRlZGl0YWJsZVxuXHRcdCkge1xuXHRcdFx0Y29uc3QgY29sdW1uID0gdGhpcy5fZ2V0Q29sdW1uKGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRoeF9jb2xfaWRcIikpO1xuXHRcdFx0aWYgKGNvbHVtbj8uZHJhZ2dhYmxlID09PSBmYWxzZSkgcmV0dXJuO1xuXHRcdFx0Y29uc3QgaXRlbSA9IGxvY2F0ZU5vZGUoZSwgXCJkaHhfaWRcIik7XG5cdFx0XHRjb25zdCBpdGVtSWQgPSBpdGVtICYmIGl0ZW0uZ2V0QXR0cmlidXRlKFwiZGh4X2lkXCIpO1xuXHRcdFx0aWYgKGUudGFyZ2V0VG91Y2hlcykge1xuXHRcdFx0XHR0aGlzLl90b3VjaC5zdGFydCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZHJhZ01hbmFnZXIub25Nb3VzZURvd24oZSwgW2l0ZW1JZF0pO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9nZXRDb2x1bW4oY29sSWQ6IElkKTogSUNvbCB7XG5cdFx0Zm9yIChjb25zdCBjb2wgb2YgdGhpcy5jb25maWcuY29sdW1ucykge1xuXHRcdFx0aWYgKGNvbC5pZCA9PSBjb2xJZCkge1xuXHRcdFx0XHRyZXR1cm4gY29sO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9pbml0KCkge1xuXHRcdHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50U3lzdGVtKHRoaXMpO1xuXHRcdHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudFN5c3RlbSh0aGlzKTtcblx0XHR0aGlzLl9hdHRhY2hEYXRhQ29sbGVjdGlvbigpO1xuXHRcdHRoaXMuZXhwb3J0ID0gbmV3IEV4cG9ydGVyKHRoaXMpO1xuXHRcdHRoaXMuX3NldEV2ZW50SGFuZGxlcnMoKTtcblx0fVxuXHRwcml2YXRlIF9hdHRhY2hEYXRhQ29sbGVjdGlvbigpIHtcblx0XHRjb25zdCBwcmVwID0gZGF0YSA9PiB7XG5cdFx0XHRpZiAoZGF0YS5zcGFucykge1xuXHRcdFx0XHR0aGlzLmNvbmZpZy5zcGFucyA9IGRhdGEuc3BhbnM7XG5cdFx0XHRcdGRhdGEgPSBkYXRhLmRhdGE7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9O1xuXHRcdGlmICh0aGlzLmNvbmZpZy5kYXRhIGluc3RhbmNlb2YgRGF0YUNvbGxlY3Rpb24pIHtcblx0XHRcdHRoaXMuZGF0YSA9IHRoaXMuY29uZmlnLmRhdGE7XG5cdFx0XHR0aGlzLmNvbmZpZy5kYXRhID0gdGhpcy5kYXRhLnNlcmlhbGl6ZSgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9jcmVhdGVDb2xsZWN0aW9uKHByZXApO1xuXHR9XG5cdHByaXZhdGUgX3NldE1hcmtzKGNvbDogSUNvbCwgZnVuYzogYW55KSB7XG5cdFx0Y29uc3QgY29sQ2VsbHMgPSB0aGlzLmRhdGEubWFwKHJvdyA9PiAoe1xuXHRcdFx0aWQ6IHJvdy5pZCxcblx0XHRcdGRhdGE6IHJvd1tjb2wuaWRdLFxuXHRcdFx0cm93LFxuXHRcdH0pKTtcblx0XHRjb25zdCBjb2xDZWxsc0RhdGEgPSB0aGlzLmRhdGEubWFwKHJvdyA9PiByb3dbY29sLmlkXSk7XG5cdFx0Zm9yIChjb25zdCBjZWxsIG9mIGNvbENlbGxzKSB7XG5cdFx0XHRjb25zdCBjc3MgPSBmdW5jKGNlbGwuZGF0YSwgY29sQ2VsbHNEYXRhLCBjZWxsLnJvdywgY29sKTtcblx0XHRcdGlmIChjc3MpIHtcblx0XHRcdFx0Y29sLiRjZWxsQ3NzID0gY29sLiRjZWxsQ3NzIHx8IHt9O1xuXHRcdFx0XHRjb25zdCBjZWxsQ3NzID0gKGNvbC4kY2VsbENzc1tjZWxsLmlkXSB8fCBcIlwiKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdGNzcy5zcGxpdChcIiBcIikubWFwKGl0ZW0gPT4ge1xuXHRcdFx0XHRcdGlmICghY2VsbENzcy5pbmNsdWRlcyhpdGVtKSkge1xuXHRcdFx0XHRcdFx0Y2VsbENzcy5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNvbC4kY2VsbENzc1tjZWxsLmlkXSA9IGNlbGxDc3Muam9pbihcIiBcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX2NoZWNrTWFya3MoKSB7XG5cdFx0dGhpcy5jb25maWcuY29sdW1ucy5tYXAoY29sID0+IHtcblx0XHRcdGNvbnN0IG1hcmsgPSBjb2wubWFyaztcblx0XHRcdGlmIChtYXJrKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgbWFyayA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0dGhpcy5fc2V0TWFya3MoY29sLCBtYXJrKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9zZXRNYXJrcyhjb2wsIChlbCwgYykgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgZGF0YSA9IFtdO1xuXHRcdFx0XHRcdFx0Yy5mb3JFYWNoKGl0ZW0gPT4ge1xuXHRcdFx0XHRcdFx0XHRpZiAoaXRlbSAhPT0gbnVsbCAmJiBpdGVtICE9PSB1bmRlZmluZWQgJiYgaXRlbSAhPT0gXCJcIikge1xuXHRcdFx0XHRcdFx0XHRcdGRhdGEucHVzaChwYXJzZUZsb2F0KGl0ZW0pKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRjb25zdCBtaW4gPSBnZXRNaW5BcnJheU55bWJlcihkYXRhKTtcblx0XHRcdFx0XHRcdGNvbnN0IG1heCA9IGdldE1heEFycmF5TnltYmVyKGRhdGEpO1xuXHRcdFx0XHRcdFx0aWYgKG1hcmsubWF4ICYmIG1heCA9PT0gcGFyc2VGbG9hdChlbCkpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG1hcmsubWF4O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKG1hcmsubWluICYmIG1pbiA9PT0gcGFyc2VGbG9hdChlbCkpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG1hcmsubWluO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBfcmVtb3ZlTWFya3MoKSB7XG5cdFx0dGhpcy5jb25maWcuY29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG5cdFx0XHRpZiAoY29sLm1hcmspIHtcblx0XHRcdFx0Y29sLiRjZWxsQ3NzID0ge307XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0Ly8gW3RvZG9dIG1ha2UgbW9yZSBzbWFydCB0eXBlIGRldGVjdGlvblxuXHRwcml2YXRlIF9kZXRlY3RDb2xzVHlwZXMoKSB7XG5cdFx0dGhpcy5jb25maWcuY29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG5cdFx0XHRpZiAoY29sLnR5cGUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbDtcblx0XHRcdH1cblx0XHRcdGlmIChjb2wuZm9ybWF0KSB7XG5cdFx0XHRcdGNvbC50eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdFx0cmV0dXJuIGNvbDtcblx0XHRcdH1cblx0XHRcdGlmICghY29sLnR5cGUpIHtcblx0XHRcdFx0Y29sLnR5cGUgPSBcInN0cmluZ1wiO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdHByaXZhdGUgX2Rlc3Ryb3lDb250ZW50KCkge1xuXHRcdGZvciAoY29uc3QgY29udGVudE5hbWUgaW4gdGhpcy5jb250ZW50KSB7XG5cdFx0XHRpZiAoY29udGVudE5hbWUgPT09IFwiY29tYm9GaWx0ZXJcIikge1xuXHRcdFx0XHR0aGlzLmNvbnRlbnRbY29udGVudE5hbWVdLmRlc3Ryb3koKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfcmVuZGVyKCkge1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRwcml2YXRlIF9pbml0SG90S2V5KCkge1xuXHRcdGNvbnN0IGhhbmRsZXJzID0gZ2V0S2V5c0hhbmRsZXJzKHRoaXMpO1xuXG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gaGFuZGxlcnMpIHtcblx0XHRcdHRoaXMua2V5TWFuYWdlci5hZGRIb3RLZXkoa2V5LCBoYW5kbGVyc1trZXldKTtcblx0XHR9XG5cblx0XHRmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmNvbmZpZy5ob3RrZXlzKSB7XG5cdFx0XHR0aGlzLmtleU1hbmFnZXIuYWRkSG90S2V5KGtleSwgdGhpcy5jb25maWcuaG90a2V5c1trZXldKTtcblx0XHR9XG5cdH1cbn1cbiIsImltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi9HcmlkXCI7XG5pbXBvcnQgeyBJR3JpZENvbmZpZywgSUNvbCwgR3JpZEV2ZW50cywgR3JpZFN5c3RlbUV2ZW50cywgSVJvdywgSVByb0dyaWQgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgRGF0YUV2ZW50cywgZHJhZ01hbmFnZXIsIElEYXRhQ29sbGVjdGlvbiwgSURhdGFJdGVtLCBpc1RyZWVDb2xsZWN0aW9uIH0gZnJvbSBcIkBkaHgvdHMtZGF0YVwiO1xuaW1wb3J0IHsgbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lLCB0b05vZGUgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vaHRtbFwiO1xuaW1wb3J0IHsgZ2V0Q2FsY3VsYXRlZFJvd0hlaWdodCwgZ2V0TWF4Um93SGVpZ2h0IH0gZnJvbSBcIi4vaGVscGVycy9kYXRhXCI7XG5pbXBvcnQgeyBnZXRSZW5kZXJDb25maWcsIHByb1JlbmRlciB9IGZyb20gXCIuL3VpL3JlbmRlclwiO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgU2Nyb2xsVmlldyB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9TY3JvbGxWaWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9HcmlkIGV4dGVuZHMgR3JpZCBpbXBsZW1lbnRzIElQcm9HcmlkIHtcblx0cHVibGljIHNjcm9sbFZpZXc6IFNjcm9sbFZpZXc7XG5cblx0Y29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IHN0cmluZywgY29uZmlnPzogSUdyaWRDb25maWcpIHtcblx0XHRzdXBlcihjb250YWluZXIsIHtcblx0XHRcdGF1dG9IZWlnaHQ6IGZhbHNlLFxuXHRcdFx0Li4uY29uZmlnLFxuXHRcdH0pO1xuXHRcdHRoaXMuc2Nyb2xsVmlldyA9IG5ldyBTY3JvbGxWaWV3KCgpID0+IHRoaXMuZ2V0Um9vdFZpZXcoKSwge1xuXHRcdFx0c2Nyb2xsSGFuZGxlcjogZSA9PlxuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuc2Nyb2xsLCBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0eTogZS50YXJnZXQuc2Nyb2xsVG9wLFxuXHRcdFx0XHRcdFx0eDogZS50YXJnZXQuc2Nyb2xsTGVmdCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdKSxcblx0XHR9KTtcblx0fVxuXG5cdHByb3RlY3RlZCBfY3JlYXRlVmlldygpIHtcblx0XHRyZXR1cm4gY3JlYXRlKFxuXHRcdFx0e1xuXHRcdFx0XHRyZW5kZXI6ICh2bSwgb2JqKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb1JlbmRlcih2bSwgb2JqLCB0aGlzLl9odG1sRXZlbnRzLCB0aGlzLnNlbGVjdGlvbiwgdGhpcy5fdWlkKTtcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHR0aGlzXG5cdFx0KTtcblx0fVxuXG5cdHByb3RlY3RlZCBfc2V0RXZlbnRIYW5kbGVycygpIHtcblx0XHRzdXBlci5fc2V0RXZlbnRIYW5kbGVycygpO1xuXG5cdFx0dGhpcy5ldmVudHMub24oR3JpZEV2ZW50cy5oZWFkZXJDZWxsTW91c2VEb3duLCAoY29sOiBJQ29sLCBlOiBUb3VjaEV2ZW50ICYgTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0aWYgKCFlLnRhcmdldFRvdWNoZXMpIHtcblx0XHRcdFx0dGhpcy5fZHJhZ1N0YXJ0Q29sdW1uKGUsIGNvbCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl90b3VjaC50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuX2RyYWdTdGFydENvbHVtbihlLCBjb2wpO1xuXHRcdFx0XHR9LCB0aGlzLl90b3VjaC5kdXJhdGlvbik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLl9ldmVudHMub24oR3JpZFN5c3RlbUV2ZW50cy5oZWFkZXJDZWxsVG91Y2hNb3ZlLCAoX2NvbDogSUNvbCwgZTogVG91Y2hFdmVudCkgPT4ge1xuXHRcdFx0dGhpcy5fdG91Y2guc3RhcnQgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dGhpcy5fY2xlYXJUb3VjaFRpbWVyKCk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLl9ldmVudHMub24oR3JpZFN5c3RlbUV2ZW50cy5oZWFkZXJDZWxsVG91Y2hFbmQsICgpID0+IHtcblx0XHRcdHRoaXMuX3RvdWNoLnN0YXJ0ID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9jbGVhclRvdWNoVGltZXIoKTtcblx0XHR9KTtcblxuXHRcdHRoaXMuZXZlbnRzLm9uKEdyaWRFdmVudHMucmVzaXplLCAoKSA9PiB7XG5cdFx0XHR0aGlzLl9wYXJzZUNvbHVtbnMoKTtcblx0XHRcdHRoaXMuX2NoZWNrRmlsdGVycygpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5ldmVudHMub24oR3JpZEV2ZW50cy5hZnRlclJlc2l6ZUVuZCwgKCkgPT4ge1xuXHRcdFx0aWYgKHRoaXMuY29uZmlnLmF1dG9IZWlnaHQpIHtcblx0XHRcdFx0dGhpcy5jb25maWcuZGF0YSA9IHRoaXMuZGF0YS5tYXAocm93ID0+IHtcblx0XHRcdFx0XHRjb25zdCBoZWlnaHQgPSBnZXRNYXhSb3dIZWlnaHQocm93LCB0aGlzLmNvbmZpZy5jb2x1bW5zKTtcblx0XHRcdFx0XHRyb3cuJGhlaWdodCA9IGdldENhbGN1bGF0ZWRSb3dIZWlnaHQoaGVpZ2h0LCB7XG5cdFx0XHRcdFx0XHRyb3dIZWlnaHQ6IHRoaXMuY29uZmlnLnJvd0hlaWdodCxcblx0XHRcdFx0XHRcdHBhZGRpbmc6IDgsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0cmV0dXJuIHJvdztcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLmV2ZW50cy5vbihHcmlkRXZlbnRzLmFmdGVyUm93UmVzaXplLCAocm93OiBJUm93LCBfZTogRXZlbnQsIGN1cnJlbnRIZWlnaHQ6IG51bWJlcikgPT4ge1xuXHRcdFx0Y29uc3QgeyBpZCwgaGVpZ2h0LCAkaGVpZ2h0IH0gPSB0aGlzLmRhdGEuZ2V0SXRlbShyb3cuaWQgYXMgc3RyaW5nKTtcblx0XHRcdGlmIChoZWlnaHQgJiYgaGVpZ2h0ICE9PSAkaGVpZ2h0KSB7XG5cdFx0XHRcdHRoaXMuZGF0YS51cGRhdGUoaWQsIHsgaGVpZ2h0OiBjdXJyZW50SGVpZ2h0IH0pO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShpZCwgeyAkaGVpZ2h0OiBjdXJyZW50SGVpZ2h0IH0sIHRydWUpO1xuXG5cdFx0XHR0aGlzLmNvbmZpZy5kYXRhID0gdGhpcy5kYXRhLm1hcChyb3cgPT4gcm93KTtcblx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHR9KTtcblxuXHRcdHRoaXMuZXZlbnRzLm9uKEdyaWRFdmVudHMuc2Nyb2xsLCAoKSA9PiB7XG5cdFx0XHR0aGlzLl9sYXp5TG9hZCgpO1xuXHRcdH0pO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9wcmVwYXJlRGF0YShkYXRhOiBJRGF0YUl0ZW1bXSB8IElEYXRhQ29sbGVjdGlvbikge1xuXHRcdHRoaXMuX2FkanVzdENvbHVtbnMoKTtcblxuXHRcdGxldCBjb252ZXJ0ZWREYXRhO1xuXHRcdGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzVHJlZUNvbGxlY3Rpb24oZGF0YSkpIHtcblx0XHRcdGNvbnZlcnRlZERhdGEgPSBkYXRhO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBpbml0RGF0YSA9IGRhdGEuZ2V0SW5pdGlhbERhdGEoKSB8fCBbXTtcblx0XHRcdGNvbnZlcnRlZERhdGEgPSBpbml0RGF0YS5sZW5ndGggIT09IDAgPyBpbml0RGF0YSA6IGRhdGEuZ2V0UmF3RGF0YSgwLCBkYXRhLmdldExlbmd0aCgpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29udmVydGVkRGF0YS5tYXAoKHJvdzogSVJvdykgPT4ge1xuXHRcdFx0aWYgKHRoaXMuY29uZmlnLmF1dG9IZWlnaHQgJiYgdHlwZW9mIHJvdy5oZWlnaHQgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0Y29uc3QgaGVpZ2h0ID0gZ2V0TWF4Um93SGVpZ2h0KHJvdywgdGhpcy5jb25maWcuY29sdW1ucyk7XG5cdFx0XHRcdHJvdy4kaGVpZ2h0ID1cblx0XHRcdFx0XHRnZXRDYWxjdWxhdGVkUm93SGVpZ2h0KGhlaWdodCwge1xuXHRcdFx0XHRcdFx0cm93SGVpZ2h0OiB0aGlzLmNvbmZpZy5yb3dIZWlnaHQsXG5cdFx0XHRcdFx0XHRwYWRkaW5nOiA4LFxuXHRcdFx0XHRcdH0pIHx8IHRoaXMuY29uZmlnLnJvd0hlaWdodDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJvdy4kaGVpZ2h0ID0gcm93LmhlaWdodCB8fCB0aGlzLmNvbmZpZy5yb3dIZWlnaHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcm93O1xuXHRcdH0pO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9wcmVwYXJlRGF0YUZyb21UbyhkYXRhOiBJRGF0YUNvbGxlY3Rpb24sIGZyb206IG51bWJlciwgdG86IG51bWJlcikge1xuXHRcdHJldHVybiBkYXRhLm1hcFJhbmdlKGZyb20sIHRvLCAocm93OiBJUm93KSA9PiB7XG5cdFx0XHRjb25zdCBoZWlnaHQgPSBnZXRNYXhSb3dIZWlnaHQocm93LCB0aGlzLmNvbmZpZy5jb2x1bW5zKTtcblx0XHRcdHJvdy4kaGVpZ2h0ID1cblx0XHRcdFx0Z2V0Q2FsY3VsYXRlZFJvd0hlaWdodChoZWlnaHQsIHtcblx0XHRcdFx0XHRyb3dIZWlnaHQ6IHRoaXMuY29uZmlnLnJvd0hlaWdodCxcblx0XHRcdFx0XHRwYWRkaW5nOiA4LFxuXHRcdFx0XHR9KSB8fCB0aGlzLmNvbmZpZy5yb3dIZWlnaHQ7XG5cdFx0XHRyZXR1cm4gcm93O1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBfbGF6eUxvYWQoKTogdm9pZCB7XG5cdFx0Y29uc3QgcHJveHkgPSB0aGlzLmRhdGEuZGF0YVByb3h5O1xuXG5cdFx0aWYgKHByb3h5ICYmIHByb3h5LmNvbmZpZykge1xuXHRcdFx0Y29uc3QgZGF0YSA9IHRoaXMuZGF0YS5nZXRSYXdEYXRhKDAsIC0xLCBudWxsLCAyKTtcblx0XHRcdGNvbnN0IHJlbmRlckNvbmZpZyA9IGdldFJlbmRlckNvbmZpZyh0aGlzLCBkYXRhLCB7XG5cdFx0XHRcdHdpZHRoOiB0aGlzLmNvbmZpZy53aWR0aCxcblx0XHRcdFx0aGVpZ2h0OiB0aGlzLmNvbmZpZy5oZWlnaHQsXG5cdFx0XHR9KTtcblxuXHRcdFx0Y29uc3QgZnJvbSA9IHRoaXMuZGF0YS5nZXRJbmRleChyZW5kZXJDb25maWcuY3VycmVudFJvd3NbMF0/LmlkLnRvU3RyaW5nKCkpO1xuXHRcdFx0Y29uc3QgdG8gPSB0aGlzLmRhdGEuZ2V0SW5kZXgoXG5cdFx0XHRcdHJlbmRlckNvbmZpZy5jdXJyZW50Um93c1tyZW5kZXJDb25maWcuY3VycmVudFJvd3MubGVuZ3RoIC0gMV0/LmlkLnRvU3RyaW5nKClcblx0XHRcdCk7XG5cblx0XHRcdGlmICghdGhpcy5kYXRhLmlzRGF0YUxvYWRlZChmcm9tLCB0bykgJiYgdGhpcy5kYXRhLmV2ZW50cy5maXJlKERhdGFFdmVudHMuYmVmb3JlTGF6eUxvYWQsIFtdKSkge1xuXHRcdFx0XHRwcm94eS51cGRhdGVVcmwobnVsbCwgeyBmcm9tLCBsaW1pdDogcHJveHkuY29uZmlnLmxpbWl0IH0pO1xuXHRcdFx0XHR0aGlzLmRhdGEubG9hZChwcm94eSkudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5jb25maWcuYXV0b0hlaWdodCAmJiB0aGlzLl9wcmVwYXJlRGF0YUZyb21Ubyh0aGlzLmRhdGEsIGZyb20sIHRvKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBfZ2V0Q29sdW1uR2hvc3QoY29sOiBJQ29sKSB7XG5cdFx0Y29uc3QgY29udGFpbmVyID0gdGhpcy5fY29udGFpbmVyIHx8IHRvTm9kZSh0aGlzLl91aWQpO1xuXHRcdGNvbnN0IGhlYWRlclJvdyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLmRoeF9oZWFkZXItcm93XCIpO1xuXHRcdGNvbnN0IGNvbEhlYWRlckNlbGwgPSBoZWFkZXJSb3cucXVlcnlTZWxlY3RvcihgLmRoeF9ncmlkLWhlYWRlci1jZWxsW2RoeF9pZD1cIiR7Y29sLmlkfVwiXWApO1xuXHRcdGNvbnN0IGhlYWRlckNvbHMgPSBBcnJheS5mcm9tKGhlYWRlclJvdy5jaGlsZE5vZGVzKTtcblx0XHRjb25zdCBuID0gaGVhZGVyQ29scy5pbmRleE9mKGNvbEhlYWRlckNlbGwpICsgMTtcblxuXHRcdGNvbnN0IGNvbEhlYWRlckNlbGxzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXG5cdFx0XHRgLmRoeF9ncmlkLWhlYWRlci1jZWxsW2RoeF9pZD1cIiR7Y29sLmlkfVwiXTpub3QoLmRoeF9zcGFuLWNlbGwpYFxuXHRcdCk7XG5cblx0XHRjb25zdCBnaG9zdEdyaWROb2RlczogTm9kZUxpc3QgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcblx0XHRcdGAuZGh4X2dyaWRfZGF0YSAuZGh4X2dyaWQtY2VsbDpudGgtY2hpbGQoJHtufSlgXG5cdFx0KTtcblx0XHRjb25zdCBnaG9zdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0Y29sSGVhZGVyQ2VsbHMuZm9yRWFjaChub2RlID0+IGdob3N0Q29udGFpbmVyLmFwcGVuZENoaWxkKG5vZGUuY2xvbmVOb2RlKHRydWUpKSk7XG5cdFx0Z2hvc3RHcmlkTm9kZXMuZm9yRWFjaChub2RlID0+IGdob3N0Q29udGFpbmVyLmFwcGVuZENoaWxkKG5vZGUuY2xvbmVOb2RlKHRydWUpKSk7XG5cdFx0cmV0dXJuIGdob3N0Q29udGFpbmVyO1xuXHR9XG5cblx0cHJpdmF0ZSBfZHJhZ1N0YXJ0Q29sdW1uKGU6IGFueSwgY29sOiBJQ29sKTogdm9pZCB7XG5cdFx0Y29uc3QgdGFyZ2V0ID0gZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0Y29uc3QgdGVzdEN1c3RvbSA9IChlbDogSFRNTEVsZW1lbnQpID0+IGVsLmNsYXNzTGlzdC5jb250YWlucyhcImRoeF9ncmlkLWN1c3RvbS1jb250ZW50LWNlbGxcIik7XG5cdFx0Y29uc3QgaXNDdXN0b20gPSB0ZXN0Q3VzdG9tKHRhcmdldC5wYXJlbnRFbGVtZW50KSB8fCB0ZXN0Q3VzdG9tKHRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQpO1xuXHRcdGlmIChcblx0XHRcdCFpc0N1c3RvbSAmJlxuXHRcdFx0KGNvbC5kcmFnZ2FibGUgfHxcblx0XHRcdFx0KHRoaXMuY29uZmlnLmRyYWdJdGVtID09PSBcImNvbHVtblwiICYmIGNvbC5kcmFnZ2FibGUgIT09IGZhbHNlKSB8fFxuXHRcdFx0XHQodGhpcy5jb25maWcuZHJhZ0l0ZW0gPT09IFwiYm90aFwiICYmIGNvbC5kcmFnZ2FibGUgIT09IGZhbHNlKSkgJiZcblx0XHRcdCFsb2NhdGVOb2RlQnlDbGFzc05hbWUoZSwgXCJkaHhfcmVzaXplcl9ncmlwX3dyYXBcIilcblx0XHQpIHtcblx0XHRcdGlmIChlLnRhcmdldFRvdWNoZXMpIHtcblx0XHRcdFx0dGhpcy5fdG91Y2guc3RhcnQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0ZHJhZ01hbmFnZXIub25Nb3VzZURvd24oZSwgW2NvbC5pZF0sIFt0aGlzLl9nZXRDb2x1bW5HaG9zdChjb2wpXSk7XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgeyBhd2FpdFJlZHJhdywgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBjb21wYXJlLCBmaW5kSW5kZXggfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHsgRGF0YUV2ZW50cyB9IGZyb20gXCJAZGh4L3RzLWRhdGFcIjtcbmltcG9ydCB7IElFdmVudFN5c3RlbSwgRXZlbnRTeXN0ZW0gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZXZlbnRzXCI7XG5pbXBvcnQge1xuXHRHcmlkRXZlbnRzLFxuXHRJQ2VsbCxcblx0SUdyaWQsXG5cdElTZWxlY3Rpb24sXG5cdElSb3csXG5cdElDb2wsXG5cdElTZWxlY3Rpb25UeXBlLFxuXHRHcmlkU2VsZWN0aW9uRXZlbnRzLFxuXHRJR3JpZFNlbGVjdGlvbkV2ZW50c0hhbmRsZXJzTWFwLFxuXHRJU2VsZWN0aW9uQ29uZmlnLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgSWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcbmltcG9ydCB7IGZvY3VzTWFuYWdlciB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9Gb2N1c01hbmFnZXJcIjtcblxuZXhwb3J0IGNsYXNzIFNlbGVjdGlvbiBpbXBsZW1lbnRzIElTZWxlY3Rpb24ge1xuXHRwdWJsaWMgZXZlbnRzOiBJRXZlbnRTeXN0ZW08R3JpZFNlbGVjdGlvbkV2ZW50cywgSUdyaWRTZWxlY3Rpb25FdmVudHNIYW5kbGVyc01hcD47XG5cdHB1YmxpYyBjb25maWc6IElTZWxlY3Rpb25Db25maWc7XG5cblx0cHJvdGVjdGVkIF9ncmlkOiBJR3JpZDtcblx0cHJpdmF0ZSBfZ3JpZElkOiBJZDtcblx0cHJvdGVjdGVkIF9zZWxlY3RlZENlbGw6IElDZWxsO1xuXHRwcm90ZWN0ZWQgX29sZFNlbGVjdGVkQ2VsbDogSUNlbGw7XG5cdHByb3RlY3RlZCBfc2VsZWN0ZWRDZWxsczogSUNlbGxbXTtcblx0cHJvdGVjdGVkIF90eXBlOiBJU2VsZWN0aW9uVHlwZTtcblx0cHJvdGVjdGVkIF9tdWx0aXNlbGVjdGlvbjogYm9vbGVhbjtcblxuXHRjb25zdHJ1Y3RvcihncmlkOiBJR3JpZCwgY29uZmlnPzogSVNlbGVjdGlvbkNvbmZpZywgZXZlbnRzPzogSUV2ZW50U3lzdGVtPGFueT4sIGdyaWRJZD86IElkKSB7XG5cdFx0Y29uc3QgdHlwZXMgPSBbXCJjZWxsXCIsIFwicm93XCIsIFwiY29tcGxleFwiXTtcblxuXHRcdHRoaXMuX2dyaWQgPSBncmlkO1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHRcdHRoaXMuX2dyaWRJZCA9IGdyaWRJZDtcblx0XHR0aGlzLl9zZWxlY3RlZENlbGwgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5fb2xkU2VsZWN0ZWRDZWxsID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuX3NlbGVjdGVkQ2VsbHMgPSBbXTtcblx0XHR0aGlzLl90eXBlID0gdHlwZXMuaW5jbHVkZXModGhpcy5fZ3JpZC5jb25maWcuc2VsZWN0aW9uKSA/IHRoaXMuX2dyaWQuY29uZmlnLnNlbGVjdGlvbiA6IFwiY29tcGxleFwiO1xuXHRcdHRoaXMuX211bHRpc2VsZWN0aW9uID0gZ3JpZC5jb25maWcubXVsdGlzZWxlY3Rpb24gJiYgdGhpcy5fdHlwZSAhPT0gXCJjb21wbGV4XCI7XG5cblx0XHR0aGlzLmV2ZW50cyA9IGV2ZW50cyB8fCBuZXcgRXZlbnRTeXN0ZW08R3JpZFNlbGVjdGlvbkV2ZW50cz4odGhpcyk7XG5cdFx0dGhpcy5faW5pdCgpO1xuXHR9XG5cdHNldENlbGwocm93PzogYW55LCBjb2w/OiBhbnksIGN0cmxVcCA9IGZhbHNlLCBzaGlmdFVwID0gZmFsc2UpIHtcblx0XHRpZiAodGhpcy5fZ3JpZElkICYmIGZvY3VzTWFuYWdlci5nZXRGb2N1c0lkKCkgIT09IHRoaXMuX2dyaWRJZCkge1xuXHRcdFx0Zm9jdXNNYW5hZ2VyLnNldEZvY3VzSWQodGhpcy5fZ3JpZElkIGFzIHN0cmluZyk7XG5cdFx0fVxuXHRcdGlmIChcblx0XHRcdHRoaXMuY29uZmlnLmRpc2FibGVkIHx8XG5cdFx0XHR0aGlzLl9ncmlkLmNvbmZpZy4kZWRpdGFibGUgfHxcblx0XHRcdCghdGhpcy5fbXVsdGlzZWxlY3Rpb24gJiZcblx0XHRcdFx0dGhpcy5fb2xkU2VsZWN0ZWRDZWxsICYmXG5cdFx0XHRcdHRoaXMuX29sZFNlbGVjdGVkQ2VsbC5yb3cuaWQgPT09ICgocm93ICYmIHJvdy5pZCkgfHwgcm93KSAmJlxuXHRcdFx0XHR0aGlzLl9vbGRTZWxlY3RlZENlbGwuY29sdW1uLmlkID09PSAoKGNvbCAmJiBjb2wuaWQpIHx8IGNvbCkpIHx8XG5cdFx0XHQodGhpcy5fbXVsdGlzZWxlY3Rpb24gJiZcblx0XHRcdFx0dGhpcy5fc2VsZWN0ZWRDZWxscy5sZW5ndGggPT09IDEgJiZcblx0XHRcdFx0dGhpcy5fc2VsZWN0ZWRDZWxsc1swXS5yb3cuaWQgPT09ICgocm93ICYmIHJvdy5pZCkgfHwgcm93KSAmJlxuXHRcdFx0XHR0aGlzLl9zZWxlY3RlZENlbGxzWzBdLmNvbHVtbi5pZCA9PT0gKChjb2wgJiYgY29sLmlkKSB8fCBjb2wpKVxuXHRcdCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgodGhpcy5fbXVsdGlzZWxlY3Rpb24gJiYgIWN0cmxVcCAmJiAhc2hpZnRVcCkgfHwgIXRoaXMuX211bHRpc2VsZWN0aW9uKSB7XG5cdFx0XHR0aGlzLl9zZWxlY3RlZENlbGxzLmxlbmd0aCAmJiB0aGlzLl9yZW1vdmVDZWxscygpO1xuXHRcdH1cblx0XHRpZiAoXG5cdFx0XHR0aGlzLl9tdWx0aXNlbGVjdGlvbiAmJlxuXHRcdFx0dGhpcy5fdHlwZSA9PT0gXCJjZWxsXCIgJiZcblx0XHRcdHRoaXMuX3NlbGVjdGVkQ2VsbHMuZmluZChcblx0XHRcdFx0aXRlbSA9PlxuXHRcdFx0XHRcdGl0ZW0ucm93LmlkID09PSAoKHJvdyAmJiByb3cuaWQpIHx8IHJvdykgJiYgaXRlbS5jb2x1bW4uaWQgPT09ICgoY29sICYmIGNvbC5pZCkgfHwgY29sKVxuXHRcdFx0KVxuXHRcdCkge1xuXHRcdFx0dGhpcy5yZW1vdmVDZWxsKChyb3cgJiYgcm93LmlkKSB8fCByb3csIChjb2wgJiYgY29sLmlkKSB8fCBjb2wpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IG9sZFNlbGVjdGVkQ2VsbCA9IHRoaXMuX29sZFNlbGVjdGVkQ2VsbCA/IHRoaXMuX29sZFNlbGVjdGVkQ2VsbCA6IHVuZGVmaW5lZDtcblx0XHRyb3cgPSB0aGlzLl9ncmlkLmRhdGEuZ2V0SXRlbSgocm93ICYmIHJvdy5pZCkgfHwgcm93KTtcblx0XHRjb25zdCBjb2x1bXMgPSB0aGlzLl9ncmlkLmNvbmZpZy5jb2x1bW5zLmZpbHRlcihjb2wgPT4gIWNvbC5oaWRkZW4pO1xuXHRcdGlmICghY29sKSB7XG5cdFx0XHRjb2wgPSBjb2x1bXNbMF07XG5cdFx0fVxuXHRcdGNvbCA9IHRoaXMuX2dyaWQuZ2V0Q29sdW1uKGNvbC5pZCB8fCBjb2wpO1xuXHRcdGlmICghY29sIHx8ICFyb3cpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29sID0gY29sLmlkID8gY29sIDogdGhpcy5fZ3JpZC5nZXRDb2x1bW4oY29sKTtcblxuXHRcdGlmICghdGhpcy5ldmVudHMuZmlyZShHcmlkU2VsZWN0aW9uRXZlbnRzLmJlZm9yZVNlbGVjdCwgW3JvdywgY29sXSkpIHJldHVybjtcblxuXHRcdHRoaXMuX3NlbGVjdGVkQ2VsbCA9IHsgcm93LCBjb2x1bW46IGNvbCB9O1xuXG5cdFx0dGhpcy5ldmVudHMuZmlyZShHcmlkU2VsZWN0aW9uRXZlbnRzLmFmdGVyU2VsZWN0LCBbcm93LCBjb2xdKTtcblxuXHRcdGlmICh0aGlzLl9tdWx0aXNlbGVjdGlvbiAmJiBzaGlmdFVwICYmIG9sZFNlbGVjdGVkQ2VsbCkge1xuXHRcdFx0dGhpcy5fb2xkU2VsZWN0ZWRDZWxsID0gb2xkU2VsZWN0ZWRDZWxsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9vbGRTZWxlY3RlZENlbGwgPSB0aGlzLl9zZWxlY3RlZENlbGw7XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9tdWx0aXNlbGVjdGlvbikge1xuXHRcdFx0aWYgKHNoaWZ0VXAgJiYgIWN0cmxVcCAmJiB0aGlzLl9zZWxlY3RlZENlbGxzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0bGV0IHN0YXJ0Um93SW5kZXggPSB0aGlzLl9ncmlkLmRhdGEuZ2V0SW5kZXgodGhpcy5fb2xkU2VsZWN0ZWRDZWxsLnJvdy5pZCBhcyBzdHJpbmcpO1xuXHRcdFx0XHRsZXQgZW5kUm93SW5kZXggPSB0aGlzLl9ncmlkLmRhdGEuZ2V0SW5kZXgocm93LmlkIGFzIHN0cmluZyk7XG5cdFx0XHRcdGlmIChzdGFydFJvd0luZGV4ID4gZW5kUm93SW5kZXgpIHtcblx0XHRcdFx0XHRjb25zdCB0ZW1wID0gc3RhcnRSb3dJbmRleDtcblx0XHRcdFx0XHRzdGFydFJvd0luZGV4ID0gZW5kUm93SW5kZXg7XG5cdFx0XHRcdFx0ZW5kUm93SW5kZXggPSB0ZW1wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3NlbGVjdGVkQ2VsbHMgPSBbdGhpcy5fb2xkU2VsZWN0ZWRDZWxsXTtcblx0XHRcdFx0aWYgKHRoaXMuX3R5cGUgPT09IFwiY2VsbFwiKSB7XG5cdFx0XHRcdFx0Y29uc3QgY29sdW1uc0lkcyA9IGNvbHVtcy5tYXAoZSA9PiBlLmlkKTtcblx0XHRcdFx0XHRsZXQgc3RhcnRDb2xJbmRleCA9IGNvbHVtbnNJZHMuaW5kZXhPZihvbGRTZWxlY3RlZENlbGwuY29sdW1uLmlkKTtcblx0XHRcdFx0XHRsZXQgZW5kQ29sSW5kZXggPSBjb2x1bW5zSWRzLmluZGV4T2YoY29sLmlkKTtcblx0XHRcdFx0XHRpZiAoc3RhcnRDb2xJbmRleCAhPT0gLTEgJiYgZW5kQ29sSW5kZXggIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAoc3RhcnRDb2xJbmRleCA+IGVuZENvbEluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHRlbXAgPSBzdGFydENvbEluZGV4O1xuXHRcdFx0XHRcdFx0XHRzdGFydENvbEluZGV4ID0gZW5kQ29sSW5kZXg7XG5cdFx0XHRcdFx0XHRcdGVuZENvbEluZGV4ID0gdGVtcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbnN0IGNvbHVtbnMgPSBjb2x1bXMuc2xpY2Uoc3RhcnRDb2xJbmRleCwgZW5kQ29sSW5kZXggKyAxKTtcblx0XHRcdFx0XHRcdHRoaXMuX2dyaWQuZGF0YS5tYXBSYW5nZShzdGFydFJvd0luZGV4LCBlbmRSb3dJbmRleCwgaXRlbSA9PiB7XG5cdFx0XHRcdFx0XHRcdGNvbHVtbnMuZm9yRWFjaChjb2x1bW4gPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNlbGwgPSB7IHJvdzogaXRlbSwgY29sdW1uIH07XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuX2ZpbmRJbmRleChjZWxsKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3NlbGVjdGVkQ2VsbHMucHVzaChjZWxsKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX2dyaWQuZGF0YS5tYXBSYW5nZShzdGFydFJvd0luZGV4LCBlbmRSb3dJbmRleCwgaXRlbSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCBjZWxsID0geyByb3c6IGl0ZW0sIGNvbHVtbjogY29sIH07XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5fZmluZEluZGV4KGNlbGwpID09PSAtMSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9zZWxlY3RlZENlbGxzLnB1c2goY2VsbCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoY3RybFVwICYmICFzaGlmdFVwKSB7XG5cdFx0XHRcdGNvbnN0IGNlbGxJbmRleCA9IHRoaXMuX2ZpbmRJbmRleCgpO1xuXHRcdFx0XHRpZiAoY2VsbEluZGV4ID09PSAtMSkge1xuXHRcdFx0XHRcdHRoaXMuX3NlbGVjdGVkQ2VsbHMucHVzaCh7XG5cdFx0XHRcdFx0XHRyb3c6IHRoaXMuX3NlbGVjdGVkQ2VsbC5yb3csXG5cdFx0XHRcdFx0XHRjb2x1bW46IHRoaXMuX3NlbGVjdGVkQ2VsbC5jb2x1bW4sXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fc2VsZWN0ZWRDZWxscy5sZW5ndGggPiAxICYmIHRoaXMuX3NlbGVjdGVkQ2VsbHMuc3BsaWNlKGNlbGxJbmRleCwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3NlbGVjdGVkQ2VsbHMgPSBbdGhpcy5fc2VsZWN0ZWRDZWxsXTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fc2VsZWN0ZWRDZWxscyA9IFt0aGlzLl9zZWxlY3RlZENlbGxdO1xuXHRcdH1cblx0XHRhd2FpdFJlZHJhdygpLnRoZW4oKCkgPT4ge1xuXHRcdFx0dGhpcy5fZ3JpZC5wYWludCgpO1xuXHRcdFx0dGhpcy5fc2V0QnJvd3NlckZvY3VzKCk7XG5cdFx0fSk7XG5cdH1cblx0Z2V0Q2VsbCgpOiBJQ2VsbCB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlbGVjdGVkQ2VsbDtcblx0fVxuXHRnZXRDZWxscygpOiBJQ2VsbFtdIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VsZWN0ZWRDZWxscztcblx0fVxuXHR0b0hUTUwoKSB7XG5cdFx0aWYgKHRoaXMuX2lzVW5zZWxlY3RlZCgpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9tdWx0aXNlbGVjdGlvbikge1xuXHRcdFx0Y29uc3Qgc2VsZWN0aW9uID0gW107XG5cdFx0XHR0aGlzLl9zZWxlY3RlZENlbGxzLmZvckVhY2goKGNlbGwsIGluZGV4LCBhcnJheSkgPT4ge1xuXHRcdFx0XHRzZWxlY3Rpb24ucHVzaChcblx0XHRcdFx0XHR0aGlzLl90b0hUTUwoY2VsbC5yb3csIGNlbGwuY29sdW1uLCBpbmRleCA9PT0gYXJyYXkubGVuZ3RoIC0gMSB8fCB0aGlzLl90eXBlID09PSBcImNlbGxcIilcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHNlbGVjdGlvbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3RvSFRNTCh0aGlzLl9zZWxlY3RlZENlbGwucm93LCB0aGlzLl9zZWxlY3RlZENlbGwuY29sdW1uLCB0cnVlKTtcblx0XHR9XG5cdH1cblx0ZGlzYWJsZSgpOiB2b2lkIHtcblx0XHR0aGlzLnJlbW92ZUNlbGwoKTtcblx0XHR0aGlzLmNvbmZpZy5kaXNhYmxlZCA9IHRydWU7XG5cdFx0dGhpcy5fZ3JpZC5wYWludCgpO1xuXHR9XG5cdGVuYWJsZSgpOiB2b2lkIHtcblx0XHR0aGlzLmNvbmZpZy5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdHRoaXMuX2dyaWQucGFpbnQoKTtcblx0fVxuXHRyZW1vdmVDZWxsKHJvd0lkPzogSWQsIGNvbElkPzogSWQpOiB2b2lkIHtcblx0XHRpZiAocm93SWQgJiYgY29sSWQgJiYgdGhpcy5fdHlwZSA9PT0gXCJjZWxsXCIpIHtcblx0XHRcdGNvbnN0IGNlbGwgPSB0aGlzLl9zZWxlY3RlZENlbGxzLmZpbmQoKHsgcm93LCBjb2x1bW4gfSkgPT4gcm93LmlkID09IHJvd0lkICYmIGNvbHVtbi5pZCA9PSBjb2xJZCk7XG5cdFx0XHRjZWxsICYmIHRoaXMuX3JlbW92ZUNlbGwoY2VsbC5yb3csIGNlbGwuY29sdW1uKTtcblx0XHR9IGVsc2UgaWYgKHJvd0lkKSB7XG5cdFx0XHRjb25zdCBjZWxscyA9IHRoaXMuX3NlbGVjdGVkQ2VsbHMuZmlsdGVyKCh7IHJvdyB9KSA9PiByb3cuaWQgPT0gcm93SWQpO1xuXHRcdFx0Y2VsbHMuZm9yRWFjaCgoeyByb3csIGNvbHVtbiB9KSA9PiB7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZUNlbGwocm93LCBjb2x1bW4pO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3JlbW92ZUNlbGxzKCk7XG5cdFx0fVxuXHRcdGF3YWl0UmVkcmF3KCkudGhlbigoKSA9PiB7XG5cdFx0XHR0aGlzLl9ncmlkLnBhaW50KCk7XG5cdFx0fSk7XG5cdH1cblx0cHJvdGVjdGVkIF9yZW1vdmVDZWxsKHJvdywgY29sKTogdm9pZCB7XG5cdFx0aWYgKCFyb3cgfHwgIWNvbCB8fCAhcm93LmlkIHx8ICFjb2wuaWQpIHJldHVybjtcblxuXHRcdGlmICghdGhpcy5ldmVudHMuZmlyZShHcmlkU2VsZWN0aW9uRXZlbnRzLmJlZm9yZVVuU2VsZWN0LCBbcm93LCBjb2xdKSkgcmV0dXJuO1xuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5fc2VsZWN0ZWRDZWxscy5maW5kSW5kZXgoXG5cdFx0XHRpdGVtID0+IGl0ZW0ucm93LmlkID09PSByb3cuaWQgJiYgaXRlbS5jb2x1bW4uaWQgPT09IGNvbC5pZFxuXHRcdCk7XG5cdFx0dGhpcy5fc2VsZWN0ZWRDZWxscy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdGlmIChcblx0XHRcdHRoaXMuX3NlbGVjdGVkQ2VsbCAmJlxuXHRcdFx0Y29sLmlkID09PSB0aGlzLl9zZWxlY3RlZENlbGwuY29sdW1uLmlkICYmXG5cdFx0XHRyb3cuaWQgPT09IHRoaXMuX3NlbGVjdGVkQ2VsbC5yb3cuaWRcblx0XHQpIHtcblx0XHRcdHRoaXMuX3NlbGVjdGVkQ2VsbCA9IHRoaXMuX3NlbGVjdGVkQ2VsbHNbdGhpcy5fc2VsZWN0ZWRDZWxscy5sZW5ndGggLSAxXSB8fCB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHRoaXMuZXZlbnRzLmZpcmUoR3JpZFNlbGVjdGlvbkV2ZW50cy5hZnRlclVuU2VsZWN0LCBbcm93LCBjb2xdKTtcblx0fVxuXHRwcm90ZWN0ZWQgX3JlbW92ZUNlbGxzKCk6IHZvaWQge1xuXHRcdHRoaXMuX3NlbGVjdGVkQ2VsbHMuZm9yRWFjaChpdGVtID0+IHtcblx0XHRcdHRoaXMuX3JlbW92ZUNlbGwoaXRlbSAmJiBpdGVtLnJvdywgaXRlbSAmJiBpdGVtLmNvbHVtbik7XG5cdFx0fSk7XG5cdFx0dGhpcy5fc2VsZWN0ZWRDZWxscy5sZW5ndGggJiYgdGhpcy5fcmVtb3ZlQ2VsbHMoKTtcblx0fVxuXHRwcm90ZWN0ZWQgX2luaXQoKSB7XG5cdFx0dGhpcy5fZ3JpZC5ldmVudHMub24oR3JpZEV2ZW50cy5jZWxsQ2xpY2ssIChyb3c6IElSb3csIGNvbDogSUNvbCwgZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0dGhpcy5zZXRDZWxsKHJvdywgY29sLCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5LCBlLnNoaWZ0S2V5KTtcblx0XHR9KTtcblx0XHR0aGlzLl9ncmlkLmRhdGEuZXZlbnRzLm9uKERhdGFFdmVudHMuYmVmb3JlUmVtb3ZlLCBpdGVtID0+IHtcblx0XHRcdGlmIChpdGVtICYmIHRoaXMuX3NlbGVjdGVkQ2VsbCAmJiB0aGlzLl9zZWxlY3RlZENlbGwucm93KSB7XG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gdGhpcy5fZ3JpZC5kYXRhLmdldEluZGV4KFN0cmluZyh0aGlzLl9zZWxlY3RlZENlbGwucm93LmlkKSk7XG5cdFx0XHRcdGNvbnN0IGlkID0gdGhpcy5fZ3JpZC5kYXRhLmdldElkKGluZGV4ICsgMSk7XG5cdFx0XHRcdGlmIChpZCkge1xuXHRcdFx0XHRcdHRoaXMuc2V0Q2VsbChpZCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgbmV3SWQgPSB0aGlzLl9ncmlkLmRhdGEuZ2V0SWQoaW5kZXggLSAxKTtcblx0XHRcdFx0XHRpZiAobmV3SWQpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0Q2VsbChuZXdJZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2dyaWQucGFpbnQoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRwcm90ZWN0ZWQgX3RvSFRNTChyb3c6IElSb3csIGNvbHVtbjogSUNvbCwgbGFzdCA9IGZhbHNlKSB7XG5cdFx0Y29uc3Qgcm93cyA9IHRoaXMuX2dyaWQuZGF0YS5nZXRSYXdEYXRhKDAsIC0xLCBudWxsLCAyKTtcblx0XHRjb25zdCByb3dJbmQgPSBmaW5kSW5kZXgocm93cywgb2JqID0+IG9iai5pZCA9PSByb3cuaWQpO1xuXHRcdGlmIChyb3dJbmQgPT09IC0xKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IGNvbHVtcyA9IHRoaXMuX2dyaWQuY29uZmlnLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29sLmhpZGRlbik7XG5cdFx0Y29uc3QgZml4ZWRDb2xzID0gdGhpcy5fZ3JpZC5jb25maWcubGVmdFNwbGl0ID8gY29sdW1zLnNsaWNlKDAsIHRoaXMuX2dyaWQuY29uZmlnLmxlZnRTcGxpdCkgOiBbXTtcblx0XHRjb25zdCBmaXhlZENvbHNJZHMgPSBmaXhlZENvbHMubWFwKGNvbCA9PiBjb2wuaWQpO1xuXHRcdGNvbnN0IGZpeGVkQ29sc1dpZHRoID0gZml4ZWRDb2xzLnJlZHVjZSgodG90YWwsIGNvbGwpID0+ICh0b3RhbCArPSBjb2xsLiR3aWR0aCksIDApO1xuXHRcdGxldCBmaXhlZENlbGw6IGFueTtcblx0XHRjb25zdCBjZWxsUmVjdCA9IHRoaXMuX2dyaWQuZ2V0Q2VsbFJlY3Qocm93LmlkLCBjb2x1bW4uaWQpO1xuXHRcdGNvbnN0IHNjcm9sbFN0YXRlID0gdGhpcy5fZ3JpZC5nZXRTY3JvbGxTdGF0ZSgpO1xuXHRcdGlmIChmaXhlZENvbHNJZHMuaW5jbHVkZXMoY29sdW1uLmlkKSAmJiBsYXN0KSB7XG5cdFx0XHRmaXhlZENlbGwgPSBlbChcIi5kaHhfZ3JpZC1zZWxlY3RlZC1jZWxsXCIsIHtcblx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHR3aWR0aDpcblx0XHRcdFx0XHRcdHRoaXMuX2dyaWQuY29uZmlnLmxlZnRTcGxpdCA9PT0gZml4ZWRDb2xzSWRzLmluZGV4T2YoY29sdW1uLmlkKSArIDFcblx0XHRcdFx0XHRcdFx0PyBjZWxsUmVjdC53aWR0aCAtIDFcblx0XHRcdFx0XHRcdFx0OiBjZWxsUmVjdC53aWR0aCxcblx0XHRcdFx0XHRoZWlnaHQ6IGNlbGxSZWN0LmhlaWdodCxcblx0XHRcdFx0XHR0b3A6IGNlbGxSZWN0LnksXG5cdFx0XHRcdFx0bGVmdDogY2VsbFJlY3QueCArIHNjcm9sbFN0YXRlLngsXG5cdFx0XHRcdFx0cG9zaXRpb246IFwiYWJzb2x1dGVcIixcblx0XHRcdFx0XHR6SW5kZXg6IDEwLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaXNCZWhpbmRGaXhlZENvbHMgPSBmaXhlZENvbHMubGVuZ3RoICYmIGZpeGVkQ29sc1dpZHRoID4gY2VsbFJlY3QueCAtIHNjcm9sbFN0YXRlLng7XG5cdFx0bGV0IHdpZHRoID0gY2VsbFJlY3Qud2lkdGg7XG5cdFx0aWYgKGlzQmVoaW5kRml4ZWRDb2xzKSB7XG5cdFx0XHR3aWR0aCAtPSBmaXhlZENvbHNXaWR0aCAtIChjZWxsUmVjdC54IC0gc2Nyb2xsU3RhdGUueCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdG90YWxXaWR0aCA9IHRoaXMuX2dyaWQuY29uZmlnLiR0b3RhbFdpZHRoO1xuXG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCIuZGh4X2dyaWQtc2VsZWN0aW9uXCIsXG5cdFx0XHR7XG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0ekluZGV4OlxuXHRcdFx0XHRcdFx0Zml4ZWRDZWxsIHx8XG5cdFx0XHRcdFx0XHR0aGlzLl9ncmlkLmNvbmZpZy5zZWxlY3Rpb24gPT09IFwicm93XCIgfHxcblx0XHRcdFx0XHRcdHRoaXMuX2dyaWQuY29uZmlnLnNlbGVjdGlvbiA9PT0gXCJjb21wbGV4XCJcblx0XHRcdFx0XHRcdFx0PyAyMFxuXHRcdFx0XHRcdFx0XHQ6IDEwLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdFtcblx0XHRcdFx0KHRoaXMuX3R5cGUgPT09IFwicm93XCIgfHwgdGhpcy5fdHlwZSA9PT0gXCJjb21wbGV4XCIpICYmXG5cdFx0XHRcdFx0ZWwoXCIuZGh4X2dyaWQtc2VsZWN0ZWQtcm93XCIsIHtcblx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdHdpZHRoOiBmaXhlZENvbHMubGVuZ3RoID8gdG90YWxXaWR0aCAtIHNjcm9sbFN0YXRlLnggOiB0b3RhbFdpZHRoLFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IGNlbGxSZWN0LmhlaWdodCAtIDEsXG5cdFx0XHRcdFx0XHRcdHRvcDogY2VsbFJlY3QueSxcblx0XHRcdFx0XHRcdFx0bGVmdDogZml4ZWRDb2xzLmxlbmd0aCA/IHNjcm9sbFN0YXRlLnggOiAwLFxuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9KSxcblx0XHRcdFx0KCh0aGlzLl90eXBlID09PSBcImNlbGxcIiB8fCB0aGlzLl90eXBlID09PSBcImNvbXBsZXhcIikgJiYgZml4ZWRDZWxsKSB8fFxuXHRcdFx0XHRcdCgodGhpcy5fdHlwZSA9PT0gXCJjZWxsXCIgfHwgdGhpcy5fdHlwZSA9PT0gXCJjb21wbGV4XCIpICYmXG5cdFx0XHRcdFx0XHRsYXN0ICYmXG5cdFx0XHRcdFx0XHRlbChcIi5kaHhfZ3JpZC1zZWxlY3RlZC1jZWxsXCIsIHtcblx0XHRcdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdFx0XHR3aWR0aCxcblx0XHRcdFx0XHRcdFx0XHRoZWlnaHQ6IGNlbGxSZWN0LmhlaWdodCAtIDEsXG5cdFx0XHRcdFx0XHRcdFx0dG9wOiBjZWxsUmVjdC55LFxuXHRcdFx0XHRcdFx0XHRcdGxlZnQ6IGlzQmVoaW5kRml4ZWRDb2xzID8gZml4ZWRDb2xzV2lkdGggKyBzY3JvbGxTdGF0ZS54IDogY2VsbFJlY3QueCxcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuXHRcdFx0XHRcdFx0XHRcdGRpc3BsYXk6IHdpZHRoID4gMCA/IFwiZmxleFwiIDogXCJub25lXCIsXG5cdFx0XHRcdFx0XHRcdFx0Ym9yZGVyTGVmdDogaXNCZWhpbmRGaXhlZENvbHMgPyBcIm5vbmVcIiA6IG51bGwsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9KSksXG5cdFx0XHRdXG5cdFx0KTtcblx0fVxuXHRwcm90ZWN0ZWQgX2lzVW5zZWxlY3RlZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0IXRoaXMuX3NlbGVjdGVkQ2VsbCB8fFxuXHRcdFx0IXRoaXMuX3NlbGVjdGVkQ2VsbC5yb3cgfHxcblx0XHRcdCF0aGlzLl9zZWxlY3RlZENlbGwuY29sdW1uIHx8XG5cdFx0XHR0aGlzLl9zZWxlY3RlZENlbGxzLmxlbmd0aCA9PT0gMFxuXHRcdCk7XG5cdH1cblx0cHJvdGVjdGVkIF9maW5kSW5kZXgoY2VsbDogSUNlbGwgPSB0aGlzLl9zZWxlY3RlZENlbGwpIHtcblx0XHRsZXQgY2VsbEluZGV4ID0gLTE7XG5cdFx0dGhpcy5fc2VsZWN0ZWRDZWxscy5zb21lKChlbGVtZW50OiBJQ2VsbCwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4gPT4ge1xuXHRcdFx0aWYgKHRoaXMuX3R5cGUgPT09IFwiY2VsbFwiKSB7XG5cdFx0XHRcdGlmIChjb21wYXJlKGVsZW1lbnQucm93LCBjZWxsLnJvdykgJiYgY29tcGFyZShlbGVtZW50LmNvbHVtbiwgY2VsbC5jb2x1bW4pKSB7XG5cdFx0XHRcdFx0Y2VsbEluZGV4ID0gaW5kZXg7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodGhpcy5fdHlwZSA9PT0gXCJyb3dcIikge1xuXHRcdFx0XHRpZiAoY29tcGFyZShlbGVtZW50LnJvdywgY2VsbC5yb3cpKSB7XG5cdFx0XHRcdFx0Y2VsbEluZGV4ID0gaW5kZXg7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gY2VsbEluZGV4O1xuXHR9XG5cdHByb3RlY3RlZCBfc2V0QnJvd3NlckZvY3VzKCkge1xuXHRcdGNvbnN0IGdyaWRDb250YWluZXIgPSB0aGlzLl9ncmlkLmdldFJvb3RWaWV3KCkuZGF0YS5nZXRSb290Tm9kZSgpO1xuXHRcdGlmIChncmlkQ29udGFpbmVyKSB7XG5cdFx0XHRjb25zdCBncmlkRGF0YUNvbnRhaW5lciA9IGdyaWRDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5kaHhfZ3JpZF9kYXRhXCIpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRncmlkRGF0YUNvbnRhaW5lciAmJlxuXHRcdFx0XHR0aGlzLl9zZWxlY3RlZENlbGwgJiZcblx0XHRcdFx0dGhpcy5fc2VsZWN0ZWRDZWxsLnJvdyAmJlxuXHRcdFx0XHR0aGlzLl9zZWxlY3RlZENlbGwuY29sdW1uXG5cdFx0XHQpIHtcblx0XHRcdFx0Y29uc3QgJHJvdyA9IGdyaWREYXRhQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYFtkaHhfaWQ9XCIke3RoaXMuX3NlbGVjdGVkQ2VsbC5yb3cuaWR9XCJdYCk7XG5cdFx0XHRcdGNvbnN0IHNwYW4gPSB0aGlzLl9ncmlkLmdldFNwYW4odGhpcy5fc2VsZWN0ZWRDZWxsLnJvdy5pZCwgdGhpcy5fc2VsZWN0ZWRDZWxsLmNvbHVtbi5pZCk7XG5cdFx0XHRcdGlmICgkcm93KSB7XG5cdFx0XHRcdFx0Y29uc3QgZ3JpZFNwYW5zQ29udGFpbmVyID0gc3BhbiA/IGdyaWRDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5kaHhfc3Bhbi1zcGFuc1wiKSA6IG51bGw7XG5cdFx0XHRcdFx0Y29uc3QgJGZvY3VzZWRDZWxsID0gZ3JpZFNwYW5zQ29udGFpbmVyXG5cdFx0XHRcdFx0XHQ/IGdyaWRTcGFuc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxuXHRcdFx0XHRcdFx0XHRcdGBbZGh4X2NvbF9pZD1cIiR7c3Bhbi5jb2x1bW59XCJdW2RoeF9pZD1cIiR7c3Bhbi5yb3d9XCJdYFxuXHRcdFx0XHRcdFx0ICApXG5cdFx0XHRcdFx0XHQ6ICRyb3cucXVlcnlTZWxlY3RvcihgW2RoeF9jb2xfaWQ9XCIke3RoaXMuX3NlbGVjdGVkQ2VsbC5jb2x1bW4uaWR9XCJdYCk7XG5cdFx0XHRcdFx0aWYgKCRmb2N1c2VkQ2VsbCkge1xuXHRcdFx0XHRcdFx0JGZvY3VzZWRDZWxsLnRhYkluZGV4ID0gMDtcblx0XHRcdFx0XHRcdCRmb2N1c2VkQ2VsbC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG5cdFx0XHRcdFx0XHQvLyAkZm9jdXNlZENlbGwuZm9jdXMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiIsImltcG9ydCB7IGZpbmRJbmRleCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5pbXBvcnQgeyBHcmlkIH0gZnJvbSBcIi4vR3JpZFwiO1xuaW1wb3J0IHsgR3JpZEV2ZW50cyB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRTY3JvbGxiYXJXaWR0aCB9IGZyb20gXCIuLi8uLi90cy1jb21tb24vaHRtbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRSZXNpemUoZ3JpZDogR3JpZCwgY29sdW1uOiBzdHJpbmcsIGV2OiBNb3VzZUV2ZW50ICYgVG91Y2hFdmVudCwgY2I6IGFueSkge1xuXHRldi50YXJnZXRUb3VjaGVzICYmIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cdGNvbnN0IGluaXRYID0gZXYudGFyZ2V0VG91Y2hlcyA/IGV2LnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCA6IGV2LmNsaWVudFg7XG5cdGNvbnN0IGNvbHVtbnMgPSBncmlkLmNvbmZpZy5jb2x1bW5zLmZpbHRlcihjb2wgPT4gIWNvbC5oaWRkZW4pO1xuXHRsZXQgaW5pdFdpZHRoID0gMDtcblx0Z3JpZC5jb25maWcuJHJlc2l6aW5nID0gY29sdW1uO1xuXG5cdGNvbnN0IG1vdmVIYW5kbGVyID0gZSA9PiB7XG5cdFx0Y29uc3QgaSA9IGZpbmRJbmRleChjb2x1bW5zLCBvYmogPT4ge1xuXHRcdFx0cmV0dXJuIG9iai5pZCA9PT0gY29sdW1uO1xuXHRcdH0pO1xuXG5cdFx0Y29uc3QgY3VycmVudFggPSBlLnRhcmdldFRvdWNoZXMgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCA6IGUuY2xpZW50WDtcblx0XHRjb25zdCBjb250YWluZXJMZWZ0ID0gY3VycmVudFggLSBncmlkLmdldFJvb3ROb2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRjb25zdCBzY3JvbGxiYXJZID0gZ3JpZC5jb25maWcuJHRvdGFsSGVpZ2h0ID4gZ3JpZC5jb25maWcuaGVpZ2h0ID8gZ2V0U2Nyb2xsYmFyV2lkdGgoKSA6IDA7XG5cblx0XHRpZiAoZ3JpZC5jb25maWcubGVmdFNwbGl0ID09PSBpICsgMSAmJiBjb250YWluZXJMZWZ0ID49IGdyaWQuY29uZmlnLndpZHRoIC0gc2Nyb2xsYmFyWSAtIDIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpbml0V2lkdGggPSBpbml0V2lkdGggfHwgY29sdW1uc1tpXS4kd2lkdGg7XG5cdFx0Y29uc3QgbWluV2lkdGggPSBjb2x1bW5zW2ldLm1pbldpZHRoIHx8IDQwO1xuXHRcdGNvbnN0IG1heFdpZHRoID0gY29sdW1uc1tpXS5tYXhXaWR0aDtcblx0XHRjb25zdCBtb3ZlID0gY3VycmVudFggLSBpbml0WDtcblx0XHRjb25zdCBjb2xzID0gWy4uLmNvbHVtbnNdO1xuXHRcdGNvbnN0IHNpemUgPSBpbml0V2lkdGggKyBtb3ZlO1xuXHRcdGxldCBmaW5hbDtcblx0XHRpZiAoKG1heFdpZHRoICYmIHNpemUgPj0gbWF4V2lkdGgpIHx8IHNpemUgPD0gbWluV2lkdGgpIHtcblx0XHRcdGlmIChzaXplIDw9IG1pbldpZHRoKSB7XG5cdFx0XHRcdGZpbmFsID0gbWluV2lkdGg7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2l6ZSA+PSBtYXhXaWR0aCkge1xuXHRcdFx0XHRmaW5hbCA9IG1heFdpZHRoO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmaW5hbCA9IHNpemU7XG5cdFx0fVxuXHRcdGNvbHNbaV0uJHdpZHRoID0gZmluYWw7XG5cdFx0KGNvbHNbaV0gYXMgYW55KS4kZml4ZWQgPSB0cnVlO1xuXHRcdGdyaWQuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5yZXNpemUsIFtjb2x1bW5zW2ldLCBlXSk7XG5cdFx0Z3JpZC5wYWludCgpO1xuXHR9O1xuXG5cdGNvbnN0IHVwSGFuZGxlciA9ICgpID0+IHtcblx0XHRpZiAoIWV2LnRhcmdldFRvdWNoZXMpIHtcblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbW92ZUhhbmRsZXIpO1xuXHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdXBIYW5kbGVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBtb3ZlSGFuZGxlcik7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdXBIYW5kbGVyKTtcblx0XHR9XG5cdFx0Y2IoKTtcblx0fTtcblxuXHRpZiAoIWV2LnRhcmdldFRvdWNoZXMpIHtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG1vdmVIYW5kbGVyKTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB1cEhhbmRsZXIpO1xuXHR9IGVsc2Uge1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgbW92ZUhhbmRsZXIpO1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB1cEhhbmRsZXIpO1xuXHR9XG5cdGdyaWQucGFpbnQoKTtcbn1cbiIsImltcG9ydCB7IElDb2wsIElSb3cgfSBmcm9tIFwiLi8uLi90eXBlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2lkdGgoY29sdW1uczogSUNvbFtdLCBjb2xzcGFuOiBudW1iZXIsIGluZGV4OiBudW1iZXIpIHtcblx0Y29uc3QgY29scyA9IGNvbHVtbnMuZmlsdGVyKCh7IGhpZGRlbiB9KSA9PiAhaGlkZGVuKTtcblx0aWYgKCFjb2xzcGFuKSB7XG5cdFx0cmV0dXJuIGNvbHNbaW5kZXhdLiR3aWR0aDtcblx0fVxuXHRyZXR1cm4gY29scy5yZWR1Y2UoKHdpZHRoLCB7ICR3aWR0aCB9LCBpKSA9PiB7XG5cdFx0d2lkdGggKz0gaSA+PSBpbmRleCAmJiBpIDwgaW5kZXggKyBjb2xzcGFuID8gJHdpZHRoIDogMDtcblx0XHRyZXR1cm4gd2lkdGg7XG5cdH0sIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGVpZ2h0KGRhdGFSb3dzOiBJUm93W10sIHJvd3NwYW46IG51bWJlciwgaW5kZXg6IG51bWJlcikge1xuXHRjb25zdCByb3dzID0gZGF0YVJvd3MuZmlsdGVyKCh7IGhpZGRlbiB9KSA9PiAhaGlkZGVuKTtcblx0aWYgKCFyb3dzcGFuKSB7XG5cdFx0cmV0dXJuIHJvd3NbaW5kZXhdLiRoZWlnaHQ7XG5cdH1cblx0cmV0dXJuIHJvd3MucmVkdWNlKChoZWlnaHQsIHsgJGhlaWdodCB9LCBpKSA9PiB7XG5cdFx0aGVpZ2h0ICs9IGkgPj0gaW5kZXggJiYgaSA8IGluZGV4ICsgcm93c3BhbiA/ICRoZWlnaHQgOiAwO1xuXHRcdHJldHVybiBoZWlnaHQ7XG5cdH0sIDApO1xufVxuIiwiaW1wb3J0IHsgZ2V0TWF4QXJyYXlOeW1iZXIsIElDb250YWluZXJDb25maWcsIGlzRGVmaW5lZCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5pbXBvcnQge1xuXHRJQ29sLFxuXHRJQ29sdW1uc1dpZHRoLFxuXHRJR3JpZENvbmZpZyxcblx0SVJlbmRlcmVyQ29uZmlnLFxuXHRJUm93LFxuXHRjb2xUeXBlLFxuXHRBZGp1c3RUYXJnZXRUeXBlLFxufSBmcm9tIFwiLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgcmVtb3ZlSFRNTFRhZ3MgfSBmcm9tIFwiLi9tYWluXCI7XG5pbXBvcnQgeyBzdHJpbmdUb0RhdGUsIGdldEZvcm1hdHRlZERhdGUgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZGF0ZVwiO1xuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShvYmo6IGFueSwgbmFtZTogc3RyaW5nKSB7XG5cdGlmICghb2JqW25hbWVdKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmICh0eXBlb2Ygb2JqW25hbWVdID09PSBcInN0cmluZ1wiKSB7XG5cdFx0b2JqW25hbWVdID0gW1xuXHRcdFx0e1xuXHRcdFx0XHR0ZXh0OiBgJHtvYmpbbmFtZV19YCxcblx0XHRcdH0sXG5cdFx0XTtcblx0fSBlbHNlIHtcblx0XHRvYmpbbmFtZV0gPSBvYmpbbmFtZV0ubWFwKGVsID0+IHtcblx0XHRcdGlmICh0eXBlb2YgZWwgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0ZWwgPSB7IHRleHQ6IGVsIH0gYXMgYW55O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGVsO1xuXHRcdH0pO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVDb2x1bW5zKHsgY29sdW1ucywgaHRtbEVuYWJsZSB9OiBJR3JpZENvbmZpZywgY29uZmlnQ2hhbmdlZCA9IGZhbHNlKSB7XG5cdGZvciAoY29uc3QgY29sIG9mIGNvbHVtbnMpIHtcblx0XHRjb2wuJGh0bWxFbmFibGUgPSAhIShjb2wuaHRtbEVuYWJsZSB8fCBodG1sRW5hYmxlKTtcblx0XHRjb2wuJGNlbGxDc3MgPSBjb2wuJGNlbGxDc3MgfHwge307XG5cdFx0bm9ybWFsaXplQXJyYXkoY29sLCBcImhlYWRlclwiKTtcblx0XHRub3JtYWxpemVBcnJheShjb2wsIFwiZm9vdGVyXCIpO1xuXHRcdGNvbnN0IGlzQ29udGVudCA9IGNvbC5oZWFkZXIucmVkdWNlKChhY2MsIGl0ZW0pID0+IChhY2MgPSBhY2MgfHwgISFpdGVtLmNvbnRlbnQpLCBmYWxzZSk7XG5cdFx0aWYgKGlzQ29udGVudCkge1xuXHRcdFx0Y29sLiR1bmlxdWVEYXRhID0gW107XG5cdFx0fVxuXG5cdFx0bGV0IHdpZHRoID0gY29sLm1pbldpZHRoIHx8IDEwMDtcblx0XHRpZiAoY29sLndpZHRoKSB7XG5cdFx0XHRpZiAoY29sLm1heFdpZHRoICYmIGNvbC5taW5XaWR0aCkge1xuXHRcdFx0XHR3aWR0aCA9XG5cdFx0XHRcdFx0Y29sLndpZHRoID49IGNvbC5taW5XaWR0aCAmJiBjb2wud2lkdGggPD0gY29sLm1heFdpZHRoXG5cdFx0XHRcdFx0XHQ/IGNvbC53aWR0aFxuXHRcdFx0XHRcdFx0OiBjb2wud2lkdGggPj0gY29sLm1heFdpZHRoXG5cdFx0XHRcdFx0XHQ/IGNvbC5tYXhXaWR0aFxuXHRcdFx0XHRcdFx0OiBjb2wubWluV2lkdGg7XG5cdFx0XHR9IGVsc2UgaWYgKGNvbC5tYXhXaWR0aCkge1xuXHRcdFx0XHR3aWR0aCA9IGNvbC53aWR0aCA8PSBjb2wubWF4V2lkdGggPyBjb2wud2lkdGggOiBjb2wubWF4V2lkdGggPiAxMDAgPyBjb2wubWF4V2lkdGggOiAxMDA7XG5cdFx0XHR9IGVsc2UgaWYgKGNvbC5taW5XaWR0aCkge1xuXHRcdFx0XHR3aWR0aCA9IGNvbC53aWR0aCA+PSBjb2wubWluV2lkdGggPyBjb2wud2lkdGggOiBjb2wubWluV2lkdGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aWR0aCA9IGNvbC53aWR0aDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb2wuJHdpZHRoID0gY29sLiR3aWR0aCAmJiAhY29uZmlnQ2hhbmdlZCA/IGNvbC4kd2lkdGggOiB3aWR0aDtcblx0XHRpZiAoY29sLiR3aWR0aCA+IGNvbC5tYXhXaWR0aCkge1xuXHRcdFx0Y29sLiR3aWR0aCA9IGNvbC5tYXhXaWR0aDtcblx0XHR9XG5cdFx0aWYgKGNvbC4kd2lkdGggPCBjb2wubWluV2lkdGgpIHtcblx0XHRcdGNvbC4kd2lkdGggPSBjb2wubWluV2lkdGg7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3VudENvbHVtbnMoY29uZmlnOiBJR3JpZENvbmZpZywgY29sdW1uczogSUNvbFtdKTogbnVtYmVyIHtcblx0bGV0IGhlYWRlclJvd3NDb3VudCA9IDA7XG5cdGxldCBmb290ZXJSb3dzQ291bnQgPSAwO1xuXHRsZXQgdG90YWxXaWR0aCA9IDA7XG5cdGxldCBjb2xzcGFucyA9IGZhbHNlO1xuXHRsZXQgcm93c0hlYWRlcnNDb3VudCA9IDA7XG5cdGxldCBmb290ZXIgPSBmYWxzZTtcblx0Y29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG5cdFx0aGVhZGVyUm93c0NvdW50ID0gTWF0aC5tYXgoaGVhZGVyUm93c0NvdW50LCBjb2wuaGVhZGVyLmxlbmd0aCk7XG5cdFx0dG90YWxXaWR0aCArPSBjb2wuJHdpZHRoO1xuXG5cdFx0aWYgKGNvbC5mb290ZXIpIHtcblx0XHRcdGZvb3RlclJvd3NDb3VudCA9IE1hdGgubWF4KGZvb3RlclJvd3NDb3VudCwgY29sLmZvb3Rlci5sZW5ndGgpO1xuXHRcdFx0aWYgKCFmb290ZXIpIHtcblx0XHRcdFx0Zm9vdGVyID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIWNvbHNwYW5zKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGhlYWQgb2YgY29sLmhlYWRlcikge1xuXHRcdFx0XHRpZiAoaGVhZC5jb2xzcGFuKSB7XG5cdFx0XHRcdFx0Y29sc3BhbnMgPSB0cnVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gZmlsbCBtaXNzaW5nIGNlbGxzXG5cdGNvbHVtbnMuZm9yRWFjaChjb2wgPT4ge1xuXHRcdGlmIChjb2wuaGVhZGVyLmxlbmd0aCA8IGhlYWRlclJvd3NDb3VudCkge1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBoZWFkZXJSb3dzQ291bnQ7IGkrKykge1xuXHRcdFx0XHRjb2wuaGVhZGVyW2ldID0gY29sLmhlYWRlcltpXSB8fCB7IHRleHQ6IFwiXCIgfTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGZvb3Rlcikge1xuXHRcdFx0Y29sLmZvb3RlciA9IGNvbC5mb290ZXIgfHwgW107XG5cdFx0fVxuXHRcdGlmIChjb2wuZm9vdGVyICYmIGNvbC5mb290ZXIubGVuZ3RoIDwgZm9vdGVyUm93c0NvdW50KSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGZvb3RlclJvd3NDb3VudDsgaSsrKSB7XG5cdFx0XHRcdGNvbC5mb290ZXJbaV0gPSBjb2wuZm9vdGVyW2ldIHx8IHsgdGV4dDogXCJcIiB9O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb2wuaGVhZGVyID0gY29sLmhlYWRlci5tYXAoaGVhZCA9PiB7XG5cdFx0XHRpZiAodHlwZW9mIGhlYWQgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0aGVhZCA9IHsgdGV4dDogaGVhZCB9O1xuXHRcdFx0fVxuXHRcdFx0aGVhZC5jc3MgPSBoZWFkLmNzcyB8fCBcIlwiO1xuXHRcdFx0aWYgKCFoZWFkLnRleHQgJiYgIWhlYWQuY3NzLmluY2x1ZGVzKFwiZGh4X2NlbGwtZW1wdHlcIikpIHtcblx0XHRcdFx0aGVhZC5jc3MgKz0gXCIgZGh4X2NlbGwtZW1wdHlcIjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBoZWFkO1xuXHRcdH0pO1xuXG5cdFx0Ly8gZmluZCBoZWFkZXIgY29sdW1ucyBpbmRleGVzXG5cdFx0aWYgKGNvbC5oZWFkZXJbMF0udGV4dCA9PT0gXCJcIikge1xuXHRcdFx0cm93c0hlYWRlcnNDb3VudCsrO1xuXHRcdH1cblx0fSk7XG5cdGNvbmZpZy4kdG90YWxXaWR0aCA9IHRvdGFsV2lkdGg7XG5cdGNvbmZpZy4kaGVhZGVyTGV2ZWwgPSBoZWFkZXJSb3dzQ291bnQ7XG5cdGNvbmZpZy4kZm9vdGVyTGV2ZWwgPSBmb290ZXJSb3dzQ291bnQ7XG5cdGNvbmZpZy4kY29sc3BhbnMgPSBjb2xzcGFucztcblx0Y29uZmlnLiRmb290ZXIgPSBmb290ZXI7XG5cblx0cmV0dXJuIHJvd3NIZWFkZXJzQ291bnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbnMoXG5cdHdpZHRoOiBudW1iZXIsXG5cdGhlaWdodDogbnVtYmVyLFxuXHRzY3JvbGw6IGFueSxcblx0Y29uZjogSVJlbmRlcmVyQ29uZmlnLFxuXHRkYXRhOiBJUm93W11cbikge1xuXHRjb25zdCBjb2x1bW5zID0gY29uZi5jb2x1bW5zIHx8IFtdO1xuXHRjb25zdCBjb2x1bW5zTGVuZ3RoID0gY29sdW1ucy5sZW5ndGg7XG5cdGNvbnN0IHJvd3MgPSBkYXRhIHx8IFtdO1xuXHRjb25zdCByb3dzTGVuZ3RoID0gcm93cy5sZW5ndGg7XG5cblx0bGV0IG1heFdpZHRoID0gLUluZmluaXR5O1xuXHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY29sdW1uc0xlbmd0aDsgaW5kZXgrKykge1xuXHRcdGlmIChjb2x1bW5zW2luZGV4XS4kd2lkdGggPiBtYXhXaWR0aCkgbWF4V2lkdGggPSBjb2x1bW5zW2luZGV4XS4kd2lkdGg7XG5cdH1cblxuXHRsZXQgbWluV2lkdGggPSArSW5maW5pdHk7XG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb2x1bW5zTGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0aWYgKGNvbHVtbnNbaW5kZXhdLiR3aWR0aCA8IG1pbldpZHRoKSBtaW5XaWR0aCA9IGNvbHVtbnNbaW5kZXhdLiR3aWR0aDtcblx0fVxuXG5cdGxldCBtYXhIZWlnaHQgPSAtSW5maW5pdHk7XG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByb3dzTGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0aWYgKHJvd3NbaW5kZXhdLiRoZWlnaHQgPiBtYXhIZWlnaHQpIG1heEhlaWdodCA9IHJvd3NbaW5kZXhdLiRoZWlnaHQ7XG5cdH1cblx0Y29uc3QgbWluSGVpZ2h0ID0gY29uZi5yb3dIZWlnaHQ7XG5cblx0Y29uc3QgeFJlc2VydmUgPSBNYXRoLnJvdW5kKG1heFdpZHRoIC8gbWluV2lkdGgpO1xuXHRjb25zdCB5UmVzZXJ2ZSA9IE1hdGgucm91bmQobWF4SGVpZ2h0IC8gbWluSGVpZ2h0KTtcblxuXHRjb25zdCBhdnJDb2xXaWR0aCA9IGNvbmYuJHRvdGFsV2lkdGggLyBjb2x1bW5zTGVuZ3RoO1xuXHRjb25zdCBjb2xQZXJQYWdlID0gTWF0aC5yb3VuZCh3aWR0aCAvIGF2ckNvbFdpZHRoKTtcblxuXHRjb25zdCBhdnJSb3dIZWlnaHQgPSBjb25mLiR0b3RhbEhlaWdodCAvIHJvd3NMZW5ndGg7XG5cdGNvbnN0IHJvd1BlclBhZ2UgPSBNYXRoLnJvdW5kKGhlaWdodCAvIGF2clJvd0hlaWdodCk7XG5cblx0bGV0IHggPSAwO1xuXHRsZXQgc2Nyb2xsTGVmdCA9IHNjcm9sbC5sZWZ0O1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1ucy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGNvbCA9IGNvbHVtbnNbaV07XG5cdFx0c2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQgLSBjb2wuJHdpZHRoO1xuXHRcdGlmIChzY3JvbGxMZWZ0ICsgYXZyQ29sV2lkdGggLyAyID4gMCkge1xuXHRcdFx0eCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRsZXQgeSA9IDA7XG5cdGxldCBzY3JvbGxUb3AgPSBzY3JvbGwudG9wO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IHJvdyA9IHJvd3NbaV07XG5cdFx0c2Nyb2xsVG9wID0gc2Nyb2xsVG9wIC0gcm93LiRoZWlnaHQ7XG5cdFx0aWYgKHNjcm9sbFRvcCArIGF2clJvd0hlaWdodCAvIDIgPiAwKSB7XG5cdFx0XHR5Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdGNvbnN0IHhTdGFydCA9IHggLSB4UmVzZXJ2ZSA+PSAwID8geCAtIHhSZXNlcnZlIDogMDtcblx0Y29uc3QgeEVuZCA9IHggKyBjb2xQZXJQYWdlICsgeFJlc2VydmU7XG5cblx0Y29uc3QgeVN0YXJ0ID0geSAtIHlSZXNlcnZlID49IDAgPyB5IC0geVJlc2VydmUgOiAwO1xuXHRjb25zdCB5RW5kID0geSArIHJvd1BlclBhZ2UgKyB5UmVzZXJ2ZTtcblxuXHRyZXR1cm4ge1xuXHRcdHhTdGFydCxcblx0XHR4RW5kLFxuXHRcdHlTdGFydCxcblx0XHR5RW5kLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5pcXVlKGFycjogYW55W10sIG5hbWU6IHN0cmluZywgbXVsdGlzZWxlY3Rpb246IGJvb2xlYW4pOiBhbnlbXSB7XG5cdGNvbnN0IGFsbEl0ZW1zID0gYXJyLm1hcChpdGVtID0+IGl0ZW1bbmFtZV0pO1xuXHRpZiAobXVsdGlzZWxlY3Rpb24pIHtcblx0XHRhbGxJdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuXHRcdFx0aWYgKGl0ZW0uaW5jbHVkZXMoXCIsIFwiKSkge1xuXHRcdFx0XHRpdGVtLnNwbGl0KFwiLCBcIikuZm9yRWFjaChpID0+IGFsbEl0ZW1zLnB1c2goaSkpO1xuXHRcdFx0XHRkZWxldGUgYWxsSXRlbXNbaW5kZXhdO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBhbGxJdGVtcy5maWx0ZXIoKGl0ZW0sIGksIGFycmF5KSA9PiBhcnJheS5pbmRleE9mKGl0ZW0pID09PSBpICYmIGlzRGVmaW5lZChpdGVtKSkuc29ydCgpO1xufVxuXG5pbnRlcmZhY2UgSURlZmluZWRDb2x1bW5zIHtcblx0d2lkdGg6IG51bWJlcjtcblx0aHRtbEVuYWJsZTogYm9vbGVhbjtcblx0dGVtcGxhdGU/OiAodmFsdWU6IHN0cmluZyB8IG51bWJlciwgcm93OiBJUm93LCBjb2w6IElDb2wpID0+IHN0cmluZztcblx0Y29scz86IElDb2w7XG5cdGZvcm1hdD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGdldE1heFJvd0hlaWdodCA9IChcblx0cm93OiBJUm93LFxuXHRjb2xzOiBJQ29sW10sXG5cdGNvbmZpZzogSUNvbnRhaW5lckNvbmZpZyA9IHsgZm9udDogXCIyMHB4IFJvYm90b1wiLCBsaW5lSGVpZ2h0OiAyMCB9XG4pOiBudW1iZXIgPT4ge1xuXHRjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXHRjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIsIHtcblx0XHRhbHBoYTogZmFsc2UsXG5cdH0pO1xuXHRjdHguZm9udCA9IGNvbmZpZy5mb250O1xuXG5cdGNvbnN0IGRlZmluZWRDb2x1bW5zOiB7IFtjb2w6IHN0cmluZ106IElEZWZpbmVkQ29sdW1ucyB9ID0ge307XG5cdGNvbnN0IGNvbExlbmd0aCA9IGNvbHMubGVuZ3RoO1xuXG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb2xMZW5ndGg7IGluZGV4KyspIHtcblx0XHRpZiAoY29sc1tpbmRleF0udGVtcGxhdGUpIHtcblx0XHRcdGRlZmluZWRDb2x1bW5zW2NvbHNbaW5kZXhdLmlkXSA9IHtcblx0XHRcdFx0d2lkdGg6IGNvbHNbaW5kZXhdLiR3aWR0aCB8fCAwLFxuXHRcdFx0XHRodG1sRW5hYmxlOiBjb2xzW2luZGV4XS4kaHRtbEVuYWJsZSxcblx0XHRcdFx0dGVtcGxhdGU6IGNvbHNbaW5kZXhdLnRlbXBsYXRlLFxuXHRcdFx0XHRjb2xzOiBjb2xzW2luZGV4XSxcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlZmluZWRDb2x1bW5zW2NvbHNbaW5kZXhdLmlkXSA9IHtcblx0XHRcdFx0d2lkdGg6IGNvbHNbaW5kZXhdLiR3aWR0aCB8fCAwLFxuXHRcdFx0XHRodG1sRW5hYmxlOiBjb2xzW2luZGV4XS4kaHRtbEVuYWJsZSxcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0Y29uc3QgZGVmYXVsdExpbmVCcmVhayA9IFtdO1xuXHRjb25zdCBtYXRoTGluZUJyZWFrID0gW107XG5cblx0Zm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocm93KSkge1xuXHRcdGlmIChcblx0XHRcdGRlZmluZWRDb2x1bW5zW2tleV0gJiZcblx0XHRcdGtleSAhPT0gXCJpZFwiICYmXG5cdFx0XHRrZXkgIT09IFwiaGVpZ2h0XCIgJiZcblx0XHRcdCFrZXkuc3RhcnRzV2l0aChcIiRcIikgJiZcblx0XHRcdCh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKVxuXHRcdCkge1xuXHRcdFx0bGV0IGN1cnJlbnRWYWx1ZSA9IFwiXCI7XG5cdFx0XHRpZiAoZGVmaW5lZENvbHVtbnNba2V5XT8udGVtcGxhdGUpIHtcblx0XHRcdFx0Y29uc3QgdGVtcGxhdGVWYWx1ZSA9IGRlZmluZWRDb2x1bW5zW2tleV0udGVtcGxhdGUodmFsdWUsIHJvdywgZGVmaW5lZENvbHVtbnNba2V5XS5jb2xzKTtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gZGVmaW5lZENvbHVtbnNba2V5XS5odG1sRW5hYmxlID8gcmVtb3ZlSFRNTFRhZ3ModGVtcGxhdGVWYWx1ZSkgOiB0ZW1wbGF0ZVZhbHVlO1xuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0aWYgKGRlZmluZWRDb2x1bW5zW2tleV0uaHRtbEVuYWJsZSkge1xuXHRcdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IHJlbW92ZUhUTUxUYWdzKHZhbHVlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdXJyZW50VmFsdWUgPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmYXVsdExpbmVCcmVhay5wdXNoKGN1cnJlbnRWYWx1ZS5zcGxpdChcIlxcblwiKS5sZW5ndGgpO1xuXHRcdFx0bWF0aExpbmVCcmVhay5wdXNoKE1hdGgucm91bmQoY3R4Lm1lYXN1cmVUZXh0KGN1cnJlbnRWYWx1ZSkud2lkdGggLyBkZWZpbmVkQ29sdW1uc1trZXldPy53aWR0aCkpO1xuXHRcdH1cblx0fVxuXHRjb25zdCBtYXhSb3dzID0gTWF0aC5tYXgoZ2V0TWF4QXJyYXlOeW1iZXIoZGVmYXVsdExpbmVCcmVhayksIGdldE1heEFycmF5TnltYmVyKG1hdGhMaW5lQnJlYWspKTtcblx0Y2FudmFzLnJlbW92ZSgpO1xuXG5cdHJldHVybiBtYXhSb3dzICogY29uZmlnLmxpbmVIZWlnaHQ7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TWF4Q29sc1dpZHRoID0gKFxuXHRyb3dzOiBJUm93W10sXG5cdGNvbHM6IElDb2xbXSxcblx0Y29uZmlnOiBJQ29udGFpbmVyQ29uZmlnID0ge1xuXHRcdGZvbnQ6IFwibm9ybWFsIDE0LjRweCBBcmlhbFwiLFxuXHR9LFxuXHR0YXJnZXQ/OiBBZGp1c3RUYXJnZXRUeXBlXG4pOiBJQ29sdW1uc1dpZHRoID0+IHtcblx0aWYgKCFyb3dzLmxlbmd0aCB8fCAhY29scy5sZW5ndGgpIHJldHVybjtcblxuXHRjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXHRjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIsIHtcblx0XHRhbHBoYTogZmFsc2UsXG5cdH0pO1xuXG5cdGN0eC5mb250ID0gY29uZmlnLmZvbnQ7XG5cblx0Y29uc3QgZGVmaW5lZENvbHVtbnM6IHsgW2NvbDogc3RyaW5nXTogSURlZmluZWRDb2x1bW5zIH0gPSB7fTtcblx0Y29uc3QgY29sTGVuZ3RoID0gY29scy5sZW5ndGg7XG5cblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNvbExlbmd0aDsgaW5kZXgrKykge1xuXHRcdGlmIChjb2xzW2luZGV4XS50ZW1wbGF0ZSAmJiB0YXJnZXQgPT09IFwiZGF0YVwiKSB7XG5cdFx0XHRkZWZpbmVkQ29sdW1uc1tjb2xzW2luZGV4XS5pZF0gPSB7XG5cdFx0XHRcdHdpZHRoOiAyMCxcblx0XHRcdFx0aHRtbEVuYWJsZTogY29sc1tpbmRleF0uJGh0bWxFbmFibGUsXG5cdFx0XHRcdHRlbXBsYXRlOiBjb2xzW2luZGV4XS50ZW1wbGF0ZSxcblx0XHRcdFx0Y29sczogY29sc1tpbmRleF0sXG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWZpbmVkQ29sdW1uc1tjb2xzW2luZGV4XS5pZF0gPSB7XG5cdFx0XHRcdHdpZHRoOiAyMCxcblx0XHRcdFx0aHRtbEVuYWJsZTogY29sc1tpbmRleF0uJGh0bWxFbmFibGUsXG5cdFx0XHRcdGZvcm1hdDogY29sc1tpbmRleF0uZm9ybWF0LFxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxuXHRjb25zdCByb3dzTGVuZ3RoID0gcm93cy5sZW5ndGg7XG5cblx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJvd3NMZW5ndGg7IGluZGV4KyspIHtcblx0XHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyb3dzW2luZGV4XSkpIHtcblx0XHRcdGlmIChcblx0XHRcdFx0ZGVmaW5lZENvbHVtbnNba2V5XSAmJlxuXHRcdFx0XHRrZXkgIT09IFwiaWRcIiAmJlxuXHRcdFx0XHRrZXkgIT09IFwiaGVpZ2h0XCIgJiZcblx0XHRcdFx0IWtleS5zdGFydHNXaXRoKFwiJFwiKSAmJlxuXHRcdFx0XHQodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIERhdGUpXG5cdFx0XHQpIHtcblx0XHRcdFx0bGV0IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0aWYgKHR5cGVvZiBkZWZpbmVkQ29sdW1uc1trZXldPy50ZW1wbGF0ZSA9PT0gXCJmdW5jdGlvblwiICYmICEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkge1xuXHRcdFx0XHRcdGNvbnN0IHRlbXBsYXRlVmFsdWUgPSBkZWZpbmVkQ29sdW1uc1trZXldLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFx0dmFsdWUsXG5cdFx0XHRcdFx0XHRyb3dzW2luZGV4XSxcblx0XHRcdFx0XHRcdGRlZmluZWRDb2x1bW5zW2tleV0uY29sc1xuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Y3VycmVudFZhbHVlID0gZGVmaW5lZENvbHVtbnNba2V5XS5odG1sRW5hYmxlXG5cdFx0XHRcdFx0XHQ/IHJlbW92ZUhUTUxUYWdzKHRlbXBsYXRlVmFsdWUpXG5cdFx0XHRcdFx0XHQ6IHRlbXBsYXRlVmFsdWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG5cdFx0XHRcdFx0Y3VycmVudFZhbHVlID0gZ2V0Rm9ybWF0dGVkRGF0ZShkZWZpbmVkQ29sdW1uc1trZXldLmZvcm1hdCB8fCBcIiVNICVkICVZXCIsIHZhbHVlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdXJyZW50VmFsdWUgPSBkZWZpbmVkQ29sdW1uc1trZXldLmh0bWxFbmFibGVcblx0XHRcdFx0XHRcdD8gcmVtb3ZlSFRNTFRhZ3ModmFsdWUgYXMgc3RyaW5nKVxuXHRcdFx0XHRcdFx0OiB2YWx1ZS50b1N0cmluZygpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3Qgd2lkdGggPSBjdHgubWVhc3VyZVRleHQoY3VycmVudFZhbHVlKS53aWR0aDtcblx0XHRcdFx0aWYgKHdpZHRoID4gZGVmaW5lZENvbHVtbnNba2V5XS53aWR0aCkgZGVmaW5lZENvbHVtbnNba2V5XS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRjYW52YXMucmVtb3ZlKCk7XG5cblx0Y29uc3QgdG90YWxDb2x1bW5zID0ge307XG5cdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRlZmluZWRDb2x1bW5zKSkge1xuXHRcdHRvdGFsQ29sdW1uc1trZXldID0gTWF0aC5jZWlsKHZhbHVlLndpZHRoKTtcblx0fVxuXG5cdHJldHVybiB0b3RhbENvbHVtbnM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdG9Gb3JtYXQodmFsdWU6IGFueSwgdHlwZT86IGNvbFR5cGUsIGZvcm1hdD86IHN0cmluZykge1xuXHRpZiAoIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRjb25zdCBmb3JtYXRUZW1wbGF0ZSA9ICh0eXBlOiBjb2xUeXBlKSA9PiB7XG5cdFx0dmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuXHRcdGxldCByZXN1bHQ7XG5cdFx0Y29uc3QgdGVtcGxhdGUgPSBmb3JtYXRcblx0XHRcdC5yZXBsYWNlKC8jKy9nLCBcIiNcIilcblx0XHRcdC5zcGxpdChcIiNcIilcblx0XHRcdC5maWx0ZXIoaSA9PiBpKTtcblxuXHRcdHZhbHVlID0gdHlwZSA9PT0gXCJwZXJjZW50XCIgPyAoTnVtYmVyKHZhbHVlKSAqIDEwMCkudG9TdHJpbmcoKSA6IHZhbHVlO1xuXHRcdGNvbnN0IHRydW5jID0gTWF0aC50cnVuYyhOdW1iZXIodmFsdWUpKS50b1N0cmluZygpO1xuXHRcdGNvbnN0IGZvcm1hdEZyYWN0aW9uTGVuZ3RoID0gZm9ybWF0Lm1hdGNoKC8wL2cpICYmIGZvcm1hdC5tYXRjaCgvMC9nKS5sZW5ndGg7XG5cblx0XHRjb25zdCB0cnVuY1RlbXBsYXRlID0gdGVtcGxhdGUuZmluZChpID0+ICFpLmluY2x1ZGVzKFwiMFwiKSk7XG5cdFx0cmVzdWx0ID0gdHJ1bmNUZW1wbGF0ZSA/IHRydW5jLnJlcGxhY2UoLyhcXGQpKD89KFxcZHszfSkrKFxcRHwkKSkvZywgYCQxJHt0cnVuY1RlbXBsYXRlfWApIDogdHJ1bmM7XG5cblx0XHRpZiAoZm9ybWF0RnJhY3Rpb25MZW5ndGgpIHtcblx0XHRcdGNvbnN0IGRlbGltaXRlciA9IHRlbXBsYXRlLmZpbmQoaSA9PiBpLmluY2x1ZGVzKFwiMFwiKSkucmVwbGFjZSgvMCsvZywgXCJcIik7XG5cdFx0XHRjb25zdCB0cnVuY0ZyYWN0aW9uYWwgPSB2YWx1ZS5zcGxpdChcIi5cIilbMV0gfHwgXCIwXCI7XG5cblx0XHRcdGxldCBmcmFjdGlvbmFsID0gTnVtYmVyKFwiMC5cIiArIHRydW5jRnJhY3Rpb25hbCkudG9GaXhlZChmb3JtYXRGcmFjdGlvbkxlbmd0aCk7XG5cdFx0XHRpZiAoTnVtYmVyKGZyYWN0aW9uYWwpID49IDEpIChyZXN1bHQrKykudG9TdHJpbmcoKTtcblx0XHRcdGZyYWN0aW9uYWwgPSBmcmFjdGlvbmFsXG5cdFx0XHRcdC50b1N0cmluZygpXG5cdFx0XHRcdC5zcGxpdChcIi5cIilbMV1cblx0XHRcdFx0LnBhZEVuZChmb3JtYXRGcmFjdGlvbkxlbmd0aCwgXCIwXCIpO1xuXG5cdFx0XHRyZXN1bHQgKz0gZGVsaW1pdGVyICsgZnJhY3Rpb25hbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHlwZSA9PT0gXCJwZXJjZW50XCIgPyBgJHtyZXN1bHR9JWAgOiByZXN1bHQ7XG5cdH07XG5cblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Y2FzZSBcIm51bWJlclwiOlxuXHRcdGNhc2UgXCJwZXJjZW50XCI6XG5cdFx0XHRpZiAoIWZvcm1hdCkgZm9ybWF0ID0gXCIjXCI7XG5cdFx0XHRyZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSAmJiAhaXNOYU4oTnVtYmVyKHZhbHVlKSkgPyBmb3JtYXRUZW1wbGF0ZSh0eXBlKSA6IHZhbHVlO1xuXHRcdGNhc2UgXCJkYXRlXCI6XG5cdFx0XHRpZiAoIWZvcm1hdCkgZm9ybWF0ID0gXCIlTSAlZCAlWVwiO1xuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHR2YWx1ZSA9IGdldEZvcm1hdHRlZERhdGUoZm9ybWF0LCBzdHJpbmdUb0RhdGUodmFsdWUsIGZvcm1hdCkpO1xuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0dmFsdWUgPSBnZXRGb3JtYXR0ZWREYXRlKGZvcm1hdCwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cbn1cblxuaW50ZXJmYWNlIElEZWZpbmVkQ29sdW1ucyB7XG5cdHdpZHRoOiBudW1iZXI7XG5cdGh0bWxFbmFibGU6IGJvb2xlYW47XG5cdHRlbXBsYXRlPzogKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIsIHJvdzogSVJvdywgY29sOiBJQ29sKSA9PiBzdHJpbmc7XG5cdGNvbHM/OiBJQ29sO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0Q2FsY3VsYXRlZFJvd0hlaWdodCA9IChcblx0aGVpZ2h0OiBudW1iZXIsXG5cdGNvbmZpZyA9IHtcblx0XHRyb3dIZWlnaHQ6IDQwLFxuXHRcdHBhZGRpbmc6IDgsXG5cdH1cbikgPT4ge1xuXHRjb25zdCBjYWxjdWxhdGVIZWlnaHQgPSBjb25maWcucm93SGVpZ2h0IDwgNDAgPyBoZWlnaHQgOiBoZWlnaHQgKyBjb25maWcucGFkZGluZyAqIDI7XG5cdHJldHVybiBoZWlnaHQgPCBjb25maWcucm93SGVpZ2h0ID8gY29uZmlnLnJvd0hlaWdodCA6IGNhbGN1bGF0ZUhlaWdodDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRUcmVlQ2VsbFdpZHRoT2Zmc2V0ID0gKHJvdzogSVJvdyk6IG51bWJlciA9PiB7XG5cdHJldHVybiAyMCArIHJvdy4kbGV2ZWwgKiAyMCAtIChyb3cuJGl0ZW1zID8gMjAgOiAwKTtcbn07XG4iLCJpbXBvcnQgeyBJR3JpZCwgSURpcmVjdGlvbiwgR3JpZEV2ZW50cyB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcbmltcG9ydCB7IGlzU29ydGFibGUgfSBmcm9tIFwiLi9tYWluXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3Rpb25Nb3ZlKFxuXHRlOiBLZXlib2FyZEV2ZW50LFxuXHRncmlkOiBJR3JpZCxcblx0ZGlyOiBJRGlyZWN0aW9uLFxuXHRyYW5nZTogbnVtYmVyLFxuXHR0b0VuZCA9IGZhbHNlLFxuXHRjdHJsVXAgPSBmYWxzZSxcblx0c2hpZnRVcCA9IGZhbHNlXG4pIHtcblx0aWYgKGdyaWQuY29uZmlnLiRlZGl0YWJsZSB8fCAhZ3JpZC5jb25maWcuc2VsZWN0aW9uIHx8IGxvY2F0ZU5vZGVCeUNsYXNzTmFtZShlLCBcImRoeF9ncmlkLWhlYWRlci1jZWxsXCIpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChlKSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9XG5cdGNvbnN0IHNlbGVjdGVkID0gZ3JpZC5zZWxlY3Rpb24uZ2V0Q2VsbCgpO1xuXHRjb25zdCBjb2x1bW5zID0gZ3JpZC5jb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKTtcblx0Z3JpZC5kYXRhLmZpbHRlcihyb3cgPT4gIXJvdy5oaWRkZW4pO1xuXHRpZiAoc2VsZWN0ZWQpIHtcblx0XHRpZiAoZGlyID09PSBcInZlcnRpY2FsXCIpIHtcblx0XHRcdGlmICh0b0VuZCkge1xuXHRcdFx0XHRjb25zdCBuZXdJdGVtID1cblx0XHRcdFx0XHRyYW5nZSA9PT0gMVxuXHRcdFx0XHRcdFx0PyBncmlkLmRhdGEuZ2V0SXRlbShncmlkLmRhdGEuZ2V0SWQoZ3JpZC5kYXRhLmdldExlbmd0aCgpIC0gMSkpXG5cdFx0XHRcdFx0XHQ6IGdyaWQuZGF0YS5nZXRJdGVtKGdyaWQuZGF0YS5nZXRJZCgwKSk7XG5cdFx0XHRcdGdyaWQuc2VsZWN0aW9uLnNldENlbGwobmV3SXRlbS5pZCwgc2VsZWN0ZWQuY29sdW1uLmlkLCBjdHJsVXAsIHNoaWZ0VXApO1xuXHRcdFx0XHRncmlkLnNjcm9sbFRvKG5ld0l0ZW0uaWQudG9TdHJpbmcoKSwgc2VsZWN0ZWQuY29sdW1uLmlkLnRvU3RyaW5nKCkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBncmlkLmRhdGEuZ2V0SW5kZXgoc2VsZWN0ZWQucm93LmlkLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRpZiAoaW5kZXggKyByYW5nZSA+PSAwICYmIGluZGV4ICsgcmFuZ2UgPCBncmlkLmRhdGEuZ2V0TGVuZ3RoKCkpIHtcblx0XHRcdFx0XHRjb25zdCBuZXdJdGVtID0gZ3JpZC5kYXRhLmdldEl0ZW0oZ3JpZC5kYXRhLmdldElkKGluZGV4ICsgcmFuZ2UpKTtcblx0XHRcdFx0XHRncmlkLnNlbGVjdGlvbi5zZXRDZWxsKG5ld0l0ZW0uaWQsIHNlbGVjdGVkLmNvbHVtbi5pZCwgY3RybFVwLCBzaGlmdFVwKTtcblx0XHRcdFx0XHRncmlkLnNjcm9sbFRvKG5ld0l0ZW0uaWQudG9TdHJpbmcoKSwgc2VsZWN0ZWQuY29sdW1uLmlkLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0b0VuZCkge1xuXHRcdFx0XHRjb25zdCBuZXdJdGVtID0gcmFuZ2UgPT09IDEgPyBjb2x1bW5zW2NvbHVtbnMubGVuZ3RoIC0gMV0gOiBjb2x1bW5zWzBdO1xuXHRcdFx0XHRncmlkLnNlbGVjdGlvbi5zZXRDZWxsKHNlbGVjdGVkLnJvdy5pZCwgbmV3SXRlbS5pZCwgY3RybFVwLCBzaGlmdFVwKTtcblx0XHRcdFx0Z3JpZC5zY3JvbGxUbyhzZWxlY3RlZC5yb3cuaWQudG9TdHJpbmcoKSwgbmV3SXRlbS5pZC50b1N0cmluZygpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gY29sdW1ucy5pbmRleE9mKHNlbGVjdGVkLmNvbHVtbik7XG5cdFx0XHRcdGlmIChpbmRleCArIHJhbmdlID49IDAgJiYgaW5kZXggKyByYW5nZSA8IGNvbHVtbnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0Z3JpZC5zZWxlY3Rpb24uc2V0Q2VsbChzZWxlY3RlZC5yb3cuaWQsIGNvbHVtbnNbaW5kZXggKyByYW5nZV0uaWQsIGN0cmxVcCwgc2hpZnRVcCk7XG5cdFx0XHRcdFx0Z3JpZC5zY3JvbGxUbyhzZWxlY3RlZC5yb3cuaWQudG9TdHJpbmcoKSwgY29sdW1uc1tpbmRleCArIHJhbmdlXS5pZC50b1N0cmluZygpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5c0hhbmRsZXJzKGdyaWQpIHtcblx0Y29uc3QgY2VsbFNlbGVjdGlvbiA9XG5cdFx0Z3JpZC5jb25maWcuc2VsZWN0aW9uID09PSBcImNlbGxcIiB8fFxuXHRcdGdyaWQuY29uZmlnLnNlbGVjdGlvbiA9PT0gXCJjb21wbGV4XCIgfHxcblx0XHRncmlkLmNvbmZpZy5zZWxlY3Rpb24gPT09IHRydWU7XG5cblx0bGV0IGdyaWRCb2R5SGFuZGxlcnMgPSB7fTtcblxuXHRpZiAoZ3JpZC5nZXRSb290VmlldygpKSB7XG5cdFx0Y29uc3QgZ3JpZEJvZHkgPSBncmlkLmdldFJvb3RWaWV3KCk/LnJlZnM/LmdyaWRfYm9keT8uZWw7XG5cdFx0aWYgKCFncmlkQm9keSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRncmlkQm9keUhhbmRsZXJzID0ge1xuXHRcdFx0cGFnZVVwOiBlID0+IHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRncmlkQm9keS5zY3JvbGxUb3AgLT0gZ3JpZEJvZHkuY2xpZW50SGVpZ2h0O1xuXHRcdFx0fSxcblx0XHRcdHBhZ2VEb3duOiBlID0+IHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRncmlkQm9keS5zY3JvbGxUb3AgKz0gZ3JpZEJvZHkuY2xpZW50SGVpZ2h0O1xuXHRcdFx0fSxcblx0XHRcdGhvbWU6IGUgPT4ge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGdyaWRCb2R5LnNjcm9sbFRvcCA9IDA7XG5cdFx0XHR9LFxuXHRcdFx0ZW5kOiBlID0+IHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRncmlkQm9keS5zY3JvbGxUb3AgKz0gZ3JpZEJvZHkuc2Nyb2xsSGVpZ2h0O1xuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRlbnRlcjogZSA9PiB7XG5cdFx0XHRjb25zdCAkY29sID0gbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lKGUsIFwiZGh4X2dyaWQtaGVhZGVyLWNlbGxcIik7XG5cdFx0XHRpZiAoJGNvbCkge1xuXHRcdFx0XHQvLyBzb3J0IGJ5IGVudGVyIG9uIGhlYWRlclxuXHRcdFx0XHRjb25zdCBpZCA9ICRjb2wuZ2V0QXR0cmlidXRlKFwiZGh4X2lkXCIpO1xuXHRcdFx0XHRjb25zdCBpc1Jlc2l6YWJsZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRoeF9yZXNpemVkXCIpO1xuXHRcdFx0XHRpZiAoaWQpIHtcblx0XHRcdFx0XHRjb25zdCBjb2x1bW4gPSBncmlkLmdldENvbHVtbihpZCk7XG5cdFx0XHRcdFx0aWYgKGNvbHVtbiAmJiBpc1NvcnRhYmxlKGdyaWQuY29uZmlnLCBjb2x1bW4pICYmICFpc1Jlc2l6YWJsZSkge1xuXHRcdFx0XHRcdFx0Z3JpZC5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmFmdGVyU29ydCwgW2lkXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjZWxsU2VsZWN0aW9uKSB7XG5cdFx0XHRcdGNvbnN0IHNlbGVjdGVkID0gZ3JpZC5zZWxlY3Rpb24uZ2V0Q2VsbCgpO1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0c2VsZWN0ZWQgJiZcblx0XHRcdFx0XHQoKHNlbGVjdGVkLmNvbHVtbi5lZGl0YWJsZSAhPT0gZmFsc2UgJiYgZ3JpZC5jb25maWcuZWRpdGFibGUpIHx8IHNlbGVjdGVkLmNvbHVtbi5lZGl0YWJsZSlcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0aWYgKCFncmlkLmNvbmZpZy4kZWRpdGFibGUpIHtcblx0XHRcdFx0XHRcdGlmIChzZWxlY3RlZC5jb2x1bW4udHlwZSAhPT0gXCJib29sZWFuXCIpIHtcblx0XHRcdFx0XHRcdFx0Z3JpZC5lZGl0Q2VsbChzZWxlY3RlZC5yb3cuaWQsIHNlbGVjdGVkLmNvbHVtbi5pZCwgc2VsZWN0ZWQuY29sdW1uLmVkaXRvclR5cGUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Z3JpZC5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmFmdGVyRWRpdEVuZCwgW1xuXHRcdFx0XHRcdFx0XHRcdCFzZWxlY3RlZC5yb3dbc2VsZWN0ZWQuY29sdW1uLmlkXSxcblx0XHRcdFx0XHRcdFx0XHRzZWxlY3RlZC5yb3csXG5cdFx0XHRcdFx0XHRcdFx0c2VsZWN0ZWQuY29sdW1uLFxuXHRcdFx0XHRcdFx0XHRdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Z3JpZC5lZGl0RW5kKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoZ3JpZC5jb25maWcuJGVkaXRhYmxlKSB7XG5cdFx0XHRcdFx0Z3JpZC5lZGl0RW5kKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHNwYWNlOiBlID0+IHtcblx0XHRcdGNvbnN0IHNlbGVjdGVkID0gZ3JpZC5zZWxlY3Rpb24uZ2V0Q2VsbCgpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjZWxsU2VsZWN0aW9uICYmXG5cdFx0XHRcdChzZWxlY3RlZD8uY29sdW1uLmVkaXRhYmxlID8/IGdyaWQuY29uZmlnLmVkaXRhYmxlKSAmJlxuXHRcdFx0XHQhZ3JpZC5jb25maWcuJGVkaXRhYmxlXG5cdFx0XHQpIHtcblx0XHRcdFx0aWYgKHNlbGVjdGVkICYmIHNlbGVjdGVkLmNvbHVtbi50eXBlID09PSBcImJvb2xlYW5cIikge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRncmlkLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYWZ0ZXJFZGl0RW5kLCBbXG5cdFx0XHRcdFx0XHQhc2VsZWN0ZWQucm93W3NlbGVjdGVkLmNvbHVtbi5pZF0sXG5cdFx0XHRcdFx0XHRzZWxlY3RlZC5yb3csXG5cdFx0XHRcdFx0XHRzZWxlY3RlZC5jb2x1bW4sXG5cdFx0XHRcdFx0XSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGVzY2FwZTogKCkgPT4ge1xuXHRcdFx0aWYgKGdyaWQuY29uZmlnLiRlZGl0YWJsZSkge1xuXHRcdFx0XHRncmlkLmVkaXRFbmQodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR0YWI6IGUgPT4ge1xuXHRcdFx0aWYgKCFncmlkLmNvbmZpZy5zZWxlY3Rpb24gfHwgbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lKGUsIFwiZGh4X2dyaWQtaGVhZGVyLWNlbGxcIikpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGdyaWQuY29uZmlnLiRlZGl0YWJsZSkge1xuXHRcdFx0XHRncmlkLmVkaXRFbmQoKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IHNlbGVjdGVkID0gZ3JpZC5zZWxlY3Rpb24uZ2V0Q2VsbCgpO1xuXHRcdFx0Y29uc3QgY29sdW1ucyA9IGdyaWQuY29uZmlnLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29sLmhpZGRlbik7XG5cdFx0XHRpZiAoc2VsZWN0ZWQpIHtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBjb2x1bW5zLmluZGV4T2Yoc2VsZWN0ZWQuY29sdW1uKSArIDE7XG5cdFx0XHRcdGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgY29sdW1ucy5sZW5ndGgpIHtcblx0XHRcdFx0XHRlICYmIGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRncmlkLnNlbGVjdGlvbi5zZXRDZWxsKHNlbGVjdGVkLnJvdy5pZCwgY29sdW1uc1tpbmRleF0uaWQpO1xuXHRcdFx0XHRcdGdyaWQuc2Nyb2xsVG8oc2VsZWN0ZWQucm93LmlkLnRvU3RyaW5nKCksIGNvbHVtbnNbaW5kZXhdLmlkLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGluZGV4ID49IDApIHtcblx0XHRcdFx0XHRjb25zdCBuZXdMaW5lSW5kZXggPSBncmlkLmRhdGEuZ2V0SW5kZXgoc2VsZWN0ZWQucm93LmlkLnRvU3RyaW5nKCkpICsgMTtcblx0XHRcdFx0XHRpZiAobmV3TGluZUluZGV4IDwgZ3JpZC5kYXRhLmdldExlbmd0aCgpKSB7XG5cdFx0XHRcdFx0XHRlICYmIGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdGdyaWQuc2VsZWN0aW9uLnNldENlbGwoZ3JpZC5kYXRhLmdldElkKG5ld0xpbmVJbmRleCksIGNvbHVtbnNbMF0uaWQpO1xuXHRcdFx0XHRcdFx0Z3JpZC5zY3JvbGxUbyhncmlkLmRhdGEuZ2V0SWQobmV3TGluZUluZGV4KS50b1N0cmluZygpLCBjb2x1bW5zWzBdLmlkLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJzaGlmdCt0YWJcIjogZSA9PiB7XG5cdFx0XHRpZiAoIWdyaWQuY29uZmlnLnNlbGVjdGlvbiB8fCBsb2NhdGVOb2RlQnlDbGFzc05hbWUoZSwgXCJkaHhfZ3JpZC1oZWFkZXItY2VsbFwiKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoZ3JpZC5jb25maWcuJGVkaXRhYmxlKSB7XG5cdFx0XHRcdGdyaWQuZWRpdEVuZCgpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qgc2VsZWN0ZWQgPSBncmlkLnNlbGVjdGlvbi5nZXRDZWxsKCk7XG5cdFx0XHRjb25zdCBjb2x1bW5zID0gZ3JpZC5jb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKTtcblx0XHRcdGlmIChzZWxlY3RlZCkge1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IGNvbHVtbnMuaW5kZXhPZihzZWxlY3RlZC5jb2x1bW4pIC0gMTtcblx0XHRcdFx0aWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCBjb2x1bW5zLmxlbmd0aCkge1xuXHRcdFx0XHRcdGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGdyaWQuc2VsZWN0aW9uLnNldENlbGwoc2VsZWN0ZWQucm93LmlkLCBjb2x1bW5zW2luZGV4XS5pZCk7XG5cdFx0XHRcdFx0Z3JpZC5zY3JvbGxUbyhzZWxlY3RlZC5yb3cuaWQudG9TdHJpbmcoKSwgY29sdW1uc1tpbmRleF0uaWQudG9TdHJpbmcoKSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaW5kZXggPCBncmlkLmRhdGEuZ2V0TGVuZ3RoKCkpIHtcblx0XHRcdFx0XHRjb25zdCBuZXdMaW5lSW5kZXggPSBncmlkLmRhdGEuZ2V0SW5kZXgoc2VsZWN0ZWQucm93LmlkLnRvU3RyaW5nKCkpIC0gMTtcblx0XHRcdFx0XHRpZiAobmV3TGluZUluZGV4ID49IDApIHtcblx0XHRcdFx0XHRcdGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0Z3JpZC5zZWxlY3Rpb24uc2V0Q2VsbChncmlkLmRhdGEuZ2V0SWQobmV3TGluZUluZGV4KSwgY29sdW1uc1tjb2x1bW5zLmxlbmd0aCAtIDFdLmlkKTtcblx0XHRcdFx0XHRcdGdyaWQuc2Nyb2xsVG8oXG5cdFx0XHRcdFx0XHRcdGdyaWQuZGF0YS5nZXRJZChuZXdMaW5lSW5kZXgpLnRvU3RyaW5nKCksXG5cdFx0XHRcdFx0XHRcdGNvbHVtbnNbY29sdW1ucy5sZW5ndGggLSAxXS5pZC50b1N0cmluZygpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXJyb3dVcDogZSA9PiB7XG5cdFx0XHRzZWxlY3Rpb25Nb3ZlKGUsIGdyaWQsIFwidmVydGljYWxcIiwgLTEpO1xuXHRcdH0sXG5cdFx0XCJjdHJsK2Fycm93VXBcIjogZSA9PiB7XG5cdFx0XHRzZWxlY3Rpb25Nb3ZlKGUsIGdyaWQsIFwidmVydGljYWxcIiwgLTEsIHRydWUpO1xuXHRcdH0sXG5cdFx0XCJzaGlmdCthcnJvd1VwXCI6IGUgPT4ge1xuXHRcdFx0aWYgKGdyaWQuY29uZmlnLm11bHRpc2VsZWN0aW9uKSB7XG5cdFx0XHRcdHNlbGVjdGlvbk1vdmUoZSwgZ3JpZCwgXCJ2ZXJ0aWNhbFwiLCAtMSwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiY3RybCtzaGlmdCthcnJvd1VwXCI6IGUgPT4ge1xuXHRcdFx0aWYgKGdyaWQuY29uZmlnLm11bHRpc2VsZWN0aW9uKSB7XG5cdFx0XHRcdHNlbGVjdGlvbk1vdmUoZSwgZ3JpZCwgXCJ2ZXJ0aWNhbFwiLCAtMSwgdHJ1ZSwgZmFsc2UsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXJyb3dEb3duOiBlID0+IHtcblx0XHRcdHNlbGVjdGlvbk1vdmUoZSwgZ3JpZCwgXCJ2ZXJ0aWNhbFwiLCAxKTtcblx0XHR9LFxuXHRcdFwiY3RybCthcnJvd0Rvd25cIjogZSA9PiB7XG5cdFx0XHRzZWxlY3Rpb25Nb3ZlKGUsIGdyaWQsIFwidmVydGljYWxcIiwgMSwgdHJ1ZSk7XG5cdFx0fSxcblx0XHRcInNoaWZ0K2Fycm93RG93blwiOiBlID0+IHtcblx0XHRcdGlmIChncmlkLmNvbmZpZy5tdWx0aXNlbGVjdGlvbikge1xuXHRcdFx0XHRzZWxlY3Rpb25Nb3ZlKGUsIGdyaWQsIFwidmVydGljYWxcIiwgMSwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiY3RybCtzaGlmdCthcnJvd0Rvd25cIjogZSA9PiB7XG5cdFx0XHRpZiAoZ3JpZC5jb25maWcubXVsdGlzZWxlY3Rpb24pIHtcblx0XHRcdFx0c2VsZWN0aW9uTW92ZShlLCBncmlkLCBcInZlcnRpY2FsXCIsIDEsIHRydWUsIGZhbHNlLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFycm93UmlnaHQ6IGUgPT4ge1xuXHRcdFx0c2VsZWN0aW9uTW92ZShlLCBncmlkLCBcImhvcml6b250YWxcIiwgMSk7XG5cdFx0fSxcblx0XHRcImN0cmwrYXJyb3dSaWdodFwiOiBlID0+IHtcblx0XHRcdHNlbGVjdGlvbk1vdmUoZSwgZ3JpZCwgXCJob3Jpem9udGFsXCIsIDEsIHRydWUpO1xuXHRcdH0sXG5cdFx0XCJzaGlmdCthcnJvd1JpZ2h0XCI6IGUgPT4ge1xuXHRcdFx0aWYgKGdyaWQuY29uZmlnLm11bHRpc2VsZWN0aW9uKSB7XG5cdFx0XHRcdHNlbGVjdGlvbk1vdmUoZSwgZ3JpZCwgXCJob3Jpem9udGFsXCIsIDEsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImN0cmwrc2hpZnQrYXJyb3dSaWdodFwiOiBlID0+IHtcblx0XHRcdGlmIChncmlkLmNvbmZpZy5tdWx0aXNlbGVjdGlvbikge1xuXHRcdFx0XHRzZWxlY3Rpb25Nb3ZlKGUsIGdyaWQsIFwiaG9yaXpvbnRhbFwiLCAxLCB0cnVlLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcnJvd0xlZnQ6IGUgPT4ge1xuXHRcdFx0c2VsZWN0aW9uTW92ZShlLCBncmlkLCBcImhvcml6b250YWxcIiwgLTEpO1xuXHRcdH0sXG5cdFx0XCJjdHJsK2Fycm93TGVmdFwiOiBlID0+IHtcblx0XHRcdHNlbGVjdGlvbk1vdmUoZSwgZ3JpZCwgXCJob3Jpem9udGFsXCIsIC0xLCB0cnVlKTtcblx0XHR9LFxuXHRcdFwic2hpZnQrYXJyb3dMZWZ0XCI6IGUgPT4ge1xuXHRcdFx0aWYgKGdyaWQuY29uZmlnLm11bHRpc2VsZWN0aW9uKSB7XG5cdFx0XHRcdHNlbGVjdGlvbk1vdmUoZSwgZ3JpZCwgXCJob3Jpem9udGFsXCIsIC0xLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJjdHJsK3NoaWZ0K2Fycm93TGVmdFwiOiBlID0+IHtcblx0XHRcdGlmIChncmlkLmNvbmZpZy5tdWx0aXNlbGVjdGlvbikge1xuXHRcdFx0XHRzZWxlY3Rpb25Nb3ZlKGUsIGdyaWQsIFwiaG9yaXpvbnRhbFwiLCAtMSwgdHJ1ZSwgZmFsc2UsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Li4uZ3JpZEJvZHlIYW5kbGVycyxcblx0fTtcbn1cbiIsImltcG9ydCB7IElDZWxsQ3NzLCBJQ29sLCBJR3JpZENvbmZpZywgSVJvdywgSVNwYW4gfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IHJnYlRvSGV4IH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShhcnI6IGFueVtdW10sIHRyYW5zZm9ybT86IGFueSk6IGFueVtdW10ge1xuXHRjb25zdCBjb2x1bW5zID0gW107XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3Qgcm93ID0gYXJyW2ldO1xuXHRcdGZvciAobGV0IGNlbGxJbmQgPSAwOyBjZWxsSW5kIDwgcm93Lmxlbmd0aDsgY2VsbEluZCsrKSB7XG5cdFx0XHRjb2x1bW5zW2NlbGxJbmRdID0gY29sdW1uc1tjZWxsSW5kXSB8fCBbXTtcblx0XHRcdGNvbnN0IGNlbGwgPSB0cmFuc2Zvcm0gPyB0cmFuc2Zvcm0ocm93W2NlbGxJbmRdKSA6IHJvd1tjZWxsSW5kXTtcblx0XHRcdGNvbHVtbnNbY2VsbEluZF0ucHVzaChjZWxsKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGNvbHVtbnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydChub2RlOiBIVE1MRWxlbWVudCwgbmV3b25lOiBzdHJpbmcgfCBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcblx0aWYgKHR5cGVvZiBuZXdvbmUgPT09IFwic3RyaW5nXCIpIHtcblx0XHRub2RlLmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLCBuZXdvbmUpO1xuXHRcdHJldHVybiBub2RlLmxhc3RDaGlsZCBhcyBIVE1MRWxlbWVudDtcblx0fSBlbHNlIHtcblx0XHRub2RlLmFwcGVuZENoaWxkKG5ld29uZSk7XG5cdFx0cmV0dXJuIG5ld29uZTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVCeUNsYXNzKFxuXHRjc3NDbGFzczogc3RyaW5nLFxuXHRjb250YWluZXI6IEhUTUxFbGVtZW50LFxuXHR0YXJnZXRDbGFzczogc3RyaW5nLFxuXHRkZWY/OiBJQ2VsbENzc1xuKTogSUNlbGxDc3Mge1xuXHRjb25zdCBjb250ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyB0YXJnZXRDbGFzcykgYXMgSFRNTEVsZW1lbnQ7XG5cblx0Y29uc3QgdGVzdERpdiA9IGluc2VydChjb250LCBgPGRpdiBjbGFzcz1cIiR7Y3NzQ2xhc3N9XCI+PC9kaXY+YCk7XG5cdGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRlc3REaXYpO1xuXHRjb25zdCByZXN1bHQgPSB7XG5cdFx0Y29sb3I6IHN0eWxlcy5jb2xvciA9PT0gXCJyZ2IoMCwgMCwgMClcIiA/IGRlZi5jb2xvciA6IHJnYlRvSGV4KHN0eWxlcy5jb2xvciksXG5cdFx0YmFja2dyb3VuZDpcblx0XHRcdHN0eWxlcy5iYWNrZ3JvdW5kQ29sb3IgPT09IFwicmdiYSgwLCAwLCAwLCAwKVwiID8gZGVmLmJhY2tncm91bmQgOiByZ2JUb0hleChzdHlsZXMuYmFja2dyb3VuZENvbG9yKSxcblx0XHRmb250U2l6ZTogcGFyc2VGbG9hdChzdHlsZXMuZm9udFNpemUpLFxuXHR9O1xuXHRjb250LnJlbW92ZUNoaWxkKHRlc3REaXYpO1xuXHQvLyBbZGlydHldXG5cdGlmIChcblx0XHRyZXN1bHQuY29sb3IgPT09IGRlZi5jb2xvciAmJlxuXHRcdHJlc3VsdC5iYWNrZ3JvdW5kID09PSBkZWYuYmFja2dyb3VuZCAmJlxuXHRcdHJlc3VsdC5mb250U2l6ZSA9PT0gZGVmLmZvbnRTaXplXG5cdCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVIVE1MVGFncyhzdHI6IHN0cmluZyk6IHN0cmluZyB7XG5cdGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiBzdHIgIT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHN0ciAhPT0gXCJib29sZWFuXCIpIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXHRyZXR1cm4gYCR7c3RyID09PSB1bmRlZmluZWQgfHwgc3RyID09PSBudWxsID8gXCJcIiA6IHN0cn1gXG5cdFx0LnJlcGxhY2UoLzxbXj5dKj4vZywgXCJcIilcblx0XHQucmVwbGFjZSgvW1wiXS9nLCBcIiZxdW90O1wiKVxuXHRcdC50cmltKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Nzc1N1cHBvcnQocHJvcGVydHk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHR0cnkge1xuXHRcdHJldHVybiBDU1Muc3VwcG9ydHMocHJvcGVydHksIHZhbHVlKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Y29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGVsLnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xuXHRcdHJldHVybiBlbC5zdHlsZVtwcm9wZXJ0eV0gPT09IHZhbHVlO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Jvd0VtcHR5KHJvdzogSVJvdyk6IGJvb2xlYW4ge1xuXHRpZiAoIXJvdykge1xuXHRcdHJldHVybjtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMocm93KS5yZWR1Y2UoKGFjYywgY29sKSA9PiB7XG5cdFx0aWYgKGNvbCA9PT0gXCJpZFwiIHx8IGNvbC5zdGFydHNXaXRoKFwiJFwiKSkge1xuXHRcdFx0cmV0dXJuIGFjYztcblx0XHR9XG5cdFx0aWYgKGFjYyAmJiByb3dbY29sXSAhPT0gdW5kZWZpbmVkICYmIHJvd1tjb2xdICE9PSBcIlwiKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHJldHVybiBhY2M7XG5cdH0sIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTb3J0YWJsZShjb25maWc6IElHcmlkQ29uZmlnLCBjb2w6IElDb2wpIHtcblx0cmV0dXJuIChjb2wuc29ydGFibGUgIT09IGZhbHNlICYmIGNvbmZpZy5zb3J0YWJsZSkgfHwgY29sLnNvcnRhYmxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBdXRvV2lkdGgoY29uZmlnOiBJR3JpZENvbmZpZywgY29sPzogSUNvbCkge1xuXHRpZiAoY29sKSB7XG5cdFx0cmV0dXJuIChjb2wuYXV0b1dpZHRoICE9PSBmYWxzZSAmJiBjb25maWcuYXV0b1dpZHRoKSB8fCBjb2wuYXV0b1dpZHRoO1xuXHR9XG5cdGxldCBjaGVjayA9IGZhbHNlO1xuXHRjb25maWcuY29sdW1ucy5tYXAoY29sID0+IHtcblx0XHRpZiAoKGNvbC5hdXRvV2lkdGggIT09IGZhbHNlICYmIGNvbmZpZy5hdXRvV2lkdGgpIHx8IGNvbC5hdXRvV2lkdGgpIHtcblx0XHRcdGNoZWNrID0gdHJ1ZTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gY2hlY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Rvb2x0aXAoY29uZmlnOiBJR3JpZENvbmZpZywgZWxlbWVudDogSUNvbCB8IElTcGFuKSB7XG5cdHJldHVybiAoZWxlbWVudC50b29sdGlwICE9PSBmYWxzZSAmJiBjb25maWcudG9vbHRpcCkgfHwgZWxlbWVudC50b29sdGlwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNIdG1sRW5hYmxlKGNvbmZpZzogSUdyaWRDb25maWcsIGNvbDogSUNvbCkge1xuXHRyZXR1cm4gKGNvbC5odG1sRW5hYmxlICE9PSBmYWxzZSAmJiBjb25maWcuaHRtbEVuYWJsZSkgfHwgY29sLmh0bWxFbmFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb3RhbFdpZHRoKGNvbHVtbnM6IElDb2xbXSkge1xuXHRyZXR1cm4gY29sdW1ucy5yZWR1Y2UoKHRvdGFsLCBjb2wpID0+IHRvdGFsICsgKGNvbC4kd2lkdGggfHwgMCksIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG90YWxIZWlnaHQocm93czogSVJvd1tdKSB7XG5cdHJldHVybiByb3dzLnJlZHVjZSgodG90YWwsIHJvdykgPT4gdG90YWwgKyAocm93LiRoZWlnaHQgfHwgMCksIDApO1xufVxuIiwiaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgSUtleU1hbmFnZXIgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vS2V5TWFuYWdlclwiO1xuaW1wb3J0IHsgSUFsaWduIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcbmltcG9ydCB7IElEYXRhQ29sbGVjdGlvbiwgSURyYWdDb25maWcsIElDc3ZEcml2ZXJDb25maWcsIElEYXRhSXRlbSwgSURyYWdJbmZvIH0gZnJvbSBcIkBkaHgvdHMtZGF0YVwiO1xuaW1wb3J0IHsgRXhwb3J0ZXIgfSBmcm9tIFwiLi9FeHBvcnRlclwiO1xuaW1wb3J0IHsgSUNvbWJvRmlsdGVyQ29uZmlnLCBDb21ib2JveCB9IGZyb20gXCJAZGh4L3RzLWNvbWJvYm94XCI7XG5pbXBvcnQgeyBJSGFuZGxlcnMsIElkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBTY3JvbGxWaWV3IH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL1Njcm9sbFZpZXdcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJR3JpZENvbmZpZyBleHRlbmRzIElEcmFnQ29uZmlnIHtcblx0Y29sdW1ucz86IElDb2xbXTtcblx0c3BhbnM/OiBJU3BhbltdO1xuXHRkYXRhPzogYW55W107XG5cdHR5cGU/OiBcInRyZWVcIjtcblx0d2lkdGg/OiBudW1iZXI7XG5cdGhlaWdodD86IG51bWJlcjtcblx0c29ydGFibGU/OiBib29sZWFuO1xuXHRyb3dDc3M/OiAocm93OiBJUm93KSA9PiBzdHJpbmc7XG5cdGxlZnRTcGxpdD86IG51bWJlcjtcblx0c2VsZWN0aW9uPzogSVNlbGVjdGlvblR5cGU7XG5cdG11bHRpc2VsZWN0aW9uPzogYm9vbGVhbjtcblx0ZHJhZ0l0ZW0/OiBJRHJhZ1R5cGU7XG5cdGtleU5hdmlnYXRpb24/OiBib29sZWFuO1xuXHRob3RrZXlzPzogSUhhbmRsZXJzO1xuXHRjc3M/OiBzdHJpbmc7XG5cdGVkaXRhYmxlPzogYm9vbGVhbjtcblx0YXV0b0VtcHR5Um93PzogYm9vbGVhbjtcblx0cmVzaXphYmxlPzogYm9vbGVhbjtcblx0aHRtbEVuYWJsZT86IGJvb2xlYW47XG5cdHRvb2x0aXA/OiBib29sZWFuO1xuXHRoZWFkZXJSb3dIZWlnaHQ/OiBudW1iZXI7XG5cdGZvb3RlclJvd0hlaWdodD86IG51bWJlcjtcblx0cm93SGVpZ2h0PzogbnVtYmVyO1xuXHRhZGp1c3Q/OiBJQWRqdXN0Qnk7XG5cdGF1dG9XaWR0aD86IGJvb2xlYW47XG5cdGF1dG9IZWlnaHQ/OiBib29sZWFuO1xuXHRldmVudEhhbmRsZXJzPzoge1xuXHRcdFtrZXk6IHN0cmluZ106IGFueTtcblx0fTtcblxuXHRyb290UGFyZW50PzogSWQ7XG5cblx0JGhlYWRlckxldmVsPzogbnVtYmVyO1xuXHQkZm9vdGVyTGV2ZWw/OiBudW1iZXI7XG5cdCR0b3RhbFdpZHRoPzogbnVtYmVyO1xuXHQkdG90YWxIZWlnaHQ/OiBudW1iZXI7XG5cdCRwb3NpdGlvbnM/OiBJUG9zaXRpb25zO1xuXHQkY29sc3BhbnM/OiBib29sZWFuO1xuXHQkZm9vdGVyPzogYm9vbGVhbjtcblx0JGVkaXRhYmxlPzogeyByb3c6IGFueTsgY29sOiBhbnk7IGVkaXRvclR5cGU/OiBFZGl0b3JUeXBlOyBlZGl0b3I/OiBJRWRpdG9yIH07XG5cdCRyZXNpemluZz86IHN0cmluZyB8IG51bWJlcjtcblx0Z3JvdXBUaXRsZVRlbXBsYXRlPzogKGdyb3VwTmFtZTogc3RyaW5nLCBncm91cEl0ZW1zOiBJRGF0YUl0ZW1bXSkgPT4gc3RyaW5nO1xuXG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0ZWRpdGluZz86IGJvb2xlYW47XG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0aGVhZGVyU29ydD86IGJvb2xlYW47XG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0Y29sdW1uc0F1dG9XaWR0aD86IGJvb2xlYW47XG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0Zml0VG9Db250YWluZXI/OiBib29sZWFuO1xuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdHNwbGl0QXQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbHVtbnNXaWR0aCB7XG5cdFtjb2w6IHN0cmluZ106IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2Nyb2xsU3RhdGUge1xuXHRsZWZ0OiBudW1iZXI7XG5cdHRvcDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZW5kZXJlckNvbmZpZyBleHRlbmRzIElHcmlkQ29uZmlnIHtcblx0c2Nyb2xsPzogSVNjcm9sbFN0YXRlO1xuXHRkYXRhY29sbGVjdGlvbjogYW55O1xuXHRjdXJyZW50Q29sdW1ucz86IElDb2xbXTtcblx0Y3VycmVudFJvd3M/OiBJUm93W107XG5cdGZpcnN0Q29sSWQ/OiBJZDtcblx0aGVhZGVySGVpZ2h0PzogbnVtYmVyO1xuXHRmb290ZXJIZWlnaHQ/OiBudW1iZXI7XG5cdGV2ZW50cz86IElFdmVudFN5c3RlbTxHcmlkRXZlbnRzLCBJRXZlbnRIYW5kbGVyc01hcD47XG5cdGZpeGVkQ29sdW1uc1dpZHRoPzogbnVtYmVyO1xuXHRzZWxlY3Rpb246IGFueTtcblx0c29ydEJ5PzogSWQ7XG5cdHNvcnREaXI/OiBzdHJpbmc7XG5cdGZpbHRlckxvY2F0aW9uPzogc3RyaW5nO1xuXHRodG1sRW5hYmxlPzogYm9vbGVhbjtcblx0Y29udGVudD86IElDb250ZW50TGlzdDtcblx0Z3JpZElkPzogc3RyaW5nO1xuXG5cdF9ldmVudHM/OiBJRXZlbnRTeXN0ZW08R3JpZFN5c3RlbUV2ZW50cz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNvcnRpbmdTdGF0ZSB7XG5cdGRpcjogRGlycztcblx0Ynk6IElkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElHcmlkIHtcblx0ZGF0YTogSURhdGFDb2xsZWN0aW9uO1xuXHRleHBvcnQ6IEV4cG9ydGVyO1xuXHRjb25maWc6IElHcmlkQ29uZmlnO1xuXHRldmVudHM6IElFdmVudFN5c3RlbTxHcmlkRXZlbnRzLCBJRXZlbnRIYW5kbGVyc01hcD47XG5cdHNlbGVjdGlvbjogSVNlbGVjdGlvbjtcblx0Y29udGVudDogSUNvbnRlbnRMaXN0O1xuXHRrZXlNYW5hZ2VyOiBJS2V5TWFuYWdlcjtcblxuXHRwYWludCgpOiB2b2lkO1xuXHRkZXN0cnVjdG9yKCk6IHZvaWQ7XG5cdHNldENvbHVtbnMoY29sOiBJQ29sW10pOiB2b2lkO1xuXHRhZGRSb3dDc3Mocm93SWQ6IElkLCBjc3M6IHN0cmluZyk6IHZvaWQ7XG5cdHJlbW92ZVJvd0Nzcyhyb3dJZDogSWQsIGNzczogc3RyaW5nKTogdm9pZDtcblx0YWRkQ2VsbENzcyhyb3dJZDogSWQsIGNvbElkOiBJZCwgY3NzOiBzdHJpbmcpOiB2b2lkO1xuXHRyZW1vdmVDZWxsQ3NzKHJvd0lkOiBJZCwgY29sSWQ6IElkLCBjc3M6IHN0cmluZyk6IHZvaWQ7XG5cdGdldFJvb3RWaWV3KCk6IGFueTtcblx0c2hvd0NvbHVtbihjb2xJZDogSWQpOiB2b2lkO1xuXHRoaWRlQ29sdW1uKGNvbElkOiBJZCk6IHZvaWQ7XG5cdGlzQ29sdW1uSGlkZGVuKGNvbElkOiBJZCk6IGJvb2xlYW47XG5cdHNob3dSb3cocm93SWQ6IElkKTogdm9pZDtcblx0aGlkZVJvdyhyb3dJZDogSWQpOiB2b2lkO1xuXHRpc1Jvd0hpZGRlbihyb3dJZDogSWQpOiBib29sZWFuO1xuXHRzY3JvbGwoeD86IG51bWJlciwgeT86IG51bWJlcik6IHZvaWQ7XG5cdHNjcm9sbFRvKHJvd0lkOiBJZCwgY29sSWQ6IElkKTogdm9pZDtcblx0Z2V0U2Nyb2xsU3RhdGUoKTogSUNvb3Jkcztcblx0YWRqdXN0Q29sdW1uV2lkdGgoY29sSWQ6IElkLCBhZGp1c3Q/OiBJQWRqdXN0QnkpOiB2b2lkO1xuXHRnZXRDZWxsUmVjdChyb3dJZDogSWQsIGNvbElkOiBJZCk6IElDZWxsUmVjdDtcblx0Z2V0Q29sdW1uKGNvbElkOiBJZCk6IElDb2w7XG5cdGFkZFNwYW4oc3Bhbk9iajogSVNwYW4pOiB2b2lkO1xuXHRnZXRTcGFuKHJvd0lkOiBJZCwgY29sSWQ6IElkKTogSVNwYW47XG5cdHJlbW92ZVNwYW4ocm93SWQ6IElkLCBjb2xJZDogSWQpOiB2b2lkO1xuXHRlZGl0Q2VsbChyb3dJZDogSWQsIGNvbElkOiBJZCwgZWRpdG9yVHlwZT86IEVkaXRvclR5cGUpOiB2b2lkO1xuXHRlZGl0RW5kKHdpdGhvdXRTYXZlPzogYm9vbGVhbik6IHZvaWQ7XG5cdGdldFNvcnRpbmdTdGF0ZSgpOiBJU29ydGluZ1N0YXRlO1xuXHRnZXRIZWFkZXJGaWx0ZXIoY29sSWQ6IElkKTogSFRNTEVsZW1lbnQgfCBDb21ib2JveDtcblxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGVkaXQocm93SWQ6IElkLCBjb2xJZDogSWQsIGVkaXRvclR5cGU/OiBFZGl0b3JUeXBlKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvR3JpZCBleHRlbmRzIElHcmlkIHtcblx0c2Nyb2xsVmlldzogU2Nyb2xsVmlldztcbn1cblxuZXhwb3J0IHR5cGUgRWRpdG9yVHlwZSA9XG5cdHwgXCJpbnB1dFwiXG5cdHwgXCJzZWxlY3RcIlxuXHR8IFwiZGF0ZVBpY2tlclwiXG5cdHwgXCJjaGVja2JveFwiXG5cdHwgXCJjb21ib2JveFwiXG5cdHwgXCJtdWx0aXNlbGVjdFwiXG5cdHwgXCJ0ZXh0YXJlYVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElDZWxsUmVjdCBleHRlbmRzIElDb29yZHMsIElTaXplcyB7fVxuXG5leHBvcnQgdHlwZSBjb2xUeXBlID0gXCJzdHJpbmdcIiB8IFwibnVtYmVyXCIgfCBcImJvb2xlYW5cIiB8IFwiZGF0ZVwiIHwgXCJwZXJjZW50XCIgfCBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbCB7XG5cdGlkOiBJZDtcblx0d2lkdGg/OiBudW1iZXI7XG5cdGhlYWRlcj86IElIZWFkZXJbXTtcblx0Zm9vdGVyPzogSUZvb3RlcltdO1xuXHRtaW5XaWR0aD86IG51bWJlcjtcblx0bWF4V2lkdGg/OiBudW1iZXI7XG5cdG1hcms/OiBJTWFyayB8IE1hcmtGdW5jdGlvbjtcblx0dHlwZT86IGNvbFR5cGU7XG5cdGVkaXRvclR5cGU/OiBFZGl0b3JUeXBlO1xuXHRlZGl0YWJsZT86IGJvb2xlYW47XG5cdHJlc2l6YWJsZT86IGJvb2xlYW47XG5cdHNvcnRhYmxlPzogYm9vbGVhbjtcblx0b3B0aW9ucz86IGFueVtdO1xuXHRkcmFnZ2FibGU/OiBib29sZWFuO1xuXHRmb3JtYXQ/OiBzdHJpbmc7XG5cdGh0bWxFbmFibGU/OiBib29sZWFuO1xuXHR0ZW1wbGF0ZT86IChjZWxsVmFsdWU6IGFueSwgcm93OiBJUm93LCBjb2w6IElDb2wpID0+IHN0cmluZztcblx0aGlkZGVuPzogYm9vbGVhbjtcblx0YWRqdXN0PzogSUFkanVzdEJ5O1xuXHRhdXRvV2lkdGg/OiBib29sZWFuO1xuXHRhbGlnbj86IElBbGlnbjtcblx0dG9vbHRpcD86IGJvb2xlYW47XG5cdHRvb2x0aXBUZW1wbGF0ZT86IChjZWxsVmFsdWU6IGFueSwgcm93OiBJUm93LCBjb2w6IElDb2wpID0+IHN0cmluZztcblx0Z3Jhdml0eT86IG51bWJlcjtcblxuXHQkY2VsbENzcz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG5cdCR1bmlxdWVEYXRhPzogYW55W107XG5cdCR3aWR0aD86IG51bWJlcjtcblx0JGZpeGVkPzogYm9vbGVhbjtcblx0JGh0bWxFbmFibGU/OiBib29sZWFuO1xuXG5cdC8vIFRPRE86IGRlcHJlY2F0ZWQgZnJvbSA3LjJcblx0ZGF0ZUZvcm1hdD86IHN0cmluZztcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRlZGl0aW5nPzogYm9vbGVhbjtcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRoZWFkZXJTb3J0PzogYm9vbGVhbjtcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRjb2x1bW5zQXV0b1dpZHRoPzogYm9vbGVhbjtcblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRmaXRUb0NvbnRhaW5lcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIGZpeGVkUm93Q29udGVudCA9IFwiaW5wdXRGaWx0ZXJcIiB8IFwic2VsZWN0RmlsdGVyXCIgfCBcImNvbWJvRmlsdGVyXCI7XG5leHBvcnQgdHlwZSBmb290ZXJNZXRob2RzID0gXCJhdmdcIiB8IFwic3VtXCIgfCBcIm1heFwiIHwgXCJtaW5cIjtcblxuZXhwb3J0IGludGVyZmFjZSBJSGVhZGVyIHtcblx0dGV4dD86IHN0cmluZztcblx0Y29sc3Bhbj86IG51bWJlcjtcblx0cm93c3Bhbj86IG51bWJlcjtcblx0Y3NzPzogYW55O1xuXHRjb250ZW50PzogZml4ZWRSb3dDb250ZW50IHwgZm9vdGVyTWV0aG9kcztcblx0ZmlsdGVyQ29uZmlnPzogSUNvbWJvRmlsdGVyQ29uZmlnO1xuXHRhbGlnbj86IElBbGlnbjtcblx0aGVhZGVyU29ydD86IGJvb2xlYW47XG5cdHNvcnRBcz86IFNvcnRGdW5jdGlvbjtcbn1cblxuZXhwb3J0IHR5cGUgU29ydEZ1bmN0aW9uID0gKGNlbGxWYWx1ZTogYW55KSA9PiBzdHJpbmcgfCBudW1iZXI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZvb3RlciB7XG5cdHRleHQ/OiBzdHJpbmcgfCBudW1iZXI7XG5cdGNzcz86IGFueTtcblx0Y29udGVudD86IGZpeGVkUm93Q29udGVudCB8IGZvb3Rlck1ldGhvZHM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNwYW4ge1xuXHRyb3c6IElkO1xuXHRjb2x1bW46IElkO1xuXHRyb3dzcGFuPzogbnVtYmVyO1xuXHRjb2xzcGFuPzogbnVtYmVyO1xuXHR0ZXh0Pzogc3RyaW5nIHwgbnVtYmVyO1xuXHRjc3M/OiBzdHJpbmc7XG5cdHRvb2x0aXA/OiBib29sZWFuO1xuXHR0b29sdGlwVGVtcGxhdGU/OiAoc3BhblZhbHVlOiBhbnksIHNwYW46IElTcGFuKSA9PiBzdHJpbmc7XG59XG5cbnR5cGUgTWFya0Z1bmN0aW9uID0gKGNlbGw6IGFueSwgY29sdW1uQ2VsbHM6IGFueVtdLCByb3c6IElSb3csIGNvbHVtbjogSUNvbCkgPT4gc3RyaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIElNYXJrIHtcblx0bWluPzogc3RyaW5nO1xuXHRtYXg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBvc2l0aW9ucyB7XG5cdHhTdGFydDogbnVtYmVyO1xuXHR4RW5kOiBudW1iZXI7XG5cdHlTdGFydDogbnVtYmVyO1xuXHR5RW5kOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNlbGxDc3Mge1xuXHRjb2xvcjogc3RyaW5nO1xuXHRiYWNrZ3JvdW5kOiBzdHJpbmc7XG5cdGZvbnRTaXplOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUV4cG9ydERhdGEge1xuXHRjb2x1bW5zOiBBcnJheTx7IHdpZHRoOiBudW1iZXIgfT47XG5cdGhlYWRlcjogc3RyaW5nW11bXTtcblx0ZGF0YTogYW55W107XG5cdHN0eWxlczoge1xuXHRcdGNlbGxzOiBhbnlbXTtcblx0XHRjc3M6IHsgW2tleTogc3RyaW5nXTogSUNlbGxDc3MgfTtcblx0fTtcbn1cblxuZXhwb3J0IGVudW0gR3JpZEV2ZW50cyB7XG5cdHNjcm9sbCA9IFwic2Nyb2xsXCIsXG5cdGV4cGFuZCA9IFwiZXhwYW5kXCIsXG5cdGZpbHRlckNoYW5nZSA9IFwiZmlsdGVyQ2hhbmdlXCIsXG5cdGJlZm9yZVJlc2l6ZVN0YXJ0ID0gXCJiZWZvcmVSZXNpemVTdGFydFwiLFxuXHRyZXNpemUgPSBcInJlc2l6ZVwiLFxuXHRhZnRlclJlc2l6ZUVuZCA9IFwiYWZ0ZXJSZXNpemVFbmRcIixcblx0Y2VsbENsaWNrID0gXCJjZWxsQ2xpY2tcIixcblx0Y2VsbFJpZ2h0Q2xpY2sgPSBcImNlbGxSaWdodENsaWNrXCIsXG5cdGNlbGxNb3VzZU92ZXIgPSBcImNlbGxNb3VzZU92ZXJcIixcblx0Y2VsbE1vdXNlRG93biA9IFwiY2VsbE1vdXNlRG93blwiLFxuXHRjZWxsRGJsQ2xpY2sgPSBcImNlbGxEYmxDbGlja1wiLFxuXHRoZWFkZXJDZWxsQ2xpY2sgPSBcImhlYWRlckNlbGxDbGlja1wiLFxuXHRmb290ZXJDZWxsQ2xpY2sgPSBcImZvb3RlckNlbGxDbGlja1wiLFxuXHRoZWFkZXJDZWxsTW91c2VPdmVyID0gXCJoZWFkZXJDZWxsTW91c2VPdmVyXCIsXG5cdGZvb3RlckNlbGxNb3VzZU92ZXIgPSBcImZvb3RlckNlbGxNb3VzZU92ZXJcIixcblx0aGVhZGVyQ2VsbE1vdXNlRG93biA9IFwiaGVhZGVyQ2VsbE1vdXNlRG93blwiLFxuXHRmb290ZXJDZWxsTW91c2VEb3duID0gXCJmb290ZXJDZWxsTW91c2VEb3duXCIsXG5cdGhlYWRlckNlbGxEYmxDbGljayA9IFwiaGVhZGVyQ2VsbERibENsaWNrXCIsXG5cdGZvb3RlckNlbGxEYmxDbGljayA9IFwiZm9vdGVyQ2VsbERibENsaWNrXCIsXG5cdGhlYWRlckNlbGxSaWdodENsaWNrID0gXCJoZWFkZXJDZWxsUmlnaHRDbGlja1wiLFxuXHRmb290ZXJDZWxsUmlnaHRDbGljayA9IFwiZm9vdGVyQ2VsbFJpZ2h0Q2xpY2tcIixcblx0YmVmb3JlRWRpdFN0YXJ0ID0gXCJiZWZvcmVFZGl0U3RhcnRcIixcblx0YWZ0ZXJFZGl0U3RhcnQgPSBcImFmdGVyRWRpdFN0YXJ0XCIsXG5cdGJlZm9yZUVkaXRFbmQgPSBcImJlZm9yZUVkaXRFbmRcIixcblx0YWZ0ZXJFZGl0RW5kID0gXCJhZnRlckVkaXRFbmRcIixcblx0YmVmb3JlS2V5RG93biA9IFwiYmVmb3JlS2V5RG93blwiLFxuXHRhZnRlcktleURvd24gPSBcImFmdGVyS2V5RG93blwiLFxuXG5cdGJlZm9yZUNvbHVtbkhpZGUgPSBcImJlZm9yZUNvbHVtbkhpZGVcIixcblx0YWZ0ZXJDb2x1bW5IaWRlID0gXCJhZnRlckNvbHVtbkhpZGVcIixcblx0YmVmb3JlQ29sdW1uU2hvdyA9IFwiYmVmb3JlQ29sdW1uU2hvd1wiLFxuXHRhZnRlckNvbHVtblNob3cgPSBcImFmdGVyQ29sdW1uU2hvd1wiLFxuXG5cdGJlZm9yZVJvd0hpZGUgPSBcImJlZm9yZVJvd0hpZGVcIixcblx0YWZ0ZXJSb3dIaWRlID0gXCJhZnRlclJvd0hpZGVcIixcblx0YmVmb3JlUm93U2hvdyA9IFwiYmVmb3JlUm93U2hvd1wiLFxuXHRhZnRlclJvd1Nob3cgPSBcImFmdGVyUm93U2hvd1wiLFxuXG5cdGJlZm9yZVJvd0RyYWcgPSBcImJlZm9yZVJvd0RyYWdcIixcblx0ZHJhZ1Jvd1N0YXJ0ID0gXCJkcmFnUm93U3RhcnRcIixcblx0ZHJhZ1Jvd091dCA9IFwiZHJhZ1Jvd091dFwiLFxuXHRkcmFnUm93SW4gPSBcImRyYWdSb3dJblwiLFxuXHRjYW5Sb3dEcm9wID0gXCJjYW5Sb3dEcm9wXCIsXG5cdGNhbmNlbFJvd0Ryb3AgPSBcImNhbmNlbFJvd0Ryb3BcIixcblx0YmVmb3JlUm93RHJvcCA9IFwiYmVmb3JlUm93RHJvcFwiLFxuXHRhZnRlclJvd0Ryb3AgPSBcImFmdGVyUm93RHJvcFwiLFxuXHRhZnRlclJvd0RyYWcgPSBcImFmdGVyUm93RHJhZ1wiLFxuXG5cdGJlZm9yZUNvbHVtbkRyYWcgPSBcImJlZm9yZUNvbHVtbkRyYWdcIixcblx0ZHJhZ0NvbHVtblN0YXJ0ID0gXCJkcmFnQ29sdW1uU3RhcnRcIixcblx0ZHJhZ0NvbHVtbk91dCA9IFwiZHJhZ0NvbHVtbk91dFwiLFxuXHRkcmFnQ29sdW1uSW4gPSBcImRyYWdDb2x1bW5JblwiLFxuXHRjYW5Db2x1bW5Ecm9wID0gXCJjYW5Db2x1bW5Ecm9wXCIsXG5cdGNhbmNlbENvbHVtbkRyb3AgPSBcImNhbmNlbENvbHVtbkRyb3BcIixcblx0YmVmb3JlQ29sdW1uRHJvcCA9IFwiYmVmb3JlQ29sdW1uRHJvcFwiLFxuXHRhZnRlckNvbHVtbkRyb3AgPSBcImFmdGVyQ29sdW1uRHJvcFwiLFxuXHRhZnRlckNvbHVtbkRyYWcgPSBcImFmdGVyQ29sdW1uRHJhZ1wiLFxuXG5cdGJlZm9yZVJvd1Jlc2l6ZSA9IFwiYmVmb3JlUm93UmVzaXplXCIsXG5cdGFmdGVyUm93UmVzaXplID0gXCJhZnRlclJvd1Jlc2l6ZVwiLFxuXG5cdGJlZm9yZVNvcnQgPSBcImJlZm9yZVNvcnRcIixcblx0YWZ0ZXJTb3J0ID0gXCJhZnRlclNvcnRcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRXZlbnRIYW5kbGVyc01hcCB7XG5cdFtrZXk6IHN0cmluZ106ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuXG5cdFtHcmlkRXZlbnRzLnNjcm9sbF06IChzY3JvbGxTdGF0ZTogSUNvb3JkcykgPT4gdm9pZDtcblx0W0dyaWRFdmVudHMuYmVmb3JlU29ydF06IChjb2w6IElDb2wsIGRpcjogRGlycykgPT4gdm9pZCB8IGJvb2xlYW47XG5cdFtHcmlkRXZlbnRzLmFmdGVyU29ydF06IChjb2w6IElDb2wsIGRpcjogRGlycykgPT4gdm9pZDtcblx0W0dyaWRFdmVudHMuZmlsdGVyQ2hhbmdlXTogKHZhbHVlOiBzdHJpbmcsIGNvbElkOiBJZCwgZmlsdGVySWQ6IGZpeGVkUm93Q29udGVudCkgPT4gdm9pZDtcblx0W0dyaWRFdmVudHMuYmVmb3JlUmVzaXplU3RhcnRdOiAoY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50KSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0dyaWRFdmVudHMucmVzaXplXTogKGNvbDogSUNvbCwgZTogTW91c2VFdmVudCkgPT4gdm9pZDtcblx0W0dyaWRFdmVudHMuYWZ0ZXJSZXNpemVFbmRdOiAoY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5jZWxsQ2xpY2tdOiAocm93OiBJUm93LCBjb2w6IElDb2wsIGU6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmNlbGxSaWdodENsaWNrXTogKHJvdzogSVJvdywgY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5jZWxsTW91c2VPdmVyXTogKHJvdzogSVJvdywgY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5jZWxsTW91c2VEb3duXTogKHJvdzogSVJvdywgY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50ICYgVG91Y2hFdmVudCkgPT4gdm9pZDtcblx0W0dyaWRFdmVudHMuY2VsbERibENsaWNrXTogKHJvdzogSVJvdywgY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5oZWFkZXJDZWxsQ2xpY2tdOiAoY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5mb290ZXJDZWxsQ2xpY2tdOiAoY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5oZWFkZXJDZWxsTW91c2VPdmVyXTogKGNvbDogSUNvbCwgZTogTW91c2VFdmVudCkgPT4gdm9pZDtcblx0W0dyaWRFdmVudHMuZm9vdGVyQ2VsbE1vdXNlT3Zlcl06IChjb2w6IElDb2wsIGU6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmhlYWRlckNlbGxNb3VzZURvd25dOiAoY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50ICYgVG91Y2hFdmVudCkgPT4gdm9pZDtcblx0W0dyaWRFdmVudHMuZm9vdGVyQ2VsbE1vdXNlRG93bl06IChjb2w6IElDb2wsIGU6IE1vdXNlRXZlbnQgJiBUb3VjaEV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5oZWFkZXJDZWxsRGJsQ2xpY2tdOiAoY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5mb290ZXJDZWxsRGJsQ2xpY2tdOiAoY29sOiBJQ29sLCBlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5oZWFkZXJDZWxsUmlnaHRDbGlja106IChjb2w6IElDb2wsIGU6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmZvb3RlckNlbGxSaWdodENsaWNrXTogKGNvbDogSUNvbCwgZTogTW91c2VFdmVudCkgPT4gdm9pZDtcblx0W0dyaWRFdmVudHMuYmVmb3JlRWRpdFN0YXJ0XTogKHJvdzogSVJvdywgY29sOiBJQ29sLCBlZGl0b3JUeXBlOiBFZGl0b3JUeXBlKSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0dyaWRFdmVudHMuYWZ0ZXJFZGl0U3RhcnRdOiAocm93OiBJUm93LCBjb2w6IElDb2wsIGVkaXRvclR5cGU6IEVkaXRvclR5cGUpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmJlZm9yZUVkaXRFbmRdOiAodmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4sIHJvdzogSVJvdywgY29sOiBJQ29sKSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0dyaWRFdmVudHMuYWZ0ZXJFZGl0RW5kXTogKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuLCByb3c6IElSb3csIGNvbDogSUNvbCkgPT4gdm9pZDtcblx0W0dyaWRFdmVudHMuYmVmb3JlS2V5RG93bl06IChlOiBFdmVudCkgPT4gYm9vbGVhbiB8IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmFmdGVyS2V5RG93bl06IChlOiBFdmVudCkgPT4gdm9pZDtcblxuXHRbR3JpZEV2ZW50cy5iZWZvcmVDb2x1bW5IaWRlXTogKGNvbDogSUNvbCkgPT4gYm9vbGVhbiB8IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmFmdGVyQ29sdW1uSGlkZV06IChjb2w6IElDb2wpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmJlZm9yZUNvbHVtblNob3ddOiAoY29sOiBJQ29sKSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0dyaWRFdmVudHMuYWZ0ZXJDb2x1bW5TaG93XTogKGNvbDogSUNvbCkgPT4gdm9pZDtcblxuXHRbR3JpZEV2ZW50cy5iZWZvcmVSb3dIaWRlXTogKHJvdzogSVJvdykgPT4gYm9vbGVhbiB8IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmFmdGVyUm93SGlkZV06IChyb3c6IElSb3cpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmJlZm9yZVJvd1Nob3ddOiAocm93OiBJUm93KSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0dyaWRFdmVudHMuYWZ0ZXJSb3dTaG93XTogKHJvdzogSVJvdykgPT4gdm9pZDtcblxuXHRbR3JpZEV2ZW50cy5iZWZvcmVSb3dEcmFnXTogKGRhdGE6IElEcmFnSW5mbywgZXZlbnRzOiBNb3VzZUV2ZW50KSA9PiB2b2lkIHwgYm9vbGVhbjtcblx0W0dyaWRFdmVudHMuZHJhZ1Jvd1N0YXJ0XTogKGRhdGE6IElEcmFnSW5mbywgZXZlbnRzOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5kcmFnUm93T3V0XTogKGRhdGE6IElEcmFnSW5mbywgZXZlbnRzOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5kcmFnUm93SW5dOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmNhblJvd0Ryb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmNhbmNlbFJvd0Ryb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmJlZm9yZVJvd0Ryb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQgfCBib29sZWFuO1xuXHRbR3JpZEV2ZW50cy5hZnRlclJvd0Ryb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmFmdGVyUm93RHJhZ106IChkYXRhOiBJRHJhZ0luZm8sIGV2ZW50czogTW91c2VFdmVudCkgPT4gdm9pZDtcblxuXHRbR3JpZEV2ZW50cy5iZWZvcmVDb2x1bW5EcmFnXTogKGRhdGE6IElEcmFnSW5mbywgZXZlbnRzOiBNb3VzZUV2ZW50KSA9PiB2b2lkIHwgYm9vbGVhbjtcblx0W0dyaWRFdmVudHMuZHJhZ0NvbHVtblN0YXJ0XTogKGRhdGE6IElEcmFnSW5mbywgZXZlbnRzOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5kcmFnQ29sdW1uT3V0XTogKGRhdGE6IElEcmFnSW5mbywgZXZlbnRzOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZEV2ZW50cy5kcmFnQ29sdW1uSW5dOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmNhbkNvbHVtbkRyb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmNhbmNlbENvbHVtbkRyb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmJlZm9yZUNvbHVtbkRyb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQgfCBib29sZWFuO1xuXHRbR3JpZEV2ZW50cy5hZnRlckNvbHVtbkRyb3BdOiAoZGF0YTogSURyYWdJbmZvLCBldmVudHM6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkRXZlbnRzLmFmdGVyQ29sdW1uRHJhZ106IChkYXRhOiBJRHJhZ0luZm8sIGV2ZW50czogTW91c2VFdmVudCkgPT4gdm9pZDtcblxuXHRbR3JpZEV2ZW50cy5iZWZvcmVSb3dSZXNpemVdOiAocm93OiBJUm93LCBldmVudHM6IEV2ZW50LCBjdXJyZW50SGVpZ2h0OiBudW1iZXIpID0+IGJvb2xlYW47XG5cdFtHcmlkRXZlbnRzLmFmdGVyUm93UmVzaXplXTogKHJvdzogSVJvdywgZXZlbnRzOiBFdmVudCwgY3VycmVudEhlaWdodDogbnVtYmVyKSA9PiB2b2lkO1xuXG5cdC8vIE5vdCBwdWJsaWMgZXZlbnRzXG5cdFtHcmlkRXZlbnRzLmV4cGFuZF06IChyb3dJZDogSWQpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBlbnVtIEdyaWRTeXN0ZW1FdmVudHMge1xuXHRjZWxsVG91Y2hNb3ZlID0gXCJjZWxsVG91Y2hNb3ZlXCIsXG5cdGNlbGxUb3VjaEVuZCA9IFwiY2VsbFRvdWNoRW5kXCIsXG5cdGhlYWRlckNlbGxUb3VjaE1vdmUgPSBcImhlYWRlckNlbGxUb3VjaE1vdmVcIixcblx0aGVhZGVyQ2VsbFRvdWNoRW5kID0gXCJoZWFkZXJDZWxsVG91Y2hFbmRcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU3lzdGVtRXZlbnRIYW5kbGVyc01hcCB7XG5cdFtrZXk6IHN0cmluZ106ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuXHRbR3JpZFN5c3RlbUV2ZW50cy5jZWxsVG91Y2hNb3ZlXTogKHJvdzogSVJvdywgY29sOiBJQ29sLCBlOiBUb3VjaEV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZFN5c3RlbUV2ZW50cy5jZWxsVG91Y2hFbmRdOiAocm93OiBJUm93LCBjb2w6IElDb2wsIGU6IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG5cdFtHcmlkU3lzdGVtRXZlbnRzLmhlYWRlckNlbGxUb3VjaE1vdmVdOiAoY29sOiBJQ29sLCBlOiBUb3VjaEV2ZW50KSA9PiB2b2lkO1xuXHRbR3JpZFN5c3RlbUV2ZW50cy5oZWFkZXJDZWxsVG91Y2hFbmRdOiAoY29sOiBJQ29sLCBlOiBUb3VjaEV2ZW50KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDZWxsQ29udGVudCB7XG5cdGVsZW1lbnQ/OiBhbnk7XG5cdHRvSHRtbDogKGNvbHVtbjogSUNvbCwgY29uZmlnOiBJUmVuZGVyZXJDb25maWcpID0+IGFueTtcblx0bWF0Y2g/OiAob2JqOiBhbnksIHZhbHVlOiBhbnksIGl0ZW0/OiBhbnksIG11bHRpPzogYm9vbGVhbikgPT4gYm9vbGVhbjtcblx0ZGVzdHJveT86ICgpID0+IHZvaWQ7XG5cdGNhbGN1bGF0ZT86IChjb2w6IGFueVtdLCByb290czogYW55W10pID0+IHN0cmluZyB8IG51bWJlcjtcblx0Ly8gW3RvZG9dIHJlbmFtZVxuXHR2YWxpZGF0ZT86IChjb2xJZDogSWQsIGRhdGE6IGFueVtdKSA9PiBhbnlbXTtcblx0dmFsdWU/OiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbnRlbnRMaXN0IHtcblx0W2tleTogc3RyaW5nXTogSUNlbGxDb250ZW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMYXlvdXRTdGF0ZSB7XG5cdHdyYXBwZXI6IElTaXplcztcblx0c2hpZnRzOiBJQ29vcmRzO1xuXHRzdGlja3k6IGJvb2xlYW47XG5cdGdyaWRCb2R5SGVpZ2h0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpeGVkUm93c0NvbmZpZyBleHRlbmRzIElMYXlvdXRTdGF0ZSB7XG5cdG5hbWU6IFwiaGVhZGVyXCIgfCBcImZvb3RlclwiO1xuXHRwb3NpdGlvbjogXCJ0b3BcIiB8IFwiYm90dG9tXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVhsc3hFeHBvcnRDb25maWcge1xuXHR1cmw/OiBzdHJpbmc7XG5cdG5hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNzdkV4cG9ydENvbmZpZyBleHRlbmRzIElDc3ZEcml2ZXJDb25maWcge1xuXHRuYW1lPzogc3RyaW5nO1xuXHRhc0ZpbGU/OiBib29sZWFuO1xuXHRmbGF0PzogYm9vbGVhbjtcblx0cm93RGVsaW1pdGVyPzogc3RyaW5nO1xuXHRjb2x1bW5EZWxpbWl0ZXI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIERpcnMgPSBcImFzY1wiIHwgXCJkZXNjXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvb3JkcyB7XG5cdHg6IG51bWJlcjtcblx0eTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTaXplcyB7XG5cdHdpZHRoOiBudW1iZXI7XG5cdGhlaWdodDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDZWxsIHtcblx0cm93OiBJUm93O1xuXHRjb2x1bW46IElDb2w7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJvdyB7XG5cdGlkPzogSWQ7XG5cdGhlaWdodD86IG51bWJlcjtcblx0JGhlaWdodD86IG51bWJlcjtcblx0W2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFZGl0b3Ige1xuXHR0b0hUTUwoKTogYW55O1xuXHRlbmRFZGl0KHdpdGhvdXRTYXZlPzogYm9vbGVhbik6IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIElTZWxlY3Rpb25UeXBlID0gXCJjZWxsXCIgfCBcInJvd1wiIHwgXCJjb21wbGV4XCI7XG5leHBvcnQgdHlwZSBJRGlyZWN0aW9uID0gXCJob3Jpem9udGFsXCIgfCBcInZlcnRpY2FsXCI7XG4vLyBUT0RPOiBOb3cgd29ya2luZyBqdXN0IHJvd1xuZXhwb3J0IHR5cGUgSURyYWdUeXBlID0gXCJyb3dcIiB8IFwiY29sdW1uXCIgfCBcImJvdGhcIjtcbmV4cG9ydCB0eXBlIEFkanVzdFRhcmdldFR5cGUgPSBcImRhdGFcIiB8IFwiaGVhZGVyXCIgfCBcImZvb3RlclwiO1xuZXhwb3J0IHR5cGUgSUFkanVzdEJ5ID0gQWRqdXN0VGFyZ2V0VHlwZSB8IGJvb2xlYW47XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlbGVjdGlvbkNvbmZpZyB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2VsZWN0aW9uIHtcblx0Y29uZmlnPzogSVNlbGVjdGlvbkNvbmZpZztcblxuXHRzZXRDZWxsKHJvd0lkPzogSWQsIGNvbElkPzogSWQsIGN0cmxVcD86IGJvb2xlYW4sIHNoaWZ0VXA/OiBib29sZWFuKTogdm9pZDtcblx0Z2V0Q2VsbCgpOiBJQ2VsbDtcblx0Z2V0Q2VsbHMoKTogSUNlbGxbXTtcblx0cmVtb3ZlQ2VsbChyb3dJZD86IElkLCBjb2xJZD86IElkKTogdm9pZDtcblx0ZGlzYWJsZSgpOiB2b2lkO1xuXHRlbmFibGUoKTogdm9pZDtcblxuXHR0b0hUTUwoKTogYW55IHwgYW55W107XG59XG5cbmV4cG9ydCBlbnVtIEdyaWRTZWxlY3Rpb25FdmVudHMge1xuXHRiZWZvcmVVblNlbGVjdCA9IFwiYmVmb3JlVW5TZWxlY3RcIixcblx0YWZ0ZXJVblNlbGVjdCA9IFwiYWZ0ZXJVblNlbGVjdFwiLFxuXHRiZWZvcmVTZWxlY3QgPSBcImJlZm9yZVNlbGVjdFwiLFxuXHRhZnRlclNlbGVjdCA9IFwiYWZ0ZXJTZWxlY3RcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJR3JpZFNlbGVjdGlvbkV2ZW50c0hhbmRsZXJzTWFwIHtcblx0W2tleTogc3RyaW5nXTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cdFtHcmlkU2VsZWN0aW9uRXZlbnRzLmFmdGVyU2VsZWN0XTogKHJvdzogSVJvdywgY29sOiBJQ29sKSA9PiB2b2lkO1xuXHRbR3JpZFNlbGVjdGlvbkV2ZW50cy5hZnRlclVuU2VsZWN0XTogKHJvdzogSVJvdywgY29sOiBJQ29sKSA9PiB2b2lkO1xuXHRbR3JpZFNlbGVjdGlvbkV2ZW50cy5iZWZvcmVTZWxlY3RdOiAocm93OiBJUm93LCBjb2w6IElDb2wpID0+IGJvb2xlYW4gfCB2b2lkO1xuXHRbR3JpZFNlbGVjdGlvbkV2ZW50cy5iZWZvcmVVblNlbGVjdF06IChyb3c6IElSb3csIGNvbDogSUNvbCkgPT4gYm9vbGVhbiB8IHZvaWQ7XG59XG4iLCJpbXBvcnQgeyBmaW5kSW5kZXggfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHsgZWwsIEtFWUVEX0xJU1QgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBnZXRIZWlnaHQsIGdldFdpZHRoIH0gZnJvbSBcIi4uL2hlbHBlcnMvY2VsbHNcIjtcbmltcG9ydCB7IGdldFRvdGFsV2lkdGgsIGlzSHRtbEVuYWJsZSwgZ2V0VG90YWxIZWlnaHQgfSBmcm9tIFwiLi4vaGVscGVycy9tYWluXCI7XG5pbXBvcnQgeyBHcmlkRXZlbnRzLCBJQ29sLCBJQ29vcmRzLCBJUmVuZGVyZXJDb25maWcsIEdyaWRTeXN0ZW1FdmVudHMgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IGdldEVkaXRvciB9IGZyb20gXCIuL2VkaXRvcnMvZWRpdG9yc1wiO1xuaW1wb3J0IHsgbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcbmltcG9ydCB7IGdldFRyZWVDZWxsV2lkdGhPZmZzZXQsIHRvRm9ybWF0IH0gZnJvbSBcIi4uL2hlbHBlcnMvZGF0YVwiO1xuXG50eXBlIG1vdXNlRXZlbnRzID1cblx0fCBHcmlkRXZlbnRzLmNlbGxDbGlja1xuXHR8IEdyaWRFdmVudHMuY2VsbE1vdXNlT3ZlclxuXHR8IEdyaWRFdmVudHMuY2VsbE1vdXNlRG93blxuXHR8IEdyaWRFdmVudHMuY2VsbERibENsaWNrXG5cdHwgR3JpZEV2ZW50cy5jZWxsUmlnaHRDbGljaztcblxudHlwZSB0b3VjaEV2ZW50cyA9IEdyaWRTeXN0ZW1FdmVudHMuY2VsbFRvdWNoRW5kIHwgR3JpZFN5c3RlbUV2ZW50cy5jZWxsVG91Y2hNb3ZlO1xuXG5mdW5jdGlvbiBoYW5kbGVNb3VzZShcblx0cm93U3RhcnQ6IG51bWJlcixcblx0Y29sU3RhcnQ6IG51bWJlcixcblx0Y29uZjogSVJlbmRlcmVyQ29uZmlnLFxuXHR0eXBlOiBtb3VzZUV2ZW50cyAmIHRvdWNoRXZlbnRzLFxuXHRlOiBhbnlcbikge1xuXHRjb2xTdGFydCA9IGxvY2F0ZU5vZGVCeUNsYXNzTmFtZShlLnRhcmdldCwgXCJkaHhfZ3JpZC1maXhlZC1jb2xzLXdyYXBcIikgPyAwIDogY29sU3RhcnQ7XG5cdGNvbnN0IHRhcmdldCA9IGxvY2F0ZU5vZGVCeUNsYXNzTmFtZShlLnRhcmdldCwgXCJkaHhfZ3JpZC1jZWxsXCIpO1xuXHRjb25zdCB0YXJnZXRTcGFuID0gbG9jYXRlTm9kZUJ5Q2xhc3NOYW1lKGUudGFyZ2V0LCBcImRoeF9zcGFuLWNlbGxcIik7XG5cblx0aWYgKCghdGFyZ2V0ICYmICF0YXJnZXRTcGFuKSB8fCAhdHlwZSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHJvd05vZGUgPSB0YXJnZXQgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldFNwYW47XG5cdGNvbnN0IGJvZHlOb2RlID0gcm93Tm9kZS5wYXJlbnROb2RlO1xuXG5cdGNvbnN0IGNvbEluZGV4ID0gdGFyZ2V0XG5cdFx0PyBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHJvd05vZGUuY2hpbGROb2RlcywgdGFyZ2V0KVxuXHRcdDogY29uZi5jb2x1bW5zLmZpbmRJbmRleChjb2x1bW4gPT4gY29sdW1uLmlkID09PSB0YXJnZXRTcGFuLmdldEF0dHJpYnV0ZShcImRoeF9jb2xfaWRcIikpO1xuXG5cdGNvbnN0IGNvbHVtbnMgPSBjb25mLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29sLmhpZGRlbik7XG5cdGNvbnN0IGNvbCA9IGNvbHVtbnNbY29sU3RhcnQgKyBjb2xJbmRleF07XG5cblx0Y29uc3Qgcm93SW5kZXggPSB0YXJnZXRcblx0XHQ/IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYm9keU5vZGUuY2hpbGROb2Rlcywgcm93Tm9kZSlcblx0XHQ6IE51bWJlcih0YXJnZXRTcGFuLmdldEF0dHJpYnV0ZShcImRoeF9pZFwiKSkgLSAxO1xuXHRjb25zdCByb3cgPSBjb25mLmRhdGFbYCR7KHRhcmdldCA/IHJvd1N0YXJ0IDogMCkgKyByb3dJbmRleH1gXTtcblxuXHRjb25zdCBzeXN0ZW1FdmVudCA9ICh0eXBlIGFzIHN0cmluZykudG9Mb2NhbGVMb3dlckNhc2UoKS5pbmNsdWRlcyhcInRvdWNoXCIpO1xuXG5cdGlmIChzeXN0ZW1FdmVudCkge1xuXHRcdGNvbmYuX2V2ZW50cy5maXJlKHR5cGUsIFtyb3csIGNvbCwgZV0pO1xuXHR9IGVsc2Uge1xuXHRcdGNvbmYuZXZlbnRzLmZpcmUodHlwZSwgW3JvdywgY29sLCBlXSk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhhbmRsZXJzKHJvdzogbnVtYmVyLCBjb2x1bW46IG51bWJlciwgY29uZjogSVJlbmRlcmVyQ29uZmlnKSB7XG5cdHJldHVybiB7XG5cdFx0b25jbGljazogW2hhbmRsZU1vdXNlLCByb3csIGNvbHVtbiwgY29uZiwgR3JpZEV2ZW50cy5jZWxsQ2xpY2tdLFxuXHRcdG9ubW91c2VvdmVyOiBbaGFuZGxlTW91c2UsIHJvdywgY29sdW1uLCBjb25mLCBHcmlkRXZlbnRzLmNlbGxNb3VzZU92ZXJdLFxuXHRcdG9ubW91c2Vkb3duOiBbaGFuZGxlTW91c2UsIHJvdywgY29sdW1uLCBjb25mLCBHcmlkRXZlbnRzLmNlbGxNb3VzZURvd25dLFxuXHRcdG9uZGJsY2xpY2s6IFtoYW5kbGVNb3VzZSwgcm93LCBjb2x1bW4sIGNvbmYsIEdyaWRFdmVudHMuY2VsbERibENsaWNrXSxcblx0XHRvbmNvbnRleHRtZW51OiBbaGFuZGxlTW91c2UsIHJvdywgY29sdW1uLCBjb25mLCBHcmlkRXZlbnRzLmNlbGxSaWdodENsaWNrXSxcblx0XHRvbnRvdWNoc3RhcnQ6IFtoYW5kbGVNb3VzZSwgcm93LCBjb2x1bW4sIGNvbmYsIEdyaWRFdmVudHMuY2VsbE1vdXNlRG93bl0sXG5cdFx0b250b3VjaG1vdmU6IFtoYW5kbGVNb3VzZSwgcm93LCBjb2x1bW4sIGNvbmYsIEdyaWRTeXN0ZW1FdmVudHMuY2VsbFRvdWNoTW92ZV0sXG5cdFx0b250b3VjaGVuZDogW2hhbmRsZU1vdXNlLCByb3csIGNvbHVtbiwgY29uZiwgR3JpZFN5c3RlbUV2ZW50cy5jZWxsVG91Y2hFbmRdLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJlZUNlbGwoY29udGVudDogYW55LCByb3c6IGFueSwgY29sOiBJQ29sLCBjb25mOiBJUmVuZGVyZXJDb25maWcpIHtcblx0Y29uc3QgZ2V0Q2VsbEFyaWFBdHRycyA9IChjb2wsIGluZCkgPT4gKHtcblx0XHRyb2xlOiBcImdyaWRjZWxsXCIsXG5cdFx0XCJhcmlhLWNvbGluZGV4XCI6IGluZCxcblx0fSk7XG5cdGNvbnN0IGdldFRvZ2dsZUFyaWFBdHRycyA9IHJvdyA9PiAoe1xuXHRcdHJvbGU6IFwiYnV0dG9uXCIsXG5cdFx0XCJhcmlhLWxhYmVsXCI6IHJvdy4kb3BlbmVkID8gXCJDb2xsYXBzZSBncm91cFwiIDogXCJFeHBhbmQgZ3JvdXBcIixcblx0fSk7XG5cdGNvbnN0IGlzRWRpdGFibGUgPSBjb25mLiRlZGl0YWJsZSAmJiBjb25mLiRlZGl0YWJsZS5yb3cgPT09IHJvdy5pZCAmJiBjb25mLiRlZGl0YWJsZS5jb2wgPT09IGNvbC5pZDtcblx0bGV0IGNzcyA9IFwiXCI7XG5cdGNvbnN0IGNlbGxBbGlnbiA9IGNvbC5hbGlnbiA/IGAgZGh4X2FsaWduLSR7Y29sLmFsaWdufWAgOiBcImRoeF9hbGlnbi1sZWZ0XCI7XG5cdGlmIChjb25mLmRyYWdNb2RlICYmIGNvbmYuZHJhZ0l0ZW0gPT09IFwicm93XCIpIHtcblx0XHRjc3MgKz1cblx0XHRcdChyb3cuJGRyb3BoZXJlICYmICFpc0VkaXRhYmxlID8gXCIgZGh4X2dyaWQtY2VsbC0tZHJvcGhlcmVcIiA6IFwiXCIpICtcblx0XHRcdChyb3cuJGRyYWd0YXJnZXQgJiYgIWlzRWRpdGFibGUgPyBcIiBkaHhfZ3JpZC1jZWxsLS1kcmFndGFyZ2V0XCIgOiBcIlwiKSArXG5cdFx0XHQoIWlzRWRpdGFibGUgPyBcIiBkaHhfZ3JpZC1jZWxsLS1kcmFnXCIgOiBcIlwiKTtcblx0fVxuXG5cdGNvbnN0IHBhcmVudFBhZGRpbmcgPSBnZXRUcmVlQ2VsbFdpZHRoT2Zmc2V0KHJvdyk7XG5cdHJldHVybiBlbChcblx0XHRcIi5kaHhfZ3JpZC1jZWxsXCIsXG5cdFx0e1xuXHRcdFx0Y2xhc3M6XG5cdFx0XHRcdGBkaHhfdHJlZS1jZWxsICR7Y29sLiRjZWxsQ3NzW3Jvdy5pZF0gfHwgXCJcIn0gJHtyb3cuJGl0ZW1zID8gXCJkaHhfZ3JpZC1leHBhbmQtY2VsbFwiIDogXCJcIn1gICtcblx0XHRcdFx0YCAke2lzRWRpdGFibGUgPyBcImRoeF90cmVlLWVkaXRpbmctY2VsbFwiIDogXCJcIn0gJHtjc3N9YCArXG5cdFx0XHRcdGNlbGxBbGlnbixcblx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdHdpZHRoOiBjb2wuJHdpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IHJvdy4kaGVpZ2h0LFxuXHRcdFx0XHRwYWRkaW5nOiAhcm93LiRpdGVtcyA/IGAwIDAgMCAke3BhcmVudFBhZGRpbmd9cHhgIDogMCxcblx0XHRcdH0sXG5cdFx0XHRkaHhfY29sX2lkOiBjb2wuaWQsXG5cdFx0XHQuLi5nZXRDZWxsQXJpYUF0dHJzKGNvbCwgMSksXG5cdFx0fSxcblx0XHRbXG5cdFx0XHRyb3cuJGl0ZW1zXG5cdFx0XHRcdD8gZWwoXCIuZGh4X2dyaWQtZXhwYW5kLWNlbGwtaWNvblwiLCB7XG5cdFx0XHRcdFx0XHRjbGFzczogcm93LiRvcGVuZWQgPyBcImR4aSBkeGktY2hldnJvbi11cFwiIDogXCJkeGkgZHhpLWNoZXZyb24tZG93blwiLFxuXHRcdFx0XHRcdFx0ZGh4X2lkOiByb3cuaWQsXG5cdFx0XHRcdFx0XHQuLi5nZXRUb2dnbGVBcmlhQXR0cnMocm93KSxcblx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdHBhZGRpbmc6IHJvdy4kbGV2ZWwgPyBgMCAwIDAgJHs0ICsgcGFyZW50UGFkZGluZ31weGAgOiBcIjAgMCAwIDRweFwiLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0ICB9KVxuXHRcdFx0XHQ6IG51bGwsXG5cdFx0XHRlbChcblx0XHRcdFx0XCIuZGh4X3RyZWUtY2VsbFwiLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y2xhc3M6IGNlbGxBbGlnbiArIGAkeyhjb25mLmF1dG9IZWlnaHQgJiYgXCIgZGh4X3RyZWUtY2VsbF9hdXRvLWhlaWdodFwiKSB8fCBcIlwifWAsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFtjb250ZW50XVxuXHRcdFx0KSxcblx0XHRdXG5cdCk7XG59XG5cbmZ1bmN0aW9uIGdldEVkaXRvckNlbGwocm93OiBhbnksIGNvbDogSUNvbCwgY29uZjogSVJlbmRlcmVyQ29uZmlnKSB7XG5cdHJldHVybiBnZXRFZGl0b3Iocm93LCBjb2wsIGNvbmYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2VsbHMoY29uZjogSVJlbmRlcmVyQ29uZmlnKTogYW55W10ge1xuXHRpZiAoIWNvbmYuZGF0YSB8fCAhY29uZi5jb2x1bW5zKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGNvbnN0IGdldFJvd0FyaWFBdHRycyA9IGluZCA9PiAoe1xuXHRcdHJvbGU6IFwicm93XCIsXG5cdFx0XCJhcmlhLXJvd2luZGV4XCI6IGluZCxcblx0fSk7XG5cdGNvbnN0IHBvcyA9IGNvbmYuJHBvc2l0aW9ucztcblx0Y29uc3QgZGF0YSA9IGNvbmYuZGF0YSA/IGNvbmYuZGF0YS5zbGljZShwb3MueVN0YXJ0LCBwb3MueUVuZCkgOiBbXTtcblx0Y29uc3QgY29sdW1ucyA9IGNvbmYuY29sdW1ucy5zbGljZShwb3MueFN0YXJ0LCBwb3MueEVuZCk7XG5cdGxldCBzZWxlY3RlZENlbGwgPSBjb25mLnNlbGVjdGlvbi5nZXRDZWxsKCk7XG5cdGxldCBpc0ZpcnN0VGFiaW5kZXggPSB0cnVlO1xuXG5cdHJldHVybiBkYXRhLm1hcCgocm93LCBpbmRleCkgPT4ge1xuXHRcdGNvbnN0IGlzTGFzdFJvdyA9IGRhdGEubGVuZ3RoIC0gMSA9PT0gaW5kZXg7XG5cdFx0bGV0IHJvd0NzcyA9IFwiXCI7XG5cblx0XHRpZiAoY29uZi5yb3dDc3MpIHtcblx0XHRcdHJvd0NzcyA9IGNvbmYucm93Q3NzKHJvdyk7XG5cdFx0fVxuXHRcdGlmIChyb3cuJGNzcykge1xuXHRcdFx0cm93Q3NzICs9IHJvdy4kY3NzO1xuXHRcdH1cblxuXHRcdHJldHVybiBlbChcblx0XHRcdFwiLmRoeF9ncmlkLXJvd1wiLFxuXHRcdFx0e1xuXHRcdFx0XHRzdHlsZTogeyBoZWlnaHQ6IGlzTGFzdFJvdyA/IHJvdy4kaGVpZ2h0ICsgMSA6IHJvdy4kaGVpZ2h0IH0sXG5cdFx0XHRcdGRoeF9pZDogcm93LmlkLFxuXHRcdFx0XHRjbGFzczogcm93Q3NzLFxuXHRcdFx0XHRfa2V5OiByb3cuaWQsXG5cdFx0XHRcdF9mbGFnczogS0VZRURfTElTVCxcblx0XHRcdFx0Li4uZ2V0Um93QXJpYUF0dHJzKHBvcy55U3RhcnQgKyBpbmRleCArIDEpLFxuXHRcdFx0fSxcblx0XHRcdHJvdy4kY3VzdG9tUmVuZGVyXG5cdFx0XHRcdD8gW3Jvdy4kY3VzdG9tUmVuZGVyKHJvdywgY29uZildXG5cdFx0XHRcdDogY29sdW1ucy5tYXAoKGNvbCwgY29sSW5kZXgpID0+IHtcblx0XHRcdFx0XHRcdGlmICghY29sLmhpZGRlbikge1xuXHRcdFx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IHRvRm9ybWF0KHJvd1tjb2wuaWRdLCBjb2wudHlwZSwgY29sLmZvcm1hdCk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGdldFRhYkluZGV4ID0gKGNvbCwgcm93KSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgYXR0cnMgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0YWJpbmRleDogLTEsXG5cdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmIChzZWxlY3RlZENlbGwpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGlzIGN1cnJlbnQgY2VsbCBzZWxlY3RlZD9cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChzZWxlY3RlZENlbGwucm93LmlkID09PSByb3cuaWQgJiYgc2VsZWN0ZWRDZWxsLmNvbHVtbi5pZCA9PT0gY29sLmlkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGF0dHJzW1widGFiaW5kZXhcIl0gPSAwO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoaXNGaXJzdFRhYmluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRhdHRyc1tcInRhYmluZGV4XCJdID0gMDtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gb25lLXRpbWUgZXZlbnQgLSBvbmx5IG9uIGZpcnN0IGZvY3VzXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGSVhNRTogY3J1dGNoLXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRhdHRyc1tcIm9uZm9jdXNcIl0gPSBlID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRklYTUU6IGlzc3VlIHdpdGggc2FtcGxlcyB0aGF0IGFscmVhZHkgc2V0Q2VsbCBmcm9tIGluZGV4Lmh0bWwsIHJlbmRlcmVkIHR3aWNlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFRPRE86IG5vdCBoZXJlIEJVVCBpZiBmaXJzdCBjZWxsIGlzIG5vdCBpbiB2aWV3cG9ydCAtPiBzY3JvbGwgdG8gaXQgdG8gc2V0IGZvY3VzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChjb25mLnNlbGVjdGlvbiAmJiAhc2VsZWN0ZWRDZWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3Qgcm93SWQgPSBlLnRhcmdldC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZShcImRoeF9pZFwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBjb2xJZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRoeF9jb2xfaWRcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGNvbElkICYmIHJvd0lkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25mLnNlbGVjdGlvbi5zZXRDZWxsKHJvd0lkLCBjb2xJZCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZWxlY3RlZENlbGwgPSBjb25mLnNlbGVjdGlvbi5nZXRDZWxsKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGlzRmlyc3RUYWJpbmRleCA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGF0dHJzO1xuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHRjb25zdCBnZXRFZGl0QnRuQXJpYUF0dHJzID0gKCkgPT4gKHtcblx0XHRcdFx0XHRcdFx0XHRyb2xlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHRcdFx0XHRcdFwiYXJpYS1sYWJlbFwiOiBcIkVkaXQgY29udGVudFwiLFxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZ2V0Q2VsbEFyaWFBdHRycyA9IChjb2wsIGNvbEluZGV4LCByb3dJbmRleCwgaXNFZGl0YWJsZSkgPT4gKHtcblx0XHRcdFx0XHRcdFx0XHRyb2xlOiBcImdyaWRjZWxsXCIsXG5cdFx0XHRcdFx0XHRcdFx0XCJhcmlhLWNvbGluZGV4XCI6IGNvbEluZGV4LFxuXHRcdFx0XHRcdFx0XHRcdFwiYXJpYS1yZWFkb25seVwiOiBpc0VkaXRhYmxlID8gXCJmYWxzZVwiIDogXCJ0cnVlXCIsXG5cdFx0XHRcdFx0XHRcdFx0Ly8gXCJhcmlhLXNlbGVjdGVkXCI6IGlzU2VsZWN0ZWQgPyBcInRydWVcIiA6IFwiZmFsc2VcIiwgLy8gVE9ETzogYWRkXG5cdFx0XHRcdFx0XHRcdFx0Li4uZ2V0VGFiSW5kZXgoY29sLCByb3cpLFxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZGVmYXVsdFRlbXBsYXRlID0gKHRleHQ6IGFueSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgdGV4dCA9PT0gXCJib29sZWFuXCIgfHwgY29sLnR5cGUgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIHRleHQgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGAke0Jvb2xlYW4odGV4dCl9YDtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRleHQgfHwgdGV4dCA9PT0gMCA/IHRleHQgOiBcIlwiO1xuXHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdGxldCBjb250ZW50ID0gY29sLnRlbXBsYXRlXG5cdFx0XHRcdFx0XHRcdFx0PyBjb2wudGVtcGxhdGUodmFsdWUsIHJvdywgY29sKVxuXHRcdFx0XHRcdFx0XHRcdDogZGVmYXVsdFRlbXBsYXRlKHZhbHVlKTtcblx0XHRcdFx0XHRcdFx0Ly8gY29udGVudCBjYW4gYmUgYSBkb212bSBub2RlIG9yIGEgc3RyaW5nXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnRlbnQgPSBpc0h0bWxFbmFibGUoY29uZiwgY29sKVxuXHRcdFx0XHRcdFx0XHRcdFx0PyBlbChcImRpdi5kaHhfZ3JpZC1jZWxsX19jb250ZW50XCIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIi5pbm5lckhUTUxcIjogY29udGVudCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuLi5nZXRFZGl0QnRuQXJpYUF0dHJzKCksXG5cdFx0XHRcdFx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0XHRcdFx0XHQ6IGNvbnRlbnQ7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRsZXQgY3NzID0gYCR7KGNvbC4kY2VsbENzcyAmJiBjb2wuJGNlbGxDc3Nbcm93LmlkXSkgfHwgXCJcIn0gZGh4XyR7XG5cdFx0XHRcdFx0XHRcdFx0Y29sLnR5cGVcblx0XHRcdFx0XHRcdFx0fS1jZWxsYC5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcblxuXHRcdFx0XHRcdFx0XHRsZXQgY29sV2lkdGggPSBjb2wuJHdpZHRoO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBpc0VkaXRhYmxlID1cblx0XHRcdFx0XHRcdFx0XHRjb25mLiRlZGl0YWJsZSAmJlxuXHRcdFx0XHRcdFx0XHRcdGNvbmYuJGVkaXRhYmxlLnJvdyA9PT0gcm93LmlkICYmXG5cdFx0XHRcdFx0XHRcdFx0Y29uZi4kZWRpdGFibGUuY29sID09PSBjb2wuaWQ7XG5cdFx0XHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFx0XHRpc0VkaXRhYmxlIHx8XG5cdFx0XHRcdFx0XHRcdFx0KGNvbC50eXBlID09PSBcImJvb2xlYW5cIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0KChjb25mLmVkaXRhYmxlICYmIChjb2wuZWRpdGFibGUgPz8gdHJ1ZSkpIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCghY29uZi5lZGl0YWJsZSAmJiBjb2wuZWRpdGFibGUpKSlcblx0XHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0XHRcdFx0IShcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uZi5sZWZ0U3BsaXQgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uZi5jb2x1bW5zLmxlbmd0aCAhPT0gY29uZi5sZWZ0U3BsaXQgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uZi5jb2x1bW5zLmluZGV4T2YoY29sKSA8IGNvbmYubGVmdFNwbGl0XG5cdFx0XHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb250ZW50ID0gZ2V0RWRpdG9yQ2VsbChyb3csIGNvbCwgY29uZikudG9IVE1MKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRjc3MgKz0gXCIgZGh4X2dyaWQtY2VsbF9fZWRpdGFibGVcIjtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChjb25mLmxlZnRTcGxpdCA9PT0gY29uZi5jb2x1bW5zLmluZGV4T2YoY29sKSArIDEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29sV2lkdGggLT0gMTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoY29uZi50eXBlID09PSBcInRyZWVcIiAmJiBjb25mLmZpcnN0Q29sSWQgPT09IGNvbC5pZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBnZXRUcmVlQ2VsbChjb250ZW50LCByb3csIGNvbCwgY29uZik7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoY29uZi5kcmFnTW9kZSAmJiBjb25mLmRyYWdJdGVtID09PSBcInJvd1wiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y3NzICs9XG5cdFx0XHRcdFx0XHRcdFx0XHQocm93LiRkcm9waGVyZSAmJiAhaXNFZGl0YWJsZSA/IFwiIGRoeF9ncmlkLWNlbGwtLWRyb3BoZXJlXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0XHRcdFx0XHQocm93LiRkcmFndGFyZ2V0ICYmICFpc0VkaXRhYmxlID8gXCIgZGh4X2dyaWQtY2VsbC0tZHJhZ3RhcmdldFwiIDogXCJcIikgK1xuXHRcdFx0XHRcdFx0XHRcdFx0KCFpc0VkaXRhYmxlID8gXCIgZGh4X2dyaWQtY2VsbC0tZHJhZ1wiIDogXCJcIik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKGNvbC5hbGlnbikge1xuXHRcdFx0XHRcdFx0XHRcdGNzcyArPSBgIGRoeF9hbGlnbi0ke2NvbC5hbGlnbn1gO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChjb25mLmF1dG9IZWlnaHQpIHtcblx0XHRcdFx0XHRcdFx0XHRjc3MgKz0gXCIgZGh4X2dyaWQtY2VsbF9fY29udGVudF9hdXRvLWhlaWdodFwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIGVsKFxuXHRcdFx0XHRcdFx0XHRcdFwiLmRoeF9ncmlkLWNlbGxcIixcblx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRjbGFzczogY3NzLFxuXHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0d2lkdGg6IGNvbFdpZHRoLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRoZWlnaHQ6IHJvdy4kaGVpZ2h0ICsgXCJweFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcdF9rZXk6IGNvbC5pZCxcblx0XHRcdFx0XHRcdFx0XHRcdGRoeF9jb2xfaWQ6IGNvbC5pZCxcblx0XHRcdFx0XHRcdFx0XHRcdC4uLmdldENlbGxBcmlhQXR0cnMoY29sLCBwb3MueFN0YXJ0ICsgY29sSW5kZXggKyAxLCBpbmRleCwgY29uZi5lZGl0YWJsZSksXG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRbY29udGVudF1cblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0ICB9KVxuXHRcdCk7XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3BhbnMoY29uZmlnOiBJUmVuZGVyZXJDb25maWcsIGZyb3plbj86IGJvb2xlYW4pOiBhbnlbXSB7XG5cdGNvbnN0IHNwYW5DZWxscyA9IFtdO1xuXHRjb25zdCBwb3MgPSBjb25maWcuJHBvc2l0aW9ucztcblx0Y29uc3QgY29sdW1ucyA9IGNvbmZpZy5jb2x1bW5zO1xuXHRjb25zdCByb3dzID0gY29uZmlnLmRhdGE7XG5cblx0aWYgKCFjb2x1bW5zLmxlbmd0aCB8fCAhY29uZmlnLnNwYW5zKSByZXR1cm4gbnVsbDtcblxuXHRjb25zdCBzcGFucyA9IGNvbmZpZy5zcGFucy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0cmV0dXJuIHR5cGVvZiBhLnJvdyA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgYi5yb3cgPT09IFwic3RyaW5nXCJcblx0XHRcdD8gYS5yb3cubG9jYWxlQ29tcGFyZShiLnJvdylcblx0XHRcdDogKGEucm93IGFzIG51bWJlcikgLSAoYi5yb3cgYXMgbnVtYmVyKTtcblx0fSk7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzcGFucy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IHJvdyA9IHNwYW5zW2ldLnJvdztcblx0XHRjb25zdCBjb2wgPSBzcGFuc1tpXS5jb2x1bW47XG5cdFx0Y29uc3Qgc3BhbkhlaWdodCA9IHNwYW5zW2ldLnJvd3NwYW47XG5cdFx0Y29uc3Qgc3BhbldpZHRoID0gc3BhbnNbaV0uY29sc3Bhbjtcblx0XHRjb25zdCBzcGFuQ3NzID0gc3BhbnNbaV0uY3NzO1xuXG5cdFx0aWYgKHNwYW5IZWlnaHQgPT09IDEpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnN0IGNvbEluZGV4ID0gZmluZEluZGV4KGNvbHVtbnMsIGl0ZW0gPT4gYCR7aXRlbS5pZH1gID09PSBgJHtjb2x9YCk7XG5cdFx0Y29uc3Qgcm93SW5kZXggPSBmaW5kSW5kZXgocm93cywgaXRlbSA9PiBgJHtpdGVtLmlkfWAgPT09IGAke3Jvd31gKTtcblxuXHRcdGlmIChjb2xJbmRleCA8IDAgfHwgcm93SW5kZXggPCAwKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHRmcm96ZW4gPT09IHRydWUgJiZcblx0XHRcdCgoc3BhbldpZHRoIHx8IDEpICsgY29sSW5kZXggPiBjb25maWcubGVmdFNwbGl0IHx8IGNvbEluZGV4ICsgMSA+IGNvbmZpZy5sZWZ0U3BsaXQpXG5cdFx0KSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb25zdCBjdXJyQ29sID0gY29sdW1uc1tjb2xJbmRleF07XG5cdFx0Y29uc3QgY3VyclJvdyA9IHJvd3Nbcm93SW5kZXhdO1xuXG5cdFx0aWYgKGN1cnJDb2wuaGlkZGVuKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRsZXQgY29udGVudCA9IHNwYW5zW2ldLnRleHQgPyBzcGFuc1tpXS50ZXh0IDogY3VyclJvd1tjb2xdID09PSB1bmRlZmluZWQgPyBcIlwiIDogY3VyclJvd1tjb2xdO1xuXG5cdFx0Y29uc3QgdCA9ICh0ZXh0OiBhbnksIF9yb3c6IGFueSwgX2NvbDogYW55KSA9PiAodGV4dCB8fCB0ZXh0ID09PSAwID8gdGV4dCA6IFwiXCIpO1xuXHRcdGNvbnN0IHRlbXBsYXRlID0gY3VyckNvbC50ZW1wbGF0ZSB8fCB0O1xuXG5cdFx0Y29udGVudCA9IHRlbXBsYXRlKGNvbnRlbnQsIGN1cnJSb3csIGN1cnJDb2wpO1xuXHRcdGNvbnRlbnQgPVxuXHRcdFx0dHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCJcblx0XHRcdFx0PyBlbChcImRpdi5kaHhfc3Bhbi1jZWxsLWNvbnRlbnRcIiwgeyBcIi5pbm5lckhUTUxcIjogY29udGVudCB9KVxuXHRcdFx0XHQ6IGNvbnRlbnQ7XG5cblx0XHRsZXQgY3VycmVudFRvcCA9IDA7XG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJvd0luZGV4OyBpbmRleCsrKSB7XG5cdFx0XHRjdXJyZW50VG9wICs9IHJvd3NbaW5kZXhdLiRoZWlnaHQ7XG5cdFx0fVxuXHRcdGNvbnN0IHRvcCA9IGN1cnJlbnRUb3AgLSAxO1xuXG5cdFx0bGV0IGxlZnQgPSAwO1xuXHRcdGZvciAobGV0IHMgPSBjb2xJbmRleCAtIDE7IHMgPj0gMDsgcy0tKSB7XG5cdFx0XHRsZWZ0ICs9IGNvbHVtbnNbc10uJHdpZHRoO1xuXHRcdH1cblx0XHRjb25zdCByb3dzcGFuV2l0aExhc3RDb2wgPSBjb2xJbmRleCA9PT0gY29sdW1ucy5sZW5ndGggLSAxO1xuXHRcdGNvbnN0IGNvbHNwYW5XaXRoTGFzdENvbCA9IGNvbEluZGV4ICsgc3BhbldpZHRoID09PSBjb2x1bW5zLmxlbmd0aDtcblxuXHRcdGxldCBjc3MgPSBjdXJyQ29sLmhlYWRlclswXS50ZXh0ID8gXCIgZGh4X3NwYW4tY2VsbFwiIDogXCIgZGh4X3NwYW4tY2VsbCBkaHhfc3Bhbi1jZWxsLS10aXRsZVwiO1xuXHRcdGNzcyArPSBzcGFuQ3NzID8gYCAke3NwYW5Dc3N9YCA6IFwiXCI7XG5cdFx0Y3NzICs9IHJvd0luZGV4ID09PSAwID8gXCIgZGh4X3NwYW4tZmlyc3Qtcm93XCIgOiBcIlwiO1xuXHRcdGNzcyArPSBjb2xJbmRleCA9PT0gMCA/IFwiIGRoeF9zcGFuLWZpcnN0LWNvbFwiIDogXCJcIjtcblx0XHRjc3MgKz0gcm93c3BhbldpdGhMYXN0Q29sIHx8IGNvbHNwYW5XaXRoTGFzdENvbCA/IFwiIGRoeF9zcGFuLWxhc3QtY29sXCIgOiBcIlwiO1xuXHRcdGNzcyArPSAhc3BhbldpZHRoID8gYCBkaHhfc3Bhbi0ke2N1cnJDb2wudHlwZSB8fCBcInN0cmluZ1wifS1jZWxsYCA6IGAgZGh4X3NwYW4tc3RyaW5nLWNlbGxgO1xuXHRcdGNzcyArPSBjdXJyQ29sLmFsaWduID8gYCBkaHhfYWxpZ24tJHtjdXJyQ29sLmFsaWdufWAgOiBgIGRoeF9hbGlnbi1sZWZ0YDtcblxuXHRcdGNvbnN0IHdpZHRoID0gc3BhbldpZHRoID4gMSA/IGdldFdpZHRoKGNvbHVtbnMsIHNwYW5XaWR0aCwgY29sSW5kZXgpIDogY3VyckNvbC4kd2lkdGg7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gc3BhbkhlaWdodCA+IDEgPyBnZXRIZWlnaHQocm93cywgc3BhbkhlaWdodCwgcm93SW5kZXgpIDogY3VyclJvdy4kaGVpZ2h0O1xuXG5cdFx0c3BhbkNlbGxzLnB1c2goXG5cdFx0XHRlbChcblx0XHRcdFx0XCJkaXZcIixcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGNsYXNzOiBjc3MsXG5cdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdHdpZHRoLFxuXHRcdFx0XHRcdFx0aGVpZ2h0LFxuXHRcdFx0XHRcdFx0dG9wLFxuXHRcdFx0XHRcdFx0bGVmdCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGRoeF9jb2xfaWQ6IGNvbCxcblx0XHRcdFx0XHRkaHhfaWQ6IHJvdyxcblx0XHRcdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XHRcdC4uLmdldEhhbmRsZXJzKHBvcy55U3RhcnQsIHBvcy54U3RhcnQsIGNvbmZpZyksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFtjb250ZW50XVxuXHRcdFx0KVxuXHRcdCk7XG5cdH1cblx0cmV0dXJuIHNwYW5DZWxscztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNoaWZ0cyhjb25mOiBJUmVuZGVyZXJDb25maWcpOiBJQ29vcmRzIHtcblx0Y29uc3QgY29sdW1uc0xlZnQgPSBjb25mLmNvbHVtbnMuc2xpY2UoMCwgY29uZi4kcG9zaXRpb25zLnhTdGFydCk7XG5cdGNvbnN0IHJvd3NUb3AgPSBjb25mLmRhdGEuc2xpY2UoMCwgY29uZi4kcG9zaXRpb25zLnlTdGFydCk7XG5cdHJldHVybiB7XG5cdFx0eDogZ2V0VG90YWxXaWR0aChjb2x1bW5zTGVmdCksXG5cdFx0eTogZ2V0VG90YWxIZWlnaHQocm93c1RvcCksXG5cdH07XG59XG4iLCJpbXBvcnQgeyBlbCwgS0VZRURfTElTVCwgVk5vZGUgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBnZXRTY3JvbGxiYXJXaWR0aCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQgeyBJTGF5b3V0U3RhdGUsIElSZW5kZXJlckNvbmZpZyB9IGZyb20gXCIuLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRDZWxscywgZ2V0SGFuZGxlcnMsIGdldFNwYW5zIH0gZnJvbSBcIi4vQ2VsbHNcIjtcbmltcG9ydCB7IGdldEZpeGVkUm93cywgZ2V0Um93cyB9IGZyb20gXCIuL0ZpeGVkUm93c1wiO1xuaW1wb3J0IHsgZ2V0VG90YWxXaWR0aCB9IGZyb20gXCIuLi9oZWxwZXJzL21haW5cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpeGVkQ29sc0hlYWRlcihyZW5kZXJDb25maWc6IElSZW5kZXJlckNvbmZpZywgbGF5b3V0OiBJTGF5b3V0U3RhdGUpIHtcblx0aWYgKHR5cGVvZiByZW5kZXJDb25maWcubGVmdFNwbGl0ICE9PSBcIm51bWJlclwiKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGxldCBzcGxpdEhpZGRlbiA9IDA7XG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZW5kZXJDb25maWcubGVmdFNwbGl0OyBpbmRleCsrKSB7XG5cdFx0aWYgKHJlbmRlckNvbmZpZy5jb2x1bW5zW2luZGV4XS5oaWRkZW4pIHNwbGl0SGlkZGVuKys7XG5cdH1cblx0aWYgKHNwbGl0SGlkZGVuID09PSByZW5kZXJDb25maWcubGVmdFNwbGl0KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgY29sdW1ucyA9IHJlbmRlckNvbmZpZy5jb2x1bW5zLnNsaWNlKDAsIHJlbmRlckNvbmZpZy5sZWZ0U3BsaXQgLSBzcGxpdEhpZGRlbik7XG5cdGxldCB3aWR0aCA9IDA7XG5cdGZvciAoY29uc3QgY29sIG9mIGNvbHVtbnMpIHtcblx0XHR3aWR0aCArPSBjb2wuJHdpZHRoO1xuXHR9XG5cblx0Y29uc3QgZ2V0Um93QXJpYUF0dHJzID0gY291bnQgPT4gKHtcblx0XHRyb2xlOiBcInJvd2dyb3VwXCIsXG5cdFx0XCJhcmlhLXJvd2NvdW50XCI6IGNvdW50LFxuXHR9KTtcblxuXHRjb25zdCBmcm96ZW5IZWFkZXJDb2xzID1cblx0XHRyZW5kZXJDb25maWcubGVmdFNwbGl0ID49IDAgJiZcblx0XHRnZXRGaXhlZFJvd3MoXG5cdFx0XHR7XG5cdFx0XHRcdC4uLnJlbmRlckNvbmZpZyxcblx0XHRcdFx0Y3VycmVudENvbHVtbnM6IGNvbHVtbnMsXG5cdFx0XHRcdCRwb3NpdGlvbnM6IHtcblx0XHRcdFx0XHQuLi5yZW5kZXJDb25maWcuJHBvc2l0aW9ucyxcblx0XHRcdFx0XHR4U3RhcnQ6IDAsXG5cdFx0XHRcdFx0eEVuZDogcmVuZGVyQ29uZmlnLmxlZnRTcGxpdCxcblx0XHRcdFx0fSxcblx0XHRcdFx0c2Nyb2xsOiB7IHRvcDogMCwgbGVmdDogMCB9LFxuXHRcdFx0XHRjb2x1bW5zLFxuXHRcdFx0fSxcblx0XHRcdHsgLi4ubGF5b3V0LCBuYW1lOiBcImhlYWRlclwiLCBwb3NpdGlvbjogXCJ0b3BcIiwgc2hpZnRzOiB7IHg6IDAsIHk6IDAgfSB9XG5cdFx0KTtcblxuXHRjb25zdCBoZWFkZXJSb3dzQ29uZmlnID0geyAuLi5sYXlvdXQsIG5hbWU6IFwiaGVhZGVyXCIsIHBvc2l0aW9uOiBcInRvcFwiIH07XG5cdHJldHVybiAoXG5cdFx0ZnJvemVuSGVhZGVyQ29scyAmJlxuXHRcdGVsKFxuXHRcdFx0YC5kaHhfJHtoZWFkZXJSb3dzQ29uZmlnLm5hbWV9LWZpeGVkLWNvbHNgLFxuXHRcdFx0e1xuXHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0bWF4V2lkdGg6IHdpZHRoLFxuXHRcdFx0XHRcdG92ZXJmbG93OiBcImhpZGRlblwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQuLi5nZXRSb3dBcmlhQXR0cnMoZnJvemVuSGVhZGVyQ29scy5sZW5ndGgpLFxuXHRcdFx0fSxcblx0XHRcdGZyb3plbkhlYWRlckNvbHMuYm9keVxuXHRcdClcblx0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpeGVkQ29scyhyZW5kZXJDb25maWc6IElSZW5kZXJlckNvbmZpZywgbGF5b3V0OiBJTGF5b3V0U3RhdGUpIHtcblx0aWYgKHR5cGVvZiByZW5kZXJDb25maWcubGVmdFNwbGl0ICE9PSBcIm51bWJlclwiKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGxldCBzcGxpdEhpZGRlbiA9IDA7XG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZW5kZXJDb25maWcubGVmdFNwbGl0OyBpbmRleCsrKSB7XG5cdFx0aWYgKHJlbmRlckNvbmZpZy5jb2x1bW5zW2luZGV4XS5oaWRkZW4pIHNwbGl0SGlkZGVuKys7XG5cdH1cblx0aWYgKHNwbGl0SGlkZGVuID09PSByZW5kZXJDb25maWcubGVmdFNwbGl0KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3Qgc2Nyb2xsQmFyV2lkdGggPSByZW5kZXJDb25maWcuJHRvdGFsV2lkdGggPD0gbGF5b3V0LndyYXBwZXIud2lkdGggPyAwIDogZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcblx0Y29uc3QgZml4ZWRDb250ZW50SGVpZ2h0ID1cblx0XHRyZW5kZXJDb25maWcuJHRvdGFsSGVpZ2h0ICsgcmVuZGVyQ29uZmlnLmhlYWRlckhlaWdodCArIHJlbmRlckNvbmZpZy5mb290ZXJIZWlnaHQ7XG5cblx0Y29uc3QgZml4ZWRDb2xzSGVpZ2h0ID1cblx0XHRmaXhlZENvbnRlbnRIZWlnaHQgPiBsYXlvdXQuZ3JpZEJvZHlIZWlnaHRcblx0XHRcdD8gZml4ZWRDb250ZW50SGVpZ2h0IC0gc2Nyb2xsQmFyV2lkdGhcblx0XHRcdDogZml4ZWRDb250ZW50SGVpZ2h0IDwgbGF5b3V0LmdyaWRCb2R5SGVpZ2h0IC0gc2Nyb2xsQmFyV2lkdGhcblx0XHRcdD8gZml4ZWRDb250ZW50SGVpZ2h0XG5cdFx0XHQ6IGxheW91dC5ncmlkQm9keUhlaWdodDtcblxuXHRjb25zdCBjb2x1bW5zID0gcmVuZGVyQ29uZmlnLmNvbHVtbnMuc2xpY2UoMCwgcmVuZGVyQ29uZmlnLmxlZnRTcGxpdCAtIHNwbGl0SGlkZGVuKTtcblx0cmVuZGVyQ29uZmlnLmZpeGVkQ29sdW1uc1dpZHRoID0gZ2V0VG90YWxXaWR0aChjb2x1bW5zKTtcblxuXHRjb25zdCBmaXhlZENvbHMgPSBnZXRDZWxscyh7XG5cdFx0Li4ucmVuZGVyQ29uZmlnLFxuXHRcdGNvbHVtbnMsXG5cdFx0JHBvc2l0aW9uczoge1xuXHRcdFx0Li4ucmVuZGVyQ29uZmlnLiRwb3NpdGlvbnMsXG5cdFx0XHR4U3RhcnQ6IDAsXG5cdFx0XHR4RW5kOiByZW5kZXJDb25maWcubGVmdFNwbGl0LFxuXHRcdH0sXG5cdH0pO1xuXG5cdGNvbnN0IGlzU3RpY2t5ID0gbGF5b3V0LnN0aWNreTtcblxuXHRjb25zdCBmb290ZXJSb3dzQ29uZmlnID0geyAuLi5sYXlvdXQsIG5hbWU6IFwiZm9vdGVyXCIsIHBvc2l0aW9uOiBcImJvdHRvbVwiIH07XG5cblx0Y29uc3QgZnJvemVuRm9vdGVyQ29scyA9XG5cdFx0cmVuZGVyQ29uZmlnLmxlZnRTcGxpdCA+PSAwICYmXG5cdFx0Z2V0Um93cyhcblx0XHRcdHtcblx0XHRcdFx0Li4ucmVuZGVyQ29uZmlnLFxuXHRcdFx0XHRjdXJyZW50Q29sdW1uczogY29sdW1ucyxcblx0XHRcdFx0JHBvc2l0aW9uczoge1xuXHRcdFx0XHRcdC4uLnJlbmRlckNvbmZpZy4kcG9zaXRpb25zLFxuXHRcdFx0XHRcdHhTdGFydDogMCxcblx0XHRcdFx0XHR4RW5kOiByZW5kZXJDb25maWcubGVmdFNwbGl0LFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHsgLi4ubGF5b3V0LCBuYW1lOiBcImZvb3RlclwiLCBwb3NpdGlvbjogXCJib3R0b21cIiB9XG5cdFx0KTtcblx0bGV0IGZvb3RlckhlaWdodCA9IDA7XG5cdGlmIChmcm96ZW5Gb290ZXJDb2xzKSB7XG5cdFx0ZnJvemVuRm9vdGVyQ29scy5mb3JFYWNoKG5vZGUgPT4gKGZvb3RlckhlaWdodCArPSAobm9kZSBhcyBWTm9kZSkuYXR0cnMuc3R5bGUuaGVpZ2h0KSk7XG5cdH1cblxuXHRjb25zdCBnZXRSb3dBcmlhQXR0cnMgPSBjb3VudCA9PiAoe1xuXHRcdHJvbGU6IFwicm93Z3JvdXBcIixcblx0XHRcImFyaWEtcm93Y291bnRcIjogY291bnQsXG5cdH0pO1xuXG5cdGNvbnN0IGZyb3plbkZvb3RlciA9IGlzU3RpY2t5XG5cdFx0PyBmcm96ZW5Gb290ZXJDb2xzICYmXG5cdFx0ICBlbChcblx0XHRcdFx0YC5kaHhfJHtmb290ZXJSb3dzQ29uZmlnLm5hbWV9LWZpeGVkLWNvbHNgLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRcdFx0XHR0b3A6IGZpeGVkQ29sc0hlaWdodCA8IGxheW91dC5ncmlkQm9keUhlaWdodCA/IGZpeGVkQ29sc0hlaWdodCAtIGZvb3RlckhlaWdodCA6IG51bGwsXG5cdFx0XHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRcdFx0Ym90dG9tOlxuXHRcdFx0XHRcdFx0XHRmaXhlZENvbHNIZWlnaHQgPj0gbGF5b3V0LmdyaWRCb2R5SGVpZ2h0XG5cdFx0XHRcdFx0XHRcdFx0PyBgJHswICsgKGlzU3RpY2t5ID8gc2Nyb2xsQmFyV2lkdGggOiAwKX1weGBcblx0XHRcdFx0XHRcdFx0XHQ6IG51bGwsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQuLi5nZXRSb3dBcmlhQXR0cnMoZnJvemVuRm9vdGVyQ29scy5sZW5ndGgpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRmcm96ZW5Gb290ZXJDb2xzXG5cdFx0ICApXG5cdFx0OiBudWxsO1xuXG5cdGNvbnN0IHBvcyA9IHJlbmRlckNvbmZpZy4kcG9zaXRpb25zO1xuXHRjb25zdCBzcGFucyA9IGdldFNwYW5zKHJlbmRlckNvbmZpZywgdHJ1ZSk7XG5cdGNvbnN0IGdldEZpeGVkQ29sQXJpYUF0dHJzID0gKCkgPT4gKHtcblx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdFwiYXJpYS1sYWJlbFwiOiBcIkZpeGVkIGNvbHVtblwiLFxuXHR9KTtcblxuXHRyZXR1cm4gW1xuXHRcdGVsKFxuXHRcdFx0XCIuZGh4X2dyaWQtZml4ZWQtY29scy13cmFwXCIsXG5cdFx0XHR7XG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0aGVpZ2h0OlxuXHRcdFx0XHRcdFx0Zml4ZWRDb2xzSGVpZ2h0ID49IGxheW91dC5ncmlkQm9keUhlaWdodFxuXHRcdFx0XHRcdFx0XHQ/IChpc1N0aWNreVxuXHRcdFx0XHRcdFx0XHRcdFx0PyBsYXlvdXQuZ3JpZEJvZHlIZWlnaHRcblx0XHRcdFx0XHRcdFx0XHRcdDogbGF5b3V0LmdyaWRCb2R5SGVpZ2h0ICsgcmVuZGVyQ29uZmlnLmhlYWRlckhlaWdodCkgLSBzY3JvbGxCYXJXaWR0aFxuXHRcdFx0XHRcdFx0XHQ6IGZpeGVkQ29sc0hlaWdodCxcblx0XHRcdFx0XHRwYWRkaW5nVG9wOiByZW5kZXJDb25maWcuaGVhZGVySGVpZ2h0LFxuXHRcdFx0XHRcdG92ZXJmbG93OiBcImhpZGRlblwiLFxuXHRcdFx0XHRcdHdpZHRoOiByZW5kZXJDb25maWcuZml4ZWRDb2x1bW5zV2lkdGgsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC4uLmdldEZpeGVkQ29sQXJpYUF0dHJzKCksXG5cdFx0XHR9LFxuXHRcdFx0W1xuXHRcdFx0XHRlbChcblx0XHRcdFx0XHRcIi5kaHhfZ3JpZC1maXhlZC1jb2xzXCIsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdFx0dG9wOiAtcmVuZGVyQ29uZmlnLnNjcm9sbC50b3AgKyByZW5kZXJDb25maWcuaGVhZGVySGVpZ2h0IC0gMSArIFwicHhcIixcblx0XHRcdFx0XHRcdFx0cGFkZGluZ1RvcDogbGF5b3V0LnNoaWZ0cy55LFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IHJlbmRlckNvbmZpZy4kdG90YWxIZWlnaHQsXG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0X2ZsYWdzOiBLRVlFRF9MSVNULFxuXHRcdFx0XHRcdFx0Li4uZ2V0SGFuZGxlcnMocG9zLnlTdGFydCwgcG9zLnhTdGFydCwgcmVuZGVyQ29uZmlnKSxcblx0XHRcdFx0XHRcdC4uLmdldFJvd0FyaWFBdHRycyhyZW5kZXJDb25maWcuZGF0YS5sZW5ndGgpLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0W3NwYW5zICYmIGVsKFwiLmRoeF9zcGFuLXNwYW5zXCIsIHsgcm9sZTogXCJwcmVzZW50YXRpb25cIiB9LCBbc3BhbnNdKSwgLi4uZml4ZWRDb2xzXVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRlbChcIi5kaHhfZnJvemVuLWNvbHMtYm9yZGVyXCIsIHsgcm9sZTogXCJwcmVzZW50YXRpb25cIiB9KSxcblx0XHRcdF1cblx0XHQpLFxuXHRcdHJlbmRlckNvbmZpZy4kZm9vdGVyID8gZnJvemVuRm9vdGVyIDogbnVsbCxcblx0XTtcbn1cbiIsImltcG9ydCB7IGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgZ2V0V2lkdGggfSBmcm9tIFwiLi4vaGVscGVycy9jZWxsc1wiO1xuaW1wb3J0IHsgdHJhbnNwb3NlLCBpc1NvcnRhYmxlIH0gZnJvbSBcIi4uL2hlbHBlcnMvbWFpblwiO1xuaW1wb3J0IHsgR3JpZEV2ZW50cywgSUNvbCwgSUZpeGVkUm93c0NvbmZpZywgSVJlbmRlcmVyQ29uZmlnLCBHcmlkU3lzdGVtRXZlbnRzIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmNvbnN0IEJPUkRFUlMgPSAyO1xuXG5mdW5jdGlvbiBoYW5kbGVNb3VzZShjb2w6IElDb2wsIGNvbmZpZzogSVJlbmRlcmVyQ29uZmlnLCB0eXBlOiBzdHJpbmcsIGU6IGFueSkge1xuXHRpZiAoIXR5cGUpIHJldHVybjtcblx0Y29uc3Qgc3lzdGVtRXZlbnQgPSB0eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJ0b3VjaFwiKTtcblx0aWYgKHN5c3RlbUV2ZW50KSB7XG5cdFx0Y29uZmlnLl9ldmVudHMuZmlyZSh0eXBlLCBbY29sLCBlXSk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uZmlnLmV2ZW50cy5maXJlKHR5cGUsIFtjb2wsIGVdKTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRIYW5kbGVycyhjb2x1bW46IElDb2wsIHJvd05hbWU6IHN0cmluZywgY29uZmlnOiBJUmVuZGVyZXJDb25maWcpIHtcblx0cmV0dXJuIHtcblx0XHRvbmNsaWNrOiBbaGFuZGxlTW91c2UsIGNvbHVtbiwgY29uZmlnLCBHcmlkRXZlbnRzW3Jvd05hbWUgKyBcIkNlbGxDbGlja1wiXV0sXG5cdFx0b25tb3VzZW92ZXI6IFtoYW5kbGVNb3VzZSwgY29sdW1uLCBjb25maWcsIEdyaWRFdmVudHNbcm93TmFtZSArIFwiQ2VsbE1vdXNlT3ZlclwiXV0sXG5cdFx0b25tb3VzZWRvd246IFtoYW5kbGVNb3VzZSwgY29sdW1uLCBjb25maWcsIEdyaWRFdmVudHNbcm93TmFtZSArIFwiQ2VsbE1vdXNlRG93blwiXV0sXG5cdFx0b250b3VjaHN0YXJ0OiBbaGFuZGxlTW91c2UsIGNvbHVtbiwgY29uZmlnLCBHcmlkRXZlbnRzW3Jvd05hbWUgKyBcIkNlbGxNb3VzZURvd25cIl1dLFxuXHRcdG9uZGJsY2xpY2s6IFtoYW5kbGVNb3VzZSwgY29sdW1uLCBjb25maWcsIEdyaWRFdmVudHNbcm93TmFtZSArIFwiQ2VsbERibENsaWNrXCJdXSxcblx0XHRvbmNvbnRleHRtZW51OiBbaGFuZGxlTW91c2UsIGNvbHVtbiwgY29uZmlnLCBHcmlkRXZlbnRzW3Jvd05hbWUgKyBcIkNlbGxSaWdodENsaWNrXCJdXSxcblx0XHRvbnRvdWNobW92ZTogW2hhbmRsZU1vdXNlLCBjb2x1bW4sIGNvbmZpZywgR3JpZFN5c3RlbUV2ZW50c1tyb3dOYW1lICsgXCJDZWxsVG91Y2hNb3ZlXCJdXSxcblx0XHRvbnRvdWNoZW5kOiBbaGFuZGxlTW91c2UsIGNvbHVtbiwgY29uZmlnLCBHcmlkU3lzdGVtRXZlbnRzW3Jvd05hbWUgKyBcIkNlbGx0b3VjaEVuZFwiXV0sXG5cdH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUm93cyhjb2x1bW5zOiBJQ29sW10sIG5hbWU6IHN0cmluZyk6IGFueVtdW10ge1xuXHRjb25zdCBoZWFkZXIgPSBjb2x1bW5zLm1hcChjb2wgPT4gY29sW25hbWVdIHx8IFt7fV0pO1xuXHRyZXR1cm4gdHJhbnNwb3NlKGhlYWRlcik7XG59XG5cbmZ1bmN0aW9uIGdldEN1c3RvbUNvbnRlbnRDZWxsKFxuXHRjZWxsOiBhbnksXG5cdGNvbHVtbjogSUNvbCxcblx0Y29uZmlnOiBJUmVuZGVyZXJDb25maWcsXG5cdHJvd05hbWU6IHN0cmluZyxcblx0Y3NzID0gXCJcIixcblx0Y29sSW5kZXg6IG51bWJlcixcblx0cm93SW5kZXg6IG51bWJlclxuKSB7XG5cdGNvbnN0IHR5cGUgPSBjb2x1bW4udHlwZSA/IGBkaHhfJHtjb2x1bW4udHlwZX0tY2VsbGAgOiBcImRoeF9zdHJpbmctY2VsbFwiO1xuXHQvLyBUT0RPOiBvdmVyIHdpdGggaW5kZXggb2YgZmlsdGVyIGluc2lkZSBvZiBoZWFkZXIgb3IgZm9vdGVyXG5cdGNvbnN0IGNvbnRlbnQgPSBjb25maWcuY29udGVudFtjZWxsLmNvbnRlbnRdICYmIGNvbmZpZy5jb250ZW50W2NlbGwuY29udGVudF0udG9IdG1sKGNvbHVtbiwgY29uZmlnKTtcblx0Y29uc3QgY2VsbFJvdyA9IHt9O1xuXHRjb25maWcuY29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG5cdFx0Y29uc3QgaGFzQ29udGVudCA9ICEhY29uZmlnLmNvbnRlbnRbY29sW3Jvd05hbWVdW3Jvd0luZGV4XS5jb250ZW50XTtcblx0XHRjZWxsUm93W2NvbC5pZF0gPVxuXHRcdFx0KGhhc0NvbnRlbnQgJiYgY29uZmlnLmNvbnRlbnRbY29sW3Jvd05hbWVdW3Jvd0luZGV4XS5jb250ZW50XS50b0h0bWwoY29sLCBjb25maWcpKSB8fFxuXHRcdFx0Y29sW3Jvd05hbWVdW3Jvd0luZGV4XS50ZXh0O1xuXHR9KTtcblx0cmV0dXJuIGVsKFxuXHRcdGAuJHt0eXBlfWAsXG5cdFx0e1xuXHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0Y2xhc3M6IGNzcy50cmltKCksXG5cdFx0XHRcdHBhZGRpbmc6IDAsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0W1xuXHRcdFx0Y29udGVudCAmJlxuXHRcdFx0XHQodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGNvbnRlbnQgPT09IFwibnVtYmVyXCJcblx0XHRcdFx0XHQ/IGVsKFwiZGl2XCIsIHtcblx0XHRcdFx0XHRcdFx0Y2xhc3M6IFwiZGh4X2dyaWQtZm9vdGVyLWNlbGwtdGV4dFwiLFxuXHRcdFx0XHRcdFx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdFx0XHRcdFx0XHRcIi5pbm5lckhUTUxcIjpcblx0XHRcdFx0XHRcdFx0XHRjb2x1bW4udGVtcGxhdGUgJiYgdHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCJcblx0XHRcdFx0XHRcdFx0XHRcdD8gY29sdW1uLnRlbXBsYXRlKGNvbnRlbnQsIGNlbGxSb3csIGNvbHVtbilcblx0XHRcdFx0XHRcdFx0XHRcdDogY29udGVudCxcblx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0OiBjb250ZW50KSxcblx0XHRdXG5cdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSb3dzKGNvbmZpZzogSVJlbmRlcmVyQ29uZmlnLCByb3dzQ29uZmlnOiBJRml4ZWRSb3dzQ29uZmlnKSB7XG5cdGlmICghY29uZmlnLmRhdGEgfHwgIWNvbmZpZy5jb2x1bW5zKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGNvbnN0IGdldFJvd0FyaWFBdHRycyA9IGluZCA9PiAoe1xuXHRcdHJvbGU6IFwicm93XCIsXG5cdFx0XCJhcmlhLXJvd2luZGV4XCI6IGluZCArIDEsXG5cdH0pO1xuXHRjb25zdCBwb3MgPSBjb25maWcuJHBvc2l0aW9ucztcblx0Y29uc3Qgcm93TmFtZSA9IHJvd3NDb25maWcubmFtZTtcblx0Y29uc3QgY29sdW1ucyA9IGNvbmZpZy5jdXJyZW50Q29sdW1ucztcblx0Y29uc3Qgcm93SGVpZ2h0ID0gY29uZmlnW2Ake3Jvd05hbWV9Um93SGVpZ2h0YF0gfHwgNDA7XG5cdGNvbnN0IHJvd3MgPSBidWlsZFJvd3MoY29sdW1ucywgcm93TmFtZSk7XG5cblx0cmV0dXJuIHJvd3MubWFwKChyb3csIGopID0+XG5cdFx0ZWwoXG5cdFx0XHRgLmRoeF8ke3Jvd05hbWV9LXJvd2AsXG5cdFx0XHR7XG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0aGVpZ2h0OiByb3dIZWlnaHQsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdC4uLmdldFJvd0FyaWFBdHRycyhqKSxcblx0XHRcdH0sXG5cdFx0XHRyb3cubWFwKChjZWxsLCBpKSA9PiB7XG5cdFx0XHRcdGxldCBjc3MgPSBjZWxsLmNzcyB8fCBcIlwiO1xuXHRcdFx0XHRjb25zdCBjb2x1bW4gPSBjb2x1bW5zW2ldO1xuXHRcdFx0XHRjb25zdCBjb2xJbmRleCA9IHBvcy54U3RhcnQgKyBpICsgMTtcblx0XHRcdFx0bGV0IHNvcnRJY29uQ3NzID0gXCJkeGkgZHhpLXNvcnQtdmFyaWFudCBkaHhfZ3JpZC1zb3J0LWljb25cIjtcblx0XHRcdFx0bGV0IGFyaWFTb3J0ID0gXCJub25lXCI7XG5cblx0XHRcdFx0aWYgKGNvbmZpZy5zb3J0QnkgJiYgYCR7Y29sdW1uLmlkfWAgPT09IGNvbmZpZy5zb3J0QnkgJiYgIWNlbGwuY29udGVudCkge1xuXHRcdFx0XHRcdGNvbnN0IGRpciA9IGNvbmZpZy5zb3J0RGlyIHx8IFwiYXNjXCI7XG5cdFx0XHRcdFx0c29ydEljb25Dc3MgKz0gYCBkaHhfZ3JpZC1zb3J0LWljb24tLSR7ZGlyfWA7XG5cdFx0XHRcdFx0Y3NzICs9IGAgZGh4X2dyaWQtJHtyb3dOYW1lfS1jZWxsLS1zb3J0ZWQgYDtcblx0XHRcdFx0XHRhcmlhU29ydCA9IGRpciA9PT0gXCJhc2NcIiA/IFwiYXNjZW5kaW5nXCIgOiBcImRlc2NlbmRpbmdcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IHNvcnRJY29uVmlzaWJsZSA9XG5cdFx0XHRcdFx0aXNTb3J0YWJsZShjb25maWcsIGNvbHVtbikgJiZcblx0XHRcdFx0XHRjZWxsLnRleHQgJiZcblx0XHRcdFx0XHRyb3dOYW1lICE9PSBcImZvb3RlclwiICYmXG5cdFx0XHRcdFx0Y2VsbC5oZWFkZXJTb3J0ICE9PSBmYWxzZTtcblx0XHRcdFx0aWYgKHNvcnRJY29uVmlzaWJsZSkge1xuXHRcdFx0XHRcdGNzcyArPSBcIiBkaHhfZ3JpZC1oZWFkZXItY2VsbC0tc29ydGFibGVcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGlzRmlyc3RDb2wgPSBpID09PSAwID8gXCJkaHhfZmlyc3QtY29sdW1uLWNlbGxcIiA6IFwiXCI7XG5cblx0XHRcdFx0Y29uc3QgaXNMYXN0Q29sID0gaSA9PT0gY29sdW1ucy5sZW5ndGggLSAxID8gXCJkaHhfbGFzdC1jb2x1bW4tY2VsbFwiIDogXCJcIjtcblxuXHRcdFx0XHRpZiAoIWNlbGwuY29udGVudCkge1xuXHRcdFx0XHRcdGlmIChjZWxsLmFsaWduKSB7XG5cdFx0XHRcdFx0XHRjc3MgKz0gYCBkaHhfZ3JpZC1oZWFkZXItY2VsbC0tYWxpZ25fJHtjZWxsLmFsaWdufSBgO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjc3MgKz0gYCBkaHhfZ3JpZC1oZWFkZXItY2VsbC0tJHtcblx0XHRcdFx0XHRcdFx0Y29sdW1uLnR5cGUgPT09IFwibnVtYmVyXCIgfHwgY29sdW1uLnR5cGUgPT09IFwicGVyY2VudFwiIHx8IGNvbHVtbi50eXBlID09PSBcImRhdGVcIlxuXHRcdFx0XHRcdFx0XHRcdD8gXCJhbGlnbl9yaWdodFwiXG5cdFx0XHRcdFx0XHRcdFx0OiBcImFsaWduX2xlZnRcIlxuXHRcdFx0XHRcdFx0fSBgO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNzcyArPSBgJHtpc0ZpcnN0Q29sfSAke2lzTGFzdENvbH1gO1xuXG5cdFx0XHRcdGxldCByZXNpemFibGU6IGFueSA9IGNvbHVtbi5yZXNpemFibGUgIT09IHVuZGVmaW5lZCA/IGNvbHVtbi5yZXNpemFibGUgOiBjb25maWcucmVzaXphYmxlO1xuXHRcdFx0XHRpZiAocmVzaXphYmxlKSB7XG5cdFx0XHRcdFx0cmVzaXphYmxlID0gZWwoXG5cdFx0XHRcdFx0XHRcImRpdlwiLFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRjbGFzczogXCJkaHhfcmVzaXplcl9ncmlwX3dyYXBcIixcblx0XHRcdFx0XHRcdFx0XCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XHRcdFwiZGl2XCIsXG5cdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M6IFwiZGh4X3Jlc2l6ZXJfZ3JpcFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZGh4X3Jlc2l6ZWQ6IGNvbHVtbi5pZCxcblx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGhlaWdodDogYCR7cm93cy5sZW5ndGggKiAxMDB9JWAsXG5cdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0W2VsKFwiZGl2XCIsIHsgY2xhc3M6IFwiZGh4X3Jlc2l6ZXJfZ3JpcF9saW5lXCIgfSldXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRpZiAocm93TmFtZSA9PT0gXCJmb290ZXJcIiB8fCBqID4gMCkge1xuXHRcdFx0XHRcdFx0cmVzaXphYmxlID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY2VsbC5hbGlnbikge1xuXHRcdFx0XHRcdGNzcyArPSBgIGRoeF9hbGlnbi0ke2NlbGwuYWxpZ259YDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGdldENlbGxBcmlhQXR0cnMgPSAocm93TmFtZSwgY29sSW5kZXgsIGFyaWFTb3J0KSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgYXR0cnMgPSB7XG5cdFx0XHRcdFx0XHRcImFyaWEtY29saW5kZXhcIjogY29sSW5kZXgsXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGlmICghc29ydEljb25WaXNpYmxlKSB7XG5cdFx0XHRcdFx0XHQvLyBpZiBjZWxsIGlzIHNvcnRhYmxlIC0gc2V0IHRhYmluZGV4IG9uIGJ1dHRvbiAoZ2V0SW5uZXJDZWxsQXJpYUF0dHJzKSxcblx0XHRcdFx0XHRcdC8vIGVsc2UgLSBvbiBjZWxsXG5cdFx0XHRcdFx0XHQvLyBhdHRyc1tcInRhYmluZGV4XCJdID0gMDtcblx0XHRcdFx0XHRcdC8vIFRPRE86IGFmdGVyIHNvcnQgQU5EIGlmIGZpcnN0IGNlbGwgaXMgbm90IHZpc2libGU6IHNlbGVjdGlvbi5zZXRDZWxsKGZpcnN0IGNlbGwpIC0+IHNjcm9sbFRvXG5cdFx0XHRcdFx0XHQvLyBUT0RPOiB1c2UgYXJyb3dzIHRvIG5hdmlnYXRlLCBzZXQgdGFiaW5kZXggZm9yIGZpcnN0IGNlbGwgb25seVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChyb3dOYW1lID09PSBcImZvb3RlclwiIHx8IGNlbGwuY29udGVudCkge1xuXHRcdFx0XHRcdFx0YXR0cnNbXCJyb2xlXCJdID0gXCJncmlkY2VsbFwiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRhdHRyc1tcInJvbGVcIl0gPSBcImNvbHVtbmhlYWRlclwiO1xuXHRcdFx0XHRcdFx0YXR0cnNbXCJhcmlhLXNvcnRcIl0gPSBhcmlhU29ydDtcblx0XHRcdFx0XHRcdC8vIGF0dHJzW1wiYXJpYS1sYWJlbFwiXSA9IHRpdGxlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gYXR0cnM7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0aWYgKGNlbGwuY29udGVudCkge1xuXHRcdFx0XHRcdHJldHVybiBlbChcblx0XHRcdFx0XHRcdGAuZGh4X2dyaWQtJHtyb3dOYW1lfS1jZWxsLmRoeF9ncmlkLWN1c3RvbS1jb250ZW50LWNlbGxgLFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRjbGFzczogY3NzLnRyaW0oKSxcblx0XHRcdFx0XHRcdFx0ZGh4X2lkOiBjb2x1bW4uaWQsXG5cdFx0XHRcdFx0XHRcdF9rZXk6IGksXG5cdFx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdFx0d2lkdGg6IGNvbHVtbi4kd2lkdGgsXG5cdFx0XHRcdFx0XHRcdFx0aGVpZ2h0OlxuXHRcdFx0XHRcdFx0XHRcdFx0cm93TmFtZSA9PT0gXCJmb290ZXJcIiA/IHJvd0hlaWdodCArIEJPUkRFUlMgLyAyICsgXCJweFwiIDogcm93SGVpZ2h0ICsgXCJweFwiLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHQuLi5nZXRIYW5kbGVycyhjb2x1bW4sIHJvd05hbWUsIGNvbmZpZyksXG5cdFx0XHRcdFx0XHRcdC4uLmdldENlbGxBcmlhQXR0cnMocm93TmFtZSwgY29sSW5kZXgsIGFyaWFTb3J0KSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdGdldEN1c3RvbUNvbnRlbnRDZWxsKGNlbGwsIGNvbHVtbiwgY29uZmlnLCByb3dOYW1lLCBcIlwiLCBjb2xJbmRleCwgaiksXG5cdFx0XHRcdFx0XHRcdHJlc2l6YWJsZSB8fCBudWxsLFxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBnZXRJbm5lckNlbGxBcmlhQXR0cnMgPSAocm93TmFtZSwgdGV4dCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBzb3J0SWNvblZpc2libGVcblx0XHRcdFx0XHRcdD8ge1xuXHRcdFx0XHRcdFx0XHRcdHJvbGU6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdFx0XHRcdFx0XCJhcmlhLWxhYmVsXCI6IGBTb3J0IGJ5ICR7dGV4dH1gLFxuXHRcdFx0XHRcdFx0XHRcdC8vIHRhYmluZGV4OiAwLFxuXHRcdFx0XHRcdFx0XHRcdC8vIFRPRE86IGFmdGVyIHNvcnQgQU5EIGlmIGZpcnN0IGNlbGwgaXMgbm90IHZpc2libGU6IHNlbGVjdGlvbi5zZXRDZWxsKGZpcnN0IGNlbGwpIC0+IHNjcm9sbFRvXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogdXNlIGFycm93cyB0byBuYXZpZ2F0ZSwgc2V0IHRhYmluZGV4IGZvciBmaXJzdCBjZWxsIG9ubHlcblx0XHRcdFx0XHRcdCAgfVxuXHRcdFx0XHRcdFx0OiB7fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRsZXQgY2VsbENzcyA9IFwiZGh4X2dyaWQtaGVhZGVyLWNlbGwtdGV4dF9jb250ZW50XCI7XG5cdFx0XHRcdGlmIChjb25maWcuYXV0b0hlaWdodCkgY2VsbENzcyArPSBcIiBkaHhfZ3JpZC1oZWFkZXItY2VsbC10ZXh0X2NvbnRlbnQtYXV0by1oZWlnaHRcIjtcblxuXHRcdFx0XHRyZXR1cm4gZWwoXG5cdFx0XHRcdFx0YC5kaHhfZ3JpZC0ke3Jvd05hbWV9LWNlbGxgLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGNsYXNzOiBjc3MudHJpbSgpLFxuXHRcdFx0XHRcdFx0ZGh4X2lkOiBjb2x1bW4uaWQsXG5cdFx0XHRcdFx0XHRfa2V5OiBpLFxuXHRcdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdFx0d2lkdGg6IGNvbHVtbi4kd2lkdGgsXG5cdFx0XHRcdFx0XHRcdGhlaWdodDogcm93TmFtZSA9PT0gXCJmb290ZXJcIiA/IHJvd0hlaWdodCArIEJPUkRFUlMgLyAyICsgXCJweFwiIDogcm93SGVpZ2h0ICsgXCJweFwiLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdC4uLmdldEhhbmRsZXJzKGNvbHVtbiwgcm93TmFtZSwgY29uZmlnKSxcblx0XHRcdFx0XHRcdC4uLmdldENlbGxBcmlhQXR0cnMocm93TmFtZSwgY29sSW5kZXgsIGFyaWFTb3J0KSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XHRcImRpdi5kaHhfZ3JpZC1oZWFkZXItY2VsbC10ZXh0XCIsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0ZWwoXCJzcGFuXCIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzOiBjZWxsQ3NzLFxuXHRcdFx0XHRcdFx0XHRcdFx0Li4uZ2V0SW5uZXJDZWxsQXJpYUF0dHJzKHJvd05hbWUsIGNlbGwudGV4dCksXG5cdFx0XHRcdFx0XHRcdFx0XHRzdHlsZTogeyBsaW5lSGVpZ2h0OiBgJHtyb3dIZWlnaHR9cHhgIH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcIi5pbm5lckhUTUxcIjogY2VsbC50ZXh0LFxuXHRcdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XHRcdHJlc2l6YWJsZSB8fCBudWxsLFxuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0c29ydEljb25WaXNpYmxlICYmIGVsKFwiZGl2XCIsIHsgY2xhc3M6IHNvcnRJY29uQ3NzLCBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiIH0pLFxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KTtcblx0XHRcdH0pXG5cdFx0KVxuXHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rml4ZWRTcGFucyhjb25maWc6IElSZW5kZXJlckNvbmZpZywgcm93c0NvbmZpZzogSUZpeGVkUm93c0NvbmZpZykge1xuXHRjb25zdCBjb2xzID0gY29uZmlnLmNvbHVtbnM7XG5cdGNvbnN0IHJvd3MgPSB0cmFuc3Bvc2UoY29scy5tYXAoY29sID0+IGNvbFtyb3dzQ29uZmlnLm5hbWVdIHx8IFtdKSk7XG5cdGNvbnN0IGhlaWdodCA9IGNvbmZpZ1tgJHtyb3dzQ29uZmlnLm5hbWV9Um93SGVpZ2h0YF0gfHwgNDA7XG5cdGNvbnN0IHJvd05hbWUgPSByb3dzQ29uZmlnLm5hbWU7XG5cdGNvbnN0IHBvcyA9IGNvbmZpZy4kcG9zaXRpb25zO1xuXG5cdGxldCBsZWZ0U2hpZnQgPSAwO1xuXHRyZXR1cm4gcm93cy5tYXAoKHJvdywgaSkgPT4ge1xuXHRcdGxlZnRTaGlmdCA9IDA7XG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCIuZGh4X3NwYW4tcm93XCIsXG5cdFx0XHR7XG5cdFx0XHRcdHN0eWxlOiB7IHRvcDogaGVpZ2h0ICogaSArIFwicHhcIiwgaGVpZ2h0IH0sXG5cdFx0XHRcdGNsYXNzOiBcImRoeF9oZWFkZXItcm93XCIsXG5cdFx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG5cdFx0XHR9LFxuXHRcdFx0cm93XG5cdFx0XHRcdC5tYXAoKGNlbGwsIGNlbGxJZHgpID0+IHtcblx0XHRcdFx0XHRjb25zdCBjb2wgPSBjb2xzW2NlbGxJZHhdO1xuXHRcdFx0XHRcdGNvbnN0IGNvbEluZGV4ID0gcG9zLnhTdGFydCArIGNlbGxJZHggKyAxO1xuXG5cdFx0XHRcdFx0bGVmdFNoaWZ0ICs9IGNvbC5oaWRkZW4gPyAwIDogY29sLiR3aWR0aDtcblx0XHRcdFx0XHRjb25zdCBpc0ZpcnN0Q29sID0gY2VsbElkeCA9PT0gMCA/IFwiZGh4X2ZpcnN0LWNvbHVtbi1jZWxsXCIgOiBcIlwiO1xuXG5cdFx0XHRcdFx0Y29uc3QgaXNMYXN0Q29sID1cblx0XHRcdFx0XHRcdGNlbGxJZHggPT09IGNvbHMubGVuZ3RoIC0gMSB8fCAoY2VsbC5jb2xzcGFuIHx8IDApICsgKGNlbGxJZHggLSAxKSA+PSBjb2xzLmxlbmd0aCAtIDFcblx0XHRcdFx0XHRcdFx0PyBcImRoeF9sYXN0LWNvbHVtbi1jZWxsXCJcblx0XHRcdFx0XHRcdFx0OiBcIlwiO1xuXHRcdFx0XHRcdGxldCBzcGFuSGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHRcdFx0aWYgKGNlbGwucm93c3Bhbikge1xuXHRcdFx0XHRcdFx0c3BhbkhlaWdodCA9IHNwYW5IZWlnaHQgKiBjZWxsLnJvd3NwYW4gLSAxO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IHNvcnRJY29uVmlzaWJsZSA9XG5cdFx0XHRcdFx0XHRpc1NvcnRhYmxlKGNvbmZpZywgY29sKSAmJiBjZWxsLnJvd3NwYW4gJiYgY2VsbC50ZXh0ICYmIHJvd3NDb25maWcubmFtZSAhPT0gXCJmb290ZXJcIjtcblxuXHRcdFx0XHRcdGxldCBzb3J0SWNvbkNzcyA9IFwiZHhpIGR4aS1zb3J0LXZhcmlhbnQgZGh4X2dyaWQtc29ydC1pY29uXCI7XG5cblx0XHRcdFx0XHRpZiAoY29uZmlnLnNvcnRCeSAmJiBgJHtjb2wuaWR9YCA9PT0gY29uZmlnLnNvcnRCeSAmJiAhY2VsbC5jb250ZW50KSB7XG5cdFx0XHRcdFx0XHRzb3J0SWNvbkNzcyArPSBgIGRoeF9ncmlkLXNvcnQtaWNvbi0tJHtjb25maWcuc29ydERpciB8fCBcImFzY1wifWA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3QgY2VsbEFsaWduID0gY29sLmFsaWduXG5cdFx0XHRcdFx0XHQ/IGBkaHhfYWxpZ24tJHtjb2wuYWxpZ259YFxuXHRcdFx0XHRcdFx0OiAoY29sLnR5cGUgPT09IFwibnVtYmVyXCIgfHwgY29sLnR5cGUgPT09IFwicGVyY2VudFwiIHx8IGNvbC50eXBlID09PSBcImRhdGVcIikgJiZcblx0XHRcdFx0XHRcdCAgIWNlbGwuY29sc3BhblxuXHRcdFx0XHRcdFx0PyBcImRoeF9hbGlnbi1yaWdodFwiXG5cdFx0XHRcdFx0XHQ6IFwiZGh4X2FsaWduLWxlZnRcIjtcblxuXHRcdFx0XHRcdGxldCBjc3MgPSBgZGh4X2dyaWQtaGVhZGVyLWNlbGwgJHtpc0ZpcnN0Q29sfSAke2lzTGFzdENvbH0gJHtcblx0XHRcdFx0XHRcdGNlbGwucm93c3BhbiA/IFwiZGh4X3NwYW4tY2VsbF9fcm93c3BhblwiIDogXCJcIlxuXHRcdFx0XHRcdH0gJHtjZWxsLmFsaWduID8gYGRoeF9hbGlnbi0ke2NlbGwuYWxpZ259YCA6IGNlbGxBbGlnbn0gJHtjZWxsLmNzcyA/IGNlbGwuY3NzIDogXCJcIn1gO1xuXG5cdFx0XHRcdFx0aWYgKHNvcnRJY29uVmlzaWJsZSkge1xuXHRcdFx0XHRcdFx0Y3NzICs9IFwiIGRoeF9ncmlkLWhlYWRlci1jZWxsLS1zb3J0YWJsZVwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghY2VsbC5jb250ZW50KSB7XG5cdFx0XHRcdFx0XHRpZiAoY2VsbC5hbGlnbikge1xuXHRcdFx0XHRcdFx0XHRjc3MgKz0gYCBkaHhfZ3JpZC1oZWFkZXItY2VsbC0tYWxpZ25fJHtjZWxsLmFsaWdufSBgO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y3NzICs9IGAgZGh4X2dyaWQtaGVhZGVyLWNlbGwtLSR7XG5cdFx0XHRcdFx0XHRcdFx0Y29sLnR5cGUgPT09IFwibnVtYmVyXCIgfHwgY29sLnR5cGUgPT09IFwicGVyY2VudFwiIHx8IGNvbC50eXBlID09PSBcImRhdGVcIlxuXHRcdFx0XHRcdFx0XHRcdFx0PyBcImFsaWduX3JpZ2h0XCJcblx0XHRcdFx0XHRcdFx0XHRcdDogXCJhbGlnbl9sZWZ0XCJcblx0XHRcdFx0XHRcdFx0fSBgO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsZXQgY29udGVudCA9IG51bGw7XG5cdFx0XHRcdFx0aWYgKGNlbGwuY29udGVudCkge1xuXHRcdFx0XHRcdFx0Y29udGVudCA9IGdldEN1c3RvbUNvbnRlbnRDZWxsKGNlbGwsIGNvbCwgY29uZmlnLCByb3dOYW1lLCBjc3MsIGNvbEluZGV4LCBpKTtcblx0XHRcdFx0XHRcdGNvbnRlbnQuYXR0cnMuc3R5bGUgPSB7XG5cdFx0XHRcdFx0XHRcdC4uLmNvbnRlbnQuYXR0cnMuc3R5bGUsXG5cdFx0XHRcdFx0XHRcdHdpZHRoOiBcIjEwMCVcIixcblx0XHRcdFx0XHRcdFx0Ym9yZGVyUmlnaHQ6IFwiMFwiLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGV0IGJvcmRlckxlZnQgPSBcIlwiO1xuXHRcdFx0XHRcdGlmIChsZWZ0U2hpZnQgLSBjb2wuJHdpZHRoID4gMCkge1xuXHRcdFx0XHRcdFx0Ym9yZGVyTGVmdCA9IFwiMXB4IHNvbGlkICNlNGU0ZTRcIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRsZXQgY2VsbENzcyA9IFwiZGh4X2dyaWQtaGVhZGVyLWNlbGwtdGV4dF9jb250ZW50XCI7XG5cdFx0XHRcdFx0aWYgKGNvbmZpZy5hdXRvSGVpZ2h0KSBjZWxsQ3NzICs9IFwiIGRoeF9ncmlkLWhlYWRlci1jZWxsLXRleHRfY29udGVudC1hdXRvLWhlaWdodFwiO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGNlbGwuY29sc3BhbiB8fCBjZWxsLnJvd3NwYW5cblx0XHRcdFx0XHRcdD8gZWwoXG5cdFx0XHRcdFx0XHRcdFx0XCIuZGh4X3NwYW4tY2VsbFwiLFxuXHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoOiBnZXRXaWR0aChjb2xzLCBjZWxsLmNvbHNwYW4sIGNlbGxJZHgpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRoZWlnaHQ6IHJvd05hbWUgPT09IFwiZm9vdGVyXCIgPyBzcGFuSGVpZ2h0ICsgQk9SREVSUyAvIDIgOiBzcGFuSGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsZWZ0OiBsZWZ0U2hpZnQgLSBjb2wuJHdpZHRoLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRib3JkZXJMZWZ0LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0b3A6IGhlaWdodCAqIGksXG5cdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M6IGNzcy50cmltKCksXG5cdFx0XHRcdFx0XHRcdFx0XHRkaHhfaWQ6IGNvbC5pZCxcblx0XHRcdFx0XHRcdFx0XHRcdC4uLmdldEhhbmRsZXJzKGNvbCwgcm93TmFtZSwgY29uZmlnKSxcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRlbnQgfHwgY2VsbC5yb3dzcGFuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdD8gZWwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcImRpdi5kaHhfZ3JpZC1oZWFkZXItY2VsbC10ZXh0XCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlbChcInNwYW5cIiwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzOiBjZWxsQ3NzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiLmlubmVySFRNTFwiOiBjZWxsLnRleHQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0OiBlbChcInNwYW5cIiwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M6IGNlbGxDc3MsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIi5pbm5lckhUTUxcIjogY2VsbC50ZXh0LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgIH0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0c29ydEljb25WaXNpYmxlICYmIGVsKFwiZGl2XCIsIHsgY2xhc3M6IHNvcnRJY29uQ3NzIH0pLFxuXHRcdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdCAgKVxuXHRcdFx0XHRcdFx0OiBudWxsO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuZmlsdGVyKGNlbGwgPT4gY2VsbClcblx0XHQpO1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpeGVkUm93cyhjb25maWc6IElSZW5kZXJlckNvbmZpZywgcm93c0NvbmZpZzogSUZpeGVkUm93c0NvbmZpZykge1xuXHRjb25zdCByb3dzID0gZ2V0Um93cyhjb25maWcsIHJvd3NDb25maWcpO1xuXHRjb25zdCBzcGFucyA9IGdldEZpeGVkU3BhbnMoY29uZmlnLCByb3dzQ29uZmlnKTtcblx0Y29uc3QgZ2V0Um93QXJpYUF0dHJzID0gcm93Q291bnQgPT4gKHtcblx0XHRyb2xlOiBcInJvd2dyb3VwXCIsXG5cdFx0XCJhcmlhLXJvd2NvdW50XCI6IHJvd0NvdW50LFxuXHR9KTtcblx0bGV0IGZpeGVkQ29scyA9IG51bGw7XG5cdGlmIChyb3dzQ29uZmlnLm5hbWUgPT09IFwiZm9vdGVyXCIgJiYgIXJvd3NDb25maWcuc3RpY2t5KSB7XG5cdFx0Zml4ZWRDb2xzID1cblx0XHRcdGNvbmZpZy5sZWZ0U3BsaXQgPj0gMCAmJlxuXHRcdFx0Z2V0Um93cyhcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC4uLmNvbmZpZyxcblx0XHRcdFx0XHRjdXJyZW50Q29sdW1uczogY29uZmlnLmNvbHVtbnMuc2xpY2UoMCwgY29uZmlnLmxlZnRTcGxpdCksXG5cdFx0XHRcdFx0JHBvc2l0aW9uczogeyAuLi5jb25maWcuJHBvc2l0aW9ucywgeFN0YXJ0OiAwLCB4RW5kOiBjb25maWcubGVmdFNwbGl0IH0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJvd3NDb25maWdcblx0XHRcdCk7XG5cdH1cblx0Y29uc3Qgc3R5bGVzID0ge1xuXHRcdHBvc2l0aW9uOiBcInN0aWNreVwiLFxuXHRcdFtyb3dzQ29uZmlnLnBvc2l0aW9uXTogMCxcblx0fTtcblx0bGV0IGxlZnQ7XG5cdGlmICghcm93c0NvbmZpZy5zdGlja3kpIHtcblx0XHRzdHlsZXMubGVmdCA9IC1jb25maWcuc2Nyb2xsLmxlZnQ7XG5cdFx0bGVmdCA9IC1jb25maWcuc2Nyb2xsLmxlZnQ7XG5cdFx0c3R5bGVzLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHR9XG5cdHJldHVybiBlbChcblx0XHRgLmRoeF8ke3Jvd3NDb25maWcubmFtZX0td3JhcHBlcmAsXG5cdFx0e1xuXHRcdFx0Y2xhc3M6IHJvd3NDb25maWcuc3RpY2t5ID8gXCJcIiA6IGBkaHhfY29tcGF0aWJsZS0ke3Jvd3NDb25maWcubmFtZX1gLFxuXHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0Li4uc3R5bGVzLFxuXHRcdFx0XHRsZWZ0OiByb3dzQ29uZmlnLnN0aWNreSA/IGxlZnQgOiAwLFxuXHRcdFx0XHRoZWlnaHQ6XG5cdFx0XHRcdFx0cm93c0NvbmZpZy5uYW1lID09PSBcImZvb3RlclwiXG5cdFx0XHRcdFx0XHQ/IGNvbmZpZ1tyb3dzQ29uZmlnLm5hbWUgKyBcIkhlaWdodFwiXSArIEJPUkRFUlMgLyAyXG5cdFx0XHRcdFx0XHQ6IGNvbmZpZ1tyb3dzQ29uZmlnLm5hbWUgKyBcIkhlaWdodFwiXSxcblx0XHRcdFx0d2lkdGg6IHJvd3NDb25maWcuc3RpY2t5ID8gY29uZmlnLiR0b3RhbFdpZHRoIDogcm93c0NvbmZpZy53cmFwcGVyLndpZHRoIC0gQk9SREVSUyxcblx0XHRcdH0sXG5cdFx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdH0sXG5cdFx0W1xuXHRcdFx0ZWwoXG5cdFx0XHRcdGAuZGh4X2dyaWQtJHtyb3dzQ29uZmlnLm5hbWV9YCxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRoZWlnaHQ6XG5cdFx0XHRcdFx0XHRcdHJvd3NDb25maWcubmFtZSA9PT0gXCJmb290ZXJcIlxuXHRcdFx0XHRcdFx0XHRcdD8gY29uZmlnW3Jvd3NDb25maWcubmFtZSArIFwiSGVpZ2h0XCJdICsgQk9SREVSUyAvIDJcblx0XHRcdFx0XHRcdFx0XHQ6IGNvbmZpZ1tyb3dzQ29uZmlnLm5hbWUgKyBcIkhlaWdodFwiXSxcblx0XHRcdFx0XHRcdGxlZnQsXG5cdFx0XHRcdFx0XHRwYWRkaW5nTGVmdDogcm93c0NvbmZpZy5zaGlmdHMueCxcblx0XHRcdFx0XHRcdHdpZHRoOiBjb25maWcuJHRvdGFsV2lkdGgsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRgLmRoeF8ke3Jvd3NDb25maWcubmFtZX0tcm93c2AsXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdC4uLmdldFJvd0FyaWFBdHRycyhbLi4ucm93c10ubGVuZ3RoKSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRbLi4ucm93c11cblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0YC5kaHhfJHtyb3dzQ29uZmlnLm5hbWV9LXNwYW5zYCxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdFx0XHRtYXJnaW5MZWZ0OiAtcm93c0NvbmZpZy5zaGlmdHMueCxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0Y2xhc3M6IGBkaHhfJHtyb3dzQ29uZmlnLm5hbWV9LXJvd3NgLFxuXHRcdFx0XHRcdFx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHNwYW5zXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRmaXhlZENvbHMgJiZcblx0XHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XHRgLmRoeF8ke3Jvd3NDb25maWcubmFtZX0tZml4ZWQtY29sc2AsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0cG9zaXRpb246IFwiYWJzb2x1dGVcIixcblx0XHRcdFx0XHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHRcdFx0XHRcdGxlZnQ6IGNvbmZpZy5zY3JvbGwubGVmdCArIFwicHhcIixcblx0XHRcdFx0XHRcdFx0XHRcdGhlaWdodDogXCIxMDAlXCIsXG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0Zml4ZWRDb2xzXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRdXG5cdFx0XHQpLFxuXHRcdFx0ZWwoXCJkaXZcIiwgeyBzdHlsZTogeyB3aWR0aDogY29uZmlnLiR0b3RhbFdpZHRoIH0sIHJvbGU6IFwicHJlc2VudGF0aW9uXCIgfSksXG5cdFx0XVxuXHQpO1xufVxuIiwiaW1wb3J0IHsgZWwsIGluamVjdCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IENvbWJvYm94LCBDb21ib2JveEV2ZW50cyB9IGZyb20gXCJAZGh4L3RzLWNvbWJvYm94XCI7XG5pbXBvcnQgeyBEYXRhRXZlbnRzIH0gZnJvbSBcIkBkaHgvdHMtZGF0YVwiO1xuaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgZml4ZWRSb3dDb250ZW50LCBHcmlkRXZlbnRzLCBJQ29sLCBJQ29udGVudExpc3QsIElSZW5kZXJlckNvbmZpZyB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgdG9Gb3JtYXQgfSBmcm9tIFwiLi4vaGVscGVycy9kYXRhXCI7XG5pbXBvcnQgeyBpc0lFLCBpc1NhZmFyaSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQgeyBJZCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi90eXBlc1wiO1xuaW1wb3J0IHsgdWlkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcblxubGV0IGlucHV0RGVsYXk6IGFueTtcblxuZnVuY3Rpb24gb25JbnB1dChcblx0ZXZlbnRTeXN0ZW06IElFdmVudFN5c3RlbTxHcmlkRXZlbnRzPixcblx0Y29sSWQ6IElkLFxuXHRmaWx0ZXI6IGZpeGVkUm93Q29udGVudCxcblx0ZmlsdGVyT2JqOiBJQ29udGVudExpc3QsXG5cdGU6IGFueVxuKSB7XG5cdGNvbnN0IGlucHV0SGFuZGxlciA9ICgpID0+IHtcblx0XHRjb25zdCB2YWwgPVxuXHRcdFx0aXNJRSgpIHx8IGlzU2FmYXJpKCkgPyBlLnRhcmdldC52YWx1ZSA6IGUucGF0aCA/IGUucGF0aFswXS52YWx1ZSA6IGUuZXhwbGljaXRPcmlnaW5hbFRhcmdldC52YWx1ZTtcblx0XHRmaWx0ZXJPYmoudmFsdWVbY29sSWRdID0gdmFsO1xuXHRcdGV2ZW50U3lzdGVtLmZpcmUoR3JpZEV2ZW50cy5maWx0ZXJDaGFuZ2UsIFt2YWwsIGNvbElkLCBmaWx0ZXJdKTtcblx0fTtcblx0aWYgKGZpbHRlciA9PT0gXCJzZWxlY3RGaWx0ZXJcIikge1xuXHRcdGlucHV0SGFuZGxlcigpO1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoaW5wdXREZWxheSkge1xuXHRcdGNsZWFyVGltZW91dChpbnB1dERlbGF5KTtcblx0fVxuXHRpbnB1dERlbGF5ID0gc2V0VGltZW91dChpbnB1dEhhbmRsZXIsIDI1MCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5TWF0aE1ldGhvZChjb2x1bW46IElDb2wsIGNvbmZpZzogSVJlbmRlcmVyQ29uZmlnLCBtZXRob2Q6IGFueSwgdmFsaWRhdGU/OiBhbnkpOiBhbnkge1xuXHRpZiAoIWNvbHVtbiB8fCAhY29uZmlnIHx8ICFtZXRob2QpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0Y29uc3QgaWQgPSBjb2x1bW4uaWQ7XG5cdGNvbnN0IGNvbHVtbkRhdGEgPSB2YWxpZGF0ZVxuXHRcdD8gdmFsaWRhdGUoaWQsIGNvbmZpZy5kYXRhKVxuXHRcdDogY29uZmlnLmRhdGEucmVkdWNlKChpdGVtcywgaXRlbSkgPT4ge1xuXHRcdFx0XHRpZiAoaXRlbVtpZF0gIT09IHVuZGVmaW5lZCAmJiBpdGVtW2lkXSAhPT0gXCJcIiAmJiAhaXNOYU4oaXRlbVtpZF0pKSB7XG5cdFx0XHRcdFx0aXRlbXMucHVzaChwYXJzZUZsb2F0KGl0ZW1baWRdKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGl0ZW1zO1xuXHRcdCAgfSwgW10pO1xuXHQvLyBbdG9kb10gbW92ZSB0byB0cmVlZ3JpZFxuXHRsZXQgcm9vdHMgPSBjb2x1bW5EYXRhO1xuXHRpZiAoY29uZmlnLnR5cGUgPT09IFwidHJlZVwiKSB7XG5cdFx0cm9vdHMgPSBjb25maWcuZGF0YS5yZWR1Y2UoKHRvdGFsLCBpdGVtKSA9PiB7XG5cdFx0XHRpZiAoaXRlbS4kbGV2ZWwgPT09IDApIHtcblx0XHRcdFx0aWYgKGl0ZW1baWRdICE9PSB1bmRlZmluZWQgJiYgaXRlbVtpZF0gIT09IFwiXCIgJiYgIWlzTmFOKGl0ZW1baWRdKSkge1xuXHRcdFx0XHRcdHRvdGFsLnB1c2gocGFyc2VGbG9hdChpdGVtW2lkXSkgfHwgMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGV0IHZhbHVlID0gMDtcblx0XHRcdFx0XHRjb25maWcuZGF0YWNvbGxlY3Rpb24uZWFjaENoaWxkKGl0ZW0uaWQsIGNlbGwgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKCFjb25maWcuZGF0YWNvbGxlY3Rpb24uaGF2ZUl0ZW1zKGNlbGwuaWQpKSB7XG5cdFx0XHRcdFx0XHRcdHZhbHVlICs9IHBhcnNlRmxvYXQoY2VsbFtpZF0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRvdGFsLnB1c2godmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdG90YWw7XG5cdFx0fSwgW10pO1xuXHR9XG5cdHJldHVybiBtZXRob2QoY29sdW1uRGF0YSwgcm9vdHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGVudCgpOiBJQ29udGVudExpc3Qge1xuXHRyZXR1cm4ge1xuXHRcdGlucHV0RmlsdGVyOiB7XG5cdFx0XHRlbGVtZW50OiB7fSxcblx0XHRcdHRvSHRtbChjb2x1bW4sIGNvbmZpZykge1xuXHRcdFx0XHRjb25zdCBpZCA9IHVpZCgpO1xuXHRcdFx0XHRjb25zdCBjb2xJZCA9IGNvbHVtbi5pZC50b1N0cmluZygpO1xuXHRcdFx0XHR0aGlzLmVsZW1lbnRbY29sSWRdID0gZWwoXG5cdFx0XHRcdFx0XCJkaXYuZGh4X2dyaWQtZmlsdGVyX19sYWJlbC5keGkuZHhpLW1hZ25pZnlcIixcblx0XHRcdFx0XHR7IFwiYXJpYS1sYWJlbFwiOiBcIlR5cGUgdG8gc2VhcmNoXCIsIF9yZWY6IGAke2NvbHVtbi5pZH1fZmlsdGVyYCB9LFxuXHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XHRcImxhYmVsXCIsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzcGxheTogXCJub25lXCIsXG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcImFyaWEtbGFiZWxcIjogXCJUeXBlIHRvIHNlYXJjaFwiLFxuXHRcdFx0XHRcdFx0XHRcdGZvcjogaWQsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFwiVHlwZSB0byBzZWFyY2hcIlxuXHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdGVsKFwiaW5wdXRcIiwge1xuXHRcdFx0XHRcdFx0XHR0eXBlOiBcInRleHRcIixcblx0XHRcdFx0XHRcdFx0Y2xhc3M6IFwiZGh4X2lucHV0IGRoeF9ncmlkLWZpbHRlclwiLFxuXHRcdFx0XHRcdFx0XHRvbmlucHV0OiBbb25JbnB1dCwgY29uZmlnLmV2ZW50cywgY29sdW1uLmlkLCBcImlucHV0RmlsdGVyXCIsIHRoaXNdLFxuXHRcdFx0XHRcdFx0XHRfa2V5OiBjb2x1bW4uaWQsXG5cdFx0XHRcdFx0XHRcdGlkOiBpZCxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IHRoaXMudmFsdWVbY29sdW1uLmlkXSB8fCBcIlwiLFxuXHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lbGVtZW50W2NvbElkXTtcblx0XHRcdH0sXG5cdFx0XHRtYXRjaDogKHZhbHVlLCBtYXRjaCkgPT4ge1xuXHRcdFx0XHRsZXQgcmVzID0gXCJcIjtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGNvbnN0IGNoYXIgPSBtYXRjaC5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0XHRcdGlmICgoY2hhciA+IDMyICYmIGNoYXIgPCA0OCkgfHwgY2hhciA9PT0gNjMgfHwgKGNoYXIgPiA5MCAmJiBjaGFyIDwgOTUpIHx8IGNoYXIgPT09IDEyNCkge1xuXHRcdFx0XHRcdFx0cmVzICs9IFwiXFxcXFwiICsgbWF0Y2hbaV07XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlcyArPSBtYXRjaFtpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG5ldyBSZWdFeHAoYCR7cmVzfWAsIFwiaVwiKS50ZXN0KHZhbHVlKTtcblx0XHRcdH0sXG5cdFx0XHR2YWx1ZToge30sXG5cdFx0fSxcblx0XHRzZWxlY3RGaWx0ZXI6IHtcblx0XHRcdGVsZW1lbnQ6IHt9LFxuXHRcdFx0dG9IdG1sKGNvbHVtbiwgY29uZmlnKSB7XG5cdFx0XHRcdGNvbnN0IGNvbElkID0gY29sdW1uLmlkLnRvU3RyaW5nKCk7XG5cdFx0XHRcdHRoaXMuZWxlbWVudFtjb2xJZF0gPSBlbChcblx0XHRcdFx0XHRcImxhYmVsLmRoeF9ncmlkLWZpbHRlcl9fbGFiZWwuZHhpLmR4aS1tZW51LWRvd25cIixcblx0XHRcdFx0XHR7IF9yZWY6IGAke2NvbHVtbi5pZH1fZmlsdGVyYCB9LFxuXHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XHRcInNlbGVjdC5keGkuZHhpLW1lbnUtZG93blwiLFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3M6IFwiZGh4X2lucHV0IGRoeF9ncmlkLWZpbHRlciBkaHhfZ3JpZC1maWx0ZXItLXNlbGVjdFwiLFxuXHRcdFx0XHRcdFx0XHRcdG9uY2hhbmdlOiBbb25JbnB1dCwgY29uZmlnLmV2ZW50cywgY29sdW1uLmlkLCBcInNlbGVjdEZpbHRlclwiLCB0aGlzXSxcblx0XHRcdFx0XHRcdFx0XHRfa2V5OiBjb2x1bW4uaWQsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0XHRlbChcIm9wdGlvblwiLCB7IHZhbHVlOiBcIlwiIH0sIFwiXCIpLFxuXHRcdFx0XHRcdFx0XHRcdC4uLmNvbHVtbi4kdW5pcXVlRGF0YS5tYXAodmFsID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhbCA9IHZhbCA/PyBcIlwiO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsICE9PSBcIlwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwib3B0aW9uXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU6IHZhbCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNlbGVjdGVkOiB0aGlzLnZhbHVlW2NvbHVtbi5pZF0gPT09IHZhbC50b1N0cmluZygpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lbGVtZW50W2NvbElkXTtcblx0XHRcdH0sXG5cdFx0XHRtYXRjaDogKHZhbHVlLCBtYXRjaCkgPT4gKG1hdGNoID8gdmFsdWUgJiYgdmFsdWUudG9TdHJpbmcoKSA9PSBtYXRjaCA6IHRydWUpLFxuXHRcdFx0dmFsdWU6IHt9LFxuXHRcdH0sXG5cdFx0Y29tYm9GaWx0ZXI6IHtcblx0XHRcdGVsZW1lbnQ6IHt9LFxuXHRcdFx0dG9IdG1sKGNvbHVtbiwgY29uZmlnKSB7XG5cdFx0XHRcdGxldCBjb21ibztcblx0XHRcdFx0Y29uc3QgY29sSWQgPSBjb2x1bW4uaWQudG9TdHJpbmcoKTtcblx0XHRcdFx0aWYgKCF0aGlzLmVsZW1lbnRbY29sSWRdICYmIGNvbmZpZy5ldmVudHMpIHtcblx0XHRcdFx0XHRjb25zdCBjb25mID0gY29sdW1uLmhlYWRlci5maWx0ZXIoaXRlbSA9PiBpdGVtLmZpbHRlckNvbmZpZyAhPT0gdW5kZWZpbmVkKVswXTtcblx0XHRcdFx0XHRpZiAoY29uZiAmJiBjb25mLmZpbHRlckNvbmZpZykge1xuXHRcdFx0XHRcdFx0Y29tYm8gPSBuZXcgQ29tYm9ib3gobnVsbCwgT2JqZWN0LmFzc2lnbih7fSwgY29uZi5maWx0ZXJDb25maWcpKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29tYm8gPSBuZXcgQ29tYm9ib3gobnVsbCwge30pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb21iby5kYXRhLnBhcnNlKGNvbHVtbi4kdW5pcXVlRGF0YS5tYXAodmFsdWUgPT4gKHsgdmFsdWUgfSkpKTtcblx0XHRcdFx0XHRjb25maWcuZXZlbnRzLm9uKERhdGFFdmVudHMubG9hZCwgKCkgPT4ge1xuXHRcdFx0XHRcdFx0Y29tYm8uZGF0YS5wYXJzZShjb2x1bW4uJHVuaXF1ZURhdGEubWFwKHZhbHVlID0+ICh7IHZhbHVlIH0pKSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50W2NvbElkXSA9IGNvbWJvO1xuXHRcdFx0XHRcdGNvbWJvLmV2ZW50cy5vbihcImNoYW5nZVwiLCBpZCA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoaWQpIHtcblx0XHRcdFx0XHRcdFx0bGV0IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBoYXZlSWRzID0gQXJyYXkuaXNBcnJheShpZClcblx0XHRcdFx0XHRcdFx0XHQ/IGlkLmZpbmQoaXRlbSA9PiBjb21iby5kYXRhLmdldEl0ZW0oaXRlbSkpXG5cdFx0XHRcdFx0XHRcdFx0OiBjb21iby5kYXRhLmdldEl0ZW0oaWQpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaGF2ZUlkcykge1xuXHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gY29tYm8uY29uZmlnLm11bHRpc2VsZWN0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHQ/IGNvbWJvLmxpc3Quc2VsZWN0aW9uLmdldEl0ZW0oKS5tYXAoaXRlbSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0gJiYgY29tYm8uZGF0YS5nZXRJdGVtKGl0ZW0uaWQpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gaXRlbS52YWx1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0XHRcdFx0XHQ6IGNvbWJvLmxpc3Quc2VsZWN0aW9uLmdldEl0ZW0oKS52YWx1ZTtcblx0XHRcdFx0XHRcdFx0XHRjb25maWcuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5maWx0ZXJDaGFuZ2UsIFt2YWx1ZSwgY29sSWQsIFwiY29tYm9GaWx0ZXJcIl0pO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbmZpZy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmZpbHRlckNoYW5nZSwgW1wiXCIsIGNvbElkLCBcImNvbWJvRmlsdGVyXCJdKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGNvbmZpZy5ldmVudHMub24oRGF0YUV2ZW50cy5jaGFuZ2UsIChpZCwgc3RhdHVzKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoc3RhdHVzID09PSBcImFkZFwiIHx8IHN0YXR1cyA9PT0gXCJ1cGRhdGVcIiB8fCBzdGF0dXMgPT09IFwicmVtb3ZlXCIpIHtcblx0XHRcdFx0XHRcdFx0Y29tYm8uZGF0YS5wYXJzZShjb2x1bW4uJHVuaXF1ZURhdGEubWFwKHZhbHVlID0+ICh7IHZhbHVlIH0pKSk7XG5cdFx0XHRcdFx0XHRcdGNvbWJvLmV2ZW50cy5maXJlKENvbWJvYm94RXZlbnRzLmNoYW5nZSwgW2NvbWJvLmxpc3Quc2VsZWN0aW9uLmdldEl0ZW0oKV0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGNvbmZpZy5ldmVudHMub24oRGF0YUV2ZW50cy5yZW1vdmVBbGwsICgpID0+IHtcblx0XHRcdFx0XHRcdGNvbWJvLmRhdGEucGFyc2UoY29sdW1uLiR1bmlxdWVEYXRhLm1hcCh2YWx1ZSA9PiAoeyB2YWx1ZSB9KSkpO1xuXHRcdFx0XHRcdFx0Y29tYm8uZXZlbnRzLmZpcmUoQ29tYm9ib3hFdmVudHMuY2hhbmdlLCBbY29tYm8ubGlzdC5zZWxlY3Rpb24uZ2V0SXRlbSgpXSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0Y29tYm8ucG9wdXAuZXZlbnRzLm9uKFwiYWZ0ZXJIaWRlXCIsICgpID0+IHtcblx0XHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFx0IWNvbWJvLmxpc3Quc2VsZWN0aW9uLmdldEl0ZW0oKSB8fFxuXHRcdFx0XHRcdFx0XHQoY29tYm8uY29uZmlnLm11bHRpc2VsZWN0aW9uICYmICFjb21iby5saXN0LnNlbGVjdGlvbi5nZXRJdGVtKCkubGVuZ3RoKVxuXHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdGNvbWJvLmNsZWFyKCk7XG5cdFx0XHRcdFx0XHRcdGNvbmZpZy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmZpbHRlckNoYW5nZSwgW1wiXCIsIGNvbElkLCBcImNvbWJvRmlsdGVyXCJdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb21ibyA9IHRoaXMuZWxlbWVudFtjb2x1bW4uaWRdIHx8IG5ldyBDb21ib2JveChudWxsLCB7fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGluamVjdChjb21iby5nZXRSb290VmlldygpKTtcblx0XHRcdH0sXG5cdFx0XHRtYXRjaDogKHZhbHVlLCBtYXRjaCA9IFwiXCIsIG9iaiwgbXVsdGkgPSBmYWxzZSkgPT4ge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShtYXRjaCkpIHtcblx0XHRcdFx0XHRsZXQgcmVzdWx0O1xuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2gubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9ICFtdWx0aVxuXHRcdFx0XHRcdFx0XHQ/IG1hdGNoW2ldID09PSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHQ6ICEhdmFsdWUuc3BsaXQoXCIsIFwiKS5maW5kKGl0ZW0gPT4gaXRlbSA9PT0gbWF0Y2hbaV0pO1xuXHRcdFx0XHRcdFx0aWYgKHJlc3VsdCkgYnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPyByZXN1bHQgOiB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaCAhPT0gXCJcIiA/IHZhbHVlID09PSBtYXRjaCA6IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZXN0cm95OiAoKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmNvbnRlbnQgJiYgdGhpcy5jb250ZW50LmNvbWJvRmlsdGVyLmVsZW1lbnQpIHtcblx0XHRcdFx0XHRjb25zdCBjb21ib0ZpbHRlcnMgPSB0aGlzLmNvbnRlbnQuY29tYm9GaWx0ZXIuZWxlbWVudDtcblx0XHRcdFx0XHRmb3IgKGNvbnN0IGNvbWJvIGluIGNvbWJvRmlsdGVycykge1xuXHRcdFx0XHRcdFx0Y29tYm9GaWx0ZXJzW2NvbWJvXS5kZXN0cnVjdG9yKCk7XG5cdFx0XHRcdFx0XHRkZWxldGUgY29tYm9GaWx0ZXJzW2NvbWJvXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHR2YWx1ZToge30sXG5cdFx0fSxcblx0XHRzdW06IHtcblx0XHRcdGNhbGN1bGF0ZTogKGNvbCwgcm9vdHMpID0+IHJvb3RzLnJlZHVjZSgoc3VtLCBjKSA9PiAoc3VtICs9IHBhcnNlRmxvYXQoYykgfHwgMCksIDApLFxuXHRcdFx0dG9IdG1sKGNvbHVtbiwgY29uZmlnKSB7XG5cdFx0XHRcdGNvbnN0IHZhbHVlID0gYXBwbHlNYXRoTWV0aG9kKGNvbHVtbiwgY29uZmlnLCB0aGlzLmNhbGN1bGF0ZSk7XG5cdFx0XHRcdGlmIChjb2x1bW4uZm9ybWF0IHx8IGNvbHVtbi50eXBlID09PSBcInBlcmNlbnRcIikge1xuXHRcdFx0XHRcdHJldHVybiB0b0Zvcm1hdCh2YWx1ZSwgY29sdW1uLnR5cGUsIGNvbHVtbi5mb3JtYXQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA/IHZhbHVlLnRvRml4ZWQoMykgOiBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0YXZnOiB7XG5cdFx0XHRjYWxjdWxhdGU6IChjb2wsIHJvb3RzKSA9PlxuXHRcdFx0XHRjb2wubGVuZ3RoID8gcm9vdHMucmVkdWNlKChzdW0sIGMpID0+IChzdW0gKz0gYyksIDApIC8gY29sLmxlbmd0aCA6IG51bGwsXG5cdFx0XHR0b0h0bWwoY29sdW1uLCBjb25maWcpIHtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBhcHBseU1hdGhNZXRob2QoY29sdW1uLCBjb25maWcsIHRoaXMuY2FsY3VsYXRlKTtcblx0XHRcdFx0aWYgKGNvbHVtbi5mb3JtYXQgfHwgY29sdW1uLnR5cGUgPT09IFwicGVyY2VudFwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRvRm9ybWF0KHZhbHVlLCBjb2x1bW4udHlwZSwgY29sdW1uLmZvcm1hdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID8gdmFsdWUudG9GaXhlZCgzKSA6IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0fSxcblx0XHRtaW46IHtcblx0XHRcdGNhbGN1bGF0ZTogY29sID0+IChjb2wubGVuZ3RoID8gTWF0aC5taW4oLi4uY29sKSA6IG51bGwpLFxuXHRcdFx0dG9IdG1sKGNvbHVtbiwgY29uZmlnKSB7XG5cdFx0XHRcdGNvbnN0IHZhbHVlID0gYXBwbHlNYXRoTWV0aG9kKGNvbHVtbiwgY29uZmlnLCB0aGlzLmNhbGN1bGF0ZSk7XG5cdFx0XHRcdGlmIChjb2x1bW4uZm9ybWF0IHx8IGNvbHVtbi50eXBlID09PSBcInBlcmNlbnRcIikge1xuXHRcdFx0XHRcdHJldHVybiB0b0Zvcm1hdCh2YWx1ZSwgY29sdW1uLnR5cGUsIGNvbHVtbi5mb3JtYXQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA/IHZhbHVlLnRvRml4ZWQoMykgOiBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdH0sXG5cdFx0bWF4OiB7XG5cdFx0XHRjYWxjdWxhdGU6IGNvbCA9PiAoY29sLmxlbmd0aCA/IE1hdGgubWF4KC4uLmNvbCkgOiBudWxsKSxcblx0XHRcdHRvSHRtbChjb2x1bW4sIGNvbmZpZykge1xuXHRcdFx0XHRjb25zdCB2YWx1ZSA9IGFwcGx5TWF0aE1ldGhvZChjb2x1bW4sIGNvbmZpZywgdGhpcy5jYWxjdWxhdGUpO1xuXHRcdFx0XHRpZiAoY29sdW1uLmZvcm1hdCB8fCBjb2x1bW4udHlwZSA9PT0gXCJwZXJjZW50XCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gdG9Gb3JtYXQodmFsdWUsIGNvbHVtbi50eXBlLCBjb2x1bW4uZm9ybWF0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPyB2YWx1ZS50b0ZpeGVkKDMpIDogbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHR9LFxuXHRcdGNvdW50OiB7XG5cdFx0XHRjYWxjdWxhdGU6IChfY29sLCByb290cykgPT4ge1xuXHRcdFx0XHQvLyBbdG9kb11cblx0XHRcdFx0cmV0dXJuIHJvb3RzLnJlZHVjZSgoY291bnQsIGMpID0+IChjb3VudCArPSBjKSwgMCk7XG5cdFx0XHR9LFxuXHRcdFx0dmFsaWRhdGU6IChjb2xJZDogSWQsIGRhdGE6IGFueVtdKSA9PiB7XG5cdFx0XHRcdHJldHVybiBkYXRhLnJlZHVjZSgoaXRlbXMsIGl0ZW0pID0+IHtcblx0XHRcdFx0XHRpZiAoaXRlbVtjb2xJZF0gIT09IHVuZGVmaW5lZCAmJiBpdGVtW2NvbElkXSAhPT0gXCJcIikge1xuXHRcdFx0XHRcdFx0aWYgKGlzTmFOKGl0ZW0pKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW1zLnB1c2goMSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gaXRlbXM7XG5cdFx0XHRcdH0sIFtdKTtcblx0XHRcdH0sXG5cdFx0XHR0b0h0bWwoY29sdW1uLCBjb25maWcpIHtcblx0XHRcdFx0cmV0dXJuIGFwcGx5TWF0aE1ldGhvZChjb2x1bW4sIGNvbmZpZywgdGhpcy5jYWxjdWxhdGUsIHRoaXMudmFsaWRhdGUpO1xuXHRcdFx0fSxcblx0XHR9LFxuXHR9O1xufVxuIiwiaW1wb3J0IHsgdWlkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcbmltcG9ydCB7IGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgSUNvbCwgSVJlbmRlcmVyQ29uZmlnLCBHcmlkRXZlbnRzLCBJUm93LCBJRWRpdG9yIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBDaGVja2JveEVkaXRvciBpbXBsZW1lbnRzIElFZGl0b3Ige1xuXHRwcm90ZWN0ZWQgX2hhbmRsZXJzOiB7IFtrZXk6IHN0cmluZ106ICguLi5hcmdzKSA9PiB2b2lkIH07XG5cdHByb3RlY3RlZCBfY2VsbDogeyByb3c6IElSb3c7IGNvbDogSUNvbCB9O1xuXHRwcm90ZWN0ZWQgX2NvbmZpZzogSVJlbmRlcmVyQ29uZmlnO1xuXHRwcm90ZWN0ZWQgX2NoZWNrYm94OiBIVE1MSW5wdXRFbGVtZW50O1xuXHRwcm90ZWN0ZWQgX2lucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuXHRwcm90ZWN0ZWQgX2NoZWNrZWQ6IGJvb2xlYW47XG5cblx0Y29uc3RydWN0b3Iocm93OiBJUm93LCBjb2w6IElDb2wsIGNvbmZpZzogSVJlbmRlcmVyQ29uZmlnKSB7XG5cdFx0dGhpcy5fY29uZmlnID0gY29uZmlnO1xuXHRcdHRoaXMuX2NlbGwgPSB7IHJvdywgY29sIH07XG5cdFx0dGhpcy5faW5pdEhhbmRsZXJzKCk7XG5cdH1cblxuXHRlbmRFZGl0KCkge1xuXHRcdGNvbnN0IHZhbHVlID0gdGhpcy5fY2hlY2tlZDtcblx0XHRpZiAodGhpcy5fY29uZmlnLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYmVmb3JlRWRpdEVuZCwgW3ZhbHVlLCB0aGlzLl9jZWxsLnJvdywgdGhpcy5fY2VsbC5jb2xdKSkge1xuXHRcdFx0dGhpcy5fY2VsbC5yb3cgPSB0aGlzLl9jb25maWcuZGF0YWNvbGxlY3Rpb24uZ2V0SXRlbSh0aGlzLl9jZWxsLnJvdy5pZCk7XG5cdFx0XHR0aGlzLl9jb25maWcuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlckVkaXRFbmQsIFt2YWx1ZSwgdGhpcy5fY2VsbC5yb3csIHRoaXMuX2NlbGwuY29sXSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2lucHV0LmNoZWNrZWQgPSAhdmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0dG9IVE1MKCkge1xuXHRcdGlmICh0aGlzLl9jaGVja2VkID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuX2NoZWNrZWQgPSB0aGlzLl9jZWxsLnJvd1t0aGlzLl9jZWxsLmNvbC5pZF07XG5cdFx0fVxuXHRcdGNvbnN0IGlkID0gdWlkKCk7XG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCJkaXYuZGh4X2NoZWNrYm94LmRoeF9jZWxsLWVkaXRvcl9fY2hlY2tib3hcIixcblxuXHRcdFx0W1xuXHRcdFx0XHRlbChcblx0XHRcdFx0XHRcImxhYmVsXCIsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdFx0ZGlzcGxheTogXCJub25lXCIsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Zm9yOiBpZCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHRoaXMuX2NoZWNrZWQgfHwgXCJmYWxzZVwiXG5cdFx0XHRcdCksXG5cdFx0XHRcdGVsKFwiaW5wdXQuZGh4X2NoZWNrYm94X19pbnB1dFwiLCB7XG5cdFx0XHRcdFx0dHlwZTogXCJjaGVja2JveFwiLFxuXHRcdFx0XHRcdF9ob29rczoge1xuXHRcdFx0XHRcdFx0ZGlkSW5zZXJ0OiB0aGlzLl9oYW5kbGVycy5kaWRJbnNlcnQsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRfa2V5OiBcImNlbGxfZWRpdG9yXCIsXG5cdFx0XHRcdFx0ZGh4X2lkOiBcImNlbGxfZWRpdG9yXCIsXG5cdFx0XHRcdFx0Y2hlY2tlZDogdGhpcy5fY2hlY2tlZCxcblx0XHRcdFx0XHRpZDogaWQsXG5cdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdHVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRlbChcInNwYW4uZGh4X2NoZWNrYm94X192aXN1YWwtaW5wdXRcIiksXG5cdFx0XHRdXG5cdFx0KTtcblx0fVxuXG5cdHByb3RlY3RlZCBfaW5pdEhhbmRsZXJzKCkge1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0b25DbGljazogKCkgPT4ge1xuXHRcdFx0XHRjb25zdCB2YWx1ZSA9ICF0aGlzLl9pbnB1dC5jaGVja2VkO1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0dGhpcy5fY29uZmlnLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYmVmb3JlRWRpdFN0YXJ0LCBbXG5cdFx0XHRcdFx0XHR0aGlzLl9jZWxsLnJvdyxcblx0XHRcdFx0XHRcdHRoaXMuX2NlbGwuY29sLFxuXHRcdFx0XHRcdFx0XCJjaGVja2JveFwiLFxuXHRcdFx0XHRcdF0pXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHRoaXMuX2NoZWNrZWQgPSB2YWx1ZTtcblxuXHRcdFx0XHRcdHRoaXMuX2NvbmZpZy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmFmdGVyRWRpdFN0YXJ0LCBbXG5cdFx0XHRcdFx0XHR0aGlzLl9jZWxsLnJvdyxcblx0XHRcdFx0XHRcdHRoaXMuX2NlbGwuY29sLFxuXHRcdFx0XHRcdFx0XCJjaGVja2JveFwiLFxuXHRcdFx0XHRcdF0pO1xuXHRcdFx0XHRcdHRoaXMuZW5kRWRpdCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX2lucHV0LmNoZWNrZWQgPSAhdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkaWRJbnNlcnQ6IChub2RlOiBhbnkpID0+IHtcblx0XHRcdFx0dGhpcy5fY2hlY2tib3ggPSBub2RlLmVsLnBhcmVudE5vZGUubGFzdENoaWxkO1xuXHRcdFx0XHR0aGlzLl9pbnB1dCA9IG5vZGUuZWwucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7XG5cdFx0XHRcdG5vZGUuZWwucGFyZW50Tm9kZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faGFuZGxlcnMub25DbGljayk7XG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cbn1cbiIsImltcG9ydCB7IGluamVjdCwgYXdhaXRSZWRyYXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBJQ29sLCBJUmVuZGVyZXJDb25maWcsIEdyaWRFdmVudHMsIElFZGl0b3IsIElSb3cgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IENvbWJvYm94IH0gZnJvbSBcIkBkaHgvdHMtY29tYm9ib3hcIjtcbmltcG9ydCB7IGZvY3VzTWFuYWdlciB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9Gb2N1c01hbmFnZXJcIjtcblxuZXhwb3J0IGNsYXNzIENvbWJvYm94RWRpdG9yIGltcGxlbWVudHMgSUVkaXRvciB7XG5cdHByb3RlY3RlZCBfaGFuZGxlcnM6IHsgW2tleTogc3RyaW5nXTogKC4uLmFyZ3MpID0+IHZvaWQgfTtcblx0cHJvdGVjdGVkIF9jZWxsOiB7IHJvdzogSVJvdzsgY29sOiBJQ29sIH07XG5cdHByb3RlY3RlZCBfY29uZmlnOiBJUmVuZGVyZXJDb25maWc7XG5cdHByb3RlY3RlZCBfaW5wdXQ6IENvbWJvYm94O1xuXG5cdGNvbnN0cnVjdG9yKHJvdzogYW55LCBjb2w6IElDb2wsIGNvbmZpZzogSVJlbmRlcmVyQ29uZmlnKSB7XG5cdFx0dGhpcy5fY29uZmlnID0gY29uZmlnO1xuXHRcdHRoaXMuX2NlbGwgPSB7IHJvdywgY29sIH07XG5cdFx0dGhpcy5faW5pdEhhbmRsZXJzKCk7XG5cdH1cblxuXHRlbmRFZGl0KHdpdGhvdXRTYXZlPzogYm9vbGVhbikge1xuXHRcdGxldCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xuXHRcdGlmICghd2l0aG91dFNhdmUpIHtcblx0XHRcdGNvbnN0IHZhbCA9IHRoaXMuX2lucHV0LmdldFZhbHVlKCk7XG5cdFx0XHR2YWx1ZSA9IHRoaXMuX2NlbGwuY29sLmVkaXRvclR5cGUgPT09IFwibXVsdGlzZWxlY3RcIiA/IHZhbC5zcGxpdChcIixcIikuam9pbihcIiwgXCIpIDogdmFsO1xuXHRcdH1cblx0XHRpZiAodGhpcy5fY29uZmlnLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYmVmb3JlRWRpdEVuZCwgW3ZhbHVlLCB0aGlzLl9jZWxsLnJvdywgdGhpcy5fY2VsbC5jb2xdKSkge1xuXHRcdFx0dGhpcy5faW5wdXQucG9wdXAuaGlkZSgpO1xuXHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9oYW5kbGVycy5vbk91dGVyQ2xpY2spO1xuXHRcdFx0dGhpcy5fY2VsbC5yb3cgPSB0aGlzLl9jb25maWcuZGF0YWNvbGxlY3Rpb24uZ2V0SXRlbSh0aGlzLl9jZWxsLnJvdy5pZCk7XG5cdFx0XHRmb2N1c01hbmFnZXIuc2V0Rm9jdXNJZCh0aGlzLl9jb25maWcuZ3JpZElkKTtcblx0XHRcdHRoaXMuX2NvbmZpZy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmFmdGVyRWRpdEVuZCwgW3ZhbHVlLCB0aGlzLl9jZWxsLnJvdywgdGhpcy5fY2VsbC5jb2xdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5faW5wdXQuZm9jdXMoKTtcblx0XHR9XG5cdH1cblxuXHR0b0hUTUwoKSB7XG5cdFx0Y29uc3QgY29udGVudCA9XG5cdFx0XHR0aGlzLl9jZWxsLmNvbC5vcHRpb25zLm1hcChpdGVtID0+IHtcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiID8geyBpZDogYCR7aXRlbX1gLCB2YWx1ZTogaXRlbSB9IDogaXRlbTtcblx0XHRcdH0pIHx8IFtdO1xuXG5cdFx0aWYgKCF0aGlzLl9pbnB1dCkge1xuXHRcdFx0dGhpcy5faW5wdXQgPSBuZXcgQ29tYm9ib3gobnVsbCwge1xuXHRcdFx0XHRjZWxsSGVpZ2h0OiAzNyxcblx0XHRcdFx0Y3NzOiBcImRoeF9jZWxsLWVkaXRvcl9fY29tYm9ib3hcIixcblx0XHRcdFx0bXVsdGlzZWxlY3Rpb246IHRoaXMuX2NlbGwuY29sLmVkaXRvclR5cGUgPT09IFwibXVsdGlzZWxlY3RcIixcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5faW5wdXQuZGF0YS5wYXJzZShjb250ZW50KTtcblx0XHRcdGNvbnN0IGNvbWJvVmFsdWUgPSB0aGlzLl9jZWxsLnJvd1t0aGlzLl9jZWxsLmNvbC5pZF07XG5cdFx0XHRjb25zdCB2YWx1ZSA9XG5cdFx0XHRcdHRoaXMuX2NlbGwuY29sLmVkaXRvclR5cGUgPT09IFwibXVsdGlzZWxlY3RcIiA/IChjb21ib1ZhbHVlIHx8IFwiXCIpLnNwbGl0KFwiLCBcIikgOiBjb21ib1ZhbHVlO1xuXHRcdFx0dGhpcy5faW5wdXQuc2V0VmFsdWUodmFsdWUpO1xuXHRcdFx0dGhpcy5faW5wdXQuZXZlbnRzLm9uKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVycy5vbmtleWRvd24pO1xuXHRcdH1cblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZXJzLm9uT3V0ZXJDbGljayk7XG5cblx0XHR0aGlzLl9jb25maWcuJGVkaXRhYmxlLmVkaXRvciA9IHRoaXM7XG5cdFx0YXdhaXRSZWRyYXcoKS50aGVuKCgpID0+IHtcblx0XHRcdGNvbnN0IGhvbGRlck5vZGUgPSB0aGlzLl9pbnB1dC5nZXRSb290VmlldygpLnJlZnMuaG9sZGVyLmVsO1xuXHRcdFx0dGhpcy5faW5wdXQucG9wdXAuZ2V0Q29udGFpbmVyKCkuc3R5bGUud2lkdGggPSBob2xkZXJOb2RlLm9mZnNldFdpZHRoICsgXCJweFwiO1xuXHRcdFx0dGhpcy5faW5wdXQucG9wdXAuc2hvdyhob2xkZXJOb2RlKTtcblx0XHR9KTtcblx0XHRmb2N1c01hbmFnZXIuc2V0Rm9jdXNJZCgodGhpcy5faW5wdXQgYXMgYW55KS5fdWlkKTtcblx0XHRyZXR1cm4gaW5qZWN0KHRoaXMuX2lucHV0LmdldFJvb3RWaWV3KCkpO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9pbml0SGFuZGxlcnMoKSB7XG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHRvbk91dGVyQ2xpY2s6IChlOiBFdmVudCkgPT4ge1xuXHRcdFx0XHRpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBOb2RlKSB7XG5cdFx0XHRcdFx0Y29uc3QgaXNJbnB1dCA9XG5cdFx0XHRcdFx0XHR0aGlzLl9pbnB1dCAmJlxuXHRcdFx0XHRcdFx0dGhpcy5faW5wdXQuZ2V0Um9vdE5vZGUoKSAmJlxuXHRcdFx0XHRcdFx0dGhpcy5faW5wdXQuZ2V0Um9vdE5vZGUoKS5jb250YWlucyhlLnRhcmdldCk7XG5cdFx0XHRcdFx0Y29uc3QgaXNQb3B1cCA9XG5cdFx0XHRcdFx0XHR0aGlzLl9pbnB1dC5wb3B1cCAmJlxuXHRcdFx0XHRcdFx0dGhpcy5faW5wdXQucG9wdXAuZ2V0Um9vdE5vZGUoKSAmJlxuXHRcdFx0XHRcdFx0dGhpcy5faW5wdXQucG9wdXAuZ2V0Um9vdE5vZGUoKS5jb250YWlucyhlLnRhcmdldCk7XG5cdFx0XHRcdFx0aWYgKCEoaXNJbnB1dCB8fCBpc1BvcHVwKSkge1xuXHRcdFx0XHRcdFx0dGhpcy5lbmRFZGl0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0b25rZXlkb3duOiAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdFx0XHRpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIgfHwgZS5rZXkgPT09IFwiVGFiXCIpIHtcblx0XHRcdFx0XHR0aGlzLmVuZEVkaXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG59XG4iLCJpbXBvcnQgeyBhd2FpdFJlZHJhdywgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBJQ29sLCBJUmVuZGVyZXJDb25maWcsIEdyaWRFdmVudHMsIElSb3csIElFZGl0b3IgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IENhbGVuZGFyLCBDYWxlbmRhckV2ZW50cyB9IGZyb20gXCJAZGh4L3RzLWNhbGVuZGFyXCI7XG5pbXBvcnQgeyBzdHJpbmdUb0RhdGUgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZGF0ZVwiO1xuaW1wb3J0IHsgUG9wdXAsIFBvcHVwRXZlbnRzIH0gZnJvbSBcIkBkaHgvdHMtcG9wdXBcIjtcblxuZXhwb3J0IGNsYXNzIERhdGVFZGl0b3IgaW1wbGVtZW50cyBJRWRpdG9yIHtcblx0cHJvdGVjdGVkIF9oYW5kbGVyczogeyBba2V5OiBzdHJpbmddOiAoLi4uYXJncykgPT4gdm9pZCB9O1xuXHRwcm90ZWN0ZWQgX2NlbGw6IHsgcm93OiBJUm93OyBjb2w6IElDb2wgfTtcblx0cHJvdGVjdGVkIF9jb25maWc6IElSZW5kZXJlckNvbmZpZztcblx0cHJvdGVjdGVkIF9pbnB1dDogSFRNTElucHV0RWxlbWVudDtcblx0cHJpdmF0ZSBfY2FsZW5kYXI6IENhbGVuZGFyO1xuXHRwcml2YXRlIF9wb3B1cDogUG9wdXA7XG5cdHByaXZhdGUgX3ZhbHVlOiBzdHJpbmc7XG5cblx0Y29uc3RydWN0b3Iocm93OiBJUm93LCBjb2w6IElDb2wsIGNvbmZpZzogSVJlbmRlcmVyQ29uZmlnKSB7XG5cdFx0dGhpcy5fY29uZmlnID0gY29uZmlnO1xuXHRcdHRoaXMuX2NlbGwgPSB7IHJvdywgY29sIH07XG5cdFx0dGhpcy5fY2FsZW5kYXIgPSBuZXcgQ2FsZW5kYXIobnVsbCwgeyBkYXRlRm9ybWF0OiBjb2wuZm9ybWF0IH0pO1xuXHRcdGNvbnN0IHZhbHVlID0gdGhpcy5fY2VsbC5yb3dbdGhpcy5fY2VsbC5jb2wuaWRdO1xuXHRcdGNvbnN0IGZvcm1hdCA9IHRoaXMuX2NhbGVuZGFyLmNvbmZpZy5kYXRlRm9ybWF0O1xuXHRcdGlmIChzdHJpbmdUb0RhdGUodmFsdWUsIGZvcm1hdCwgdHJ1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG5cdFx0XHR0aGlzLl9jYWxlbmRhci5zZXRWYWx1ZSh2YWx1ZSk7XG5cdFx0XHR0aGlzLl92YWx1ZSA9IHRoaXMuX2NhbGVuZGFyLmdldFZhbHVlKCkgYXMgc3RyaW5nO1xuXHRcdFx0dGhpcy5fY2VsbC5yb3dbdGhpcy5fY2VsbC5jb2wuaWRdID0gdGhpcy5fdmFsdWU7XG5cdFx0fVxuXHRcdHRoaXMuX3BvcHVwID0gbmV3IFBvcHVwKHsgY3NzOiBcImRoeF93aWRnZXQtLWJvcmRlcmVkXCIgfSk7XG5cdFx0dGhpcy5fcG9wdXAuYXR0YWNoKHRoaXMuX2NhbGVuZGFyKTtcblx0XHR0aGlzLl9jYWxlbmRhci5ldmVudHMub24oQ2FsZW5kYXJFdmVudHMuY2hhbmdlLCAoKSA9PiB7XG5cdFx0XHR0aGlzLmVuZEVkaXQoZmFsc2UsIHRydWUpO1xuXHRcdH0pO1xuXHRcdHRoaXMuX3BvcHVwLmV2ZW50cy5vbihQb3B1cEV2ZW50cy5hZnRlckhpZGUsICgpID0+IHtcblx0XHRcdHRoaXMuZW5kRWRpdCgpO1xuXHRcdH0pO1xuXHRcdHRoaXMuX2luaXRIYW5kbGVycygpO1xuXHR9XG5cblx0ZW5kRWRpdCh3aXRob3V0U2F2ZT86IGJvb2xlYW4sIGNhbGVuZGFyQ2hhbmdlPzogYm9vbGVhbikge1xuXHRcdGlmICghdGhpcy5faGFuZGxlcnMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgZm9ybWF0ID0gdGhpcy5fY2FsZW5kYXIuY29uZmlnLmRhdGVGb3JtYXQ7XG5cdFx0Y29uc3QgdmFsdWUgPSB0aGlzLl9jZWxsLnJvd1t0aGlzLl9jZWxsLmNvbC5pZF07XG5cdFx0aWYgKCF3aXRob3V0U2F2ZSkge1xuXHRcdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCBjYWxlbmRhckNoYW5nZSkge1xuXHRcdFx0XHR0aGlzLl92YWx1ZSA9IHRoaXMuX2NhbGVuZGFyLmdldFZhbHVlKCkgYXMgc3RyaW5nO1xuXHRcdFx0XHR0aGlzLl9pbnB1dC52YWx1ZSA9IHRoaXMuX3ZhbHVlO1xuXHRcdFx0XHR0aGlzLl9wb3B1cC5oaWRlKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoXG5cdFx0XHRcdHN0cmluZ1RvRGF0ZSh0aGlzLl9pbnB1dC52YWx1ZSwgZm9ybWF0LCB0cnVlKSAmJlxuXHRcdFx0XHQoKHZhbHVlICYmIHRoaXMuX2lucHV0LnZhbHVlLmxlbmd0aCA9PT0gdmFsdWUubGVuZ3RoKSB8fCAhdmFsdWUpXG5cdFx0XHQpIHtcblx0XHRcdFx0dGhpcy5fdmFsdWUgPSB0aGlzLl9pbnB1dC52YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKFxuXHRcdFx0dGhpcy5fY29uZmlnLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYmVmb3JlRWRpdEVuZCwgW3RoaXMuX3ZhbHVlLCB0aGlzLl9jZWxsLnJvdywgdGhpcy5fY2VsbC5jb2xdKVxuXHRcdCkge1xuXHRcdFx0dGhpcy5faW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMuX2hhbmRsZXJzLm9uRm9jdXMpO1xuXHRcdFx0dGhpcy5faW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLl9oYW5kbGVycy5vbkNoYW5nZSk7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZXJzLm9uT3V0ZXJDbGljayk7XG5cdFx0XHRhd2FpdFJlZHJhdygpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9wb3B1cC5kZXN0cnVjdG9yKCk7XG5cdFx0XHRcdHRoaXMuX2NhbGVuZGFyLmRlc3RydWN0b3IoKTtcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5fY2VsbC5yb3cgPSB0aGlzLl9jb25maWcuZGF0YWNvbGxlY3Rpb24uZ2V0SXRlbSh0aGlzLl9jZWxsLnJvdy5pZCk7XG5cdFx0XHR0aGlzLl9jb25maWcuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlckVkaXRFbmQsIFt0aGlzLl92YWx1ZSwgdGhpcy5fY2VsbC5yb3csIHRoaXMuX2NlbGwuY29sXSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2lucHV0LmZvY3VzKCk7XG5cdFx0fVxuXHR9XG5cblx0dG9IVE1MKCkge1xuXHRcdGNvbnN0IHZhbHVlID0gdGhpcy5fY2VsbC5yb3dbdGhpcy5fY2VsbC5jb2wuaWRdO1xuXHRcdHRoaXMuX2NvbmZpZy4kZWRpdGFibGUuZWRpdG9yID0gdGhpcztcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZXJzLm9uT3V0ZXJDbGljayk7XG5cdFx0cmV0dXJuIGVsKFwiaW5wdXQuZGh4X2NlbGwtZWRpdG9yLmRoeF9jZWxsLWVkaXRvcl9faW5wdXQuZGh4X2NlbGwtZWRpdG9yX19kYXRlcGlja2VyXCIsIHtcblx0XHRcdF9ob29rczoge1xuXHRcdFx0XHRkaWRJbnNlcnQ6IHRoaXMuX2hhbmRsZXJzLmRpZEluc2VydCxcblx0XHRcdH0sXG5cdFx0XHRfa2V5OiBcImNlbGxfZWRpdG9yXCIsXG5cdFx0XHRkaHhfaWQ6IFwiY2VsbF9lZGl0b3JcIixcblx0XHRcdHZhbHVlLFxuXHRcdH0pO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9pbml0SGFuZGxlcnMoKSB7XG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHRvbkZvY3VzOiAoKSA9PiB7XG5cdFx0XHRcdGF3YWl0UmVkcmF3KCkudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fcG9wdXAuc2hvdyh0aGlzLl9pbnB1dCwge1xuXHRcdFx0XHRcdFx0Y2VudGVyaW5nOiB0cnVlLFxuXHRcdFx0XHRcdFx0bW9kZTogXCJib3R0b21cIixcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0b25DaGFuZ2U6ICgpID0+IHtcblx0XHRcdFx0dGhpcy5lbmRFZGl0KCk7XG5cdFx0XHR9LFxuXHRcdFx0b25PdXRlckNsaWNrOiAoZTogRXZlbnQpID0+IHtcblx0XHRcdFx0aWYgKGUudGFyZ2V0IGluc3RhbmNlb2YgTm9kZSkge1xuXHRcdFx0XHRcdGNvbnN0IGlzSW5wdXQgPSB0aGlzLl9pbnB1dCAmJiB0aGlzLl9pbnB1dC5jb250YWlucyhlLnRhcmdldCk7XG5cdFx0XHRcdFx0Y29uc3QgaXNQb3B1cCA9XG5cdFx0XHRcdFx0XHR0aGlzLl9wb3B1cCAmJlxuXHRcdFx0XHRcdFx0dGhpcy5fcG9wdXAuZ2V0Um9vdE5vZGUoKSAmJlxuXHRcdFx0XHRcdFx0dGhpcy5fcG9wdXAuZ2V0Um9vdE5vZGUoKS5jb250YWlucyhlLnRhcmdldCk7XG5cdFx0XHRcdFx0aWYgKCEoaXNJbnB1dCB8fCBpc1BvcHVwKSkge1xuXHRcdFx0XHRcdFx0dGhpcy5fcG9wdXAuaGlkZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRpZEluc2VydDogKG5vZGU6IGFueSkgPT4ge1xuXHRcdFx0XHRjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IG5vZGUuZWw7XG5cdFx0XHRcdHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cdFx0XHRcdHRoaXMuX2lucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLl9oYW5kbGVycy5vbkZvY3VzKTtcblx0XHRcdFx0dGhpcy5faW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLl9oYW5kbGVycy5vbkNoYW5nZSk7XG5cdFx0XHRcdGlucHV0LmZvY3VzKCk7XG5cdFx0XHRcdGlucHV0LnNldFNlbGVjdGlvblJhbmdlKGlucHV0LnZhbHVlLmxlbmd0aCwgaW5wdXQudmFsdWUubGVuZ3RoKTtcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxufVxuIiwiaW1wb3J0IHsgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBJQ29sLCBJUmVuZGVyZXJDb25maWcsIEdyaWRFdmVudHMsIElSb3csIElFZGl0b3IgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IGlzTnVtZXJpYyB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5cbmV4cG9ydCBjbGFzcyBJbnB1dEVkaXRvciBpbXBsZW1lbnRzIElFZGl0b3Ige1xuXHRwcm90ZWN0ZWQgX2hhbmRsZXJzOiB7IFtrZXk6IHN0cmluZ106ICguLi5hcmdzKSA9PiB2b2lkIH07XG5cdHByb3RlY3RlZCBfY2VsbDogeyByb3c6IElSb3c7IGNvbDogSUNvbCB9O1xuXHRwcm90ZWN0ZWQgX2NvbmZpZzogSVJlbmRlcmVyQ29uZmlnO1xuXHRwcm90ZWN0ZWQgX2lucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuXG5cdGNvbnN0cnVjdG9yKHJvdzogSVJvdywgY29sOiBJQ29sLCBjb25maWc6IElSZW5kZXJlckNvbmZpZykge1xuXHRcdHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcblx0XHR0aGlzLl9jZWxsID0geyByb3csIGNvbCB9O1xuXG5cdFx0dGhpcy5faW5pdEhhbmRsZXJzKCk7XG5cdH1cblxuXHRlbmRFZGl0KHdpdGhvdXRTYXZlPzogYm9vbGVhbikge1xuXHRcdGxldCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xuXHRcdGlmICghd2l0aG91dFNhdmUpIHtcblx0XHRcdHZhbHVlID0gdGhpcy5faW5wdXQudmFsdWU7XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9jb25maWcuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5iZWZvcmVFZGl0RW5kLCBbdmFsdWUsIHRoaXMuX2NlbGwucm93LCB0aGlzLl9jZWxsLmNvbF0pKSB7XG5cdFx0XHR0aGlzLl9pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLl9oYW5kbGVycy5vbkJsdXIpO1xuXHRcdFx0dGhpcy5faW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLl9oYW5kbGVycy5vbkNoYW5nZSk7XG5cdFx0XHRpZiAodGhpcy5fY2VsbC5jb2wudHlwZSAhPT0gXCJzdHJpbmdcIiAmJiBpc051bWVyaWModmFsdWUpKSB7XG5cdFx0XHRcdHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSBhcyBzdHJpbmcpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fY2VsbC5yb3cgPSB0aGlzLl9jb25maWcuZGF0YWNvbGxlY3Rpb24uZ2V0SXRlbSh0aGlzLl9jZWxsLnJvdy5pZCk7XG5cdFx0XHR0aGlzLl9jb25maWcuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlckVkaXRFbmQsIFt2YWx1ZSwgdGhpcy5fY2VsbC5yb3csIHRoaXMuX2NlbGwuY29sXSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2lucHV0LmZvY3VzKCk7XG5cdFx0fVxuXHR9XG5cblx0dG9IVE1MKCkge1xuXHRcdGxldCBjb250ZW50ID0gdGhpcy5fY2VsbC5yb3dbdGhpcy5fY2VsbC5jb2wuaWRdO1xuXHRcdGlmICh0aGlzLl9pbnB1dCkge1xuXHRcdFx0Y29udGVudCA9IHRoaXMuX2lucHV0LnZhbHVlO1xuXHRcdH1cblx0XHR0aGlzLl9jb25maWcuJGVkaXRhYmxlLmVkaXRvciA9IHRoaXM7XG5cblx0XHRyZXR1cm4gZWwoXCJpbnB1dC5kaHhfY2VsbC1lZGl0b3IuZGh4X2NlbGwtZWRpdG9yX19pbnB1dFwiLCB7XG5cdFx0XHRfaG9va3M6IHtcblx0XHRcdFx0ZGlkSW5zZXJ0OiB0aGlzLl9oYW5kbGVycy5kaWRJbnNlcnQsXG5cdFx0XHR9LFxuXHRcdFx0X2tleTogXCJjZWxsX2VkaXRvclwiLFxuXHRcdFx0ZGh4X2lkOiBcImNlbGxfZWRpdG9yXCIsXG5cdFx0XHR2YWx1ZTogY29udGVudCxcblx0XHR9KTtcblx0fVxuXG5cdHByb3RlY3RlZCBfaW5pdEhhbmRsZXJzKCkge1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0b25CbHVyOiAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuZW5kRWRpdCgpO1xuXHRcdFx0fSxcblx0XHRcdG9uQ2hhbmdlOiAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuZW5kRWRpdCgpO1xuXHRcdFx0fSxcblx0XHRcdGRpZEluc2VydDogKG5vZGU6IGFueSkgPT4ge1xuXHRcdFx0XHRjb25zdCBpbnB1dCA9IG5vZGUuZWw7XG5cdFx0XHRcdHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cdFx0XHRcdGlucHV0LmZvY3VzKCk7XG5cdFx0XHRcdGlucHV0LnNldFNlbGVjdGlvblJhbmdlKDAsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG5cdFx0XHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5faGFuZGxlcnMub25DaGFuZ2UpO1xuXHRcdFx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLl9oYW5kbGVycy5vbkJsdXIpO1xuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG59XG4iLCJpbXBvcnQgeyBlbCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IElDb2wsIElSZW5kZXJlckNvbmZpZywgR3JpZEV2ZW50cywgSUVkaXRvciwgSVJvdyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgU2VsZWN0RWRpdG9yIGltcGxlbWVudHMgSUVkaXRvciB7XG5cdHByb3RlY3RlZCBfaGFuZGxlcnM6IHsgW2tleTogc3RyaW5nXTogKC4uLmFyZ3MpID0+IHZvaWQgfTtcblx0cHJvdGVjdGVkIF9jZWxsOiB7IHJvdzogSVJvdzsgY29sOiBJQ29sIH07XG5cdHByb3RlY3RlZCBfY29uZmlnOiBJUmVuZGVyZXJDb25maWc7XG5cdHByb3RlY3RlZCBfaW5wdXQ6IEhUTUxTZWxlY3RFbGVtZW50O1xuXG5cdGNvbnN0cnVjdG9yKHJvdzogYW55LCBjb2w6IElDb2wsIGNvbmZpZzogSVJlbmRlcmVyQ29uZmlnKSB7XG5cdFx0dGhpcy5fY29uZmlnID0gY29uZmlnO1xuXHRcdHRoaXMuX2NlbGwgPSB7IHJvdywgY29sIH07XG5cblx0XHR0aGlzLl9pbml0SGFuZGxlcnMoKTtcblx0fVxuXG5cdGVuZEVkaXQod2l0aG91dFNhdmU/OiBib29sZWFuKSB7XG5cdFx0bGV0IHZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XG5cdFx0aWYgKCF3aXRob3V0U2F2ZSkge1xuXHRcdFx0dmFsdWUgPSB0aGlzLl9pbnB1dC52YWx1ZTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2NvbmZpZy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmJlZm9yZUVkaXRFbmQsIFt2YWx1ZSwgdGhpcy5fY2VsbC5yb3csIHRoaXMuX2NlbGwuY29sXSkpIHtcblx0XHRcdHRoaXMuX2lucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuX2hhbmRsZXJzLm9uQmx1cik7XG5cdFx0XHR0aGlzLl9pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVycy5vbmtleWRvd24pO1xuXHRcdFx0dGhpcy5fY2VsbC5yb3cgPSB0aGlzLl9jb25maWcuZGF0YWNvbGxlY3Rpb24uZ2V0SXRlbSh0aGlzLl9jZWxsLnJvdy5pZCk7XG5cdFx0XHR0aGlzLl9jb25maWcuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5hZnRlckVkaXRFbmQsIFt2YWx1ZSwgdGhpcy5fY2VsbC5yb3csIHRoaXMuX2NlbGwuY29sXSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2lucHV0LmZvY3VzKCk7XG5cdFx0fVxuXHR9XG5cblx0dG9IVE1MKCkge1xuXHRcdGNvbnN0IGNvbnRlbnQgPSB0aGlzLl9jZWxsLmNvbC5vcHRpb25zIHx8IFtdO1xuXHRcdGxldCBzZWxlY3RlZCA9IHRoaXMuX2NlbGwucm93W3RoaXMuX2NlbGwuY29sLmlkXTtcblx0XHRpZiAodGhpcy5faW5wdXQpIHtcblx0XHRcdHNlbGVjdGVkID0gdGhpcy5faW5wdXQub3B0aW9uc1t0aGlzLl9pbnB1dC5zZWxlY3RlZEluZGV4XS52YWx1ZTtcblx0XHR9XG5cdFx0Y29uc3Qgb3B0aW9ucyA9IGNvbnRlbnQubWFwKGl0ZW0gPT4ge1xuXHRcdFx0cmV0dXJuIGVsKFxuXHRcdFx0XHRcIm9wdGlvblwiLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c2VsZWN0ZWQ6IGl0ZW0gPT09IHNlbGVjdGVkLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRpdGVtXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHRcdHRoaXMuX2NvbmZpZy4kZWRpdGFibGUuZWRpdG9yID0gdGhpcztcblx0XHRyZXR1cm4gZWwoXG5cdFx0XHRcInNlbGVjdC5kaHhfY2VsbC1lZGl0b3IuZGh4X2NlbGwtZWRpdG9yX19zZWxlY3RcIixcblx0XHRcdHtcblx0XHRcdFx0X2hvb2tzOiB7XG5cdFx0XHRcdFx0ZGlkSW5zZXJ0OiB0aGlzLl9oYW5kbGVycy5kaWRJbnNlcnQsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdF9rZXk6IFwiY2VsbF9lZGl0b3JcIixcblx0XHRcdFx0ZGh4X2lkOiBcImNlbGxfZWRpdG9yXCIsXG5cdFx0XHR9LFxuXHRcdFx0b3B0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2luaXRIYW5kbGVycygpIHtcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdG9uQmx1cjogKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmVuZEVkaXQoKTtcblx0XHRcdH0sXG5cdFx0XHRvbmtleWRvd246IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xuXHRcdFx0XHRcdHRoaXMuZW5kRWRpdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGlkSW5zZXJ0OiAobm9kZTogYW55KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlucHV0ID0gbm9kZS5lbDtcblx0XHRcdFx0dGhpcy5faW5wdXQgPSBpbnB1dDtcblx0XHRcdFx0aW5wdXQuZm9jdXMoKTtcblx0XHRcdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgdGhpcy5faGFuZGxlcnMub25CbHVyKTtcblx0XHRcdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlcnMub25rZXlkb3duKTtcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxufVxuIiwiaW1wb3J0IHsgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBJQ29sLCBJUmVuZGVyZXJDb25maWcsIEdyaWRFdmVudHMsIElSb3csIElFZGl0b3IgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IGlzTnVtZXJpYyB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5pbXBvcnQgeyBnZXRDYWxjdWxhdGVkUm93SGVpZ2h0LCBnZXRNYXhSb3dIZWlnaHQsIGdldFRyZWVDZWxsV2lkdGhPZmZzZXQgfSBmcm9tIFwiLi4vLi4vaGVscGVycy9kYXRhXCI7XG5cbmV4cG9ydCBjbGFzcyBUZXh0QXJlYUVkaXRvciBpbXBsZW1lbnRzIElFZGl0b3Ige1xuXHRwcm90ZWN0ZWQgX2hhbmRsZXJzOiB7IFtrZXk6IHN0cmluZ106ICguLi5hcmdzKSA9PiB2b2lkIH07XG5cdHByb3RlY3RlZCBfY2VsbDogeyByb3c6IElSb3c7IGNvbDogSUNvbCB9O1xuXHRwcm90ZWN0ZWQgX2NvbmZpZzogSVJlbmRlcmVyQ29uZmlnO1xuXHRwcm90ZWN0ZWQgX2VkaXRvcjogSFRNTFRleHRBcmVhRWxlbWVudDtcblxuXHRwcml2YXRlIF9taW5IZWlnaHQ6IG51bWJlcjtcblx0cHJpdmF0ZSBfcHJldkhlaWdodDogbnVtYmVyO1xuXHRwcml2YXRlIF93aWR0aDogbnVtYmVyO1xuXG5cdGNvbnN0cnVjdG9yKHJvdzogSVJvdywgY29sOiBJQ29sLCBjb25maWc6IElSZW5kZXJlckNvbmZpZykge1xuXHRcdHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcblx0XHR0aGlzLl9jZWxsID0geyByb3csIGNvbCB9O1xuXG5cdFx0dGhpcy5fd2lkdGggPSB0aGlzLl9jZWxsLmNvbC4kd2lkdGg7XG5cdFx0bGV0IHdpZHRoT2Zmc2V0ID0gMDtcblxuXHRcdGlmICh0aGlzLl9jb25maWcuZmlyc3RDb2xJZCA9PT0gdGhpcy5fY2VsbC5jb2wuaWQgJiYgdGhpcy5fY2VsbC5yb3cuaGFzT3duUHJvcGVydHkoXCIkbGV2ZWxcIikpIHtcblx0XHRcdHdpZHRoT2Zmc2V0ID0gZ2V0VHJlZUNlbGxXaWR0aE9mZnNldCh0aGlzLl9jZWxsLnJvdyk7XG5cdFx0fVxuXHRcdHRoaXMuX3dpZHRoIC09IHdpZHRoT2Zmc2V0IC0gNDtcblxuXHRcdHRoaXMuX2luaXRIYW5kbGVycygpO1xuXHR9XG5cblx0ZW5kRWRpdCh3aXRob3V0U2F2ZT86IGJvb2xlYW4pIHtcblx0XHRsZXQgdmFsdWU6IHN0cmluZyB8IG51bWJlcjtcblx0XHRpZiAoIXdpdGhvdXRTYXZlKSB7XG5cdFx0XHR2YWx1ZSA9IHRoaXMuX2VkaXRvci52YWx1ZTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2NvbmZpZy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmJlZm9yZUVkaXRFbmQsIFt2YWx1ZSwgdGhpcy5fY2VsbC5yb3csIHRoaXMuX2NlbGwuY29sXSkpIHtcblx0XHRcdHRoaXMuX2VkaXRvci5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLl9oYW5kbGVycy5vbkJsdXIpO1xuXHRcdFx0dGhpcy5fZWRpdG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5faGFuZGxlcnMub25DaGFuZ2UpO1xuXHRcdFx0dGhpcy5fZWRpdG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCB0aGlzLl9oYW5kbGVycy5vbklucHV0KTtcblx0XHRcdGlmICh0aGlzLl9jZWxsLmNvbC50eXBlICE9PSBcInN0cmluZ1wiICYmIGlzTnVtZXJpYyh2YWx1ZSkpIHtcblx0XHRcdFx0dmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlIGFzIHN0cmluZyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9jZWxsLnJvdyA9IHRoaXMuX2NvbmZpZy5kYXRhY29sbGVjdGlvbi5nZXRJdGVtKHRoaXMuX2NlbGwucm93LmlkKTtcblx0XHRcdHRoaXMuX2NvbmZpZy5ldmVudHMuZmlyZShHcmlkRXZlbnRzLmFmdGVyRWRpdEVuZCwgW3ZhbHVlLCB0aGlzLl9jZWxsLnJvdywgdGhpcy5fY2VsbC5jb2xdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fZWRpdG9yLmZvY3VzKCk7XG5cdFx0fVxuXHR9XG5cblx0dG9IVE1MKCkge1xuXHRcdGxldCB2YWx1ZSA9IHRoaXMuX2NlbGwucm93W3RoaXMuX2NlbGwuY29sLmlkXTtcblx0XHRpZiAodGhpcy5fZWRpdG9yKSB7XG5cdFx0XHR2YWx1ZSA9IHRoaXMuX2VkaXRvci52YWx1ZTtcblx0XHR9XG5cdFx0dGhpcy5fY29uZmlnLiRlZGl0YWJsZS5lZGl0b3IgPSB0aGlzO1xuXG5cdFx0Y29uc3QgY3NzID1cblx0XHRcdHR5cGVvZiB0aGlzLl9jZWxsLnJvdy5oZWlnaHQgPT09IFwidW5kZWZpbmVkXCIgJiYgIXRoaXMuX2NlbGwuY29sLmh0bWxFbmFibGVcblx0XHRcdFx0PyBcImRoeF9jZWxsLWVkaXRvciBkaHhfY2VsbC1lZGl0b3JfX3RleHRhcmVhXCJcblx0XHRcdFx0OiBcImRoeF9jZWxsLWVkaXRvciBkaHhfY2VsbC1lZGl0b3JfX3RleHRhcmVhX2NvbnN0YW50LWhlaWdodFwiO1xuXG5cdFx0cmV0dXJuIGVsKFwidGV4dGFyZWFcIiwge1xuXHRcdFx0X2hvb2tzOiB7XG5cdFx0XHRcdGRpZEluc2VydDogdGhpcy5faGFuZGxlcnMuZGlkSW5zZXJ0LFxuXHRcdFx0fSxcblx0XHRcdF9yZWY6IFwidGV4dGFyZWFcIixcblx0XHRcdF9rZXk6IFwiY2VsbF9lZGl0b3JcIixcblx0XHRcdGRoeF9pZDogXCJjZWxsX2VkaXRvclwiLFxuXHRcdFx0dmFsdWUsXG5cdFx0XHRjbGFzczogY3NzLFxuXHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0d2lkdGg6IHRoaXMuX3dpZHRoLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fVxuXG5cdHByb3RlY3RlZCBfaW5pdEhhbmRsZXJzKCkge1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0b25CbHVyOiAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuZW5kRWRpdCgpO1xuXHRcdFx0fSxcblx0XHRcdG9uQ2hhbmdlOiAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuZW5kRWRpdCgpO1xuXHRcdFx0fSxcblx0XHRcdG9uSW5wdXQ6IGV2ZW50ID0+IHtcblx0XHRcdFx0aWYgKHR5cGVvZiB0aGlzLl9jZWxsLnJvdy5oZWlnaHQgIT09IFwidW5kZWZpbmVkXCIgfHwgdGhpcy5fY2VsbC5jb2wuaHRtbEVuYWJsZSkgcmV0dXJuO1xuXG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRIZWlnaHQgPSB0aGlzLl9nZXRDdXJyZW50SGVpZ2h0KHRoaXMuX2VkaXRvci52YWx1ZSwge1xuXHRcdFx0XHRcdHdpZHRoOiB0aGlzLl9jZWxsLmNvbC4kd2lkdGggLSAyLFxuXHRcdFx0XHRcdG1heEhlaWdodDogdGhpcy5fY29uZmlnLnJvd0hlaWdodCxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy5fY2VsbC5yb3dbdGhpcy5fY2VsbC5jb2wuaWRdID0gdGhpcy5fZWRpdG9yLnZhbHVlO1xuXG5cdFx0XHRcdGNvbnN0IHRvdGFsSGVpZ2h0ID0gZ2V0Q2FsY3VsYXRlZFJvd0hlaWdodChcblx0XHRcdFx0XHRnZXRNYXhSb3dIZWlnaHQodGhpcy5fY2VsbC5yb3csIHRoaXMuX2NvbmZpZy5jb2x1bW5zKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRSb3dIZWlnaHQgPSBnZXRDYWxjdWxhdGVkUm93SGVpZ2h0KFxuXHRcdFx0XHRcdGdldE1heFJvd0hlaWdodChcblx0XHRcdFx0XHRcdHsgW3RoaXMuX2NlbGwuY29sLmlkXTogdGhpcy5fY2VsbC5yb3dbdGhpcy5fY2VsbC5jb2wuaWRdIH0sXG5cdFx0XHRcdFx0XHR0aGlzLl9jb25maWcuY29sdW1uc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0KTtcblxuXHRcdFx0XHR0aGlzLl9taW5IZWlnaHQgPSB0b3RhbEhlaWdodCA9PT0gY3VycmVudFJvd0hlaWdodCA/IHRoaXMuX2NvbmZpZy5yb3dIZWlnaHQgOiB0b3RhbEhlaWdodDtcblxuXHRcdFx0XHRpZiAoY3VycmVudEhlaWdodCA+PSB0aGlzLl9taW5IZWlnaHQgJiYgY3VycmVudEhlaWdodCAhPT0gdGhpcy5fcHJldkhlaWdodCkge1xuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdCF0aGlzLl9jb25maWcuZXZlbnRzLmZpcmUoR3JpZEV2ZW50cy5iZWZvcmVSb3dSZXNpemUsIFtcblx0XHRcdFx0XHRcdFx0dGhpcy5fY2VsbC5yb3csXG5cdFx0XHRcdFx0XHRcdGV2ZW50LFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50SGVpZ2h0LFxuXHRcdFx0XHRcdFx0XSlcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fY29uZmlnLmV2ZW50cy5maXJlKEdyaWRFdmVudHMuYWZ0ZXJSb3dSZXNpemUsIFtcblx0XHRcdFx0XHRcdHRoaXMuX2NlbGwucm93LFxuXHRcdFx0XHRcdFx0ZXZlbnQsXG5cdFx0XHRcdFx0XHRjdXJyZW50SGVpZ2h0LFxuXHRcdFx0XHRcdF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3ByZXZIZWlnaHQgPSBjdXJyZW50SGVpZ2h0O1xuXHRcdFx0fSxcblx0XHRcdGRpZEluc2VydDogbm9kZSA9PiB7XG5cdFx0XHRcdHRoaXMuX2VkaXRvciA9IG5vZGUuZWw7XG5cblx0XHRcdFx0dGhpcy5fZWRpdG9yLmZvY3VzKCk7XG5cdFx0XHRcdHRoaXMuX2VkaXRvci5zZXRTZWxlY3Rpb25SYW5nZSgwLCB0aGlzLl9lZGl0b3IudmFsdWUubGVuZ3RoKTtcblx0XHRcdFx0dGhpcy5fZWRpdG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5faGFuZGxlcnMub25DaGFuZ2UpO1xuXHRcdFx0XHR0aGlzLl9lZGl0b3IuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgdGhpcy5faGFuZGxlcnMub25CbHVyKTtcblx0XHRcdFx0dGhpcy5fZWRpdG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCB0aGlzLl9oYW5kbGVycy5vbklucHV0KTtcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXG5cdHByaXZhdGUgX2dldEN1cnJlbnRIZWlnaHQoXG5cdFx0dmFsdWU6IHN0cmluZyxcblx0XHRjb25maWc/OiB7IHdpZHRoOiBudW1iZXI7IG1heEhlaWdodDogbnVtYmVyOyBwYWRkaW5nPzogbnVtYmVyOyBsaW5lSGVpZ2h0PzogbnVtYmVyIH1cblx0KTogbnVtYmVyIHtcblx0XHRjb25maWcgPSB7XG5cdFx0XHR3aWR0aDogMTAwLFxuXHRcdFx0bWF4SGVpZ2h0OiA0MCxcblx0XHRcdGxpbmVIZWlnaHQ6IDIwLFxuXHRcdFx0Li4uY29uZmlnLFxuXHRcdH07XG5cblx0XHRjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuXHRcdGVsZW1lbnQuY2xhc3NOYW1lID0gXCJkaHhfY2VsbC1lZGl0b3IgZGh4X2NlbGwtZWRpdG9yX190ZXh0YXJlYVwiO1xuXHRcdGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcblx0XHRlbGVtZW50LnN0eWxlLndpZHRoID0gYCR7Y29uZmlnLndpZHRofXB4YDtcblx0XHRlbGVtZW50LnN0eWxlLmxpbmVIZWlnaHQgPSBgJHtjb25maWcubGluZUhlaWdodH1weGA7XG5cdFx0ZWxlbWVudC5zdHlsZS5tYXhIZWlnaHQgPSBgJHtjb25maWcubWF4SGVpZ2h0fXB4YDtcblx0XHRlbGVtZW50LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTtcblx0XHRjb25zdCBoZWlnaHQgPSB0aGlzLl9nZXRFbGVtZW50SGVpZ2h0KGVsZW1lbnQpO1xuXHRcdGNvbnN0IGN1cnJlbnRSb3dzID0gZWxlbWVudC52YWx1ZS5zcGxpdChcIlxcblwiKS5sZW5ndGg7XG5cdFx0Y29uc3QgY2FsY3VsYXRlUm93cyA9IE1hdGgucm91bmQoaGVpZ2h0IC8gY29uZmlnLmxpbmVIZWlnaHQpO1xuXHRcdGNvbnN0IGNhbGN1bGF0ZUhlaWdodCA9IGhlaWdodCA8IGNvbmZpZy5tYXhIZWlnaHQgPyBjb25maWcubWF4SGVpZ2h0IDogaGVpZ2h0O1xuXG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtZW50KTtcblxuXHRcdHJldHVybiBjdXJyZW50Um93cyA9PT0gMSAmJiBjdXJyZW50Um93cyA9PT0gY2FsY3VsYXRlUm93cyA/IGNvbmZpZy5tYXhIZWlnaHQgOiBjYWxjdWxhdGVIZWlnaHQ7XG5cdH1cblxuXHRwcml2YXRlIF9nZXRFbGVtZW50SGVpZ2h0KGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIGVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuXHR9XG59XG4iLCJpbXBvcnQgeyBJUmVuZGVyZXJDb25maWcsIElDb2wsIElFZGl0b3IsIEdyaWRFdmVudHMgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IElucHV0RWRpdG9yIH0gZnJvbSBcIi4vSW5wdXRFZGl0b3JcIjtcbmltcG9ydCB7IFNlbGVjdEVkaXRvciB9IGZyb20gXCIuL1NlbGVjdEVkaXRvclwiO1xuaW1wb3J0IHsgRGF0ZUVkaXRvciB9IGZyb20gXCIuL0RhdGVFZGl0b3JcIjtcbmltcG9ydCB7IENoZWNrYm94RWRpdG9yIH0gZnJvbSBcIi4vQ2hlY2tib3hFZGl0b3JcIjtcbmltcG9ydCB7IENvbWJvYm94RWRpdG9yIH0gZnJvbSBcIi4vQ29tYm9ib3hFZGl0b3JcIjtcbmltcG9ydCB7IFRleHRBcmVhRWRpdG9yIH0gZnJvbSBcIi4vVGV4dEFyZWFFZGl0b3JcIjtcblxubGV0IGxhc3RFZGl0b3IgPSB7XG5cdGNlbGw6IHtcblx0XHRyb3c6IG51bGwsXG5cdFx0Y29sOiBudWxsLFxuXHR9LFxuXHRlZGl0b3I6IG51bGwsXG5cdGdyaWRJZDogbnVsbCxcbn07XG5cbmxldCBlZGl0SGFuZGxlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVkaXRvcihyb3c6IGFueSwgY29sOiBJQ29sLCBjb25mOiBJUmVuZGVyZXJDb25maWcpOiBJRWRpdG9yIHtcblx0bGV0IHR5cGUgPSBjb2wudHlwZSA9PT0gXCJib29sZWFuXCIgPyBcImNoZWNrYm94XCIgOiBjb25mLiRlZGl0YWJsZS5lZGl0b3JUeXBlO1xuXHRpZiAodHlwZW9mIHR5cGUgPT09IFwidW5kZWZpbmVkXCIpIHR5cGUgPSBjb25mLmF1dG9IZWlnaHQgPyBcInRleHRhcmVhXCIgOiBcImlucHV0XCI7XG5cdGlmIChcblx0XHRsYXN0RWRpdG9yLmNlbGwucm93ID09PSByb3cuaWQgJiZcblx0XHRsYXN0RWRpdG9yLmNlbGwuY29sID09PSBjb2wuaWQgJiZcblx0XHRsYXN0RWRpdG9yLmdyaWRJZCA9PT0gY29uZi5ncmlkSWQgJiZcblx0XHRjb25mLiRlZGl0YWJsZS5lZGl0b3Jcblx0KSB7XG5cdFx0cmV0dXJuIGxhc3RFZGl0b3IuZWRpdG9yO1xuXHR9XG5cblx0aWYgKHR5cGUgIT09IFwiY2hlY2tib3hcIikge1xuXHRcdGxhc3RFZGl0b3IgPSB7XG5cdFx0XHRjZWxsOiB7XG5cdFx0XHRcdHJvdzogcm93LmlkLFxuXHRcdFx0XHRjb2w6IGNvbC5pZCxcblx0XHRcdH0sXG5cdFx0XHRlZGl0b3I6IGxhc3RFZGl0b3IuZWRpdG9yLFxuXHRcdFx0Z3JpZElkOiBjb25mLmdyaWRJZCxcblx0XHR9O1xuXHR9XG5cblx0aWYgKCFlZGl0SGFuZGxlcikge1xuXHRcdGVkaXRIYW5kbGVyID0gKCkgPT4ge1xuXHRcdFx0bGFzdEVkaXRvciA9IHtcblx0XHRcdFx0Y2VsbDoge1xuXHRcdFx0XHRcdHJvdzogbnVsbCxcblx0XHRcdFx0XHRjb2w6IG51bGwsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVkaXRvcjogbnVsbCxcblx0XHRcdFx0Z3JpZElkOiBudWxsLFxuXHRcdFx0fTtcblx0XHR9O1xuXHRcdGNvbmYuZXZlbnRzLm9uKEdyaWRFdmVudHMuYWZ0ZXJFZGl0RW5kLCBlZGl0SGFuZGxlcik7XG5cdH1cblxuXHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRjYXNlIFwiaW5wdXRcIjpcblx0XHRcdHJldHVybiAobGFzdEVkaXRvci5lZGl0b3IgPSBuZXcgSW5wdXRFZGl0b3Iocm93LCBjb2wsIGNvbmYpKTtcblx0XHRjYXNlIFwidGV4dGFyZWFcIjpcblx0XHRcdHJldHVybiAobGFzdEVkaXRvci5lZGl0b3IgPSBuZXcgVGV4dEFyZWFFZGl0b3Iocm93LCBjb2wsIGNvbmYpKTtcblx0XHRjYXNlIFwic2VsZWN0XCI6XG5cdFx0XHRyZXR1cm4gKGxhc3RFZGl0b3IuZWRpdG9yID0gbmV3IFNlbGVjdEVkaXRvcihyb3csIGNvbCwgY29uZikpO1xuXHRcdGNhc2UgXCJkYXRlUGlja2VyXCI6XG5cdFx0XHRyZXR1cm4gKGxhc3RFZGl0b3IuZWRpdG9yID0gbmV3IERhdGVFZGl0b3Iocm93LCBjb2wsIGNvbmYpKTtcblx0XHRjYXNlIFwiY2hlY2tib3hcIjpcblx0XHRcdHJldHVybiBuZXcgQ2hlY2tib3hFZGl0b3Iocm93LCBjb2wsIGNvbmYpO1xuXHRcdGNhc2UgXCJtdWx0aXNlbGVjdFwiOlxuXHRcdGNhc2UgXCJjb21ib2JveFwiOlxuXHRcdFx0cmV0dXJuIChsYXN0RWRpdG9yLmVkaXRvciA9IG5ldyBDb21ib2JveEVkaXRvcihyb3csIGNvbCwgY29uZikpO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKGxhc3RFZGl0b3IuZWRpdG9yID0gbmV3IElucHV0RWRpdG9yKHJvdywgY29sLCBjb25mKSk7XG5cdH1cbn1cbiIsImltcG9ydCB7IGF3YWl0UmVkcmF3LCBlbCwgS0VZRURfTElTVCwgcmVzaXplciB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IGdldFNjcm9sbGJhcldpZHRoLCBldmVudEhhbmRsZXIsIGxvY2F0ZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVQb3NpdGlvbnMgfSBmcm9tIFwiLi4vaGVscGVycy9kYXRhXCI7XG5pbXBvcnQgeyBpc0F1dG9XaWR0aCwgaXNDc3NTdXBwb3J0LCBnZXRUb3RhbFdpZHRoIH0gZnJvbSBcIi4uL2hlbHBlcnMvbWFpblwiO1xuaW1wb3J0IHsgSUNvb3JkcywgSUdyaWQsIElSZW5kZXJlckNvbmZpZywgSUdyaWRDb25maWcsIElSb3csIElQcm9HcmlkIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRDZWxscywgZ2V0SGFuZGxlcnMsIGdldFNoaWZ0cywgZ2V0U3BhbnMgfSBmcm9tIFwiLi9DZWxsc1wiO1xuaW1wb3J0IHsgZ2V0Rml4ZWRDb2xzLCBnZXRGaXhlZENvbHNIZWFkZXIgfSBmcm9tIFwiLi9GaXhlZENvbHNcIjtcbmltcG9ydCB7IGdldEZpeGVkUm93cyB9IGZyb20gXCIuL0ZpeGVkUm93c1wiO1xuaW1wb3J0IHsgZmluZEluZGV4IH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcblxuY29uc3QgQk9SREVSUyA9IDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZW5kZXJDb25maWcob2JqOiBhbnksIGRhdGE6IElSb3dbXSwgd3JhcHBlclNpemVzOiBhbnkpOiBJUmVuZGVyZXJDb25maWcge1xuXHRjb25zdCBjb25maWcgPSBvYmouY29uZmlnO1xuXHRjb25zdCBjb2x1bW5zID0gY29uZmlnLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29sLmhpZGRlbik7XG5cdGNvbnN0IHBvc2l0aW9ucyA9IGNhbGN1bGF0ZVBvc2l0aW9ucyh3cmFwcGVyU2l6ZXMud2lkdGgsIHdyYXBwZXJTaXplcy5oZWlnaHQsIG9iai5fc2Nyb2xsLCBjb25maWcsIGRhdGEpO1xuXHRjb25zdCBjdXJyZW50Q29sdW1ucyA9IGNvbHVtbnMuc2xpY2UocG9zaXRpb25zLnhTdGFydCwgcG9zaXRpb25zLnhFbmQpO1xuXHRjb25zdCBjdXJyZW50Um93cyA9IGRhdGEuc2xpY2UocG9zaXRpb25zLnlTdGFydCwgcG9zaXRpb25zLnlFbmQpO1xuXG5cdHJldHVybiB7XG5cdFx0Li4uY29uZmlnLFxuXHRcdGRhdGEsXG5cdFx0Y29sdW1ucyxcblx0XHRzY3JvbGw6IG9iai5fc2Nyb2xsLFxuXHRcdCRwb3NpdGlvbnM6IHBvc2l0aW9ucyxcblx0XHRoZWFkZXJIZWlnaHQ6IGNvbmZpZy4kaGVhZGVyTGV2ZWwgKiBjb25maWcuaGVhZGVyUm93SGVpZ2h0LFxuXHRcdGZvb3RlckhlaWdodDogY29uZmlnLiRmb290ZXJMZXZlbCAqIGNvbmZpZy5mb290ZXJSb3dIZWlnaHQsXG5cdFx0Zmlyc3RDb2xJZDogY29sdW1uc1swXSAmJiBjb2x1bW5zWzBdLmlkLFxuXHRcdGV2ZW50czogb2JqLmV2ZW50cyxcblx0XHRfZXZlbnRzOiBvYmouX2V2ZW50cyxcblx0XHRjdXJyZW50Q29sdW1ucyxcblx0XHRjdXJyZW50Um93cyxcblx0XHRzb3J0Qnk6IG9iai5fc29ydEJ5LFxuXHRcdHNvcnREaXI6IG9iai5fc29ydERpcixcblx0XHRjb250ZW50OiBvYmouY29udGVudCxcblx0XHRncmlkSWQ6IG9iai5fdWlkLFxuXHR9O1xufVxuXG5mdW5jdGlvbiBnZXRFbGVtZW50U2l6ZXMoZWxlbWVudDogSFRNTEVsZW1lbnQgfCBhbnkpOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0ge1xuXHRpZiAoIWVsZW1lbnQpIHJldHVybjtcblx0aWYgKCEoZWxlbWVudCBhcyBIVE1MRWxlbWVudCkudGFnTmFtZSkgZWxlbWVudCA9IGVsZW1lbnQuX3BhcmVudC5fY29udGFpbmVyO1xuXHRpZiAoIWVsZW1lbnQpIHJldHVybjtcblx0Y29uc3Qgc3R5bGVzID0gZWxlbWVudC5jdXJyZW50U3R5bGUgfHwgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cdGNvbnN0IHBhZGRpbmdzQnlXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLnBhZGRpbmdMZWZ0KSArIHBhcnNlRmxvYXQoc3R5bGVzLnBhZGRpbmdSaWdodCkgfHwgMDtcblx0Y29uc3QgcGFkZGluZ3NCeUhlaWdodCA9IHBhcnNlRmxvYXQoc3R5bGVzLnBhZGRpbmdUb3ApICsgcGFyc2VGbG9hdChzdHlsZXMucGFkZGluZ0JvdHRvbSkgfHwgMDtcblx0cmV0dXJuIHtcblx0XHR3aWR0aDogZWxlbWVudC5jbGllbnRXaWR0aCAtIHBhZGRpbmdzQnlXaWR0aCxcblx0XHRoZWlnaHQ6IGVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gcGFkZGluZ3NCeUhlaWdodCxcblx0fTtcbn1cblxuZnVuY3Rpb24gZ2V0R3JpZERhdGEocmVuZGVyQ29uZmlnOiBJUmVuZGVyZXJDb25maWcsIHNoaWZ0czogSUNvb3Jkcyk6IGFueSB7XG5cdGNvbnN0IGNvbnRlbnQgPSBnZXRDZWxscyhyZW5kZXJDb25maWcpO1xuXHRjb25zdCBjb250ZW50U3BhbnMgPSBnZXRTcGFucyhyZW5kZXJDb25maWcpO1xuXHRjb25zdCBnZXRSb3dBcmlhQXR0cnMgPSBjb3VudCA9PiAoe1xuXHRcdHJvbGU6IFwicm93Z3JvdXBcIixcblx0XHRcImFyaWEtcm93Y291bnRcIjogY291bnQsXG5cdH0pO1xuXG5cdGxldCByZXNpemVkTGluZTtcblx0Y29uc3QgY29sdW1zID0gcmVuZGVyQ29uZmlnLmNvbHVtbnM7XG5cdGlmIChyZW5kZXJDb25maWcuJHJlc2l6aW5nKSB7XG5cdFx0Y29uc3QgY29sSW5kZXggPSBmaW5kSW5kZXgoY29sdW1zLCBjb2wgPT4gY29sLmlkID09PSByZW5kZXJDb25maWcuJHJlc2l6aW5nKTtcblx0XHRjb25zdCBmaXJzdENlbGxMZWZ0ID0gZ2V0VG90YWxXaWR0aChjb2x1bXMuc2xpY2UoMCwgY29sSW5kZXgpKSArIGNvbHVtc1tjb2xJbmRleF0uJHdpZHRoO1xuXHRcdHJlc2l6ZWRMaW5lID0gZWwoXCIuZGh4X2dyaWQtcmVzaXplLWxpbmVcIiwge1xuXHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRsZWZ0OiBmaXJzdENlbGxMZWZ0LFxuXHRcdFx0XHRoZWlnaHQ6IHJlbmRlckNvbmZpZy4kdG90YWxIZWlnaHQsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG5cdGxldCBzZWxlY3Rpb24gPSByZW5kZXJDb25maWcuc2VsZWN0aW9uID8gcmVuZGVyQ29uZmlnLnNlbGVjdGlvbi50b0hUTUwoKSA6IG51bGw7XG5cdHNlbGVjdGlvbiA9XG5cdFx0dHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGVsKFwiZGl2LmRoeF9zZWxlY3Rpb25cIiwgeyBcIi5pbm5lckhUTUxcIjogc2VsZWN0aW9uIH0pIDogc2VsZWN0aW9uO1xuXG5cdGNvbnN0IHBvcyA9IHJlbmRlckNvbmZpZy4kcG9zaXRpb25zO1xuXHRjb25zdCBldmVudHMgPSB7fTtcblxuXHRmdW5jdGlvbiBnZXRDZWxsSW5mbyhlKSB7XG5cdFx0Y29uc3Qgcm93SWQgPSBsb2NhdGUoZSwgXCJkaHhfaWRcIik7XG5cdFx0Y29uc3QgY29sSWQgPSBsb2NhdGUoZSwgXCJkaHhfY29sX2lkXCIpO1xuXHRcdGNvbnN0IHJvdyA9IHJlbmRlckNvbmZpZy5jdXJyZW50Um93cy5maWx0ZXIoaXRlbSA9PiBpdGVtLmlkID09PSByb3dJZClbMF07XG5cdFx0Y29uc3QgY29sID0gcmVuZGVyQ29uZmlnLmN1cnJlbnRDb2x1bW5zLmZpbHRlcihpdGVtID0+IGl0ZW0uaWQgPT09IGNvbElkKVswXTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRyb3c6IHJvd0lkID8gcm93IDoge30sXG5cdFx0XHRjb2w6IGNvbElkID8gY29sIDoge30sXG5cdFx0fTtcblx0fVxuXG5cdGlmIChyZW5kZXJDb25maWcuZXZlbnRIYW5kbGVycykge1xuXHRcdGZvciAoY29uc3Qga2V5IGluIHJlbmRlckNvbmZpZy5ldmVudEhhbmRsZXJzKSB7XG5cdFx0XHRpZiAocmVuZGVyQ29uZmlnLmV2ZW50SGFuZGxlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRjb25zdCBldmVudCA9IHJlbmRlckNvbmZpZy5ldmVudEhhbmRsZXJzW2tleV07XG5cdFx0XHRcdGV2ZW50c1trZXldID0gZXZlbnRIYW5kbGVyKGUgPT4gZ2V0Q2VsbEluZm8oZSksIHtcblx0XHRcdFx0XHQuLi5ldmVudCxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsKFxuXHRcdFwiLmRoeF9kYXRhLXdyYXBcIixcblx0XHR7XG5cdFx0XHRzdHlsZToge1xuXHRcdFx0XHRoZWlnaHQ6IHJlbmRlckNvbmZpZy4kdG90YWxIZWlnaHQsXG5cdFx0XHRcdHdpZHRoOiByZW5kZXJDb25maWcuJHRvdGFsV2lkdGgsXG5cdFx0XHRcdFwicGFkZGluZy1sZWZ0XCI6IHNoaWZ0cy54LFxuXHRcdFx0XHRcInBhZGRpbmctdG9wXCI6IHNoaWZ0cy55LFxuXHRcdFx0fSxcblx0XHRcdHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG5cdFx0XHQuLi5ldmVudHMsXG5cdFx0fSxcblx0XHRbXG5cdFx0XHRlbChcblx0XHRcdFx0XCIuZGh4X2dyaWRfZGF0YVwiLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0X2ZsYWdzOiBLRVlFRF9MSVNULFxuXHRcdFx0XHRcdC4uLmdldEhhbmRsZXJzKHBvcy55U3RhcnQsIHBvcy54U3RhcnQsIHJlbmRlckNvbmZpZyksXG5cdFx0XHRcdFx0Li4uZ2V0Um93QXJpYUF0dHJzKHJlbmRlckNvbmZpZy5kYXRhLmxlbmd0aCksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbnRlbnRcblx0XHRcdCksXG5cdFx0XHRlbChcIi5kaHhfc3Bhbi1zcGFuc1wiLCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIgfSwgY29udGVudFNwYW5zKSxcblx0XHRcdGVsKFwiLmRoeF9ncmlkX3NlbGVjdGlvblwiLCB7IF9yZWY6IFwic2VsZWN0aW9uXCIsIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIgfSwgW3NlbGVjdGlvbiwgcmVzaXplZExpbmVdKSxcblx0XHRdXG5cdCk7XG59XG5cbmZ1bmN0aW9uIGdldENvbnRlbnRIZWlnaHQoXG5cdHJlbmRlckNvbmZpZzogSVJlbmRlcmVyQ29uZmlnLFxuXHRpc1N0aWNreTogYm9vbGVhbixcblx0d3JhcHBlclNpemVzOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH1cbik6IG51bWJlciB7XG5cdGxldCBjb250ZW50SGVpZ2h0ID0gd3JhcHBlclNpemVzLmhlaWdodCAtIEJPUkRFUlM7XG5cdGNvbnRlbnRIZWlnaHQgPSBpc1N0aWNreSA/IGNvbnRlbnRIZWlnaHQgOiBjb250ZW50SGVpZ2h0IC0gcmVuZGVyQ29uZmlnLmhlYWRlckhlaWdodDtcblxuXHRjb25zdCBpc0Zvb3RlciA9IHJlbmRlckNvbmZpZy4kZm9vdGVyO1xuXG5cdHJldHVybiAoY29udGVudEhlaWdodCA9IGlzRm9vdGVyXG5cdFx0PyBpc1N0aWNreVxuXHRcdFx0PyBjb250ZW50SGVpZ2h0XG5cdFx0XHQ6IGNvbnRlbnRIZWlnaHQgLSByZW5kZXJDb25maWcuZm9vdGVySGVpZ2h0XG5cdFx0OiBjb250ZW50SGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBdXRvV2lkdGgoXG5cdGNvbmZpZzogSUdyaWRDb25maWcsXG5cdHdyYXBwZXJTaXplcyxcblx0Zmlyc3RBcHBseSA9IHRydWUsXG5cdHJlc2l6ZXIgPSBmYWxzZSxcblx0c2Nyb2xsVmlld0NvbmZpZyA9IGZhbHNlXG4pIHtcblx0Y29uc3Qgc2Nyb2xsYmFyWSA9XG5cdFx0IXNjcm9sbFZpZXdDb25maWcgJiYgY29uZmlnLiR0b3RhbEhlaWdodCA+PSB3cmFwcGVyU2l6ZXMuaGVpZ2h0IC0gY29uZmlnLmhlYWRlclJvd0hlaWdodFxuXHRcdFx0PyBnZXRTY3JvbGxiYXJXaWR0aCgpXG5cdFx0XHQ6IDA7XG5cdGNvbnN0IG5ld1RvdGFsV2lkdGggPSB3cmFwcGVyU2l6ZXMud2lkdGggLSBCT1JERVJTIC0gc2Nyb2xsYmFyWTtcblxuXHRjb25zdCBjb2x1bW5zID0gY29uZmlnLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29sLmhpZGRlbik7XG5cblx0Y29uc3QgZ3Jvd2luZ0NvbHVtbnMgPSBjb2x1bW5zLmZpbHRlcihcblx0XHRjb2wgPT4gIWNvbC53aWR0aCAmJiAhKGNvbCBhcyBhbnkpLiRmaXhlZCAmJiBpc0F1dG9XaWR0aChjb25maWcsIGNvbClcblx0KTtcblx0bGV0IG5vbkdyb3dpbmdDb2x1bW5zV2lkdGggPSBnZXRUb3RhbFdpZHRoKFxuXHRcdGNvbHVtbnMuZmlsdGVyKGNvbCA9PiBjb2wud2lkdGggfHwgKGNvbCBhcyBhbnkpLiRmaXhlZCB8fCAhaXNBdXRvV2lkdGgoY29uZmlnLCBjb2wpKVxuXHQpO1xuXG5cdGNvbnN0IGZ1bGxHcmF2aXR5ID0gZ3Jvd2luZ0NvbHVtbnMucmVkdWNlKChncmF2aXR5LCBjb2wpID0+IGdyYXZpdHkgKyAoY29sLmdyYXZpdHkgfHwgMSksIDApO1xuXG5cdGlmIChuZXdUb3RhbFdpZHRoIDwgY29uZmlnLiR0b3RhbFdpZHRoKSB7XG5cdFx0Y29uc3QgZ3Jvd2luZ0NvbHVtbnNXaWR0aCA9IGdyb3dpbmdDb2x1bW5zLnJlZHVjZShcblx0XHRcdCh3aWR0aCwgY29sKSA9PiB3aWR0aCArIChjb2wubWF4V2lkdGggfHwgY29sLiR3aWR0aCksXG5cdFx0XHQwXG5cdFx0KTtcblx0XHRpZiAoZ3Jvd2luZ0NvbHVtbnMubGVuZ3RoID4gMSkge1xuXHRcdFx0Z3Jvd2luZ0NvbHVtbnMuZm9yRWFjaChjb2wgPT4ge1xuXHRcdFx0XHRsZXQgbmV3V2lkdGggPSAwO1xuXHRcdFx0XHRpZiAoZmlyc3RBcHBseSkge1xuXHRcdFx0XHRcdG5ld1dpZHRoID1cblx0XHRcdFx0XHRcdE1hdGguYWJzKG5ld1RvdGFsV2lkdGggLSBncm93aW5nQ29sdW1uc1dpZHRoKSAqICgoY29sLmdyYXZpdHkgfHwgMSkgLyBmdWxsR3Jhdml0eSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmV3V2lkdGggPVxuXHRcdFx0XHRcdFx0TWF0aC5hYnMobmV3VG90YWxXaWR0aCAtIG5vbkdyb3dpbmdDb2x1bW5zV2lkdGgpICogKChjb2wuZ3Jhdml0eSB8fCAxKSAvIGZ1bGxHcmF2aXR5KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCB3cm9uZ01pbiA9IG5ld1dpZHRoIDwgY29sLm1pbldpZHRoO1xuXHRcdFx0XHRjb25zdCB3cm9uZ01heCA9IG5ld1dpZHRoID4gY29sLm1heFdpZHRoO1xuXHRcdFx0XHRpZiAoIXdyb25nTWluICYmICF3cm9uZ01heCkge1xuXHRcdFx0XHRcdGNvbC4kd2lkdGggPSBuZXdXaWR0aDtcblx0XHRcdFx0fSBlbHNlIGlmICh3cm9uZ01pbikge1xuXHRcdFx0XHRcdG5vbkdyb3dpbmdDb2x1bW5zV2lkdGggKz0gY29sLiR3aWR0aCAtIG5ld1dpZHRoO1xuXHRcdFx0XHRcdChjb2wgYXMgYW55KS4kZml4ZWQgPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHdyb25nTWF4KSB7XG5cdFx0XHRcdFx0Y29sLiR3aWR0aCA9IGNvbC5tYXhXaWR0aDtcblx0XHRcdFx0XHQoY29sIGFzIGFueSkuJGZpeGVkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGdyb3dpbmdDb2x1bW5zLmZvckVhY2goY29sID0+IHtcblx0XHRcdGNvbnN0IG5ld1dpZHRoID1cblx0XHRcdFx0TWF0aC5hYnMobmV3VG90YWxXaWR0aCAtIG5vbkdyb3dpbmdDb2x1bW5zV2lkdGgpICogKChjb2wuZ3Jhdml0eSB8fCAxKSAvIGZ1bGxHcmF2aXR5KTtcblx0XHRcdGNvbnN0IHdyb25nTWluID0gbmV3V2lkdGggPCBjb2wubWluV2lkdGg7XG5cdFx0XHRjb25zdCB3cm9uZ01heCA9IG5ld1dpZHRoID4gY29sLm1heFdpZHRoO1xuXHRcdFx0aWYgKCF3cm9uZ01pbiAmJiAhd3JvbmdNYXgpIHtcblx0XHRcdFx0Y29sLiR3aWR0aCA9IG5ld1dpZHRoO1xuXHRcdFx0fSBlbHNlIGlmICh3cm9uZ01pbikge1xuXHRcdFx0XHRub25Hcm93aW5nQ29sdW1uc1dpZHRoICs9IGNvbC4kd2lkdGggLSBuZXdXaWR0aDtcblx0XHRcdFx0aWYgKHJlc2l6ZXIpIChjb2wgYXMgYW55KS4kZml4ZWQgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIGlmICh3cm9uZ01heCkge1xuXHRcdFx0XHRjb2wuJHdpZHRoID0gY29sLm1heFdpZHRoO1xuXHRcdFx0XHRpZiAocmVzaXplcikgKGNvbCBhcyBhbnkpLiRmaXhlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWZpcnN0QXBwbHkgJiYgKGNvbCBhcyBhbnkpLiRmaXhlZCkge1xuXHRcdFx0XHRkZWxldGUgKGNvbCBhcyBhbnkpLiRmaXhlZDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRpZiAoZmlyc3RBcHBseSkge1xuXHRcdGFwcGx5QXV0b1dpZHRoKGNvbmZpZywgd3JhcHBlclNpemVzLCBmYWxzZSwgcmVzaXplciwgc2Nyb2xsVmlld0NvbmZpZyk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih2bTogYW55LCBvYmo6IElHcmlkLCBodG1sRXZlbnRzOiBhbnksIHNlbGVjdGlvbjogYW55LCB1aWQ6IHN0cmluZykge1xuXHRpZiAoIShvYmogYXMgYW55KS5fY29udGFpbmVyKSB7XG5cdFx0b2JqLmNvbmZpZy53aWR0aCA9IDE7XG5cdFx0b2JqLmNvbmZpZy5oZWlnaHQgPSAxO1xuXHR9XG5cdC8vIGlmIGdyaWQgcGxhY2VkIGluc2lkZSBhbm90aGVyIGNvbXBvbmVudCwgaXQgd2lsbCBmaXQgdG8gaXRzIGNvbnRhaW5lclxuXHRpZiAodm0gJiYgdm0ubm9kZSAmJiB2bS5ub2RlLnBhcmVudCAmJiB2bS5ub2RlLnBhcmVudC5lbCkge1xuXHRcdGNvbnN0IHBhcmVudE5vZGUgPSB2bS5ub2RlLnBhcmVudC5lbDtcblx0XHRjb25zdCBwYXJlbnRTaXplcyA9IGdldEVsZW1lbnRTaXplcyhwYXJlbnROb2RlKTtcblx0XHRvYmouY29uZmlnLndpZHRoID0gcGFyZW50U2l6ZXMud2lkdGg7XG5cdFx0b2JqLmNvbmZpZy5oZWlnaHQgPSBwYXJlbnRTaXplcy5oZWlnaHQ7XG5cdH1cblx0Y29uc3QgY29uZmlnID0gb2JqLmNvbmZpZztcblx0Ly8gd2hlbiBncmlkIGlzIGRlc3RydWN0aW5nIGFuZCB1c2VyIHRyeSB0byByZXBhaW50IGl0XG5cdGlmICghY29uZmlnKSB7XG5cdFx0cmV0dXJuIGVsKFwiZGl2XCIpO1xuXHR9XG5cdGlmICghY29uZmlnLmNvbHVtbnMubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIGVsKFwiLmRoeF9ncmlkXCIsIHtcblx0XHRcdGRoeF9yb290X2lkOiBjb25maWcucm9vdFBhcmVudCxcblx0XHR9KTtcblx0fVxuXG5cdGNvbnN0IGRhdGEgPSBvYmouZGF0YS5nZXRSYXdEYXRhKDAsIC0xLCBudWxsLCAyKTtcblxuXHRpZiAoY29uZmlnLmNvbHVtbnMucmVkdWNlKChjaGVjaywgY29sKSA9PiAoY2hlY2sgPSAhY29sLmhpZGRlbiA/IGNvbC5oaWRkZW4gOiBjaGVjayksIHRydWUpKSB7XG5cdFx0Y29uZmlnLiR0b3RhbEhlaWdodCA9IDA7XG5cdH0gZWxzZSB7XG5cdFx0Y29uZmlnLiR0b3RhbEhlaWdodCA9IGRhdGEucmVkdWNlKCh0b3RhbCwgeyAkaGVpZ2h0IH0pID0+ICh0b3RhbCArPSAkaGVpZ2h0IHx8IDApLCAwKTtcblx0fVxuXG5cdGNvbnN0IHNpemVzID0gZ2V0RWxlbWVudFNpemVzKChvYmogYXMgYW55KS5fY29udGFpbmVyKTtcblx0Y29uc3Qgd3JhcHBlclNpemVzID0ge1xuXHRcdHdpZHRoOiAoY29uZmlnLndpZHRoID8gY29uZmlnLndpZHRoIDogc2l6ZXMgJiYgc2l6ZXMud2lkdGgpIHx8IDAsXG5cdFx0aGVpZ2h0OiAoY29uZmlnLmhlaWdodCA/IGNvbmZpZy5oZWlnaHQgOiBzaXplcyAmJiBzaXplcy5oZWlnaHQpIHx8IDAsXG5cdH07XG5cdC8vIFRPRE86IFJlbW92ZSBzY3JvbGxcblx0aWYgKGlzQXV0b1dpZHRoKGNvbmZpZykpIHtcblx0XHRhcHBseUF1dG9XaWR0aChjb25maWcsIHdyYXBwZXJTaXplcyk7XG5cdFx0Y29uZmlnLiR0b3RhbFdpZHRoID0gZ2V0VG90YWxXaWR0aChjb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKSk7XG5cdH1cblx0Y29uZmlnLndpZHRoID0gd3JhcHBlclNpemVzLndpZHRoO1xuXHRjb25maWcuaGVpZ2h0ID0gd3JhcHBlclNpemVzLmhlaWdodDtcblxuXHRjb25zdCByZW5kZXJDb25maWcgPSBnZXRSZW5kZXJDb25maWcob2JqLCBkYXRhLCB3cmFwcGVyU2l6ZXMpO1xuXHRyZW5kZXJDb25maWcuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuXHRyZW5kZXJDb25maWcuZGF0YWNvbGxlY3Rpb24gPSBvYmouZGF0YTtcblx0Y29uc3Qgc2hpZnRzID0gZ2V0U2hpZnRzKHJlbmRlckNvbmZpZyk7XG5cblx0Y29uc3QgaXNTdGlja3kgPSBpc0Nzc1N1cHBvcnQoXCJwb3NpdGlvblwiLCBcInN0aWNreVwiKTtcblx0Y29uc3QgZ3JpZEJvZHlIZWlnaHQgPSBnZXRDb250ZW50SGVpZ2h0KHJlbmRlckNvbmZpZywgaXNTdGlja3ksIHdyYXBwZXJTaXplcyk7XG5cblx0Y29uc3QgbGF5b3V0U3RhdGUgPSB7XG5cdFx0d3JhcHBlcjogd3JhcHBlclNpemVzLFxuXHRcdHN0aWNreTogaXNTdGlja3ksXG5cdFx0c2hpZnRzLFxuXHRcdGdyaWRCb2R5SGVpZ2h0LFxuXHR9O1xuXG5cdGNvbnN0IGhlYWRlciA9IGdldEZpeGVkUm93cyhyZW5kZXJDb25maWcsIHtcblx0XHQuLi5sYXlvdXRTdGF0ZSxcblx0XHRuYW1lOiBcImhlYWRlclwiLFxuXHRcdHBvc2l0aW9uOiBcInRvcFwiLFxuXHR9KTtcblxuXHRjb25zdCBmb290ZXIgPSByZW5kZXJDb25maWcuJGZvb3RlclxuXHRcdD8gZ2V0Rml4ZWRSb3dzKHJlbmRlckNvbmZpZywge1xuXHRcdFx0XHQuLi5sYXlvdXRTdGF0ZSxcblx0XHRcdFx0bmFtZTogXCJmb290ZXJcIixcblx0XHRcdFx0cG9zaXRpb246IFwiYm90dG9tXCIsXG5cdFx0ICB9KVxuXHRcdDogbnVsbDtcblxuXHRjb25zdCBsZXNzQnlXaWR0aCA9IHJlbmRlckNvbmZpZy4kdG90YWxXaWR0aCArIEJPUkRFUlMgPCB3cmFwcGVyU2l6ZXMud2lkdGggPyBcImRoeF9ncmlkLWxlc3Mtd2lkdGhcIiA6IFwiXCI7XG5cdGNvbnN0IGxlc3NCeUhlaWdodCA9XG5cdFx0cmVuZGVyQ29uZmlnLiR0b3RhbEhlaWdodCArIEJPUkRFUlMgPCB3cmFwcGVyU2l6ZXMuaGVpZ2h0ID8gXCJkaHhfZ3JpZC1sZXNzLWhlaWdodFwiIDogXCJcIjtcblxuXHRjb25zdCBnZXRHcmlkQXJpYUF0dHJzID0gKHJvd3MsIGNvbHMsIGlzRWRpdGFibGUsIGlzTXVsdGlzZWxlY3RhYmxlKSA9PiAoe1xuXHRcdHJvbGU6IFwiZ3JpZFwiLFxuXHRcdFwiYXJpYS1yb3djb3VudFwiOiByb3dzLmxlbmd0aCxcblx0XHRcImFyaWEtY29sY291bnRcIjogY29scy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKS5sZW5ndGgsXG5cdFx0XCJhcmlhLXJlYWRvbmx5XCI6IGlzRWRpdGFibGUgPyBcImZhbHNlXCIgOiBcInRydWVcIixcblx0XHRcImFyaWEtbXVsdGlzZWxlY3RhYmxlXCI6IGlzTXVsdGlzZWxlY3RhYmxlID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIsXG5cdH0pO1xuXG5cdC8vIGRpcnR5OiBidXQgd29yay4gQ2hhbmdlIGNoZWNraW5nIG9mIHJlbmRlcmluZyBHcmlkXG5cdGlmICghdm0ubm9kZSkge1xuXHRcdGNvbnN0IHsgeCwgeSB9ID0gb2JqLmdldFNjcm9sbFN0YXRlKCk7XG5cdFx0YXdhaXRSZWRyYXcoKS50aGVuKCgpID0+IHtcblx0XHRcdG9iai5zY3JvbGwoeCwgeSk7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGVsKFxuXHRcdFwiLmRoeF9ncmlkLmRoeF93aWRnZXRcIixcblx0XHR7XG5cdFx0XHRjbGFzczpcblx0XHRcdFx0KHJlbmRlckNvbmZpZy5jc3MgfHwgXCJcIikgK1xuXHRcdFx0XHQoIWlzU3RpY2t5ID8gXCIgZGh4X2dyaWRfYm9yZGVyXCIgOiBcIlwiKSArXG5cdFx0XHRcdChjb25maWcubXVsdGlzZWxlY3Rpb24gPyBcIiBkaHhfbm8tc2VsZWN0LS1wb2ludGVyXCIgOiBcIlwiKSxcblx0XHRcdGRoeF93aWRnZXRfaWQ6IHVpZCxcblx0XHRcdGRoeF9yb290X2lkOiBjb25maWcucm9vdFBhcmVudCxcblx0XHRcdC4uLmdldEdyaWRBcmlhQXR0cnMoXG5cdFx0XHRcdHJlbmRlckNvbmZpZy5kYXRhLFxuXHRcdFx0XHRjb25maWcuY29sdW1ucyxcblx0XHRcdFx0cmVuZGVyQ29uZmlnLmVkaXRhYmxlLFxuXHRcdFx0XHRyZW5kZXJDb25maWcubXVsdGlzZWxlY3Rpb25cblx0XHRcdCksXG5cdFx0fSxcblx0XHRbXG5cdFx0XHRyZXNpemVyKGNoYW5nZVdpdGggPT4ge1xuXHRcdFx0XHRpZiAoaXNBdXRvV2lkdGgob2JqLmNvbmZpZykgJiYgISFjaGFuZ2VXaXRoKSB7XG5cdFx0XHRcdFx0Y29uZmlnLiR0b3RhbFdpZHRoID0gMDtcblx0XHRcdFx0XHRhcHBseUF1dG9XaWR0aChjb25maWcsIHdyYXBwZXJTaXplcywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9iai5wYWludCgpO1xuXHRcdFx0fSksXG5cdFx0XHRlbChcblx0XHRcdFx0XCIuZGh4X2dyaWQtY29udGVudFwiLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c3R5bGU6IHsgLi4ud3JhcHBlclNpemVzIH0sXG5cdFx0XHRcdFx0b25jbGljazogaHRtbEV2ZW50cy5vbmNsaWNrLFxuXHRcdFx0XHRcdG9ubW91c2VvdmVyOiBodG1sRXZlbnRzLm9ubW91c2VvdmVyLFxuXHRcdFx0XHRcdGNsYXNzOiBgJHtsZXNzQnlXaWR0aH0gJHtsZXNzQnlIZWlnaHR9YC50cmltKCksXG5cdFx0XHRcdFx0cm9sZTogXCJwcmVzZW50YXRpb25cIixcblx0XHRcdFx0fSxcblx0XHRcdFx0W1xuXHRcdFx0XHRcdGlzU3RpY2t5ID8gbnVsbCA6IGhlYWRlcixcblx0XHRcdFx0XHRlbChcblx0XHRcdFx0XHRcdFwiLmRoeF9ncmlkLWJvZHlcIixcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdFx0XHRoZWlnaHQ6IGdyaWRCb2R5SGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRcdHdpZHRoOiB3cmFwcGVyU2l6ZXMud2lkdGggLSBCT1JERVJTLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRvbnNjcm9sbDogaHRtbEV2ZW50cy5vbnNjcm9sbCxcblx0XHRcdFx0XHRcdFx0X3JlZjogXCJncmlkX2JvZHlcIixcblx0XHRcdFx0XHRcdFx0cm9sZTogXCJwcmVzZW50YXRpb25cIixcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdGVsKFwiZGl2XCIsIHt9LCBbXG5cdFx0XHRcdFx0XHRcdFx0aXNTdGlja3kgPyBoZWFkZXIgOiBudWxsLFxuXHRcdFx0XHRcdFx0XHRcdGdldEdyaWREYXRhKHJlbmRlckNvbmZpZywgc2hpZnRzKSxcblx0XHRcdFx0XHRcdFx0XHRpc1N0aWNreSA/IGZvb3RlciA6IG51bGwsXG5cdFx0XHRcdFx0XHRcdF0pLFxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0Z2V0Rml4ZWRDb2xzSGVhZGVyKHJlbmRlckNvbmZpZywgbGF5b3V0U3RhdGUpLFxuXHRcdFx0XHRcdGdldEZpeGVkQ29scyhyZW5kZXJDb25maWcsIGxheW91dFN0YXRlKSxcblx0XHRcdFx0XHRpc1N0aWNreSA/IG51bGwgOiBmb290ZXIsXG5cdFx0XHRcdF1cblx0XHRcdCksXG5cdFx0XVxuXHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvUmVuZGVyKHZtOiBhbnksIG9iajogSVByb0dyaWQsIGh0bWxFdmVudHM6IGFueSwgc2VsZWN0aW9uOiBhbnksIHVpZDogc3RyaW5nKSB7XG5cdGlmICghKG9iaiBhcyBhbnkpLl9jb250YWluZXIpIHtcblx0XHRvYmouY29uZmlnLndpZHRoID0gMTtcblx0XHRvYmouY29uZmlnLmhlaWdodCA9IDE7XG5cdH1cblx0Ly8gaWYgZ3JpZCBwbGFjZWQgaW5zaWRlIGFub3RoZXIgY29tcG9uZW50LCBpdCB3aWxsIGZpdCB0byBpdHMgY29udGFpbmVyXG5cdGlmICh2bSAmJiB2bS5ub2RlICYmIHZtLm5vZGUucGFyZW50ICYmIHZtLm5vZGUucGFyZW50LmVsKSB7XG5cdFx0Y29uc3QgcGFyZW50Tm9kZSA9IHZtLm5vZGUucGFyZW50LmVsO1xuXHRcdGNvbnN0IHBhcmVudFNpemVzID0gZ2V0RWxlbWVudFNpemVzKHBhcmVudE5vZGUpO1xuXHRcdG9iai5jb25maWcud2lkdGggPSBwYXJlbnRTaXplcy53aWR0aDtcblx0XHRvYmouY29uZmlnLmhlaWdodCA9IHBhcmVudFNpemVzLmhlaWdodDtcblx0fVxuXHRjb25zdCBjb25maWcgPSBvYmouY29uZmlnO1xuXHQvLyB3aGVuIGdyaWQgaXMgZGVzdHJ1Y3RpbmcgYW5kIHVzZXIgdHJ5IHRvIHJlcGFpbnQgaXRcblx0aWYgKCFjb25maWcpIHtcblx0XHRyZXR1cm4gZWwoXCJkaXZcIik7XG5cdH1cblx0aWYgKCFjb25maWcuY29sdW1ucy5sZW5ndGgpIHtcblx0XHRyZXR1cm4gZWwoXCIuZGh4X2dyaWRcIiwge1xuXHRcdFx0ZGh4X3Jvb3RfaWQ6IGNvbmZpZy5yb290UGFyZW50LFxuXHRcdH0pO1xuXHR9XG5cblx0Y29uc3QgZGF0YSA9IG9iai5kYXRhLmdldFJhd0RhdGEoMCwgLTEsIG51bGwsIDIpO1xuXG5cdGlmIChjb25maWcuY29sdW1ucy5yZWR1Y2UoKGNoZWNrLCBjb2wpID0+IChjaGVjayA9ICFjb2wuaGlkZGVuID8gY29sLmhpZGRlbiA6IGNoZWNrKSwgdHJ1ZSkpIHtcblx0XHRjb25maWcuJHRvdGFsSGVpZ2h0ID0gMDtcblx0fSBlbHNlIHtcblx0XHRjb25maWcuJHRvdGFsSGVpZ2h0ID0gZGF0YS5yZWR1Y2UoKHRvdGFsLCB7ICRoZWlnaHQgfSkgPT4gKHRvdGFsICs9ICRoZWlnaHQgfHwgMCksIDApO1xuXHR9XG5cblx0Y29uc3Qgc2l6ZXMgPSBnZXRFbGVtZW50U2l6ZXMoKG9iaiBhcyBhbnkpLl9jb250YWluZXIpO1xuXHRjb25zdCB3cmFwcGVyU2l6ZXMgPSB7XG5cdFx0d2lkdGg6IChjb25maWcud2lkdGggPyBjb25maWcud2lkdGggOiBzaXplcyAmJiBzaXplcy53aWR0aCkgfHwgMCxcblx0XHRoZWlnaHQ6IChjb25maWcuaGVpZ2h0ID8gY29uZmlnLmhlaWdodCA6IHNpemVzICYmIHNpemVzLmhlaWdodCkgfHwgMCxcblx0fTtcblx0Ly8gVE9ETzogUmVtb3ZlIHNjcm9sbFxuXHRpZiAoaXNBdXRvV2lkdGgoY29uZmlnKSkge1xuXHRcdGFwcGx5QXV0b1dpZHRoKFxuXHRcdFx0Y29uZmlnLFxuXHRcdFx0d3JhcHBlclNpemVzLFxuXHRcdFx0dHJ1ZSxcblx0XHRcdGZhbHNlLFxuXHRcdFx0KG9iaiBhcyBhbnkpLnNjcm9sbFZpZXcgJiYgKG9iaiBhcyBhbnkpLnNjcm9sbFZpZXcuY29uZmlnLmVuYWJsZVxuXHRcdCk7XG5cdFx0Y29uZmlnLiR0b3RhbFdpZHRoID0gZ2V0VG90YWxXaWR0aChjb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+ICFjb2wuaGlkZGVuKSk7XG5cdH1cblx0Y29uZmlnLndpZHRoID0gd3JhcHBlclNpemVzLndpZHRoO1xuXHRjb25maWcuaGVpZ2h0ID0gd3JhcHBlclNpemVzLmhlaWdodDtcblxuXHRjb25zdCByZW5kZXJDb25maWcgPSBnZXRSZW5kZXJDb25maWcob2JqLCBkYXRhLCB3cmFwcGVyU2l6ZXMpO1xuXHRyZW5kZXJDb25maWcuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuXHRyZW5kZXJDb25maWcuZGF0YWNvbGxlY3Rpb24gPSBvYmouZGF0YTtcblx0Y29uc3Qgc2hpZnRzID0gZ2V0U2hpZnRzKHJlbmRlckNvbmZpZyk7XG5cblx0Y29uc3QgaXNTdGlja3kgPSBpc0Nzc1N1cHBvcnQoXCJwb3NpdGlvblwiLCBcInN0aWNreVwiKTtcblx0Y29uc3QgZ3JpZEJvZHlIZWlnaHQgPSBnZXRDb250ZW50SGVpZ2h0KHJlbmRlckNvbmZpZywgaXNTdGlja3ksIHdyYXBwZXJTaXplcyk7XG5cblx0Y29uc3QgbGF5b3V0U3RhdGUgPSB7XG5cdFx0d3JhcHBlcjogd3JhcHBlclNpemVzLFxuXHRcdHN0aWNreTogaXNTdGlja3ksXG5cdFx0c2hpZnRzLFxuXHRcdGdyaWRCb2R5SGVpZ2h0LFxuXHR9O1xuXG5cdGNvbnN0IGhlYWRlciA9IGdldEZpeGVkUm93cyhyZW5kZXJDb25maWcsIHtcblx0XHQuLi5sYXlvdXRTdGF0ZSxcblx0XHRuYW1lOiBcImhlYWRlclwiLFxuXHRcdHBvc2l0aW9uOiBcInRvcFwiLFxuXHR9KTtcblxuXHRjb25zdCBmb290ZXIgPSByZW5kZXJDb25maWcuJGZvb3RlclxuXHRcdD8gZ2V0Rml4ZWRSb3dzKHJlbmRlckNvbmZpZywge1xuXHRcdFx0XHQuLi5sYXlvdXRTdGF0ZSxcblx0XHRcdFx0bmFtZTogXCJmb290ZXJcIixcblx0XHRcdFx0cG9zaXRpb246IFwiYm90dG9tXCIsXG5cdFx0ICB9KVxuXHRcdDogbnVsbDtcblxuXHRjb25zdCBsZXNzQnlXaWR0aCA9IHJlbmRlckNvbmZpZy4kdG90YWxXaWR0aCArIEJPUkRFUlMgPCB3cmFwcGVyU2l6ZXMud2lkdGggPyBcImRoeF9ncmlkLWxlc3Mtd2lkdGhcIiA6IFwiXCI7XG5cdGNvbnN0IGxlc3NCeUhlaWdodCA9XG5cdFx0cmVuZGVyQ29uZmlnLiR0b3RhbEhlaWdodCArIEJPUkRFUlMgPCB3cmFwcGVyU2l6ZXMuaGVpZ2h0ID8gXCJkaHhfZ3JpZC1sZXNzLWhlaWdodFwiIDogXCJcIjtcblxuXHQvLyBkaXJ0eTogYnV0IHdvcmsuIENoYW5nZSBjaGVja2luZyBvZiByZW5kZXJpbmcgR3JpZFxuXHRpZiAoIXZtLm5vZGUpIHtcblx0XHRjb25zdCB7IHgsIHkgfSA9IG9iai5nZXRTY3JvbGxTdGF0ZSgpO1xuXHRcdGF3YWl0UmVkcmF3KCkudGhlbigoKSA9PiB7XG5cdFx0XHRvYmouc2Nyb2xsKHgsIHkpO1xuXHRcdH0pO1xuXHR9XG5cblx0Y29uc3QgZ3JpZENvbnRlbnQgPSBlbChcImRpdlwiLCB7fSwgW1xuXHRcdGlzU3RpY2t5ID8gaGVhZGVyIDogbnVsbCxcblx0XHRnZXRHcmlkRGF0YShyZW5kZXJDb25maWcsIHNoaWZ0cyksXG5cdFx0aXNTdGlja3kgPyBmb290ZXIgOiBudWxsLFxuXHRdKTtcblxuXHRyZXR1cm4gZWwoXG5cdFx0XCIuZGh4X2dyaWQuZGh4X3dpZGdldFwiLFxuXHRcdHtcblx0XHRcdGNsYXNzOlxuXHRcdFx0XHQocmVuZGVyQ29uZmlnLmNzcyB8fCBcIlwiKSArXG5cdFx0XHRcdCghaXNTdGlja3kgPyBcIiBkaHhfZ3JpZF9ib3JkZXJcIiA6IFwiXCIpICtcblx0XHRcdFx0KGNvbmZpZy5tdWx0aXNlbGVjdGlvbiA/IFwiIGRoeF9uby1zZWxlY3QtLXBvaW50ZXJcIiA6IFwiXCIpLFxuXHRcdFx0ZGh4X3dpZGdldF9pZDogdWlkLFxuXHRcdFx0ZGh4X3Jvb3RfaWQ6IGNvbmZpZy5yb290UGFyZW50LFxuXHRcdFx0cm9sZTogXCJncmlkXCIsIC8vIFRPRE86IGJldHRlciB0byBzaG93IHJvd2NvdW50IGFuZCBjb2xjb3VudCBoZXJlLCBidXQgaG93IGdldCB0aGVzZSBudW1iZXJzIGhlcmU/XG5cdFx0XHRcImFyaWEtcm93Y291bnRcIjogcmVuZGVyQ29uZmlnLmRhdGEubGVuZ3RoLFxuXHRcdFx0XCJhcmlhLWNvbGNvdW50XCI6IGNvbmZpZy5jb2x1bW5zLmZpbHRlcihjb2wgPT4gIWNvbC5oaWRkZW4pLmxlbmd0aCxcblx0XHR9LFxuXHRcdFtcblx0XHRcdHJlc2l6ZXIoY2hhbmdlV2l0aCA9PiB7XG5cdFx0XHRcdGlmIChpc0F1dG9XaWR0aChvYmouY29uZmlnKSAmJiAhIWNoYW5nZVdpdGgpIHtcblx0XHRcdFx0XHRjb25maWcuJHRvdGFsV2lkdGggPSAwO1xuXHRcdFx0XHRcdGFwcGx5QXV0b1dpZHRoKGNvbmZpZywgd3JhcHBlclNpemVzLCB0cnVlLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb2JqLnBhaW50KCk7XG5cdFx0XHR9KSxcblx0XHRcdGVsKFxuXHRcdFx0XHRcIi5kaHhfZ3JpZC1jb250ZW50XCIsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzdHlsZTogeyAuLi53cmFwcGVyU2l6ZXMgfSxcblx0XHRcdFx0XHRvbmNsaWNrOiBodG1sRXZlbnRzLm9uY2xpY2ssXG5cdFx0XHRcdFx0b25tb3VzZW92ZXI6IGh0bWxFdmVudHMub25tb3VzZW92ZXIsXG5cdFx0XHRcdFx0Y2xhc3M6IGAke2xlc3NCeVdpZHRofSAke2xlc3NCeUhlaWdodH1gLnRyaW0oKSxcblx0XHRcdFx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0aXNTdGlja3kgPyBudWxsIDogaGVhZGVyLFxuXHRcdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFx0XCIuZGh4X2dyaWQtYm9keVwiLFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRcdGhlaWdodDogZ3JpZEJvZHlIZWlnaHQsXG5cdFx0XHRcdFx0XHRcdFx0d2lkdGg6IHdyYXBwZXJTaXplcy53aWR0aCAtIEJPUkRFUlMsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdG9uc2Nyb2xsOiBodG1sRXZlbnRzLm9uc2Nyb2xsLFxuXHRcdFx0XHRcdFx0XHRfcmVmOiBcImdyaWRfYm9keVwiLFxuXHRcdFx0XHRcdFx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0KG9iaiBhcyBhbnkpLnNjcm9sbFZpZXcgJiYgKG9iaiBhcyBhbnkpLnNjcm9sbFZpZXcuY29uZmlnLmVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdD8gb2JqLnNjcm9sbFZpZXcucmVuZGVyKFtncmlkQ29udGVudF0pXG5cdFx0XHRcdFx0XHRcdFx0OiBncmlkQ29udGVudCxcblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGdldEZpeGVkQ29sc0hlYWRlcihyZW5kZXJDb25maWcsIGxheW91dFN0YXRlKSxcblx0XHRcdFx0XHRnZXRGaXhlZENvbHMocmVuZGVyQ29uZmlnLCBsYXlvdXRTdGF0ZSksXG5cdFx0XHRcdFx0aXNTdGlja3kgPyBudWxsIDogZm9vdGVyLFxuXHRcdFx0XHRdXG5cdFx0XHQpLFxuXHRcdF1cblx0KTtcbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvTGF5b3V0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL1Byb0xheW91dFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy90eXBlc1wiO1xuIiwiaW1wb3J0IHsgdWlkLCBpc0RlZmluZWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHsgZWwsIGluamVjdCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IElWaWV3TGlrZSwgVmlldyB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi92aWV3XCI7XG5cbmltcG9ydCB7IElDZWxsLCBJQ2VsbENvbmZpZywgSUxheW91dCwgSUxheW91dENvbmZpZywgTGF5b3V0RXZlbnRzLCBJTGF5b3V0RXZlbnRIYW5kbGVyc01hcCB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRCbG9ja1JhbmdlLCBnZXRNYXJnaW5TaXplIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgSUV2ZW50U3lzdGVtLCBFdmVudFN5c3RlbSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9ldmVudHNcIjtcbmltcG9ydCB7IFNjcm9sbFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vU2Nyb2xsVmlld1wiO1xuXG5leHBvcnQgY2xhc3MgQ2VsbCBleHRlbmRzIFZpZXcgaW1wbGVtZW50cyBJQ2VsbCB7XG5cdHB1YmxpYyBpZDogc3RyaW5nO1xuXHRwdWJsaWMgY29uZmlnOiBJQ2VsbENvbmZpZztcblx0cHVibGljIGV2ZW50czogSUV2ZW50U3lzdGVtPExheW91dEV2ZW50cywgSUxheW91dEV2ZW50SGFuZGxlcnNNYXA+O1xuXHRwdWJsaWMgc2Nyb2xsVmlldzogU2Nyb2xsVmlldztcblxuXHRwcm90ZWN0ZWQgX2hhbmRsZXJzOiB7IFtrZXk6IHN0cmluZ106ICguLi5hcmdzOiBhbnkpID0+IGFueSB9O1xuXHRwcm90ZWN0ZWQgX2Rpc2FibGVkOiBzdHJpbmdbXSA9IFtdO1xuXHRwcm90ZWN0ZWQgX3BhcmVudDogSUxheW91dDtcblx0cHJvdGVjdGVkIF91aTogSVZpZXdMaWtlO1xuXHRwcm90ZWN0ZWQgX3Jlc2l6ZXJIYW5kbGVyczogYW55O1xuXG5cdGNvbnN0cnVjdG9yKHBhcmVudDogc3RyaW5nIHwgSFRNTEVsZW1lbnQgfCBJTGF5b3V0LCBjb25maWc6IElDZWxsQ29uZmlnKSB7XG5cdFx0c3VwZXIocGFyZW50LCBjb25maWcpO1xuXG5cdFx0Y29uc3QgcCA9IHBhcmVudCBhcyBJTGF5b3V0O1xuXHRcdGlmIChwICYmIHAuaXNWaXNpYmxlKSB7XG5cdFx0XHR0aGlzLl9wYXJlbnQgPSBwO1xuXHRcdH1cblx0XHRpZiAodGhpcy5fcGFyZW50ICYmIHRoaXMuX3BhcmVudC5ldmVudHMpIHtcblx0XHRcdHRoaXMuZXZlbnRzID0gdGhpcy5fcGFyZW50LmV2ZW50cztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5ldmVudHMgPSBuZXcgRXZlbnRTeXN0ZW0odGhpcyk7XG5cdFx0fVxuXHRcdHRoaXMuY29uZmlnLmZ1bGwgPVxuXHRcdFx0dGhpcy5jb25maWcuZnVsbCA9PT0gdW5kZWZpbmVkXG5cdFx0XHRcdD8gQm9vbGVhbihcblx0XHRcdFx0XHRcdHRoaXMuY29uZmlnLmhlYWRlciB8fFxuXHRcdFx0XHRcdFx0XHR0aGlzLmNvbmZpZy5jb2xsYXBzYWJsZSB8fFxuXHRcdFx0XHRcdFx0XHR0aGlzLmNvbmZpZy5oZWFkZXJIZWlnaHQgfHxcblx0XHRcdFx0XHRcdFx0dGhpcy5jb25maWcuaGVhZGVySWNvbiB8fFxuXHRcdFx0XHRcdFx0XHR0aGlzLmNvbmZpZy5oZWFkZXJJbWFnZVxuXHRcdFx0XHQgIClcblx0XHRcdFx0OiB0aGlzLmNvbmZpZy5mdWxsO1xuXHRcdHRoaXMuX2luaXRIYW5kbGVycygpO1xuXHRcdHRoaXMuaWQgPSB0aGlzLmNvbmZpZy5pZCB8fCB1aWQoKTtcblx0fVxuXG5cdHBhaW50KCkge1xuXHRcdGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG5cdFx0XHRjb25zdCB2aWV3ID0gdGhpcy5nZXRSb290VmlldygpO1xuXHRcdFx0aWYgKHZpZXcpIHtcblx0XHRcdFx0dmlldy5yZWRyYXcoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3BhcmVudC5wYWludCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpc1Zpc2libGUoKSB7XG5cdFx0Ly8gdG9wIGxldmVsIG5vZGVcblx0XHRpZiAoIXRoaXMuX3BhcmVudCkge1xuXHRcdFx0aWYgKHRoaXMuX2NvbnRhaW5lciAmJiB0aGlzLl9jb250YWluZXIudGFnTmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBCb29sZWFuKHRoaXMuZ2V0Um9vdE5vZGUoKSk7XG5cdFx0fVxuXHRcdC8vIGNoZWNrIGFjdGl2ZSB2aWV3IGluIGNhc2Ugb2YgbXVsdGl2aWV3XG5cdFx0Y29uc3QgYWN0aXZlID0gdGhpcy5fcGFyZW50LmNvbmZpZy5hY3RpdmVWaWV3O1xuXHRcdGlmIChhY3RpdmUgJiYgYWN0aXZlICE9PSB0aGlzLmlkKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdC8vIGNoZWNrIHRoYXQgYWxsIHBhcmVudHMgb2YgdGhlIGNlbGwgYXJlIHZpc2libGUgYXMgd2VsbFxuXHRcdHJldHVybiAhdGhpcy5jb25maWcuaGlkZGVuICYmICghdGhpcy5fcGFyZW50IHx8IHRoaXMuX3BhcmVudC5pc1Zpc2libGUoKSk7XG5cdH1cblx0aGlkZSgpIHtcblx0XHRpZiAoIXRoaXMuZXZlbnRzLmZpcmUoTGF5b3V0RXZlbnRzLmJlZm9yZUhpZGUsIFt0aGlzLmlkXSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5jb25maWcuaGlkZGVuID0gdHJ1ZTtcblx0XHRpZiAodGhpcy5fcGFyZW50ICYmIHRoaXMuX3BhcmVudC5wYWludCkge1xuXHRcdFx0dGhpcy5fcGFyZW50LnBhaW50KCk7XG5cdFx0fVxuXHRcdHRoaXMuZXZlbnRzLmZpcmUoTGF5b3V0RXZlbnRzLmFmdGVySGlkZSwgW3RoaXMuaWRdKTtcblx0fVxuXHRzaG93KCkge1xuXHRcdGlmICghdGhpcy5ldmVudHMuZmlyZShMYXlvdXRFdmVudHMuYmVmb3JlU2hvdywgW3RoaXMuaWRdKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5fcGFyZW50ICYmIHRoaXMuX3BhcmVudC5jb25maWcgJiYgdGhpcy5fcGFyZW50LmNvbmZpZy5hY3RpdmVWaWV3ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuX3BhcmVudC5jb25maWcuYWN0aXZlVmlldyA9IHRoaXMuaWQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY29uZmlnLmhpZGRlbiA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAodGhpcy5fcGFyZW50ICYmICF0aGlzLl9wYXJlbnQuaXNWaXNpYmxlKCkpIHtcblx0XHRcdHRoaXMuX3BhcmVudC5zaG93KCk7XG5cdFx0fVxuXHRcdHRoaXMucGFpbnQoKTtcblx0XHR0aGlzLmV2ZW50cy5maXJlKExheW91dEV2ZW50cy5hZnRlclNob3csIFt0aGlzLmlkXSk7XG5cdH1cblx0ZXhwYW5kKCk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5ldmVudHMuZmlyZShMYXlvdXRFdmVudHMuYmVmb3JlRXhwYW5kLCBbdGhpcy5pZF0pKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuY29uZmlnLmNvbGxhcHNlZCA9IGZhbHNlO1xuXHRcdHRoaXMuZXZlbnRzLmZpcmUoTGF5b3V0RXZlbnRzLmFmdGVyRXhwYW5kLCBbdGhpcy5pZF0pO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRjb2xsYXBzZSgpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMuZXZlbnRzLmZpcmUoTGF5b3V0RXZlbnRzLmJlZm9yZUNvbGxhcHNlLCBbdGhpcy5pZF0pKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuY29uZmlnLmNvbGxhcHNlZCA9IHRydWU7XG5cdFx0dGhpcy5ldmVudHMuZmlyZShMYXlvdXRFdmVudHMuYWZ0ZXJDb2xsYXBzZSwgW3RoaXMuaWRdKTtcblx0XHR0aGlzLnBhaW50KCk7XG5cdH1cblx0dG9nZ2xlKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmNvbmZpZy5jb2xsYXBzZWQpIHtcblx0XHRcdHRoaXMuZXhwYW5kKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY29sbGFwc2UoKTtcblx0XHR9XG5cdH1cblx0Z2V0UGFyZW50KCkge1xuXHRcdHJldHVybiB0aGlzLl9wYXJlbnQ7XG5cdH1cblx0ZGVzdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmV2ZW50cyAmJiB0aGlzLmV2ZW50cy5jbGVhcigpO1xuXG5cdFx0dGhpcy5jb25maWcgPSB0aGlzLmV2ZW50cyA9IHRoaXMuaWQgPSBudWxsO1xuXHRcdHRoaXMuX3BhcmVudCA9IHRoaXMuX2hhbmRsZXJzID0gdGhpcy5fdWlkID0gdGhpcy5fZGlzYWJsZWQgPSB0aGlzLl9yZXNpemVySGFuZGxlcnMgPSBudWxsO1xuXHRcdHRoaXMudW5tb3VudCgpO1xuXHR9XG5cdGdldFdpZGdldCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fdWk7XG5cdH1cblx0Z2V0Q2VsbFZpZXcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3BhcmVudCAmJiB0aGlzLl9wYXJlbnQuZ2V0UmVmcyh0aGlzLl91aWQpO1xuXHR9XG5cdGF0dGFjaChuYW1lOiBhbnksIGNvbmZpZz86IGFueSk6IElWaWV3TGlrZSB7XG5cdFx0dGhpcy5jb25maWcuaHRtbCA9IG51bGw7XG5cdFx0aWYgKHR5cGVvZiBuYW1lID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHR0aGlzLl91aSA9IG5hbWU7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0dGhpcy5fdWkgPSBuZXcgKHdpbmRvdyBhcyBhbnkpLmRoeFtuYW1lXShudWxsLCBjb25maWcpO1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0aWYgKG5hbWUucHJvdG90eXBlIGluc3RhbmNlb2YgVmlldykge1xuXHRcdFx0XHR0aGlzLl91aSA9IG5ldyBuYW1lKG51bGwsIGNvbmZpZyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl91aSA9IHtcblx0XHRcdFx0XHRnZXRSb290VmlldygpIHtcblx0XHRcdFx0XHRcdHJldHVybiBuYW1lKGNvbmZpZyk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5wYWludCgpO1xuXHRcdHJldHVybiB0aGlzLl91aTtcblx0fVxuXHRhdHRhY2hIVE1MKGh0bWw6IHN0cmluZyk6IHZvaWQge1xuXHRcdHRoaXMuY29uZmlnLmh0bWwgPSBodG1sO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHR0b1ZET00obm9kZXM/OiBhbnlbXSkge1xuXHRcdGlmICh0aGlzLmNvbmZpZyA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5jb25maWcgPSB7fTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY29uZmlnLmhpZGRlbikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IHN0eWxlID0gdGhpcy5fY2FsY3VsYXRlU3R5bGUoKTtcblx0XHRjb25zdCBzdHlsZVBhZGRpbmcgPSBpc0RlZmluZWQodGhpcy5jb25maWcucGFkZGluZylcblx0XHRcdD8gIWlzTmFOKE51bWJlcih0aGlzLmNvbmZpZy5wYWRkaW5nKSlcblx0XHRcdFx0PyB7IHBhZGRpbmc6IGAke3RoaXMuY29uZmlnLnBhZGRpbmd9cHhgIH1cblx0XHRcdFx0OiB7IHBhZGRpbmc6IHRoaXMuY29uZmlnLnBhZGRpbmcgfVxuXHRcdFx0OiBcIlwiO1xuXHRcdGNvbnN0IGZ1bGxTdHlsZSA9IHRoaXMuY29uZmlnLmZ1bGwgfHwgdGhpcy5jb25maWcuaHRtbCA/IHN0eWxlIDogeyAuLi5zdHlsZSwgLi4uc3R5bGVQYWRkaW5nIH07XG5cblx0XHRsZXQga2lkcztcblx0XHRpZiAoIXRoaXMuY29uZmlnLmh0bWwpIHtcblx0XHRcdGlmICh0aGlzLl91aSkge1xuXHRcdFx0XHRsZXQgdmlldyA9IHRoaXMuX3VpLmdldFJvb3RWaWV3KCk7XG5cdFx0XHRcdGlmICh2aWV3LnJlbmRlcikge1xuXHRcdFx0XHRcdHZpZXcgPSBpbmplY3Qodmlldyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0a2lkcyA9IFt2aWV3XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtpZHMgPSBub2RlcyB8fCBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCByZXNpemVyID1cblx0XHRcdHRoaXMuY29uZmlnLnJlc2l6YWJsZSAmJiAhdGhpcy5faXNMYXN0Q2VsbCgpICYmICF0aGlzLmNvbmZpZy5jb2xsYXBzZWRcblx0XHRcdFx0PyBlbChcblx0XHRcdFx0XHRcdFwiLmRoeF9sYXlvdXQtcmVzaXplci5cIiArXG5cdFx0XHRcdFx0XHRcdCh0aGlzLl9pc1hEaXJlY3Rpb24oKSA/IFwiZGh4X2xheW91dC1yZXNpemVyLS14XCIgOiBcImRoeF9sYXlvdXQtcmVzaXplci0teVwiKSxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Li4udGhpcy5fcmVzaXplckhhbmRsZXJzLFxuXHRcdFx0XHRcdFx0XHRfcmVmOiBcInJlc2l6ZXJfXCIgKyB0aGlzLl91aWQsXG5cdFx0XHRcdFx0XHRcdHRhYmluZGV4OiAwLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0ZWwoXCJzcGFuLmRoeF9sYXlvdXQtcmVzaXplcl9faWNvblwiLCB7XG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3M6XG5cdFx0XHRcdFx0XHRcdFx0XHRcImR4aSBcIiArXG5cdFx0XHRcdFx0XHRcdFx0XHQodGhpcy5faXNYRGlyZWN0aW9uKCkgPyBcImR4aS1kb3RzLXZlcnRpY2FsXCIgOiBcImR4aS1kb3RzLWhvcml6b250YWxcIiksXG5cdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHQgIClcblx0XHRcdFx0OiBudWxsO1xuXG5cdFx0Y29uc3QgaGFuZGxlcnMgPSB7fTtcblx0XHRpZiAodGhpcy5jb25maWcub24pIHtcblx0XHRcdGZvciAoY29uc3Qga2V5IGluIHRoaXMuY29uZmlnLm9uKSB7XG5cdFx0XHRcdGhhbmRsZXJzW1wib25cIiArIGtleV0gPSB0aGlzLmNvbmZpZy5vbltrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGxldCB0eXBlQ2xhc3MgPSBcIlwiO1xuXHRcdGNvbnN0IGlzUGFyZW50ID0gKHRoaXMuY29uZmlnIGFzIGFueSkuY29scyB8fCAodGhpcy5jb25maWcgYXMgYW55KS5yb3dzO1xuXHRcdGlmICh0aGlzLmNvbmZpZy50eXBlICYmIGlzUGFyZW50KSB7XG5cdFx0XHRzd2l0Y2ggKHRoaXMuY29uZmlnLnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcImxpbmVcIjpcblx0XHRcdFx0XHR0eXBlQ2xhc3MgPSBcIiBkaHhfbGF5b3V0LWxpbmVcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIndpZGVcIjpcblx0XHRcdFx0XHR0eXBlQ2xhc3MgPSBcIiBkaHhfbGF5b3V0LXdpZGVcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInNwYWNlXCI6XG5cdFx0XHRcdFx0dHlwZUNsYXNzID0gXCIgZGh4X2xheW91dC1zcGFjZVwiO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IGNlbGwgPSBlbChcblx0XHRcdFwiZGl2XCIsXG5cdFx0XHR7XG5cdFx0XHRcdF9rZXk6IHRoaXMuX3VpZCxcblx0XHRcdFx0X3JlZjogdGhpcy5fdWlkLFxuXHRcdFx0XHRbXCJhcmlhLWxhYmVsXCJdOiB0aGlzLmNvbmZpZy5pZCA/IFwidGFiLWNvbnRlbnQtXCIgKyB0aGlzLmNvbmZpZy5pZCA6IG51bGwsXG5cdFx0XHRcdC4uLmhhbmRsZXJzLFxuXHRcdFx0XHRjbGFzczpcblx0XHRcdFx0XHR0aGlzLl9nZXRDc3MoZmFsc2UpICtcblx0XHRcdFx0XHQodGhpcy5jb25maWcuY3NzID8gXCIgXCIgKyB0aGlzLmNvbmZpZy5jc3MgOiBcIlwiKSArXG5cdFx0XHRcdFx0KHRoaXMuY29uZmlnLmNvbGxhcHNlZCA/IFwiIGRoeF9sYXlvdXQtY2VsbC0tY29sbGFwc2VkXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0KHRoaXMuY29uZmlnLnJlc2l6YWJsZSA/IFwiIGRoeF9sYXlvdXQtY2VsbC0tcmVzaXphYmxlXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0KHRoaXMuY29uZmlnLnR5cGUgJiYgIXRoaXMuY29uZmlnLmZ1bGwgPyB0eXBlQ2xhc3MgOiBcIlwiKSxcblx0XHRcdFx0c3R5bGU6IGZ1bGxTdHlsZSxcblx0XHRcdH0sXG5cdFx0XHR0aGlzLmNvbmZpZy5mdWxsXG5cdFx0XHRcdD8gW1xuXHRcdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRcdFwiZGl2XCIsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHR0YWJpbmRleDogdGhpcy5jb25maWcuY29sbGFwc2FibGUgPyBcIjBcIiA6IFwiLTFcIixcblx0XHRcdFx0XHRcdFx0XHRyb2xlOiB0aGlzLmNvbmZpZy5jb2xsYXBzYWJsZSA/IFwiYnV0dG9uXCIgOiBudWxsLFxuXHRcdFx0XHRcdFx0XHRcdFwiYXJpYS1sYWJlbFwiOiB0aGlzLmNvbmZpZy5jb2xsYXBzYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0PyBgY2xpY2sgdG8gJHt0aGlzLmNvbmZpZy5jb2xsYXBzZWQgPyBcImV4cGFuZFwiIDogXCJjb2xsYXBzZVwifWBcblx0XHRcdFx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0XHRcdFx0XHRjbGFzczpcblx0XHRcdFx0XHRcdFx0XHRcdFwiZGh4X2xheW91dC1jZWxsLWhlYWRlclwiICtcblx0XHRcdFx0XHRcdFx0XHRcdCh0aGlzLl9pc1hEaXJlY3Rpb24oKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ/IFwiIGRoeF9sYXlvdXQtY2VsbC1oZWFkZXItLWNvbFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDogXCIgZGh4X2xheW91dC1jZWxsLWhlYWRlci0tcm93XCIpICtcblx0XHRcdFx0XHRcdFx0XHRcdCh0aGlzLmNvbmZpZy5jb2xsYXBzYWJsZSA/IFwiIGRoeF9sYXlvdXQtY2VsbC1oZWFkZXItLWNvbGxhcHNlYmxlXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0XHRcdFx0XHQodGhpcy5jb25maWcuY29sbGFwc2VkID8gXCIgZGh4X2xheW91dC1jZWxsLWhlYWRlci0tY29sbGFwc2VkXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0XHRcdFx0XHQoKCh0aGlzLmdldFBhcmVudCgpIHx8ICh7fSBhcyBhbnkpKS5jb25maWcgfHwgKHt9IGFzIGFueSkpLmlzQWNjb3JkaW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdD8gXCIgZGh4X2xheW91dC1jZWxsLWhlYWRlci0tYWNjb3JkaW9uXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0OiBcIlwiKSxcblx0XHRcdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0aGVpZ2h0OiB0aGlzLmNvbmZpZy5oZWFkZXJIZWlnaHQsXG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRvbmNsaWNrOiB0aGlzLl9oYW5kbGVycy50b2dnbGUsXG5cdFx0XHRcdFx0XHRcdFx0b25rZXlkb3duOiB0aGlzLl9oYW5kbGVycy5lbnRlckNvbGxhcHNlLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jb25maWcuaGVhZGVySWNvbiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWwoXCJzcGFuLmRoeF9sYXlvdXQtY2VsbC1oZWFkZXJfX2ljb25cIiwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbGFzczogdGhpcy5jb25maWcuaGVhZGVySWNvbixcblx0XHRcdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuY29uZmlnLmhlYWRlckltYWdlICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbChcIi5kaHhfbGF5b3V0LWNlbGwtaGVhZGVyX19pbWFnZS13cmFwcGVyXCIsIFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWwoXCJpbWdcIiwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNyYzogdGhpcy5jb25maWcuaGVhZGVySW1hZ2UsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M6IFwiZGh4X2xheW91dC1jZWxsLWhlYWRlcl9faW1hZ2VcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XHRcdFx0XHRdKSxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNvbmZpZy5oZWFkZXIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsKFwiaDMuZGh4X2xheW91dC1jZWxsLWhlYWRlcl9fdGl0bGVcIiwgdGhpcy5jb25maWcuaGVhZGVyKSxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNvbmZpZy5jb2xsYXBzYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0PyBlbChcImRpdi5kaHhfbGF5b3V0LWNlbGwtaGVhZGVyX19jb2xsYXBzZS1pY29uXCIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjbGFzczogdGhpcy5fZ2V0Q29sbGFwc2VJY29uKCksXG5cdFx0XHRcdFx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0XHRcdFx0XHQ6IGVsKFwiZGl2LmRoeF9sYXlvdXQtY2VsbC1oZWFkZXJfX2NvbGxhcHNlLWljb25cIiwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzOiBcImR4aSBkeGktZW1wdHlcIixcblx0XHRcdFx0XHRcdFx0XHRcdCAgfSksXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHQhdGhpcy5jb25maWcuY29sbGFwc2VkXG5cdFx0XHRcdFx0XHRcdD8gZWwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcImRpdlwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC4uLnN0eWxlUGFkZGluZyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRoZWlnaHQ6IGBjYWxjKDEwMCUgLSAke3RoaXMuY29uZmlnLmhlYWRlckhlaWdodCB8fCAzN31weClgLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcIi5pbm5lckhUTUxcIjogdGhpcy5jb25maWcuaHRtbCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5fZ2V0Q3NzKHRydWUpICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIiBkaHhfbGF5b3V0LWNlbGwtY29udGVudFwiICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQodGhpcy5jb25maWcudHlwZSA/IHR5cGVDbGFzcyA6IFwiXCIpLFxuXHRcdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcdGtpZHNcblx0XHRcdFx0XHRcdFx0ICApXG5cdFx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0ICBdXG5cdFx0XHRcdDogdGhpcy5jb25maWcuaHRtbCAmJlxuXHRcdFx0XHQgICEoXG5cdFx0XHRcdFx0XHQodGhpcy5jb25maWcgYXMgSUxheW91dENvbmZpZykucm93cyAmJlxuXHRcdFx0XHRcdFx0KHRoaXMuY29uZmlnIGFzIElMYXlvdXRDb25maWcpLmNvbHMgJiZcblx0XHRcdFx0XHRcdCh0aGlzLmNvbmZpZyBhcyBJTGF5b3V0Q29uZmlnKS52aWV3c1xuXHRcdFx0XHQgIClcblx0XHRcdFx0PyBbXG5cdFx0XHRcdFx0XHQhdGhpcy5jb25maWcuY29sbGFwc2VkXG5cdFx0XHRcdFx0XHRcdD8gZWwoXCIuZGh4X2xheW91dC1jZWxsLWNvbnRlbnRcIiwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XCIuaW5uZXJIVE1MXCI6IHRoaXMuY29uZmlnLmh0bWwsXG5cdFx0XHRcdFx0XHRcdFx0XHRzdHlsZTogc3R5bGVQYWRkaW5nLFxuXHRcdFx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0ICBdXG5cdFx0XHRcdDoga2lkc1xuXHRcdCk7XG5cblx0XHRyZXR1cm4gcmVzaXplciA/IFtjZWxsLCByZXNpemVyXSA6IGNlbGw7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2dldENzcyhfY29udGVudD86IGJvb2xlYW4pIHtcblx0XHRyZXR1cm4gXCJkaHhfbGF5b3V0LWNlbGxcIjtcblx0fVxuXHRwcm90ZWN0ZWQgX2luaXRIYW5kbGVycygpIHtcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdGVudGVyQ29sbGFwc2U6IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmIChlLmtleUNvZGUgPT09IDEzKSB7XG5cdFx0XHRcdFx0dGhpcy5faGFuZGxlcnMudG9nZ2xlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRjb2xsYXBzZTogKCkgPT4ge1xuXHRcdFx0XHRpZiAoIXRoaXMuY29uZmlnLmNvbGxhcHNhYmxlKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuY29sbGFwc2UoKTtcblx0XHRcdH0sXG5cdFx0XHRleHBhbmQ6ICgpID0+IHtcblx0XHRcdFx0aWYgKCF0aGlzLmNvbmZpZy5jb2xsYXBzYWJsZSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmV4cGFuZCgpO1xuXHRcdFx0fSxcblx0XHRcdHRvZ2dsZTogKCkgPT4ge1xuXHRcdFx0XHRpZiAoIXRoaXMuY29uZmlnLmNvbGxhcHNhYmxlKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMudG9nZ2xlKCk7XG5cdFx0XHR9LFxuXHRcdH07XG5cdFx0Y29uc3QgYmxvY2tPcHRzID0ge1xuXHRcdFx0bGVmdDogbnVsbCxcblx0XHRcdHRvcDogbnVsbCxcblx0XHRcdGlzQWN0aXZlOiBmYWxzZSxcblx0XHRcdHJhbmdlOiBudWxsLFxuXHRcdFx0eExheW91dDogbnVsbCxcblx0XHRcdG5leHRDZWxsOiBudWxsLFxuXHRcdFx0c2l6ZTogbnVsbCxcblx0XHRcdHJlc2l6ZXJMZW5ndGg6IG51bGwsXG5cdFx0XHRtYXJnaW46IG51bGwsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHJlc2l6ZU1vdmUgPSAoZXZlbnQ6IE1vdXNlRXZlbnQgJiBUb3VjaEV2ZW50KSA9PiB7XG5cdFx0XHRpZiAoIWJsb2NrT3B0cy5pc0FjdGl2ZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBjbGllbnRYID0gZXZlbnQudGFyZ2V0VG91Y2hlcyA/IGV2ZW50LnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCA6IGV2ZW50LmNsaWVudFg7XG5cdFx0XHRjb25zdCBjbGllbnRZID0gZXZlbnQudGFyZ2V0VG91Y2hlcyA/IGV2ZW50LnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGV2ZW50LmNsaWVudFk7XG5cdFx0XHRsZXQgbmV3VmFsdWUgPSBibG9ja09wdHMueExheW91dFxuXHRcdFx0XHQ/IGNsaWVudFggLSBibG9ja09wdHMucmFuZ2UubWluICsgd2luZG93LnBhZ2VYT2Zmc2V0XG5cdFx0XHRcdDogY2xpZW50WSAtIGJsb2NrT3B0cy5yYW5nZS5taW4gKyB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cdFx0XHRjb25zdCBwcm9wID0gYmxvY2tPcHRzLnhMYXlvdXQgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiO1xuXHRcdFx0aWYgKG5ld1ZhbHVlIDwgMCkge1xuXHRcdFx0XHRuZXdWYWx1ZSA9IGJsb2NrT3B0cy5yZXNpemVyTGVuZ3RoIC8gMjtcblx0XHRcdH0gZWxzZSBpZiAobmV3VmFsdWUgPiBibG9ja09wdHMuc2l6ZSkge1xuXHRcdFx0XHRuZXdWYWx1ZSA9IGJsb2NrT3B0cy5zaXplIC0gYmxvY2tPcHRzLnJlc2l6ZXJMZW5ndGg7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuY29uZmlnW3Byb3BdID0gbmV3VmFsdWUgLSBibG9ja09wdHMucmVzaXplckxlbmd0aCAvIDIgKyBcInB4XCI7XG5cdFx0XHRibG9ja09wdHMubmV4dENlbGwuY29uZmlnW3Byb3BdID0gYmxvY2tPcHRzLnNpemUgLSBuZXdWYWx1ZSAtIGJsb2NrT3B0cy5yZXNpemVyTGVuZ3RoIC8gMiArIFwicHhcIjtcblxuXHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdFx0dGhpcy5ldmVudHMuZmlyZShMYXlvdXRFdmVudHMucmVzaXplLCBbdGhpcy5pZF0pO1xuXHRcdH07XG5cblx0XHRjb25zdCByZXNpemVFbmQgPSAoZXZlbnQ6IFRvdWNoRXZlbnQgJiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRibG9ja09wdHMuaXNBY3RpdmUgPSBmYWxzZTtcblx0XHRcdGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImRoeF9uby1zZWxlY3QtLXJlc2l6ZVwiKTtcblx0XHRcdGlmICghZXZlbnQudGFyZ2V0VG91Y2hlcykge1xuXHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCByZXNpemVFbmQpO1xuXHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHJlc2l6ZU1vdmUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHJlc2l6ZUVuZCk7XG5cdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgcmVzaXplTW92ZSk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmV2ZW50cy5maXJlKExheW91dEV2ZW50cy5hZnRlclJlc2l6ZUVuZCwgW3RoaXMuaWRdKTtcblx0XHR9O1xuXG5cdFx0Y29uc3QgcmVzaXplU3RhcnQgPSAoZXZlbnQ6IE1vdXNlRXZlbnQgJiBUb3VjaEV2ZW50KSA9PiB7XG5cdFx0XHRldmVudC50YXJnZXRUb3VjaGVzICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdGlmIChldmVudC53aGljaCA9PT0gMykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoYmxvY2tPcHRzLmlzQWN0aXZlKSB7XG5cdFx0XHRcdHJlc2l6ZUVuZChldmVudCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhpcy5ldmVudHMuZmlyZShMYXlvdXRFdmVudHMuYmVmb3JlUmVzaXplU3RhcnQsIFt0aGlzLmlkXSkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJkaHhfbm8tc2VsZWN0LS1yZXNpemVcIik7XG5cblx0XHRcdGNvbnN0IGJsb2NrID0gdGhpcy5nZXRDZWxsVmlldygpO1xuXHRcdFx0Y29uc3QgbmV4dENlbGwgPSB0aGlzLl9nZXROZXh0Q2VsbCgpO1xuXHRcdFx0Y29uc3QgbmV4dEJsb2NrID0gbmV4dENlbGwuZ2V0Q2VsbFZpZXcoKTtcblx0XHRcdGNvbnN0IHJlc2l6ZXJCbG9jayA9IHRoaXMuX2dldFJlc2l6ZXJWaWV3KCk7XG5cdFx0XHRjb25zdCBibG9ja09mZnNldHMgPSBibG9jay5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdGNvbnN0IHJlc2l6ZXJPZmZzZXRzID0gcmVzaXplckJsb2NrLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0Y29uc3QgbmV4dEJsb2NrT2Zmc2V0cyA9IG5leHRCbG9jay5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0YmxvY2tPcHRzLnhMYXlvdXQgPSB0aGlzLl9pc1hEaXJlY3Rpb24oKTtcblxuXHRcdFx0YmxvY2tPcHRzLmxlZnQgPSBibG9ja09mZnNldHMubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldDtcblx0XHRcdGJsb2NrT3B0cy50b3AgPSBibG9ja09mZnNldHMudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0O1xuXG5cdFx0XHRibG9ja09wdHMubWFyZ2luID0gZ2V0TWFyZ2luU2l6ZSh0aGlzLmdldFBhcmVudCgpLmNvbmZpZywgYmxvY2tPcHRzLnhMYXlvdXQpO1xuXHRcdFx0YmxvY2tPcHRzLnJhbmdlID0gZ2V0QmxvY2tSYW5nZShibG9ja09mZnNldHMsIG5leHRCbG9ja09mZnNldHMsIGJsb2NrT3B0cy54TGF5b3V0KTtcblx0XHRcdGJsb2NrT3B0cy5zaXplID0gYmxvY2tPcHRzLnJhbmdlLm1heCAtIGJsb2NrT3B0cy5yYW5nZS5taW4gLSBibG9ja09wdHMubWFyZ2luO1xuXHRcdFx0YmxvY2tPcHRzLmlzQWN0aXZlID0gdHJ1ZTtcblx0XHRcdGJsb2NrT3B0cy5uZXh0Q2VsbCA9IG5leHRDZWxsO1xuXHRcdFx0YmxvY2tPcHRzLnJlc2l6ZXJMZW5ndGggPSBibG9ja09wdHMueExheW91dCA/IHJlc2l6ZXJPZmZzZXRzLndpZHRoIDogcmVzaXplck9mZnNldHMuaGVpZ2h0O1xuXHRcdH07XG5cblx0XHR0aGlzLl9yZXNpemVySGFuZGxlcnMgPSB7XG5cdFx0XHRvbm1vdXNlZG93bjogZSA9PiB7XG5cdFx0XHRcdHJlc2l6ZVN0YXJ0KGUpO1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCByZXNpemVFbmQpO1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHJlc2l6ZU1vdmUpO1xuXHRcdFx0fSxcblx0XHRcdG9udG91Y2hzdGFydDogZSA9PiB7XG5cdFx0XHRcdHJlc2l6ZVN0YXJ0KGUpO1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgcmVzaXplRW5kKTtcblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCByZXNpemVNb3ZlKTtcblx0XHRcdH0sXG5cdFx0XHRvbmRyYWdzdGFydDogZSA9PiBlLnByZXZlbnREZWZhdWx0KCksXG5cdFx0fTtcblx0fVxuXHRwcm90ZWN0ZWQgX2dldENvbGxhcHNlSWNvbigpIHtcblx0XHRpZiAodGhpcy5faXNYRGlyZWN0aW9uKCkgJiYgdGhpcy5jb25maWcuY29sbGFwc2VkKSB7XG5cdFx0XHRyZXR1cm4gXCJkeGkgZHhpLWNoZXZyb24tcmlnaHRcIjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2lzWERpcmVjdGlvbigpICYmICF0aGlzLmNvbmZpZy5jb2xsYXBzZWQpIHtcblx0XHRcdHJldHVybiBcImR4aSBkeGktY2hldnJvbi1sZWZ0XCI7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5faXNYRGlyZWN0aW9uKCkgJiYgdGhpcy5jb25maWcuY29sbGFwc2VkKSB7XG5cdFx0XHRyZXR1cm4gXCJkeGkgZHhpLWNoZXZyb24tdXBcIjtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLl9pc1hEaXJlY3Rpb24oKSAmJiAhdGhpcy5jb25maWcuY29sbGFwc2VkKSB7XG5cdFx0XHRyZXR1cm4gXCJkeGkgZHhpLWNoZXZyb24tZG93blwiO1xuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgX2lzTGFzdENlbGwoKSB7XG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5fcGFyZW50IGFzIGFueTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fY2VsbHMuaW5kZXhPZih0aGlzKSA9PT0gcGFyZW50Ll9jZWxscy5sZW5ndGggLSAxO1xuXHR9XG5cdHByb3RlY3RlZCBfZ2V0TmV4dENlbGwoKSB7XG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5fcGFyZW50IGFzIGFueTtcblx0XHRjb25zdCBpbmRleCA9IHBhcmVudC5fY2VsbHMuaW5kZXhPZih0aGlzKTtcblx0XHRpZiAocGFyZW50Ll9jZWxsc1tpbmRleCArIDFdLmNvbmZpZy5oaWRkZW4pIHtcblx0XHRcdHJldHVybiBwYXJlbnQuX2NlbGxzW2luZGV4ICsgMV0uX2dldE5leHRDZWxsKCk7XG5cdFx0fSBlbHNlIHJldHVybiBwYXJlbnQuX2NlbGxzW2luZGV4ICsgMV07XG5cdH1cblx0cHJvdGVjdGVkIF9nZXRSZXNpemVyVmlldygpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGFyZW50LmdldFJlZnMoXCJyZXNpemVyX1wiICsgdGhpcy5fdWlkKTtcblx0fVxuXHRwcm90ZWN0ZWQgX2lzWERpcmVjdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGFyZW50ICYmICh0aGlzLl9wYXJlbnQgYXMgYW55KS5feExheW91dDtcblx0fVxuXHRwcm90ZWN0ZWQgX2NhbGN1bGF0ZVN0eWxlKCkge1xuXHRcdGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuXHRcdGlmICghY29uZmlnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IHN0eWxlOiBhbnkgPSB7fTtcblx0XHRsZXQgYXV0b1dpZHRoID0gZmFsc2U7XG5cdFx0bGV0IGF1dG9IZWlnaHQgPSBmYWxzZTtcblxuXHRcdGlmICghaXNOYU4oTnVtYmVyKGNvbmZpZy53aWR0aCkpKSBjb25maWcud2lkdGggPSBjb25maWcud2lkdGggKyBcInB4XCI7XG5cdFx0aWYgKCFpc05hTihOdW1iZXIoY29uZmlnLmhlaWdodCkpKSBjb25maWcuaGVpZ2h0ID0gY29uZmlnLmhlaWdodCArIFwicHhcIjtcblx0XHRpZiAoIWlzTmFOKE51bWJlcihjb25maWcubWluV2lkdGgpKSkgY29uZmlnLm1pbldpZHRoID0gY29uZmlnLm1pbldpZHRoICsgXCJweFwiO1xuXHRcdGlmICghaXNOYU4oTnVtYmVyKGNvbmZpZy5taW5IZWlnaHQpKSkgY29uZmlnLm1pbkhlaWdodCA9IGNvbmZpZy5taW5IZWlnaHQgKyBcInB4XCI7XG5cdFx0aWYgKCFpc05hTihOdW1iZXIoY29uZmlnLm1heFdpZHRoKSkpIGNvbmZpZy5tYXhXaWR0aCA9IGNvbmZpZy5tYXhXaWR0aCArIFwicHhcIjtcblx0XHRpZiAoIWlzTmFOKE51bWJlcihjb25maWcubWF4SGVpZ2h0KSkpIGNvbmZpZy5tYXhIZWlnaHQgPSBjb25maWcubWF4SGVpZ2h0ICsgXCJweFwiO1xuXG5cdFx0aWYgKGNvbmZpZy53aWR0aCA9PT0gXCJjb250ZW50XCIpIGF1dG9XaWR0aCA9IHRydWU7XG5cdFx0aWYgKGNvbmZpZy5oZWlnaHQgPT09IFwiY29udGVudFwiKSBhdXRvSGVpZ2h0ID0gdHJ1ZTtcblxuXHRcdGNvbnN0IHtcblx0XHRcdHdpZHRoLFxuXHRcdFx0aGVpZ2h0LFxuXHRcdFx0Y29scyxcblx0XHRcdHJvd3MsXG5cdFx0XHRtaW5XaWR0aCxcblx0XHRcdG1pbkhlaWdodCxcblx0XHRcdG1heFdpZHRoLFxuXHRcdFx0bWF4SGVpZ2h0LFxuXHRcdFx0Z3Jhdml0eSxcblx0XHRcdGNvbGxhcHNlZCxcblx0XHRcdCRmaXhlZCxcblx0XHR9ID0gY29uZmlnIGFzIGFueTtcblxuXHRcdGxldCBncmF2aXR5TnVtYmVyID0gTWF0aC5zaWduKGdyYXZpdHkpID09PSAtMSA/IDAgOiBncmF2aXR5O1xuXHRcdGlmICh0eXBlb2YgZ3Jhdml0eSA9PT0gXCJib29sZWFuXCIpIHtcblx0XHRcdGdyYXZpdHlOdW1iZXIgPSBncmF2aXR5ID8gMSA6IDA7XG5cdFx0fVxuXHRcdGxldCBmaXhlZCA9IHR5cGVvZiBncmF2aXR5ID09PSBcImJvb2xlYW5cIiA/ICFncmF2aXR5IDogTWF0aC5zaWduKGdyYXZpdHkpID09PSAtMTtcblx0XHRpZiAodGhpcy5faXNYRGlyZWN0aW9uKCkpIHtcblx0XHRcdGlmICgkZml4ZWQgfHwgd2lkdGggfHwgKGdyYXZpdHkgPT09IHVuZGVmaW5lZCAmJiAobWluV2lkdGggfHwgbWF4V2lkdGgpKSkge1xuXHRcdFx0XHRmaXhlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICgkZml4ZWQgfHwgaGVpZ2h0IHx8IChncmF2aXR5ID09PSB1bmRlZmluZWQgJiYgKG1pbkhlaWdodCB8fCBtYXhIZWlnaHQpKSkge1xuXHRcdFx0XHRmaXhlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IGdyb3cgPSBmaXhlZCA/IDAgOiBncmF2aXR5TnVtYmVyIHx8IDE7XG5cdFx0bGV0IGZpbGxTcGFjZTogc3RyaW5nIHwgYm9vbGVhbiA9IHRoaXMuX2lzWERpcmVjdGlvbigpID8gXCJ4XCIgOiBcInlcIjtcblxuXHRcdGlmIChtaW5XaWR0aCAhPT0gdW5kZWZpbmVkKSBzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdGlmIChtaW5IZWlnaHQgIT09IHVuZGVmaW5lZCkgc3R5bGUubWluSGVpZ2h0ID0gbWluSGVpZ2h0O1xuXHRcdGlmIChtYXhXaWR0aCAhPT0gdW5kZWZpbmVkKSBzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdGlmIChtYXhIZWlnaHQgIT09IHVuZGVmaW5lZCkgc3R5bGUubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuXG5cdFx0aWYgKHRoaXMuX3BhcmVudCA9PT0gdW5kZWZpbmVkICYmICFmaWxsU3BhY2UgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZmlsbFNwYWNlID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAod2lkdGggIT09IHVuZGVmaW5lZCAmJiB3aWR0aCAhPT0gXCJjb250ZW50XCIpIHtcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChmaWxsU3BhY2UgPT09IHRydWUpIHtcblx0XHRcdFx0c3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0XHRcdH0gZWxzZSBpZiAoZmlsbFNwYWNlID09PSBcInhcIikge1xuXHRcdFx0XHRpZiAoYXV0b1dpZHRoKSB7XG5cdFx0XHRcdFx0c3R5bGUuZmxleCA9IFwiMCAwIGF1dG9cIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBpc0F1dG8gPSB0aGlzLl9pc1hEaXJlY3Rpb24oKSA/IFwiMXB4XCIgOiBcImF1dG9cIjtcblx0XHRcdFx0XHRzdHlsZS5mbGV4ID0gYCR7Z3Jvd30gJHtjb2xzIHx8IHJvd3MgPyBgMCAke2lzQXV0b31gIDogYDEgYXV0b2B9YDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChoZWlnaHQgIT09IHVuZGVmaW5lZCAmJiBoZWlnaHQgIT09IFwiY29udGVudFwiKSB7XG5cdFx0XHRzdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChmaWxsU3BhY2UgPT09IHRydWUpIHtcblx0XHRcdFx0c3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdFx0XHR9IGVsc2UgaWYgKGZpbGxTcGFjZSA9PT0gXCJ5XCIpIHtcblx0XHRcdFx0aWYgKGF1dG9IZWlnaHQpIHtcblx0XHRcdFx0XHRzdHlsZS5mbGV4ID0gXCIwIDAgYXV0b1wiO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IGlzQXV0byA9ICF0aGlzLl9pc1hEaXJlY3Rpb24oKSA/IFwiMXB4XCIgOiBcImF1dG9cIjtcblx0XHRcdFx0XHRzdHlsZS5mbGV4ID0gYCR7Z3Jvd30gJHtjb2xzIHx8IHJvd3MgPyBgMCAke2lzQXV0b31gIDogYDEgYXV0b2B9YDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChmaWxsU3BhY2UgPT09IHRydWUgJiYgY29uZmlnLndpZHRoID09PSB1bmRlZmluZWQgJiYgY29uZmlnLmhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRzdHlsZS5mbGV4ID0gYCR7Z3Jvd30gMSBhdXRvYDtcblx0XHR9XG5cblx0XHRpZiAoY29sbGFwc2VkKSB7XG5cdFx0XHRpZiAodGhpcy5faXNYRGlyZWN0aW9uKCkpIHtcblx0XHRcdFx0c3R5bGUud2lkdGggPSBcImF1dG9cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN0eWxlLmhlaWdodCA9IFwiYXV0b1wiO1xuXHRcdFx0fVxuXHRcdFx0c3R5bGUuZmxleCA9IGAwIDAgYXV0b2A7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0eWxlO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBJQ2VsbCwgSUNlbGxDb25maWcsIElMYXlvdXQsIElMYXlvdXRDb25maWcsIExheW91dEV2ZW50cywgTGF5b3V0Q2FsbGJhY2sgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgQ2VsbCB9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcblxuZXhwb3J0IGNsYXNzIExheW91dCBleHRlbmRzIENlbGwgaW1wbGVtZW50cyBJTGF5b3V0IHtcblx0cHVibGljIGNvbmZpZzogSUxheW91dENvbmZpZztcblxuXHRwcm90ZWN0ZWQgX2FsbDtcblx0cHJvdGVjdGVkIF9jZWxsczogSUNlbGxbXTtcblx0cHJvdGVjdGVkIF9yb290OiBJTGF5b3V0O1xuXG5cdHByaXZhdGUgX3hMYXlvdXQ6IGJvb2xlYW47XG5cdHByaXZhdGUgX2lzVmlld0xheW91dDogYm9vbGVhbjtcblxuXHRjb25zdHJ1Y3RvcihwYXJlbnQ6IGFueSwgY29uZmlnOiBJTGF5b3V0Q29uZmlnKSB7XG5cdFx0c3VwZXIocGFyZW50LCBjb25maWcpO1xuXHRcdC8vIHJvb3QgbGF5b3V0XG5cdFx0dGhpcy5fcm9vdCA9IHRoaXMuY29uZmlnLnBhcmVudCB8fCB0aGlzO1xuXHRcdHRoaXMuX2FsbCA9IHt9O1xuXHRcdHRoaXMuX3BhcnNlQ29uZmlnKCk7XG5cblx0XHRpZiAodGhpcy5jb25maWcuYWN0aXZlVGFiKSB7XG5cdFx0XHR0aGlzLmNvbmZpZy5hY3RpdmVWaWV3ID0gdGhpcy5jb25maWcuYWN0aXZlVGFiO1xuXHRcdH1cblx0XHQvLyBOZWVkIHJlcGxhY2UgdG8gdGFiYmFyXG5cdFx0aWYgKHRoaXMuY29uZmlnLnZpZXdzKSB7XG5cdFx0XHR0aGlzLmNvbmZpZy5hY3RpdmVWaWV3ID0gdGhpcy5jb25maWcuYWN0aXZlVmlldyB8fCB0aGlzLl9jZWxsc1swXS5pZDtcblx0XHRcdHRoaXMuX2lzVmlld0xheW91dCA9IHRydWU7XG5cdFx0fVxuXHRcdGlmICghY29uZmlnLnBhcmVudCkge1xuXHRcdFx0Y29uc3QgdmlldyA9IGNyZWF0ZSh7IHJlbmRlcjogKCkgPT4gdGhpcy50b1ZET00oKSB9LCB0aGlzKTtcblx0XHRcdHRoaXMubW91bnQocGFyZW50LCB2aWV3KTtcblx0XHR9XG5cdH1cblxuXHRkZXN0cnVjdG9yKCk6IHZvaWQge1xuXHRcdGZvciAoY29uc3Qga2V5IGluIHRoaXMuX2FsbCkge1xuXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9hbGwsIGtleSkpIHtcblx0XHRcdFx0Y29uc3QgY2VsbCA9IHRoaXMuX2FsbFtrZXldO1xuXHRcdFx0XHRpZiAoY2VsbC5nZXRXaWRnZXQoKSAmJiB0eXBlb2YgY2VsbC5nZXRXaWRnZXQoKS5kZXN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRjZWxsLmdldFdpZGdldCgpLmRlc3RydWN0b3IoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjZWxsLmRlc3RydWN0b3IoKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5jb25maWcgPSB0aGlzLl9jZWxscyA9IHRoaXMuX3Jvb3QgPSB0aGlzLl94TGF5b3V0ID0gdGhpcy5faXNWaWV3TGF5b3V0ID0gbnVsbDtcblx0XHR0aGlzLl9hbGwgPSB7fTtcblx0XHR0aGlzLnVubW91bnQoKTtcblx0fVxuXG5cdHRvVkRPTSgpIHtcblx0XHRpZiAodGhpcy5faXNWaWV3TGF5b3V0KSB7XG5cdFx0XHRjb25zdCByb290cyA9IFt0aGlzLmdldENlbGwodGhpcy5jb25maWcuYWN0aXZlVmlldykudG9WRE9NKCldO1xuXHRcdFx0cmV0dXJuIHN1cGVyLnRvVkRPTShyb290cyk7XG5cdFx0fVxuXHRcdGxldCBub2RlcyA9IFtdO1xuXHRcdHRoaXMuX2luaGVyaXRUeXBlcygpO1xuXHRcdHRoaXMuX2NlbGxzLmZvckVhY2goY2VsbCA9PiB7XG5cdFx0XHRjb25zdCBub2RlID0gY2VsbC50b1ZET00oKTtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG5cdFx0XHRcdG5vZGVzID0gbm9kZXMuY29uY2F0KG5vZGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bm9kZXMucHVzaChub2RlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gc3VwZXIudG9WRE9NKG5vZGVzKTtcblx0fVxuXHRyZW1vdmVDZWxsKGlkOiBzdHJpbmcpIHtcblx0XHRpZiAoIXRoaXMuZXZlbnRzLmZpcmUoTGF5b3V0RXZlbnRzLmJlZm9yZVJlbW92ZSwgW2lkXSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3Qgcm9vdCA9IHRoaXMuY29uZmlnLnBhcmVudCB8fCB0aGlzO1xuXHRcdGlmIChyb290ICE9PSB0aGlzKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZW1vdmVDZWxsKGlkKTtcblx0XHR9XG5cdFx0Ly8gdGhpcyA9PT0gcm9vdCBsYXlvdXRcblx0XHRjb25zdCB2aWV3ID0gdGhpcy5nZXRDZWxsKGlkKTtcblx0XHRpZiAodmlldykge1xuXHRcdFx0Y29uc3QgcGFyZW50ID0gdmlldy5nZXRQYXJlbnQoKTtcblx0XHRcdGRlbGV0ZSB0aGlzLl9hbGxbaWRdO1xuXHRcdFx0cGFyZW50Ll9jZWxscyA9IHBhcmVudC5fY2VsbHMuZmlsdGVyKChjZWxsOiBJQ2VsbCkgPT4gY2VsbC5pZCAhPSBpZCk7XG5cdFx0XHRwYXJlbnQucGFpbnQoKTtcblx0XHR9XG5cdFx0dGhpcy5ldmVudHMuZmlyZShMYXlvdXRFdmVudHMuYWZ0ZXJSZW1vdmUsIFtpZF0pO1xuXHR9XG5cdGFkZENlbGwoY29uZmlnOiBJQ2VsbENvbmZpZywgaW5kZXggPSAtMSkge1xuXHRcdGlmICghdGhpcy5ldmVudHMuZmlyZShMYXlvdXRFdmVudHMuYmVmb3JlQWRkLCBbY29uZmlnLmlkXSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgdmlldyA9IHRoaXMuX2NyZWF0ZUNlbGwoY29uZmlnKTtcblx0XHRpZiAoaW5kZXggPCAwKSB7XG5cdFx0XHRpbmRleCA9IHRoaXMuX2NlbGxzLmxlbmd0aCArIGluZGV4ICsgMTtcblx0XHR9XG5cdFx0dGhpcy5fY2VsbHMuc3BsaWNlKGluZGV4LCAwLCB2aWV3KTtcblx0XHR0aGlzLnBhaW50KCk7XG5cdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKExheW91dEV2ZW50cy5hZnRlckFkZCwgW2NvbmZpZy5pZF0pKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG5cdGdldElkKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdGluZGV4ID0gdGhpcy5fY2VsbHMubGVuZ3RoICsgaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9jZWxsc1tpbmRleF0gPyB0aGlzLl9jZWxsc1tpbmRleF0uaWQgOiB1bmRlZmluZWQ7XG5cdH1cblx0Z2V0UmVmcyhuYW1lOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gdGhpcy5fcm9vdC5nZXRSb290VmlldygpLnJlZnNbbmFtZV07XG5cdH1cblx0Z2V0Q2VsbChpZDogc3RyaW5nKSB7XG5cdFx0cmV0dXJuICh0aGlzLl9yb290IGFzIGFueSkuX2FsbFtpZF07XG5cdH1cblx0Zm9yRWFjaChjYWxsYmFjazogTGF5b3V0Q2FsbGJhY2ssIHBhcmVudD86IHN0cmluZywgbGV2ZWwgPSBJbmZpbml0eSk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5faGF2ZUNlbGxzKHBhcmVudCkgfHwgbGV2ZWwgPCAxKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGxldCBhcnJheTtcblx0XHRpZiAocGFyZW50KSB7XG5cdFx0XHRhcnJheSA9ICh0aGlzLl9yb290IGFzIGFueSkuX2FsbFtwYXJlbnRdLl9jZWxscztcblx0XHR9IGVsc2Uge1xuXHRcdFx0YXJyYXkgPSAodGhpcy5fcm9vdCBhcyBhbnkpLl9jZWxscztcblx0XHR9XG5cdFx0Zm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5Lmxlbmd0aDsgaW5kZXgrKykge1xuXHRcdFx0Y29uc3QgY2VsbCA9IGFycmF5W2luZGV4XTtcblx0XHRcdGNhbGxiYWNrLmNhbGwodGhpcywgY2VsbCwgaW5kZXgsIGFycmF5KTtcblx0XHRcdGlmICh0aGlzLl9oYXZlQ2VsbHMoY2VsbC5pZCkpIHtcblx0XHRcdFx0Y2VsbC5mb3JFYWNoKGNhbGxiYWNrLCBjZWxsLmlkLCAtLWxldmVsKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRjZWxsKGlkOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRDZWxsKGlkKTtcblx0fVxuXG5cdHByb3RlY3RlZCBfZ2V0Q3NzKGNvbnRlbnQ/OiBib29sZWFuKSB7XG5cdFx0Y29uc3QgbGF5b3V0Q3NzID0gdGhpcy5feExheW91dCA/IFwiZGh4X2xheW91dC1jb2x1bW5zXCIgOiBcImRoeF9sYXlvdXQtcm93c1wiO1xuXHRcdGNvbnN0IGRpcmVjdGlvbkNzcyA9IHRoaXMuY29uZmlnLmFsaWduID8gXCIgXCIgKyBsYXlvdXRDc3MgKyBcIi0tXCIgKyB0aGlzLmNvbmZpZy5hbGlnbiA6IFwiXCI7XG5cdFx0aWYgKGNvbnRlbnQpIHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdGxheW91dENzcyArXG5cdFx0XHRcdFwiIGRoeF9sYXlvdXQtY2VsbFwiICtcblx0XHRcdFx0KHRoaXMuY29uZmlnLmFsaWduID8gXCIgZGh4X2xheW91dC1jZWxsLS1cIiArIHRoaXMuY29uZmlnLmFsaWduIDogXCJcIilcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGNlbGxDc3MgPSB0aGlzLmNvbmZpZy5wYXJlbnQgPyBzdXBlci5fZ2V0Q3NzKCkgOiBcImRoeF93aWRnZXQgZGh4X2xheW91dFwiO1xuXHRcdFx0Y29uc3QgZnVsbE1vZGVDc3MgPSB0aGlzLmNvbmZpZy5wYXJlbnQgPyBcIlwiIDogXCIgZGh4X2xheW91dC1jZWxsXCI7XG5cdFx0XHRyZXR1cm4gY2VsbENzcyArICh0aGlzLmNvbmZpZy5mdWxsID8gZnVsbE1vZGVDc3MgOiBcIiBcIiArIGxheW91dENzcykgKyBkaXJlY3Rpb25Dc3M7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX3BhcnNlQ29uZmlnKCkge1xuXHRcdGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuXHRcdGNvbnN0IGNlbGxzID0gY29uZmlnLnJvd3MgfHwgY29uZmlnLmNvbHMgfHwgY29uZmlnLnZpZXdzIHx8IFtdO1xuXG5cdFx0dGhpcy5feExheW91dCA9ICFjb25maWcucm93cztcblx0XHR0aGlzLl9jZWxscyA9IGNlbGxzLm1hcChhID0+IHRoaXMuX2NyZWF0ZUNlbGwoYSkpO1xuXHR9XG5cdHByb3RlY3RlZCBfY3JlYXRlQ2VsbChjZWxsOiBJTGF5b3V0Q29uZmlnKTogSUNlbGwge1xuXHRcdGxldCB2aWV3OiBJQ2VsbDtcblx0XHRpZiAoY2VsbC5yb3dzIHx8IGNlbGwuY29scyB8fCBjZWxsLnZpZXdzKSB7XG5cdFx0XHRjZWxsLnBhcmVudCA9IHRoaXMuX3Jvb3Q7XG5cdFx0XHR2aWV3ID0gbmV3IExheW91dCh0aGlzLCBjZWxsKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmlldyA9IG5ldyBDZWxsKHRoaXMsIGNlbGwpO1xuXHRcdH1cblxuXHRcdC8vIEZJeE1FXG5cdFx0KHRoaXMuX3Jvb3QgYXMgYW55KS5fYWxsW3ZpZXcuaWRdID0gdmlldztcblx0XHRpZiAoY2VsbC5pbml0KSB7XG5cdFx0XHRjZWxsLmluaXQodmlldywgY2VsbCk7XG5cdFx0fVxuXHRcdHJldHVybiB2aWV3O1xuXHR9XG5cdHByaXZhdGUgX2hhdmVDZWxscyhpZD86IHN0cmluZykge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0Y29uc3QgYXJyYXkgPSAodGhpcy5fcm9vdCBhcyBhbnkpLl9hbGxbaWRdO1xuXHRcdFx0cmV0dXJuIGFycmF5Ll9jZWxscyAmJiBhcnJheS5fY2VsbHMubGVuZ3RoID4gMDtcblx0XHR9XG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2FsbCkubGVuZ3RoID4gMDtcblx0fVxuXG5cdHByaXZhdGUgX2luaGVyaXRUeXBlcyhvYmo6IElDZWxsW10gfCBJQ2VsbCA9IHRoaXMuX2NlbGxzKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuXHRcdFx0b2JqLmZvckVhY2goY2VsbCA9PiB0aGlzLl9pbmhlcml0VHlwZXMoY2VsbCkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBjZWxsQ29uZmlnID0gb2JqLmNvbmZpZyBhcyBJTGF5b3V0Q29uZmlnO1xuXHRcdFx0aWYgKGNlbGxDb25maWcucm93cyB8fCBjZWxsQ29uZmlnLmNvbHMpIHtcblx0XHRcdFx0Y29uc3Qgdmlld1BhcmVudCA9IG9iai5nZXRQYXJlbnQoKTtcblx0XHRcdFx0aWYgKCFjZWxsQ29uZmlnLnR5cGUgJiYgdmlld1BhcmVudCkge1xuXHRcdFx0XHRcdGlmICh2aWV3UGFyZW50LmNvbmZpZy50eXBlKSB7XG5cdFx0XHRcdFx0XHRjZWxsQ29uZmlnLnR5cGUgPSB2aWV3UGFyZW50LmNvbmZpZy50eXBlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9pbmhlcml0VHlwZXModmlld1BhcmVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgeyBpc0RlZmluZWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHsgaW5qZWN0LCBlbCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IFNjcm9sbFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vU2Nyb2xsVmlld1wiO1xuaW1wb3J0IHsgQ2VsbCB9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7IElMYXlvdXQsIElDZWxsQ29uZmlnLCBJTGF5b3V0Q29uZmlnLCBJUHJvQ2VsbCB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9DZWxsIGV4dGVuZHMgQ2VsbCBpbXBsZW1lbnRzIElQcm9DZWxsIHtcblx0cHVibGljIHNjcm9sbFZpZXc6IFNjcm9sbFZpZXc7XG5cblx0Y29uc3RydWN0b3IocGFyZW50OiBzdHJpbmcgfCBIVE1MRWxlbWVudCB8IElMYXlvdXQsIGNvbmZpZzogSUNlbGxDb25maWcpIHtcblx0XHRzdXBlcihwYXJlbnQsIGNvbmZpZyk7XG5cblx0XHR0aGlzLnNjcm9sbFZpZXcgPSBuZXcgU2Nyb2xsVmlldygoKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZ2V0Rmlyc3RSb290VmlldygpO1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBfZ2V0Rmlyc3RSb290VmlldyhzZWxmID0gdGhpcykge1xuXHRcdHJldHVybiBzZWxmLmdldFBhcmVudCgpICYmIHNlbGYuZ2V0UGFyZW50KCkuZ2V0Um9vdFZpZXcoKVxuXHRcdFx0PyBzZWxmLmdldFBhcmVudCgpLmdldFJvb3RWaWV3KClcblx0XHRcdDogdGhpcy5fZ2V0Rmlyc3RSb290Vmlldygoc2VsZiBhcyBhbnkpLmdldFBhcmVudCgpKTtcblx0fVxuXG5cdHRvVkRPTShub2Rlcz86IGFueVtdKSB7XG5cdFx0aWYgKHRoaXMuY29uZmlnID09PSBudWxsKSB7XG5cdFx0XHR0aGlzLmNvbmZpZyA9IHt9O1xuXHRcdH1cblx0XHRpZiAodGhpcy5jb25maWcuaGlkZGVuKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3R5bGUgPSB0aGlzLl9jYWxjdWxhdGVTdHlsZSgpO1xuXHRcdGNvbnN0IHN0eWxlUGFkZGluZyA9IGlzRGVmaW5lZCh0aGlzLmNvbmZpZy5wYWRkaW5nKVxuXHRcdFx0PyAhaXNOYU4oTnVtYmVyKHRoaXMuY29uZmlnLnBhZGRpbmcpKVxuXHRcdFx0XHQ/IHsgcGFkZGluZzogYCR7dGhpcy5jb25maWcucGFkZGluZ31weGAgfVxuXHRcdFx0XHQ6IHsgcGFkZGluZzogdGhpcy5jb25maWcucGFkZGluZyB9XG5cdFx0XHQ6IFwiXCI7XG5cdFx0Y29uc3QgZnVsbFN0eWxlID0gdGhpcy5jb25maWcuZnVsbCB8fCB0aGlzLmNvbmZpZy5odG1sID8gc3R5bGUgOiB7IC4uLnN0eWxlLCAuLi5zdHlsZVBhZGRpbmcgfTtcblxuXHRcdGxldCBraWRzO1xuXHRcdGlmICghdGhpcy5jb25maWcuaHRtbCkge1xuXHRcdFx0aWYgKHRoaXMuX3VpKSB7XG5cdFx0XHRcdGxldCB2aWV3ID0gdGhpcy5fdWkuZ2V0Um9vdFZpZXcoKTtcblx0XHRcdFx0aWYgKHZpZXcucmVuZGVyKSB7XG5cdFx0XHRcdFx0dmlldyA9IGluamVjdCh2aWV3KTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBraWRzID0gW3ZpZXddO1xuXHRcdFx0XHRraWRzID0gdmlldyA/IFt0aGlzLnNjcm9sbFZpZXcucmVuZGVyKHZpZXcpXSA6IHZpZXcgfHwgbnVsbDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIGtpZHMgPSBub2RlcyB8fCBudWxsO1xuXHRcdFx0XHRraWRzID0gbm9kZXMgPyB0aGlzLnNjcm9sbFZpZXcucmVuZGVyKFtub2Rlc10pIDogbm9kZXMgfHwgbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgcmVzaXplciA9XG5cdFx0XHR0aGlzLmNvbmZpZy5yZXNpemFibGUgJiYgIXRoaXMuX2lzTGFzdENlbGwoKSAmJiAhdGhpcy5jb25maWcuY29sbGFwc2VkXG5cdFx0XHRcdD8gZWwoXG5cdFx0XHRcdFx0XHRcIi5kaHhfbGF5b3V0LXJlc2l6ZXIuXCIgK1xuXHRcdFx0XHRcdFx0XHQodGhpcy5faXNYRGlyZWN0aW9uKCkgPyBcImRoeF9sYXlvdXQtcmVzaXplci0teFwiIDogXCJkaHhfbGF5b3V0LXJlc2l6ZXItLXlcIiksXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdC4uLnRoaXMuX3Jlc2l6ZXJIYW5kbGVycyxcblx0XHRcdFx0XHRcdFx0X3JlZjogXCJyZXNpemVyX1wiICsgdGhpcy5fdWlkLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdFx0ZWwoXCJzcGFuLmRoeF9sYXlvdXQtcmVzaXplcl9faWNvblwiLCB7XG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3M6XG5cdFx0XHRcdFx0XHRcdFx0XHRcImR4aSBcIiArXG5cdFx0XHRcdFx0XHRcdFx0XHQodGhpcy5faXNYRGlyZWN0aW9uKCkgPyBcImR4aS1kb3RzLXZlcnRpY2FsXCIgOiBcImR4aS1kb3RzLWhvcml6b250YWxcIiksXG5cdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHQgIClcblx0XHRcdFx0OiBudWxsO1xuXG5cdFx0Y29uc3QgaGFuZGxlcnMgPSB7fTtcblx0XHRpZiAodGhpcy5jb25maWcub24pIHtcblx0XHRcdGZvciAoY29uc3Qga2V5IGluIHRoaXMuY29uZmlnLm9uKSB7XG5cdFx0XHRcdGhhbmRsZXJzW1wib25cIiArIGtleV0gPSB0aGlzLmNvbmZpZy5vbltrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGxldCB0eXBlQ2xhc3MgPSBcIlwiO1xuXHRcdGNvbnN0IGlzUGFyZW50ID0gKHRoaXMuY29uZmlnIGFzIGFueSkuY29scyB8fCAodGhpcy5jb25maWcgYXMgYW55KS5yb3dzO1xuXHRcdGlmICh0aGlzLmNvbmZpZy50eXBlICYmIGlzUGFyZW50KSB7XG5cdFx0XHRzd2l0Y2ggKHRoaXMuY29uZmlnLnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcImxpbmVcIjpcblx0XHRcdFx0XHR0eXBlQ2xhc3MgPSBcIiBkaHhfbGF5b3V0LWxpbmVcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIndpZGVcIjpcblx0XHRcdFx0XHR0eXBlQ2xhc3MgPSBcIiBkaHhfbGF5b3V0LXdpZGVcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInNwYWNlXCI6XG5cdFx0XHRcdFx0dHlwZUNsYXNzID0gXCIgZGh4X2xheW91dC1zcGFjZVwiO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IGh0bWxDb250ZW50ID0gZWwoXCIuZGh4X2xheW91dC1jZWxsLWNvbnRlbnRcIiwge1xuXHRcdFx0XCIuaW5uZXJIVE1MXCI6IHRoaXMuY29uZmlnLmh0bWwsXG5cdFx0XHRfa2V5OiBgJHt0aGlzLl91aWR9X2h0bWxgLFxuXHRcdFx0c3R5bGU6IHN0eWxlUGFkZGluZyxcblx0XHR9KTtcblxuXHRcdGNvbnN0IGNlbGwgPSBlbChcblx0XHRcdFwiZGl2XCIsXG5cdFx0XHR7XG5cdFx0XHRcdF9rZXk6IHRoaXMuX3VpZCxcblx0XHRcdFx0X3JlZjogdGhpcy5fdWlkLFxuXHRcdFx0XHRbXCJhcmlhLWxhYmVsXCJdOiB0aGlzLmNvbmZpZy5pZCA/IFwidGFiLWNvbnRlbnQtXCIgKyB0aGlzLmNvbmZpZy5pZCA6IG51bGwsXG5cdFx0XHRcdC4uLmhhbmRsZXJzLFxuXHRcdFx0XHRjbGFzczpcblx0XHRcdFx0XHR0aGlzLl9nZXRDc3MoZmFsc2UpICtcblx0XHRcdFx0XHQodGhpcy5jb25maWcuY3NzID8gXCIgXCIgKyB0aGlzLmNvbmZpZy5jc3MgOiBcIlwiKSArXG5cdFx0XHRcdFx0KHRoaXMuY29uZmlnLmNvbGxhcHNlZCA/IFwiIGRoeF9sYXlvdXQtY2VsbC0tY29sbGFwc2VkXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0KHRoaXMuY29uZmlnLnJlc2l6YWJsZSA/IFwiIGRoeF9sYXlvdXQtY2VsbC0tcmVzaXphYmxlXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0KHRoaXMuY29uZmlnLnR5cGUgJiYgIXRoaXMuY29uZmlnLmZ1bGwgPyB0eXBlQ2xhc3MgOiBcIlwiKSxcblx0XHRcdFx0c3R5bGU6IGZ1bGxTdHlsZSxcblx0XHRcdH0sXG5cdFx0XHR0aGlzLmNvbmZpZy5mdWxsXG5cdFx0XHRcdD8gW1xuXHRcdFx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XHRcdFwiZGl2XCIsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHR0YWJpbmRleDogdGhpcy5jb25maWcuY29sbGFwc2FibGUgPyBcIjBcIiA6IFwiLTFcIixcblx0XHRcdFx0XHRcdFx0XHRjbGFzczpcblx0XHRcdFx0XHRcdFx0XHRcdFwiZGh4X2xheW91dC1jZWxsLWhlYWRlclwiICtcblx0XHRcdFx0XHRcdFx0XHRcdCh0aGlzLl9pc1hEaXJlY3Rpb24oKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ/IFwiIGRoeF9sYXlvdXQtY2VsbC1oZWFkZXItLWNvbFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDogXCIgZGh4X2xheW91dC1jZWxsLWhlYWRlci0tcm93XCIpICtcblx0XHRcdFx0XHRcdFx0XHRcdCh0aGlzLmNvbmZpZy5jb2xsYXBzYWJsZSA/IFwiIGRoeF9sYXlvdXQtY2VsbC1oZWFkZXItLWNvbGxhcHNlYmxlXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0XHRcdFx0XHQodGhpcy5jb25maWcuY29sbGFwc2VkID8gXCIgZGh4X2xheW91dC1jZWxsLWhlYWRlci0tY29sbGFwc2VkXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0XHRcdFx0XHQoKCh0aGlzLmdldFBhcmVudCgpIHx8ICh7fSBhcyBhbnkpKS5jb25maWcgfHwgKHt9IGFzIGFueSkpLmlzQWNjb3JkaW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdD8gXCIgZGh4X2xheW91dC1jZWxsLWhlYWRlci0tYWNjb3JkaW9uXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0OiBcIlwiKSxcblx0XHRcdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0aGVpZ2h0OiB0aGlzLmNvbmZpZy5oZWFkZXJIZWlnaHQsXG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRvbmNsaWNrOiB0aGlzLl9oYW5kbGVycy50b2dnbGUsXG5cdFx0XHRcdFx0XHRcdFx0b25rZXlkb3duOiB0aGlzLl9oYW5kbGVycy5lbnRlckNvbGxhcHNlLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jb25maWcuaGVhZGVySWNvbiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWwoXCJzcGFuLmRoeF9sYXlvdXQtY2VsbC1oZWFkZXJfX2ljb25cIiwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbGFzczogdGhpcy5jb25maWcuaGVhZGVySWNvbixcblx0XHRcdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuY29uZmlnLmhlYWRlckltYWdlICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbChcIi5kaHhfbGF5b3V0LWNlbGwtaGVhZGVyX19pbWFnZS13cmFwcGVyXCIsIFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWwoXCJpbWdcIiwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNyYzogdGhpcy5jb25maWcuaGVhZGVySW1hZ2UsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M6IFwiZGh4X2xheW91dC1jZWxsLWhlYWRlcl9faW1hZ2VcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XHRcdFx0XHRdKSxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNvbmZpZy5oZWFkZXIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsKFwiaDMuZGh4X2xheW91dC1jZWxsLWhlYWRlcl9fdGl0bGVcIiwgdGhpcy5jb25maWcuaGVhZGVyKSxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNvbmZpZy5jb2xsYXBzYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0PyBlbChcImRpdi5kaHhfbGF5b3V0LWNlbGwtaGVhZGVyX19jb2xsYXBzZS1pY29uXCIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjbGFzczogdGhpcy5fZ2V0Q29sbGFwc2VJY29uKCksXG5cdFx0XHRcdFx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0XHRcdFx0XHQ6IGVsKFwiZGl2LmRoeF9sYXlvdXQtY2VsbC1oZWFkZXJfX2NvbGxhcHNlLWljb25cIiwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzOiBcImR4aSBkeGktZW1wdHlcIixcblx0XHRcdFx0XHRcdFx0XHRcdCAgfSksXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHQhdGhpcy5jb25maWcuY29sbGFwc2VkXG5cdFx0XHRcdFx0XHRcdD8gZWwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcImRpdlwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC4uLnN0eWxlUGFkZGluZyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRoZWlnaHQ6IGBjYWxjKDEwMCUgLSAke3RoaXMuY29uZmlnLmhlYWRlckhlaWdodCB8fCAzN31weClgLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcIi5pbm5lckhUTUxcIjogdGhpcy5jb25maWcuaHRtbCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5fZ2V0Q3NzKHRydWUpICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIiBkaHhfbGF5b3V0LWNlbGwtY29udGVudFwiICtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQodGhpcy5jb25maWcudHlwZSA/IHR5cGVDbGFzcyA6IFwiXCIpLFxuXHRcdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcdGtpZHNcblx0XHRcdFx0XHRcdFx0ICApXG5cdFx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0ICBdXG5cdFx0XHRcdDogdGhpcy5jb25maWcuaHRtbCAmJlxuXHRcdFx0XHQgICEoXG5cdFx0XHRcdFx0XHQodGhpcy5jb25maWcgYXMgSUxheW91dENvbmZpZykucm93cyAmJlxuXHRcdFx0XHRcdFx0KHRoaXMuY29uZmlnIGFzIElMYXlvdXRDb25maWcpLmNvbHMgJiZcblx0XHRcdFx0XHRcdCh0aGlzLmNvbmZpZyBhcyBJTGF5b3V0Q29uZmlnKS52aWV3c1xuXHRcdFx0XHQgIClcblx0XHRcdFx0PyBbXG5cdFx0XHRcdFx0XHQhdGhpcy5jb25maWcuY29sbGFwc2VkXG5cdFx0XHRcdFx0XHRcdD8gdGhpcy5zY3JvbGxWaWV3ICYmIHRoaXMuc2Nyb2xsVmlldy5jb25maWcuZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0PyB0aGlzLnNjcm9sbFZpZXcucmVuZGVyKFtodG1sQ29udGVudF0sIHRoaXMuX3VpZClcblx0XHRcdFx0XHRcdFx0XHQ6IGh0bWxDb250ZW50XG5cdFx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0ICBdXG5cdFx0XHRcdDoga2lkc1xuXHRcdCk7XG5cblx0XHRyZXR1cm4gcmVzaXplciA/IFtjZWxsLCByZXNpemVyXSA6IGNlbGw7XG5cdH1cbn1cbiIsImltcG9ydCB7IElMYXlvdXQsIElMYXlvdXRDb25maWcsIElDZWxsIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IExheW91dCB9IGZyb20gXCIuL0xheW91dFwiO1xuaW1wb3J0IHsgUHJvQ2VsbCB9IGZyb20gXCIuL1Byb0NlbGxcIjtcblxuZXhwb3J0IGNsYXNzIFByb0xheW91dCBleHRlbmRzIExheW91dCBpbXBsZW1lbnRzIElMYXlvdXQge1xuXHRjb25zdHJ1Y3RvcihwYXJlbnQ6IGFueSwgY29uZmlnOiBJTGF5b3V0Q29uZmlnKSB7XG5cdFx0c3VwZXIocGFyZW50LCBjb25maWcpO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9jcmVhdGVDZWxsKGNlbGw6IElMYXlvdXRDb25maWcpOiBJQ2VsbCB7XG5cdFx0bGV0IHZpZXc6IElDZWxsO1xuXHRcdGlmIChjZWxsLnJvd3MgfHwgY2VsbC5jb2xzIHx8IGNlbGwudmlld3MpIHtcblx0XHRcdGNlbGwucGFyZW50ID0gdGhpcy5fcm9vdDtcblx0XHRcdHZpZXcgPSBuZXcgUHJvTGF5b3V0KHRoaXMsIGNlbGwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2aWV3ID0gbmV3IFByb0NlbGwodGhpcywgY2VsbCk7XG5cdFx0fVxuXG5cdFx0Ly8gRkl4TUVcblx0XHQodGhpcy5fcm9vdCBhcyBhbnkpLl9hbGxbdmlldy5pZF0gPSB2aWV3O1xuXHRcdGlmIChjZWxsLmluaXQpIHtcblx0XHRcdGNlbGwuaW5pdCh2aWV3LCBjZWxsKTtcblx0XHR9XG5cdFx0cmV0dXJuIHZpZXc7XG5cdH1cbn1cbiIsImltcG9ydCB7IElDZWxsQ29uZmlnIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJsb2NrUmFuZ2UoYmxvY2sxOiBDbGllbnRSZWN0LCBibG9jazI6IENsaWVudFJlY3QsIGlzWExheW91dCA9IHRydWUpIHtcblx0aWYgKGlzWExheW91dCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRtaW46IGJsb2NrMS5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0LFxuXHRcdFx0bWF4OiBibG9jazIucmlnaHQgKyB3aW5kb3cucGFnZVhPZmZzZXQsXG5cdFx0fTtcblx0fVxuXHRyZXR1cm4ge1xuXHRcdG1pbjogYmxvY2sxLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCxcblx0XHRtYXg6IGJsb2NrMi5ib3R0b20gKyB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXJnaW5TaXplKGNvbmZpZzogSUNlbGxDb25maWcsIHhMYXlvdXQ6IGJvb2xlYW4pIHtcblx0aWYgKCFjb25maWcpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXHRpZiAoY29uZmlnLnR5cGUgPT09IFwic3BhY2VcIiB8fCAoY29uZmlnLnR5cGUgPT09IFwid2lkZVwiICYmIHhMYXlvdXQpKSB7XG5cdFx0cmV0dXJuIDEwO1xuXHR9XG5cdHJldHVybiAwO1xufVxuIiwiaW1wb3J0IHsgSVZpZXcsIElWaWV3TGlrZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi92aWV3XCI7XG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IElFdmVudFN5c3RlbSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9ldmVudHNcIjtcbmltcG9ydCB7IEZsZXhEaXJlY3Rpb24gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vaHRtbFwiO1xuaW1wb3J0IHsgU2Nyb2xsVmlldyB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9TY3JvbGxWaWV3XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNlbGxDb25maWcge1xuXHRpZD86IHN0cmluZztcblx0aHRtbD86IHN0cmluZztcblx0aGlkZGVuPzogYm9vbGVhbjtcblx0aGVhZGVyPzogc3RyaW5nO1xuXHRoZWFkZXJJY29uPzogc3RyaW5nO1xuXHRoZWFkZXJJbWFnZT86IHN0cmluZztcblx0aGVhZGVySGVpZ2h0PzogbnVtYmVyO1xuXG5cdG9uPzoge1xuXHRcdFtrZXk6IHN0cmluZ106IGFueTtcblx0fTtcblxuXHR3aWR0aD86IG51bWJlciB8IHN0cmluZztcblx0aGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xuXHRtaW5XaWR0aD86IG51bWJlciB8IHN0cmluZztcblx0bWF4V2lkdGg/OiBudW1iZXIgfCBzdHJpbmc7XG5cdG1pbkhlaWdodD86IG51bWJlciB8IHN0cmluZztcblx0bWF4SGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xuXHRjc3M/OiBzdHJpbmc7XG5cdHBhZGRpbmc/OiBudW1iZXIgfCBzdHJpbmc7XG5cdGFsaWduPzogRmxleERpcmVjdGlvbjtcblx0dHlwZT86IFwibGluZVwiIHwgXCJ3aWRlXCIgfCBcInNwYWNlXCIgfCBzdHJpbmc7XG5cdC8vIFRPRE86IHJlbW92ZSBib29sZWFuIHR5cGUgc3VpdGVfNy4wXG5cdGdyYXZpdHk/OiBudW1iZXIgfCBib29sZWFuO1xuXG5cdGNvbGxhcHNhYmxlPzogYm9vbGVhbjtcblx0cmVzaXphYmxlPzogYm9vbGVhbjtcblx0Y29sbGFwc2VkPzogYm9vbGVhbjtcblx0dGFiPzogc3RyaW5nO1xuXHR0YWJDc3M/OiBzdHJpbmc7XG5cdGZ1bGw/OiBib29sZWFuO1xuXG5cdGluaXQ/OiAoYzogSUNlbGwsIGNmZzogSUNlbGxDb25maWcgfCBJVmlldykgPT4gdm9pZDtcblx0JGZpeGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTGF5b3V0Q29uZmlnIGV4dGVuZHMgSUNlbGxDb25maWcge1xuXHRyb3dzPzogSUNlbGxDb25maWdbXSB8IElMYXlvdXRDb25maWdbXTtcblx0Y29scz86IElDZWxsQ29uZmlnW10gfCBJTGF5b3V0Q29uZmlnW107XG5cdHZpZXdzPzogSUNlbGxDb25maWdbXSB8IElMYXlvdXRDb25maWdbXTtcblx0YWN0aXZlVmlldz86IHN0cmluZztcblx0YWN0aXZlVGFiPzogc3RyaW5nO1xuXHRwYXJlbnQ/OiBJTGF5b3V0O1xufVxuXG5leHBvcnQgdHlwZSBJVmlld0ZuID0gKGNmZzogYW55KSA9PiBWTm9kZTtcblxuZXhwb3J0IGludGVyZmFjZSBJVmlld0NvbnN0cnVjdG9yIHtcblx0bmV3OiAoY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IHN0cmluZywgY29uZmlnOiBhbnkpID0+IElWaWV3O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDZWxsIGV4dGVuZHMgSVZpZXcge1xuXHRpZDogc3RyaW5nO1xuXHRjb25maWc6IElDZWxsQ29uZmlnO1xuXHRldmVudHM6IElFdmVudFN5c3RlbTxMYXlvdXRFdmVudHMsIElMYXlvdXRFdmVudEhhbmRsZXJzTWFwPjtcblx0YXR0YWNoKG5hbWU6IHN0cmluZyB8IElWaWV3Rm4gfCBJVmlldyB8IElWaWV3Q29uc3RydWN0b3IsIGNvbmZpZz86IGFueSk6IElWaWV3TGlrZTtcblx0YXR0YWNoSFRNTChodG1sOiBzdHJpbmcpOiB2b2lkO1xuXHRpc1Zpc2libGUoKTogYm9vbGVhbjtcblx0dG9WRE9NKG5vZGVzPzogYW55W10pOiBhbnk7XG5cdGdldFBhcmVudCgpOiBJTGF5b3V0O1xuXHRzaG93KCk6IHZvaWQ7XG5cdGhpZGUoKTogdm9pZDtcblx0cGFpbnQoKTogdm9pZDtcblx0ZGVzdHJ1Y3RvcigpOiB2b2lkO1xuXHRnZXRXaWRnZXQoKTogYW55O1xuXHRjb2xsYXBzZSgpOiB2b2lkO1xuXHRleHBhbmQoKTogdm9pZDtcblx0dG9nZ2xlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb0NlbGwgZXh0ZW5kcyBJQ2VsbCB7XG5cdHNjcm9sbFZpZXc6IFNjcm9sbFZpZXc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxheW91dCBleHRlbmRzIElDZWxsIHtcblx0Y29uZmlnOiBJTGF5b3V0Q29uZmlnO1xuXHRyZW1vdmVDZWxsKGlkOiBzdHJpbmcpOiB2b2lkO1xuXHRhZGRDZWxsKGNvbmZpZzogSUNlbGxDb25maWcsIGluZGV4OiBudW1iZXIpOiBhbnk7XG5cdGdldFJlZnMoc3RyOiBhbnkpOiBhbnk7XG5cdGdldENlbGwoaWQ6IHN0cmluZyk6IElDZWxsO1xuXHRnZXRJZChpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXHRmb3JFYWNoKGNhbGxiYWNrOiBMYXlvdXRDYWxsYmFjayk6IHZvaWQ7XG5cdGRlc3RydWN0b3IoKTogdm9pZDtcblxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGNlbGwoaWQ6IHN0cmluZyk6IElDZWxsO1xufVxuXG5leHBvcnQgZW51bSBMYXlvdXRFdmVudHMge1xuXHRiZWZvcmVTaG93ID0gXCJiZWZvcmVTaG93XCIsXG5cdGFmdGVyU2hvdyA9IFwiYWZ0ZXJTaG93XCIsXG5cdGJlZm9yZUhpZGUgPSBcImJlZm9yZUhpZGVcIixcblx0YWZ0ZXJIaWRlID0gXCJhZnRlckhpZGVcIixcblxuXHRiZWZvcmVSZXNpemVTdGFydCA9IFwiYmVmb3JlUmVzaXplU3RhcnRcIixcblx0cmVzaXplID0gXCJyZXNpemVcIixcblx0YWZ0ZXJSZXNpemVFbmQgPSBcImFmdGVyUmVzaXplRW5kXCIsXG5cblx0YmVmb3JlQWRkID0gXCJiZWZvcmVBZGRcIixcblx0YWZ0ZXJBZGQgPSBcImFmdGVyQWRkXCIsXG5cdGJlZm9yZVJlbW92ZSA9IFwiYmVmb3JlUmVtb3ZlXCIsXG5cdGFmdGVyUmVtb3ZlID0gXCJhZnRlclJlbW92ZVwiLFxuXG5cdGJlZm9yZUNvbGxhcHNlID0gXCJiZWZvcmVDb2xsYXBzZVwiLFxuXHRhZnRlckNvbGxhcHNlID0gXCJhZnRlckNvbGxhcHNlXCIsXG5cdGJlZm9yZUV4cGFuZCA9IFwiYmVmb3JlRXhwYW5kXCIsXG5cdGFmdGVyRXhwYW5kID0gXCJhZnRlckV4cGFuZFwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMYXlvdXRFdmVudEhhbmRsZXJzTWFwIHtcblx0W2tleTogc3RyaW5nXTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cdFtMYXlvdXRFdmVudHMuYmVmb3JlU2hvd106IChpZDogc3RyaW5nKSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0xheW91dEV2ZW50cy5hZnRlclNob3ddOiAoaWQ6IHN0cmluZykgPT4gdm9pZDtcblx0W0xheW91dEV2ZW50cy5iZWZvcmVIaWRlXTogKGlkOiBzdHJpbmcpID0+IGJvb2xlYW4gfCB2b2lkO1xuXHRbTGF5b3V0RXZlbnRzLmFmdGVySGlkZV06IChpZDogc3RyaW5nKSA9PiBhbnk7XG5cblx0W0xheW91dEV2ZW50cy5iZWZvcmVSZXNpemVTdGFydF06IChpZDogc3RyaW5nKSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0xheW91dEV2ZW50cy5yZXNpemVdOiAoaWQ6IHN0cmluZykgPT4gdm9pZDtcblx0W0xheW91dEV2ZW50cy5hZnRlclJlc2l6ZUVuZF06IChpZDogc3RyaW5nKSA9PiB2b2lkO1xuXG5cdFtMYXlvdXRFdmVudHMuYmVmb3JlQWRkXTogKGlkOiBzdHJpbmcpID0+IGJvb2xlYW4gfCB2b2lkO1xuXHRbTGF5b3V0RXZlbnRzLmFmdGVyQWRkXTogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XG5cdFtMYXlvdXRFdmVudHMuYmVmb3JlUmVtb3ZlXTogKGlkOiBzdHJpbmcpID0+IGJvb2xlYW4gfCB2b2lkO1xuXHRbTGF5b3V0RXZlbnRzLmFmdGVyUmVtb3ZlXTogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XG5cblx0W0xheW91dEV2ZW50cy5iZWZvcmVDb2xsYXBzZV06IChpZDogc3RyaW5nKSA9PiBib29sZWFuIHwgdm9pZDtcblx0W0xheW91dEV2ZW50cy5hZnRlckNvbGxhcHNlXTogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XG5cdFtMYXlvdXRFdmVudHMuYmVmb3JlRXhwYW5kXTogKGlkOiBzdHJpbmcpID0+IGJvb2xlYW4gfCB2b2lkO1xuXHRbTGF5b3V0RXZlbnRzLmFmdGVyRXhwYW5kXTogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIExheW91dENhbGxiYWNrID0gKGNlbGw6IElDZWxsLCBpbmRleDogbnVtYmVyLCBhcnJheSkgPT4gYW55O1xuZXhwb3J0IHR5cGUgSUZpbGxTcGFjZSA9IGJvb2xlYW4gfCBcInhcIiB8IFwieVwiO1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9MaXN0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL1Byb0xpc3RcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvU2VsZWN0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL3R5cGVzXCI7XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHtcblx0RGF0YUNvbGxlY3Rpb24sXG5cdGRyYWdNYW5hZ2VyLFxuXHREYXRhRXZlbnRzLFxuXHREcmFnRXZlbnRzLFxuXHRJRGF0YUV2ZW50c0hhbmRsZXJzTWFwLFxuXHRJRHJhZ0V2ZW50c0hhbmRsZXJzTWFwLFxuXHRJRHJhZ0luZm8sXG59IGZyb20gXCJAZGh4L3RzLWRhdGFcIjtcbmltcG9ydCB7IGNyZWF0ZSwgZWwsIFZOb2RlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgSUtleU1hbmFnZXIsIEtleU1hbmFnZXIgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vS2V5TWFuYWdlclwiO1xuaW1wb3J0IHsgSUhhbmRsZXJzLCBTZWxlY3Rpb25FdmVudHMsIElUb3VjaFBhcmFtLCBhbnlGdW5jdGlvbiwgSWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdmlld1wiO1xuaW1wb3J0IHsgU2VsZWN0aW9uIH0gZnJvbSBcIi4vU2VsZWN0aW9uXCI7XG5pbXBvcnQgeyBsb2NhdGUsIGxvY2F0ZU5vZGUsIGV2ZW50SGFuZGxlciB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQgeyBJTGlzdCwgSUxpc3RDb25maWcsIElMaXN0RXZlbnRIYW5kbGVyc01hcCwgSUxpc3RJdGVtLCBJU2VsZWN0aW9uLCBMaXN0RXZlbnRzIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IGdldEVkaXRvciB9IGZyb20gXCIuL2VkaXRvcnMvZWRpdG9yc1wiO1xuXG5leHBvcnQgY29uc3QgTU9WRV9VUCA9IDE7XG5leHBvcnQgY29uc3QgTU9WRV9ET1dOID0gMjtcblxuZXhwb3J0IGNsYXNzIExpc3QgZXh0ZW5kcyBWaWV3IGltcGxlbWVudHMgSUxpc3Qge1xuXHRwdWJsaWMgY29uZmlnOiBJTGlzdENvbmZpZztcblx0cHVibGljIGRhdGE6IERhdGFDb2xsZWN0aW9uO1xuXHRwdWJsaWMgZXZlbnRzOiBJRXZlbnRTeXN0ZW08XG5cdFx0RGF0YUV2ZW50cyB8IExpc3RFdmVudHMgfCBEcmFnRXZlbnRzLFxuXHRcdElMaXN0RXZlbnRIYW5kbGVyc01hcCAmIElEYXRhRXZlbnRzSGFuZGxlcnNNYXAgJiBJRHJhZ0V2ZW50c0hhbmRsZXJzTWFwXG5cdD47XG5cdHB1YmxpYyBzZWxlY3Rpb246IElTZWxlY3Rpb247XG5cdHB1YmxpYyBrZXlNYW5hZ2VyOiBJS2V5TWFuYWdlcjtcblxuXHRwcm90ZWN0ZWQgX2hhbmRsZXJzOiBJSGFuZGxlcnM7XG5cdHByb3RlY3RlZCBfZm9jdXM6IElkO1xuXHRwcm90ZWN0ZWQgX2VkaXRlZDogSWQ7XG5cdHByb3RlY3RlZCBfZXZlbnRzOiBJSGFuZGxlcnM7XG5cblx0cHJpdmF0ZSBfdG9wT2Zmc2V0OiBudW1iZXI7XG5cdHByaXZhdGUgX3Zpc2libGVIZWlnaHQ6IG51bWJlcjtcblx0cHJpdmF0ZSBfdG91Y2g6IElUb3VjaFBhcmFtO1xuXG5cdGNvbnN0cnVjdG9yKG5vZGU6IEhUTUxFbGVtZW50IHwgc3RyaW5nLCBjb25maWc6IElMaXN0Q29uZmlnID0ge30pIHtcblx0XHRsZXQgaXRlbUhlaWdodDogbnVtYmVyIHwgc3RyaW5nID0gY29uZmlnLml0ZW1IZWlnaHQgfHwgKGNvbmZpZy52aXJ0dWFsID8gMzcgOiBudWxsKTtcblx0XHRpZiAoaXRlbUhlaWdodCAmJiB0eXBlb2YgaXRlbUhlaWdodCA9PT0gXCJudW1iZXJcIikge1xuXHRcdFx0aXRlbUhlaWdodCA9IGl0ZW1IZWlnaHQudG9TdHJpbmcoKSArIFwicHhcIjtcblx0XHR9XG5cblx0XHRzdXBlcihcblx0XHRcdG5vZGUsXG5cdFx0XHRleHRlbmQoXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpdGVtSGVpZ2h0OiBpdGVtSGVpZ2h0LFxuXHRcdFx0XHRcdGtleU5hdmlnYXRpb246IHRydWUsXG5cdFx0XHRcdFx0ZWRpdGFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdHNlbGVjdGlvbjogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0Y29uZmlnXG5cdFx0XHQpXG5cdFx0KTtcblxuXHRcdHRoaXMuX3RvdWNoID0ge1xuXHRcdFx0ZHVyYXRpb246IDM1MCxcblx0XHRcdGRibER1cmF0aW9uOiAzMDAsXG5cdFx0XHR0aW1lcjogbnVsbCxcblx0XHRcdHN0YXJ0OiBmYWxzZSxcblx0XHRcdHRpbWVTdGFtcDogbnVsbCxcblx0XHR9O1xuXG5cdFx0Ly8gaW5pdCBkYXRhIGNvbGxlY2l0b24gYW5kIGxpbmsgZXZlbnRzIGJldHdlZW4gd2lkZ2V0IGFuZCBkYXRhXG5cdFx0Y29uc3QgZGF0YSA9IHRoaXMuY29uZmlnLmRhdGE7XG5cdFx0aWYgKCEoZGF0YSBpbnN0YW5jZW9mIERhdGFDb2xsZWN0aW9uKSkge1xuXHRcdFx0dGhpcy5kYXRhID0gbmV3IERhdGFDb2xsZWN0aW9uKHt9KTtcblx0XHRcdHRoaXMuZXZlbnRzID0gdGhpcy5kYXRhLmV2ZW50cztcblx0XHRcdGlmIChkYXRhKSB0aGlzLmRhdGEucGFyc2UoZGF0YSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFtUT0RPXSBkZXByZWNhdGUgaW4gZmF2b3Igb2YgcmF3IGRhdGEgaW5wdXRcblx0XHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0XHR0aGlzLmV2ZW50cyA9IGRhdGEuZXZlbnRzO1xuXHRcdH1cblxuXHRcdHRoaXMuc2VsZWN0aW9uID0gbmV3IFNlbGVjdGlvbihcblx0XHRcdHtcblx0XHRcdFx0ZGlzYWJsZWQ6ICF0aGlzLmNvbmZpZy5zZWxlY3Rpb24sXG5cdFx0XHRcdG11bHRpc2VsZWN0aW9uOiB0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbixcblx0XHRcdH0sXG5cdFx0XHR0aGlzLmRhdGEsXG5cdFx0XHR0aGlzLmV2ZW50c1xuXHRcdCk7XG5cblx0XHRpZiAodGhpcy5jb25maWcua2V5TmF2aWdhdGlvbikge1xuXHRcdFx0dGhpcy5rZXlNYW5hZ2VyID0gbmV3IEtleU1hbmFnZXIoKGU6IEtleWJvYXJkRXZlbnQsIGZvY3VzSWQ6IElkKSA9PiB7XG5cdFx0XHRcdHJldHVybiBmb2N1c0lkID09IHRoaXMuX3VpZCAmJiAoIXRoaXMuX2VkaXRlZCB8fCAodGhpcy5fZWRpdGVkICYmIGUua2V5ICE9PSBcImVzY2FwZVwiKSk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuX2luaXRIb3RLZXkoKTtcblx0XHR9XG5cblx0XHR0aGlzLmV2ZW50cy5vbihEYXRhRXZlbnRzLmNoYW5nZSwgKF8sIHN0YXR1cywgaXRlbSkgPT4ge1xuXHRcdFx0aWYgKHN0YXR1cyA9PT0gXCJzZXRQYWdlXCIpIHtcblx0XHRcdFx0dGhpcy5zaG93SXRlbSh0aGlzLmRhdGEuZ2V0SWQoaXRlbVswXSkpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5ldmVudHMub24oU2VsZWN0aW9uRXZlbnRzLmFmdGVyVW5TZWxlY3QsICgpID0+IHRoaXMucGFpbnQoKSk7XG5cdFx0dGhpcy5ldmVudHMub24oU2VsZWN0aW9uRXZlbnRzLmFmdGVyU2VsZWN0LCAoaWQ6IElkKSA9PiB7XG5cdFx0XHRpZiAoaWQgJiYgdGhpcy5jb25maWcuc2VsZWN0aW9uKSB0aGlzLl9mb2N1cyA9IGlkO1xuXHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKExpc3RFdmVudHMuYWZ0ZXJFZGl0RW5kLCB0aGlzLmVkaXRFbmQuYmluZCh0aGlzKSk7XG5cblx0XHRjb25zdCBkcm9wID0gKHZhbHVlOiBib29sZWFuKSA9PiAoaW5mbzogSURyYWdJbmZvKSA9PiB7XG5cdFx0XHR0aGlzLmRhdGEuc2V0TWV0YSh0aGlzLmRhdGEuZ2V0SXRlbShpbmZvLnRhcmdldCksIFwiZHJvcFwiLCB2YWx1ZSk7XG5cdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0fTtcblx0XHR0aGlzLmV2ZW50cy5vbihEcmFnRXZlbnRzLmNhbkRyb3AsIGRyb3AodHJ1ZSkpO1xuXHRcdHRoaXMuZXZlbnRzLm9uKERyYWdFdmVudHMuY2FuY2VsRHJvcCwgZHJvcChmYWxzZSkpO1xuXG5cdFx0Y29uc3QgZHJhZyA9ICh2YWx1ZTogYm9vbGVhbikgPT4gKGluZm86IElEcmFnSW5mbykgPT4ge1xuXHRcdFx0aW5mby5zb3VyY2UubWFwKGlkID0+IHRoaXMuZGF0YS5zZXRNZXRhKHRoaXMuZGF0YS5nZXRJdGVtKGlkKSwgXCJkcmFnXCIsIHZhbHVlKSk7XG5cdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0fTtcblx0XHR0aGlzLmV2ZW50cy5vbihEcmFnRXZlbnRzLmRyYWdTdGFydCwgZHJhZyh0cnVlKSk7XG5cdFx0dGhpcy5ldmVudHMub24oRHJhZ0V2ZW50cy5hZnRlckRyYWcsIGRyYWcoZmFsc2UpKTtcblxuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0b25tb3VzZWRvd246IChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdHRoaXMuX2RyYWdTdGFydChlKTtcblx0XHRcdH0sXG5cdFx0XHRvbnRvdWNoc3RhcnQ6IChlOiBUb3VjaEV2ZW50KSA9PiB7XG5cdFx0XHRcdHRoaXMuX3RvdWNoLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fZHJhZ1N0YXJ0KGUpO1xuXHRcdFx0XHR9LCB0aGlzLl90b3VjaC5kdXJhdGlvbik7XG5cblx0XHRcdFx0aWYgKCF0aGlzLl90b3VjaC50aW1lU3RhbXApIHtcblx0XHRcdFx0XHR0aGlzLl90b3VjaC50aW1lU3RhbXAgPSArZS50aW1lU3RhbXAudG9GaXhlZCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IGRibFRhcCA9IHRoaXMuX3RvdWNoLmRibER1cmF0aW9uID49IHRoaXMuX3RvdWNoLnRpbWVTdGFtcCAtICtlLnRpbWVTdGFtcC50b0ZpeGVkKCk7XG5cdFx0XHRcdFx0aWYgKGRibFRhcCkge1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0dGhpcy5fZGJsQ2xpY2soZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3RvdWNoLnRpbWVTdGFtcCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fdG91Y2gudGltZVN0YW1wID0gbnVsbDtcblx0XHRcdFx0fSwgdGhpcy5fdG91Y2guZGJsRHVyYXRpb24pO1xuXHRcdFx0fSxcblx0XHRcdG9udG91Y2htb3ZlOiAoZTogVG91Y2hFdmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLl90b3VjaC5zdGFydCAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHRoaXMuX2NsZWFyVG91Y2hUaW1lcigpO1xuXHRcdFx0fSxcblx0XHRcdG9udG91Y2hlbmQ6ICgpID0+IHtcblx0XHRcdFx0dGhpcy5fdG91Y2guc3RhcnQgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5fY2xlYXJUb3VjaFRpbWVyKCk7XG5cdFx0XHR9LFxuXHRcdFx0b25kcmFnc3RhcnQ6ICgpID0+ICh0aGlzLmNvbmZpZy5kcmFnTW9kZSAmJiAhdGhpcy5fZWRpdGVkID8gZmFsc2UgOiBudWxsKSxcblx0XHRcdG9uY29udGV4dG1lbnU6IChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlkOiBJZCA9IGxvY2F0ZShlKTtcblx0XHRcdFx0aWYgKCFpZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKExpc3RFdmVudHMuaXRlbVJpZ2h0Q2xpY2ssIFtpZCwgZV0pO1xuXHRcdFx0fSxcblx0XHRcdG9uY2xpY2s6IChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlkOiBJZCA9IGxvY2F0ZShlKTtcblx0XHRcdFx0aWYgKCFpZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnNlbGVjdGlvbi5hZGQoaWQsIGUuY3RybEtleSB8fCBlLm1ldGFLZXksIGUuc2hpZnRLZXkpO1xuXHRcdFx0XHR0aGlzLl9mb2N1cyA9IGlkO1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKExpc3RFdmVudHMuY2xpY2ssIFtpZCwgZV0pO1xuXHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHR9LFxuXHRcdFx0b25kYmxjbGljazogKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5fZGJsQ2xpY2soZSk7XG5cdFx0XHR9LFxuXHRcdFx0b25zY3JvbGw6IChlOiBhbnkpID0+IHtcblx0XHRcdFx0aWYgKHRoaXMuY29uZmlnLnZpcnR1YWwpIHtcblx0XHRcdFx0XHR0aGlzLl90b3BPZmZzZXQgPSBlLnRhcmdldC5zY3JvbGxUb3A7XG5cdFx0XHRcdFx0dGhpcy5fdmlzaWJsZUhlaWdodCA9IGUudGFyZ2V0Lm9mZnNldEhlaWdodDtcblx0XHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRvbm1vdXNlb3ZlcjogKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0Y29uc3QgaWQ6IElkID0gbG9jYXRlKGUpO1xuXHRcdFx0XHRpZiAoIWlkKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IHByZXZJZCA9IGxvY2F0ZShlLnJlbGF0ZWRUYXJnZXQgYXMgSFRNTEVsZW1lbnQpO1xuXHRcdFx0XHRpZiAoaWQgIT09IHByZXZJZCkgdGhpcy5ldmVudHMuZmlyZShMaXN0RXZlbnRzLml0ZW1Nb3VzZU92ZXIsIFtpZCwgZV0pO1xuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgZXZzID0gdGhpcy5jb25maWcuZXZlbnRIYW5kbGVycztcblx0XHRpZiAoZXZzKSB7XG5cdFx0XHRmb3IgKGNvbnN0IFtldmVudF9uYW1lLCBldmVudHNdIG9mIE9iamVjdC5lbnRyaWVzKGV2cykpIHtcblx0XHRcdFx0dGhpcy5faGFuZGxlcnNbZXZlbnRfbmFtZV0gPSBldmVudEhhbmRsZXIoXG5cdFx0XHRcdFx0ZSA9PiBsb2NhdGUoZSksXG5cdFx0XHRcdFx0ZXZlbnRzLFxuXHRcdFx0XHRcdHRoaXMuX2hhbmRsZXJzW2V2ZW50X25hbWVdIGFzIGFueUZ1bmN0aW9uXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuY29uZmlnLmRyYWdNb2RlKSB7XG5cdFx0XHRkcmFnTWFuYWdlci5zZXRJdGVtKHRoaXMuX3VpZCwgdGhpcyk7XG5cdFx0fVxuXG5cdFx0Ly8gZGVmYXVsdHMgZm9yIHZpcnR1YWwgcmVuZGVyaW5nXG5cdFx0dGhpcy5fdG9wT2Zmc2V0ID0gdGhpcy5fdmlzaWJsZUhlaWdodCA9IDA7XG5cblx0XHRjb25zdCB2aWV3ID0gY3JlYXRlKHtcblx0XHRcdHJlbmRlcjogKCkgPT4gdGhpcy5fcmVuZGVyTGlzdCgpLFxuXHRcdFx0aG9va3M6IHtcblx0XHRcdFx0ZGlkTW91bnQ6ICh2bTogYW55KSA9PiB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuY29uZmlnLnZpcnR1YWwpIHRoaXMuX3Zpc2libGVIZWlnaHQgPSB2bS5ub2RlLmVsLm9mZnNldEhlaWdodDtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGlkUmVkcmF3OiB2bSA9PiB0aGlzLl9kaWRSZWRyYXcodm0pLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHR0aGlzLm1vdW50KG5vZGUsIHZpZXcpO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9kaWRSZWRyYXcodm06IGFueSkge1xuXHRcdC8vIGRvIG5vdGhpbmdcblx0fVxuXG5cdHByaXZhdGUgX2RibENsaWNrKGU6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSB7XG5cdFx0bGV0IGlkOiBJZCA9IGxvY2F0ZShlKTtcblx0XHRpZiAoIWlkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlkID0gdGhpcy5kYXRhLmdldEl0ZW0oaWQpLmlkO1xuXHRcdGlmICh0aGlzLmNvbmZpZy5lZGl0YWJsZSkge1xuXHRcdFx0dGhpcy5lZGl0SXRlbShpZCk7XG5cdFx0fVxuXHRcdHRoaXMuZXZlbnRzLmZpcmUoTGlzdEV2ZW50cy5kb3VibGVDbGljaywgW2lkLCBlXSk7XG5cdH1cblxuXHRwcml2YXRlIF9jbGVhclRvdWNoVGltZXIoKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuX3RvdWNoLnRpbWVyKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy5fdG91Y2gudGltZXIpO1xuXHRcdFx0dGhpcy5fdG91Y2gudGltZXIgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgX2RyYWdTdGFydChlOiBUb3VjaEV2ZW50IHwgTW91c2VFdmVudCk6IHZvaWQge1xuXHRcdHRoaXMuX3RvdWNoLnN0YXJ0ID0gdHJ1ZTtcblx0XHRjb25zdCBpdGVtc0Zvckdob3N0ID0gW107XG5cdFx0Y29uc3QgaXRlbSA9IGxvY2F0ZU5vZGUoZSwgXCJkaHhfaWRcIikgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0Y29uc3QgaXRlbUlkID0gaXRlbSAmJiBpdGVtLmdldEF0dHJpYnV0ZShcImRoeF9pZFwiKTtcblx0XHRsZXQgc2VsZWN0aW9uSWRzID0gdGhpcy5zZWxlY3Rpb24uZ2V0SWQoKTtcblx0XHRpZiAodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24gJiYgc2VsZWN0aW9uSWRzIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdHNlbGVjdGlvbklkcy5tYXAoaWQgPT4ge1xuXHRcdFx0XHRpZiAoaWQgIT09IGl0ZW1JZCAmJiB0aGlzLmdldFJvb3RWaWV3KCkucmVmc1tpZF0pIHtcblx0XHRcdFx0XHRpdGVtc0Zvckdob3N0LnB1c2godGhpcy5nZXRSb290VmlldygpLnJlZnNbaWRdLmVsKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHNlbGVjdGlvbklkcyA9IFsuLi5zZWxlY3Rpb25JZHNdO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHNlbGVjdGlvbklkcyA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0c2VsZWN0aW9uSWRzID0gW3NlbGVjdGlvbklkc107XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmNvbmZpZy5kcmFnTW9kZSAmJiAhdGhpcy5fZWRpdGVkXG5cdFx0XHQ/IGRyYWdNYW5hZ2VyLm9uTW91c2VEb3duKGUsIChzZWxlY3Rpb25JZHMgYXMgSWRbXSkgfHwgW2l0ZW1JZF0sIGl0ZW1zRm9yR2hvc3QpXG5cdFx0XHQ6IG51bGw7XG5cdH1cblxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGRpc2FibGVTZWxlY3Rpb24oKSB7XG5cdFx0dGhpcy5zZWxlY3Rpb24uZGlzYWJsZSgpO1xuXHR9XG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0ZW5hYmxlU2VsZWN0aW9uKCkge1xuXHRcdHRoaXMuc2VsZWN0aW9uLmVuYWJsZSgpO1xuXHR9XG5cblx0ZWRpdEl0ZW0oaWQ6IElkKTogdm9pZCB7XG5cdFx0dGhpcy5fZWRpdGVkID0gaWQ7XG5cdFx0aWYgKCF0aGlzLmRhdGEuZ2V0SXRlbSh0aGlzLl9lZGl0ZWQpIHx8ICF0aGlzLmV2ZW50cy5maXJlKExpc3RFdmVudHMuYmVmb3JlRWRpdFN0YXJ0LCBbaWRdKSkge1xuXHRcdFx0dGhpcy5fZWRpdGVkID0gbnVsbDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5fZ2V0SG90a2V5cygpO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0XHR0aGlzLmV2ZW50cy5maXJlKExpc3RFdmVudHMuYWZ0ZXJFZGl0U3RhcnQsIFtpZF0pO1xuXHR9XG5cdC8vIFtUT0RPXSBtYXliZSBiZXR0ZXIgbmFtZVxuXHRlZGl0RW5kKHZhbHVlOiBhbnksIGlkPzogSWQpIHtcblx0XHRpZiAodGhpcy5fZWRpdGVkKSB7XG5cdFx0XHRpZiAodmFsdWUgIT09IG51bGwpIHtcblx0XHRcdFx0Y29uc3QgaXRlbSA9IHRoaXMuZGF0YS5nZXRJdGVtKGlkKTtcblx0XHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShpZCwgeyAuLi5pdGVtLCB2YWx1ZSB9KTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2VkaXRlZCA9IG51bGw7XG5cdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0fVxuXHR9XG5cblx0Lypcblx0XHRGb2N1cyBBUEkgYWxsb3dzIHRvIG1hcmsgaXRlbSBhcyBhY3RpdmUgb25lLCBidXQgbm90IHNlbGVjdGVkIHlldFxuXHRcdFVzZWQgYnkga2V5Ym9hcmQgbmF2aWdhdGlvblxuXHQqL1xuXG5cdGdldEZvY3VzSXRlbSgpOiBhbnkge1xuXHRcdHJldHVybiB0aGlzLmRhdGEuZ2V0SXRlbSh0aGlzLl9mb2N1cyk7XG5cdH1cblxuXHRzZXRGb2N1cyhpZDogSWQpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5fZm9jdXMgIT0gaWQgJiYgdGhpcy5kYXRhLmV4aXN0cyhpZCkpIHtcblx0XHRcdHRoaXMuX2ZvY3VzID0gaWQ7XG5cdFx0XHR0aGlzLnNob3dJdGVtKGlkKTtcblx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoTGlzdEV2ZW50cy5mb2N1c0NoYW5nZSwgW3RoaXMuZGF0YS5nZXRJbmRleCh0aGlzLl9mb2N1cyksIHRoaXMuX2ZvY3VzXSk7XG5cdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0Rm9jdXMoKTogSWQge1xuXHRcdHJldHVybiB0aGlzLl9mb2N1cztcblx0fVxuXG5cdGRlc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5ldmVudHMgJiYgdGhpcy5ldmVudHMuY2xlYXIoKTtcblx0XHR0aGlzLmtleU1hbmFnZXIgJiYgdGhpcy5rZXlNYW5hZ2VyLmRlc3RydWN0b3IoKTtcblx0XHR0aGlzLnNlbGVjdGlvbiAmJiB0aGlzLnNlbGVjdGlvbi5kZXN0cnVjdG9yKCk7XG5cblx0XHR0aGlzLmNvbmZpZyA9IHRoaXMuZXZlbnRzID0gdGhpcy5zZWxlY3Rpb24gPSB0aGlzLmtleU1hbmFnZXIgPSBudWxsO1xuXHRcdHRoaXMuX2hhbmRsZXJzID0gdGhpcy5fZm9jdXMgPSB0aGlzLl9lZGl0ZWQgPSB0aGlzLl9ldmVudHMgPSB0aGlzLl90b3BPZmZzZXQgPSB0aGlzLl92aXNpYmxlSGVpZ2h0ID0gdGhpcy5fdG91Y2ggPSBudWxsO1xuXHRcdHRoaXMudW5tb3VudCgpO1xuXHR9XG5cblx0c2hvd0l0ZW0oaWQ6IElkKTogdm9pZCB7XG5cdFx0Y29uc3Qgcm9vdFZpZXcgPSB0aGlzLmdldFJvb3RWaWV3KCk7XG5cdFx0aWYgKCFyb290VmlldyB8fCAhcm9vdFZpZXcubm9kZSB8fCAhcm9vdFZpZXcubm9kZS5lbCB8fCB0eXBlb2YgaWQgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBsaXN0RWw6IEhUTUxFbGVtZW50ID0gdGhpcy5nZXRSb290Tm9kZSgpO1xuXHRcdGlmICghbGlzdEVsKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgdmlydHVhbCA9IHRoaXMuY29uZmlnLnZpcnR1YWw7XG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmRhdGEuZ2V0SW5kZXgoaWQpO1xuXHRcdGNvbnN0IGN1cnJlbnRQYWdlID0gTWF0aC5mbG9vcihpbmRleCAvIGxpc3RFbC5jaGlsZHJlbi5sZW5ndGgpIHx8IDA7XG5cdFx0Y29uc3QgZWwgPSBsaXN0RWwuY2hpbGRyZW5baW5kZXggLSBsaXN0RWwuY2hpbGRyZW4ubGVuZ3RoICogY3VycmVudFBhZ2VdIGFzIEhUTUxFbGVtZW50O1xuXG5cdFx0aWYgKCF2aXJ0dWFsICYmICFlbCkgcmV0dXJuO1xuXHRcdGNvbnN0IGhlaWdodCA9IHZpcnR1YWwgPyBwYXJzZUludCh0aGlzLmNvbmZpZy5pdGVtSGVpZ2h0IGFzIHN0cmluZykgOiBlbC5jbGllbnRIZWlnaHQ7XG5cdFx0Y29uc3QgdG9wID0gdmlydHVhbCA/IGluZGV4ICogaGVpZ2h0IDogZWwub2Zmc2V0VG9wO1xuXG5cdFx0aWYgKHRvcCA+PSBsaXN0RWwuc2Nyb2xsVG9wICsgbGlzdEVsLmNsaWVudEhlaWdodCAtIGhlaWdodCkge1xuXHRcdFx0bGlzdEVsLnNjcm9sbFRvKDAsIHRvcCAtIGxpc3RFbC5jbGllbnRIZWlnaHQgKyBoZWlnaHQpO1xuXHRcdH0gZWxzZSBpZiAodG9wIDwgbGlzdEVsLnNjcm9sbFRvcCkge1xuXHRcdFx0bGlzdEVsLnNjcm9sbFRvKDAsIHRvcCk7XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9yZW5kZXJJdGVtKGl0ZW06IElMaXN0SXRlbSwgaW5kZXg6IG51bWJlcik6IFZOb2RlIHtcblx0XHRjb25zdCB7IGl0ZW1IZWlnaHQgfSA9IHRoaXMuY29uZmlnO1xuXHRcdGlmIChpdGVtLiRlbXB0eSkge1xuXHRcdFx0cmV0dXJuIGVsKFwibGlcIiwge1xuXHRcdFx0XHRjbGFzczogXCJkaHhfbGlzdC1pdGVtXCIsXG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0aGVpZ2h0OiBpdGVtSGVpZ2h0LFxuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgaHRtbCA9ICh0aGlzLmNvbmZpZy50ZW1wbGF0ZSAmJiB0aGlzLmNvbmZpZy50ZW1wbGF0ZShpdGVtKSkgfHwgaXRlbS5odG1sO1xuXHRcdGNvbnN0IGZvY3VzID0gaXRlbS5pZCA9PSB0aGlzLl9mb2N1cztcblxuXHRcdGlmIChpdGVtLmlkID09IHRoaXMuX2VkaXRlZCkge1xuXHRcdFx0Y29uc3QgZWRpdG9yID0gZ2V0RWRpdG9yKGl0ZW0sIHRoaXMpO1xuXHRcdFx0cmV0dXJuIGVkaXRvci50b0hUTUwoKTtcblx0XHR9XG5cblx0XHRjb25zdCBteCA9IHRoaXMuZGF0YS5nZXRNZXRhTWFwKGl0ZW0pO1xuXHRcdGNvbnN0IG5vZGUgPSB7XG5cdFx0XHQuLi50aGlzLl9ldmVudHMsXG5cdFx0XHRjbGFzczpcblx0XHRcdFx0XCJkaHhfbGlzdC1pdGVtXCIgK1xuXHRcdFx0XHQobXggJiYgbXguc2VsZWN0ZWQgPyBcIiBkaHhfbGlzdC1pdGVtLS1zZWxlY3RlZFwiIDogXCJcIikgK1xuXHRcdFx0XHQoZm9jdXMgPyBcIiBkaHhfbGlzdC1pdGVtLS1mb2N1c1wiIDogXCJcIikgK1xuXHRcdFx0XHQobXggJiYgbXguZHJvcCAmJiAhdGhpcy5fZWRpdGVkID8gXCIgZGh4X2xpc3QtaXRlbS0tZHJvcGhlcmVcIiA6IFwiXCIpICtcblx0XHRcdFx0KG14ICYmIG14LmRyYWcgJiYgIXRoaXMuX2VkaXRlZCA/IFwiIGRoeF9saXN0LWl0ZW0tLWRyYWd0YXJnZXRcIiA6IFwiXCIpICtcblx0XHRcdFx0KHRoaXMuY29uZmlnLmRyYWdNb2RlICYmICF0aGlzLl9lZGl0ZWQgPyBcIiBkaHhfbGlzdC1pdGVtLS1kcmFnXCIgOiBcIlwiKSArXG5cdFx0XHRcdChpdGVtLmNzcyA/IFwiIFwiICsgaXRlbS5jc3MgOiBcIlwiKSxcblx0XHRcdGRoeF9pZDogaXRlbS5pZCxcblx0XHRcdF9yZWY6IGl0ZW0uaWQudG9TdHJpbmcoKSxcblx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdGhlaWdodDogaXRlbUhlaWdodCxcblx0XHRcdH0sXG5cdFx0XHRfa2V5OiBpdGVtLmlkLFxuXHRcdFx0XCIuaW5uZXJIVE1MXCI6IGh0bWwsXG5cdFx0XHQuLi50aGlzLmdldEl0ZW1BcmlhQXR0cnModGhpcywgaXRlbSksXG5cdFx0XHR0YWJpbmRleDogZm9jdXMgPyAwIDogLTEsXG5cdFx0fTtcblxuXHRcdGlmIChodG1sKSB7XG5cdFx0XHRub2RlW1wiLmlubmVySFRNTFwiXSA9IGh0bWw7XG5cdFx0XHRyZXR1cm4gZWwoXCJsaVwiLCBub2RlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bm9kZS5jbGFzcyArPSBcIiBkaHhfbGlzdC1pdGVtLS10ZXh0XCI7XG5cdFx0XHRyZXR1cm4gZWwoXCJsaVwiLCBub2RlLCBpdGVtLnRleHQgfHwgaXRlbS52YWx1ZSk7XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9yZW5kZXJMaXN0KCk6IFZOb2RlIHtcblx0XHRjb25zdCByYW5nZSA9IHRoaXMuX2dldFJhbmdlKCk7XG5cdFx0Ly8gbWFwUmFuZ2Vcblx0XHRjb25zdCBkYXRhID0gdGhpcy5kYXRhLmdldFJhd0RhdGEocmFuZ2VbMF0sIHJhbmdlWzFdKTtcblx0XHRsZXQga2lkcyA9IGRhdGEubWFwKChvYmosIGluZGV4KSA9PiB0aGlzLl9yZW5kZXJJdGVtKG9iaiwgaW5kZXgpKTtcblxuXHRcdGlmICh0aGlzLmNvbmZpZy52aXJ0dWFsKSB7XG5cdFx0XHRraWRzID0gW1xuXHRcdFx0XHRlbChcIi5kaXZcIiwgeyBzdHlsZTogeyBoZWlnaHQ6IHJhbmdlWzJdICsgXCJweFwiIH0gfSksXG5cdFx0XHRcdC4uLmtpZHMsXG5cdFx0XHRcdGVsKFwiLmRpdlwiLCB7IHN0eWxlOiB7IGhlaWdodDogcmFuZ2VbM10gKyBcInB4XCIgfSB9KSxcblx0XHRcdF07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCJ1bC5kaHhfd2lkZ2V0LmRoeF9saXN0XCIsXG5cdFx0XHR7XG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XCJtYXgtaGVpZ2h0XCI6IHRoaXMuY29uZmlnLmhlaWdodCxcblx0XHRcdFx0XHRwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR0YWJpbmRleDogMCxcblx0XHRcdFx0Y2xhc3M6XG5cdFx0XHRcdFx0KHRoaXMuY29uZmlnLmNzcyA/IHRoaXMuY29uZmlnLmNzcyA6IFwiXCIpICtcblx0XHRcdFx0XHQodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24gJiYgdGhpcy5zZWxlY3Rpb24uZ2V0SXRlbSgpID8gXCIgZGh4X25vLXNlbGVjdC0tcG9pbnRlclwiIDogXCJcIiksXG5cdFx0XHRcdGRoeF93aWRnZXRfaWQ6IHRoaXMuX3VpZCxcblx0XHRcdFx0Li4udGhpcy5faGFuZGxlcnMsXG5cdFx0XHRcdC4uLnRoaXMuX2dldExpc3RBcmlhQXR0cnModGhpcy5jb25maWcsIHRoaXMuZGF0YS5nZXRMZW5ndGgoKSksXG5cdFx0XHR9LFxuXHRcdFx0a2lkc1xuXHRcdCk7XG5cdH1cblxuXHRtb3ZlRm9jdXMobW9kZTogbnVtYmVyLCBzdGVwPzogbnVtYmVyKTogdm9pZCB7XG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5kYXRhLmdldExlbmd0aCgpO1xuXHRcdGlmICghbGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bGV0IGlkID0gdGhpcy5fZm9jdXM7XG5cdFx0Y29uc3QgaW5kZXggPSBpZCA/IHRoaXMuZGF0YS5nZXRJbmRleChpZCkgOiAtMTtcblxuXHRcdHN0ZXAgPSBzdGVwIHx8IDE7XG5cdFx0aWYgKG1vZGUgPT09IE1PVkVfRE9XTikge1xuXHRcdFx0aWQgPSB0aGlzLmRhdGEuZ2V0SWQoTWF0aC5taW4oaW5kZXggKyBzdGVwLCBsZW5ndGggLSAxKSk7XG5cdFx0fSBlbHNlIGlmIChtb2RlID09PSBNT1ZFX1VQKSB7XG5cdFx0XHRpZCA9IHRoaXMuZGF0YS5nZXRJZChNYXRoLm1heChpbmRleCAtIHN0ZXAsIDApKTtcblx0XHR9XG5cblx0XHR0aGlzLnNldEZvY3VzKGlkKTtcblx0fVxuXG5cdHByb3RlY3RlZCBfZ2V0UmFuZ2UoKTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xuXHRcdGlmICh0aGlzLmNvbmZpZy52aXJ0dWFsKSB7XG5cdFx0XHRjb25zdCBvdmVyc2NhbkNvdW50ID0gNTtcblx0XHRcdGNvbnN0IHZpc2libGVIZWlnaHQgPSB0aGlzLl92aXNpYmxlSGVpZ2h0IHx8IHBhcnNlSW50KHRoaXMuY29uZmlnLmhlaWdodCBhcyBzdHJpbmcpO1xuXHRcdFx0Y29uc3QgaXRlbUhlaWdodCA9IHBhcnNlSW50KHRoaXMuY29uZmlnLml0ZW1IZWlnaHQgYXMgc3RyaW5nKTtcblx0XHRcdGNvbnN0IHRvdGFsID0gdGhpcy5kYXRhLmdldExlbmd0aCgpO1xuXHRcdFx0Y29uc3QgdG90YWxIZWlnaHQgPSB0aGlzLmRhdGEuZ2V0TGVuZ3RoKCkgKiBpdGVtSGVpZ2h0O1xuXHRcdFx0bGV0IHBvc2l0aW9uID0gdGhpcy5fdG9wT2Zmc2V0O1xuXG5cdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHRvIGJlIGluIFswLCB0b3RhbC12aXNpYmxlXSByYW5nZVxuXHRcdFx0cG9zaXRpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbihwb3NpdGlvbiwgdG90YWxIZWlnaHQgLSB2aXNpYmxlSGVpZ2h0KSk7XG5cdFx0XHRjb25zdCBpbmRleCA9IE1hdGguZmxvb3IocG9zaXRpb24gLyBpdGVtSGVpZ2h0KTtcblx0XHRcdGNvbnN0IGNvdW50ID0gTWF0aC5taW4odG90YWwgLSBpbmRleCwgTWF0aC5mbG9vcih2aXNpYmxlSGVpZ2h0IC8gaXRlbUhlaWdodCkgKyBvdmVyc2NhbkNvdW50KTtcblxuXHRcdFx0dGhpcy5fdG9wT2Zmc2V0ID0gcG9zaXRpb247XG5cdFx0XHRyZXR1cm4gW2luZGV4LCBjb3VudCArIGluZGV4LCBpbmRleCAqIGl0ZW1IZWlnaHQsIHRvdGFsSGVpZ2h0IC0gaXRlbUhlaWdodCAqIChjb3VudCArIGluZGV4KV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBbMCwgLTEsIDAsIDBdO1xuXHRcdH1cblx0fVxuXG5cdHByb3RlY3RlZCBfZ2V0SG90a2V5cygpOiBJSGFuZGxlcnMge1xuXHRcdHJldHVybiB7XG5cdFx0XHRhcnJvd0Rvd246IGUgPT4ge1xuXHRcdFx0XHR0aGlzLm1vdmVGb2N1cyhNT1ZFX0RPV04pO1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9LFxuXHRcdFx0YXJyb3dVcDogZSA9PiB7XG5cdFx0XHRcdHRoaXMubW92ZUZvY3VzKE1PVkVfVVApO1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9LFxuXHRcdFx0ZXNjYXBlOiAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuZWRpdEVuZChudWxsKTtcblx0XHRcdH0sXG5cdFx0XHRlbnRlcjogKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5zZWxlY3Rpb24uYWRkKHRoaXMuX2ZvY3VzKTtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShMaXN0RXZlbnRzLmNsaWNrLCBbdGhpcy5fZm9jdXMsIGVdKTtcblx0XHRcdH0sXG5cdFx0XHRcInNoaWZ0K2VudGVyXCI6IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cdFx0XHRcdHRoaXMuc2VsZWN0aW9uLmFkZCh0aGlzLl9mb2N1cywgZmFsc2UsIHRydWUpO1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKExpc3RFdmVudHMuY2xpY2ssIFt0aGlzLl9mb2N1cywgZV0pO1xuXHRcdFx0fSxcblx0XHRcdFwiY3RybCtlbnRlclwiOiAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLnNlbGVjdGlvbi5hZGQodGhpcy5fZm9jdXMsIHRydWUsIGZhbHNlKTtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShMaXN0RXZlbnRzLmNsaWNrLCBbdGhpcy5fZm9jdXMsIGVdKTtcblx0XHRcdH0sXG5cdFx0XHRcImN0cmwrYVwiOiAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pIHtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3Rpb24ucmVtb3ZlKCk7XG5cdFx0XHRcdFx0Y29uc3QgaWRzID0gdGhpcy5kYXRhLm1hcChpID0+IGkuaWQpO1xuXHRcdFx0XHRcdGlkcy5mb3JFYWNoKGlkID0+IHtcblx0XHRcdFx0XHRcdGlmICh0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbiA9PT0gXCJjdHJsQ2xpY2tcIikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnNlbGVjdGlvbi5hZGQoaWQsIHRydWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5zZWxlY3Rpb24uYWRkKGlkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG5cblx0cHJpdmF0ZSBfaW5pdEhvdEtleSgpIHtcblx0XHRjb25zdCBoYW5kbGVycyA9IHRoaXMuX2dldEhvdGtleXMoKTtcblxuXHRcdGZvciAoY29uc3Qga2V5IGluIGhhbmRsZXJzKSB7XG5cdFx0XHR0aGlzLmtleU1hbmFnZXIuYWRkSG90S2V5KGtleSwgaGFuZGxlcnNba2V5XSk7XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gdGhpcy5jb25maWcuaG90a2V5cykge1xuXHRcdFx0dGhpcy5rZXlNYW5hZ2VyLmFkZEhvdEtleShrZXksIHRoaXMuY29uZmlnLmhvdGtleXNba2V5XSk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBnZXRJdGVtQXJpYUF0dHJzKGNvbnRleHQ6IHRoaXMsIGl0ZW06IElMaXN0SXRlbSkge1xuXHRcdGNvbnN0IGdldEFyaWFHcmFiYmVkID0gKGNvbnRleHQsIGl0ZW0pID0+XG5cdFx0XHRjb250ZXh0LmNvbmZpZy5kcmFnTW9kZSAmJiAhY29udGV4dC5fZWRpdGVkXG5cdFx0XHRcdD8geyBcImFyaWEtZ3JhYmJlZFwiOiBCb29sZWFuKGl0ZW0uJGRyYWd0YXJnZXQgJiYgIWNvbnRleHQuX2VkaXRlZCkudG9TdHJpbmcoKSB9XG5cdFx0XHRcdDoge307XG5cblx0XHRjb25zdCBnZXRBcmlhUm9sZURlc2NyaXB0aW9uID0gY29udGV4dCA9PlxuXHRcdFx0Y29udGV4dC5jb25maWcuZWRpdGFibGVcblx0XHRcdFx0PyB7XG5cdFx0XHRcdFx0XHRcImFyaWEtcm9sZWRlc2NyaXB0aW9uXCI6IGAke1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0Ll9lZGl0ZWQgPyBcIlByZXNzIEVudGVyIHRvIHN0b3AgZWRpdGluZ1wiIDogXCJEb3VibGUgY2xpY2sgdG8gZWRpdCBjb250ZW50XCJcblx0XHRcdFx0XHRcdH1gLFxuXHRcdFx0XHQgIH1cblx0XHRcdFx0OiB7fTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRyb2xlOiBcIm9wdGlvblwiLFxuXHRcdFx0XCJhcmlhLXNlbGVjdGVkXCI6IGl0ZW0uJHNlbGVjdGVkID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIsXG5cdFx0XHQuLi5nZXRBcmlhR3JhYmJlZChjb250ZXh0LCBpdGVtKSxcblx0XHRcdC4uLmdldEFyaWFSb2xlRGVzY3JpcHRpb24oY29udGV4dCksXG5cdFx0fTtcblx0fVxuXG5cdHByb3RlY3RlZCBfZ2V0TGlzdEFyaWFBdHRycyhjb25maWcsIGRhdGFMZW5ndGgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cm9sZTogXCJsaXN0Ym94XCIsXG5cdFx0XHRcImFyaWEtbGFiZWxcIjogYExpc3Rib3ggJHtjb25maWcudGl0bGUgfHwgXCJcIn0sIGNvdW50IG9mIG9wdGlvbnMgPSAke2RhdGFMZW5ndGh9LiR7XG5cdFx0XHRcdGNvbmZpZy5lZGl0YWJsZSA/IFwiIENvbnRlbnQgaXMgZWRpdGFibGUuXCIgOiBcIlwiXG5cdFx0XHR9YCxcblx0XHRcdFwiYXJpYS1tdWx0aXNlbGVjdGFibGVcIjogY29uZmlnLnNlbGVjdGlvbiAmJiBjb25maWcubXVsdGlzZWxlY3Rpb24gPyBcInRydWVcIiA6IFwiZmFsc2VcIixcblx0XHRcdFwiYXJpYS1yZWFkb25seVwiOiBjb25maWcuZWRpdGFibGUgPyBcImZhbHNlXCIgOiBcInRydWVcIixcblx0XHR9O1xuXHR9XG59XG4iLCJpbXBvcnQgeyBWTm9kZSwgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBTY3JvbGxWaWV3IH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL1Njcm9sbFZpZXdcIjtcbmltcG9ydCB7IExpc3QgfSBmcm9tIFwiLi9MaXN0XCI7XG5pbXBvcnQgeyBJTGlzdENvbmZpZywgSVByb0xpc3QgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgUHJvTGlzdCBleHRlbmRzIExpc3QgaW1wbGVtZW50cyBJUHJvTGlzdCB7XG5cdHB1YmxpYyBzY3JvbGxWaWV3OiBTY3JvbGxWaWV3O1xuXG5cdGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBzdHJpbmcsIGNvbmZpZz86IElMaXN0Q29uZmlnKSB7XG5cdFx0c3VwZXIoY29udGFpbmVyLCBjb25maWcpO1xuXHRcdHRoaXMuc2Nyb2xsVmlldyA9IG5ldyBTY3JvbGxWaWV3KCgpID0+IHRoaXMuZ2V0Um9vdFZpZXcoKSk7XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cblx0ZGVzdHJ1Y3RvcigpIHtcblx0XHRzdXBlci5kZXN0cnVjdG9yKCk7XG5cdFx0dGhpcy5zY3JvbGxWaWV3ID0gbnVsbDtcblx0fVxuXG5cdHNob3dJdGVtKGlkOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRjb25zdCByb290VmlldyA9IHRoaXMuZ2V0Um9vdFZpZXcoKTtcblx0XHRpZiAoIXJvb3RWaWV3IHx8ICFyb290Vmlldy5ub2RlIHx8ICFyb290Vmlldy5ub2RlLmVsIHx8IHR5cGVvZiBpZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGxpc3RFbDogRWxlbWVudCA9IHRoaXMuZ2V0Um9vdE5vZGUoKTtcblx0XHRpZiAoIWxpc3RFbCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IHZpcnR1YWwgPSB0aGlzLmNvbmZpZy52aXJ0dWFsO1xuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5kYXRhLmdldEluZGV4KGlkKTtcblx0XHRjb25zdCBjdXJyZW50UGFnZSA9IE1hdGguZmxvb3IoaW5kZXggLyBsaXN0RWwuY2hpbGRyZW4ubGVuZ3RoKSB8fCAwO1xuXHRcdGNvbnN0IGVsID0gbGlzdEVsLmNoaWxkcmVuW2luZGV4IC0gbGlzdEVsLmNoaWxkcmVuLmxlbmd0aCAqIGN1cnJlbnRQYWdlXSBhcyBIVE1MRWxlbWVudDtcblxuXHRcdGlmICghdmlydHVhbCAmJiAhZWwpIHJldHVybjtcblx0XHRjb25zdCBoZWlnaHQgPSB2aXJ0dWFsID8gcGFyc2VJbnQodGhpcy5jb25maWcuaXRlbUhlaWdodCBhcyBzdHJpbmcpIDogZWwuY2xpZW50SGVpZ2h0O1xuXHRcdGNvbnN0IHRvcCA9IHZpcnR1YWwgPyBpbmRleCAqIGhlaWdodCA6IGVsLm9mZnNldFRvcDtcblxuXHRcdGlmICh0b3AgPj0gbGlzdEVsLnNjcm9sbFRvcCArIGxpc3RFbC5jbGllbnRIZWlnaHQgLSBoZWlnaHQpIHtcblx0XHRcdGxpc3RFbC5zY3JvbGxUbygwLCB0b3AgLSBsaXN0RWwuY2xpZW50SGVpZ2h0ICsgaGVpZ2h0KTtcblx0XHR9IGVsc2UgaWYgKHRvcCA8IGxpc3RFbC5zY3JvbGxUb3ApIHtcblx0XHRcdGxpc3RFbC5zY3JvbGxUbygwLCB0b3ApO1xuXHRcdH1cblx0fVxuXG5cdHByb3RlY3RlZCBfcmVuZGVyTGlzdCgpOiBWTm9kZSB7XG5cdFx0Y29uc3QgcmFuZ2UgPSB0aGlzLl9nZXRSYW5nZSgpO1xuXHRcdC8vIG1hcFJhbmdlXG5cdFx0Y29uc3QgZGF0YSA9IHRoaXMuZGF0YS5nZXRSYXdEYXRhKHJhbmdlWzBdLCByYW5nZVsxXSk7XG5cdFx0bGV0IGtpZHMgPSBkYXRhLm1hcCgob2JqLCBpbmRleCkgPT4gdGhpcy5fcmVuZGVySXRlbShvYmosIGluZGV4KSk7XG5cblx0XHRpZiAodGhpcy5jb25maWcudmlydHVhbCkge1xuXHRcdFx0a2lkcyA9IFtcblx0XHRcdFx0ZWwoXCIuZGl2XCIsIHsgc3R5bGU6IHsgaGVpZ2h0OiByYW5nZVsyXSArIFwicHhcIiB9IH0pLFxuXHRcdFx0XHQuLi5raWRzLFxuXHRcdFx0XHRlbChcIi5kaXZcIiwgeyBzdHlsZTogeyBoZWlnaHQ6IHJhbmdlWzNdICsgXCJweFwiIH0gfSksXG5cdFx0XHRdO1xuXHRcdH1cblxuXHRcdGNvbnN0IHNjcm9sbFZpZXdFbmFibGUgPSB0aGlzLnNjcm9sbFZpZXcgJiYgdGhpcy5zY3JvbGxWaWV3LmNvbmZpZy5lbmFibGU7XG5cdFx0Y29uc3QgY3VycmVudENsYXNzID1cblx0XHRcdCh0aGlzLmNvbmZpZy5jc3MgPyB0aGlzLmNvbmZpZy5jc3MgOiBcIlwiKSArXG5cdFx0XHQodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24gJiYgdGhpcy5zZWxlY3Rpb24uZ2V0SXRlbSgpID8gXCIgZGh4X25vLXNlbGVjdC0tcG9pbnRlclwiIDogXCJcIikgK1xuXHRcdFx0KHNjcm9sbFZpZXdFbmFibGUgPyBcIiBkaHhfbGlzdC0tc2Nyb2xsLXZpZXdcIiA6IFwiXCIpO1xuXG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCJ1bC5kaHhfd2lkZ2V0LmRoeF9saXN0XCIsXG5cdFx0XHR7XG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XCJtYXgtaGVpZ2h0XCI6IHRoaXMuY29uZmlnLmhlaWdodCxcblx0XHRcdFx0XHRwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRjbGFzczogY3VycmVudENsYXNzLFxuXHRcdFx0XHRkaHhfd2lkZ2V0X2lkOiB0aGlzLl91aWQsXG5cdFx0XHRcdC4uLnRoaXMuX2hhbmRsZXJzLFxuXHRcdFx0XHQuLi50aGlzLl9nZXRMaXN0QXJpYUF0dHJzKHRoaXMuY29uZmlnLCB0aGlzLmRhdGEuZ2V0TGVuZ3RoKCkpLFxuXHRcdFx0fSxcblx0XHRcdHNjcm9sbFZpZXdFbmFibGUgPyBbXS5jb25jYXQodGhpcy5zY3JvbGxWaWV3LnJlbmRlcihraWRzKSkgOiBraWRzXG5cdFx0KTtcblx0fVxufVxuIiwiaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgU2VsZWN0aW9uRXZlbnRzLCBJU2VsZWN0aW9uRXZlbnRzSGFuZGxlcnNNYXAsIElkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBEYXRhQ29sbGVjdGlvbiwgRGF0YUV2ZW50cywgSURhdGFFdmVudHNIYW5kbGVyc01hcCwgSURhdGFJdGVtIH0gZnJvbSBcIkBkaHgvdHMtZGF0YVwiO1xuaW1wb3J0IHsgSVNlbGVjdGlvbkNvbmZpZywgSVNlbGVjdGlvbiB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb24gaW1wbGVtZW50cyBJU2VsZWN0aW9uIHtcblx0cHVibGljIGNvbmZpZzogSVNlbGVjdGlvbkNvbmZpZztcblx0cHVibGljIGV2ZW50czogSUV2ZW50U3lzdGVtPFxuXHRcdFNlbGVjdGlvbkV2ZW50cyB8IERhdGFFdmVudHMsXG5cdFx0SVNlbGVjdGlvbkV2ZW50c0hhbmRsZXJzTWFwICYgSURhdGFFdmVudHNIYW5kbGVyc01hcFxuXHQ+O1xuXHRwcml2YXRlIF9zZWxlY3RlZDogSWRbXTtcblx0cHJpdmF0ZSBfZGF0YTogRGF0YUNvbGxlY3Rpb247XG5cdHByaXZhdGUgX25leHRTZWxlY3Rpb246IElkO1xuXG5cdGNvbnN0cnVjdG9yKGNvbmZpZzogSVNlbGVjdGlvbkNvbmZpZywgZGF0YTogRGF0YUNvbGxlY3Rpb24sIGV2ZW50czogSUV2ZW50U3lzdGVtPGFueT4pIHtcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZztcblx0XHR0aGlzLmV2ZW50cyA9IGV2ZW50cztcblx0XHR0aGlzLl9kYXRhID0gZGF0YTtcblx0XHR0aGlzLl9zZWxlY3RlZCA9IFtdO1xuXG5cdFx0dGhpcy5fZGF0YS5ldmVudHMub24oRGF0YUV2ZW50cy5yZW1vdmVBbGwsICgpID0+IHtcblx0XHRcdHRoaXMuX3NlbGVjdGVkID0gW107XG5cdFx0fSk7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLmNvbmZpZy5tdWx0aXNlbGVjdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0Y29uc3QgdHlwZXMgPSBbXCJjbGlja1wiLCBcImN0cmxDbGlja1wiXTtcblx0XHRcdGlmICghdHlwZXMuaW5jbHVkZXModGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pKSB7XG5cdFx0XHRcdHRoaXMuY29uZmlnLm11bHRpc2VsZWN0aW9uID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5fZGF0YS5ldmVudHMub24oRGF0YUV2ZW50cy5iZWZvcmVSZW1vdmUsIG9iaiA9PiB7XG5cdFx0XHR0aGlzLl9uZXh0U2VsZWN0aW9uID0gbnVsbDtcblx0XHRcdGlmICh0aGlzLl9zZWxlY3RlZC5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0Y29uc3QgbmV4dCA9IHRoaXMuX2RhdGEuZ2V0SW5kZXgob2JqLmlkKTtcblx0XHRcdFx0Y29uc3QgY291bnQgPSB0aGlzLl9kYXRhLmdldExlbmd0aCgpO1xuXHRcdFx0XHRpZiAoY291bnQgPiAxKSB7XG5cdFx0XHRcdFx0Y29uc3QgbGFzdEluZGV4ID0gY291bnQgPT0gbmV4dCAtIDEgPyBuZXh0IC0gMSA6IG5leHQgKyAxO1xuXHRcdFx0XHRcdHRoaXMuX25leHRTZWxlY3Rpb24gPSB0aGlzLl9kYXRhLmdldElkKGxhc3RJbmRleCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLl9kYXRhLmV2ZW50cy5vbihEYXRhRXZlbnRzLmFmdGVyUmVtb3ZlLCBvYmogPT4ge1xuXHRcdFx0Y29uc3QgaGFzSW5kZXggPSB0aGlzLl9zZWxlY3RlZC5pbmRleE9mKG9iai5pZCk7XG5cdFx0XHRpZiAoaGFzSW5kZXggIT09IC0xKSB7XG5cdFx0XHRcdHRoaXMuX3NlbGVjdGVkLnNwbGljZShoYXNJbmRleCwgMSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLl9uZXh0U2VsZWN0aW9uKSB7XG5cdFx0XHRcdHRoaXMuYWRkKHRoaXMuX25leHRTZWxlY3Rpb24pO1xuXHRcdFx0XHR0aGlzLl9uZXh0U2VsZWN0aW9uID0gbnVsbDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRlbmFibGUoKSB7XG5cdFx0dGhpcy5jb25maWcuZGlzYWJsZWQgPSBmYWxzZTtcblx0fVxuXHRkaXNhYmxlKCkge1xuXHRcdHRoaXMucmVtb3ZlKCk7XG5cdFx0dGhpcy5jb25maWcuZGlzYWJsZWQgPSB0cnVlO1xuXHR9XG5cdGdldElkKCk6IElkIHwgSWRbXSB8IHVuZGVmaW5lZCB7XG5cdFx0aWYgKHRoaXMuY29uZmlnLm11bHRpc2VsZWN0aW9uKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9zZWxlY3RlZFswXTtcblx0fVxuXHRnZXRJdGVtKCk6IElEYXRhSXRlbSB8IElEYXRhSXRlbVtdIHtcblx0XHRpZiAodGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb24pIHtcblx0XHRcdHJldHVybiB0aGlzLl9zZWxlY3RlZC5tYXAoaWQgPT4gdGhpcy5fZGF0YS5nZXRJdGVtKGlkKSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX3NlbGVjdGVkLmxlbmd0aCA/IHRoaXMuX2RhdGEuZ2V0SXRlbSh0aGlzLl9zZWxlY3RlZFswXSkgOiBudWxsO1xuXHR9XG5cdGNvbnRhaW5zKGlkPzogSWQpOiBib29sZWFuIHtcblx0XHRpZiAoaWQpIHtcblx0XHRcdHJldHVybiB0aGlzLl9zZWxlY3RlZC5pbmNsdWRlcyhpZCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9zZWxlY3RlZC5sZW5ndGggPiAwO1xuXHR9XG5cdHJlbW92ZShpZD86IElkKTogdm9pZCB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHR0aGlzLl91bnNlbGVjdEl0ZW0oaWQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9zZWxlY3RlZC5mb3JFYWNoKHNlbGVjdGVkSWQgPT4gdGhpcy5fdW5zZWxlY3RJdGVtKHNlbGVjdGVkSWQpKTtcblx0XHRcdHRoaXMuX3NlbGVjdGVkID0gW107XG5cdFx0fVxuXHR9XG5cdGFkZChpZD86IElkLCBpc0N0cmw/OiBib29sZWFuLCBpc1NoaWZ0PzogYm9vbGVhbiwgc2lsZW50PzogYm9vbGVhbikge1xuXHRcdGlmICh0aGlzLmNvbmZpZy5kaXNhYmxlZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgaWQgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdGNvbnN0IHVuU2VsZWN0ZWQgPSB0aGlzLl9kYXRhLnNlcmlhbGl6ZSgpLmZpbHRlcigoeyBpZCB9KSA9PiB7XG5cdFx0XHRcdHJldHVybiAhdGhpcy5fc2VsZWN0ZWQuaW5jbHVkZXMoaWQpO1xuXHRcdFx0fSk7XG5cdFx0XHR1blNlbGVjdGVkLmZvckVhY2goKHsgaWQgfSkgPT4ge1xuXHRcdFx0XHR0aGlzLl9hZGRNdWx0aShpZCwgc2lsZW50KTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IG11bHRpID0gdGhpcy5jb25maWcubXVsdGlzZWxlY3Rpb247XG5cdFx0aWYgKGlzU2hpZnQgJiYgdGhpcy5fc2VsZWN0ZWQubGVuZ3RoICYmIG11bHRpKSB7XG5cdFx0XHR0aGlzLl9hZGRNdWx0aShpZCwgc2lsZW50KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fYWRkU2luZ2xlKGlkLCBtdWx0aSAmJiAobXVsdGkgIT09IFwiY3RybENsaWNrXCIgfHwgaXNDdHJsKSwgc2lsZW50KTtcblx0XHR9XG5cdH1cblx0ZGVzdHJ1Y3RvcigpIHtcblx0XHR0aGlzLl9zZWxlY3RlZC5mb3JFYWNoKHNlbGVjdGVkSWQgPT4gdGhpcy5fdW5zZWxlY3RJdGVtKHNlbGVjdGVkSWQsIHRydWUpKTtcblx0fVxuXHRwcml2YXRlIF9hZGRNdWx0aShpZDogSWQsIHNpbGVudD86IGJvb2xlYW4pIHtcblx0XHRjb25zdCBsYXN0ID0gdGhpcy5fc2VsZWN0ZWRbdGhpcy5fc2VsZWN0ZWQubGVuZ3RoIC0gMV07XG5cdFx0bGV0IGkxID0gdGhpcy5fZGF0YS5nZXRJbmRleChsYXN0KTtcblx0XHRsZXQgaTIgPSB0aGlzLl9kYXRhLmdldEluZGV4KGlkKTtcblxuXHRcdGlmIChpMSA+IGkyKSB7XG5cdFx0XHRbaTEsIGkyXSA9IFtpMiwgaTFdO1xuXHRcdH1cblxuXHRcdGZvciAoaTE7IGkxIDw9IGkyOyBpMSsrKSB7XG5cdFx0XHRjb25zdCBpZCA9IHRoaXMuX2RhdGEuZ2V0SWQoaTEpO1xuXHRcdFx0dGhpcy5fc2VsZWN0SXRlbShpZCwgc2lsZW50KTtcblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfYWRkU2luZ2xlKGlkOiBJZCwgaXNDdHJsPzogYm9vbGVhbiwgc2lsZW50PzogYm9vbGVhbikge1xuXHRcdGlmICghaXNDdHJsKSB7XG5cdFx0XHR0aGlzLl9zZWxlY3RlZC5mb3JFYWNoKHNlbGVjdGVkSWQgPT4ge1xuXHRcdFx0XHRpZiAoc2VsZWN0ZWRJZCAhPSBpZCkgdGhpcy5fdW5zZWxlY3RJdGVtKHNlbGVjdGVkSWQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKGlzQ3RybCAmJiB0aGlzLl9zZWxlY3RlZC5pbmNsdWRlcyhpZCkpIHtcblx0XHRcdHRoaXMuX3Vuc2VsZWN0SXRlbShpZCwgc2lsZW50KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fc2VsZWN0SXRlbShpZCwgc2lsZW50KTtcblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfc2VsZWN0SXRlbShpZDogSWQsIHNpbGVudD86IGJvb2xlYW4pIHtcblx0XHRjb25zdCBpdGVtID0gdGhpcy5fZGF0YS5nZXRJdGVtKGlkKTtcblx0XHRpZiAoIWl0ZW0gfHwgdGhpcy5fZGF0YS5nZXRNZXRhKGl0ZW0sIFwic2VsZWN0ZWRcIikpIHJldHVybjtcblxuXHRcdGlmICghc2lsZW50ICYmICF0aGlzLmV2ZW50cy5maXJlKFNlbGVjdGlvbkV2ZW50cy5iZWZvcmVTZWxlY3QsIFtpZF0pKSByZXR1cm47XG5cdFx0dGhpcy5fc2VsZWN0ZWQucHVzaChpZCk7XG5cdFx0dGhpcy5fZGF0YS5zZXRNZXRhKGl0ZW0sIFwic2VsZWN0ZWRcIiwgdHJ1ZSk7XG5cdFx0aWYgKCFzaWxlbnQpIHRoaXMuZXZlbnRzLmZpcmUoU2VsZWN0aW9uRXZlbnRzLmFmdGVyU2VsZWN0LCBbaWRdKTtcblx0fVxuXHRwcml2YXRlIF91bnNlbGVjdEl0ZW0oaWQ6IElkLCBzaWxlbnQ/OiBib29sZWFuKSB7XG5cdFx0aWYgKCFzaWxlbnQgJiYgIXRoaXMuZXZlbnRzLmZpcmUoU2VsZWN0aW9uRXZlbnRzLmJlZm9yZVVuU2VsZWN0LCBbaWRdKSkgcmV0dXJuO1xuXHRcdHRoaXMuX3NlbGVjdGVkID0gdGhpcy5fc2VsZWN0ZWQuZmlsdGVyKHNlbGVjdGVkSWQgPT4gc2VsZWN0ZWRJZCAhPT0gaWQpO1xuXHRcdHRoaXMuX2RhdGEuc2V0TWV0YSh0aGlzLl9kYXRhLmdldEl0ZW0oaWQpLCBcInNlbGVjdGVkXCIsIGZhbHNlKTtcblx0XHRpZiAoIXNpbGVudCkgdGhpcy5ldmVudHMuZmlyZShTZWxlY3Rpb25FdmVudHMuYWZ0ZXJVblNlbGVjdCwgW2lkXSk7XG5cdH1cbn1cbiIsImltcG9ydCB7IGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgSUxpc3RDb25maWcsIExpc3RFdmVudHMsIElMaXN0SXRlbSB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gXCIuLi9MaXN0XCI7XG5cbmV4cG9ydCBjbGFzcyBJbnB1dEVkaXRvciB7XG5cdHByb3RlY3RlZCBfaGFuZGxlcnM6IHsgW2tleTogc3RyaW5nXTogKC4uLmFyZ3MpID0+IHZvaWQgfTtcblx0cHJvdGVjdGVkIF9tb2RlOiBib29sZWFuO1xuXHRwcm90ZWN0ZWQgX2NvbmZpZzogSUxpc3RDb25maWc7XG5cdHByb3RlY3RlZCBfbGlzdDogTGlzdDtcblx0cHJvdGVjdGVkIF9pdGVtOiBJTGlzdEl0ZW07XG5cdHByb3RlY3RlZCBfaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cblx0Y29uc3RydWN0b3IoaXRlbTogYW55LCBsaXN0OiBMaXN0KSB7XG5cdFx0dGhpcy5fbGlzdCA9IGxpc3Q7XG5cdFx0dGhpcy5fY29uZmlnID0gbGlzdC5jb25maWc7XG5cdFx0dGhpcy5faXRlbSA9IGl0ZW07XG5cdFx0dGhpcy5fbGlzdC5ldmVudHMub24oTGlzdEV2ZW50cy5mb2N1c0NoYW5nZSwgKGluZGV4LCBpZCkgPT4ge1xuXHRcdFx0aWYgKHRoaXMuX21vZGUgJiYgaWQgIT09IHRoaXMuX2l0ZW0uaWQpIHtcblx0XHRcdFx0dGhpcy5lbmRFZGl0KCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dGhpcy5faW5pdEhhbmRsZXJzKCk7XG5cdH1cblx0ZW5kRWRpdCgpIHtcblx0XHRpZiAodGhpcy5faW5wdXQpIHtcblx0XHRcdGNvbnN0IHZhbHVlID0gdGhpcy5faW5wdXQudmFsdWU7XG5cdFx0XHRpZiAodGhpcy5fbGlzdC5ldmVudHMuZmlyZShMaXN0RXZlbnRzLmJlZm9yZUVkaXRFbmQsIFt2YWx1ZSwgdGhpcy5faXRlbS5pZF0pKSB7XG5cdFx0XHRcdHRoaXMuX2lucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuX2hhbmRsZXJzLm9uQmx1cik7XG5cdFx0XHRcdHRoaXMuX2lucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5faGFuZGxlcnMub25DaGFuZ2UpO1xuXHRcdFx0XHR0aGlzLl9oYW5kbGVycyA9IHt9O1xuXHRcdFx0XHR0aGlzLl9tb2RlID0gZmFsc2U7XG5cblx0XHRcdFx0dGhpcy5fbGlzdC5ldmVudHMuZmlyZShMaXN0RXZlbnRzLmFmdGVyRWRpdEVuZCwgW3ZhbHVlLCB0aGlzLl9pdGVtLmlkXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9pbnB1dC5mb2N1cygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHR0b0hUTUwoKSB7XG5cdFx0dGhpcy5fbW9kZSA9IHRydWU7XG5cdFx0Y29uc3QgeyBpdGVtSGVpZ2h0IH0gPSB0aGlzLl9jb25maWc7XG5cdFx0cmV0dXJuIGVsKFwiLmRoeF9pbnB1dF9fd3JhcHBlclwiLCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIgfSwgW1xuXHRcdFx0ZWwoXCJkaXYuZGh4X2lucHV0X19jb250YWluZXJcIiwgeyByb2xlOiBcInByZXNlbnRhdGlvblwiIH0sIFtcblx0XHRcdFx0ZWwoXCJpbnB1dC5kaHhfaW5wdXRcIiwge1xuXHRcdFx0XHRcdGNsYXNzOiB0aGlzLl9pdGVtLmNzcyA/IFwiIFwiICsgdGhpcy5faXRlbS5jc3MgOiBcIlwiLFxuXHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRoZWlnaHQ6IGl0ZW1IZWlnaHQsXG5cdFx0XHRcdFx0XHR3aWR0aDogXCIxMDAlXCIsXG5cdFx0XHRcdFx0XHRwYWRkaW5nOiBcIjhweCAxMnB4XCIsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRfaG9va3M6IHtcblx0XHRcdFx0XHRcdGRpZEluc2VydDogdGhpcy5faGFuZGxlcnMuZGlkSW5zZXJ0LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0X2tleTogdGhpcy5faXRlbS5pZCxcblx0XHRcdFx0XHRkaHhfaWQ6IHRoaXMuX2l0ZW0uaWQsXG5cdFx0XHRcdH0pLFxuXHRcdFx0XSksXG5cdFx0XSk7XG5cdH1cblx0cHJvdGVjdGVkIF9pbml0SGFuZGxlcnMoKSB7XG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHRvbkJsdXI6ICgpID0+IHtcblx0XHRcdFx0dGhpcy5lbmRFZGl0KCk7XG5cdFx0XHR9LFxuXHRcdFx0b25DaGFuZ2U6ICgpID0+IHtcblx0XHRcdFx0dGhpcy5lbmRFZGl0KCk7XG5cdFx0XHR9LFxuXHRcdFx0ZGlkSW5zZXJ0OiAobm9kZT86IGFueSkgPT4ge1xuXHRcdFx0XHRjb25zdCBpbnB1dCA9IG5vZGUuZWw7XG5cdFx0XHRcdHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cdFx0XHRcdGlucHV0LmZvY3VzKCk7XG5cdFx0XHRcdGlucHV0LnZhbHVlID0gdGhpcy5faXRlbS52YWx1ZTtcblx0XHRcdFx0aW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgaW5wdXQudmFsdWUubGVuZ3RoKTtcblx0XHRcdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLl9oYW5kbGVycy5vbkNoYW5nZSk7XG5cdFx0XHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuX2hhbmRsZXJzLm9uQmx1cik7XG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cbn1cbiIsImltcG9ydCB7IElucHV0RWRpdG9yIH0gZnJvbSBcIi4vSW5wdXRFZGl0b3JcIjtcbmltcG9ydCB7IExpc3QgfSBmcm9tIFwiLi4vTGlzdFwiO1xuaW1wb3J0IHsgSUxpc3RJdGVtIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFZGl0b3IoaXRlbTogSUxpc3RJdGVtLCBsaXN0OiBMaXN0KSB7XG5cdHJldHVybiBuZXcgSW5wdXRFZGl0b3IoaXRlbSwgbGlzdCk7XG59XG4iLCJpbXBvcnQge1xuXHRJRGF0YUl0ZW0sXG5cdERhdGFDb2xsZWN0aW9uLFxuXHREYXRhRXZlbnRzLFxuXHREcmFnRXZlbnRzLFxuXHRJRGF0YUV2ZW50c0hhbmRsZXJzTWFwLFxuXHRJRHJhZ0V2ZW50c0hhbmRsZXJzTWFwLFxuXHRJRHJhZ0NvbmZpZyxcbn0gZnJvbSBcIkBkaHgvdHMtZGF0YVwiO1xuaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgSUhhbmRsZXJzLCBTZWxlY3Rpb25FdmVudHMsIElTZWxlY3Rpb25FdmVudHNIYW5kbGVyc01hcCwgSWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcbmltcG9ydCB7IElLZXlNYW5hZ2VyIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL0tleU1hbmFnZXJcIjtcbmltcG9ydCB7IFNjcm9sbFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vU2Nyb2xsVmlld1wiO1xuXG5leHBvcnQgdHlwZSBNdWx0aXNlbGVjdGlvbk1vZGUgPSBcImNsaWNrXCIgfCBcImN0cmxDbGlja1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElMaXN0Q29uZmlnIGV4dGVuZHMgSURyYWdDb25maWcge1xuXHR0ZW1wbGF0ZT86IChvYmo6IElEYXRhSXRlbSkgPT4gc3RyaW5nO1xuXHRkYXRhPzogRGF0YUNvbGxlY3Rpb248YW55PiB8IGFueVtdO1xuXHR2aXJ0dWFsPzogYm9vbGVhbjtcblx0aXRlbUhlaWdodD86IG51bWJlciB8IHN0cmluZztcblx0Y3NzPzogc3RyaW5nO1xuXHRoZWlnaHQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cdHNlbGVjdGlvbj86IGJvb2xlYW47XG5cdG11bHRpc2VsZWN0aW9uPzogYm9vbGVhbiB8IE11bHRpc2VsZWN0aW9uTW9kZTtcblx0a2V5TmF2aWdhdGlvbj86IGJvb2xlYW4gfCAoKCkgPT4gYm9vbGVhbik7IC8vIHdoZW4gcmV0dXJuIHRydWUsIG5hdmlnYXRpb24gd29ya1xuXHRlZGl0YWJsZT86IGJvb2xlYW47XG5cdGhvdGtleXM/OiBJSGFuZGxlcnM7XG5cdGV2ZW50SGFuZGxlcnM/OiB7XG5cdFx0W2tleTogc3RyaW5nXTogYW55O1xuXHR9O1xuXG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0ZWRpdGluZz86IGJvb2xlYW47XG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0bXVsdGlzZWxlY3Rpb25Nb2RlPzogTXVsdGlzZWxlY3Rpb25Nb2RlO1xufVxuXG5leHBvcnQgZW51bSBMaXN0RXZlbnRzIHtcblx0Y2xpY2sgPSBcImNsaWNrXCIsXG5cdGRvdWJsZUNsaWNrID0gXCJkb3VibGVjbGlja1wiLFxuXHRmb2N1c0NoYW5nZSA9IFwiZm9jdXNjaGFuZ2VcIixcblx0YmVmb3JlRWRpdFN0YXJ0ID0gXCJiZWZvcmVFZGl0U3RhcnRcIixcblx0YWZ0ZXJFZGl0U3RhcnQgPSBcImFmdGVyRWRpdFN0YXJ0XCIsXG5cdGJlZm9yZUVkaXRFbmQgPSBcImJlZm9yZUVkaXRFbmRcIixcblx0YWZ0ZXJFZGl0RW5kID0gXCJhZnRlckVkaXRFbmRcIixcblx0aXRlbVJpZ2h0Q2xpY2sgPSBcIml0ZW1SaWdodENsaWNrXCIsXG5cdGl0ZW1Nb3VzZU92ZXIgPSBcIml0ZW1Nb3VzZU92ZXJcIixcblxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGNvbnRleHRtZW51ID0gXCJjb250ZXh0bWVudVwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMaXN0RXZlbnRIYW5kbGVyc01hcCB7XG5cdFtrZXk6IHN0cmluZ106ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuXHRbTGlzdEV2ZW50cy5jbGlja106IChpZDogSWQsIGU6IEV2ZW50KSA9PiB2b2lkO1xuXHRbTGlzdEV2ZW50cy5pdGVtTW91c2VPdmVyXTogKGlkOiBJZCwgZTogRXZlbnQpID0+IHZvaWQ7XG5cdFtMaXN0RXZlbnRzLmRvdWJsZUNsaWNrXTogKGlkOiBJZCwgZTogRXZlbnQpID0+IHZvaWQ7XG5cdFtMaXN0RXZlbnRzLml0ZW1SaWdodENsaWNrXTogKGlkOiBJZCwgZTogTW91c2VFdmVudCkgPT4gdm9pZDtcblx0W0xpc3RFdmVudHMuZm9jdXNDaGFuZ2VdOiAoZm9jdXNJbmRleDogbnVtYmVyLCBpZDogSWQpID0+IHZvaWQ7XG5cdFtMaXN0RXZlbnRzLmJlZm9yZUVkaXRTdGFydF06IChpZDogSWQpID0+IHZvaWQgfCBib29sZWFuO1xuXHRbTGlzdEV2ZW50cy5hZnRlckVkaXRTdGFydF06IChpZDogSWQpID0+IHZvaWQ7XG5cdFtMaXN0RXZlbnRzLmJlZm9yZUVkaXRFbmRdOiAodmFsdWU6IHN0cmluZywgaWQ6IElkKSA9PiB2b2lkIHwgYm9vbGVhbjtcblx0W0xpc3RFdmVudHMuYWZ0ZXJFZGl0RW5kXTogKHZhbHVlOiBzdHJpbmcsIGlkOiBJZCkgPT4gdm9pZDtcblxuXHRbTGlzdEV2ZW50cy5jb250ZXh0bWVudV06IChpZDogSWQsIGU6IE1vdXNlRXZlbnQpID0+IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2VsZWN0aW9uQ29uZmlnIHtcblx0bXVsdGlzZWxlY3Rpb24/OiBib29sZWFuIHwgTXVsdGlzZWxlY3Rpb25Nb2RlO1xuXHRkaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxpc3Q8VCA9IGFueT4ge1xuXHRjb25maWc6IElMaXN0Q29uZmlnO1xuXHRkYXRhOiBEYXRhQ29sbGVjdGlvbjxUPjtcblx0ZXZlbnRzOiBJRXZlbnRTeXN0ZW08XG5cdFx0RGF0YUV2ZW50cyB8IExpc3RFdmVudHMgfCBEcmFnRXZlbnRzLFxuXHRcdElMaXN0RXZlbnRIYW5kbGVyc01hcCAmIElEYXRhRXZlbnRzSGFuZGxlcnNNYXAgJiBJRHJhZ0V2ZW50c0hhbmRsZXJzTWFwXG5cdD47XG5cdHNlbGVjdGlvbjogSVNlbGVjdGlvbjtcblx0a2V5TWFuYWdlcjogSUtleU1hbmFnZXI7XG5cdHBhaW50KCk6IHZvaWQ7XG5cdGRlc3RydWN0b3IoKTogdm9pZDtcblx0ZWRpdEl0ZW0oaWQ6IElkKTogdm9pZDtcblx0Z2V0Rm9jdXNJdGVtKCk6IFQ7XG5cdHNldEZvY3VzKGlkOiBJZCk6IHZvaWQ7XG5cdGdldEZvY3VzKCk6IElkO1xuXHRzaG93SXRlbShpZDogSWQpOiB2b2lkO1xuXG5cdC8qKiBAZGVwcmVjYXRlZCBTZWUgYSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuZGh0bWx4LmNvbS8gKi9cblx0ZGlzYWJsZVNlbGVjdGlvbigpOiB2b2lkO1xuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGVuYWJsZVNlbGVjdGlvbigpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9MaXN0IGV4dGVuZHMgSUxpc3Qge1xuXHRzY3JvbGxWaWV3OiBTY3JvbGxWaWV3O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3Rpb248VCA9IGFueT4ge1xuXHRjb25maWc6IElTZWxlY3Rpb25Db25maWc7XG5cdGV2ZW50czogSUV2ZW50U3lzdGVtPFNlbGVjdGlvbkV2ZW50cyB8IERhdGFFdmVudHMsIElTZWxlY3Rpb25FdmVudHNIYW5kbGVyc01hcCAmIElEYXRhRXZlbnRzSGFuZGxlcnNNYXA+O1xuXHRnZXRJZCgpOiBJZCB8IElkW10gfCB1bmRlZmluZWQ7XG5cdGdldEl0ZW0oKTogVDtcblx0Y29udGFpbnMoaWQ/OiBJZCk6IGJvb2xlYW47XG5cdHJlbW92ZShpZD86IElkKTogdm9pZDtcblx0YWRkKGlkPzogSWQsIGlzU2hpZnQ/OiBib29sZWFuLCBpc0N0cmw/OiBib29sZWFuLCBzaWxlbnQ/OiBib29sZWFuKTogdm9pZDtcblx0ZW5hYmxlKCk6IHZvaWQ7XG5cdGRpc2FibGUoKTogdm9pZDtcblx0ZGVzdHJ1Y3RvcigpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMaXN0SXRlbSB7XG5cdFtrZXk6IHN0cmluZ106IGFueTtcbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvbWVzc2FnZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9hbGVydFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9jb25maXJtXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL3Rvb2x0aXBcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvdHlwZXNcIjtcbiIsImltcG9ydCBsb2NhbGUgZnJvbSBcIi4vbG9jYWxlcy9lblwiO1xuaW1wb3J0IHsgYmxvY2tTY3JlZW4gfSBmcm9tIFwiLi9jb21tb25cIjtcbmltcG9ydCB7IElBbGVydFByb3BzIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IHVpZCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGVydChwcm9wczogSUFsZXJ0UHJvcHMpIHtcblx0Y29uc3QgYXBwbHkgPSBwcm9wcy5idXR0b25zICYmIHByb3BzLmJ1dHRvbnNbMF0gPyBwcm9wcy5idXR0b25zWzBdIDogbG9jYWxlLmFwcGx5O1xuXG5cdGNvbnN0IHVuYmxvY2sgPSBibG9ja1NjcmVlbihwcm9wcy5ibG9ja2VyQ3NzKTtcblxuXHRyZXR1cm4gbmV3IFByb21pc2UocmVzID0+IHtcblx0XHRjb25zdCBjb250ZW50SWQgPSBgZGh4X2FsZXJ0X18ke3VpZCgpfV9jb250ZW50YDtcblx0XHRjb25zdCBoZWFkZXJJZCA9IGBkaHhfYWxlcnRfXyR7dWlkKCl9X2hlYWRlcmA7XG5cdFx0Y29uc3QgYWxlcnRCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGFsZXJ0Qm94LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJhbGVydFwiKTtcblx0XHRhbGVydEJveC5zZXRBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIsIFwidHJ1ZVwiKTtcblx0XHRwcm9wcy50ZXh0ICYmIGFsZXJ0Qm94LnNldEF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIiwgY29udGVudElkKTtcblx0XHRwcm9wcy5oZWFkZXIgJiYgYWxlcnRCb3guc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGhlYWRlcklkKTtcblx0XHRhbGVydEJveC5jbGFzc05hbWUgPSBcImRoeF93aWRnZXQgZGh4X2FsZXJ0IFwiICsgKHByb3BzLmNzcyB8fCBcIlwiKTtcblxuXHRcdGNvbnN0IGNsb3NlQWxlcnQgPSBlID0+IHtcblx0XHRcdGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIiB8fCBlLmtleSA9PT0gXCJFc2NcIikge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG5cdFx0XHRcdGNsb3NlKGUpO1xuXHRcdFx0XHRyZXMoZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBjbG9zZShlKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR1bmJsb2NrKCk7XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGFsZXJ0Qm94KTtcblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGNsb3NlQWxlcnQpO1xuXHRcdH1cblxuXHRcdGFsZXJ0Qm94LmlubmVySFRNTCA9IGBcblx0XHRcdCR7cHJvcHMuaGVhZGVyID8gYDxkaXYgaWQ9JHtoZWFkZXJJZH0gY2xhc3M9XCJkaHhfYWxlcnRfX2hlYWRlclwiPiAke3Byb3BzLmhlYWRlcn0gPC9kaXY+YCA6IFwiXCJ9XG5cdFx0XHQke3Byb3BzLnRleHQgPyBgPGRpdiBpZD0ke2NvbnRlbnRJZH0gY2xhc3M9XCJkaHhfYWxlcnRfX2NvbnRlbnRcIj4ke3Byb3BzLnRleHR9PC9kaXY+YCA6IGBgfVxuXHRcdFx0PGRpdiBjbGFzcz1cImRoeF9hbGVydF9fZm9vdGVyICR7XG5cdFx0XHRcdHByb3BzLmJ1dHRvbnNBbGlnbm1lbnQgPyBcImRoeF9hbGVydF9fZm9vdGVyLS1cIiArIHByb3BzLmJ1dHRvbnNBbGlnbm1lbnQgOiBcIlwiXG5cdFx0XHR9XCI+XG5cdFx0XHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGFyaWEtbGFiZWw9XCJjb25maXJtXCIgY2xhc3M9XCJkaHhfYWxlcnRfX2FwcGx5LWJ1dHRvbiBkaHhfYnV0dG9uIGRoeF9idXR0b24tLXZpZXdfZmxhdCBkaHhfYnV0dG9uLS1jb2xvcl9wcmltYXJ5IGRoeF9idXR0b24tLXNpemVfbWVkaXVtXCI+JHthcHBseX08L2J1dHRvbj5cblx0XHRcdDwvZGl2PmA7XG5cblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFsZXJ0Qm94KTtcblx0XHQoYWxlcnRCb3gucXVlcnlTZWxlY3RvcihcIi5kaHhfYWxlcnRfX2FwcGx5LWJ1dHRvblwiKSBhcyBIVE1MRWxlbWVudCkuZm9jdXMoKTtcblxuXHRcdGFsZXJ0Qm94LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGUgPT4ge1xuXHRcdFx0Y2xvc2UoZSk7XG5cdFx0XHRyZXModHJ1ZSk7XG5cdFx0fSk7XG5cblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBjbG9zZUFsZXJ0KTtcblx0fSk7XG59XG4iLCJmdW5jdGlvbiBibG9ja0tleXMoZTogS2V5Ym9hcmRFdmVudCkge1xuXHRjb25zdCBhY3RpdmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHRpZiAoYWN0aXZlLmNsYXNzTGlzdC5jb250YWlucyhcImRoeF9hbGVydF9fYXBwbHktYnV0dG9uXCIpICYmIGUua2V5ID09PSBcIkVudGVyXCIpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKFxuXHRcdCFhY3RpdmUuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X2FsZXJ0X19jb25maXJtLXJlamVjdFwiKSAmJlxuXHRcdCFhY3RpdmUuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X2FsZXJ0X19jb25maXJtLWFwbHlcIilcblx0KSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9XG59XG5leHBvcnQgZnVuY3Rpb24gYmxvY2tTY3JlZW4oY3NzPzogc3RyaW5nKSB7XG5cdGNvbnN0IGJsb2NrZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRibG9ja2VyLmNsYXNzTmFtZSA9IFwiZGh4X2FsZXJ0X19vdmVybGF5IFwiICsgKGNzcyB8fCBcIlwiKTtcblx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChibG9ja2VyKTtcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgYmxvY2tLZXlzKTtcblx0cmV0dXJuICgpID0+IHtcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGJsb2NrZXIpO1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGJsb2NrS2V5cyk7XG5cdH07XG59XG4iLCJpbXBvcnQgbG9jYWxlIGZyb20gXCIuL2xvY2FsZXMvZW5cIjtcbmltcG9ydCB7IGJsb2NrU2NyZWVuIH0gZnJvbSBcIi4vY29tbW9uXCI7XG5pbXBvcnQgeyBJQ29uZmlybVByb3BzIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IHVpZCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maXJtKHByb3BzOiBJQ29uZmlybVByb3BzKSB7XG5cdHByb3BzLmJ1dHRvbnNBbGlnbm1lbnQgPSBwcm9wcy5idXR0b25zQWxpZ25tZW50IHx8IFwicmlnaHRcIjtcblxuXHRjb25zdCBhcHBseSA9IHByb3BzLmJ1dHRvbnMgJiYgcHJvcHMuYnV0dG9uc1sxXSA/IHByb3BzLmJ1dHRvbnNbMV0gOiBsb2NhbGUuYXBwbHk7XG5cdGNvbnN0IHJlamVjdCA9IHByb3BzLmJ1dHRvbnMgJiYgcHJvcHMuYnV0dG9uc1swXSA/IHByb3BzLmJ1dHRvbnNbMF0gOiBsb2NhbGUucmVqZWN0O1xuXG5cdGNvbnN0IHVuYmxvY2sgPSBibG9ja1NjcmVlbihwcm9wcy5ibG9ja2VyQ3NzKTtcblxuXHRyZXR1cm4gbmV3IFByb21pc2UocmVzID0+IHtcblx0XHRjb25zdCBjb25maXJtQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRjb25maXJtQm94LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJhbGVydGRpYWxvZ1wiKTtcblx0XHRjb25maXJtQm94LnNldEF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIiwgXCJ0cnVlXCIpO1xuXHRcdGNvbnN0IGhlYWRlcklkID0gcHJvcHMuaGVhZGVyICYmIHVpZCgpO1xuXHRcdGNvbnN0IHRleHRJZCA9IHByb3BzLmhlYWRlciAmJiB1aWQoKTtcblx0XHR0ZXh0SWQgJiYgY29uZmlybUJveC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIHRleHRJZCk7XG5cdFx0aGVhZGVySWQgJiYgY29uZmlybUJveC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsbGVkYnlcIiwgaGVhZGVySWQpO1xuXHRcdGxldCBmb2N1c0l0ZW07XG5cdFx0Y29uc3QgYW5zd2VyID0gdmFsID0+IHtcblx0XHRcdHVuYmxvY2soKTtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcblx0XHRcdGNvbmZpcm1Cb3gucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsaWNrSGFuZGxlcik7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBjbG9zZUNvbmZpcm0pO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb25maXJtQm94KTtcblx0XHRcdHJlcyh2YWwpO1xuXHRcdH07XG5cblx0XHRjb25zdCBjbGlja0hhbmRsZXIgPSBlID0+IHtcblx0XHRcdGlmICgoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnRhZ05hbWUgPT09IFwiQlVUVE9OXCIpIHtcblx0XHRcdFx0YW5zd2VyKChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X2FsZXJ0X19jb25maXJtLWFwbHlcIikpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRjb25zdCBjbG9zZUNvbmZpcm0gPSBlID0+IHtcblx0XHRcdGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIiB8fCBlLmtleSA9PT0gXCJFc2NcIikge1xuXHRcdFx0XHQoY29uZmlybUJveC5xdWVyeVNlbGVjdG9yKFwiLmRoeF9hbGVydF9fY29uZmlybS1hcGx5XCIpIGFzIEhUTUxFbGVtZW50KS5mb2N1cygpO1xuXHRcdFx0XHRhbnN3ZXIoKGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QuY29udGFpbnMoXCJkaHhfYWxlcnRfX2NvbmZpcm0tcmVqZWN0XCIpKTtcblx0XHRcdH0gZWxzZSBpZiAoZS5rZXkgPT09IFwiVGFiXCIpIHtcblx0XHRcdFx0aWYgKGZvY3VzSXRlbSA9PT0gXCJhcGx5XCIpIHtcblx0XHRcdFx0XHRmb2N1c0l0ZW0gPSBcInJlamVjdFwiO1xuXHRcdFx0XHRcdChjb25maXJtQm94LnF1ZXJ5U2VsZWN0b3IoXCIuZGh4X2FsZXJ0X19jb25maXJtLXJlamVjdFwiKSBhcyBIVE1MRWxlbWVudCkuZm9jdXMoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmb2N1c0l0ZW0gPSBcImFwbHlcIjtcblx0XHRcdFx0XHQoY29uZmlybUJveC5xdWVyeVNlbGVjdG9yKFwiLmRoeF9hbGVydF9fY29uZmlybS1hcGx5XCIpIGFzIEhUTUxFbGVtZW50KS5mb2N1cygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uZmlybUJveC5jbGFzc05hbWUgPSBcImRoeF93aWRnZXQgZGh4X2FsZXJ0IGRoeF9hbGVydC0tY29uZmlybVwiICsgKHByb3BzLmNzcyA/IFwiIFwiICsgcHJvcHMuY3NzIDogXCJcIik7XG5cblx0XHRjb25maXJtQm94LmlubmVySFRNTCA9IGBcblx0XHQke3Byb3BzLmhlYWRlciA/IGA8ZGl2IGNsYXNzPVwiZGh4X2FsZXJ0X19oZWFkZXJcIiBpZD0ke2hlYWRlcklkfT4gJHtwcm9wcy5oZWFkZXJ9IDwvZGl2PmAgOiBcIlwifVxuXHRcdCR7cHJvcHMudGV4dCA/IGA8ZGl2IGNsYXNzPVwiZGh4X2FsZXJ0X19jb250ZW50XCIgaWQ9JHt0ZXh0SWR9PiR7cHJvcHMudGV4dH08L2Rpdj5gIDogYGB9XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiZGh4X2FsZXJ0X19mb290ZXIgJHtcblx0XHRcdFx0cHJvcHMuYnV0dG9uc0FsaWdubWVudCA/IFwiZGh4X2FsZXJ0X19mb290ZXItLVwiICsgcHJvcHMuYnV0dG9uc0FsaWdubWVudCA6IFwiXCJcblx0XHRcdH1cIj5cblx0XHRcdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgYXJpYS1sYWJlbD1cInJlamVjdFwiIGNsYXNzPVwiZGh4X2FsZXJ0X19jb25maXJtLXJlamVjdCBkaHhfYnV0dG9uIGRoeF9idXR0b24tLXZpZXdfbGluayBkaHhfYnV0dG9uLS1jb2xvcl9wcmltYXJ5IGRoeF9idXR0b24tLXNpemVfbWVkaXVtXCI+JHtyZWplY3R9PC9idXR0b24+XG5cdFx0XHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiICBhcmlhLWxhYmVsPVwiYXBseVwiY2xhc3M9XCJkaHhfYWxlcnRfX2NvbmZpcm0tYXBseSBkaHhfYnV0dG9uIGRoeF9idXR0b24tLXZpZXdfZmxhdCBkaHhfYnV0dG9uLS1jb2xvcl9wcmltYXJ5IGRoeF9idXR0b24tLXNpemVfbWVkaXVtXCI+JHthcHBseX08L2J1dHRvbj5cblx0XHRcdDwvZGl2PmA7XG5cblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbmZpcm1Cb3gpO1xuXHRcdGZvY3VzSXRlbSA9IFwiYXBseVwiO1xuXHRcdChjb25maXJtQm94LnF1ZXJ5U2VsZWN0b3IoXCIuZGh4X2FsZXJ0X19jb25maXJtLWFwbHlcIikgYXMgSFRNTEVsZW1lbnQpLmZvY3VzKCk7XG5cblx0XHRjb25maXJtQm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGlja0hhbmRsZXIpO1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGNsb3NlQ29uZmlybSk7XG5cdH0pO1xufVxuIiwiY29uc3QgbG9jYWxlID0ge1xuXHRhcHBseTogXCJhcHBseVwiLFxuXHRyZWplY3Q6IFwicmVqZWN0XCIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJpbXBvcnQgeyB1aWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHsgdG9Ob2RlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcbmltcG9ydCB7IElNZXNzYWdlUHJvcHMsIE1lc3NhZ2VDb250YWluZXJQb3NpdGlvbiwgSU1lc3NhZ2VDb250YWluZXJJbmZvIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuY29uc3Qgbm9kZVRpbWVvdXQ6IFdlYWtNYXA8SFRNTEVsZW1lbnQsIGFueT4gPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgY29udGFpbmVyczogTWFwPEhUTUxFbGVtZW50LCBJTWVzc2FnZUNvbnRhaW5lckluZm8+ID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBjcmVhdGVNZXNzYWdlQ29udGFpbmVyKHBhcmVudCwgcG9zaXRpb24pIHtcblx0Y29uc3QgbWVzc2FnZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdG1lc3NhZ2VDb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS1wb3NpdGlvblwiLCBwb3NpdGlvbik7XG5cdG1lc3NhZ2VDb250YWluZXIuY2xhc3NOYW1lID1cblx0XHRcImRoeF9tZXNzYWdlLWNvbnRhaW5lciBcIiArXG5cdFx0XCJkaHhfbWVzc2FnZS1jb250YWluZXItLVwiICtcblx0XHRwb3NpdGlvbiArXG5cdFx0KHBhcmVudCA9PT0gZG9jdW1lbnQuYm9keSA/IFwiIGRoeF9tZXNzYWdlLWNvbnRhaW5lci0taW4tYm9keVwiIDogXCJcIik7XG5cdHJldHVybiBtZXNzYWdlQ29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBvbkV4cGlyZShub2RlOiBIVE1MRWxlbWVudCwgZnJvbUNsaWNrPzogYm9vbGVhbikge1xuXHRpZiAoZnJvbUNsaWNrKSB7XG5cdFx0Y2xlYXJUaW1lb3V0KG5vZGVUaW1lb3V0LmdldChub2RlKSk7XG5cdH1cblx0Y29uc3QgY29udGFpbmVyID0gbm9kZS5wYXJlbnROb2RlIGFzIEhUTUxFbGVtZW50O1xuXHRjb25zdCBwb3NpdGlvbiA9IGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBvc2l0aW9uXCIpIGFzIE1lc3NhZ2VDb250YWluZXJQb3NpdGlvbjtcblx0Y29uc3QgcGFyZW50ID0gY29udGFpbmVyLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQ7XG5cdGNvbnN0IG1lc3NhZ2VDb250YWluZXJJbmZvID0gY29udGFpbmVycy5nZXQocGFyZW50KTtcblx0aWYgKCFtZXNzYWdlQ29udGFpbmVySW5mbykge1xuXHRcdHJldHVybjtcblx0fVxuXHRjb25zdCBwb3NpdGlvbkluZm8gPSBtZXNzYWdlQ29udGFpbmVySW5mb1twb3NpdGlvbl07XG5cdGlmICghcG9zaXRpb25JbmZvKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3Qgc3RhY2sgPSBwb3NpdGlvbkluZm8uc3RhY2s7XG5cdGNvbnN0IGluZGV4ID0gc3RhY2suaW5kZXhPZihub2RlKTtcblx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdGNvbnRhaW5lci5yZW1vdmVDaGlsZChub2RlKTtcblx0XHRzdGFjay5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdGlmIChzdGFjay5sZW5ndGggPT09IDApIHtcblx0XHRcdHBhcmVudC5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2UocHJvcHM6IHN0cmluZyB8IElNZXNzYWdlUHJvcHMpIHtcblx0aWYgKHR5cGVvZiBwcm9wcyA9PT0gXCJzdHJpbmdcIikge1xuXHRcdHByb3BzID0geyB0ZXh0OiBwcm9wcyB9O1xuXHR9XG5cdHByb3BzLnBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24gfHwgTWVzc2FnZUNvbnRhaW5lclBvc2l0aW9uLnRvcFJpZ2h0O1xuXG5cdGNvbnN0IG1lc3NhZ2VCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRtZXNzYWdlQm94LmNsYXNzTmFtZSA9IFwiZGh4X3dpZGdldCBkaHhfbWVzc2FnZSBcIiArIChwcm9wcy5jc3MgfHwgXCJcIik7XG5cdG1lc3NhZ2VCb3guc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImFsZXJ0XCIpO1xuXHRjb25zdCB0ZXh0SWQgPSBwcm9wcy50ZXh0ICYmIHVpZCgpO1xuXHR0ZXh0SWQgJiYgbWVzc2FnZUJveC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIHRleHRJZCk7XG5cdGlmIChwcm9wcy5odG1sKSB7XG5cdFx0bWVzc2FnZUJveC5pbm5lckhUTUwgPSBwcm9wcy5odG1sO1xuXHR9IGVsc2Uge1xuXHRcdG1lc3NhZ2VCb3guaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwiZGh4X21lc3NhZ2VfX3RleHRcIiBpZD0ke3RleHRJZH0+JHtwcm9wcy50ZXh0fTwvc3Bhbj5cblx0XHQke3Byb3BzLmljb24gPyBgPHNwYW4gY2xhc3M9XCJkaHhfbWVzc2FnZV9faWNvbiBkeGkgJHtwcm9wcy5pY29ufVwiPjwvc3Bhbj5gIDogXCJcIn1gO1xuXHR9XG5cblx0Y29uc3QgcGFyZW50ID0gcHJvcHMubm9kZSA/IHRvTm9kZShwcm9wcy5ub2RlKSA6IGRvY3VtZW50LmJvZHk7XG5cdGNvbnN0IHBvc2l0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpLnBvc2l0aW9uO1xuXHRpZiAocG9zaXRpb24gPT09IFwic3RhdGljXCIpIHtcblx0XHRwYXJlbnQuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdH1cblx0Y29uc3QgbWVzc2FnZUNvbnRhaW5lckluZm8gPSBjb250YWluZXJzLmdldChwYXJlbnQpO1xuXHRpZiAoIW1lc3NhZ2VDb250YWluZXJJbmZvKSB7XG5cdFx0Y29udGFpbmVycy5zZXQocGFyZW50LCB7XG5cdFx0XHRbcHJvcHMucG9zaXRpb25dOiB7XG5cdFx0XHRcdHN0YWNrOiBbXSxcblx0XHRcdFx0Y29udGFpbmVyOiBjcmVhdGVNZXNzYWdlQ29udGFpbmVyKHBhcmVudCwgcHJvcHMucG9zaXRpb24pLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fSBlbHNlIGlmICghbWVzc2FnZUNvbnRhaW5lckluZm9bcHJvcHMucG9zaXRpb25dKSB7XG5cdFx0bWVzc2FnZUNvbnRhaW5lckluZm9bcHJvcHMucG9zaXRpb25dID0ge1xuXHRcdFx0c3RhY2s6IFtdLFxuXHRcdFx0Y29udGFpbmVyOiBjcmVhdGVNZXNzYWdlQ29udGFpbmVyKHBhcmVudCwgcHJvcHMucG9zaXRpb24pLFxuXHRcdH07XG5cdH1cblx0Y29uc3QgeyBzdGFjaywgY29udGFpbmVyIH0gPSBjb250YWluZXJzLmdldChwYXJlbnQpW3Byb3BzLnBvc2l0aW9uXTtcblxuXHRpZiAoc3RhY2subGVuZ3RoID09PSAwKSB7XG5cdFx0cGFyZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cdH1cblx0c3RhY2sucHVzaChtZXNzYWdlQm94KTtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKG1lc3NhZ2VCb3gpO1xuXHRpZiAocHJvcHMuZXhwaXJlKSB7XG5cdFx0Y29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gb25FeHBpcmUobWVzc2FnZUJveCksIHByb3BzLmV4cGlyZSk7XG5cdFx0bm9kZVRpbWVvdXQuc2V0KG1lc3NhZ2VCb3gsIHRpbWVvdXQpO1xuXHR9XG5cdG1lc3NhZ2VCb3gub25jbGljayA9ICgpID0+IG9uRXhwaXJlKG1lc3NhZ2VCb3gsIHRydWUpO1xufVxuIiwiaW1wb3J0IHsgbG9jYXRlTm9kZSwgdG9Ob2RlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcbmltcG9ydCB7IElQb3NpdGlvbiwgSVRvb2x0aXBDb25maWcsIFBvc2l0aW9uLCBSZWFsUG9zaXRpb24gfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5jb25zdCBERUZBVUxUX1NIT1dfREVMQVkgPSA3NTA7XG5jb25zdCBERUZBVUxUX0hJREVfREVMQVkgPSAyMDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUG9zaXRpb24oXG5cdHRhcmdldFJlY3Q6IENsaWVudFJlY3QsXG5cdHBvc2l0aW9uOiBQb3NpdGlvbixcblx0d2lkdGg6IG51bWJlcixcblx0aGVpZ2h0OiBudW1iZXJcbik6IElQb3NpdGlvbiB7XG5cdGNvbnN0IG1hcmdpbiA9IDg7IC8vIG1hcmdpbiB0b3AvYm90LCBsZWZ0L3JpZ2h0XG5cblx0bGV0IHBvczogUmVhbFBvc2l0aW9uO1xuXHRsZXQgbGVmdDogbnVtYmVyO1xuXHRsZXQgdG9wOiBudW1iZXI7XG5cblx0c3dpdGNoIChwb3NpdGlvbikge1xuXHRcdGNhc2UgUG9zaXRpb24uY2VudGVyOlxuXHRcdFx0bGVmdCA9IHRhcmdldFJlY3QubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCArICh0YXJnZXRSZWN0LndpZHRoIC0gd2lkdGgpIC8gMjtcblx0XHRcdGlmIChsZWZ0ICsgbWFyZ2luIDwgd2luZG93LnBhZ2VYT2Zmc2V0KSB7XG5cdFx0XHRcdGxlZnQgPSB0YXJnZXRSZWN0LmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQ7XG5cdFx0XHR9XG5cdFx0XHR0b3AgPSB0YXJnZXRSZWN0LnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCArICh0YXJnZXRSZWN0LmhlaWdodCAtIGhlaWdodCkgLyAyO1xuXHRcdFx0cG9zID0gUmVhbFBvc2l0aW9uLmNlbnRlcjtcblx0XHRcdHJldHVybiB7IGxlZnQsIHRvcCwgcG9zIH07XG5cdFx0Y2FzZSBQb3NpdGlvbi5yaWdodDpcblx0XHRcdHBvcyA9IFJlYWxQb3NpdGlvbi5yaWdodDtcblx0XHRcdGxlZnQgPSB0YXJnZXRSZWN0LnJpZ2h0ICsgd2luZG93LnBhZ2VYT2Zmc2V0O1xuXHRcdFx0aWYgKGxlZnQgKyB3aWR0aCArIG1hcmdpbiA+IHdpbmRvdy5pbm5lcldpZHRoICsgd2luZG93LnBhZ2VYT2Zmc2V0KSB7XG5cdFx0XHRcdC8vIHNldCBsZWZ0XG5cdFx0XHRcdGxlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQgKyB0YXJnZXRSZWN0LmxlZnQgLSB3aWR0aDtcblx0XHRcdFx0cG9zID0gUmVhbFBvc2l0aW9uLmxlZnQ7XG5cdFx0XHR9XG5cdFx0XHR0b3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgKyB0YXJnZXRSZWN0LnRvcCArICh0YXJnZXRSZWN0LmhlaWdodCAtIGhlaWdodCkgLyAyO1xuXHRcdFx0cmV0dXJuIHsgbGVmdCwgdG9wLCBwb3MgfTtcblx0XHRjYXNlIFBvc2l0aW9uLmJvdHRvbTpcblx0XHRkZWZhdWx0OlxuXHRcdFx0bGVmdCA9IHdpbmRvdy5wYWdlWE9mZnNldCArIHRhcmdldFJlY3QubGVmdCArICh0YXJnZXRSZWN0LndpZHRoIC0gd2lkdGgpIC8gMjtcblx0XHRcdGlmIChsZWZ0ICsgd2lkdGggPiB3aW5kb3cuaW5uZXJXaWR0aCArIHdpbmRvdy5wYWdlWE9mZnNldCkge1xuXHRcdFx0XHRsZWZ0ID0gd2luZG93LmlubmVyV2lkdGggKyB3aW5kb3cucGFnZVhPZmZzZXQgLSB3aWR0aDtcblx0XHRcdH0gZWxzZSBpZiAobGVmdCA8IDApIHtcblx0XHRcdFx0bGVmdCA9IDA7XG5cdFx0XHR9XG5cdFx0XHRwb3MgPSBSZWFsUG9zaXRpb24uYm90dG9tO1xuXHRcdFx0dG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgdGFyZ2V0UmVjdC5ib3R0b207XG5cdFx0XHRpZiAodG9wICsgaGVpZ2h0ICsgbWFyZ2luID4gd2luZG93LmlubmVySGVpZ2h0ICsgd2luZG93LnBhZ2VZT2Zmc2V0KSB7XG5cdFx0XHRcdC8vIHNldCB0b3Bcblx0XHRcdFx0dG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgdGFyZ2V0UmVjdC50b3AgLSBoZWlnaHQ7XG5cdFx0XHRcdHBvcyA9IFJlYWxQb3NpdGlvbi50b3A7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4geyBsZWZ0LCB0b3AsIHBvcyB9O1xuXHR9XG59XG5cbi8vIHRvb2x0aXAgaW5pdFxuY29uc3QgdG9vbHRpcEJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5jb25zdCB0b29sdGlwVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xudG9vbHRpcFRleHQuY2xhc3NOYW1lID0gXCJkaHhfdG9vbHRpcF9fdGV4dFwiO1xudG9vbHRpcEJveC5hcHBlbmRDaGlsZCh0b29sdGlwVGV4dCk7XG50b29sdGlwQm94LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJ0b29sdGlwXCIpO1xudG9vbHRpcEJveC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxubGV0IGxhc3ROb2RlID0gbnVsbDtcbmxldCBpc0FjdGl2ZSA9IGZhbHNlO1xubGV0IGhpZGVUaW1lb3V0ID0gbnVsbDtcbmxldCBzaG93VGltZW91dCA9IG51bGw7XG5cbmxldCBhY3RpdmVMaXN0ZW5lcnNEZXN0cnVjdG9yO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0WkluZGV4KG5vZGU6IEVsZW1lbnQgfCBIVE1MRWxlbWVudCkge1xuXHRpZiAoXG5cdFx0bm9kZSAmJlxuXHRcdG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X3BvcHVwLS13aW5kb3dcIikgJiZcblx0XHRub2RlLmNsYXNzTGlzdC5jb250YWlucyhcImRoeF9wb3B1cC0td2luZG93X2FjdGl2ZVwiKVxuXHQpIHtcblx0XHRyZXR1cm4gMjE0NzQ4MzY0Nztcblx0fVxuXHRpZiAoXG5cdFx0bm9kZT8uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X3BvcHVwLS13aW5kb3dcIikgfHxcblx0XHRub2RlPy5jbGFzc0xpc3QuY29udGFpbnMoXCJkaHhfcG9wdXAtLXdpbmRvd19tb2RhbFwiKVxuXHQpIHtcblx0XHRyZXR1cm4gMjE0NzQ4MzY0Njtcblx0fVxuXG5cdGlmIChub2RlICYmIChub2RlIGFzIEhUTUxFbGVtZW50KS5vZmZzZXRQYXJlbnQpIHtcblx0XHRyZXR1cm4gZ2V0WkluZGV4KChub2RlIGFzIEhUTUxFbGVtZW50KS5vZmZzZXRQYXJlbnQpO1xuXHR9XG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBzaG93VG9vbHRpcChcblx0bm9kZTogRWxlbWVudCxcblx0dGV4dDogc3RyaW5nLFxuXHRwb3NpdGlvbjogUG9zaXRpb24sXG5cdGNzczogc3RyaW5nLFxuXHRmb3JjZSA9IGZhbHNlLFxuXHRodG1sRW5hYmxlPzogYm9vbGVhblxuKSB7XG5cdGNvbnN0IHJlY3RzOiBDbGllbnRSZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0aWYgKGh0bWxFbmFibGUpIHtcblx0XHR0b29sdGlwVGV4dC5pbm5lckhUTUwgPSB0ZXh0O1xuXHR9IGVsc2Uge1xuXHRcdHRvb2x0aXBUZXh0LnRleHRDb250ZW50ID0gdGV4dDtcblx0fVxuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRvb2x0aXBCb3gpO1xuXHR0b29sdGlwQm94LmNsYXNzTmFtZSA9IFwiZGh4X3dpZGdldCBkaHhfdG9vbHRpcFwiICsgKGZvcmNlID8gXCIgZGh4X3Rvb2x0aXAtLWZvcmNlZFwiIDogXCJcIik7XG5cdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdG9vbHRpcEJveC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0Y29uc3QgeyBsZWZ0LCB0b3AsIHBvcyB9ID0gZmluZFBvc2l0aW9uKHJlY3RzLCBwb3NpdGlvbiwgd2lkdGgsIGhlaWdodCk7XG5cdGNvbnN0IHpJbmRleCA9IGdldFpJbmRleChub2RlKTtcblx0aWYgKHpJbmRleCkge1xuXHRcdHRvb2x0aXBCb3guc3R5bGUuekluZGV4ID0gekluZGV4LnRvU3RyaW5nKCk7XG5cdH1cblx0c3dpdGNoIChwb3MpIHtcblx0XHRjYXNlIFJlYWxQb3NpdGlvbi5ib3R0b206XG5cdFx0XHR0b29sdGlwQm94LnN0eWxlLmxlZnQgPSBsZWZ0ICsgXCJweFwiO1xuXHRcdFx0dG9vbHRpcEJveC5zdHlsZS50b3AgPSB0b3AgKyBcInB4XCI7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgUmVhbFBvc2l0aW9uLnRvcDpcblx0XHRcdHRvb2x0aXBCb3guc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG5cdFx0XHR0b29sdGlwQm94LnN0eWxlLnRvcCA9IHRvcCArIFwicHhcIjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBSZWFsUG9zaXRpb24ubGVmdDpcblx0XHRcdHRvb2x0aXBCb3guc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG5cdFx0XHR0b29sdGlwQm94LnN0eWxlLnRvcCA9IHRvcCArIFwicHhcIjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBSZWFsUG9zaXRpb24ucmlnaHQ6XG5cdFx0XHR0b29sdGlwQm94LnN0eWxlLmxlZnQgPSBsZWZ0ICsgXCJweFwiO1xuXHRcdFx0dG9vbHRpcEJveC5zdHlsZS50b3AgPSB0b3AgKyBcInB4XCI7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgUmVhbFBvc2l0aW9uLmNlbnRlcjpcblx0XHRcdHRvb2x0aXBCb3guc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG5cdFx0XHR0b29sdGlwQm94LnN0eWxlLnRvcCA9IHRvcCArIFwicHhcIjtcblx0XHRcdGJyZWFrO1xuXHR9XG5cdHRvb2x0aXBCb3guY2xhc3NOYW1lICs9IGAgZGh4X3Rvb2x0aXAtLSR7cG9zfSAke2NzcyB8fCBcIlwifWA7XG5cblx0aXNBY3RpdmUgPSB0cnVlO1xuXHRpZiAoIWZvcmNlKSB7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0b29sdGlwQm94LmNsYXNzTmFtZSArPSBcIiBkaHhfdG9vbHRpcC0tYW5pbWF0ZVwiO1xuXHRcdH0pO1xuXHR9XG59XG5mdW5jdGlvbiBoaWRlVG9vbHRpcChkZWxheTogbnVtYmVyKSB7XG5cdGlmIChsYXN0Tm9kZSkge1xuXHRcdGhpZGVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRvb2x0aXBCb3gpO1xuXHRcdFx0aXNBY3RpdmUgPSBmYWxzZTtcblx0XHRcdGhpZGVUaW1lb3V0ID0gbnVsbDtcblx0XHR9LCBkZWxheSB8fCBERUZBVUxUX0hJREVfREVMQVkpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGFkZExpc3RlbmVycyhub2RlOiBIVE1MRWxlbWVudCwgdGV4dDogc3RyaW5nLCBjb25maWc6IElUb29sdGlwQ29uZmlnKSB7XG5cdGNvbnN0IHsgZm9yY2UsIHNob3dEZWxheSwgaGlkZURlbGF5LCBwb3NpdGlvbiwgY3NzLCBodG1sRW5hYmxlIH0gPSBjb25maWc7XG5cdGlmICghZm9yY2UpIHtcblx0XHRzaG93VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0c2hvd1Rvb2x0aXAobm9kZSwgdGV4dCwgcG9zaXRpb24gfHwgUG9zaXRpb24uYm90dG9tLCBjc3MsIGZhbHNlLCBodG1sRW5hYmxlKTtcblx0XHR9LCBzaG93RGVsYXkgfHwgREVGQVVMVF9TSE9XX0RFTEFZKTtcblx0fVxuXHRjb25zdCBoaWRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKGlzQWN0aXZlKSB7XG5cdFx0XHRoaWRlVG9vbHRpcChoaWRlRGVsYXkpO1xuXHRcdH1cblx0XHRjbGVhclRpbWVvdXQoc2hvd1RpbWVvdXQpO1xuXHRcdG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgaGlkZSk7XG5cdFx0bm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCBoaWRlKTtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhpZGUpO1xuXHRcdGxhc3ROb2RlID0gbnVsbDtcblx0XHRhY3RpdmVMaXN0ZW5lcnNEZXN0cnVjdG9yID0gbnVsbDtcblx0fTtcblx0aWYgKGZvcmNlKSB7XG5cdFx0c2hvd1Rvb2x0aXAobm9kZSwgdGV4dCwgcG9zaXRpb24sIGNzcywgZm9yY2UsIGh0bWxFbmFibGUpO1xuXHR9XG5cdG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgaGlkZSk7XG5cdG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgaGlkZSk7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgaGlkZSk7XG5cblx0YWN0aXZlTGlzdGVuZXJzRGVzdHJ1Y3RvciA9IGhpZGU7XG59XG5cbi8vIGRlZmF1bHRcbmV4cG9ydCBmdW5jdGlvbiB0b29sdGlwKHRleHQ6IHN0cmluZywgY29uZmlnOiBJVG9vbHRpcENvbmZpZykge1xuXHRjb25zdCBub2RlID0gdG9Ob2RlKGNvbmZpZy5ub2RlKTtcblx0aWYgKG5vZGUgPT09IGxhc3ROb2RlKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKGFjdGl2ZUxpc3RlbmVyc0Rlc3RydWN0b3IpIHtcblx0XHRhY3RpdmVMaXN0ZW5lcnNEZXN0cnVjdG9yKCk7XG5cdFx0YWN0aXZlTGlzdGVuZXJzRGVzdHJ1Y3RvciA9IG51bGw7XG5cdH1cblxuXHRsYXN0Tm9kZSA9IG5vZGU7XG5cdGlmIChoaWRlVGltZW91dCkge1xuXHRcdGNsZWFyVGltZW91dChoaWRlVGltZW91dCk7XG5cdFx0aGlkZVRpbWVvdXQgPSBudWxsO1xuXHRcdGFkZExpc3RlbmVycyhub2RlLCB0ZXh0LCB7IC4uLmNvbmZpZywgZm9yY2U6IHRydWUgfSk7XG5cdH0gZWxzZSB7XG5cdFx0YWRkTGlzdGVuZXJzKG5vZGUsIHRleHQsIGNvbmZpZyk7XG5cdH1cbn1cblxuZnVuY3Rpb24gX21vdXNlbW92ZShlOiBNb3VzZUV2ZW50KSB7XG5cdGNvbnN0IG5vZGUgPSBsb2NhdGVOb2RlKGUsIFwiZGh4X3Rvb2x0aXBfdGV4dFwiKTtcblx0aWYgKCFub2RlKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dG9vbHRpcChub2RlLmdldEF0dHJpYnV0ZShcImRoeF90b29sdGlwX3RleHRcIiksIHtcblx0XHRwb3NpdGlvbjogKG5vZGUuZ2V0QXR0cmlidXRlKFwiZGh4X3Rvb2x0aXBfcG9zaXRpb25cIikgYXMgUG9zaXRpb24pIHx8IFBvc2l0aW9uLmJvdHRvbSxcblx0XHRub2RlOiBub2RlIGFzIEhUTUxFbGVtZW50LFxuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZVRvb2x0aXAoKSB7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgX21vdXNlbW92ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZVRvb2x0aXAoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgX21vdXNlbW92ZSk7XG59XG4iLCJpbXBvcnQgeyBJQWxpZ24gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vaHRtbFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElCYXNlUHJvcHMge1xuXHR0ZXh0OiBzdHJpbmc7XG5cdGhlYWRlcj86IHN0cmluZztcblx0Y3NzPzogc3RyaW5nO1xuXHRidXR0b25zQWxpZ25tZW50PzogSUFsaWduO1xuXHRibG9ja2VyQ3NzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBbGVydFByb3BzIGV4dGVuZHMgSUJhc2VQcm9wcyB7XG5cdGJ1dHRvbnM/OiBbc3RyaW5nXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29uZmlybVByb3BzIGV4dGVuZHMgSUJhc2VQcm9wcyB7XG5cdGJ1dHRvbnM/OiBbc3RyaW5nLCBzdHJpbmc/XTtcbn1cblxuZXhwb3J0IGVudW0gUmVhbFBvc2l0aW9uIHtcblx0bGVmdCA9IFwibGVmdFwiLFxuXHRyaWdodCA9IFwicmlnaHRcIixcblx0dG9wID0gXCJ0b3BcIixcblx0Ym90dG9tID0gXCJib3R0b21cIixcblx0Y2VudGVyID0gXCJjZW50ZXJcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVG9vbHRpcENvbmZpZyBleHRlbmRzIElTY3JlZW5Qb3NpdGlvbiB7XG5cdGZvcmNlPzogYm9vbGVhbjtcblx0c2hvd0RlbGF5PzogbnVtYmVyO1xuXHRoaWRlRGVsYXk/OiBudW1iZXI7XG5cdGh0bWxFbmFibGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQb3NpdGlvbiB7XG5cdGxlZnQ6IG51bWJlcjtcblx0dG9wOiBudW1iZXI7XG5cdHBvczogUmVhbFBvc2l0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTY3JlZW5Qb3NpdGlvbiB7XG5cdG5vZGU6IEhUTUxFbGVtZW50IHwgc3RyaW5nO1xuXHRwb3NpdGlvbj86IFBvc2l0aW9uO1xuXHRjc3M/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIFBvc2l0aW9uIHtcblx0cmlnaHQgPSBcInJpZ2h0XCIsXG5cdGJvdHRvbSA9IFwiYm90dG9tXCIsXG5cdGNlbnRlciA9IFwiY2VudGVyXCIsXG59XG5cbmV4cG9ydCBlbnVtIE1lc3NhZ2VDb250YWluZXJQb3NpdGlvbiB7XG5cdHRvcExlZnQgPSBcInRvcC1sZWZ0XCIsXG5cdHRvcFJpZ2h0ID0gXCJ0b3AtcmlnaHRcIixcblx0Ym90dG9tTGVmdCA9IFwiYm90dG9tLWxlZnRcIixcblx0Ym90dG9tUmlnaHQgPSBcImJvdHRvbS1yaWdodFwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlUHJvcHMge1xuXHR0ZXh0Pzogc3RyaW5nO1xuXHRodG1sPzogc3RyaW5nO1xuXHRjc3M/OiBzdHJpbmc7XG5cdGV4cGlyZT86IG51bWJlcjtcblx0bm9kZT86IEhUTUxFbGVtZW50O1xuXHRpY29uPzogc3RyaW5nO1xuXHRwb3NpdGlvbj86IE1lc3NhZ2VDb250YWluZXJQb3NpdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWVzc2FnZUNvbnRhaW5lckluZm8ge1xuXHRbTWVzc2FnZUNvbnRhaW5lclBvc2l0aW9uLmJvdHRvbUxlZnRdPzoge1xuXHRcdHN0YWNrOiBIVE1MRWxlbWVudFtdO1xuXHRcdGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG5cdH07XG5cdFtNZXNzYWdlQ29udGFpbmVyUG9zaXRpb24uYm90dG9tUmlnaHRdPzoge1xuXHRcdHN0YWNrOiBIVE1MRWxlbWVudFtdO1xuXHRcdGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG5cdH07XG5cdFtNZXNzYWdlQ29udGFpbmVyUG9zaXRpb24udG9wTGVmdF0/OiB7XG5cdFx0c3RhY2s6IEhUTUxFbGVtZW50W107XG5cdFx0Y29udGFpbmVyOiBIVE1MRWxlbWVudDtcblx0fTtcblx0W01lc3NhZ2VDb250YWluZXJQb3NpdGlvbi50b3BSaWdodF0/OiB7XG5cdFx0c3RhY2s6IEhUTUxFbGVtZW50W107XG5cdFx0Y29udGFpbmVyOiBIVE1MRWxlbWVudDtcblx0fTtcbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvTmF2YmFyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL2l0ZW1mYWN0b3J5XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL3R5cGVzXCI7XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHsgSWQsIElIYW5kbGVycyB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi90eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlLCBlbCwgVk5vZGUgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBFdmVudFN5c3RlbSwgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuXG5pbXBvcnQgeyBjYWxjdWxhdGVQb3NpdGlvbiwgZ2V0UmVhbFBvc2l0aW9uLCBsb2NhdGVOb2RlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcbmltcG9ydCB7IEtleU1hbmFnZXIsIElLZXlNYW5hZ2VyIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL0tleU1hbmFnZXJcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdmlld1wiO1xuaW1wb3J0IHsgVHJlZUNvbGxlY3Rpb24sIElEYXRhRXZlbnRzSGFuZGxlcnNNYXAgfSBmcm9tIFwiQGRoeC90cy1kYXRhXCI7XG5pbXBvcnQge1xuXHREYXRhRXZlbnRzLFxuXHRJSXRlbSxcblx0SUdyb3Vwcyxcblx0TmF2aWdhdGlvbkJhckV2ZW50cyxcblx0SU5hdmJhckV2ZW50SGFuZGxlcnNNYXAsXG5cdElOYXZiYXJDb25maWcsXG59IGZyb20gXCIuL3R5cGVzXCI7XG5cbmZ1bmN0aW9uIGFkZEluR3JvdXBzKGdyb3VwczogSUdyb3VwcywgaXRlbTogYW55KSB7XG5cdGlmIChncm91cHNbaXRlbS5ncm91cF0pIHtcblx0XHRpZiAoaXRlbS5hY3RpdmUpIHtcblx0XHRcdGdyb3Vwc1tpdGVtLmdyb3VwXS5hY3RpdmUgPSBpdGVtLmlkO1xuXHRcdH1cblx0XHRncm91cHNbaXRlbS5ncm91cF0uZWxlbWVudHMucHVzaChpdGVtLmlkKTtcblx0fSBlbHNlIHtcblx0XHRncm91cHNbaXRlbS5ncm91cF0gPSB7XG5cdFx0XHRhY3RpdmU6IGl0ZW0uYWN0aXZlID8gaXRlbS5pZCA6IG51bGwsXG5cdFx0XHRlbGVtZW50czogW2l0ZW0uaWRdLFxuXHRcdH07XG5cdH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5hdmJhcjxUIGV4dGVuZHMgSUl0ZW0gPSBJSXRlbT4gZXh0ZW5kcyBWaWV3IHtcblx0cHVibGljIGRhdGE6IFRyZWVDb2xsZWN0aW9uPFQ+O1xuXHRwdWJsaWMgZXZlbnRzOiBJRXZlbnRTeXN0ZW08XG5cdFx0RGF0YUV2ZW50cyB8IE5hdmlnYXRpb25CYXJFdmVudHMsXG5cdFx0SURhdGFFdmVudHNIYW5kbGVyc01hcCAmIElOYXZiYXJFdmVudEhhbmRsZXJzTWFwXG5cdD47XG5cdHB1YmxpYyBjb25maWc6IElOYXZiYXJDb25maWc7XG5cdHByb3RlY3RlZCBfdnBvcHVwczogVk5vZGU7XG5cdHByb3RlY3RlZCBfYWN0aXZlTWVudTogSWQ7XG5cdHByb3RlY3RlZCBfYWN0aXZlUG9zaXRpb246IHtcblx0XHRsZWZ0OiBudW1iZXI7XG5cdFx0cmlnaHQ6IG51bWJlcjtcblx0XHR0b3A6IG51bWJlcjtcblx0XHRib3R0b206IG51bWJlcjtcblx0XHR6SW5kZXg/OiBudW1iZXI7XG5cdH07XG5cdHByb3RlY3RlZCBfaXNDb250ZXh0TWVudSA9IGZhbHNlO1xuXHRwcm90ZWN0ZWQgX2hhbmRsZXJzOiBJSGFuZGxlcnM7XG5cdHByb3RlY3RlZCBfY3VycmVudFJvb3Q6IElkO1xuXHRwcm90ZWN0ZWQgX2ZhY3Rvcnk6IChpdGVtOiBULCBhc01lbnVJdGVtPzogYm9vbGVhbikgPT4gYW55O1xuXHRwcm90ZWN0ZWQgX2dyb3VwczogSUdyb3Vwcztcblx0cHJpdmF0ZSBfaXNBY3RpdmU6IGJvb2xlYW47XG5cdHByaXZhdGUgX3BvcHVwQWN0aXZlOiBib29sZWFuO1xuXHRwcml2YXRlIF9jdXJyZW50VGltZW91dDogYW55O1xuXHRwcml2YXRlIF9kb2N1bWVudENsaWNrOiAoZTogTW91c2VFdmVudCkgPT4gdm9pZDtcblx0cHJpdmF0ZSBfZG9jdW1lbnRIYXZlTGlzdGVuZXIgPSBmYWxzZTtcblx0cHJpdmF0ZSBfcm9vdEl0ZW06IGFueTtcblx0cHJpdmF0ZSBfYWN0aXZlUGFyZW50czogSWRbXTtcblx0cHJpdmF0ZSBfa2V5TWFuYWdlcjogSUtleU1hbmFnZXI7XG5cblx0Y29uc3RydWN0b3IoZWxlbWVudD86IHN0cmluZyB8IEhUTUxFbGVtZW50LCBjb25maWc/OiBhbnkpIHtcblx0XHQvLyBzdXBlcihlbGVtZW50LCBleHRlbmQoe30sIGNvbmZpZykpO1xuXHRcdHN1cGVyKGVsZW1lbnQsIGNvbmZpZyk7XG5cdFx0dGhpcy5jb25maWcgPSBleHRlbmQoXG5cdFx0XHR7XG5cdFx0XHRcdHJvb3RJZDogKHR5cGVvZiBlbGVtZW50ID09PSBcInN0cmluZ1wiICYmIGVsZW1lbnQpIHx8IHRoaXMuX3VpZCxcblx0XHRcdH0sXG5cdFx0XHRjb25maWdcblx0XHQpO1xuXHRcdHRoaXMuX3Jvb3RJdGVtID0ge307XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmNvbmZpZy5kYXRhKSkge1xuXHRcdFx0dGhpcy5ldmVudHMgPSBuZXcgRXZlbnRTeXN0ZW08RGF0YUV2ZW50cyB8IE5hdmlnYXRpb25CYXJFdmVudHM+KHRoaXMpO1xuXHRcdFx0dGhpcy5kYXRhID0gbmV3IFRyZWVDb2xsZWN0aW9uPFQ+KHsgcm9vdElkOiB0aGlzLmNvbmZpZy5yb290SWQgfSwgdGhpcy5ldmVudHMpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5jb25maWcuZGF0YSAmJiB0aGlzLmNvbmZpZy5kYXRhLmV2ZW50cykge1xuXHRcdFx0dGhpcy5kYXRhID0gdGhpcy5jb25maWcuZGF0YTtcblx0XHRcdHRoaXMuZXZlbnRzID0gdGhpcy5kYXRhLmV2ZW50cztcblx0XHRcdHRoaXMuZXZlbnRzLmNvbnRleHQgPSB0aGlzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmV2ZW50cyA9IG5ldyBFdmVudFN5c3RlbTxEYXRhRXZlbnRzIHwgTmF2aWdhdGlvbkJhckV2ZW50cz4odGhpcyk7XG5cdFx0XHR0aGlzLmRhdGEgPSBuZXcgVHJlZUNvbGxlY3Rpb248VD4oeyByb290SWQ6IHRoaXMuY29uZmlnLnJvb3RJZCB9LCB0aGlzLmV2ZW50cyk7XG5cdFx0fVxuXHRcdHRoaXMuX2RvY3VtZW50Q2xpY2sgPSBlID0+IHtcblx0XHRcdGlmICh0aGlzLl9kb2N1bWVudEhhdmVMaXN0ZW5lcikge1xuXHRcdFx0XHRjb25zdCBlbGVtZW50ID0gbG9jYXRlTm9kZShlKTtcblx0XHRcdFx0Y29uc3Qgcm9vdCA9IHRoaXMuZGF0YS5nZXRSb290KCk7XG5cdFx0XHRcdGNvbnN0IGlkID0gZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRoeF9pZFwiKTtcblxuXHRcdFx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLmRhdGEuZ2V0UGFyZW50KGlkKTtcblx0XHRcdFx0Y29uc3Qgc3VwcG9ydHNUb3VjaCA9IFwib250b3VjaHN0YXJ0XCIgaW4gd2luZG93IHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzO1xuXG5cdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fZG9jdW1lbnRDbGljayk7XG5cdFx0XHRcdHRoaXMuX2RvY3VtZW50SGF2ZUxpc3RlbmVyID0gZmFsc2U7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQoKChzdXBwb3J0c1RvdWNoICYmICFlbGVtZW50KSB8fCAhdGhpcy5faXNDb250ZXh0TWVudSkgJiZcblx0XHRcdFx0XHRcdChyb290ID09PSBwYXJlbnQgfHwgIXBhcmVudCB8fCAhdGhpcy5kYXRhLmdldEl0ZW0oaWQpKSkgfHxcblx0XHRcdFx0XHQhcGFyZW50IHx8XG5cdFx0XHRcdFx0IXRoaXMuZGF0YS5nZXRJdGVtKGlkKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0aGlzLl9jbG9zZShlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdFx0dGhpcy5fY3VycmVudFJvb3QgPSB0aGlzLmRhdGEuZ2V0Um9vdCgpO1xuXHRcdHRoaXMuX2ZhY3RvcnkgPSB0aGlzLl9nZXRGYWN0b3J5KCk7XG5cdFx0dGhpcy5faW5pdEhhbmRsZXJzKCk7XG5cdFx0Ly8gdGhpcy5faW5pdCgpO1xuXHRcdHRoaXMuX2tleU1hbmFnZXIgPSBuZXcgS2V5TWFuYWdlcigoXywgZm9jdXNJZCkgPT4gZm9jdXNJZCA9PT0gdGhpcy5fdWlkKTtcblx0XHR0aGlzLl9pbml0RXZlbnRzKCk7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodGhpcy5jb25maWcuZGF0YSkpIHtcblx0XHRcdHRoaXMuZGF0YS5wYXJzZSh0aGlzLmNvbmZpZy5kYXRhKTtcblx0XHR9XG5cdH1cblx0cGFpbnQoKTogdm9pZCB7XG5cdFx0c3VwZXIucGFpbnQoKTtcblx0XHRpZiAodGhpcy5faXNDb250ZXh0TWVudSAmJiAhdGhpcy5fdnBvcHVwcykge1xuXHRcdFx0dGhpcy5faW5pdCgpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5fdnBvcHVwcykge1xuXHRcdFx0dGhpcy5fdnBvcHVwcy5yZWRyYXcoKTtcblx0XHR9XG5cdH1cblx0ZGlzYWJsZShpZHM6IElkIHwgSWRbXSk6IHZvaWQge1xuXHRcdGlmICh0eXBlb2YgaWRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR0aGlzLl9zZXRQcm9wKGlkcywgXCJkaXNhYmxlZFwiLCB0cnVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5kYXRhLmZvckVhY2goKHsgaWQgfSkgPT4gdGhpcy5fc2V0UHJvcChpZCwgXCJkaXNhYmxlZFwiLCB0cnVlKSk7XG5cdFx0fVxuXHR9XG5cdGVuYWJsZShpZHM6IElkIHwgSWRbXSk6IHZvaWQge1xuXHRcdGlmICh0eXBlb2YgaWRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR0aGlzLl9zZXRQcm9wKGlkcywgXCJkaXNhYmxlZFwiLCBmYWxzZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZGF0YS5mb3JFYWNoKCh7IGlkIH0pID0+IHRoaXMuX3NldFByb3AoaWQsIFwiZGlzYWJsZWRcIiwgZmFsc2UpKTtcblx0XHR9XG5cdH1cblx0aXNEaXNhYmxlZChpZDogSWQpOiBib29sZWFuIHtcblx0XHRjb25zdCBpdGVtID0gdGhpcy5kYXRhLmdldEl0ZW0oaWQpO1xuXHRcdGlmIChpdGVtKSB7XG5cdFx0XHRyZXR1cm4gaXRlbS5kaXNhYmxlZCB8fCBmYWxzZTtcblx0XHR9XG5cdH1cblx0c2hvdyhpZHM6IElkIHwgSWRbXSk6IHZvaWQge1xuXHRcdGlmICh0eXBlb2YgaWRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR0aGlzLl9zZXRQcm9wKGlkcywgXCJoaWRkZW5cIiwgZmFsc2UpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmRhdGEuZm9yRWFjaCgoeyBpZCB9KSA9PiB0aGlzLl9zZXRQcm9wKGlkLCBcImhpZGRlblwiLCBmYWxzZSkpO1xuXHRcdH1cblx0fVxuXHRoaWRlKGlkczogSWQgfCBJZFtdKTogdm9pZCB7XG5cdFx0aWYgKHR5cGVvZiBpZHMgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHRoaXMuX3NldFByb3AoaWRzLCBcImhpZGRlblwiLCB0cnVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5kYXRhLmZvckVhY2goKHsgaWQgfSkgPT4gdGhpcy5fc2V0UHJvcChpZCwgXCJoaWRkZW5cIiwgdHJ1ZSkpO1xuXHRcdH1cblx0fVxuXHRkZXN0cnVjdG9yKCk6IHZvaWQge1xuXHRcdHRoaXMuZXZlbnRzLmNsZWFyKCk7XG5cdFx0dGhpcy5fa2V5TWFuYWdlciAmJiB0aGlzLl9rZXlNYW5hZ2VyLmRlc3RydWN0b3IoKTtcblx0XHR0aGlzLl92cG9wdXBzICYmICEhdGhpcy5fdnBvcHVwcy5ub2RlICYmIHRoaXMuX3Zwb3B1cHMudW5tb3VudCgpO1xuXHRcdHRoaXMudW5tb3VudCgpO1xuXHR9XG5cdHNlbGVjdChpZDogSWQsIHVuc2VsZWN0ID0gdHJ1ZSk6IHZvaWQge1xuXHRcdGlmICghaWQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XCJGdW5jdGlvbiBhcmd1bWVudCBjYW5ub3QgYmUgZW1wdHksIGZvciBtb3JlIGluZm8gY2hlY2sgZG9jdW1lbnRhdGlvbiBodHRwczovL2RvY3MuZGh0bWx4LmNvbVwiXG5cdFx0XHQpO1xuXHRcdH1cblx0XHR1bnNlbGVjdCAmJiB0aGlzLnVuc2VsZWN0KCk7XG5cdFx0dGhpcy5kYXRhLnVwZGF0ZShpZCwgeyBhY3RpdmU6IHRydWUgfSk7XG5cdFx0dGhpcy5kYXRhLmVhY2hQYXJlbnQoaWQsIHBhcmVudCA9PiB7XG5cdFx0XHR0aGlzLmRhdGEudXBkYXRlKHBhcmVudC5pZCwgeyBhY3RpdmU6IHRydWUgfSk7XG5cdFx0fSk7XG5cdH1cblx0dW5zZWxlY3QoaWQ/OiBJZCk6IHZvaWQge1xuXHRcdGlmICghaWQpIHtcblx0XHRcdHRoaXMuZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xuXHRcdFx0XHR0aGlzLmRhdGEudXBkYXRlKGl0ZW0uaWQsIHsgYWN0aXZlOiBmYWxzZSB9KTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmRhdGEudXBkYXRlKGlkLCB7IGFjdGl2ZTogZmFsc2UgfSk7XG5cdFx0XHR0aGlzLmRhdGEuZWFjaENoaWxkKGlkLCBwYXJlbnQgPT4ge1xuXHRcdFx0XHR0aGlzLmRhdGEudXBkYXRlKHBhcmVudC5pZCwgeyBhY3RpdmU6IGZhbHNlIH0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdGlzU2VsZWN0ZWQoaWQ6IElkKTogYm9vbGVhbiB7XG5cdFx0aWYgKCFpZCB8fCAhdGhpcy5kYXRhLmdldEl0ZW0oaWQpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHJldHVybiAhIXRoaXMuZGF0YS5nZXRJdGVtKGlkKS5hY3RpdmU7XG5cdH1cblx0Z2V0U2VsZWN0ZWQoKTogSWRbXSB7XG5cdFx0Y29uc3Qgc2VsZWN0ZWQgPSBbXTtcblx0XHR0aGlzLmRhdGEuZm9yRWFjaChpdGVtID0+IHtcblx0XHRcdGl0ZW0uYWN0aXZlICYmIHNlbGVjdGVkLnB1c2goaXRlbS5pZCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cdHByb3RlY3RlZCBhYnN0cmFjdCBfZ2V0RmFjdG9yeSgpOiAoaXRlbTogVCwgYXNNZW51SXRlbT86IGJvb2xlYW4pID0+IGFueTtcblx0cHJvdGVjdGVkIF9jdXN0b21IYW5kbGVycygpIHtcblx0XHRyZXR1cm4ge307XG5cdH1cblx0cHJvdGVjdGVkIF9jbG9zZShlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5fcG9wdXBBY3RpdmUgfHwgIXRoaXMuZXZlbnRzLmZpcmUoTmF2aWdhdGlvbkJhckV2ZW50cy5iZWZvcmVIaWRlLCBbdGhpcy5fYWN0aXZlTWVudSwgZV0pKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9hY3RpdmVQYXJlbnRzKSB7XG5cdFx0XHR0aGlzLl9hY3RpdmVQYXJlbnRzLmZvckVhY2goXG5cdFx0XHRcdHBhcmVudElkID0+IHRoaXMuZGF0YS5leGlzdHMocGFyZW50SWQpICYmIHRoaXMuZGF0YS51cGRhdGUocGFyZW50SWQsIHsgJGFjdGl2ZVBhcmVudDogZmFsc2UgfSlcblx0XHRcdCk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmNvbmZpZy5uYXZpZ2F0aW9uVHlwZSA9PT0gXCJjbGlja1wiKSB7XG5cdFx0XHR0aGlzLl9pc0FjdGl2ZSA9IGZhbHNlO1xuXHRcdH1cblx0XHRjbGVhclRpbWVvdXQodGhpcy5fY3VycmVudFRpbWVvdXQpO1xuXHRcdHRoaXMuX3BvcHVwQWN0aXZlID0gZmFsc2U7XG5cdFx0dGhpcy5fYWN0aXZlTWVudSA9IG51bGw7XG5cdFx0ISF0aGlzLl92cG9wdXBzLm5vZGUgJiYgdGhpcy5fdnBvcHVwcy51bm1vdW50KCk7XG5cdFx0dGhpcy5fdnBvcHVwcyA9IG51bGw7XG5cdFx0dGhpcy5ldmVudHMuZmlyZShOYXZpZ2F0aW9uQmFyRXZlbnRzLmFmdGVySGlkZSwgW2VdKTtcblx0XHR0aGlzLnBhaW50KCk7XG5cdH1cblx0cHJvdGVjdGVkIF9pbml0KCkge1xuXHRcdGNvbnN0IHJlbmRlciA9ICgpID0+XG5cdFx0XHRlbChcblx0XHRcdFx0XCJkaXZcIixcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGRoeF93aWRnZXRfaWQ6IHRoaXMuX3VpZCxcblx0XHRcdFx0XHRjbGFzczogYCR7dGhpcy5faXNDb250ZXh0TWVudSA/IFwiIGRoeF9jb250ZXh0LW1lbnVcIiA6IFwiXCJ9ICR7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbmZpZy5jc3Ncblx0XHRcdFx0XHRcdFx0PyB0aGlzLmNvbmZpZy5jc3Ncblx0XHRcdFx0XHRcdFx0XHRcdC5zcGxpdChcIiBcIilcblx0XHRcdFx0XHRcdFx0XHRcdC5tYXAoaSA9PiBpICsgXCItLWNvbnRleHQtbWVudVwiKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmpvaW4oXCIgXCIpXG5cdFx0XHRcdFx0XHRcdDogXCJcIlxuXHRcdFx0XHRcdH1gLFxuXHRcdFx0XHRcdG9ubW91c2Vtb3ZlOiB0aGlzLl9oYW5kbGVycy5vbm1vdXNlbW92ZSxcblx0XHRcdFx0XHRvbm1vdXNlbGVhdmU6IHRoaXMuX2hhbmRsZXJzLm9ubW91c2VsZWF2ZSxcblx0XHRcdFx0XHRvbmNsaWNrOiB0aGlzLl9oYW5kbGVycy5vbmNsaWNrLFxuXHRcdFx0XHRcdG9ubW91c2Vkb3duOiB0aGlzLl9oYW5kbGVycy5vbm1vdXNlZG93bixcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhpcy5fZHJhd1BvcHVwcygpXG5cdFx0XHQpO1xuXHRcdHRoaXMuX3Zwb3B1cHMgPSBjcmVhdGUoe1xuXHRcdFx0cmVuZGVyLFxuXHRcdH0pO1xuXHRcdHRoaXMuX3Zwb3B1cHMubW91bnQoZG9jdW1lbnQuYm9keSk7XG5cdH1cblx0cHJvdGVjdGVkIF9pbml0SGFuZGxlcnMoKSB7XG5cdFx0Lypcblx0XHRcdGZvciBuYXZpZ2F0aW9uIHR5cGUgY2xpY2s6XG5cdFx0XHRmaXJzdCBjbGljayBvcGVuIG1lbnUsIF9pc0FjdGl2ZSA9IHRydWVcblx0XHRcdGFmdGVyIG5hdmlnYXRpb24gdXNlIG1vdXNlbW92ZVxuXHRcdFx0Y2FuIGJlIGNsb3NlZCBhZnRlciBvdXRlciBjbGljayBvciBtZW51IGxlYWYgaXRlbSBjbGlja1xuXHRcdCovXG5cdFx0dGhpcy5faXNBY3RpdmUgPSB0aGlzLmNvbmZpZy5uYXZpZ2F0aW9uVHlwZSAhPT0gXCJjbGlja1wiO1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0b25tb3VzZW1vdmU6IChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmICghdGhpcy5faXNBY3RpdmUpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBlbGVtID0gbG9jYXRlTm9kZShlKTtcblx0XHRcdFx0aWYgKCFlbGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IGlkID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJkaHhfaWRcIik7XG5cdFx0XHRcdGlmICh0aGlzLl9hY3RpdmVNZW51ICE9PSBpZCkge1xuXHRcdFx0XHRcdGlmICh0aGlzLmRhdGEuaGF2ZUl0ZW1zKGlkKSkge1xuXHRcdFx0XHRcdFx0aWYgKCF0aGlzLl92cG9wdXBzKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2luaXQoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVhbFBvc2l0aW9uKGVsZW0gYXMgSFRNTEVsZW1lbnQpO1xuXHRcdFx0XHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShpZCwgeyAkcG9zaXRpb246IHBvc2l0aW9uIH0sIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fYWN0aXZlSXRlbUNoYW5nZShpZCwgZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRvbm1vdXNlbGVhdmU6IChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmNvbmZpZy5uYXZpZ2F0aW9uVHlwZSAhPT0gXCJjbGlja1wiKSB7XG5cdFx0XHRcdFx0Ly8gbWF5YmUgYWxsIHRpbWUgd2hlbiBtb3VzZSBsZWF2ZSBjbG9zZSBtZW51XG5cdFx0XHRcdFx0aWYgKHRoaXMuX3BvcHVwQWN0aXZlKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBlbGVtZW50ID0gbG9jYXRlTm9kZShlLCBcImRoeF9pZFwiLCBcInJlbGF0ZWRUYXJnZXRcIik7XG5cdFx0XHRcdFx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGh4X2lkXCIpO1xuXHRcdFx0XHRcdFx0XHRpZiAoIXRoaXMuZGF0YS5nZXRJdGVtKGlkKSkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2Nsb3NlKGUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9jbG9zZShlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fYWN0aXZlSXRlbUNoYW5nZShudWxsLCBlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG9uY2xpY2s6IChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGVsZW1lbnQgPSBsb2NhdGVOb2RlKGUpO1xuXHRcdFx0XHRpZiAoIWVsZW1lbnQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGh4X2lkXCIpO1xuXG5cdFx0XHRcdGlmICh0aGlzLmlzRGlzYWJsZWQoaWQpKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgaXRlbSA9IHRoaXMuZGF0YS5nZXRJdGVtKGlkKTtcblx0XHRcdFx0aWYgKGl0ZW0ubXVsdGlDbGljaykge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aGlzLmRhdGEuaGF2ZUl0ZW1zKGlkKSkge1xuXHRcdFx0XHRcdGlmICghdGhpcy5fdnBvcHVwcykge1xuXHRcdFx0XHRcdFx0dGhpcy5faW5pdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoaWQgPT09IHRoaXMuX2N1cnJlbnRSb290KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghdGhpcy5faXNBY3RpdmUpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2lzQWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fc2V0Um9vdChpZCk7XG5cdFx0XHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZXRSZWFsUG9zaXRpb24oZWxlbWVudCBhcyBIVE1MRWxlbWVudCk7XG5cdFx0XHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShpZCwgeyAkcG9zaXRpb246IHBvc2l0aW9uIH0sIGZhbHNlKTtcblx0XHRcdFx0XHR0aGlzLl9hY3RpdmVJdGVtQ2hhbmdlKGlkLCBlKTtcblx0XHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKE5hdmlnYXRpb25CYXJFdmVudHMuY2xpY2ssIFtpZCwgZV0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN3aXRjaCAoaXRlbS50eXBlKSB7XG5cdFx0XHRcdFx0XHRjYXNlIFwiaW5wdXRcIjpcblx0XHRcdFx0XHRcdGNhc2UgXCJ0aXRsZVwiOlxuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJtZW51SXRlbVwiOlxuXHRcdFx0XHRcdFx0Y2FzZSBcInNlbGVjdEJ1dHRvblwiOlxuXHRcdFx0XHRcdFx0XHR0aGlzLl9vbk1lbnVJdGVtQ2xpY2soaWQsIGUpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJpbWFnZUJ1dHRvblwiOlxuXHRcdFx0XHRcdFx0Y2FzZSBcImJ1dHRvblwiOlxuXHRcdFx0XHRcdFx0Y2FzZSBcImN1c3RvbUJ1dHRvblwiOlxuXHRcdFx0XHRcdFx0Y2FzZSBcImN1c3RvbUhUTUxcIjpcblx0XHRcdFx0XHRcdGNhc2UgXCJuYXZJdGVtXCI6XG5cdFx0XHRcdFx0XHRcdGlmICgoaXRlbSBhcyBhbnkpLnR3b1N0YXRlKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShpdGVtLmlkLCB7IGFjdGl2ZTogIWl0ZW0uYWN0aXZlIH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoTmF2aWdhdGlvbkJhckV2ZW50cy5jbGljaywgW2lkLCBlXSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2Nsb3NlKGUpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2Nsb3NlKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG9ubW91c2Vkb3duOiBlID0+IHtcblx0XHRcdFx0Y29uc3QgZWxlbWVudCA9IGxvY2F0ZU5vZGUoZSk7XG5cdFx0XHRcdGlmICghZWxlbWVudCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkaHhfaWRcIik7XG5cblx0XHRcdFx0Y29uc3QgaXRlbSA9IHRoaXMuZGF0YS5nZXRJdGVtKGlkKTtcblx0XHRcdFx0aWYgKCFpdGVtLm11bHRpQ2xpY2spIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgZmlyZVRpbWUgPSAzNjU7XG5cdFx0XHRcdGxldCB0aW1lb3V0O1xuXG5cdFx0XHRcdGNvbnN0IGZpcmVBY3Rpb24gPSAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShOYXZpZ2F0aW9uQmFyRXZlbnRzLmNsaWNrLCBbaWQsIGVdKTtcblx0XHRcdFx0XHRpZiAoZmlyZVRpbWUgPiA1MCkge1xuXHRcdFx0XHRcdFx0ZmlyZVRpbWUgLT0gNTU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZpcmVBY3Rpb24sIGZpcmVUaW1lKTtcblx0XHRcdFx0fTtcblx0XHRcdFx0Y29uc3QgbW91c2V1cCA9ICgpID0+IHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0XHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgbW91c2V1cCk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdGZpcmVBY3Rpb24oKTtcblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgbW91c2V1cCk7XG5cdFx0XHR9LFxuXHRcdFx0Li4udGhpcy5fY3VzdG9tSGFuZGxlcnMoKSxcblx0XHR9O1xuXHR9XG5cdHByb3RlY3RlZCBfaW5pdEV2ZW50cygpOiB2b2lkIHtcblx0XHRsZXQgdGltZW91dCA9IG51bGw7XG5cdFx0dGhpcy5kYXRhLmV2ZW50cy5vbihEYXRhRXZlbnRzLmNoYW5nZSwgKCkgPT4ge1xuXHRcdFx0dGhpcy5wYWludCgpO1xuXG5cdFx0XHRpZiAodGltZW91dCkge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0XHR9XG5cdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGdyb3VwczogSUdyb3VwcyA9IHt9O1xuXG5cdFx0XHRcdHRoaXMuZGF0YS5lYWNoQ2hpbGQoXG5cdFx0XHRcdFx0dGhpcy5kYXRhLmdldFJvb3QoKSxcblx0XHRcdFx0XHRpdGVtID0+IHtcblx0XHRcdFx0XHRcdGlmIChpdGVtLmdyb3VwKSB7XG5cdFx0XHRcdFx0XHRcdChpdGVtLnR3b1N0YXRlIGFzIGJvb2xlYW4pID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0YWRkSW5Hcm91cHMoZ3JvdXBzLCBpdGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHRydWVcblx0XHRcdFx0KTtcblx0XHRcdFx0dGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuXHRcdFx0XHR0aGlzLl9yZXNldEhvdGtleXMoKTtcblx0XHRcdFx0dGltZW91dCA9IG51bGw7XG5cdFx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHRcdH0sIDEwMCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5ldmVudHMub24oTmF2aWdhdGlvbkJhckV2ZW50cy5jbGljaywgaWQgPT4ge1xuXHRcdFx0Y29uc3QgaXRlbSA9IHRoaXMuZGF0YS5nZXRJdGVtKGlkKTtcblx0XHRcdGNvbnN0IHBhcmVudCA9IHRoaXMuZGF0YS5nZXRJdGVtKGl0ZW0ucGFyZW50KTtcblxuXHRcdFx0aWYgKHBhcmVudCAmJiBwYXJlbnQudHlwZSA9PT0gXCJzZWxlY3RCdXR0b25cIikge1xuXHRcdFx0XHR0aGlzLmRhdGEudXBkYXRlKGl0ZW0ucGFyZW50LCB7IHZhbHVlOiBpdGVtLnZhbHVlLCBpY29uOiBpdGVtLmljb24gfSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaXRlbS5ncm91cCkge1xuXHRcdFx0XHRjb25zdCBncm91cCA9IHRoaXMuX2dyb3Vwc1tpdGVtLmdyb3VwXTtcblxuXHRcdFx0XHRpZiAoZ3JvdXAuYWN0aXZlKSB7XG5cdFx0XHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShncm91cC5hY3RpdmUsIHsgYWN0aXZlOiBmYWxzZSB9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRncm91cC5hY3RpdmUgPSBpdGVtLmlkO1xuXHRcdFx0XHR0aGlzLmRhdGEudXBkYXRlKGl0ZW0uaWQsIHsgYWN0aXZlOiB0cnVlIH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZXZlbnRzLm9uKE5hdmlnYXRpb25CYXJFdmVudHMuaW5wdXRDaGFuZ2UsIChpZCwgbmV3VmFsdWUpID0+IHtcblx0XHRcdHRoaXMuZGF0YS51cGRhdGUoaWQsIHsgdmFsdWU6IG5ld1ZhbHVlIH0pO1xuXHRcdH0pO1xuXHRcdHRoaXMuX2N1c3RvbUluaXRFdmVudHMoKTtcblx0fVxuXHRwcm90ZWN0ZWQgX2dldE1vZGUoaXRlbTogVCwgcm9vdDogSWQsIF9hY3RpdmUgPSBmYWxzZSk6IFwiYm90dG9tXCIgfCBcInJpZ2h0XCIge1xuXHRcdHJldHVybiBpdGVtLnBhcmVudCA9PT0gcm9vdCA/IFwiYm90dG9tXCIgOiBcInJpZ2h0XCI7XG5cdH1cblx0cHJvdGVjdGVkIF9kcmF3TWVudUl0ZW1zKGlkOiBJZCwgYXNNZW51SXRlbSA9IHRydWUpIHtcblx0XHRyZXR1cm4gdGhpcy5kYXRhLm1hcChpdGVtID0+IHRoaXMuX2ZhY3RvcnkoaXRlbSwgYXNNZW51SXRlbSksIGlkLCBmYWxzZSk7XG5cdH1cblx0cHJvdGVjdGVkIF9zZXRSb290KF9pZDogSWQpOiB2b2lkIHtcblx0XHRyZXR1cm47IC8vIG5lZWQgb25seSBmb3IgdG9vbGJhclxuXHR9XG5cdHByb3RlY3RlZCBfZ2V0UGFyZW50cyhpZCwgcm9vdCk6IElkW10ge1xuXHRcdGNvbnN0IHBhcmVudElkcyA9IFtdO1xuXHRcdGxldCBhZnRlclJvb3QgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGN1cnJlbnRJdGVtID0gdGhpcy5kYXRhLmdldEl0ZW0oaWQpO1xuXHRcdGNvbnN0IGRpc2FibGVkID0gY3VycmVudEl0ZW0gJiYgY3VycmVudEl0ZW0uZGlzYWJsZWQ7XG5cdFx0dGhpcy5kYXRhLmVhY2hQYXJlbnQoXG5cdFx0XHRpZCxcblx0XHRcdGl0ZW0gPT4ge1xuXHRcdFx0XHRpZiAoaXRlbS5pZCA9PT0gcm9vdCkge1xuXHRcdFx0XHRcdHBhcmVudElkcy5wdXNoKGl0ZW0uaWQpO1xuXHRcdFx0XHRcdGFmdGVyUm9vdCA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIWFmdGVyUm9vdCkge1xuXHRcdFx0XHRcdHBhcmVudElkcy5wdXNoKGl0ZW0uaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0IWRpc2FibGVkXG5cdFx0KTtcblxuXHRcdGlmICh0aGlzLl9pc0NvbnRleHRNZW51ICYmIHRoaXMuX2FjdGl2ZVBvc2l0aW9uKSB7XG5cdFx0XHRwYXJlbnRJZHMucHVzaChyb290KTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcmVudElkcztcblx0fVxuXHRwcm90ZWN0ZWQgX2xpc3Rlbk91dGVyQ2xpY2soKSB7XG5cdFx0aWYgKHRoaXMuX2RvY3VtZW50SGF2ZUxpc3RlbmVyKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fZG9jdW1lbnRDbGljaywgdHJ1ZSk7XG5cdFx0dGhpcy5fZG9jdW1lbnRIYXZlTGlzdGVuZXIgPSB0cnVlO1xuXHR9XG5cdHByb3RlY3RlZCBfY3VzdG9tSW5pdEV2ZW50cygpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0cHJpdmF0ZSBfZHJhd1BvcHVwcygpIHtcblx0XHRjb25zdCBpZCA9IHRoaXMuX2FjdGl2ZU1lbnU7XG5cdFx0aWYgKCF0aGlzLl9pc0NvbnRleHRNZW51ICYmICFpZCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGNvbnN0IHJvb3ROb2RlID0gdGhpcy5nZXRSb290Tm9kZSgpO1xuXHRcdGNvbnN0IG9mZnNldFBhcmVudCA9XG5cdFx0XHRyb290Tm9kZSAmJiByb290Tm9kZS5vZmZzZXRQYXJlbnQgJiYgKHJvb3ROb2RlLm9mZnNldFBhcmVudCBhcyBIVE1MRWxlbWVudCkub2Zmc2V0UGFyZW50O1xuXHRcdGxldCB6SW5kZXggPSBudWxsO1xuXHRcdGlmIChcblx0XHRcdG9mZnNldFBhcmVudCAmJlxuXHRcdFx0b2Zmc2V0UGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhcImRoeF9wb3B1cC0td2luZG93XCIpICYmXG5cdFx0XHRvZmZzZXRQYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X3BvcHVwLS13aW5kb3dfYWN0aXZlXCIpXG5cdFx0KSB7XG5cdFx0XHR6SW5kZXggPSAyMTQ3NDgzNjQ3O1xuXHRcdH1cblx0XHRjb25zdCByb290ID0gdGhpcy5fY3VycmVudFJvb3Q7XG5cdFx0aWYgKHRoaXMuX2lzQ29udGV4dE1lbnUgJiYgIXRoaXMuX2FjdGl2ZVBvc2l0aW9uKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0Y29uc3QgcGFyZW50SWRzID0gdGhpcy5fZ2V0UGFyZW50cyhpZCwgcm9vdCk7XG5cdFx0dGhpcy5fYWN0aXZlUGFyZW50cyA9IHBhcmVudElkcztcblx0XHRwYXJlbnRJZHMuZm9yRWFjaChcblx0XHRcdHBhcmVudElkID0+XG5cdFx0XHRcdHRoaXMuZGF0YS5leGlzdHMocGFyZW50SWQpICYmIHRoaXMuZGF0YS51cGRhdGUocGFyZW50SWQsIHsgJGFjdGl2ZVBhcmVudDogdHJ1ZSB9LCBmYWxzZSlcblx0XHQpO1xuXHRcdHJldHVybiBwYXJlbnRJZHNcblx0XHRcdC5tYXAoaXRlbUlkID0+IHtcblx0XHRcdFx0aWYgKCF0aGlzLmRhdGEuaGF2ZUl0ZW1zKGl0ZW1JZCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBnZXRBcmlhQXR0cnMgPSBpdGVtID0+ICh7XG5cdFx0XHRcdFx0cm9sZTogXCJtZW51XCIsXG5cdFx0XHRcdFx0XCJhcmlhLWxhYmVsZWRieVwiOiBpdGVtLmlkLFxuXHRcdFx0XHRcdFwiYXJpYS1saXZlXCI6IFwicG9saXRlXCIsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRjb25zdCBpdGVtID0gdGhpcy5kYXRhLmdldEl0ZW0oaXRlbUlkKSB8fCB0aGlzLl9yb290SXRlbTsgLy8gZm9yIHJvb3QgaXRlbVxuXHRcdFx0XHR0aGlzLl9wb3B1cEFjdGl2ZSA9IHRydWU7XG5cdFx0XHRcdHJldHVybiBlbChcblx0XHRcdFx0XHRcInVsXCIsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Y2xhc3M6IFwiZGh4X3dpZGdldCBkaHhfbWVudVwiICsgKHRoaXMuY29uZmlnLm1lbnVDc3MgPyBcIiBcIiArIHRoaXMuY29uZmlnLm1lbnVDc3MgOiBcIlwiKSxcblx0XHRcdFx0XHRcdF9rZXk6IGl0ZW1JZCxcblx0XHRcdFx0XHRcdF9ob29rczoge1xuXHRcdFx0XHRcdFx0XHRkaWRJbnNlcnQ6IHZub2RlID0+IHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHZub2RlLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHBvc2l0aW9uID1cblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX2lzQ29udGV4dE1lbnUgJiYgdGhpcy5fYWN0aXZlUG9zaXRpb24gJiYgaXRlbUlkID09PSByb290XG5cdFx0XHRcdFx0XHRcdFx0XHRcdD8gdGhpcy5fYWN0aXZlUG9zaXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0OiBpdGVtLiRwb3NpdGlvbjtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBtb2RlID0gdGhpcy5fZ2V0TW9kZShpdGVtLCByb290LCBwb3NpdGlvbiA9PT0gdGhpcy5fYWN0aXZlUG9zaXRpb24pO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHN0eWxlID0gY2FsY3VsYXRlUG9zaXRpb24ocG9zaXRpb24sIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vZGU6IG1vZGUgYXMgYW55LFxuXHRcdFx0XHRcdFx0XHRcdFx0d2lkdGgsXG5cdFx0XHRcdFx0XHRcdFx0XHRoZWlnaHQsXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0aXRlbS4kc3R5bGUgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQuLi5zdHlsZSxcblx0XHRcdFx0XHRcdFx0XHRcdHpJbmRleDogdGhpcy5fYWN0aXZlUG9zaXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0PyB0aGlzLl9hY3RpdmVQb3NpdGlvbi56SW5kZXggfHwgekluZGV4XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDogekluZGV4LFxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0dm5vZGUucGF0Y2goeyBzdHlsZTogaXRlbS4kc3R5bGUgfSk7XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdGRpZFJlY3ljbGU6IChfLCB2bm9kZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0aGlzLl9pc0NvbnRleHRNZW51ICYmIHRoaXMuX2FjdGl2ZVBvc2l0aW9uICYmIGl0ZW1JZCA9PT0gcm9vdCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB2bm9kZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHN0eWxlID0gY2FsY3VsYXRlUG9zaXRpb24odGhpcy5fYWN0aXZlUG9zaXRpb24sIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kZTogdGhpcy5fZ2V0TW9kZShpdGVtLCByb290LCB0cnVlKSBhcyBhbnksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRoZWlnaHQsXG5cdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdGl0ZW0uJHN0eWxlID0geyAuLi5zdHlsZSwgekluZGV4OiB0aGlzLl9hY3RpdmVQb3NpdGlvbi56SW5kZXggfHwgekluZGV4IH07XG5cdFx0XHRcdFx0XHRcdFx0XHR2bm9kZS5wYXRjaCh7IHN0eWxlOiBpdGVtLiRzdHlsZSB9KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dGFiaW5kZXg6IDAsXG5cdFx0XHRcdFx0XHRzdHlsZTogaXRlbS4kc3R5bGUgfHwge1xuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdC4uLmdldEFyaWFBdHRycyhpdGVtKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHRoaXMuX2RyYXdNZW51SXRlbXMoaXRlbUlkKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSlcblx0XHRcdC5yZXZlcnNlKCk7XG5cdH1cblx0cHJpdmF0ZSBfb25NZW51SXRlbUNsaWNrKGlkLCBlKSB7XG5cdFx0Y29uc3QgaXRlbSA9IHRoaXMuZGF0YS5nZXRJdGVtKGlkKTtcblx0XHRpZiAoaXRlbS5kaXNhYmxlZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoKGl0ZW0gYXMgYW55KS50d29TdGF0ZSkge1xuXHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShpdGVtLmlkLCB7IGFjdGl2ZTogIWl0ZW0uYWN0aXZlIH0pO1xuXHRcdH1cblx0XHR0aGlzLmV2ZW50cy5maXJlKE5hdmlnYXRpb25CYXJFdmVudHMuY2xpY2ssIFtpZCwgZV0pO1xuXHRcdHRoaXMuX2Nsb3NlKGUpO1xuXHR9XG5cdHByaXZhdGUgX2FjdGl2ZUl0ZW1DaGFuZ2UoaWQ6IElkLCBlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuX2FjdGl2ZVBhcmVudHMpIHtcblx0XHRcdGNvbnN0IHBhcmVudElkcyA9IHRoaXMuX2dldFBhcmVudHMoaWQsIHRoaXMuX2N1cnJlbnRSb290KTtcblx0XHRcdHRoaXMuX2FjdGl2ZVBhcmVudHMuZm9yRWFjaChwYXJlbnRJZCA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmRhdGEuZXhpc3RzKHBhcmVudElkKSAmJiAhcGFyZW50SWRzLmluY2x1ZGVzKHBhcmVudElkKSkge1xuXHRcdFx0XHRcdHRoaXMuZGF0YS51cGRhdGUocGFyZW50SWQsIHsgJGFjdGl2ZVBhcmVudDogZmFsc2UgfSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKGlkICYmICF0aGlzLl9kb2N1bWVudEhhdmVMaXN0ZW5lcikge1xuXHRcdFx0dGhpcy5fbGlzdGVuT3V0ZXJDbGljaygpO1xuXHRcdH1cblx0XHRpZiAoaWQgJiYgdGhpcy5kYXRhLmhhdmVJdGVtcyhpZCkpIHtcblx0XHRcdGlmICh0aGlzLl9hY3RpdmVNZW51ICE9PSBpZCB8fCAhdGhpcy5fcG9wdXBBY3RpdmUpIHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShOYXZpZ2F0aW9uQmFyRXZlbnRzLm9wZW5NZW51LCBbaWRdKTtcblx0XHRcdH1cblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl9jdXJyZW50VGltZW91dCk7XG5cdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl9jdXJyZW50VGltZW91dCk7XG5cdFx0XHR0aGlzLl9jdXJyZW50VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wYWludCgpLCA0MDApO1xuXHRcdH1cblx0XHR0aGlzLl9hY3RpdmVNZW51ID0gaWQ7XG5cdH1cblx0cHJpdmF0ZSBfcmVzZXRIb3RrZXlzKCk6IHZvaWQge1xuXHRcdHRoaXMuX2tleU1hbmFnZXIucmVtb3ZlSG90S2V5KG51bGwsIHRoaXMpO1xuXHRcdHRoaXMuZGF0YS5tYXAoaXRlbSA9PiB7XG5cdFx0XHRpZiAoaXRlbS5ob3RrZXkpIHtcblx0XHRcdFx0dGhpcy5fa2V5TWFuYWdlci5hZGRIb3RLZXkoaXRlbS5ob3RrZXksICgpID0+IHRoaXMuX29uTWVudUl0ZW1DbGljayhpdGVtLmlkLCBudWxsKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBfc2V0UHJvcChpZDogSWQgfCBJZFtdLCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuXHRcdGlmIChBcnJheS5pc0FycmF5KGlkKSkge1xuXHRcdFx0aWQuZm9yRWFjaChpdGVtSWQgPT4gdGhpcy5kYXRhLnVwZGF0ZShpdGVtSWQsIHsgW2tleV06IHZhbHVlIH0pKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5kYXRhLnVwZGF0ZShpZCwgeyBba2V5XTogdmFsdWUgfSk7XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgeyBlbCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IGdldENvdW50LCBnZXRJY29uLCBnZXROYXZiYXJCdXR0b25DU1MgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBidXR0b24oaXRlbTogYW55LCB3aWRnZXROYW1lOiBzdHJpbmcpIHtcblx0Y29uc3QgZ2V0QXJpYUF0dHJzID0gaXRlbSA9PiB7XG5cdFx0Y29uc3QgaXNJdGVtQWN0aXZhdGVkID0gaXRlbS5hY3RpdmUgfHwgaXRlbS4kYWN0aXZlUGFyZW50O1xuXHRcdGNvbnN0IGF0dHJzID0ge1xuXHRcdFx0XCJhcmlhLWRpc2FibGVkXCI6IGl0ZW0uZGlzYWJsZWQgPyBcInRydWVcIiA6IFwiZmFsc2VcIixcblx0XHRcdFwiYXJpYS1sYWJlbFwiOiBpdGVtLnZhbHVlIHx8IGl0ZW0udG9vbHRpcCB8fCBpdGVtLmlkIHx8IFwiXCIgKyBgICR7aXRlbS5jb3VudCB8fCBcIlwifWAsXG5cdFx0fTtcblxuXHRcdGlmIChpdGVtLml0ZW1zKSB7XG5cdFx0XHQvLyBhcyBtZW51XG5cdFx0XHRhdHRyc1tcImlkXCJdID0gaXRlbS5pZDtcblx0XHRcdGF0dHJzW1wiYXJpYS1oYXNwb3B1cFwiXSA9IFwibWVudVwiOyAvLyBtZW51IGhhcyBob3Qga2V5cywgbGlzdGJveCBkb2Vzbid0IGhhdmVcblxuXHRcdFx0aWYgKGlzSXRlbUFjdGl2YXRlZCkge1xuXHRcdFx0XHRhdHRyc1tcImFyaWEtZXhwYW5kZWRcIl0gPSBcInRydWVcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gYXR0cnM7XG5cdH07XG5cdGNvbnN0IGlzSWNvbkJ1dHRvbiA9IGl0ZW0uaWNvbiAmJiAhaXRlbS52YWx1ZTtcblx0Y29uc3QgY291bnRlckNsYXNzID0gaXNJY29uQnV0dG9uID8gXCIgZGh4X25hdmJhci1jb3VudC0tYWJzb2x1dGVcIiA6IFwiIGRoeF9uYXZiYXItY291bnQtLWJ1dHRvbi1pbmxpbmVcIjtcblx0cmV0dXJuIGVsKFxuXHRcdFwiYnV0dG9uLmRoeF9idXR0b25cIixcblx0XHR7XG5cdFx0XHRjbGFzczogZ2V0TmF2YmFyQnV0dG9uQ1NTKGl0ZW0sIHdpZGdldE5hbWUpLFxuXHRcdFx0ZGh4X2lkOiBpdGVtLmlkLFxuXHRcdFx0ZGlzYWJsZWQ6IGl0ZW0uZGlzYWJsZWQsXG5cdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0Li4uZ2V0QXJpYUF0dHJzKGl0ZW0pLFxuXHRcdH0sXG5cdFx0W1xuXHRcdFx0aXRlbS5pY29uID8gZ2V0SWNvbihpdGVtLmljb24sIFwiYnV0dG9uXCIpIDogbnVsbCxcblx0XHRcdGl0ZW0uaHRtbFxuXHRcdFx0XHQ/IGVsKFwiZGl2LmRoeF9idXR0b25fX3RleHRcIiwgeyBcIi5pbm5lckhUTUxcIjogaXRlbS5odG1sIH0pXG5cdFx0XHRcdDogaXRlbS52YWx1ZSAmJiBlbChcInNwYW4uZGh4X2J1dHRvbl9fdGV4dFwiLCBpdGVtLnZhbHVlKSxcblx0XHRcdGl0ZW0uY291bnQgPiAwICYmIGdldENvdW50KGl0ZW0sIGNvdW50ZXJDbGFzcywgaXNJY29uQnV0dG9uKSxcblx0XHRcdGl0ZW0udmFsdWUgJiYgaXRlbS4kb3Blbkljb25cblx0XHRcdFx0PyBlbChcInNwYW4uZGh4X2J1dHRvbl9faWNvbi5kaHhfYnV0dG9uX19pY29uLS1tZW51LmR4aS5keGktbWVudS1yaWdodFwiLCB7XG5cdFx0XHRcdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XHQgIH0pXG5cdFx0XHRcdDogbnVsbCxcblx0XHRcdGl0ZW0ubG9hZGluZyAmJlxuXHRcdFx0XHRlbChcblx0XHRcdFx0XHRcInNwYW4uZGh4X2J1dHRvbl9fbG9hZGluZ1wiLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRbZWwoXCJzcGFuLmRoeF9idXR0b25fX2xvYWRpbmctaWNvbi5keGkuZHhpLWxvYWRpbmdcIildXG5cdFx0XHRcdCksXG5cdFx0XVxuXHQpO1xufVxuIiwiaW1wb3J0IHsgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21IVE1MQnV0dG9uKGl0ZW06IGFueSwgd2lkZ2V0TmFtZT86IHN0cmluZywgYXNNZW51SXRlbT86IGJvb2xlYW4pIHtcblx0Y29uc3QgZ2V0QXJpYUF0dHJzID0gaXRlbSA9PiB7XG5cdFx0Y29uc3QgYXR0cnMgPSB7XG5cdFx0XHRcImFyaWEtZGlzYWJsZWRcIjogaXRlbS5kaXNhYmxlZCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiLFxuXHRcdH07XG5cblx0XHRpZiAoaXRlbS50d29TdGF0ZSB8fCBpdGVtLmFjdGl2ZSB8fCBpdGVtLiRhY3RpdmVQYXJlbnQpIHtcblx0XHRcdGF0dHJzW1wiYXJpYS1wcmVzc2VkXCJdID0gaXRlbS5hY3RpdmUgfHwgaXRlbS4kYWN0aXZlUGFyZW50ID8gXCJ0cnVlXCIgOiBcImZhbHNlXCI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGF0dHJzO1xuXHR9O1xuXHRjb25zdCBiYXNlQ2xhc3MgPSBhc01lbnVJdGVtID8gXCIgZGh4X2J1dHRvbiBkaHhfbWVudS1idXR0b25cIiA6IFwiIGRoeF9idXR0b24gZGh4X25hdi1tZW51LWJ1dHRvblwiO1xuXHRyZXR1cm4gZWwoXG5cdFx0XCJidXR0b25cIixcblx0XHR7XG5cdFx0XHRjbGFzczogXCJkaHhfY3VzdG9tLWJ1dHRvblwiICsgYmFzZUNsYXNzICsgKGl0ZW0uJGFjdGl2ZVBhcmVudCA/IGJhc2VDbGFzcyArIFwiLS1hY3RpdmVcIiA6IFwiXCIpLFxuXHRcdFx0ZGh4X2lkOiBpdGVtLmlkLFxuXHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFwiLmlubmVySFRNTFwiOiBpdGVtLmh0bWwsXG5cdFx0XHQuLi5nZXRBcmlhQXR0cnMoaXRlbSksXG5cdFx0fSxcblx0XHRpdGVtLmh0bWwgPyBcIlwiIDogaXRlbS52YWx1ZVxuXHQpO1xufVxuIiwiaW1wb3J0IHsgZWwsIGF3YWl0UmVkcmF3IH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgQ2FsZW5kYXIgfSBmcm9tIFwiQGRoeC90cy1jYWxlbmRhclwiO1xuaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiQGRoeC90cy1wb3B1cFwiO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkJhckV2ZW50cyB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5sZXQgaXNJbml0O1xubGV0IGNhbGVuZGFyO1xubGV0IHBvcHVwO1xuXG5mdW5jdGlvbiBvbkJsdXIoZXZlbnRzLCBpZCkge1xuXHRldmVudHMuZmlyZShOYXZpZ2F0aW9uQmFyRXZlbnRzLmlucHV0Qmx1ciwgW2lkXSk7XG59XG5cbmZ1bmN0aW9uIG9uRm9jdXMoZXZlbnRzLCBpZCwgZSkge1xuXHRhd2FpdFJlZHJhdygpLnRoZW4oKCkgPT4gcG9wdXAuc2hvdyhlLnRhcmdldCkpO1xuXHRldmVudHMuZmlyZShOYXZpZ2F0aW9uQmFyRXZlbnRzLmlucHV0Rm9jdXMsIFtpZF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVBpY2tlcihpdGVtLCBldmVudHMsIHdpZGdldE5hbWU6IHN0cmluZykge1xuXHRpZiAoIWlzSW5pdCkge1xuXHRcdHBvcHVwID0gbmV3IFBvcHVwKCk7XG5cdFx0Y2FsZW5kYXIgPSBuZXcgQ2FsZW5kYXIobnVsbCwge1xuXHRcdFx0ZGF0ZUZvcm1hdDogaXRlbS5kYXRlRm9ybWF0IHx8IFwiJWQvJW0vJXlcIixcblx0XHRcdHZhbHVlOiBpdGVtLnZhbHVlLFxuXHRcdFx0Y3NzOiBcImRoeF93aWRnZXQtLWJvcmRlcmVkXCIsXG5cdFx0fSk7XG5cblx0XHRwb3B1cC5hdHRhY2goY2FsZW5kYXIpO1xuXG5cdFx0Y2FsZW5kYXIuZXZlbnRzLm9uKFwiY2hhbmdlXCIsICgpID0+IHtcblx0XHRcdHBvcHVwLmhpZGUoKTtcblx0XHRcdGV2ZW50cy5maXJlKE5hdmlnYXRpb25CYXJFdmVudHMuaW5wdXRDaGFuZ2UsIFtpdGVtLmlkLCBjYWxlbmRhci5nZXRWYWx1ZSgpXSk7XG5cdFx0fSk7XG5cdFx0aXNJbml0ID0gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiBlbChcblx0XHRcIi5kaHhfZm9ybS1ncm91cC5kaHhfZm9ybS1ncm91cC0tbm8tbWVzc2FnZS1ob2xkZXIuZGh4X2Zvcm0tZ3JvdXAtLWxhYmVsX3NyXCIgK1xuXHRcdFx0YC5kaHhfJHt3aWRnZXROYW1lfV9faW5wdXRgLFxuXHRcdHtcblx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdHdpZHRoOiBpdGVtLndpZHRoID8gaXRlbS53aWR0aCA6IFwiMjAwcHhcIixcblx0XHRcdH0sXG5cdFx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdH0sXG5cdFx0W1xuXHRcdFx0aXRlbS5sYWJlbCAmJiBlbChcImxhYmVsLmRoeF9sYWJlbFwiLCB7IGZvcjogaXRlbS5pZCB9LCBpdGVtLmxhYmVsKSxcblx0XHRcdGVsKFxuXHRcdFx0XHRcIi5kaHhfaW5wdXRfX3dyYXBwZXJcIixcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFtcblx0XHRcdFx0XHRlbChcImlucHV0LmRoeF9pbnB1dFwiLCB7XG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlcjogaXRlbS5wbGFjZWhvbGRlcixcblx0XHRcdFx0XHRcdGNsYXNzOiBpdGVtLmljb24gPyBcImRoeF9pbnB1dC0taWNvbi1wYWRkaW5nXCIgOiBcIlwiLFxuXHRcdFx0XHRcdFx0dmFsdWU6IGNhbGVuZGFyLmdldFZhbHVlKCksXG5cdFx0XHRcdFx0XHRkaXNhYmxlZDogaXRlbS5kaXNhYmxlZCxcblx0XHRcdFx0XHRcdG9uYmx1cjogW29uQmx1ciwgZXZlbnRzLCBpdGVtLmlkXSxcblx0XHRcdFx0XHRcdG9uZm9jdXM6IFtvbkZvY3VzLCBldmVudHMsIGl0ZW0uaWRdLFxuXHRcdFx0XHRcdFx0ZGh4X2lkOiBpdGVtLmlkLFxuXHRcdFx0XHRcdFx0cmVhZE9ubHk6IHRydWUsXG5cdFx0XHRcdFx0XHRfaG9va3M6IHtcblx0XHRcdFx0XHRcdFx0ZGlkSW5zZXJ0KG5vZGUpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoZXZlbnRzKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRldmVudHMuZmlyZShOYXZpZ2F0aW9uQmFyRXZlbnRzLmlucHV0Q3JlYXRlZCwgW2l0ZW0uaWQsIG5vZGUuZWxdKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0X2tleTogaXRlbS5pZCxcblx0XHRcdFx0XHRcdFwiYXJpYS1sYWJlbFwiOlxuXHRcdFx0XHRcdFx0XHRpdGVtLmxhYmVsIHx8XG5cdFx0XHRcdFx0XHRcdGl0ZW0uaGVscE1lc3NhZ2UgfHxcblx0XHRcdFx0XHRcdFx0YHR5cGUgJHtpdGVtLnBsYWNlaG9sZGVyID8gXCJ0ZXh0IGxpa2UgXCIgKyBpdGVtLnBsYWNlaG9sZGVyIDogXCJ0ZXh0XCJ9YCxcblx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHRpdGVtLmljb25cblx0XHRcdFx0XHRcdD8gZWwoXCIuZGh4X2lucHV0X19pY29uXCIsIHtcblx0XHRcdFx0XHRcdFx0XHRjbGFzczogaXRlbS5pY29uLFxuXHRcdFx0XHRcdFx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG5cdFx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0XHQ6IG51bGwsXG5cdFx0XHRcdF1cblx0XHRcdCksXG5cdFx0XVxuXHQpO1xufVxuIiwiaW1wb3J0IHsgZWwsIFZOb2RlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgaXNEZWZpbmVkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcbmltcG9ydCB7IElJdGVtIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb3VudChpdGVtLCB3aWRnZXRDbGFzcywgaXNMaW1pdGVkKSB7XG5cdGNvbnN0IGNvdW50Q29sb3IgPVxuXHRcdHtcblx0XHRcdGRhbmdlcjogXCIgZGh4X25hdmJhci1jb3VudC0tY29sb3JfZGFuZ2VyXCIsXG5cdFx0XHRzZWNvbmRhcnk6IFwiIGRoeF9uYXZiYXItY291bnQtLWNvbG9yX3NlY29uZGFyeVwiLFxuXHRcdFx0cHJpbWFyeTogXCIgZGh4X25hdmJhci1jb3VudC0tY29sb3JfcHJpbWFyeVwiLFxuXHRcdFx0c3VjY2VzczogXCIgZGh4X25hdmJhci1jb3VudC0tY29sb3Jfc3VjY2Vzc1wiLFxuXHRcdH1baXRlbS5jb3VudENvbG9yXSB8fCBcIiBkaHhfbmF2YmFyLWNvdW50LS1jb2xvcl9kYW5nZXJcIjtcblx0cmV0dXJuIGVsKFxuXHRcdFwiLmRoeF9uYXZiYXItY291bnRcIixcblx0XHR7XG5cdFx0XHRjbGFzczpcblx0XHRcdFx0d2lkZ2V0Q2xhc3MgK1xuXHRcdFx0XHRjb3VudENvbG9yICtcblx0XHRcdFx0KCFpc0xpbWl0ZWQgJiYgcGFyc2VJbnQoaXRlbS5jb3VudCwgMTApID4gOTkgPyBcIiBkaHhfbmF2YmFyLWNvdW50LS1vdmVybGltaXRcIiA6IFwiXCIpLFxuXHRcdH0sXG5cdFx0aXNMaW1pdGVkICYmIHBhcnNlSW50KGl0ZW0uY291bnQsIDEwKSA+IDk5ID8gXCI5OStcIiA6IGl0ZW0uY291bnRcblx0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEljb24oaWNvbk5hbWUgPSBcIlwiLCB0eXBlKSB7XG5cdGlmIChpY29uTmFtZS5zdGFydHNXaXRoKFwiZHhpXCIpKSB7XG5cdFx0aWNvbk5hbWUgPSBcImR4aSBcIiArIGljb25OYW1lO1xuXHR9XG5cdHJldHVybiBlbChcInNwYW5cIiwge1xuXHRcdGNsYXNzOiBgZGh4XyR7dHlwZX1fX2ljb24gJHtpY29uTmFtZX1gLFxuXHRcdFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG5cdH0pO1xufVxuXG5jb25zdCBnZXROYXZiYXJJdGVtQ2xhc3MgPSAod2lkZ2V0TmFtZTogc3RyaW5nLCBpdGVtOiBJSXRlbSwgYXNNZW51SXRlbTogYm9vbGVhbikgPT4ge1xuXHRsZXQgYmFzZUNsYXNzTmFtZSA9IFwiXCI7XG5cdGxldCByZXN1bHRDbGFzc05hbWUgPSBcIlwiO1xuXHRpZiAoYXNNZW51SXRlbSkge1xuXHRcdGJhc2VDbGFzc05hbWUgPSBcImRoeF9tZW51LWl0ZW1cIjtcblx0fSBlbHNlIHtcblx0XHRiYXNlQ2xhc3NOYW1lID0gXCJkaHhfXCIgKyB3aWRnZXROYW1lICsgXCJfX2l0ZW1cIjtcblx0fVxuXHRyZXN1bHRDbGFzc05hbWUgPSBiYXNlQ2xhc3NOYW1lICsgKGl0ZW0uY3NzID8gXCIgXCIgKyBpdGVtLmNzcyA6IFwiXCIpO1xuXG5cdGlmIChpdGVtLnR5cGUgPT09IFwic3BhY2VyXCIgfHwgaXRlbS50eXBlID09PSBcInNlcGFyYXRvclwiKSB7XG5cdFx0cmVzdWx0Q2xhc3NOYW1lICs9IGAgJHtiYXNlQ2xhc3NOYW1lfS0tJHtpdGVtLnR5cGV9YDtcblx0fVxuXG5cdGlmIChpdGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgJiYgd2lkZ2V0TmFtZSA9PT0gXCJzaWRlYmFyXCIgJiYgIWl0ZW0uaWNvbikge1xuXHRcdHJlc3VsdENsYXNzTmFtZSArPSBcIiBkaHhfbmF2YmFyLWl0ZW0tLWNvbGFwc2VfaGlkZGVuXCI7XG5cdH1cblx0cmV0dXJuIHJlc3VsdENsYXNzTmFtZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXZiYXJDb21wb25lbnRNaXhpbihcblx0d2lkZ2V0TmFtZTogc3RyaW5nLFxuXHRpdGVtOiBJSXRlbSxcblx0YXNNZW51SXRlbTogYm9vbGVhbixcblx0Ym9keTogVk5vZGVcbik6IFZOb2RlIHtcblx0Y29uc3QgZ2V0QXJpYUF0dHJzID0gdHlwZSA9PiB7XG5cdFx0Y29uc3QgYXR0cnMgPSB7XG5cdFx0XHRyb2xlOiBcIm5vbmVcIixcblx0XHR9O1xuXG5cdFx0aWYgKHR5cGUgPT09IFwic2VwYXJhdG9yXCIpIHtcblx0XHRcdGF0dHJzLnJvbGUgPSBcInNlcGFyYXRvclwiO1xuXHRcdFx0YXR0cnNbXCJhcmlhLW9yaWVudGF0aW9uXCJdID0gXCJ2ZXJ0aWNhbFwiO1xuXHRcdH1cblxuXHRcdHJldHVybiBhdHRycztcblx0fTtcblx0Y29uc3QgaXRlbUNsYXNzID0gZ2V0TmF2YmFySXRlbUNsYXNzKHdpZGdldE5hbWUsIGl0ZW0sIGFzTWVudUl0ZW0pO1xuXHRjb25zdCBoYXNSaWJib25TaXplID0gd2lkZ2V0TmFtZSA9PT0gXCJyaWJib25cIiAmJiAoaXRlbS50eXBlID09PSBcIm5hdkl0ZW1cIiB8fCBpdGVtLnR5cGUgPT09IFwiaW1hZ2VCdXR0b25cIik7XG5cdHJldHVybiBlbChcblx0XHRcImxpXCIsXG5cdFx0e1xuXHRcdFx0X2tleTogaXRlbS5pZCxcblx0XHRcdGNsYXNzOlxuXHRcdFx0XHRpdGVtQ2xhc3MgK1xuXHRcdFx0XHQoaXRlbS5pY29uICYmICFpdGVtLnZhbHVlICYmIGhhc1JpYmJvblNpemUgPyBcIiBkaHhfcmliYm9uX19pdGVtLS1pY29uXCIgOiBcIlwiKSArXG5cdFx0XHRcdChpdGVtLnNyYyAmJiAhaXRlbS52YWx1ZSAmJiBoYXNSaWJib25TaXplID8gXCIgZGh4X3JpYmJvbl9faXRlbS0taWNvblwiIDogXCJcIikgK1xuXHRcdFx0XHQoaXRlbS5zaXplICYmIGhhc1JpYmJvblNpemUgPyBcIiBkaHhfcmliYm9uX19pdGVtLS1cIiArIGl0ZW0uc2l6ZSA6IFwiXCIpLFxuXHRcdFx0XCIuaW5uZXJIVE1MXCI6IGl0ZW0udHlwZSA9PT0gXCJjdXN0b21IVE1MXCIgPyBpdGVtLmh0bWwgOiB1bmRlZmluZWQsXG5cdFx0XHRkaHhfaWQ6IGl0ZW0udHlwZSA9PT0gXCJjdXN0b21IVE1MXCIgPyBpdGVtLmlkIDogdW5kZWZpbmVkLFxuXHRcdFx0Li4uZ2V0QXJpYUF0dHJzKGl0ZW0udHlwZSksXG5cdFx0fSxcblx0XHRpdGVtLnR5cGUgIT09IFwiY3VzdG9tSFRNTFwiID8gW2JvZHldIDogdW5kZWZpbmVkXG5cdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROYXZiYXJCdXR0b25DU1MoXG5cdHsgY29sb3IsIHNpemUsIHZpZXcsIGZ1bGwsIGljb24sIGNpcmNsZSwgbG9hZGluZywgdmFsdWUsIGFjdGl2ZSwgY291bnQgfSxcblx0d2lkZ2V0TmFtZVxuKSB7XG5cdGNvbnN0IGNvbG9yc0NzcyA9XG5cdFx0e1xuXHRcdFx0ZGFuZ2VyOiBcIiBkaHhfYnV0dG9uLS1jb2xvcl9kYW5nZXJcIixcblx0XHRcdHNlY29uZGFyeTogXCIgZGh4X2J1dHRvbi0tY29sb3Jfc2Vjb25kYXJ5XCIsXG5cdFx0XHRwcmltYXJ5OiBcIiBkaHhfYnV0dG9uLS1jb2xvcl9wcmltYXJ5XCIsXG5cdFx0XHRzdWNjZXNzOiBcIiBkaHhfYnV0dG9uLS1jb2xvcl9zdWNjZXNzXCIsXG5cdFx0fVtjb2xvcl0gfHwgXCIgZGh4X2J1dHRvbi0tY29sb3JfcHJpbWFyeVwiO1xuXHRjb25zdCBzaXplQ3NzID1cblx0XHR7XG5cdFx0XHRzbWFsbDogXCIgZGh4X2J1dHRvbi0tc2l6ZV9zbWFsbFwiLFxuXHRcdFx0bWVkaXVtOiBcIiBkaHhfYnV0dG9uLS1zaXplX21lZGl1bVwiLFxuXHRcdH1bc2l6ZV0gfHwgXCIgZGh4X2J1dHRvbi0tc2l6ZV9tZWRpdW1cIjtcblx0Y29uc3Qgdmlld0NzcyA9XG5cdFx0e1xuXHRcdFx0ZmxhdDogXCIgZGh4X2J1dHRvbi0tdmlld19mbGF0XCIsXG5cdFx0XHRsaW5rOiBcIiBkaHhfYnV0dG9uLS12aWV3X2xpbmtcIixcblx0XHR9W3ZpZXddIHx8IFwiIGRoeF9idXR0b24tLXZpZXdfZmxhdFwiO1xuXHRjb25zdCBmdWxsQ3NzID0gZnVsbCA/IFwiIGRoeF9idXR0b24tLXdpZHRoX2Z1bGxcIiA6IFwiXCI7XG5cdGNvbnN0IGNpcmNsZUNzcyA9IGNpcmNsZSA/IFwiIGRoeF9idXR0b24tLWNpcmNsZVwiIDogXCJcIjtcblx0Y29uc3QgbG9hZGluZ0NzcyA9IGxvYWRpbmcgPyBcIiBkaHhfYnV0dG9uLS1sb2FkaW5nXCIgOiBcIlwiO1xuXHRjb25zdCBpY29uVmlld0NzcyA9IGljb24gJiYgIXZhbHVlID8gXCIgZGh4X2J1dHRvbi0taWNvblwiIDogXCJcIjtcblx0Y29uc3QgYWN0aXZlQ3NzID0gYWN0aXZlID8gXCIgZGh4X2J1dHRvbi0tYWN0aXZlXCIgOiBcIlwiO1xuXHRjb25zdCBjb3VudENzcyA9IGlzRGVmaW5lZChjb3VudCkgPyBcIiBkaHhfYnV0dG9uLS1jb3VudFwiIDogXCJcIjtcblx0cmV0dXJuIChcblx0XHRjb2xvcnNDc3MgKyBzaXplQ3NzICsgdmlld0NzcyArIGZ1bGxDc3MgKyBjaXJjbGVDc3MgKyBsb2FkaW5nQ3NzICsgYWN0aXZlQ3NzICsgaWNvblZpZXdDc3MgKyBjb3VudENzc1xuXHQpO1xufVxuIiwiaW1wb3J0IHsgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBnZXRDb3VudCB9IGZyb20gXCIuL2hlbHBlcnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGltYWdlQnV0dG9uKGl0ZW06IGFueSwgd2lkZ2V0TmFtZTogc3RyaW5nKSB7XG5cdGNvbnN0IGdldEFyaWFBdHRycyA9IGl0ZW0gPT4ge1xuXHRcdGNvbnN0IGF0dHJzID0ge1xuXHRcdFx0XCJhcmlhLWRpc2FibGVkXCI6IGl0ZW0uZGlzYWJsZWQgPyBcInRydWVcIiA6IFwiZmFsc2VcIixcblx0XHR9O1xuXG5cdFx0aWYgKGl0ZW0udHdvU3RhdGUgfHwgaXRlbS5hY3RpdmUpIHtcblx0XHRcdGF0dHJzW1wiYXJpYS1wcmVzc2VkXCJdID0gaXRlbS5hY3RpdmUgPyBcInRydWVcIiA6IFwiZmFsc2VcIjtcblx0XHR9XG5cblx0XHRpZiAoIWl0ZW0udmFsdWUgJiYgaXRlbS5zcmMgJiYgaXRlbS50b29sdGlwKSB7XG5cdFx0XHRhdHRyc1tcImFyaWEtbGFiZWxcIl0gPSBgJHtpdGVtLnRvb2x0aXB9ICR7aXRlbS5jb3VudCB8fCBcIlwifWA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGF0dHJzO1xuXHR9O1xuXHRjb25zdCBiYXNlQ2xhc3MgPSBcImRoeF9cIiArIHdpZGdldE5hbWUgKyBcIi1idXR0b24taW1hZ2VcIjtcblx0Y29uc3QgaXNSaWJib24gPSB3aWRnZXROYW1lID09PSBcInJpYmJvblwiO1xuXHRyZXR1cm4gZWwoXG5cdFx0XCJidXR0b24uZGh4X2J1dHRvblwiLFxuXHRcdHtcblx0XHRcdGNsYXNzOlxuXHRcdFx0XHRiYXNlQ2xhc3MgK1xuXHRcdFx0XHQoaXRlbS5zaXplID8gXCIgXCIgKyBiYXNlQ2xhc3MgKyBcIi0tXCIgKyBpdGVtLnNpemUgOiBcIlwiKSArXG5cdFx0XHRcdCghaXRlbS52YWx1ZSAmJiBpdGVtLnNyYyA/IFwiIFwiICsgYmFzZUNsYXNzICsgXCItLWljb25cIiA6IFwiXCIpICtcblx0XHRcdFx0KGlzUmliYm9uICYmIGl0ZW0uJG9wZW5JY29uID8gXCIgXCIgKyBiYXNlQ2xhc3MgKyBcIi0tc2VsZWN0XCIgOiBcIlwiKSArXG5cdFx0XHRcdChpdGVtLmFjdGl2ZSA/IFwiIFwiICsgYmFzZUNsYXNzICsgXCItLWFjdGl2ZVwiIDogXCJcIiksXG5cdFx0XHRkaHhfaWQ6IGl0ZW0uaWQsXG5cdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0Li4uZ2V0QXJpYUF0dHJzKGl0ZW0pLFxuXHRcdH0sXG5cdFx0W1xuXHRcdFx0aXNSaWJib24gJiZcblx0XHRcdFx0aXRlbS52YWx1ZSAmJlxuXHRcdFx0XHRpdGVtLiRvcGVuSWNvbiAmJlxuXHRcdFx0XHRlbChcInNwYW4uZHhpLmR4aS1tZW51LXJpZ2h0XCIsIHtcblx0XHRcdFx0XHRjbGFzczogYmFzZUNsYXNzICsgXCJfX2NhcmV0XCIsXG5cdFx0XHRcdFx0XCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcblx0XHRcdFx0fSksXG5cdFx0XHRpdGVtLmh0bWxcblx0XHRcdFx0PyBlbChcImRpdlwiLCB7XG5cdFx0XHRcdFx0XHRjbGFzczogYmFzZUNsYXNzICsgXCJfX3RleHRcIixcblx0XHRcdFx0XHRcdFwiLmlubmVySFRNTFwiOiBpdGVtLmh0bWwsXG5cdFx0XHRcdCAgfSlcblx0XHRcdFx0OiBpdGVtLnZhbHVlICYmXG5cdFx0XHRcdCAgZWwoXG5cdFx0XHRcdFx0XHRcInNwYW5cIixcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Y2xhc3M6IGJhc2VDbGFzcyArIFwiX190ZXh0XCIsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0aXRlbS52YWx1ZVxuXHRcdFx0XHQgICksXG5cdFx0XHRpdGVtLnNyYyAmJlxuXHRcdFx0XHRlbChcInNwYW5cIiwge1xuXHRcdFx0XHRcdGNsYXNzOiBiYXNlQ2xhc3MgKyBcIl9faW1hZ2VcIixcblx0XHRcdFx0XHRzdHlsZTogeyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtpdGVtLnNyY30pYCB9LFxuXHRcdFx0XHRcdHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG5cdFx0XHRcdH0pLFxuXHRcdFx0aXRlbS5jb3VudCA+IDAgJiYgZ2V0Q291bnQoaXRlbSwgYmFzZUNsYXNzICsgXCJfX2NvdW50XCIsIHRydWUpLFxuXHRcdF1cblx0KTtcbn1cbiIsImltcG9ydCB7IGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkJhckV2ZW50cyB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5mdW5jdGlvbiBvbkJsdXIoZXZlbnRzLCBpZCkge1xuXHRldmVudHMuZmlyZShOYXZpZ2F0aW9uQmFyRXZlbnRzLmlucHV0Qmx1ciwgW2lkXSk7XG59XG5cbmZ1bmN0aW9uIG9uRm9jdXMoZXZlbnRzLCBpZCkge1xuXHRldmVudHMuZmlyZShOYXZpZ2F0aW9uQmFyRXZlbnRzLmlucHV0Rm9jdXMsIFtpZF0pO1xufVxuXG5mdW5jdGlvbiBvbklucHV0KGV2ZW50cywgaWQsIGUpIHtcblx0ZXZlbnRzLmZpcmUoTmF2aWdhdGlvbkJhckV2ZW50cy5pbnB1dENoYW5nZSwgW2lkLCBlLnRhcmdldC52YWx1ZV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5wdXQoaXRlbSwgZXZlbnRzLCB3aWRnZXROYW1lOiBzdHJpbmcpIHtcblx0cmV0dXJuIGVsKFxuXHRcdFwiLmRoeF9mb3JtLWdyb3VwLmRoeF9mb3JtLWdyb3VwLS1uby1tZXNzYWdlLWhvbGRlci5kaHhfZm9ybS1ncm91cC0tbGFiZWxfc3JcIiArXG5cdFx0XHRgLmRoeF8ke3dpZGdldE5hbWV9X19pbnB1dGAsXG5cdFx0e1xuXHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0d2lkdGg6IGl0ZW0ud2lkdGggPyBpdGVtLndpZHRoIDogXCIyMDBweFwiLFxuXHRcdFx0fSxcblx0XHRcdHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG5cdFx0fSxcblx0XHRbXG5cdFx0XHRpdGVtLmxhYmVsICYmIGVsKFwibGFiZWwuZGh4X2xhYmVsXCIsIHsgZm9yOiBpdGVtLmlkIH0sIGl0ZW0ubGFiZWwpLFxuXHRcdFx0ZWwoXG5cdFx0XHRcdFwiLmRoeF9pbnB1dF9fd3JhcHBlclwiLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cm9sZTogXCJwcmVzZW50YXRpb25cIixcblx0XHRcdFx0fSxcblx0XHRcdFx0W1xuXHRcdFx0XHRcdGVsKFwiaW5wdXQuZGh4X2lucHV0XCIsIHtcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyOiBpdGVtLnBsYWNlaG9sZGVyLFxuXHRcdFx0XHRcdFx0Y2xhc3M6IGl0ZW0uaWNvbiA/IFwiZGh4X2lucHV0LS1pY29uLXBhZGRpbmdcIiA6IFwiXCIsXG5cdFx0XHRcdFx0XHR2YWx1ZTogaXRlbS52YWx1ZSxcblx0XHRcdFx0XHRcdGRpc2FibGVkOiBpdGVtLmRpc2FibGVkLFxuXHRcdFx0XHRcdFx0b25ibHVyOiBbb25CbHVyLCBldmVudHMsIGl0ZW0uaWRdLFxuXHRcdFx0XHRcdFx0b25mb2N1czogW29uRm9jdXMsIGV2ZW50cywgaXRlbS5pZF0sXG5cdFx0XHRcdFx0XHRvbmlucHV0OiBbb25JbnB1dCwgZXZlbnRzLCBpdGVtLmlkXSxcblx0XHRcdFx0XHRcdGRoeF9pZDogaXRlbS5pZCxcblx0XHRcdFx0XHRcdF9ob29rczoge1xuXHRcdFx0XHRcdFx0XHRkaWRJbnNlcnQobm9kZSkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChldmVudHMpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGV2ZW50cy5maXJlKE5hdmlnYXRpb25CYXJFdmVudHMuaW5wdXRDcmVhdGVkLCBbaXRlbS5pZCwgbm9kZS5lbF0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRfa2V5OiBpdGVtLmlkLFxuXHRcdFx0XHRcdFx0XCJhcmlhLWxhYmVsXCI6XG5cdFx0XHRcdFx0XHRcdGl0ZW0ubGFiZWwgfHxcblx0XHRcdFx0XHRcdFx0aXRlbS5oZWxwTWVzc2FnZSB8fFxuXHRcdFx0XHRcdFx0XHRgdHlwZSAke2l0ZW0ucGxhY2Vob2xkZXIgPyBcInRleHQgbGlrZSBcIiArIGl0ZW0ucGxhY2Vob2xkZXIgOiBcInRleHRcIn1gLFxuXHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdGl0ZW0uaWNvblxuXHRcdFx0XHRcdFx0PyBlbChcIi5kaHhfaW5wdXRfX2ljb25cIiwge1xuXHRcdFx0XHRcdFx0XHRcdGNsYXNzOiBpdGVtLmljb24sXG5cdFx0XHRcdFx0XHRcdFx0XCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcblx0XHRcdFx0XHRcdCAgfSlcblx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0XVxuXHRcdFx0KSxcblx0XHRdXG5cdCk7XG59XG4iLCJpbXBvcnQgeyBlbCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IGdldENvdW50IH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVudUl0ZW0oaXRlbTogYW55LCB3aWRnZXROYW1lOiBzdHJpbmcsIGFzTWVudUl0ZW06IGJvb2xlYW4pIHtcblx0Y29uc3QgZ2V0QXJpYUF0dHJzID0gaXRlbSA9PiB7XG5cdFx0Y29uc3QgYXR0cnMgPSB7XG5cdFx0XHRyb2xlOiBcIm1lbnVpdGVtXCIsIC8vIG1lbnVpdGVtcmFkaW8gaWYgaGF2ZSBzZWxlY3RlZCBzdGF0ZVxuXHRcdFx0XCJhcmlhLWRpc2FibGVkXCI6IGl0ZW0uZGlzYWJsZWQgPyBcInRydWVcIiA6IFwiZmFsc2VcIixcblx0XHR9O1xuXG5cdFx0aWYgKGl0ZW0uaXRlbXMpIHtcblx0XHRcdGF0dHJzW1wiYXJpYS1oYXNwb3B1cFwiXSA9IFwidHJ1ZVwiO1xuXHRcdH1cblxuXHRcdHJldHVybiBhdHRycztcblx0fTtcblx0Y29uc3QgYmFzZUNsYXNzID0gYXNNZW51SXRlbSA/IFwiIGRoeF9tZW51LWJ1dHRvblwiIDogXCIgZGh4X25hdi1tZW51LWJ1dHRvblwiO1xuXHRyZXR1cm4gZWwoXG5cdFx0XCJidXR0b25cIixcblx0XHR7XG5cdFx0XHRjbGFzczpcblx0XHRcdFx0XCJkaHhfYnV0dG9uXCIgK1xuXHRcdFx0XHRiYXNlQ2xhc3MgK1xuXHRcdFx0XHQoaXRlbS5kaXNhYmxlZCA/IGJhc2VDbGFzcyArIFwiLS1kaXNhYmxlZFwiIDogXCJcIikgK1xuXHRcdFx0XHQoaXRlbS5hY3RpdmUgfHwgaXRlbS4kYWN0aXZlUGFyZW50ID8gYmFzZUNsYXNzICsgXCItLWFjdGl2ZVwiIDogXCJcIiksXG5cdFx0XHRkaXNhYmxlZDogaXRlbS5kaXNhYmxlZCxcblx0XHRcdGRoeF9pZDogaXRlbS5pZCxcblx0XHRcdHR5cGU6IFwiYnV0dG9uXCIsXG5cdFx0XHQuLi5nZXRBcmlhQXR0cnMoaXRlbSksXG5cdFx0fSxcblx0XHRhc01lbnVJdGVtXG5cdFx0XHQ/IFtcblx0XHRcdFx0XHRpdGVtLmljb24gfHwgaXRlbS52YWx1ZSB8fCBpdGVtLmh0bWxcblx0XHRcdFx0XHRcdD8gZWwoXCJzcGFuLmRoeF9tZW51LWJ1dHRvbl9fYmxvY2suZGh4X21lbnUtYnV0dG9uX19ibG9jay0tbGVmdFwiLCBbXG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5pY29uICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbChcInNwYW4uZGh4X21lbnUtYnV0dG9uX19pY29uXCIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M6IGl0ZW0uaWNvbixcblx0XHRcdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XHRcdGl0ZW0uaHRtbFxuXHRcdFx0XHRcdFx0XHRcdFx0PyBlbChcImRpdi5kaHhfbWVudS1idXR0b25fX3RleHRcIiwgeyBcIi5pbm5lckhUTUxcIjogaXRlbS5odG1sIH0pXG5cdFx0XHRcdFx0XHRcdFx0XHQ6IGl0ZW0udmFsdWUgJiYgZWwoXCJzcGFuLmRoeF9tZW51LWJ1dHRvbl9fdGV4dFwiLCBpdGVtLnZhbHVlKSxcblx0XHRcdFx0XHRcdCAgXSlcblx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0XHRpdGVtLmNvdW50ID4gMCB8fCBpdGVtLmhvdGtleSB8fCBpdGVtLml0ZW1zXG5cdFx0XHRcdFx0XHQ/IGVsKFwic3Bhbi5kaHhfbWVudS1idXR0b25fX2Jsb2NrLmRoeF9tZW51LWJ1dHRvbl9fYmxvY2stLXJpZ2h0XCIsIFtcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmNvdW50ID4gMCAmJiBnZXRDb3VudChpdGVtLCBcIiBkaHhfbWVudS1idXR0b25fX2NvdW50XCIsIGZhbHNlKSxcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmhvdGtleSAmJiBlbChcInNwYW4uZGh4X21lbnUtYnV0dG9uX19ob3RrZXlcIiwgaXRlbS5ob3RrZXkpLFxuXHRcdFx0XHRcdFx0XHRcdGl0ZW0uaXRlbXMgJiYgZWwoXCJzcGFuLmRoeF9tZW51LWJ1dHRvbl9fY2FyZXQuZHhpLmR4aS1tZW51LXJpZ2h0XCIpLFxuXHRcdFx0XHRcdFx0ICBdKVxuXHRcdFx0XHRcdFx0OiBudWxsLFxuXHRcdFx0ICBdXG5cdFx0XHQ6IFtcblx0XHRcdFx0XHRpdGVtLmljb24gJiZcblx0XHRcdFx0XHRcdGVsKFwic3Bhbi5kaHhfbWVudS1idXR0b25fX2ljb25cIiwge1xuXHRcdFx0XHRcdFx0XHRjbGFzczogaXRlbS5pY29uLFxuXHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0aXRlbS5odG1sXG5cdFx0XHRcdFx0XHQ/IGVsKFwiZGl2LmRoeF9tZW51LWJ1dHRvbl9fdGV4dFwiLCB7IFwiLmlubmVySFRNTFwiOiBpdGVtLmh0bWwgfSlcblx0XHRcdFx0XHRcdDogaXRlbS52YWx1ZSAmJiBlbChcInNwYW4uZGh4X25hdi1tZW51LWJ1dHRvbl9fdGV4dFwiLCBpdGVtLnZhbHVlKSxcblx0XHRcdCAgXVxuXHQpO1xufVxuIiwiaW1wb3J0IHsgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBnZXRDb3VudCB9IGZyb20gXCIuL2hlbHBlcnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5hdkl0ZW0oaXRlbTogYW55LCB3aWRnZXROYW1lOiBzdHJpbmcsIGNvbGxhcHNlZD86IGJvb2xlYW4pIHtcblx0Y29uc3QgZ2V0QXJpYUF0dHJzID0gaXRlbSA9PiB7XG5cdFx0Y29uc3QgYXR0cnMgPSB7XG5cdFx0XHRcImFyaWEtZGlzYWJsZWRcIjogaXRlbS5kaXNhYmxlZCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiLFxuXHRcdFx0XCJhcmlhLWxhYmVsXCI6IGl0ZW0udmFsdWUgfHwgXCIgXCIsXG5cdFx0fTtcblx0XHRjb25zdCBpc0l0ZW1BY3RpdmF0ZWQgPSBpdGVtLmFjdGl2ZSB8fCBpdGVtLiRhY3RpdmVQYXJlbnQ7XG5cblx0XHRpZiAoaXRlbS50eXBlID09PSBcInNlbGVjdEJ1dHRvblwiIHx8IGl0ZW0uaXRlbXMpIHtcblx0XHRcdGF0dHJzW1wiaWRcIl0gPSBpdGVtLmlkO1xuXHRcdFx0YXR0cnNbXCJhcmlhLWhhc3BvcHVwXCJdID0gXCJtZW51XCI7IC8vIG1lbnUgaGFzIGhvdCBrZXlzLCBsaXN0Ym94IGRvZXNuJ3QgaGF2ZVxuXG5cdFx0XHRpZiAoaXNJdGVtQWN0aXZhdGVkKSB7XG5cdFx0XHRcdGF0dHJzW1wiYXJpYS1leHBhbmRlZFwiXSA9IFwidHJ1ZVwiO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoaXRlbS50d29TdGF0ZSB8fCBpc0l0ZW1BY3RpdmF0ZWQpIHtcblx0XHRcdFx0YXR0cnNbXCJhcmlhLXByZXNzZWRcIl0gPSBpc0l0ZW1BY3RpdmF0ZWQgPyBcInRydWVcIiA6IFwiZmFsc2VcIjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFpdGVtLnZhbHVlICYmIGl0ZW0uaWNvbiAmJiBpdGVtLnRvb2x0aXApIHtcblx0XHRcdFx0YXR0cnNbXCJhcmlhLWxhYmVsXCJdID0gYCR7aXRlbS50b29sdGlwfSAke2l0ZW0uY291bnQgfHwgXCJcIn1gO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBhdHRycztcblx0fTtcblx0Y29uc3QgYmFzZUNsYXNzID0gXCIgZGh4X1wiICsgd2lkZ2V0TmFtZSArIFwiLWJ1dHRvblwiO1xuXHRyZXR1cm4gZWwoXG5cdFx0XCJidXR0b25cIixcblx0XHR7XG5cdFx0XHRjbGFzczpcblx0XHRcdFx0XCJkaHhfYnV0dG9uXCIgK1xuXHRcdFx0XHRiYXNlQ2xhc3MgK1xuXHRcdFx0XHQoaXRlbS5hY3RpdmUgfHwgaXRlbS4kYWN0aXZlUGFyZW50ID8gYmFzZUNsYXNzICsgXCItLWFjdGl2ZVwiIDogXCJcIikgK1xuXHRcdFx0XHQoaXRlbS5kaXNhYmxlZCA/IGJhc2VDbGFzcyArIFwiLS1kaXNhYmxlZFwiIDogXCJcIikgK1xuXHRcdFx0XHQoaXRlbS4kb3Blbkljb24gPyBiYXNlQ2xhc3MgKyBcIi0tc2VsZWN0XCIgOiBcIlwiKSArXG5cdFx0XHRcdChpdGVtLmNpcmNsZSA/IGJhc2VDbGFzcyArIFwiLS1jaXJjbGVcIiA6IFwiXCIpICtcblx0XHRcdFx0KGl0ZW0uc2l6ZSA/IFwiIFwiICsgYmFzZUNsYXNzICsgXCItLVwiICsgaXRlbS5zaXplIDogXCJcIikgK1xuXHRcdFx0XHQoIWl0ZW0udmFsdWUgJiYgaXRlbS5pY29uID8gYmFzZUNsYXNzICsgXCItLWljb25cIiA6IFwiXCIpICtcblx0XHRcdFx0KGl0ZW0uY3NzID8gXCIgXCIgKyBpdGVtLmNzcyA6IFwiXCIpLFxuXHRcdFx0ZGh4X2lkOiBpdGVtLmlkLFxuXHRcdFx0ZGlzYWJsZWQ6IGl0ZW0uZGlzYWJsZWQsXG5cdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0Li4uZ2V0QXJpYUF0dHJzKGl0ZW0pLFxuXHRcdH0sXG5cdFx0W1xuXHRcdFx0aXRlbS5pY29uICYmXG5cdFx0XHRcdGVsKFwic3BhblwiLCB7XG5cdFx0XHRcdFx0Y2xhc3M6IGl0ZW0uaWNvbiArIGJhc2VDbGFzcyArIFwiX19pY29uXCIsXG5cdFx0XHRcdFx0XCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcblx0XHRcdFx0fSksXG5cdFx0XHRpdGVtLmh0bWwgJiZcblx0XHRcdFx0ZWwoXCJkaXZcIiwge1xuXHRcdFx0XHRcdGNsYXNzOiBiYXNlQ2xhc3MudHJpbSgpICsgXCJfX2h0bWxcIixcblx0XHRcdFx0XHRcIi5pbm5lckhUTUxcIjogaXRlbS5odG1sLFxuXHRcdFx0XHR9KSxcblx0XHRcdCFpdGVtLmh0bWwgJiZcblx0XHRcdFx0aXRlbS52YWx1ZSAmJlxuXHRcdFx0XHRlbChcblx0XHRcdFx0XHRcInNwYW5cIixcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRjbGFzczogYmFzZUNsYXNzLnRyaW0oKSArIFwiX190ZXh0XCIsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRpdGVtLnZhbHVlXG5cdFx0XHRcdCksXG5cdFx0XHRpdGVtLmNvdW50ID4gMCAmJiBnZXRDb3VudChpdGVtLCBiYXNlQ2xhc3MgKyBcIl9fY291bnRcIiwgY29sbGFwc2VkKSxcblx0XHRcdGl0ZW0uJG9wZW5JY29uICYmXG5cdFx0XHRcdGVsKFwic3Bhbi5keGkuZHhpLW1lbnUtcmlnaHRcIiwge1xuXHRcdFx0XHRcdGNsYXNzOiBiYXNlQ2xhc3MgKyBcIl9fY2FyZXRcIixcblx0XHRcdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XHR9KSxcblx0XHRdXG5cdCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gc2VwYXJhdG9yKGl0ZW06IGFueSwgd2lkZ2V0TmFtZTogc3RyaW5nKSB7XG5cdHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHNwYWNlcihpdGVtOiBhbnksIHdpZGdldE5hbWU6IHN0cmluZykge1xuXHRyZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCB7IGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdGl0bGUoaXRlbTogYW55LCB3aWRnZXROYW1lOiBzdHJpbmcpIHtcblx0cmV0dXJuIGVsKFxuXHRcdFwic3BhblwiLFxuXHRcdHtcblx0XHRcdGNsYXNzOiBcImRoeF9uYXZiYXItdGl0bGVcIiArIFwiIGRoeF9uYXZiYXItdGl0bGUtLVwiICsgd2lkZ2V0TmFtZSxcblx0XHRcdGRoeF9pZDogaXRlbS5pZCxcblx0XHRcdFwiLmlubmVySFRNTFwiOiBpdGVtLmh0bWwsXG5cdFx0XHRcImFyaWEtbGFiZWxcIjogaXRlbS52YWx1ZSB8fCBcIlwiLCAvLyB3aXRob3V0IGxhYmVsIHNwYW4gaXMgbm90IGFjY2Vzc2libGVcblx0XHR9LFxuXHRcdCFpdGVtLmh0bWwgPyBpdGVtLnZhbHVlIDogbnVsbFxuXHQpO1xufVxuIiwiaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgTmF2YmFyIH0gZnJvbSBcIi4vTmF2YmFyXCI7XG5pbXBvcnQgeyBidXR0b24gfSBmcm9tIFwiLi9lbGVtZW50cy9idXR0b25cIjtcbmltcG9ydCB7IG5hdkl0ZW0gfSBmcm9tIFwiLi9lbGVtZW50cy9uYXZJdGVtXCI7XG5pbXBvcnQgeyBjdXN0b21IVE1MQnV0dG9uIH0gZnJvbSBcIi4vZWxlbWVudHMvY3VzdG9tSFRNTEJ1dHRvblwiO1xuaW1wb3J0IHsgaW1hZ2VCdXR0b24gfSBmcm9tIFwiLi9lbGVtZW50cy9pbWFnZUJ1dHRvblwiO1xuaW1wb3J0IHsgaW5wdXQgfSBmcm9tIFwiLi9lbGVtZW50cy9pbnB1dFwiO1xuaW1wb3J0IHsgbWVudUl0ZW0gfSBmcm9tIFwiLi9lbGVtZW50cy9tZW51SXRlbVwiO1xuaW1wb3J0IHsgc2VwYXJhdG9yIH0gZnJvbSBcIi4vZWxlbWVudHMvc2VwYXJhdG9yXCI7XG5pbXBvcnQgeyBzcGFjZXIgfSBmcm9tIFwiLi9lbGVtZW50cy9zcGFjZXJcIjtcbmltcG9ydCB7IHRpdGxlIH0gZnJvbSBcIi4vZWxlbWVudHMvdGl0bGVcIjtcbmltcG9ydCB7IGRhdGVQaWNrZXIgfSBmcm9tIFwiLi9lbGVtZW50cy9kYXRlUGlja2VyXCI7XG5pbXBvcnQgeyBJSXRlbSwgSXRlbVR5cGUsIE5hdmlnYXRpb25CYXJFdmVudHMgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgbmF2YmFyQ29tcG9uZW50TWl4aW4gfSBmcm9tIFwiLi9lbGVtZW50cy9oZWxwZXJzXCI7XG5pbXBvcnQgeyBUcmVlQ29sbGVjdGlvbiB9IGZyb20gXCJAZGh4L3RzLWRhdGFcIjtcblxuZnVuY3Rpb24gaXRlbWZhY3RvcnkoXG5cdGl0ZW06IElJdGVtLFxuXHRldmVudHM6IElFdmVudFN5c3RlbTxOYXZpZ2F0aW9uQmFyRXZlbnRzPixcblx0d2lkZ2V0TmFtZTogc3RyaW5nLFxuXHRwcm9wczogSUZhY3RvcnlQcm9wc1xuKSB7XG5cdHN3aXRjaCAoaXRlbS50eXBlKSB7XG5cdFx0Y2FzZSBcIm5hdkl0ZW1cIjpcblx0XHRjYXNlIFwic2VsZWN0QnV0dG9uXCI6XG5cdFx0XHRyZXR1cm4gbmF2SXRlbShpdGVtLCB3aWRnZXROYW1lLCBwcm9wcy5jb2xsYXBzZWQpO1xuXHRcdGNhc2UgXCJidXR0b25cIjpcblx0XHRcdHJldHVybiBidXR0b24oaXRlbSwgd2lkZ2V0TmFtZSk7XG5cdFx0Y2FzZSBcInRpdGxlXCI6XG5cdFx0XHRyZXR1cm4gdGl0bGUoaXRlbSwgd2lkZ2V0TmFtZSk7XG5cdFx0Y2FzZSBcInNlcGFyYXRvclwiOlxuXHRcdFx0cmV0dXJuIHNlcGFyYXRvcihpdGVtLCB3aWRnZXROYW1lKTtcblx0XHRjYXNlIFwic3BhY2VyXCI6XG5cdFx0XHRyZXR1cm4gc3BhY2VyKGl0ZW0sIHdpZGdldE5hbWUpO1xuXHRcdGNhc2UgXCJpbnB1dFwiOlxuXHRcdFx0cmV0dXJuIGlucHV0KGl0ZW0sIGV2ZW50cywgd2lkZ2V0TmFtZSk7XG5cdFx0Y2FzZSBcImltYWdlQnV0dG9uXCI6XG5cdFx0XHRyZXR1cm4gaW1hZ2VCdXR0b24oaXRlbSwgd2lkZ2V0TmFtZSk7XG5cdFx0Y2FzZSBcIm1lbnVJdGVtXCI6XG5cdFx0XHRyZXR1cm4gbWVudUl0ZW0oaXRlbSwgd2lkZ2V0TmFtZSwgcHJvcHMuYXNNZW51SXRlbSk7XG5cdFx0Y2FzZSBcImN1c3RvbUhUTUxCdXR0b25cIjpcblx0XHRcdHJldHVybiBjdXN0b21IVE1MQnV0dG9uKGl0ZW0sIHdpZGdldE5hbWUsIHByb3BzLmFzTWVudUl0ZW0pO1xuXHRcdGNhc2UgXCJkYXRlUGlja2VyXCI6XG5cdFx0XHRyZXR1cm4gZGF0ZVBpY2tlcihpdGVtLCBldmVudHMsIHdpZGdldE5hbWUpO1xuXHRcdGNhc2UgXCJibG9ja1wiOlxuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGl0ZW0gdHlwZSBcIiArIGl0ZW0udHlwZSk7XG5cdH1cbn1cblxuaW50ZXJmYWNlIElGYWN0b3J5Q29uZmlnPFQgZXh0ZW5kcyBOYXZiYXI+IHtcblx0ZGVmYXVsdFR5cGU6IEl0ZW1UeXBlO1xuXHRhbGxvd2VkVHlwZXM6IEl0ZW1UeXBlW107XG5cdHdpZGdldE5hbWU6IHN0cmluZztcblx0d2lkZ2V0OiBUO1xufVxuXG5pbnRlcmZhY2UgSUZhY3RvcnlQcm9wcyB7XG5cdGFzTWVudUl0ZW06IGJvb2xlYW47XG5cdGNvbGxhcHNlZD86IGJvb2xlYW47XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9wZW5JY29uPFQgZXh0ZW5kcyBJSXRlbT4od2lkZ2V0TmFtZTogc3RyaW5nLCBpdGVtOiBJSXRlbSwgZGF0YTogVHJlZUNvbGxlY3Rpb248VD4pOiB2b2lkIHtcblx0c3dpdGNoICh3aWRnZXROYW1lKSB7XG5cdFx0Y2FzZSBcInNpZGViYXJcIjpcblx0XHRjYXNlIFwiY29udGV4dC1tZW51XCI6XG5cdFx0XHRpdGVtLiRvcGVuSWNvbiA9IFwicmlnaHRcIjtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJ0b29sYmFyXCI6XG5cdFx0XHRpZiAoaXRlbS5wYXJlbnQgPT09IGRhdGEuZ2V0Um9vdCgpKSB7XG5cdFx0XHRcdGl0ZW0uJG9wZW5JY29uID0gXCJyaWdodFwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXRlbS4kb3Blbkljb24gPSBcImJvdHRvbVwiO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIm1lbnVcIjpcblx0XHRcdGlmIChpdGVtLnBhcmVudCAhPT0gdGhpcy5kYXRhLmdldFJvb3QoKSkge1xuXHRcdFx0XHRpdGVtLiRvcGVuSWNvbiA9IFwicmlnaHRcIjtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJyaWJib25cIjoge1xuXHRcdFx0Y29uc3QgcGFyZW50ID0gZGF0YS5nZXRJdGVtKGl0ZW0ucGFyZW50KTtcblx0XHRcdGlmIChwYXJlbnQgJiYgaXRlbS50eXBlICE9PSBcImJsb2NrXCIpIHtcblx0XHRcdFx0aWYgKHBhcmVudC50eXBlID09PSBcImJsb2NrXCIpIHtcblx0XHRcdFx0XHRpdGVtLiRvcGVuSWNvbiA9IFwiYm90dG9tXCI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aXRlbS4kb3Blbkljb24gPSBcInJpZ2h0XCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmFjdG9yeTxUIGV4dGVuZHMgTmF2YmFyPih7XG5cdGRlZmF1bHRUeXBlLFxuXHRhbGxvd2VkVHlwZXMsXG5cdHdpZGdldE5hbWUsXG5cdHdpZGdldCxcbn06IElGYWN0b3J5Q29uZmlnPFQ+KTogKGl0ZW06IElJdGVtLCBhc01lbnVJdGVtPzogYm9vbGVhbikgPT4gYW55IHtcblx0Y29uc3QgYWxsb3dlZFNldCA9IG5ldyBTZXQoKTtcblx0Zm9yIChjb25zdCB0eXBlIG9mIGFsbG93ZWRUeXBlcykge1xuXHRcdGFsbG93ZWRTZXQuYWRkKHR5cGUpO1xuXHR9XG5cdGNvbnN0IHsgY29uZmlnLCBldmVudHMsIGRhdGEgfSA9IHdpZGdldDtcblx0cmV0dXJuIGZ1bmN0aW9uKGl0ZW06IElJdGVtLCBhc01lbnVJdGVtPzogYm9vbGVhbikge1xuXHRcdGlmIChpdGVtLmhpZGRlbikge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGlmICghaXRlbS50eXBlIHx8IGl0ZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBpdGVtLnR5cGUgPT09IFwibmF2SXRlbVwiIHx8IGl0ZW0udHlwZSA9PT0gXCJtZW51SXRlbVwiKSB7XG5cdFx0XHRpZiAoIWl0ZW0udmFsdWUgJiYgIWl0ZW0uaWNvbiAmJiAhaXRlbS5odG1sKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpdGVtLnR5cGUgPSBpdGVtLnR5cGUgfHwgZGVmYXVsdFR5cGU7XG5cdFx0aWYgKGFsbG93ZWRTZXQgJiYgIWFsbG93ZWRTZXQuaGFzKGl0ZW0udHlwZSkpIHtcblx0XHRcdGl0ZW0udHlwZSA9IGRlZmF1bHRUeXBlO1xuXHRcdH1cblx0XHRpZiAoaXRlbS50eXBlID09PSBcImltYWdlQnV0dG9uXCIgJiYgd2lkZ2V0TmFtZSAhPT0gXCJyaWJib25cIikge1xuXHRcdFx0aXRlbS5hY3RpdmUgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKGFzTWVudUl0ZW0gJiYgaXRlbS50eXBlICE9PSBcInNwYWNlclwiICYmIGl0ZW0udHlwZSAhPT0gXCJzZXBhcmF0b3JcIiAmJiBpdGVtLnR5cGUgIT09IFwiY3VzdG9tSFRNTFwiKSB7XG5cdFx0XHRpdGVtLnR5cGUgPSBcIm1lbnVJdGVtXCI7XG5cdFx0fVxuXHRcdGlmIChkYXRhLmhhdmVJdGVtcyhpdGVtLmlkKSkge1xuXHRcdFx0bm9ybWFsaXplT3Blbkljb24od2lkZ2V0TmFtZSwgaXRlbSwgZGF0YSk7XG5cdFx0fVxuXHRcdGlmICh3aWRnZXROYW1lID09PSBcInRvb2xiYXJcIiAmJiBpdGVtLml0ZW1zKSB7XG5cdFx0XHRpdGVtLml0ZW1zLmZvckVhY2goZWxlbWVudCA9PiB7XG5cdFx0XHRcdGlmICghZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdFx0ZWxlbWVudC50eXBlID0gXCJtZW51SXRlbVwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Y29uc3QgaXRlbVZOb2RlID1cblx0XHRcdGl0ZW0udHlwZSAhPT0gXCJjdXN0b21IVE1MXCIgJiZcblx0XHRcdGl0ZW1mYWN0b3J5KGl0ZW0sIGV2ZW50cywgd2lkZ2V0TmFtZSwge1xuXHRcdFx0XHRhc01lbnVJdGVtLFxuXHRcdFx0XHRjb2xsYXBzZWQ6IHdpZGdldE5hbWUgIT09IFwic2lkZWJhclwiIHx8IChjb25maWcgYXMgYW55KS5jb2xsYXBzZWQsXG5cdFx0XHR9KTtcblx0XHRyZXR1cm4gbmF2YmFyQ29tcG9uZW50TWl4aW4od2lkZ2V0TmFtZSwgaXRlbSwgYXNNZW51SXRlbSwgaXRlbVZOb2RlKTtcblx0fTtcbn1cbiIsImltcG9ydCB7IElkIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBJRXZlbnRTeXN0ZW0gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZXZlbnRzXCI7XG5pbXBvcnQgeyBEYXRhRXZlbnRzLCBJRGF0YUV2ZW50c0hhbmRsZXJzTWFwLCBJRGF0YUl0ZW0sIFRyZWVDb2xsZWN0aW9uIH0gZnJvbSBcIkBkaHgvdHMtZGF0YVwiO1xuXG5leHBvcnQgeyBEYXRhRXZlbnRzIH0gZnJvbSBcIkBkaHgvdHMtZGF0YVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElIdG1sRXh0ZW5kYWJsZSB7XG5cdGh0bWw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIHtcblx0W2tleTogc3RyaW5nXTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBOYXZpZ2F0aW9uVHlwZSA9IFwicG9pbnRlclwiIHwgXCJjbGlja1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElHcm91cHMge1xuXHRba2V5OiBzdHJpbmddOiB7XG5cdFx0YWN0aXZlPzogSWQ7XG5cdFx0ZWxlbWVudHM6IHN0cmluZ1tdO1xuXHR9O1xufVxuXG5leHBvcnQgdHlwZSBDb250ZXh0TW9kZSA9IFwiYm90dG9tXCIgfCBcInJpZ2h0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5hdmJhckNvbmZpZyB7XG5cdG5hdmlnYXRpb25UeXBlPzogTmF2aWdhdGlvblR5cGU7XG5cdGNzcz86IHN0cmluZztcblx0bWVudUNzcz86IHN0cmluZztcblx0ZGF0YT86IGFueVtdIHwgVHJlZUNvbGxlY3Rpb248YW55Pjtcblx0cm9vdElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElOYXZiYXIge1xuXHRkYXRhOiBUcmVlQ29sbGVjdGlvbjtcblx0ZXZlbnRzOiBJRXZlbnRTeXN0ZW08RGF0YUV2ZW50cyB8IE5hdmlnYXRpb25CYXJFdmVudHMsIElEYXRhRXZlbnRzSGFuZGxlcnNNYXAgJiBJTmF2YmFyRXZlbnRIYW5kbGVyc01hcD47XG5cdGNvbmZpZzogSU5hdmJhckNvbmZpZztcblxuXHRwYWludCgpOiB2b2lkO1xuXHRkaXNhYmxlKGlkczogSWQgfCBJZFtdKTogdm9pZDtcblx0ZW5hYmxlKGlkczogSWQgfCBJZFtdKTogdm9pZDtcblx0aXNEaXNhYmxlZChpZDogSWQpOiBib29sZWFuO1xuXHRzaG93KGlkczogSWQgfCBJZFtdKTogdm9pZDtcblx0aGlkZShpZHM6IElkIHwgSWRbXSk6IHZvaWQ7XG5cdGRlc3RydWN0b3IoKTogdm9pZDtcblx0c2VsZWN0KGlkOiBJZCwgdW5zZWxlY3Q6IGJvb2xlYW4pOiB2b2lkO1xuXHR1bnNlbGVjdChpZD86IElkKTogdm9pZDtcblx0aXNTZWxlY3RlZChpZDogSWQpOiBib29sZWFuO1xuXHRnZXRTZWxlY3RlZCgpOiBJZFtdO1xufVxuXG5leHBvcnQgdHlwZSBJdGVtVHlwZSA9XG5cdHwgXCJidXR0b25cIlxuXHR8IFwiaW1hZ2VCdXR0b25cIlxuXHR8IFwic2VsZWN0QnV0dG9uXCJcblx0fCBcImN1c3RvbUJ1dHRvblwiXG5cdHwgXCJpbnB1dFwiXG5cdHwgXCJzZXBhcmF0b3JcIlxuXHR8IFwidGl0bGVcIlxuXHR8IFwic3BhY2VyXCJcblx0fCBcIm1lbnVJdGVtXCJcblx0fCBcImJsb2NrXCJcblx0fCBcIm5hdkl0ZW1cIlxuXHR8IFwiY3VzdG9tSFRNTFwiXG5cdHwgXCJjdXN0b21IVE1MQnV0dG9uXCJcblx0fCBcImRhdGVQaWNrZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJSXRlbSBleHRlbmRzIElEYXRhSXRlbSB7XG5cdGlkPzogSWQ7XG5cdHR5cGU/OiBJdGVtVHlwZTtcblx0cGFyZW50PzogSWQ7XG5cdGNzcz86IHN0cmluZyB8IHN0cmluZ1tdO1xuXHRoaWRkZW4/OiBib29sZWFuO1xuXHRkaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIElNZW51RWxlbWVudCA9IElTcGFjZXIgfCBJU2VwYXJhdG9yIHwgSU5hdkl0ZW0gfCBJTWVudUl0ZW0gfCBJQ3VzdG9tSFRNTDtcblxuZXhwb3J0IGludGVyZmFjZSBJTWVudUl0ZW0gZXh0ZW5kcyBJSXRlbSwgSUh0bWxFeHRlbmRhYmxlIHtcblx0dHlwZT86IFwibWVudUl0ZW1cIjtcblx0JG9wZW5JY29uPzogc3RyaW5nO1xuXHRpY29uPzogc3RyaW5nO1xuXHRpdGVtcz86IElNZW51RWxlbWVudFtdO1xuXHRob3RrZXk/OiBzdHJpbmc7XG5cdGNvdW50PzogbnVtYmVyIHwgc3RyaW5nO1xuXHRjb3VudENvbG9yPzogXCJkYW5nZXJcIiB8IFwic2Vjb25kYXJ5XCIgfCBcInByaW1hcnlcIiB8IFwic3VjY2Vzc1wiO1xuXHR2YWx1ZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUG9wdXAge1xuXHRkYXRhOiBhbnlbXTtcblx0bW9kZTogXCJib3R0b21cIiB8IFwib3RoZXJcIjtcblx0cG9zaXRpb246IGFueTtcblx0d2lkdGg6IG51bWJlcjtcblx0aGVpZ2h0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5hdkl0ZW0gZXh0ZW5kcyBJSXRlbSwgSUh0bWxFeHRlbmRhYmxlIHtcblx0dHlwZTogXCJuYXZJdGVtXCI7XG5cdHR3b1N0YXRlPzogYm9vbGVhbjtcblx0Z3JvdXA/OiBzdHJpbmc7XG5cdCRvcGVuSWNvbj86IHN0cmluZztcblx0aWNvbj86IHN0cmluZztcblx0aXRlbXM/OiBJTWVudUVsZW1lbnRbXTtcblx0dmFsdWU/OiBzdHJpbmc7XG5cdGhvdGtleT86IHN0cmluZztcblx0YWN0aXZlPzogYm9vbGVhbjtcblx0Y291bnQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cdGNvdW50Q29sb3I/OiBcImRhbmdlclwiIHwgXCJzZWNvbmRhcnlcIiB8IFwicHJpbWFyeVwiIHwgXCJzdWNjZXNzXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUN1c3RvbUhUTUwgZXh0ZW5kcyBJSXRlbSwgSUh0bWxFeHRlbmRhYmxlIHtcblx0dHlwZTogXCJjdXN0b21IVE1MXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRpdGxlIGV4dGVuZHMgSUl0ZW0sIElIdG1sRXh0ZW5kYWJsZSB7XG5cdHR5cGU6IFwidGl0bGVcIjtcblx0dmFsdWU/OiBzdHJpbmc7XG5cdHRvb2x0aXA/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNwYWNlciBleHRlbmRzIElJdGVtIHtcblx0dHlwZTogXCJzcGFjZXJcIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2VwYXJhdG9yIGV4dGVuZHMgSUl0ZW0ge1xuXHR0eXBlOiBcInNlcGFyYXRvclwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElCdXR0b24gZXh0ZW5kcyBJSXRlbSwgSUh0bWxFeHRlbmRhYmxlIHtcblx0dHlwZTogXCJidXR0b25cIjtcblx0Y3NzPzogc3RyaW5nO1xuXHRob3RrZXk/OiBzdHJpbmc7XG5cdHRvb2x0aXA/OiBzdHJpbmc7XG5cdGNvdW50PzogbnVtYmVyO1xuXHRjb3VudENvbG9yPzogXCJkYW5nZXJcIiB8IFwic2Vjb25kYXJ5XCIgfCBcInByaW1hcnlcIiB8IFwic3VjY2Vzc1wiO1xuXHRpdGVtcz86IElNZW51RWxlbWVudFtdO1xuXHRncm91cD86IHN0cmluZztcblx0dHdvU3RhdGU/OiBib29sZWFuO1xuXHRhY3RpdmU/OiBib29sZWFuO1xuXHRtdWx0aUNsaWNrPzogYm9vbGVhbjtcblx0Ly8gYnV0dG9uIHZpZXdcblx0aWNvbj86IHN0cmluZztcblx0dmlldz86IFwiZmxhdFwiIHwgXCJsaW5rXCI7XG5cdHNpemU/OiBcInNtYWxsXCIgfCBcIm1lZGl1bVwiIHwgc3RyaW5nO1xuXHRjb2xvcj86IFwiZGFuZ2VyXCIgfCBcInNlY29uZGFyeVwiIHwgXCJwcmltYXJ5XCIgfCBcInN1Y2Nlc3NcIjtcblx0ZnVsbD86IGJvb2xlYW47XG5cdGNpcmNsZT86IGJvb2xlYW47XG5cdGxvYWRpbmc/OiBib29sZWFuO1xuXHR2YWx1ZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJSW5wdXQgZXh0ZW5kcyBJSXRlbSB7XG5cdHR5cGU6IFwiaW5wdXRcIjtcblx0aWNvbj86IHN0cmluZztcblx0cGxhY2Vob2xkZXI/OiBzdHJpbmc7XG5cdHdpZHRoPzogc3RyaW5nO1xuXHRsYWJlbD86IHN0cmluZztcblx0dmFsdWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUltYWdlQnV0dG9uIGV4dGVuZHMgSUl0ZW0ge1xuXHR0eXBlOiBcImltYWdlQnV0dG9uXCI7XG5cdHNyYzogc3RyaW5nO1xuXHR0d29TdGF0ZT86IGJvb2xlYW47XG5cdGFjdGl2ZT86IGJvb2xlYW47XG5cdGhvdGtleT86IHN0cmluZztcblx0Z3JvdXA/OiBzdHJpbmc7XG5cdGNvdW50PzogbnVtYmVyIHwgc3RyaW5nO1xuXHRjb3VudENvbG9yPzogXCJkYW5nZXJcIiB8IFwic2Vjb25kYXJ5XCIgfCBcInByaW1hcnlcIiB8IFwic3VjY2Vzc1wiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3RCdXR0b24gZXh0ZW5kcyBJSXRlbSB7XG5cdHR5cGU6IFwic2VsZWN0QnV0dG9uXCI7XG5cdCRvcGVuSWNvbj86IHN0cmluZztcblx0aWNvbj86IHN0cmluZztcblx0aXRlbXM/OiBJTWVudUVsZW1lbnRbXTtcblx0Y291bnQ/OiBudW1iZXIgfCBzdHJpbmc7XG5cdGNvdW50Q29sb3I/OiBcImRhbmdlclwiIHwgXCJzZWNvbmRhcnlcIiB8IFwicHJpbWFyeVwiIHwgXCJzdWNjZXNzXCI7XG5cdHZhbHVlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDdXN0b21IVE1MQnV0dG9uIGV4dGVuZHMgSUl0ZW0ge1xuXHR0eXBlOiBcImN1c3RvbUhUTUxCdXR0b25cIjtcblx0dHdvU3RhdGU/OiBib29sZWFuO1xuXHRhY3RpdmU/OiBib29sZWFuO1xuXHR2YWx1ZT86IHN0cmluZztcblx0Y291bnQ/OiBudW1iZXI7XG5cdGNvdW50Q29sb3I/OiBcImRhbmdlclwiIHwgXCJzZWNvbmRhcnlcIiB8IFwicHJpbWFyeVwiIHwgXCJzdWNjZXNzXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJsb2NrIGV4dGVuZHMgSUl0ZW0ge1xuXHR0eXBlOiBcImJsb2NrXCI7XG5cdHRpdGxlPzogc3RyaW5nO1xuXHRkaXJlY3Rpb24/OiBcInJvd1wiIHwgXCJjb2xcIjtcblx0Y3NzPzogXCJzdHJpbmdcIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRGF0ZVBpY2tlciBleHRlbmRzIElJdGVtIHtcblx0dHlwZTogXCJkYXRlUGlja2VyXCI7XG5cdGljb24/OiBzdHJpbmc7XG5cdHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuXHR3aWR0aD86IHN0cmluZztcblx0bGFiZWw/OiBzdHJpbmc7XG5cdHZhbHVlPzogc3RyaW5nIHwgRGF0ZTtcblx0ZGF0ZUZvcm1hdD86IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gTmF2aWdhdGlvbkJhckV2ZW50cyB7XG5cdGlucHV0Q3JlYXRlZCA9IFwiaW5wdXRDcmVhdGVkXCIsXG5cdGNsaWNrID0gXCJjbGlja1wiLFxuXHRvcGVuTWVudSA9IFwib3Blbk1lbnVcIixcblx0YmVmb3JlSGlkZSA9IFwiYmVmb3JlSGlkZVwiLFxuXHRhZnRlckhpZGUgPSBcImFmdGVySGlkZVwiLFxuXHRpbnB1dEZvY3VzID0gXCJpbnB1dEZvY3VzXCIsXG5cdGlucHV0Qmx1ciA9IFwiaW5wdXRCbHVyXCIsXG5cdGlucHV0Q2hhbmdlID0gXCJpbnB1dENoYW5nZVwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElOYXZiYXJFdmVudEhhbmRsZXJzTWFwIHtcblx0W2tleTogc3RyaW5nXTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cdFtOYXZpZ2F0aW9uQmFyRXZlbnRzLmlucHV0Q3JlYXRlZF06IChpZDogSWQsIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50KSA9PiB2b2lkO1xuXHRbTmF2aWdhdGlvbkJhckV2ZW50cy5vcGVuTWVudV06IChpZDogSWQpID0+IHZvaWQ7XG5cdFtOYXZpZ2F0aW9uQmFyRXZlbnRzLmNsaWNrXTogKGlkOiBJZCwgZXZlbnRzOiBFdmVudCkgPT4gdm9pZDtcblx0W05hdmlnYXRpb25CYXJFdmVudHMuYmVmb3JlSGlkZV06IChpZDogSWQsIGV2ZW50czogRXZlbnQpID0+IHZvaWQgfCBib29sZWFuO1xuXHRbTmF2aWdhdGlvbkJhckV2ZW50cy5hZnRlckhpZGVdOiAoZXZlbnRzOiBFdmVudCkgPT4gdm9pZDtcblx0W05hdmlnYXRpb25CYXJFdmVudHMuaW5wdXRCbHVyXTogKGlkOiBJZCkgPT4gdm9pZDtcblx0W05hdmlnYXRpb25CYXJFdmVudHMuaW5wdXRGb2N1c106IChpZDogSWQpID0+IHZvaWQ7XG5cdFtOYXZpZ2F0aW9uQmFyRXZlbnRzLmlucHV0Q2hhbmdlXTogKGlkOiBJZCwgbmV3VmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvUG9wdXBcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvdHlwZXNcIjtcbiIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5pbXBvcnQgeyBhd2FpdFJlZHJhdywgY3JlYXRlLCBlbCwgaW5qZWN0LCBWTm9kZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IEV2ZW50U3lzdGVtLCBJRXZlbnRTeXN0ZW0gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZXZlbnRzXCI7XG5pbXBvcnQgeyBmaXRQb3NpdGlvbiwgdG9Ob2RlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdmlld1wiO1xuaW1wb3J0IHsgSVBvcHVwLCBJUG9wdXBDb25maWcsIElQb3B1cEV2ZW50SGFuZGxlcnNNYXAsIElTaG93Q29uZmlnLCBQb3B1cEV2ZW50cyB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBQb3B1cCBleHRlbmRzIFZpZXcgaW1wbGVtZW50cyBJUG9wdXAge1xuXHRwdWJsaWMgY29uZmlnOiBJUG9wdXBDb25maWc7XG5cdHB1YmxpYyBldmVudHM6IElFdmVudFN5c3RlbTxQb3B1cEV2ZW50cywgSVBvcHVwRXZlbnRIYW5kbGVyc01hcD47XG5cblx0cHJpdmF0ZSBfaHRtbDogc3RyaW5nO1xuXHRwcml2YXRlIF91aTogYW55O1xuXG5cdHByaXZhdGUgX3BvcHVwOiBIVE1MRWxlbWVudDtcblxuXHRwcml2YXRlIF9jbGlja0V2ZW50OiAoZTogRXZlbnQpID0+IHZvaWQ7XG5cblx0cHJpdmF0ZSBfaXNBY3RpdmU6IGJvb2xlYW47XG5cdHByaXZhdGUgX291dGVyQ2xpY2tEZXN0cnVjdG9yOiAoKSA9PiB2b2lkO1xuXG5cdHByaXZhdGUgX3RpbWVvdXQ6IGFueTtcblxuXHRjb25zdHJ1Y3Rvcihjb25maWc6IElQb3B1cENvbmZpZyA9IHt9KSB7XG5cdFx0c3VwZXIobnVsbCwgZXh0ZW5kKHt9LCBjb25maWcpKTtcblxuXHRcdGNvbnN0IHBvcHVwID0gKHRoaXMuX3BvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG5cdFx0cG9wdXAuY2xhc3NOYW1lID0gXCJkaHhfd2lkZ2V0IGRoeF9wb3B1cFwiICsgKHRoaXMuY29uZmlnLmNzcyA/IFwiIFwiICsgdGhpcy5jb25maWcuY3NzIDogXCJcIik7XG5cdFx0cG9wdXAuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0cG9wdXAuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImRpYWxvZ1wiKTtcblx0XHRwb3B1cC5zZXRBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIsIFwidHJ1ZVwiKTtcblx0XHRwb3B1cC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxpdmVcIiwgXCJwb2xpdGVcIik7XG5cblx0XHR0aGlzLm1vdW50KFxuXHRcdFx0cG9wdXAsXG5cdFx0XHRjcmVhdGUoe1xuXHRcdFx0XHRyZW5kZXI6ICgpID0+IHRoaXMudG9WRE9NKCksXG5cdFx0XHR9KVxuXHRcdCk7XG5cblx0XHR0aGlzLl9jbGlja0V2ZW50ID0gZSA9PiB0aGlzLmV2ZW50cy5maXJlKFBvcHVwRXZlbnRzLmNsaWNrLCBbZV0pO1xuXG5cdFx0dGhpcy5ldmVudHMgPSBjb25maWcuZXZlbnRzIHx8IG5ldyBFdmVudFN5c3RlbTxQb3B1cEV2ZW50cz4odGhpcyk7XG5cdFx0dGhpcy5faXNBY3RpdmUgPSBmYWxzZTtcblx0fVxuXHRzaG93KG5vZGU6IEhUTUxFbGVtZW50LCBjb25maWc6IElTaG93Q29uZmlnID0ge30sIGF0dGFjaGVkPzogYW55KTogdm9pZCB7XG5cdFx0aWYgKCF0aGlzLmV2ZW50cy5maXJlKFBvcHVwRXZlbnRzLmJlZm9yZVNob3csIFtub2RlXSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0bm9kZSA9IHRvTm9kZShub2RlKTtcblx0XHRpZiAodGhpcy5faXNBY3RpdmUpIHtcblx0XHRcdHRoaXMuX3NldFBvcHVwU2l6ZShub2RlLCBjb25maWcpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoYXR0YWNoZWQpIHtcblx0XHRcdHRoaXMuYXR0YWNoKGF0dGFjaGVkKTtcblx0XHR9XG5cblx0XHR0aGlzLl9wb3B1cC5zdHlsZS5sZWZ0ID0gXCIwXCI7XG5cdFx0dGhpcy5fcG9wdXAuc3R5bGUudG9wID0gXCIwXCI7XG5cblx0XHRhd2FpdFJlZHJhdygpXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdHRoaXMuX3NldFBvcHVwU2l6ZShub2RlLCBjb25maWcpO1xuXHRcdFx0XHR0aGlzLl9wb3B1cC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9wb3B1cCk7XG5cdFx0XHRcdHRoaXMuX2lzQWN0aXZlID0gdHJ1ZTtcblx0XHRcdH0pXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdHRoaXMuX3BvcHVwLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKFBvcHVwRXZlbnRzLmFmdGVyU2hvdywgW25vZGVdKTtcblx0XHRcdFx0dGhpcy5fb3V0ZXJDbGlja0Rlc3RydWN0b3IgPSB0aGlzLl9kZXRlY3RPdXRlckNsaWNrKG5vZGUpO1xuXHRcdFx0fSk7XG5cdH1cblx0aGlkZSgpOiB2b2lkIHtcblx0XHR0aGlzLl9oaWRlKGZhbHNlLCBudWxsKTtcblx0fVxuXHRpc1Zpc2libGUoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuX2lzQWN0aXZlO1xuXHR9XG5cdGF0dGFjaChuYW1lOiBhbnksIGNvbmZpZz86IGFueSk6IFZOb2RlIHtcblx0XHR0aGlzLl9odG1sID0gbnVsbDtcblx0XHRpZiAodHlwZW9mIG5hbWUgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdHRoaXMuX3VpID0gbmFtZTtcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHR0aGlzLl91aSA9IG5ldyAod2luZG93IGFzIGFueSkuZGh4W25hbWVdKG51bGwsIGNvbmZpZyk7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRpZiAobmFtZS5wcm90b3R5cGUgaW5zdGFuY2VvZiBWaWV3KSB7XG5cdFx0XHRcdHRoaXMuX3VpID0gbmV3IG5hbWUobnVsbCwgY29uZmlnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3VpID0ge1xuXHRcdFx0XHRcdGdldFJvb3RWaWV3KCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG5hbWUoY29uZmlnKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLnBhaW50KCk7XG5cdFx0cmV0dXJuIHRoaXMuX3VpO1xuXHR9XG5cdGF0dGFjaEhUTUwoaHRtbDogc3RyaW5nKTogdm9pZCB7XG5cdFx0dGhpcy5faHRtbCA9IGh0bWw7XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdGdldFdpZGdldCgpOiBhbnkge1xuXHRcdHJldHVybiB0aGlzLl91aTtcblx0fVxuXHRnZXRDb250YWluZXIoKTogSFRNTEVsZW1lbnQge1xuXHRcdHJldHVybiB0aGlzLmdldFJvb3RWaWV3KCkucmVmcy5jb250ZW50LmVsO1xuXHR9XG5cdHRvVkRPTSgpIHtcblx0XHRsZXQgdmlldzogVk5vZGU7XG5cdFx0aWYgKHRoaXMuX2h0bWwpIHtcblx0XHRcdHZpZXcgPSBlbChcIi5kaHhfcG9wdXBfX2lubmVyLWh0bWwtY29udGVudFwiLCB7XG5cdFx0XHRcdFwiLmlubmVySFRNTFwiOiB0aGlzLl9odG1sLFxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZpZXcgPSB0aGlzLl91aSA/IHRoaXMuX3VpLmdldFJvb3RWaWV3KCkgOiBudWxsO1xuXHRcdFx0aWYgKHZpZXcgJiYgdmlldy5yZW5kZXIpIHtcblx0XHRcdFx0dmlldyA9IGluamVjdCh2aWV3KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCJkaXZcIixcblx0XHRcdHtcblx0XHRcdFx0Y2xhc3M6IFwiZGh4X3BvcHVwLWNvbnRlbnRcIixcblx0XHRcdFx0dGFiaW5kZXg6IDAsXG5cdFx0XHRcdG9uY2xpY2s6IHRoaXMuX2NsaWNrRXZlbnQsXG5cdFx0XHRcdF9rZXk6IHRoaXMuX3VpZCxcblx0XHRcdFx0X3JlZjogXCJjb250ZW50XCIsXG5cdFx0XHR9LFxuXHRcdFx0W3ZpZXddXG5cdFx0KTtcblx0fVxuXHRkZXN0cnVjdG9yKCkge1xuXHRcdHRoaXMuaGlkZSgpO1xuXHRcdGlmICh0aGlzLl9vdXRlckNsaWNrRGVzdHJ1Y3Rvcikge1xuXHRcdFx0dGhpcy5fb3V0ZXJDbGlja0Rlc3RydWN0b3IoKTtcblx0XHR9XG5cdFx0dGhpcy5fcG9wdXAgPSBudWxsO1xuXHR9XG5cdHByaXZhdGUgX3NldFBvcHVwU2l6ZShub2RlOiBIVE1MRWxlbWVudCwgY29uZmlnOiBJU2hvd0NvbmZpZywgY2FsbHMgPSAzKSB7XG5cdFx0Y29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLl9wb3B1cC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHQvLyBUT0RPOiBJRSBwb3B1cCBoZWlnaHQgPSAwXG5cdFx0aWYgKHRoaXMuX3RpbWVvdXQpIHtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcblx0XHRcdHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuXHRcdH1cblx0XHRpZiAoY2FsbHMgJiYgKHdpZHRoID09PSAwIHx8IGhlaWdodCA9PT0gMCkpIHtcblx0XHRcdHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0aWYgKCF0aGlzLl9pc0FjdGl2ZSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9zZXRQb3B1cFNpemUobm9kZSwgY29uZmlnLCBjYWxscyAtIDEpO1xuXHRcdFx0XHR0aGlzLl90aW1lb3V0ID0gbnVsbDtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IHsgbGVmdCwgdG9wIH0gPSBmaXRQb3NpdGlvbihub2RlLCB7XG5cdFx0XHRjZW50ZXJpbmc6IHRydWUsXG5cdFx0XHRtb2RlOiBcImJvdHRvbVwiLFxuXHRcdFx0Li4uY29uZmlnLFxuXHRcdFx0d2lkdGgsXG5cdFx0XHRoZWlnaHQsXG5cdFx0fSk7XG5cdFx0dGhpcy5fcG9wdXAuc3R5bGUubGVmdCA9IGxlZnQ7XG5cdFx0dGhpcy5fcG9wdXAuc3R5bGUudG9wID0gdG9wO1xuXHRcdGlmIChjb25maWcuaW5kZW50ICYmIGNvbmZpZy5pbmRlbnQgIT09IDApIHtcblx0XHRcdHN3aXRjaCAoY29uZmlnLm1vZGUpIHtcblx0XHRcdFx0Y2FzZSBcInRvcFwiOlxuXHRcdFx0XHRcdHRoaXMuX3BvcHVwLnN0eWxlLnRvcCA9XG5cdFx0XHRcdFx0XHRwYXJzZUludCh0aGlzLl9wb3B1cC5zdHlsZS50b3Auc2xpY2UoMCwgLTIpLCBudWxsKSAtXG5cdFx0XHRcdFx0XHRwYXJzZUludChjb25maWcuaW5kZW50LnRvU3RyaW5nKCksIG51bGwpICtcblx0XHRcdFx0XHRcdFwicHhcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImJvdHRvbVwiOlxuXHRcdFx0XHRcdHRoaXMuX3BvcHVwLnN0eWxlLnRvcCA9XG5cdFx0XHRcdFx0XHRwYXJzZUludCh0aGlzLl9wb3B1cC5zdHlsZS50b3Auc2xpY2UoMCwgLTIpLCBudWxsKSArXG5cdFx0XHRcdFx0XHRwYXJzZUludChjb25maWcuaW5kZW50LnRvU3RyaW5nKCksIG51bGwpICtcblx0XHRcdFx0XHRcdFwicHhcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImxlZnRcIjpcblx0XHRcdFx0XHR0aGlzLl9wb3B1cC5zdHlsZS5sZWZ0ID1cblx0XHRcdFx0XHRcdHBhcnNlSW50KHRoaXMuX3BvcHVwLnN0eWxlLmxlZnQuc2xpY2UoMCwgLTIpLCBudWxsKSAtXG5cdFx0XHRcdFx0XHRwYXJzZUludChjb25maWcuaW5kZW50LnRvU3RyaW5nKCksIG51bGwpICtcblx0XHRcdFx0XHRcdFwicHhcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJpZ2h0XCI6XG5cdFx0XHRcdFx0dGhpcy5fcG9wdXAuc3R5bGUubGVmdCA9XG5cdFx0XHRcdFx0XHRwYXJzZUludCh0aGlzLl9wb3B1cC5zdHlsZS5sZWZ0LnNsaWNlKDAsIC0yKSwgbnVsbCkgK1xuXHRcdFx0XHRcdFx0cGFyc2VJbnQoY29uZmlnLmluZGVudC50b1N0cmluZygpLCBudWxsKSArXG5cdFx0XHRcdFx0XHRcInB4XCI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhpcy5fcG9wdXAuc3R5bGUudG9wID1cblx0XHRcdFx0XHRcdHBhcnNlSW50KHRoaXMuX3BvcHVwLnN0eWxlLnRvcC5zbGljZSgwLCAtMiksIG51bGwpICtcblx0XHRcdFx0XHRcdHBhcnNlSW50KGNvbmZpZy5pbmRlbnQudG9TdHJpbmcoKSwgbnVsbCkgK1xuXHRcdFx0XHRcdFx0XCJweFwiO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9kZXRlY3RPdXRlckNsaWNrKG5vZGU6IEhUTUxFbGVtZW50KSB7XG5cdFx0Y29uc3Qgb3V0ZXJDbGljayA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0bGV0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdHdoaWxlICh0YXJnZXQpIHtcblx0XHRcdFx0aWYgKHRhcmdldCA9PT0gbm9kZSB8fCB0YXJnZXQgPT09IHRoaXMuX3BvcHVwKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRhcmdldCA9ICh0YXJnZXQgYXMgYW55KS5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2hpZGUodHJ1ZSwgZXZlbnQpKSB7XG5cdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgb3V0ZXJDbGljayk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG91dGVyQ2xpY2spO1xuXHRcdHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG91dGVyQ2xpY2spO1xuXHR9XG5cdHByaXZhdGUgX2hpZGUoZnJvbU91dGVyQ2xpY2s6IGJvb2xlYW4sIGU6IEV2ZW50KSB7XG5cdFx0aWYgKHRoaXMuX2lzQWN0aXZlKSB7XG5cdFx0XHRpZiAoIXRoaXMuZXZlbnRzLmZpcmUoUG9wdXBFdmVudHMuYmVmb3JlSGlkZSwgW2Zyb21PdXRlckNsaWNrLCBlXSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLl9wb3B1cCk7XG5cdFx0XHR0aGlzLl9pc0FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0aWYgKHRoaXMuX291dGVyQ2xpY2tEZXN0cnVjdG9yKSB7XG5cdFx0XHRcdHRoaXMuX291dGVyQ2xpY2tEZXN0cnVjdG9yKCk7XG5cdFx0XHRcdHRoaXMuX291dGVyQ2xpY2tEZXN0cnVjdG9yID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoUG9wdXBFdmVudHMuYWZ0ZXJIaWRlLCBbZV0pO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IElFdmVudFN5c3RlbSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9ldmVudHNcIjtcbmltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJUG9wdXAge1xuXHRzaG93KG5vZGU6IEhUTUxFbGVtZW50LCBjb25maWc/OiBJU2hvd0NvbmZpZywgYXR0YWNoPzogYW55KTogdm9pZDtcblx0aGlkZSgpOiB2b2lkO1xuXHR0b1ZET00oKTogdm9pZDtcblx0YXR0YWNoSFRNTChodG1sOiBzdHJpbmcpOiB2b2lkO1xuXHRhdHRhY2gobm9kZTogSFRNTEVsZW1lbnQsIGNvbmZpZz86IElTaG93Q29uZmlnLCBhdHRhY2hlZD86IGFueSk6IFZOb2RlO1xuXHRpc1Zpc2libGUoKTogYm9vbGVhbjtcblx0cGFpbnQoKTogdm9pZDtcblx0ZGVzdHJ1Y3RvcigpOiB2b2lkO1xuXHRnZXRXaWRnZXQoKTogYW55O1xuXHRnZXRDb250YWluZXIoKTogSFRNTEVsZW1lbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBvcHVwQ29uZmlnIHtcblx0Y3NzPzogc3RyaW5nO1xuXHRldmVudHM/OiBJRXZlbnRTeXN0ZW08YW55Pjtcbn1cblxuZXhwb3J0IGVudW0gUG9wdXBFdmVudHMge1xuXHRiZWZvcmVIaWRlID0gXCJiZWZvcmVIaWRlXCIsXG5cdGJlZm9yZVNob3cgPSBcImJlZm9yZVNob3dcIixcblx0YWZ0ZXJIaWRlID0gXCJhZnRlckhpZGVcIixcblx0YWZ0ZXJTaG93ID0gXCJhZnRlclNob3dcIixcblx0Y2xpY2sgPSBcImNsaWNrXCIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNob3dDb25maWcge1xuXHRjZW50ZXJpbmc/OiBib29sZWFuO1xuXHRhdXRvPzogYm9vbGVhbjtcblx0bW9kZT86IFBvc2l0aW9uO1xuXHRpbmRlbnQ/OiBudW1iZXIgfCBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBvcHVwRXZlbnRIYW5kbGVyc01hcCB7XG5cdFtrZXk6IHN0cmluZ106ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuXHRbUG9wdXBFdmVudHMuY2xpY2tdOiAoZTogRXZlbnQpID0+IGFueTtcblx0W1BvcHVwRXZlbnRzLmFmdGVySGlkZV06IChlOiBFdmVudCkgPT4gdm9pZDtcblx0W1BvcHVwRXZlbnRzLmFmdGVyU2hvd106IChub2RlOiBIVE1MRWxlbWVudCkgPT4gdm9pZDtcblx0W1BvcHVwRXZlbnRzLmJlZm9yZUhpZGVdOiAoZnJvbU91dGVyQ2xpY2s6IGJvb2xlYW4sIGU6IEV2ZW50KSA9PiB2b2lkIHwgYm9vbGVhbjtcblx0W1BvcHVwRXZlbnRzLmJlZm9yZVNob3ddOiAobm9kZTogSFRNTEVsZW1lbnQpID0+IHZvaWQgfCBib29sZWFuO1xufVxuIiwiaW1wb3J0IHsgVGV4dEJ1ZmZlciB9IGZyb20gXCIuL2hlbHBlcnMvYnVmZmVyXCI7XG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tIFwiLi9tb2RlbHMvRWRpdG9yXCI7XG5pbXBvcnQgeyBBY3Rpb24sIElPcGVyYXRpb24gfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5jb25zdCBJTkFDVElPTl9ERUxBWSA9IDUwMDA7XG5cbnR5cGUgU3RhdGUgPSBzdHJpbmc7XG5cbmludGVyZmFjZSBJQ2hhbmdlIHtcblx0c3RhdGU6IFN0YXRlO1xuXHRuZXh0OiBJQ2hhbmdlO1xuXHRwcmV2OiBJQ2hhbmdlO1xufVxuXG5leHBvcnQgY2xhc3MgTWFuYWdlciB7XG5cdHByaXZhdGUgX2VkaXRvcjogRWRpdG9yO1xuXHRwcml2YXRlIF9jaGFuZ2VzOiBJQ2hhbmdlO1xuXHRwcml2YXRlIF9idWZmZXI6IFRleHRCdWZmZXI7XG5cblx0cHJpdmF0ZSBfaW5hY3Rpb25UaW1lcjtcblxuXHRjb25zdHJ1Y3RvcihlZGl0b3I6IEVkaXRvcikge1xuXHRcdHRoaXMuX2VkaXRvciA9IGVkaXRvcjtcblx0XHR0aGlzLmNsZWFyQ2hhbmdlcygpO1xuXHRcdHRoaXMuX2J1ZmZlciA9IG5ldyBUZXh0QnVmZmVyKHRoaXMuX2VkaXRvcik7XG5cdH1cblx0ZXhlY3V0ZShvcGVyYXRpb246IElPcGVyYXRpb24pIHtcblx0XHRpZiAodGhpcy5faW5hY3Rpb25UaW1lcikge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuX2luYWN0aW9uVGltZXIpO1xuXHRcdFx0dGhpcy5faW5hY3Rpb25UaW1lciA9IG51bGw7XG5cdFx0fVxuXHRcdHRoaXMuX2luYWN0aW9uVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGlmICh0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLmlzQWN0aXZlKCkpIHtcblx0XHRcdFx0Ly8gaWYgZWRpdG9yIG5vdCBpbiBmb2N1cyBpdCBjYW4gY2FsbCBzb21lIHVuZXhwZWN0ZWQgYmVoYXZpb3VyXG5cdFx0XHRcdHRoaXMuX2VkaXRvci5iYWxhbmNlKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9pbmFjdGlvblRpbWVyID0gbnVsbDtcblx0XHR9LCBJTkFDVElPTl9ERUxBWSk7XG5cblx0XHRsZXQgcmVzdWx0O1xuXG5cdFx0c3dpdGNoIChvcGVyYXRpb24uYWN0aW9uKSB7XG5cdFx0XHRjYXNlIEFjdGlvbi5wYXJzZTpcblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5fZWRpdG9yLnBhcnNlKG9wZXJhdGlvbi5kYXRhLnZhbHVlLCBvcGVyYXRpb24uZGF0YS5tb2RlKTtcblx0XHRcdFx0dGhpcy5jbGVhckNoYW5nZXMoKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRjYXNlIEFjdGlvbi5hZGQ6XG5cdFx0XHRcdHJlc3VsdCA9IHRoaXMuX2VkaXRvci5hZGQob3BlcmF0aW9uLmRhdGEpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQWN0aW9uLmlubmVyQWRkOlxuXHRcdFx0XHRpZiAodHlwZW9mIG9wZXJhdGlvbi5kYXRhID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gdGhpcy5fZWRpdG9yLmFkZChvcGVyYXRpb24uZGF0YSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgeyBkYXRhLCB0eXBlIH0gPSBvcGVyYXRpb24uZGF0YTtcblx0XHRcdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0XHRcdGNhc2UgXCJ0ZXh0XCI6XG5cdFx0XHRcdFx0XHRcdHJlc3VsdCA9IHRoaXMuX2VkaXRvci5hZGQoZGF0YSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcImZ1bGxcIjpcblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gdGhpcy5fZWRpdG9yLnBhc3RlKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBcImlubmVyXCIpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJ0ZXh0bm9kZVwiOlxuXHRcdFx0XHRcdFx0XHQvLyB0cmlja3lcblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gdGhpcy5fZWRpdG9yLnBhc3RlKFxuXHRcdFx0XHRcdFx0XHRcdEpTT04uc3RyaW5naWZ5KFtcblx0XHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGV4dE5vZGVzOiBbZGF0YV0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlOiB7fSxcblx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XSksXG5cdFx0XHRcdFx0XHRcdFx0XCJpbm5lclwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQWN0aW9uLnJlbW92ZTpcblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5fZWRpdG9yLnJlbW92ZShvcGVyYXRpb24uZGF0YSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBBY3Rpb24udXBkYXRlOlxuXHRcdFx0XHRyZXN1bHQgPSB0aGlzLl9lZGl0b3IudXBkYXRlKG9wZXJhdGlvbi5kYXRhKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEFjdGlvbi5jbGVhcjpcblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5fZWRpdG9yLmNsZWFyU3R5bGVzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBBY3Rpb24ucGFzdGU6XG5cdFx0XHRcdHJlc3VsdCA9IHRoaXMuX2J1ZmZlci5wYXN0ZShvcGVyYXRpb24uZGF0YSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBBY3Rpb24uY3V0OlxuXHRcdFx0XHRyZXN1bHQgPSB0aGlzLl9idWZmZXIuY3V0KG9wZXJhdGlvbi5kYXRhKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIEFjdGlvbi5jb3B5OlxuXHRcdFx0XHR0aGlzLl9idWZmZXIuY29weShvcGVyYXRpb24uZGF0YSk7IC8vIGl0IHNwbGl0IG5vZGVzLCBuZWVkIHRvIHVwZGF0ZSB2aWV3XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0Y2FzZSBBY3Rpb24uc2VsZWN0QWxsOlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0aWYgKHJlc3VsdCkge1xuXHRcdFx0dGhpcy5fY2hhbmdlKCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAob3BlcmF0aW9uLmFjdGlvbiA9PT0gQWN0aW9uLnVuZG8pIHtcblx0XHRcdHJldHVybiB0aGlzLnVuZG8oKTtcblx0XHR9XG5cblx0XHRpZiAob3BlcmF0aW9uLmFjdGlvbiA9PT0gQWN0aW9uLnJlZG8pIHtcblx0XHRcdHJldHVybiB0aGlzLnJlZG8oKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Y2FuVW5kbygpIHtcblx0XHRyZXR1cm4gdGhpcy5fY2hhbmdlcy5wcmV2ICE9PSBudWxsO1xuXHR9XG5cdGNhblJlZG8oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NoYW5nZXMubmV4dCAhPT0gbnVsbDtcblx0fVxuXHR1bmRvKCkge1xuXHRcdGNvbnN0IGNoYW5nZSA9IHRoaXMuX2NoYW5nZXMucHJldjtcblx0XHRpZiAoY2hhbmdlKSB7XG5cdFx0XHR0aGlzLl9lZGl0b3Iuc2V0U3RhdGUoY2hhbmdlLnN0YXRlKTtcblx0XHRcdHRoaXMuX2NoYW5nZXMgPSBjaGFuZ2U7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJlZG8oKSB7XG5cdFx0Y29uc3QgY2hhbmdlID0gdGhpcy5fY2hhbmdlcy5uZXh0O1xuXHRcdGlmIChjaGFuZ2UpIHtcblx0XHRcdHRoaXMuX2VkaXRvci5zZXRTdGF0ZShjaGFuZ2Uuc3RhdGUpO1xuXHRcdFx0dGhpcy5fY2hhbmdlcyA9IGNoYW5nZTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Y2xlYXJDaGFuZ2VzKCkge1xuXHRcdHRoaXMuX2NoYW5nZXMgPSB7XG5cdFx0XHRwcmV2OiBudWxsLFxuXHRcdFx0bmV4dDogbnVsbCxcblx0XHRcdHN0YXRlOiB0aGlzLl9lZGl0b3IuZ2V0U3RhdGUoKSxcblx0XHR9O1xuXHR9XG5cdHByaXZhdGUgX2NoYW5nZSgpIHtcblx0XHRjb25zdCBuZXdDaGFuZ2UgPSB7XG5cdFx0XHRwcmV2OiB0aGlzLl9jaGFuZ2VzLFxuXHRcdFx0bmV4dDogbnVsbCxcblx0XHRcdHN0YXRlOiB0aGlzLl9lZGl0b3IuZ2V0U3RhdGUoKSxcblx0XHR9O1xuXG5cdFx0dGhpcy5fY2hhbmdlcy5uZXh0ID0gbmV3Q2hhbmdlO1xuXHRcdHRoaXMuX2NoYW5nZXMgPSBuZXdDaGFuZ2U7XG5cdH1cbn1cbiIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9jb3JlXCI7XG5pbXBvcnQgeyBjcmVhdGUsIGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgRXZlbnRTeXN0ZW0gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZXZlbnRzXCI7XG5pbXBvcnQgeyB0b05vZGUgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vaHRtbFwiO1xuaW1wb3J0IHsgSUhhbmRsZXJzIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBWaWV3LCB0b1ZpZXdMaWtlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3ZpZXdcIjtcbmltcG9ydCB7IExheW91dCB9IGZyb20gXCJAZGh4L3RzLWxheW91dFwiO1xuaW1wb3J0IHsgVG9vbGJhciB9IGZyb20gXCJAZGh4L3RzLXRvb2xiYXJcIjtcbmltcG9ydCB7IGRlZmF1bHRCbG9ja3MgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGxpc3RlbkNvbXBvc2l0aW9uRXZlbnRzIH0gZnJvbSBcIi4vaGVscGVycy9jb21wb3NpdGlvblwiO1xuaW1wb3J0IHsgTGlua0VkaXRvciB9IGZyb20gXCIuL2hlbHBlcnMvbGlua1wiO1xuaW1wb3J0IHsgZ2V0TGlua1JlZmVyLCBnZXRUZXh0SGFzaCB9IGZyb20gXCIuL2hlbHBlcnMvb3RoZXJcIjtcbmltcG9ydCB7IGNyZWF0ZVNjcm9sbEhlbHBlciwgSVNjcm9sbEhlbHBlciB9IGZyb20gXCIuL2hlbHBlcnMvc2Nyb2xsXCI7XG5pbXBvcnQgeyBnZXRTdGF0cyB9IGZyb20gXCIuL2hlbHBlcnMvc3RhdGlzdGljc1wiO1xuaW1wb3J0IHsgYmxvY2txdW90ZVdyYXBwZXIsIGJsb2NrU3R5bGVUb1RhZywgY2FsY0Jsb2NrU3R5bGUsIGNhbGNUZXh0Tm9kZVN0eWxlIH0gZnJvbSBcIi4vaGVscGVycy9zdHlsZXNcIjtcbmltcG9ydCB7IFJpY2hUZXh0VG9vbGJhckhlbHBlciB9IGZyb20gXCIuL2hlbHBlcnMvdG9vbGJhclwiO1xuaW1wb3J0IHsga2V5VG9PcGVyYXRpb24gfSBmcm9tIFwiLi9rZXloYW5kbGVyXCI7XG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tIFwiLi9tb2RlbHMvRWRpdG9yXCI7XG5pbXBvcnQgeyBUZXh0Tm9kZSB9IGZyb20gXCIuL21vZGVscy9UZXh0Tm9kZVwiO1xuaW1wb3J0IHtcblx0QWN0aW9uLFxuXHRJRWRpdG9yQVBJLFxuXHRJUmljaFRleHQsXG5cdElSaWNoVGV4dENvbmZpZyxcblx0SVJpY2hUZXh0RXZlbnRTeXN0ZW0sXG5cdElTZWxlY3Rpb25TdGF0ZSxcblx0UmljaFRleHRFdmVudHMsXG5cdFJURVRvb2xiYXJCbG9jayxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIFJpY2h0ZXh0IGV4dGVuZHMgVmlldyBpbXBsZW1lbnRzIElSaWNoVGV4dCB7XG5cdHB1YmxpYyBldmVudHM6IElSaWNoVGV4dEV2ZW50U3lzdGVtO1xuXHRwdWJsaWMgY29uZmlnOiBJUmljaFRleHRDb25maWc7XG5cblx0cHVibGljIHRvb2xiYXI6IFRvb2xiYXI7XG5cblx0cHJpdmF0ZSBfZWRpdG9yOiBFZGl0b3I7XG5cblx0cHJpdmF0ZSBfbGF5b3V0OiBMYXlvdXQ7XG5cblx0cHJpdmF0ZSBfaGFuZGxlcnM6IElIYW5kbGVycztcblxuXHRwcml2YXRlIF9pbml0Q29udGFpbmVyOiBIVE1MRWxlbWVudDtcblx0cHJpdmF0ZSBfdG9vbGJhckhlbHBlcjogUmljaFRleHRUb29sYmFySGVscGVyO1xuXHRwcml2YXRlIF9zY3JvbGxIZWxwZXI6IElTY3JvbGxIZWxwZXI7XG5cdHByaXZhdGUgX2xpbmtFZGl0b3I6IExpbmtFZGl0b3I7XG5cblx0cHJpdmF0ZSBfcmVzdG9yZUZvY3VzVGltZW91dDogYW55O1xuXG5cdHByaXZhdGUgX2NvbXBvc2l0aW9uRXZlbnRzRGVzdHJ1Y3RvcjogKCkgPT4gdm9pZDtcblxuXHRwcml2YXRlIF9lZGl0b3JWaWV3OiBhbnk7XG5cblx0cHJpdmF0ZSBfY29tcG9zaXRpb246IHtcblx0XHRhY3RpdmU6IGJvb2xlYW47XG5cdFx0aW5pdFNlbGVjdGlvbjogSVNlbGVjdGlvblN0YXRlO1xuXHR9O1xuXG5cdGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBzdHJpbmcsIGNvbmZpZzogYW55KSB7XG5cdFx0c3VwZXIoXG5cdFx0XHRjb250YWluZXIsXG5cdFx0XHRleHRlbmQoXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRtb2RlOiBcImNsYXNzaWNcIixcblx0XHRcdFx0XHR0b29sYmFyQmxvY2tzOiBbXG5cdFx0XHRcdFx0XHRSVEVUb29sYmFyQmxvY2sudW5kbyxcblx0XHRcdFx0XHRcdFJURVRvb2xiYXJCbG9jay5zdHlsZSxcblx0XHRcdFx0XHRcdFJURVRvb2xiYXJCbG9jay5kZWNvcmF0aW9uLFxuXHRcdFx0XHRcdFx0UlRFVG9vbGJhckJsb2NrLmNvbG9yLFxuXHRcdFx0XHRcdFx0UlRFVG9vbGJhckJsb2NrLmFsaWduLFxuXHRcdFx0XHRcdFx0UlRFVG9vbGJhckJsb2NrLmxpbmssXG5cdFx0XHRcdFx0XHQvLyBSVEVUb29sYmFyQmxvY2suY2xlYXIsXG5cdFx0XHRcdFx0XHQvLyBSVEVUb29sYmFyQmxvY2suZnVsbHNjcmVlblxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbmZpZ1xuXHRcdFx0KVxuXHRcdCk7XG5cblx0XHRjb25zdCBkZWZhdWx0QmxvY2tJbmRleCA9IHRoaXMuY29uZmlnLnRvb2xiYXJCbG9ja3MuaW5kZXhPZihSVEVUb29sYmFyQmxvY2suZGVmYXVsdCk7XG5cdFx0aWYgKGRlZmF1bHRCbG9ja0luZGV4ICE9PSAtMSkge1xuXHRcdFx0dGhpcy5jb25maWcudG9vbGJhckJsb2Nrcy5zcGxpY2UoZGVmYXVsdEJsb2NrSW5kZXgsIDEsIC4uLmRlZmF1bHRCbG9ja3MpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2luaXRDb250YWluZXIgPSB0b05vZGUoY29udGFpbmVyKTtcblxuXHRcdHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50U3lzdGVtKHRoaXMpIGFzIElSaWNoVGV4dEV2ZW50U3lzdGVtO1xuXG5cdFx0Y29uc3QgZ2V0Um9vdFZpZXcgPSAoKSA9PiB0aGlzLl9lZGl0b3JWaWV3LmdldFJvb3RWaWV3KCk7XG5cblx0XHR0aGlzLl9jb21wb3NpdGlvbiA9IHtcblx0XHRcdGFjdGl2ZTogZmFsc2UsXG5cdFx0XHRpbml0U2VsZWN0aW9uOiBudWxsLFxuXHRcdH07XG5cdFx0dGhpcy5fY29tcG9zaXRpb25FdmVudHNEZXN0cnVjdG9yID0gbGlzdGVuQ29tcG9zaXRpb25FdmVudHModGhpcy5ldmVudHMsICgpID0+XG5cdFx0XHR0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLmlzQWN0aXZlKClcblx0XHQpO1xuXG5cdFx0dGhpcy5fZWRpdG9yID0gbmV3IEVkaXRvcih7XG5cdFx0XHRldmVudHM6IHRoaXMuZXZlbnRzLFxuXHRcdFx0dWlkOiB0aGlzLl91aWQsXG5cdFx0XHRnZXRSb290Vmlldyxcblx0XHRcdHJlcGFpbnQ6ICgpID0+IHRoaXMuX2VkaXRvclZpZXcucGFpbnQoKSxcblx0XHR9KTtcblxuXHRcdHRoaXMuX3Rvb2xiYXJIZWxwZXIgPSBuZXcgUmljaFRleHRUb29sYmFySGVscGVyKHRoaXMsIHRoaXMuX2VkaXRvcik7XG5cdFx0dGhpcy50b29sYmFyID0gdGhpcy5fdG9vbGJhckhlbHBlci50b29sYmFyO1xuXHRcdHRoaXMuX2xpbmtFZGl0b3IgPSBuZXcgTGlua0VkaXRvcihudWxsLCB7XG5cdFx0XHRldmVudHM6IHRoaXMuZXZlbnRzLFxuXHRcdFx0ZWRpdG9yOiB0aGlzLl9lZGl0b3IsXG5cdFx0XHRnZXRSb290Vmlldyxcblx0XHR9KTtcblxuXHRcdHRoaXMuX2luaXRIYW5kbGVycygpO1xuXHRcdHRoaXMuX2luaXRVSSh0aGlzLl9pbml0Q29udGFpbmVyKTtcblx0XHR0aGlzLl9pbml0RXZlbnRzKCk7XG5cdH1cblx0Z2V0Um9vdFZpZXcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2xheW91dC5nZXRSb290VmlldygpO1xuXHR9XG5cdHNldFZhbHVlKHZhbHVlOiBzdHJpbmcsIG1vZGU6IFwiaHRtbFwiIHwgXCJtYXJrZG93blwiID0gXCJodG1sXCIpIHtcblx0XHR0aGlzLmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLmFjdGlvbiwgW0FjdGlvbi5wYXJzZSwgeyB2YWx1ZSwgbW9kZSB9LCBmYWxzZV0pO1xuXHR9XG5cdGdldFZhbHVlKG1vZGU6IFwiaHRtbFwiIHwgXCJ0ZXh0XCIgfCBcIm1hcmtkb3duXCIgPSBcImh0bWxcIikge1xuXHRcdHJldHVybiB0aGlzLl9lZGl0b3Iuc2VyaWFsaXplKG1vZGUpO1xuXHR9XG5cdGdldFN0YXRzKHNlbGVjdGlvbj86IGJvb2xlYW4pOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IHtcblx0XHRjb25zdCB0ZXh0ID0gc2VsZWN0aW9uID8gdGhpcy5fZWRpdG9yLnNlbGVjdGlvbi5nZXRTZWxlY3RlZFRleHQoKSA6IHRoaXMuZ2V0VmFsdWUoXCJ0ZXh0XCIpO1xuXHRcdHJldHVybiBnZXRTdGF0cyh0ZXh0LCB0aGlzLmNvbmZpZy5jdXN0b21TdGF0cyk7XG5cdH1cblx0ZGVzdHJ1Y3RvcigpIHtcblx0XHR0aGlzLl9jb21wb3NpdGlvbkV2ZW50c0Rlc3RydWN0b3IoKTtcblx0XHR0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLmRlc3RydWN0b3IoKTtcblx0XHR0aGlzLnRvb2xiYXIuZGVzdHJ1Y3RvcigpO1xuXHRcdHRoaXMudW5tb3VudCgpO1xuXHR9XG5cdGZ1bGxTY3JlZW4oKSB7XG5cdFx0aWYgKHRoaXMudG9vbGJhci5kYXRhLmV4aXN0cyhcImZ1bGxzY3JlZW5cIikpIHtcblx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShcImZ1bGxzY3JlZW5cIiwge1xuXHRcdFx0XHRpY29uOiBcImR4aSBkeGktYXJyb3ctY29sbGFwc2VcIixcblx0XHRcdFx0JGZ1bGxzY3JlZW46IHRydWUsXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJkaHhfcmljaHRleHQtLWZ1bGxzY3JlZW5cIiwgXCJkaHhfd2lkZ2V0LS1mdWxsc2NyZWVuXCIpO1xuXHRcdGNvbnN0IHZpZXcgPSB0aGlzLmdldFJvb3RWaWV3KCk7XG5cdFx0dmlldy5tb3VudChkb2N1bWVudC5ib2R5KTtcblx0fVxuXHRleGl0RnVsbFNjcmVlbigpIHtcblx0XHRpZiAodGhpcy50b29sYmFyLmRhdGEuZXhpc3RzKFwiZnVsbHNjcmVlblwiKSkge1xuXHRcdFx0dGhpcy50b29sYmFyLmRhdGEudXBkYXRlKFwiZnVsbHNjcmVlblwiLCB7XG5cdFx0XHRcdGljb246IFwiZHhpIGR4aS1hcnJvdy1leHBhbmRcIixcblx0XHRcdFx0JGZ1bGxzY3JlZW46IGZhbHNlLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwiZGh4X3JpY2h0ZXh0LS1mdWxsc2NyZWVuXCIsIFwiZGh4X3dpZGdldC0tZnVsbHNjcmVlblwiKTtcblx0XHRjb25zdCB2aWV3ID0gdGhpcy5nZXRSb290VmlldygpO1xuXHRcdHZpZXcubW91bnQodGhpcy5faW5pdENvbnRhaW5lcik7XG5cdH1cblx0Z2V0RWRpdG9yQVBJKCk6IElFZGl0b3JBUEkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRnZXRTZWxlY3Rpb246ICgpID0+IHRoaXMuX2VkaXRvci5zZWxlY3Rpb24uZ2V0KCksXG5cdFx0XHRzZXRTZWxlY3Rpb246IHNlbGVjdGlvbiA9PiB7XG5cdFx0XHRcdHRoaXMuX2VkaXRvci5zZWxlY3Rpb24uc2V0KHNlbGVjdGlvbik7XG5cdFx0XHRcdHRoaXMuX3Jlc3RvcmVGb2N1cygpO1xuXHRcdFx0fSxcblx0XHRcdGdldFBvc2l0aW9uOiBzZWxlY3Rpb24gPT4gdGhpcy5fZWRpdG9yLnNlbGVjdGlvbi5nZXRQb3NpdGlvbihzZWxlY3Rpb24pLFxuXHRcdFx0Z2V0TW9kZWw6ICgpID0+XG5cdFx0XHRcdHRoaXMuX2VkaXRvci5ibG9ja3MubWFwKGJsb2NrID0+ICh7XG5cdFx0XHRcdFx0c3R5bGU6IHsgLi4uYmxvY2suc3R5bGUgfSxcblx0XHRcdFx0XHR0ZXh0Tm9kZXM6IGJsb2NrLnRleHROb2Rlcy5tYXAodGV4dE5vZGUgPT4gKHtcblx0XHRcdFx0XHRcdHN0eWxlOiB7IC4uLnRleHROb2RlLnN0eWxlIH0sXG5cdFx0XHRcdFx0XHR0ZXh0OiB0ZXh0Tm9kZS50ZXh0LFxuXHRcdFx0XHRcdH0pKSxcblx0XHRcdFx0fSkpLFxuXHRcdFx0c2V0TW9kZWw6IChibG9ja3MsIHNlbGVjdGlvbj8pID0+IHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5hY3Rpb24sIFtcblx0XHRcdFx0XHRBY3Rpb24ucGFyc2UsXG5cdFx0XHRcdFx0eyB2YWx1ZTogYmxvY2tzLCBtb2RlOiBcImlubmVyXCIgfSxcblx0XHRcdFx0XHRmYWxzZSxcblx0XHRcdFx0XSk7XG5cdFx0XHRcdGlmIChzZWxlY3Rpb24pIHtcblx0XHRcdFx0XHR0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLnNldChzZWxlY3Rpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YWRkOiAoY29uZmlnLCBzZWxlY3Rpb24/KSA9PiB7XG5cdFx0XHRcdGlmIChzZWxlY3Rpb24pIHtcblx0XHRcdFx0XHR0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLnNldChzZWxlY3Rpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuYWN0aW9uLCBbQWN0aW9uLmlubmVyQWRkLCBjb25maWcsIHRydWVdKTtcblx0XHRcdH0sXG5cdFx0XHRyZW1vdmU6IChzZWxlY3Rpb24/KSA9PiB7XG5cdFx0XHRcdGlmIChzZWxlY3Rpb24pIHtcblx0XHRcdFx0XHR0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLnNldChzZWxlY3Rpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuYWN0aW9uLCBbQWN0aW9uLnJlbW92ZSwgdHJ1ZSwgdHJ1ZV0pO1xuXHRcdFx0fSxcblx0XHRcdHVwZGF0ZTogKGNvbmZpZywgc2VsZWN0aW9uPykgPT4ge1xuXHRcdFx0XHRpZiAoc2VsZWN0aW9uKSB7XG5cdFx0XHRcdFx0dGhpcy5fZWRpdG9yLnNlbGVjdGlvbi5zZXQoc2VsZWN0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLmFjdGlvbiwgW1xuXHRcdFx0XHRcdEFjdGlvbi51cGRhdGUsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bW9kaWZpZXI6IGNvbmZpZy5tb2RpZmllcixcblx0XHRcdFx0XHRcdG1vZGlmaWVyVmFsdWU6IGNvbmZpZy52YWx1ZSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdKTtcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXHRwcml2YXRlIF9pbml0VUkoY29udGFpbmVyKSB7XG5cdFx0Y29uc3QgbGF5b3V0ID0gKHRoaXMuX2xheW91dCA9IG5ldyBMYXlvdXQoY29udGFpbmVyLCB7XG5cdFx0XHRjc3M6IFwiZGh4X3JpY2h0ZXh0XCIgKyBcIiBkaHhfcmljaHRleHQtLW1vZGVfXCIgKyB0aGlzLmNvbmZpZy5tb2RlLFxuXHRcdFx0Y29sczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y3NzOiBcImRoeF90b29sYmFyX19oZWlnaHQtaG9sZGVyXCIsXG5cdFx0XHRcdFx0cm93czogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRpZDogXCJ0b29sYmFyXCIsXG5cdFx0XHRcdFx0XHRcdG9uOiB7IGNsaWNrOiAoKSA9PiB0aGlzLl9yZXN0b3JlRm9jdXMoKSB9LFxuXHRcdFx0XHRcdFx0XHRjc3M6IFwiZGh4X3JpY2h0ZXh0X190b29sYmFyLWhvbGRlclwiLFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IFwiY29udGVudFwiLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHsgaWQ6IFwiZWRpdG9yXCIsIGNzczogXCJkaHhfcmljaHRleHRfX2VkaXRvci1ob2xkZXJcIiB9LFxuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0pKTtcblxuXHRcdHRoaXMuX2VkaXRvclZpZXcgPSB0b1ZpZXdMaWtlKFxuXHRcdFx0Y3JlYXRlKHtcblx0XHRcdFx0cmVuZGVyOiAoKSA9PiB0aGlzLl9kcmF3KCksXG5cdFx0XHRcdGhvb2tzOiB7XG5cdFx0XHRcdFx0ZGlkUmVkcmF3OiAoKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5fZWRpdG9yLnNlbGVjdGlvbi5pc0FjdGl2ZSgpKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGlzVXBkYXRlZCA9IHRoaXMuX2VkaXRvci5zZWxlY3Rpb24udXBkYXRlKCk7XG5cdFx0XHRcdFx0XHRcdGlmICghaXNVcGRhdGVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fcmVzdG9yZUZvY3VzKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0fSlcblx0XHQpO1xuXG5cdFx0bGF5b3V0LmdldENlbGwoXCJlZGl0b3JcIikuYXR0YWNoKHRoaXMuX2VkaXRvclZpZXcpO1xuXHRcdGxheW91dC5nZXRDZWxsKFwidG9vbGJhclwiKS5hdHRhY2godGhpcy50b29sYmFyKTtcblx0fVxuXHRwcml2YXRlIF9pbml0SGFuZGxlcnMoKSB7XG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHRvbmtleWRvd246IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHR0aGlzLl9jb21wb3NpdGlvbi5hY3RpdmUgfHxcblx0XHRcdFx0XHQodGhpcy5fbGlua0VkaXRvci5pc1Zpc2libGUoKSAmJiAhdGhpcy5fZWRpdG9yLnNlbGVjdGlvbi5pc0FjdGl2ZSgpKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3Qgb3BlcmF0aW9uID0ga2V5VG9PcGVyYXRpb24oZSk7XG5cdFx0XHRcdGlmICghb3BlcmF0aW9uKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuYWN0aW9uLCBbb3BlcmF0aW9uLmFjdGlvbiwgb3BlcmF0aW9uLmRhdGFdKTtcblx0XHRcdH0sXG5cdFx0XHRvbnBhc3RlOiAoZTogQ2xpcGJvYXJkRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5hY3Rpb24sIFtBY3Rpb24ucGFzdGUsIGUsIGZhbHNlXSk7XG5cdFx0XHR9LFxuXHRcdFx0b25jdXQ6IChlOiBDbGlwYm9hcmRFdmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLmFjdGlvbiwgW0FjdGlvbi5jdXQsIGUsIGZhbHNlXSk7XG5cdFx0XHR9LFxuXHRcdFx0b25jb3B5OiAoZTogQ2xpcGJvYXJkRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5hY3Rpb24sIFtBY3Rpb24uY29weSwgZSwgZmFsc2VdKTtcblx0XHRcdH0sXG5cdFx0XHRvbmRyb3A6IGUgPT4ge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9LFxuXHRcdFx0b25kcmFnc3RhcnQ6IGUgPT4ge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cblx0cHJpdmF0ZSBfaW5pdEV2ZW50cygpIHtcblx0XHR0aGlzLmV2ZW50cy5vbihSaWNoVGV4dEV2ZW50cy5zZWxlY3Rpb25SZWZyZXNoLCAoKSA9PiB0aGlzLl9zY3JvbGxIZWxwZXIudXBkYXRlKCkpO1xuXHRcdHRoaXMuZXZlbnRzLm9uKFJpY2hUZXh0RXZlbnRzLmFjdGlvbiwgKGFjdGlvbiwgZGF0YSwgcmVzdG9yZUZvY3VzKSA9PiB7XG5cdFx0XHRjb25zdCBpc0NoYW5nZWQgPSB0aGlzLl9lZGl0b3IubWFuYWdlci5leGVjdXRlKHsgYWN0aW9uLCBkYXRhIH0pO1xuXHRcdFx0aWYgKGlzQ2hhbmdlZCkge1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLmNoYW5nZSwgW1xuXHRcdFx0XHRcdGFjdGlvbixcblx0XHRcdFx0XHR0aGlzLl9lZGl0b3IubWFuYWdlci5jYW5VbmRvKCksXG5cdFx0XHRcdFx0dGhpcy5fZWRpdG9yLm1hbmFnZXIuY2FuUmVkbygpLFxuXHRcdFx0XHRdKTtcblx0XHRcdFx0dGhpcy5fZWRpdG9yVmlldy5wYWludCgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3RvcmVGb2N1cykge1xuXHRcdFx0XHR0aGlzLl9yZXN0b3JlRm9jdXMoKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuZXZlbnRzLm9uKFJpY2hUZXh0RXZlbnRzLmNvbXBvc2l0aW9uU3RhcnQsICgpID0+IHtcblx0XHRcdHRoaXMuX2NvbXBvc2l0aW9uLmFjdGl2ZSA9IHRydWU7XG5cdFx0XHR0aGlzLl9jb21wb3NpdGlvbi5pbml0U2VsZWN0aW9uID0gdGhpcy5fZWRpdG9yLnNlbGVjdGlvbi5nZXQoKTtcblx0XHR9KTtcblx0XHR0aGlzLmV2ZW50cy5vbihSaWNoVGV4dEV2ZW50cy5jb21wb3NpdGlvbkVuZCwgZGF0YSA9PiB7XG5cdFx0XHR0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLnNldCh0aGlzLl9jb21wb3NpdGlvbi5pbml0U2VsZWN0aW9uKTtcblxuXHRcdFx0dGhpcy5ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5hY3Rpb24sIFtBY3Rpb24uYWRkLCBkYXRhLCB0cnVlXSk7XG5cdFx0XHR0aGlzLl9jb21wb3NpdGlvbi5hY3RpdmUgPSBmYWxzZTtcblx0XHRcdHRoaXMuX2NvbXBvc2l0aW9uLmluaXRTZWxlY3Rpb24gPSBudWxsO1xuXHRcdH0pO1xuXHR9XG5cdHByaXZhdGUgX3Jlc3RvcmVGb2N1cygpIHtcblx0XHRpZiAodGhpcy5fcmVzdG9yZUZvY3VzVGltZW91dCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuX3Jlc3RvcmVGb2N1c1RpbWVvdXQpO1xuXHRcdH1cblx0XHR0aGlzLl9yZXN0b3JlRm9jdXNUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0aGlzLl9zY3JvbGxIZWxwZXIuc2F2ZVNjcm9sbFRvcCgpO1xuXHRcdFx0dGhpcy5fZWRpdG9yVmlldy5nZXRSb290VmlldygpLnJlZnMuZWRpdG9yLmVsLmZvY3VzKCk7XG5cdFx0XHR0aGlzLl9zY3JvbGxIZWxwZXIucmVzdG9yZVNjcm9sbFRvcCgpO1xuXHRcdFx0Y29uc3QgaXNVcGRhdGVkID0gdGhpcy5fZWRpdG9yLnNlbGVjdGlvbi5yZWZyZXNoKCk7XG5cdFx0XHR0aGlzLl9yZXN0b3JlRm9jdXNUaW1lb3V0ID0gbnVsbDtcblx0XHRcdGlmICghaXNVcGRhdGVkKSB7XG5cdFx0XHRcdHRoaXMuX3Jlc3RvcmVGb2N1cygpO1xuXHRcdFx0fVxuXHRcdH0sIDI1KTtcblx0fVxuXHRwcml2YXRlIF9kcmF3KCkge1xuXHRcdGNvbnN0IGN1cnJlbnRMaW5rUmVmID0gdGhpcy5fbGlua0VkaXRvci5nZXRDdXJyZW50TGlua1JlZigpO1xuXHRcdGNvbnN0IGxpbmtSZWZlciA9IGdldExpbmtSZWZlcigpO1xuXHRcdGxldCBjdXJyZW50TGluayA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRMaW5rQXJyID0gW107XG5cblx0XHRyZXR1cm4gZWwoXG5cdFx0XHRcIi5kaHhfcmljaHRleHRfX292ZXJmbG93LXdyYXBwZXJcIixcblx0XHRcdHtcblx0XHRcdFx0X2hvb2tzOiB0aGlzLmNvbmZpZy5tb2RlID09PSBcImRvY3VtZW50XCIgJiYge1xuXHRcdFx0XHRcdGRpZEluc2VydDogbm9kZSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zY3JvbGxIZWxwZXIgPSBjcmVhdGVTY3JvbGxIZWxwZXIobm9kZS5lbCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHRbXG5cdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFwiLmRoeF9yaWNodGV4dF9fZWRpdG9yLmRoeF9yaWNodGV4dC1lZGl0b3JcIixcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRkaHhfd2lkZ2V0X2lkOiB0aGlzLl91aWQsXG5cdFx0XHRcdFx0XHRfcmVmOiBcImVkaXRvclwiLFxuXHRcdFx0XHRcdFx0Y29udGVudEVkaXRhYmxlOiBcInRydWVcIixcblx0XHRcdFx0XHRcdHJvbGU6IFwidGV4dGJveFwiLFxuXHRcdFx0XHRcdFx0XCJkYXRhLWdyYW1tXCI6IFwiZmFsc2VcIixcblx0XHRcdFx0XHRcdHNwZWxsY2hlY2s6IFwiZmFsc2VcIixcblx0XHRcdFx0XHRcdF9ob29rczogdGhpcy5jb25maWcubW9kZSAhPT0gXCJkb2N1bWVudFwiICYmIHtcblx0XHRcdFx0XHRcdFx0ZGlkSW5zZXJ0OiBub2RlID0+IHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zY3JvbGxIZWxwZXIgPSBjcmVhdGVTY3JvbGxIZWxwZXIobm9kZS5lbCk7XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Li4udGhpcy5faGFuZGxlcnMsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0aGlzLl9lZGl0b3IuYmxvY2tzLm1hcCgoYmxvY2ssIGJsb2NrSW5kZXgpID0+IHtcblx0XHRcdFx0XHRcdGlmIChjdXJyZW50TGlua0Fyci5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdFx0Y3VycmVudExpbmtBcnIgPSBbXTtcblx0XHRcdFx0XHRcdFx0Y3VycmVudExpbmsgPSBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIGJsb2NrcXVvdGVXcmFwcGVyKGJsb2NrLnN0eWxlLCBibG9ja0luZGV4KShcblx0XHRcdFx0XHRcdFx0YmxvY2tTdHlsZVRvVGFnKGJsb2NrLnN0eWxlKSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdHN0eWxlOiBjYWxjQmxvY2tTdHlsZShibG9jay5zdHlsZSksXG5cdFx0XHRcdFx0XHRcdFx0ZGh4X29mZnNldDogYmxvY2tJbmRleCxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0YmxvY2sudGV4dE5vZGVzLm1hcCgodGV4dE5vZGUsIHRleHRJbmRleCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGhhc2ggPSBnZXRUZXh0SGFzaChibG9ja0luZGV4LCB0ZXh0SW5kZXgpO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGlzTGFzdEJsb2NrTm9kZSA9IHRleHRJbmRleCA9PT0gYmxvY2sudGV4dE5vZGVzLmxlbmd0aCAtIDE7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAodGV4dE5vZGUuc3R5bGUubGluaykge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGN1cnJlbnRMaW5rICE9PSB0ZXh0Tm9kZS5zdHlsZS5saW5rKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRMaW5rQXJyID0gW1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3JlbmRlclRleHROb2RlKHRleHROb2RlLCBoYXNoLCBpc0xhc3RCbG9ja05vZGUpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50TGluayA9IHRleHROb2RlLnN0eWxlLmxpbms7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGxpbmtSZWYgPSBsaW5rUmVmZXIoKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZWwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCJhXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aHJlZjogdGV4dE5vZGUuc3R5bGUubGluayxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzOiBsaW5rUmVmID09PSBjdXJyZW50TGlua1JlZiA/IFwiZGh4LS1saW5rX2VkaXRlZFwiIDogXCJcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdF9yZWY6IGxpbmtSZWYsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50TGlua0FyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudExpbmtBcnIucHVzaChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLl9yZW5kZXJUZXh0Tm9kZSh0ZXh0Tm9kZSwgaGFzaCwgaXNMYXN0QmxvY2tOb2RlKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRMaW5rID0gdGV4dE5vZGUuc3R5bGUubGluaztcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fcmVuZGVyVGV4dE5vZGUodGV4dE5vZGUsIGhhc2gsIGlzTGFzdEJsb2NrTm9kZSk7XG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdCksXG5cdFx0XHRdXG5cdFx0KTtcblx0fVxuXHRwcml2YXRlIF9yZW5kZXJUZXh0Tm9kZSh0ZXh0Tm9kZTogVGV4dE5vZGUsIGhhc2g6IHN0cmluZywgaXNMYXN0QmxvY2tOb2RlOiBib29sZWFuKSB7XG5cdFx0Y29uc3QgdGV4dCA9IHRleHROb2RlLnRleHQ7XG5cdFx0Y29uc3QgbGFzdFN5bWJvbElzR2FwID0gdGV4dC5lbmRzV2l0aChcIlxcblwiKSAmJiBpc0xhc3RCbG9ja05vZGU7XG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCJzcGFuXCIsXG5cdFx0XHR7XG5cdFx0XHRcdF9yZWY6IGhhc2gsXG5cdFx0XHRcdGRoeF9vZmZzZXQ6IGhhc2gsXG5cdFx0XHRcdHN0eWxlOiBjYWxjVGV4dE5vZGVTdHlsZSh0ZXh0Tm9kZS5zdHlsZSksXG5cdFx0XHR9LFxuXHRcdFx0dGV4dC5sZW5ndGggPT09IDAgPyBbZWwoXCJiclwiKV0gOiBsYXN0U3ltYm9sSXNHYXAgPyBbdGV4dCArIFwiXFxuXCJdIDogdGV4dFxuXHRcdCk7XG5cdH1cbn1cbiIsImltcG9ydCB7IGxvY2F0ZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSBcIi4vaGVscGVycy9vdGhlclwiO1xuaW1wb3J0IHsgc3RhdGVGcm9tRG9tIH0gZnJvbSBcIi4vaGVscGVycy9zZWxlY3Rpb25cIjtcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gXCIuL21vZGVscy9FZGl0b3JcIjtcbmltcG9ydCB7IElSaWNoVGV4dEV2ZW50U3lzdGVtLCBJU2VsZWN0aW9uUG9zaXRpb24sIElTZWxlY3Rpb25TdGF0ZSwgUmljaFRleHRFdmVudHMgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG50eXBlIENvbXBhY3RSYW5nZSA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblxuZnVuY3Rpb24gZ2V0UG9zaXRpb25Gcm9tUmFuZ2UocmFuZ2UpOiBJU2VsZWN0aW9uUG9zaXRpb24ge1xuXHRjb25zdCBwb3M6IElTZWxlY3Rpb25Qb3NpdGlvbiA9IHt9O1xuXHRsZXQgcmVjdCA9IHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRpZiAocmVjdC5oZWlnaHQgPT09IDApIHtcblx0XHRyZWN0ID0gcmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKVswXTtcblx0fVxuXHRwb3MueFN0YXJ0ID0gcmVjdC5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0O1xuXHRwb3MueVN0YXJ0ID0gcmVjdC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cdHJhbmdlLmNvbGxhcHNlKGZhbHNlKTtcblx0cmVjdCA9IHJhbmdlLmdldENsaWVudFJlY3RzKClbMF07XG5cdHBvcy54RW5kID0gcmVjdC5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0O1xuXHRwb3MueUVuZCA9IHJlY3QudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRyZXR1cm4gcG9zO1xufVxuZXhwb3J0IGNsYXNzIFNlbGVjdGlvbkhlbHBlciB7XG5cdHByaXZhdGUgX3VpZDogc3RyaW5nO1xuXG5cdHByaXZhdGUgX2V2ZW50czogSVJpY2hUZXh0RXZlbnRTeXN0ZW07XG5cdHByaXZhdGUgX3N0YXRlOiBJU2VsZWN0aW9uU3RhdGU7XG5cblx0cHJpdmF0ZSBfd2FpdFVwZGF0ZTogYm9vbGVhbjtcblxuXHRwcml2YXRlIF9lZGl0b3I6IEVkaXRvcjtcblx0cHJpdmF0ZSBfaWdub3JlU2VsZWN0aW9uOiBib29sZWFuO1xuXHRwcml2YXRlIF9pZ25vcmVTZWxlY3Rpb25UaW1lb3V0OiBhbnk7XG5cblx0cHJpdmF0ZSBfc2VsZWN0ZWRUZXh0OiBzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IoZWRpdG9yLCB1aWQsIGV2ZW50cykge1xuXHRcdHRoaXMuX2V2ZW50cyA9IGV2ZW50cztcblx0XHR0aGlzLl91aWQgPSB1aWQ7XG5cdFx0dGhpcy5fZWRpdG9yID0gZWRpdG9yO1xuXHRcdHRoaXMuY2xlYXIoKTtcblxuXHRcdHRoaXMuX2luaXRFdmVudHMoKTtcblx0fVxuXHRjbGVhcigpIHtcblx0XHR0aGlzLl9zdGF0ZSA9IHtcblx0XHRcdHJhbmdlOiBmYWxzZSxcblx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0YmxvY2tJbmRleDogMCxcblx0XHRcdFx0dGV4dEluZGV4OiAwLFxuXHRcdFx0XHRvZmZzZXQ6IDAsXG5cdFx0XHR9LFxuXHRcdH07XG5cdFx0dGhpcy5fd2FpdFVwZGF0ZSA9IHRydWU7XG5cdH1cblx0c2V0KHN0YXRlOiBJU2VsZWN0aW9uU3RhdGUpIHtcblx0XHR0aGlzLl9zdGF0ZSA9IHN0YXRlO1xuXHRcdHRoaXMuX3dhaXRVcGRhdGUgPSB0cnVlO1xuXHR9XG5cdGdldCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fc3RhdGU7XG5cdH1cblx0Z2V0Q29tcGFjdCgpOiBDb21wYWN0UmFuZ2VbXSB7XG5cdFx0Y29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcblx0XHRjb25zdCBjb21wYWN0ID0gW1tzdGF0ZS5sZWZ0LmJsb2NrSW5kZXgsIHN0YXRlLmxlZnQudGV4dEluZGV4LCBzdGF0ZS5sZWZ0Lm9mZnNldF0gYXMgQ29tcGFjdFJhbmdlXTtcblx0XHRpZiAodGhpcy5fc3RhdGUucmFuZ2UpIHtcblx0XHRcdGNvbXBhY3QucHVzaChbc3RhdGUucmlnaHQuYmxvY2tJbmRleCwgc3RhdGUucmlnaHQudGV4dEluZGV4LCBzdGF0ZS5yaWdodC5vZmZzZXRdIGFzIENvbXBhY3RSYW5nZSk7XG5cdFx0fVxuXHRcdHJldHVybiBjb21wYWN0O1xuXHR9XG5cdHNldENvbXBhY3QoY29tcGFjdDogQ29tcGFjdFJhbmdlW10pIHtcblx0XHRjb25zdCBzdGF0ZTogSVNlbGVjdGlvblN0YXRlID0ge1xuXHRcdFx0bGVmdDoge1xuXHRcdFx0XHRibG9ja0luZGV4OiBjb21wYWN0WzBdWzBdLFxuXHRcdFx0XHR0ZXh0SW5kZXg6IGNvbXBhY3RbMF1bMV0sXG5cdFx0XHRcdG9mZnNldDogY29tcGFjdFswXVsyXSxcblx0XHRcdH0sXG5cdFx0XHRyYW5nZTogY29tcGFjdC5sZW5ndGggPT09IDIsXG5cdFx0fTtcblx0XHRpZiAoc3RhdGUucmFuZ2UpIHtcblx0XHRcdHN0YXRlLnJpZ2h0ID0ge1xuXHRcdFx0XHRibG9ja0luZGV4OiBjb21wYWN0WzFdWzBdLFxuXHRcdFx0XHR0ZXh0SW5kZXg6IGNvbXBhY3RbMV1bMV0sXG5cdFx0XHRcdG9mZnNldDogY29tcGFjdFsxXVsyXSxcblx0XHRcdH07XG5cdFx0fVxuXHRcdHRoaXMuc2V0KHN0YXRlKTtcblx0fVxuXHRnZXRQb3NpdGlvbihzZWxlY3Rpb246IElTZWxlY3Rpb25TdGF0ZSk6IFByb21pc2U8YW55PiB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJlcyA9PiB7XG5cdFx0XHRpZiAoIXRoaXMuX3dhaXRVcGRhdGUpIHtcblx0XHRcdFx0Y29uc3QgcmFuZ2UgPSB0aGlzLl9jcmVhdGVSYW5nZShzZWxlY3Rpb24pO1xuXHRcdFx0XHRyZXMoZ2V0UG9zaXRpb25Gcm9tUmFuZ2UocmFuZ2UpKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGN0eCA9IG5ldyBEYXRlKCk7XG5cdFx0XHR0aGlzLl9ldmVudHMub24oXG5cdFx0XHRcdFJpY2hUZXh0RXZlbnRzLnNlbGVjdGlvblJlZnJlc2gsXG5cdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHR0aGlzLl9ldmVudHMuZGV0YWNoKFJpY2hUZXh0RXZlbnRzLnNlbGVjdGlvblJlZnJlc2gsIGN0eCk7XG5cdFx0XHRcdFx0Y29uc3QgcmFuZ2UgPSB0aGlzLl9jcmVhdGVSYW5nZShzZWxlY3Rpb24pO1xuXHRcdFx0XHRcdHJlcyhnZXRQb3NpdGlvbkZyb21SYW5nZShyYW5nZSkpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRjdHhcblx0XHRcdCk7XG5cdFx0fSk7XG5cdH1cblx0ZGVzdHJ1Y3RvcigpIHtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHRoaXMuX3NlbGVjdGlvbkNoYW5nZSk7XG5cdH1cblx0aXNBY3RpdmUoKSB7XG5cdFx0Y29uc3QgeyBhbmNob3JOb2RlIH0gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cdFx0cmV0dXJuIGxvY2F0ZShhbmNob3JOb2RlIGFzIEhUTUxFbGVtZW50LCBcImRoeF93aWRnZXRfaWRcIikgPT09IHRoaXMuX3VpZDtcblx0fVxuXHRpc0Z1bGwoKTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgeyBsZWZ0LCByaWdodCwgcmFuZ2UgfSA9IHRoaXMuX3N0YXRlO1xuXHRcdGlmICghcmFuZ2UpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Y29uc3QgbGFzdCA9IHRoaXMuX2VkaXRvci5ibG9ja3MubGVuZ3RoIC0gMTtcblx0XHRjb25zdCBlbmQgPSB0aGlzLl9lZGl0b3IuYmxvY2tzW2xhc3RdLmdldEJsb2NrRW5kKCk7XG5cdFx0cmV0dXJuIChcblx0XHRcdGxlZnQuYmxvY2tJbmRleCA9PT0gMCAmJlxuXHRcdFx0bGVmdC50ZXh0SW5kZXggPT09IDAgJiZcblx0XHRcdGxlZnQub2Zmc2V0ID09PSAwICYmXG5cdFx0XHRyaWdodC5ibG9ja0luZGV4ID09PSBsYXN0ICYmXG5cdFx0XHRyaWdodC50ZXh0SW5kZXggPT09IGVuZC50ZXh0SW5kZXggJiZcblx0XHRcdHJpZ2h0Lm9mZnNldCA9PT0gZW5kLm9mZnNldFxuXHRcdCk7XG5cdH1cblx0dXBkYXRlKCkge1xuXHRcdGlmICghdGhpcy5fd2FpdFVwZGF0ZSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucmVmcmVzaCgpO1xuXHR9XG5cdGdldFNlbGVjdGVkVGV4dCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VsZWN0ZWRUZXh0O1xuXHR9XG5cdHNlbGVjdEFsbCgpIHtcblx0XHQvLyBzaWxlbnQgc2VsZWN0XG5cdFx0Y29uc3QgYmxvY2tzID0gdGhpcy5fZWRpdG9yLmJsb2Nrcztcblx0XHR0aGlzLl9zdGF0ZSA9IHtcblx0XHRcdHJhbmdlOiB0cnVlLFxuXHRcdFx0bGVmdDoge1xuXHRcdFx0XHRibG9ja0luZGV4OiAwLFxuXHRcdFx0XHR0ZXh0SW5kZXg6IDAsXG5cdFx0XHRcdG9mZnNldDogMCxcblx0XHRcdH0sXG5cdFx0XHRyaWdodDoge1xuXHRcdFx0XHRibG9ja0luZGV4OiBibG9ja3MubGVuZ3RoIC0gMSxcblx0XHRcdFx0Li4uYmxvY2tzW2Jsb2Nrcy5sZW5ndGggLSAxXS5nZXRCbG9ja0VuZCgpLFxuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG5cdHJlZnJlc2goKTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgeyBsZWZ0LCByaWdodCwgcmFuZ2UgfSA9IHRoaXMuX3N0YXRlO1xuXG5cdFx0Y29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuXHRcdGlmICghc2VsZWN0aW9uKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9pZ25vcmVTZWxlY3Rpb25UaW1lb3V0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy5faWdub3JlU2VsZWN0aW9uVGltZW91dCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5faWdub3JlU2VsZWN0aW9uID0gdHJ1ZTtcblx0XHR0aGlzLl9pZ25vcmVTZWxlY3Rpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0aGlzLl9pZ25vcmVTZWxlY3Rpb24gPSBmYWxzZTtcblx0XHRcdHRoaXMuX2lnbm9yZVNlbGVjdGlvblRpbWVvdXQgPSBudWxsO1xuXHRcdH0sIDUpO1xuXG5cdFx0bGV0IHNlbGVjdGlvblJhbmdlOiBSYW5nZTtcblx0XHRpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPiAwKSB7XG5cdFx0XHRzZWxlY3Rpb25SYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuXHRcdFx0c2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzZWxlY3Rpb25SYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3RhcnROb2RlID0gdGhpcy5fZWRpdG9yLmdldFRleHRFbGVtZW50KGxlZnQuYmxvY2tJbmRleCwgbGVmdC50ZXh0SW5kZXgpO1xuXHRcdGlmICghc3RhcnROb2RlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGxldCBlbmROb2RlO1xuXG5cdFx0c2VsZWN0aW9uUmFuZ2Uuc2V0U3RhcnQoc3RhcnROb2RlLCBNYXRoLm1pbihsZWZ0Lm9mZnNldCwgc3RhcnROb2RlLmxlbmd0aCkpO1xuXHRcdGlmIChyYW5nZSkge1xuXHRcdFx0ZW5kTm9kZSA9IHRoaXMuX2VkaXRvci5nZXRUZXh0RWxlbWVudChyaWdodC5ibG9ja0luZGV4LCByaWdodC50ZXh0SW5kZXgpO1xuXHRcdFx0aWYgKCFlbmROb2RlKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHNlbGVjdGlvblJhbmdlLnNldEVuZChlbmROb2RlLCBNYXRoLm1pbihyaWdodC5vZmZzZXQsIGVuZE5vZGUubGVuZ3RoKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNlbGVjdGlvblJhbmdlLnNldEVuZChzdGFydE5vZGUsIE1hdGgubWluKGxlZnQub2Zmc2V0LCBzdGFydE5vZGUubGVuZ3RoKSk7XG5cdFx0fVxuXG5cdFx0c2VsZWN0aW9uLmFkZFJhbmdlKHNlbGVjdGlvblJhbmdlKTtcblxuXHRcdHRoaXMuX3dhaXRVcGRhdGUgPSBmYWxzZTtcblx0XHR0aGlzLl9ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5zZWxlY3Rpb25SZWZyZXNoLCBbXSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cHJpdmF0ZSBfaW5pdEV2ZW50cygpIHtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHRoaXMuX3NlbGVjdGlvbkNoYW5nZSk7XG5cdH1cblx0cHJpdmF0ZSBfY3JlYXRlUmFuZ2Uoc2VsZWN0aW9uOiBJU2VsZWN0aW9uU3RhdGUpOiBSYW5nZSB7XG5cdFx0Y29uc3QgeyBsZWZ0LCByaWdodCB9ID0gc2VsZWN0aW9uO1xuXHRcdGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcblx0XHRjb25zdCBzdGFydE5vZGUgPSB0aGlzLl9lZGl0b3IuZ2V0VGV4dEVsZW1lbnQobGVmdC5ibG9ja0luZGV4LCBsZWZ0LnRleHRJbmRleCk7XG5cdFx0cmFuZ2Uuc2V0U3RhcnQoc3RhcnROb2RlLCBsZWZ0Lm9mZnNldCk7XG5cdFx0aWYgKHNlbGVjdGlvbi5yYW5nZSkge1xuXHRcdFx0Y29uc3QgZW5kTm9kZSA9IHRoaXMuX2VkaXRvci5nZXRUZXh0RWxlbWVudChyaWdodC5ibG9ja0luZGV4LCByaWdodC50ZXh0SW5kZXgpO1xuXHRcdFx0cmFuZ2Uuc2V0RW5kKGVuZE5vZGUsIHJpZ2h0Lm9mZnNldCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJhbmdlLnNldEVuZChzdGFydE5vZGUsIGxlZnQub2Zmc2V0KTtcblx0XHR9XG5cdFx0cmV0dXJuIHJhbmdlO1xuXHR9XG5cdHByaXZhdGUgX3NlbGVjdGlvbkNoYW5nZSA9ICgpID0+IHtcblx0XHRjb25zdCBpc0FjdGl2ZSA9IHRoaXMuaXNBY3RpdmUoKTtcblx0XHRpZiAoaXNBY3RpdmUpIHtcblx0XHRcdHRoaXMuX3NlbGVjdGVkVGV4dCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpO1xuXHRcdFx0aWYgKHRoaXMuX2lnbm9yZVNlbGVjdGlvbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBzdGF0ZSA9IHN0YXRlRnJvbURvbSh0aGlzLl9lZGl0b3IpO1xuXHRcdFx0aWYgKGlzRXF1YWwoc3RhdGUsIHRoaXMuX3N0YXRlLCB0cnVlKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zdGF0ZSA9IHN0YXRlO1xuXHRcdFx0dGhpcy5fZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuc2VsZWN0aW9uQ2hhbmdlLCBbc3RhdGVdKTtcblx0XHR9XG5cdH07XG59XG4iLCJpbXBvcnQgeyB0ZXh0Q29sb3IsIHRleHRTZWxlY3RDb2xvciB9IGZyb20gXCIuL2hlbHBlcnMvb3RoZXJcIjtcbmltcG9ydCBsb2NhbGUgZnJvbSBcIi4vbG9jYWxlcy9lblwiO1xuaW1wb3J0IHsgSVN0eWxlLCBNb2RpZmllciwgUlRFVG9vbGJhckJsb2NrIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IGZvbnRTaXplcyA9IHtcblx0XCIxMnB4XCI6IHRydWUsXG5cdFwiMTRweFwiOiB0cnVlLFxuXHRcIjE2cHhcIjogdHJ1ZSxcblx0XCIxOHB4XCI6IHRydWUsXG5cdFwiMjBweFwiOiB0cnVlLFxuXHRcIjI0cHhcIjogdHJ1ZSxcblx0XCIyOHB4XCI6IHRydWUsXG5cdFwiMzJweFwiOiB0cnVlLFxuXHRcIjM2cHhcIjogdHJ1ZSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRvb2xiYXJGb250U2l6ZXMoKSB7XG5cdGNvbnN0IHJlcyA9IFtdO1xuXHRmb3IgKGNvbnN0IGZvbnRTaXplIGluIGZvbnRTaXplcykge1xuXHRcdGNvbnN0IHZhbHVlID0gcGFyc2VJbnQoZm9udFNpemUsIDEwKTtcblx0XHRyZXMucHVzaCh7XG5cdFx0XHRpZDogXCJmb250LXNpemUtXCIgKyB2YWx1ZSxcblx0XHRcdHZhbHVlOiBmb250U2l6ZSxcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgY29uc3QgZm9udHMgPSB7XG5cdFJvYm90bzogdHJ1ZSxcblx0QXJpYWw6IHRydWUsXG5cdEdlb3JnaWE6IHRydWUsXG5cdFRhaG9tYTogdHJ1ZSxcblx0XCJUaW1lcyBOZXcgUm9tYW5cIjogdHJ1ZSxcblx0VmVyZGFuYTogdHJ1ZSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRvb2xiYXJGb250cygpIHtcblx0Y29uc3QgcmVzID0gW107XG5cdGZvciAoY29uc3QgZm9udCBpbiBmb250cykge1xuXHRcdHJlcy5wdXNoKHtcblx0XHRcdGlkOiBcImZvbnQtXCIgKyBmb250LFxuXHRcdFx0dmFsdWU6IGZvbnQsXG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIHJlcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb29sYmFyRGF0YSh0b29sYmFyQmxvY2tzOiBSVEVUb29sYmFyQmxvY2tbXSwgZGVmYXVsdFN0eWxlOiBJU3R5bGUpIHtcblx0Y29uc3QgYmxvY2tzID0ge1xuXHRcdFtSVEVUb29sYmFyQmxvY2sudW5kb106IFtcblx0XHRcdHtcblx0XHRcdFx0aWQ6IFwidW5kb1wiLFxuXHRcdFx0XHR0b29sdGlwOiBsb2NhbGUudW5kbyxcblx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0dmlldzogXCJsaW5rXCIsXG5cdFx0XHRcdGNvbG9yOiBcInNlY29uZGFyeVwiLFxuXHRcdFx0XHRpY29uOiBcImR4aS11bmRvXCIsXG5cdFx0XHRcdG11bHRpQ2xpY2s6IHRydWUsXG5cdFx0XHRcdGRpc2FibGVkOiB0cnVlLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aWQ6IFwicmVkb1wiLFxuXHRcdFx0XHR0b29sdGlwOiBsb2NhbGUucmVkbyxcblx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0dmlldzogXCJsaW5rXCIsXG5cdFx0XHRcdGNvbG9yOiBcInNlY29uZGFyeVwiLFxuXHRcdFx0XHRpY29uOiBcImR4aS1yZWRvXCIsXG5cdFx0XHRcdG11bHRpQ2xpY2s6IHRydWUsXG5cdFx0XHRcdGRpc2FibGVkOiB0cnVlLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdFtSVEVUb29sYmFyQmxvY2suc3R5bGVdOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGlkOiBNb2RpZmllci5mb250RmFtaWx5LFxuXHRcdFx0XHR2YWx1ZTogZGVmYXVsdFN0eWxlW01vZGlmaWVyLmZvbnRGYW1pbHldLFxuXHRcdFx0XHR0b29sdGlwOiBsb2NhbGUuc2VsZWN0Rm9udEZhbWlseSxcblx0XHRcdFx0Y3NzOiBcImRoeF9yaWNodGV4dF9fZHJvcGRvd25cIixcblx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0dmlldzogXCJsaW5rXCIsXG5cdFx0XHRcdGNvbG9yOiBcInNlY29uZGFyeVwiLFxuXHRcdFx0XHRzaXplOiBcInNtYWxsXCIsXG5cdFx0XHRcdGl0ZW1zOiBjcmVhdGVUb29sYmFyRm9udHMoKSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGlkOiBNb2RpZmllci5mb250U2l6ZSxcblx0XHRcdFx0dmFsdWU6IGRlZmF1bHRTdHlsZVtNb2RpZmllci5mb250U2l6ZV0sXG5cdFx0XHRcdHRvb2x0aXA6IGxvY2FsZS5zZWxlY3RGb250U2l6ZSxcblx0XHRcdFx0Y3NzOiBcImRoeF9yaWNodGV4dF9fZHJvcGRvd25cIixcblx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0dmlldzogXCJsaW5rXCIsXG5cdFx0XHRcdGNvbG9yOiBcInNlY29uZGFyeVwiLFxuXHRcdFx0XHRzaXplOiBcInNtYWxsXCIsXG5cdFx0XHRcdGl0ZW1zOiBjcmVhdGVUb29sYmFyRm9udFNpemVzKCksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpZDogTW9kaWZpZXIuc3R5bGUsXG5cdFx0XHRcdHRvb2x0aXA6IGxvY2FsZS5zZWxlY3RGb3JtYXQsXG5cdFx0XHRcdHZhbHVlOiBsb2NhbGVbZGVmYXVsdFN0eWxlW01vZGlmaWVyLnN0eWxlXV0sXG5cdFx0XHRcdGNzczogXCJkaHhfcmljaHRleHRfX2Ryb3Bkb3duXCIsXG5cdFx0XHRcdHR5cGU6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdHZpZXc6IFwibGlua1wiLFxuXHRcdFx0XHRjb2xvcjogXCJzZWNvbmRhcnlcIixcblx0XHRcdFx0c2l6ZTogXCJzbWFsbFwiLFxuXHRcdFx0XHRpdGVtczogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlkOiBcInN0eWxlLXBcIixcblx0XHRcdFx0XHRcdHZhbHVlOiBsb2NhbGUucCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlkOiBcInN0eWxlLWgxXCIsXG5cdFx0XHRcdFx0XHRjc3M6IFwiZGh4X3JpY2h0ZXh0X19tZW51LXRleHQtLWgxXCIsXG5cdFx0XHRcdFx0XHR2YWx1ZTogbG9jYWxlLmgxLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWQ6IFwic3R5bGUtaDJcIixcblx0XHRcdFx0XHRcdGNzczogXCJkaHhfcmljaHRleHRfX21lbnUtdGV4dC0taDJcIixcblx0XHRcdFx0XHRcdHZhbHVlOiBsb2NhbGUuaDIsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRpZDogXCJzdHlsZS1oM1wiLFxuXHRcdFx0XHRcdFx0Y3NzOiBcImRoeF9yaWNodGV4dF9fbWVudS10ZXh0LS1oM1wiLFxuXHRcdFx0XHRcdFx0dmFsdWU6IGxvY2FsZS5oMyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlkOiBcInN0eWxlLWg0XCIsXG5cdFx0XHRcdFx0XHRjc3M6IFwiZGh4X3JpY2h0ZXh0X19tZW51LXRleHQtLWg0XCIsXG5cdFx0XHRcdFx0XHR2YWx1ZTogbG9jYWxlLmg0LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWQ6IFwic3R5bGUtaDVcIixcblx0XHRcdFx0XHRcdGNzczogXCJkaHhfcmljaHRleHRfX21lbnUtdGV4dC0taDVcIixcblx0XHRcdFx0XHRcdHZhbHVlOiBsb2NhbGUuaDUsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRpZDogXCJzdHlsZS1oNlwiLFxuXHRcdFx0XHRcdFx0Y3NzOiBcImRoeF9yaWNodGV4dF9fbWVudS10ZXh0LS1oNlwiLFxuXHRcdFx0XHRcdFx0dmFsdWU6IGxvY2FsZS5oNixcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aWQ6IE1vZGlmaWVyLmJsb2NrcXVvdGUsXG5cdFx0XHRcdHRvb2x0aXA6IGxvY2FsZS5ibG9ja3F1b3RlLFxuXHRcdFx0XHRhY3RpdmU6IGRlZmF1bHRTdHlsZVtNb2RpZmllci5ibG9ja3F1b3RlXSxcblx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0dmlldzogXCJsaW5rXCIsXG5cdFx0XHRcdGNvbG9yOiBcInNlY29uZGFyeVwiLFxuXHRcdFx0XHRzaXplOiBcInNtYWxsXCIsXG5cdFx0XHRcdGljb246IFwiZHhpLWZvcm1hdC1xdW90ZS1vcGVuXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0W1JURVRvb2xiYXJCbG9jay5jb2xvcl06IFtcblx0XHRcdHtcblx0XHRcdFx0aWQ6IE1vZGlmaWVyLmNvbG9yLFxuXHRcdFx0XHR0b29sdGlwOiBsb2NhbGUuc2VsZWN0VGV4dENvbG9yLFxuXHRcdFx0XHR0eXBlOiBcImN1c3RvbUJ1dHRvblwiLFxuXHRcdFx0XHRjc3M6IFwiZGh4X2J1dHRvbi0tdG9vbGJhciBkaHhfYnV0dG9uLS1jb2xvcl9zZWNvbmRhcnlcIixcblx0XHRcdFx0Y29sb3I6IFwic2Vjb25kYXJ5XCIsXG5cdFx0XHRcdGh0bWw6IHRleHRDb2xvcihkZWZhdWx0U3R5bGVbTW9kaWZpZXIuY29sb3JdKSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGlkOiBNb2RpZmllci5iYWNrZ3JvdW5kLFxuXHRcdFx0XHR0b29sdGlwOiBsb2NhbGUuc2VsZWN0VGV4dEJhY2tncm91bmQsXG5cdFx0XHRcdHR5cGU6IFwiY3VzdG9tQnV0dG9uXCIsXG5cdFx0XHRcdGNzczogXCJkaHhfYnV0dG9uLS10b29sYmFyIGRoeF9idXR0b24tLWNvbG9yX3NlY29uZGFyeVwiLFxuXHRcdFx0XHRjb2xvcjogXCJzZWNvbmRhcnlcIixcblx0XHRcdFx0aHRtbDogdGV4dFNlbGVjdENvbG9yKGRlZmF1bHRTdHlsZVtNb2RpZmllci5iYWNrZ3JvdW5kXSksXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0W1JURVRvb2xiYXJCbG9jay5kZWNvcmF0aW9uXTogW1xuXHRcdFx0e1xuXHRcdFx0XHRpZDogTW9kaWZpZXIuYm9sZCxcblx0XHRcdFx0dG9vbHRpcDogbG9jYWxlLm1hcmtCb2xkLFxuXHRcdFx0XHRpY29uOiBcImR4aS1mb3JtYXQtYm9sZFwiLFxuXHRcdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHR2aWV3OiBcImxpbmtcIixcblx0XHRcdFx0Y29sb3I6IFwic2Vjb25kYXJ5XCIsXG5cdFx0XHRcdGhvdGtleTogXCJjdHJsK2JcIixcblx0XHRcdFx0YWN0aXZlOiBkZWZhdWx0U3R5bGVbTW9kaWZpZXIuYm9sZF0sXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpZDogTW9kaWZpZXIuaXRhbGljLFxuXHRcdFx0XHR0b29sdGlwOiBsb2NhbGUubWFya0l0YWxpYyxcblx0XHRcdFx0aWNvbjogXCJkeGktZm9ybWF0LWl0YWxpY1wiLFxuXHRcdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHR2aWV3OiBcImxpbmtcIixcblx0XHRcdFx0Y29sb3I6IFwic2Vjb25kYXJ5XCIsXG5cdFx0XHRcdGhvdGtleTogXCJjdHJsK2lcIixcblx0XHRcdFx0YWN0aXZlOiBkZWZhdWx0U3R5bGVbTW9kaWZpZXIuaXRhbGljXSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGlkOiBNb2RpZmllci5zdHJpa2UsXG5cdFx0XHRcdHRvb2x0aXA6IGxvY2FsZS5tYXJrU3RyaWtlLFxuXHRcdFx0XHRpY29uOiBcImR4aS1mb3JtYXQtc3RyaWtldGhyb3VnaFwiLFxuXHRcdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHRjb2xvcjogXCJzZWNvbmRhcnlcIixcblx0XHRcdFx0dmlldzogXCJsaW5rXCIsXG5cdFx0XHRcdGFjdGl2ZTogZGVmYXVsdFN0eWxlW01vZGlmaWVyLnN0cmlrZV0sXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpZDogTW9kaWZpZXIudW5kZXJsaW5lLFxuXHRcdFx0XHR0b29sdGlwOiBsb2NhbGUubWFya1VuZGVybGluZSxcblx0XHRcdFx0aWNvbjogXCJkeGktZm9ybWF0LXVuZGVybGluZVwiLFxuXHRcdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHR2aWV3OiBcImxpbmtcIixcblx0XHRcdFx0Y29sb3I6IFwic2Vjb25kYXJ5XCIsXG5cdFx0XHRcdGhvdGtleTogXCJjdHJsK3VcIixcblx0XHRcdFx0YWN0aXZlOiBkZWZhdWx0U3R5bGVbTW9kaWZpZXIudW5kZXJsaW5lXSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRbUlRFVG9vbGJhckJsb2NrLmFsaWduXTogW1xuXHRcdFx0e1xuXHRcdFx0XHRpZDogXCJhbGlnbi1sZWZ0XCIsXG5cdFx0XHRcdHRvb2x0aXA6IGxvY2FsZS5hbGlnbkxlZnQsXG5cdFx0XHRcdHR5cGU6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdHZpZXc6IFwibGlua1wiLFxuXHRcdFx0XHRjb2xvcjogXCJzZWNvbmRhcnlcIixcblx0XHRcdFx0aWNvbjogXCJkeGktZm9ybWF0LWFsaWduLWxlZnRcIixcblx0XHRcdFx0YWN0aXZlOiBkZWZhdWx0U3R5bGVbTW9kaWZpZXIuYWxpZ25dID09PSBcImxlZnRcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGlkOiBcImFsaWduLWNlbnRlclwiLFxuXHRcdFx0XHR0b29sdGlwOiBsb2NhbGUuYWxpZ25DZW50ZXIsXG5cdFx0XHRcdHR5cGU6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdHZpZXc6IFwibGlua1wiLFxuXHRcdFx0XHRjb2xvcjogXCJzZWNvbmRhcnlcIixcblx0XHRcdFx0aWNvbjogXCJkeGktZm9ybWF0LWFsaWduLWNlbnRlclwiLFxuXHRcdFx0XHRhY3RpdmU6IGRlZmF1bHRTdHlsZVtNb2RpZmllci5hbGlnbl0gPT09IFwiY2VudGVyXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpZDogXCJhbGlnbi1yaWdodFwiLFxuXHRcdFx0XHR0b29sdGlwOiBsb2NhbGUuYWxpZ25SaWdodCxcblx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0dmlldzogXCJsaW5rXCIsXG5cdFx0XHRcdGNvbG9yOiBcInNlY29uZGFyeVwiLFxuXHRcdFx0XHRpY29uOiBcImR4aS1mb3JtYXQtYWxpZ24tcmlnaHRcIixcblx0XHRcdFx0YWN0aXZlOiBkZWZhdWx0U3R5bGVbTW9kaWZpZXIuYWxpZ25dID09PSBcInJpZ2h0XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0W1JURVRvb2xiYXJCbG9jay5saW5rXTogW1xuXHRcdFx0e1xuXHRcdFx0XHRpZDogTW9kaWZpZXIubGluayxcblx0XHRcdFx0dG9vbHRpcDogbG9jYWxlLmFkZExpbmssXG5cdFx0XHRcdHR5cGU6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdHZpZXc6IFwibGlua1wiLFxuXHRcdFx0XHRjb2xvcjogXCJzZWNvbmRhcnlcIixcblx0XHRcdFx0aWNvbjogXCJkeGktbGluay12YXJpYW50XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0W1JURVRvb2xiYXJCbG9jay5jbGVhcl06IFtcblx0XHRcdHtcblx0XHRcdFx0aWQ6IFwiY2xlYXItc3R5bGVcIixcblx0XHRcdFx0dG9vbHRpcDogbG9jYWxlLmNsZWFyRm9ybWF0LFxuXHRcdFx0XHR0eXBlOiBcImJ1dHRvblwiLFxuXHRcdFx0XHR2aWV3OiBcImxpbmtcIixcblx0XHRcdFx0Y29sb3I6IFwic2Vjb25kYXJ5XCIsXG5cdFx0XHRcdGljb246IFwiZHhpLWVyYXNlclwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdFtSVEVUb29sYmFyQmxvY2suc3RhdHNdOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGlkOiBcInN0YXRzXCIsXG5cdFx0XHRcdHRvb2x0aXA6IGxvY2FsZS5zdGF0cyxcblx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0dmlldzogXCJsaW5rXCIsXG5cdFx0XHRcdGNvbG9yOiBcInNlY29uZGFyeVwiLFxuXHRcdFx0XHRpY29uOiBcImR4aS1pbmZvcm1hdGlvbi1vdXRsaW5lXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0W1JURVRvb2xiYXJCbG9jay5mdWxsc2NyZWVuXTogW1xuXHRcdFx0e1xuXHRcdFx0XHRpZDogXCJmdWxsc2NyZWVuXCIsXG5cdFx0XHRcdCRmdWxsc2NyZWVuOiBmYWxzZSxcblx0XHRcdFx0dG9vbHRpcDogbG9jYWxlLmZ1bGxzY3JlZW4sXG5cdFx0XHRcdHR5cGU6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdHZpZXc6IFwibGlua1wiLFxuXHRcdFx0XHRjb2xvcjogXCJzZWNvbmRhcnlcIixcblx0XHRcdFx0aWNvbjogXCJkeGktYXJyb3ctZXhwYW5kXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH07XG5cblx0Y29uc3QgcmVzdWx0ID0gdG9vbGJhckJsb2Nrcy5yZWR1Y2UoKGNvbmZpZywgYmxvY2ssIGkpID0+IHtcblx0XHRjb25maWcucHVzaCguLi5ibG9ja3NbYmxvY2tdKTtcblx0XHRpZiAoaSAhPT0gdG9vbGJhckJsb2Nrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRjb25maWcucHVzaCh7IHR5cGU6IFwic2VwYXJhdG9yXCIgfSk7XG5cdFx0fVxuXHRcdHJldHVybiBjb25maWc7XG5cdH0sIFtdKTtcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgY29uc3QgZW1wdHlTdHlsZSA9IHt9O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEJsb2NrcyA9IFtcblx0UlRFVG9vbGJhckJsb2NrLnVuZG8sXG5cdFJURVRvb2xiYXJCbG9jay5zdHlsZSxcblx0UlRFVG9vbGJhckJsb2NrLmRlY29yYXRpb24sXG5cdFJURVRvb2xiYXJCbG9jay5jb2xvcixcblx0UlRFVG9vbGJhckJsb2NrLmFsaWduLFxuXHRSVEVUb29sYmFyQmxvY2subGluayxcbl07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Rm9udFNpemVCeUJsb2NrID0ge1xuXHRwOiBcIjE0cHhcIixcblx0aDE6IFwiMzZweFwiLFxuXHRoMjogXCIzMnB4XCIsXG5cdGgzOiBcIjI4cHhcIixcblx0aDQ6IFwiMjRweFwiLFxuXHRoNTogXCIyMHB4XCIsXG5cdGg2OiBcIjE2cHhcIixcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0RGlmZnJlbnRTdHlsZSA9IHtcblx0W01vZGlmaWVyLmZvbnRTaXplXTogXCJcIixcblx0W01vZGlmaWVyLmZvbnRGYW1pbHldOiBcIlwiLFxuXHRbTW9kaWZpZXIuc3R5bGVdOiBcIlwiLFxuXHRbTW9kaWZpZXIuYm9sZF06IGZhbHNlLFxuXHRbTW9kaWZpZXIudW5kZXJsaW5lXTogZmFsc2UsXG5cdFtNb2RpZmllci5ib2xkXTogZmFsc2UsXG5cdFtNb2RpZmllci5pdGFsaWNdOiBmYWxzZSxcblx0W01vZGlmaWVyLnN0cmlrZV06IGZhbHNlLFxuXHRbTW9kaWZpZXIuY29sb3JdOiBcIiM0YzRjNGNcIixcblx0W01vZGlmaWVyLmJhY2tncm91bmRdOiBcIiNGRkZGRkZcIixcblx0W01vZGlmaWVyLmFsaWduXTogZmFsc2UsXG59O1xuIiwiaW1wb3J0IFwiLi4vLi4vc3R5bGVzL3JpY2h0ZXh0LnNjc3NcIjtcbmV4cG9ydCB7IFJpY2h0ZXh0IH0gZnJvbSBcIi4vUmljaHRleHRcIjtcblxuaW1wb3J0IGxvY2FsZSBmcm9tIFwiLi9sb2NhbGVzL2VuXCI7XG5cbmNvbnN0IHcgPSB3aW5kb3cgYXMgYW55O1xuZXhwb3J0IGNvbnN0IGkxOG46IGFueSA9IHcuZGh4ICYmIHcuZGh4LmkxOG4gPyB3LmRoeC5pMTggOiB7fTtcbmkxOG4uc2V0TG9jYWxlID0gZnVuY3Rpb24oY29tcG9uZW50OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcblx0Y29uc3QgdGFyZ2V0ID0gaTE4bltjb21wb25lbnRdO1xuXHRmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuXHRcdHRhcmdldFtrZXldID0gdmFsdWVba2V5XTtcblx0fVxufTtcbmkxOG4ucmljaHRleHQgPSBpMThuLnJpY2h0ZXh0IHx8IGxvY2FsZTtcbiIsImltcG9ydCB7IEVkaXRvciB9IGZyb20gXCIuLi9tb2RlbHMvRWRpdG9yXCI7XG5pbXBvcnQgeyBzZXJpYWxpemVyIH0gZnJvbSBcIi4vc2VyaWFsaXplclwiO1xuZnVuY3Rpb24gZXZlbnRIVE1MRGF0YShlOiBDbGlwYm9hcmRFdmVudCkge1xuXHRpZiAoIWUuY2xpcGJvYXJkRGF0YSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChlLmNsaXBib2FyZERhdGEudHlwZXMuaW5jbHVkZXMoXCJ0ZXh0L2h0bWxcIikpIHtcblx0XHRyZXR1cm4gZS5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L2h0bWxcIik7XG5cdH1cbn1cbmV4cG9ydCBjbGFzcyBUZXh0QnVmZmVyIHtcblx0cHJpdmF0ZSBfZWRpdG9yOiBFZGl0b3I7XG5cblx0cHJpdmF0ZSBfcmF3VGV4dDogc3RyaW5nO1xuXHRwcml2YXRlIF9lZGl0b3JDb250ZW50OiBhbnk7XG5cblx0Y29uc3RydWN0b3IoZWRpdG9yKSB7XG5cdFx0dGhpcy5fZWRpdG9yID0gZWRpdG9yO1xuXHR9XG5cdGNvcHkoZXZlbnQ6IENsaXBib2FyZEV2ZW50KSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLl9lZGl0b3IuY29weSgpO1xuXHRcdHJldHVybiB0aGlzLl9zZXRCdWZmZXIoZXZlbnQsIHJlc3VsdCk7XG5cdH1cblx0Y3V0KGV2ZW50OiBDbGlwYm9hcmRFdmVudCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5fZWRpdG9yLmN1dCgpO1xuXHRcdHJldHVybiB0aGlzLl9zZXRCdWZmZXIoZXZlbnQsIHJlc3VsdCk7XG5cdH1cblx0cGFzdGUoZXZlbnQ6IENsaXBib2FyZEV2ZW50KSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRsZXQgdGV4dDtcblx0XHRpZiAoZXZlbnQuY2xpcGJvYXJkRGF0YSkge1xuXHRcdFx0dGV4dCA9IGV2ZW50LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRleHQgPSAod2luZG93IGFzIGFueSkuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwidGV4dFwiKTtcblx0XHR9XG5cdFx0aWYgKHRleHQgPT09IHRoaXMuX3Jhd1RleHQpIHtcblx0XHRcdHJldHVybiB0aGlzLl9lZGl0b3IucGFzdGUodGhpcy5fZWRpdG9yQ29udGVudCwgXCJpbm5lclwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgaHRtbERhdGEgPSBldmVudEhUTUxEYXRhKGV2ZW50KTtcblx0XHRcdGlmIChodG1sRGF0YSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fZWRpdG9yLnBhc3RlKGh0bWxEYXRhLCBcImh0bWxcIik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5fZWRpdG9yLnBhc3RlKHRleHQsIFwidGV4dFwiKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIF9zZXRCdWZmZXIoZXZlbnQsIHJlc3VsdCkge1xuXHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHRoaXMuX3Jhd1RleHQgPSByZXN1bHQucmF3O1xuXHRcdHRoaXMuX2VkaXRvckNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQuY29udGVudCk7XG5cblx0XHRpZiAoZXZlbnQuY2xpcGJvYXJkRGF0YSkge1xuXHRcdFx0ZXZlbnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dC9wbGFpblwiLCByZXN1bHQucmF3KTtcblx0XHRcdGV2ZW50LmNsaXBib2FyZERhdGEuc2V0RGF0YShcInRleHQvaHRtbFwiLCBzZXJpYWxpemVyKHJlc3VsdC5jb250ZW50KSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCh3aW5kb3cgYXMgYW55KS5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0XCIsIHJlc3VsdC5yYXcpO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufVxuIiwiaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgUmljaFRleHRFdmVudHMgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbkNvbXBvc2l0aW9uRXZlbnRzKGV2ZW50czogSUV2ZW50U3lzdGVtPGFueT4sIGlzQWN0aXZlOiAoKSA9PiBib29sZWFuKTogKCkgPT4gdm9pZCB7XG5cdGNvbnN0IGNvbXBvc2l0aW9uU3RhcnQgPSAoZTogQ29tcG9zaXRpb25FdmVudCkgPT4ge1xuXHRcdGlmIChpc0FjdGl2ZSgpKSB7XG5cdFx0XHRldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5jb21wb3NpdGlvblN0YXJ0KTtcblx0XHR9XG5cdH07XG5cdGNvbnN0IGNvbXBvc2l0aW9uRW5kID0gKGU6IENvbXBvc2l0aW9uRXZlbnQpID0+IHtcblx0XHRpZiAoaXNBY3RpdmUoKSkge1xuXHRcdFx0ZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuY29tcG9zaXRpb25FbmQsIFtlLmRhdGFdKTtcblx0XHR9XG5cdH07XG5cdGNvbnN0IGNvbXBvc2l0aW9uVXBkYXRlID0gKGU6IENvbXBvc2l0aW9uRXZlbnQpID0+IHtcblx0XHRpZiAoaXNBY3RpdmUoKSkge1xuXHRcdFx0ZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuY29tcG9zaXRpb25VcGRhdGUsIFtlLmRhdGFdKTtcblx0XHR9XG5cdH07XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBvc2l0aW9uc3RhcnRcIiwgY29tcG9zaXRpb25TdGFydCk7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb21wb3NpdGlvbmVuZFwiLCBjb21wb3NpdGlvbkVuZCk7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb21wb3NpdGlvbnVwZGF0ZVwiLCBjb21wb3NpdGlvblVwZGF0ZSk7XG5cblx0cmV0dXJuICgpID0+IHtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29tcG9zaXRpb25zdGFydFwiLCBjb21wb3NpdGlvblN0YXJ0KTtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29tcG9zaXRpb25lbmRcIiwgY29tcG9zaXRpb25FbmQpO1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb21wb3NpdGlvbnVwZGF0ZVwiLCBjb21wb3NpdGlvblVwZGF0ZSk7XG5cdH07XG59XG4iLCJpbXBvcnQgeyBjcmVhdGUsIGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgbG9jYXRlTm9kZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQgeyBJSGFuZGxlcnMgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdmlld1wiO1xuaW1wb3J0IHsgUG9zaXRpb24sIHRvb2x0aXAgfSBmcm9tIFwiQGRoeC90cy1tZXNzYWdlXCI7XG5pbXBvcnQgeyBQb3B1cCwgUG9wdXBFdmVudHMgfSBmcm9tIFwiQGRoeC90cy1wb3B1cFwiO1xuaW1wb3J0IHsgS2V5IH0gZnJvbSBcIi4uL2tleWhhbmRsZXJcIjtcbmltcG9ydCBsb2NhbGUgZnJvbSBcIi4uL2xvY2FsZXMvZW5cIjtcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gXCIuLi9tb2RlbHMvRWRpdG9yXCI7XG5pbXBvcnQgeyBBY3Rpb24sIElSaWNoVGV4dEV2ZW50U3lzdGVtLCBNb2RpZmllciwgUmljaFRleHRFdmVudHMgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IGdldFRleHRIYXNoIH0gZnJvbSBcIi4vb3RoZXJcIjtcblxuaW50ZXJmYWNlIElMaW5rRWRpdG9yQ29uZmlnIHtcblx0ZXZlbnRzOiBJUmljaFRleHRFdmVudFN5c3RlbTtcblx0ZWRpdG9yOiBFZGl0b3I7XG5cdGdldFJvb3RWaWV3OiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgTGlua0VkaXRvciBleHRlbmRzIFZpZXcge1xuXHRwcml2YXRlIF9ldmVudHM6IElSaWNoVGV4dEV2ZW50U3lzdGVtO1xuXHRwcml2YXRlIF9lZGl0b3I6IEVkaXRvcjtcblx0cHJpdmF0ZSBfZ2V0UGFyZW50VmlldzogKCkgPT4gYW55O1xuXG5cdHByaXZhdGUgX3BvcHVwOiBQb3B1cDtcblx0cHJpdmF0ZSBfaGFuZGxlcnM6IElIYW5kbGVycztcblxuXHRwcml2YXRlIF9lZGl0TW9kZTogYm9vbGVhbjtcblxuXHRwcml2YXRlIF9pbml0VGV4dDogc3RyaW5nO1xuXG5cdHByaXZhdGUgX2xpbms6IHN0cmluZztcblx0cHJpdmF0ZSBfdGV4dDogc3RyaW5nO1xuXG5cdHByaXZhdGUgX2N1cnJlbnRMaW5rUmVmOiBzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IoY29udGFpbmVyLCBjb25maWc6IElMaW5rRWRpdG9yQ29uZmlnKSB7XG5cdFx0c3VwZXIoY29udGFpbmVyLCBjb25maWcpO1xuXG5cdFx0dGhpcy5fZXZlbnRzID0gY29uZmlnLmV2ZW50cztcblx0XHR0aGlzLl9lZGl0b3IgPSBjb25maWcuZWRpdG9yO1xuXHRcdHRoaXMuX2dldFBhcmVudFZpZXcgPSBjb25maWcuZ2V0Um9vdFZpZXc7XG5cblx0XHR0aGlzLl9wb3B1cCA9IG5ldyBQb3B1cCgpO1xuXG5cdFx0dGhpcy5faW5pdEV2ZW50cygpO1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0b25jbGljazoge1xuXHRcdFx0XHRcIi5kaHhfcmljaHRleHQtbGlua2VkaXRvci0taGFuZGxlcl9hcHBseVwiOiAoKSA9PiB0aGlzLl9hcHBseSgpLFxuXHRcdFx0XHRcIi5kaHhfcmljaHRleHQtbGlua2VkaXRvci0taGFuZGxlcl91bmxpbmssIC5kaHhfcmljaHRleHQtbGlua2VkaXRvci0taGFuZGxlcl91bmxpbmsgKlwiOiAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuYWN0aW9uLCBbXG5cdFx0XHRcdFx0XHRBY3Rpb24udXBkYXRlLFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRtb2RpZmllcjogTW9kaWZpZXIubGluayxcblx0XHRcdFx0XHRcdFx0bW9kaWZpZXJWYWx1ZTogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHRydWUsXG5cdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0dGhpcy5fcG9wdXAuaGlkZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIi5kaHhfcmljaHRleHQtbGlua2VkaXRvci0taGFuZGxlcl9lZGl0LCAuZGh4X3JpY2h0ZXh0LWxpbmtlZGl0b3ItLWhhbmRsZXJfZWRpdCAqXCI6ICgpID0+IHtcblx0XHRcdFx0XHR0aGlzLl9lZGl0TW9kZSA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4gdGhpcy5mb2N1cygpLCAxMCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0b25tb3VzZW92ZXI6IGUgPT4ge1xuXHRcdFx0XHRjb25zdCBub2RlID0gbG9jYXRlTm9kZShlLCBcImRoeF9pZFwiKSBhcyBIVE1MRWxlbWVudDtcblx0XHRcdFx0aWYgKG5vZGUpIHtcblx0XHRcdFx0XHR0b29sdGlwKGxvY2FsZVtub2RlLmdldEF0dHJpYnV0ZShcImRoeF9pZFwiKV0sIHtcblx0XHRcdFx0XHRcdG5vZGUsXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogUG9zaXRpb24uYm90dG9tLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0b25pbnB1dDogZSA9PiB7XG5cdFx0XHRcdGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWU7XG5cdFx0XHRcdGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJsaW5rLWlucHV0XCIpKSB7XG5cdFx0XHRcdFx0aWYgKCF0aGlzLl9saW5rICYmIHZhbHVlKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9saW5rID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICghdmFsdWUpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2xpbmsgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5fbGluayA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl90ZXh0ID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRvbmtleWRvd246IGUgPT4ge1xuXHRcdFx0XHRpZiAoZS53aGljaCA9PT0gS2V5LmVudGVyICYmIHRoaXMuX2xpbmspIHtcblx0XHRcdFx0XHR0aGlzLl9hcHBseSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlLndoaWNoID09PSBLZXkuZXNjKSB7XG5cdFx0XHRcdFx0dGhpcy5fcG9wdXAuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHR0aGlzLm1vdW50KG51bGwsIGNyZWF0ZSh7IHJlbmRlcjogKCkgPT4gdGhpcy5fZHJhdygpIH0pKTtcblxuXHRcdHRoaXMuX3BvcHVwLmF0dGFjaCh0aGlzKTtcblx0fVxuXHRpc1Zpc2libGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3BvcHVwLmlzVmlzaWJsZSgpO1xuXHR9XG5cdHNob3cobm9kZTogSFRNTEVsZW1lbnQsIG1vZGU6IGFueSkge1xuXHRcdHRoaXMuX3BvcHVwLnNob3cobm9kZSwgeyBtb2RlLCBjZW50ZXJpbmc6IHRydWUgfSk7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB0aGlzLmZvY3VzKCksIDEwKTtcblx0fVxuXHRoaWRlKCkge1xuXHRcdHRoaXMuX3BvcHVwLmhpZGUoKTtcblx0fVxuXHRnZXQoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGxpbms6IHRoaXMuX2xpbmssXG5cdFx0XHR0ZXh0OiB0aGlzLl90ZXh0LFxuXHRcdH07XG5cdH1cblx0Z2V0Q3VycmVudExpbmtSZWYoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnRMaW5rUmVmO1xuXHR9XG5cdHNldChsaW5rOiBzdHJpbmcsIHRleHQ6IHN0cmluZykge1xuXHRcdHRoaXMuX2VkaXRNb2RlID0gIWxpbms7XG5cblx0XHR0aGlzLl9saW5rID0gbGluayB8fCBcIlwiO1xuXHRcdHRoaXMuX3RleHQgPSB0ZXh0IHx8IFwiXCI7XG5cdFx0dGhpcy5faW5pdFRleHQgPSB0aGlzLl90ZXh0O1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRmb2N1cygpIHtcblx0XHRjb25zdCByZWZzID0gdGhpcy5nZXRSb290VmlldygpLnJlZnM7XG5cdFx0aWYgKHJlZnMgJiYgcmVmcy5saW5rSW5wdXQpIHtcblx0XHRcdHJlZnMubGlua0lucHV0LmVsLmZvY3VzKCk7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX2Rlc3Ryb3lDdXJyZW50TGlua1JlZigpIHtcblx0XHRpZiAodGhpcy5fY3VycmVudExpbmtSZWYpIHtcblx0XHRcdHRoaXMuX2dldFBhcmVudFZpZXcoKS5yZWZzW3RoaXMuX2N1cnJlbnRMaW5rUmVmXS5wYXRjaCh7IGNsYXNzOiBcIlwiIH0pO1xuXHRcdFx0dGhpcy5fY3VycmVudExpbmtSZWYgPSBudWxsO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9pbml0RXZlbnRzKCkge1xuXHRcdHRoaXMuX3BvcHVwLmV2ZW50cy5vbihcblx0XHRcdFBvcHVwRXZlbnRzLmJlZm9yZUhpZGUsXG5cdFx0XHQob3V0ZXIsIGUpID0+ICFvdXRlciB8fCAhdGhpcy5fZ2V0UGFyZW50VmlldygpLm5vZGUuZWwuY29udGFpbnMoZS50YXJnZXQpXG5cdFx0KTtcblx0XHR0aGlzLl9wb3B1cC5ldmVudHMub24oUG9wdXBFdmVudHMuYWZ0ZXJIaWRlLCAoKSA9PiB0aGlzLl9kZXN0cm95Q3VycmVudExpbmtSZWYoKSk7XG5cdFx0dGhpcy5fcG9wdXAuZXZlbnRzLm9uKFBvcHVwRXZlbnRzLmFmdGVyU2hvdywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgbGVmdCA9IHRoaXMuX2VkaXRvci5zZWxlY3Rpb24uZ2V0KCkubGVmdDtcblx0XHRcdGNvbnN0IGtleSA9IGdldFRleHRIYXNoKGxlZnQuYmxvY2tJbmRleCwgbGVmdC50ZXh0SW5kZXgpO1xuXHRcdFx0Y29uc3QgcGFyZW50VmlldyA9IHRoaXMuX2dldFBhcmVudFZpZXcoKTtcblx0XHRcdGNvbnN0IHZub2RlID0gcGFyZW50Vmlldy5yZWZzW2tleV07XG5cdFx0XHR2bm9kZS5wYXJlbnQucGF0Y2goeyBjbGFzczogXCJkaHgtLWxpbmtfZWRpdGVkXCIgfSk7XG5cdFx0XHR0aGlzLl9jdXJyZW50TGlua1JlZiA9IHZub2RlLnBhcmVudC5yZWY7XG5cdFx0fSk7XG5cdFx0dGhpcy5fZXZlbnRzLm9uKFJpY2hUZXh0RXZlbnRzLnNlbGVjdGlvbkNoYW5nZSwgKHsgcmFuZ2UsIGxlZnQgfSkgPT4ge1xuXHRcdFx0Y29uc3QgdGV4dE5vZGUgPSB0aGlzLl9lZGl0b3IuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0udGV4dE5vZGVzW2xlZnQudGV4dEluZGV4XTtcblx0XHRcdGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG5cdFx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRleHROb2RlLnN0eWxlLmxpbmsgJiYgIXJhbmdlKSB7XG5cdFx0XHRcdHRoaXMuX3Nob3coKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuX2V2ZW50cy5vbihSaWNoVGV4dEV2ZW50cy5zaG93TGlua0VkaXRvciwgKCkgPT4gdGhpcy5fc2hvdygpKTtcblxuXHRcdHRoaXMuX2V2ZW50cy5vbihSaWNoVGV4dEV2ZW50cy5jaGFuZ2UsICgpID0+IHtcblx0XHRcdGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG5cdFx0XHRcdGNvbnN0IHsgbGVmdCwgcmFuZ2UgfSA9IHRoaXMuX2VkaXRvci5zZWxlY3Rpb24uZ2V0KCk7XG5cdFx0XHRcdGNvbnN0IHRleHROb2RlID0gdGhpcy5fZWRpdG9yLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLnRleHROb2Rlc1tsZWZ0LnRleHRJbmRleF07XG5cblx0XHRcdFx0aWYgKCF0ZXh0Tm9kZS5zdHlsZS5saW5rIHx8IHJhbmdlKSB7XG5cdFx0XHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgeyBsaW5rLCB0ZXh0IH0gPSB0aGlzLl9lZGl0b3IuZ2V0TGlua0luZm8oKTtcblx0XHRcdFx0XHR0aGlzLnNldChsaW5rLCB0ZXh0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdHByaXZhdGUgX2RyYXcoKSB7XG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0YC5kaHhfcmljaHRleHQtbGlua2VkaXRvciAke3RoaXMuX2RyYXdWaWV3TW9kZSgpID8gXCIuZGh4X3JpY2h0ZXh0LWxpbmtlZGl0b3ItLW1vZGVfdmlld1wiIDogXCJcIn1gLFxuXHRcdFx0e1xuXHRcdFx0XHQuLi50aGlzLl9oYW5kbGVycyxcblx0XHRcdH0sXG5cdFx0XHR0aGlzLl9lZGl0TW9kZSA/IHRoaXMuX2RyYXdFZGl0TW9kZSgpIDogdGhpcy5fZHJhd1ZpZXdNb2RlKClcblx0XHQpO1xuXHR9XG5cdHByaXZhdGUgX2RyYXdFZGl0TW9kZSgpIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0ZWwoXCIuZGh4X3JpY2h0ZXh0LWxpbmtlZGl0b3JfX2lucHV0c1wiLCBbXG5cdFx0XHRcdGVsKFwiLmRoeF9mb3JtLWdyb3VwLmRoeF9mb3JtLWdyb3VwLS10eXBlX2lubGluZS5kaHhfcmljaHRleHQtbGlua2VkaXRvcl9faW5wdXRcIiwgW1xuXHRcdFx0XHRcdGVsKFwiLmRoeF9sYWJlbFwiLCBsb2NhbGUudGV4dCksXG5cdFx0XHRcdFx0ZWwoXCJpbnB1dC5kaHhfaW5wdXQudGV4dC1pbnB1dFwiLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdGhpcy5fdGV4dCxcblx0XHRcdFx0XHRcdF9rZXk6IFwidGV4dElucHV0XCIsXG5cdFx0XHRcdFx0XHRfcmVmOiBcInRleHRJbnB1dFwiLFxuXHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRdKSxcblx0XHRcdFx0ZWwoXCIuZGh4X2Zvcm0tZ3JvdXAuZGh4X2Zvcm0tZ3JvdXAtLXR5cGVfaW5saW5lLmRoeF9yaWNodGV4dC1saW5rZWRpdG9yX19pbnB1dFwiLCBbXG5cdFx0XHRcdFx0ZWwoXCIuZGh4X2xhYmVsXCIsIGxvY2FsZS5saW5rKSxcblx0XHRcdFx0XHRlbChcImlucHV0LmRoeF9pbnB1dC5saW5rLWlucHV0XCIsIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB0aGlzLl9saW5rLFxuXHRcdFx0XHRcdFx0X2tleTogXCJsaW5rSW5wdXRcIixcblx0XHRcdFx0XHRcdF9yZWY6IFwibGlua0lucHV0XCIsXG5cdFx0XHRcdFx0fSksXG5cdFx0XHRcdF0pLFxuXHRcdFx0XSksXG5cdFx0XHRlbChcIi5kaHhfcmljaHRleHQtbGlua2VkaXRvcl9fY29udHJvbHNcIiwgW1xuXHRcdFx0XHRlbChcblx0XHRcdFx0XHRcImJ1dHRvbi5kaHhfcmljaHRleHQtbGlua2VkaXRvci0taGFuZGxlcl9hcHBseS5kaHhfYnV0dG9uLmRoeF9idXR0b24tLXNpemVfbWVkaXVtLmRoeF9idXR0b24tLXZpZXdfZmxhdC5kaHhfYnV0dG9uLS1jb2xvcl9wcmltYXJ5XCIsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0ZGlzYWJsZWQ6ICF0aGlzLl9saW5rLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0bG9jYWxlLmFwcGx5XG5cdFx0XHRcdCksXG5cdFx0XHRdKSxcblx0XHRdO1xuXHR9XG5cdHByaXZhdGUgX2RyYXdWaWV3TW9kZSgpIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0ZWwoXCJhLmRoeF9yaWNodGV4dC1saW5rZWRpdG9yX19saW5rXCIsIHsgaHJlZjogdGhpcy5fbGluaywgdGFyZ2V0OiBcIl9ibGFua1wiIH0sIHRoaXMuX2xpbmspLFxuXHRcdFx0ZWwoXCIuZGh4X3JpY2h0ZXh0LWxpbmtlZGl0b3JfX2NvbnRyb2xzXCIsIFtcblx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XCJidXR0b24uZGh4X3JpY2h0ZXh0LWxpbmtlZGl0b3ItLWhhbmRsZXJfZWRpdC5kaHhfYnV0dG9uLmRoeF9idXR0b24tLWljb24uZGh4X2J1dHRvbi0tc2l6ZV9tZWRpdW0uZGh4X2J1dHRvbi0tdmlld19saW5rLmRoeF9idXR0b24tLWNvbG9yX3NlY29uZGFyeVwiLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRoeF9pZDogXCJlZGl0XCIsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRbZWwoXCJzcGFuLmRoeF9idXR0b25fX2ljb24uZHhpLmR4aS1wZW5jaWxcIildXG5cdFx0XHRcdCksXG5cdFx0XHRcdGVsKFxuXHRcdFx0XHRcdFwiYnV0dG9uLmRoeF9yaWNodGV4dC1saW5rZWRpdG9yLS1oYW5kbGVyX3VubGluay5kaHhfYnV0dG9uLmRoeF9idXR0b24tLWljb24uZGh4X2J1dHRvbi0tc2l6ZV9tZWRpdW0uZGh4X2J1dHRvbi0tdmlld19saW5rLmRoeF9idXR0b24tLWNvbG9yX3NlY29uZGFyeVwiLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRoeF9pZDogXCJyZW1vdmVMaW5rXCIsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRbZWwoXCJzcGFuLmRoeF9idXR0b25fX2ljb24uZHhpLmR4aS1saW5rLXZhcmlhbnQtb2ZmXCIpXVxuXHRcdFx0XHQpLFxuXHRcdFx0XSksXG5cdFx0XTtcblx0fVxuXHRwcml2YXRlIF9tb2RpZnlMaW5rKHZhbHVlOiBzdHJpbmcpIHtcblx0XHRpZiAodmFsdWUuc3RhcnRzV2l0aChcIiNcIikpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdFx0aWYgKHZhbHVlLnNsaWNlKDAsIDQpLnRvTG93ZXJDYXNlKCkgPT09IFwiaHR0cFwiKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFwiaHR0cDovL1wiICsgdmFsdWU7XG5cdH1cblxuXHRwcml2YXRlIF9hcHBseSgpIHtcblx0XHRjb25zdCBsaW5rID0gdGhpcy5fbW9kaWZ5TGluayh0aGlzLl9saW5rKTtcblx0XHRjb25zdCB0ZXh0ID0gdGhpcy5fdGV4dDtcblxuXHRcdGNvbnN0IGlzRW1wdHlUZXh0ID0gIXRleHQudHJpbSgpO1xuXHRcdGNvbnN0IGlzVGV4dENoYW5nZWQgPSB0aGlzLl9pbml0VGV4dCAhPT0gdGhpcy5fdGV4dDtcblx0XHRpZiAoaXNUZXh0Q2hhbmdlZCB8fCBpc0VtcHR5VGV4dCkge1xuXHRcdFx0dGhpcy5fZWRpdG9yLnVwZGF0ZUxpbmtUZXh0KGlzRW1wdHlUZXh0ID8gbGluayA6IHRleHQpO1xuXHRcdH1cblx0XHRpZiAobGluaykge1xuXHRcdFx0dGhpcy5fZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuYWN0aW9uLCBbXG5cdFx0XHRcdEFjdGlvbi51cGRhdGUsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRtb2RpZmllcjogTW9kaWZpZXIubGluayxcblx0XHRcdFx0XHRtb2RpZmllclZhbHVlOiBsaW5rLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR0cnVlLFxuXHRcdFx0XSk7XG5cdFx0fVxuXHRcdHRoaXMuaGlkZSgpO1xuXHR9XG5cdHByaXZhdGUgX3Nob3coKSB7XG5cdFx0Y29uc3QgeyBsaW5rLCB0ZXh0IH0gPSB0aGlzLl9lZGl0b3IuZ2V0TGlua0luZm8oKTtcblx0XHRjb25zdCBsZWZ0ID0gdGhpcy5fZWRpdG9yLnNlbGVjdGlvbi5nZXQoKS5sZWZ0O1xuXHRcdGNvbnN0IGtleSA9IGdldFRleHRIYXNoKGxlZnQuYmxvY2tJbmRleCwgbGVmdC50ZXh0SW5kZXgpO1xuXHRcdGNvbnN0IHBhcmVudFZpZXcgPSB0aGlzLl9nZXRQYXJlbnRWaWV3KCk7XG5cdFx0Y29uc3Qgdm5vZGUgPSBwYXJlbnRWaWV3LnJlZnNba2V5XTtcblxuXHRcdGlmICghbGluaykge1xuXHRcdFx0Ly8gY2FzZSBmb3IgYWRkIG5ldyBsaW5rXG5cdFx0XHR0aGlzLnNldChudWxsLCB0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLmdldFNlbGVjdGVkVGV4dCgpKTtcblx0XHRcdHRoaXMuc2hvdyh2bm9kZS5lbCwgUG9zaXRpb24uYm90dG9tKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gbGluayBhbHJlYWR5IGV4aXN0c1xuXHRcdFx0aWYgKHZub2RlLnBhcmVudC5yZWYgPT09IHRoaXMuX2N1cnJlbnRMaW5rUmVmKSB7XG5cdFx0XHRcdC8vIHRoaXMgbGluayBhbHJlYWR5IGluIGZvY3VzXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRoaXMuc2V0KGxpbmssIHRleHQpO1xuXHRcdFx0dGhpcy5zaG93KHZub2RlLnBhcmVudC5lbCwgUG9zaXRpb24uYm90dG9tKTtcblx0XHR9XG5cdH1cbn1cbiIsImltcG9ydCB7IEJsb2NrIH0gZnJvbSBcIi4uL21vZGVscy9CbG9ja1wiO1xuaW1wb3J0IHsgVGV4dE5vZGUgfSBmcm9tIFwiLi4vbW9kZWxzL1RleHROb2RlXCI7XG5pbXBvcnQgeyBNb2RpZmllciB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5lbnVtIERlY29yYXRvciB7XG5cdGJvbGQgPSBcIioqXCIsXG5cdGl0YWxpYyA9IFwiKlwiLFxuXHQvLyBzdHJpa2UgPSBcIn5+XCJcbn1cblxuZnVuY3Rpb24gZGVjb3JhdG9yc0RpZihwcmV2OiBEZWNvcmF0b3JbXSwgY3VycmVudDogRGVjb3JhdG9yW10pIHtcblx0Y29uc3Qgb3BlbiA9IGN1cnJlbnQuZmlsdGVyKGRlY29yYXRvciA9PiAhcHJldi5pbmNsdWRlcyhkZWNvcmF0b3IpKTtcblx0Y29uc3QgY2xvc2UgPSBwcmV2LmZpbHRlcihkZWNvcmF0b3IgPT4gIWN1cnJlbnQuaW5jbHVkZXMoZGVjb3JhdG9yKSk7XG5cdHJldHVybiBvcGVuLmNvbmNhdChjbG9zZSk7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUdyb3VwKHRleHROb2RlczogVGV4dE5vZGVbXSwgbGluaz86IHN0cmluZykge1xuXHRsZXQgcmVzdWx0ID0gXCJcIjtcblx0bGV0IHByZXZEZWNvcmF0b3JzID0gW107XG5cblx0Zm9yIChjb25zdCB0ZXh0Tm9kZSBvZiB0ZXh0Tm9kZXMpIHtcblx0XHRjb25zdCBjdXJyZW50RGVjb3JhdG9ycyA9IFtdO1xuXHRcdGNvbnN0IHN0eWxlID0gdGV4dE5vZGUuc3R5bGU7XG5cdFx0aWYgKHN0eWxlW01vZGlmaWVyLmJvbGRdKSB7XG5cdFx0XHRjdXJyZW50RGVjb3JhdG9ycy5wdXNoKERlY29yYXRvci5ib2xkKTtcblx0XHR9XG5cdFx0aWYgKHN0eWxlW01vZGlmaWVyLml0YWxpY10pIHtcblx0XHRcdGN1cnJlbnREZWNvcmF0b3JzLnB1c2goRGVjb3JhdG9yLml0YWxpYyk7XG5cdFx0fVxuXHRcdGNvbnN0IGRpZiA9IGRlY29yYXRvcnNEaWYocHJldkRlY29yYXRvcnMsIGN1cnJlbnREZWNvcmF0b3JzKTtcblx0XHRpZiAoIXByZXZEZWNvcmF0b3JzLmxlbmd0aCAmJiBjdXJyZW50RGVjb3JhdG9ycy5sZW5ndGgpIHtcblx0XHRcdHJlc3VsdCArPSBcIiBcIjtcblx0XHR9XG5cdFx0cmVzdWx0ICs9IGRpZi5qb2luKFwiXCIpO1xuXG5cdFx0aWYgKHByZXZEZWNvcmF0b3JzLmxlbmd0aCAmJiAhY3VycmVudERlY29yYXRvcnMubGVuZ3RoKSB7XG5cdFx0XHRyZXN1bHQgKz0gXCIgXCI7XG5cdFx0fVxuXHRcdHJlc3VsdCArPSB0ZXh0Tm9kZS50ZXh0LnRyaW0oKTtcblxuXHRcdHByZXZEZWNvcmF0b3JzID0gY3VycmVudERlY29yYXRvcnM7XG5cdH1cblx0cmVzdWx0ICs9IHByZXZEZWNvcmF0b3JzLmpvaW4oXCJcIik7XG5cdGlmIChsaW5rKSB7XG5cdFx0cmVzdWx0ID0gYFske3Jlc3VsdH1dKCR7bGlua30pYDtcblx0fVxuXHRyZXR1cm4gcmVzdWx0LnRyaW0oKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplQmxvY2tDb250ZW50KGJsb2NrOiBCbG9jaykge1xuXHRsZXQgcmVzdWx0ID0gXCJcIjtcblxuXHRjb25zdCB0ZXh0Tm9kZXMgPSBibG9jay50ZXh0Tm9kZXM7XG5cblx0bGV0IGdyb3VwID0gW107XG5cdGxldCBjdXJyZW50TGluaztcblxuXHRmb3IgKGNvbnN0IHRleHROb2RlIG9mIHRleHROb2Rlcykge1xuXHRcdGlmICh0ZXh0Tm9kZS5zdHlsZS5saW5rKSB7XG5cdFx0XHRpZiAoY3VycmVudExpbmsgPT09IHRleHROb2RlLnN0eWxlLmxpbmspIHtcblx0XHRcdFx0Z3JvdXAucHVzaCh0ZXh0Tm9kZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoZ3JvdXAubGVuZ3RoKSB7XG5cdFx0XHRcdFx0cmVzdWx0ICs9IHNlcmlhbGl6ZUdyb3VwKGdyb3VwLCBjdXJyZW50TGluayk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Z3JvdXAgPSBbdGV4dE5vZGVdO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoY3VycmVudExpbmspIHtcblx0XHRcdFx0aWYgKGdyb3VwLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJlc3VsdCArPSBzZXJpYWxpemVHcm91cChncm91cCwgY3VycmVudExpbmspO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGdyb3VwID0gW3RleHROb2RlXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGdyb3VwLnB1c2godGV4dE5vZGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjdXJyZW50TGluayA9IHRleHROb2RlLnN0eWxlLmxpbms7XG5cdH1cblxuXHRyZXN1bHQgKz0gc2VyaWFsaXplR3JvdXAoZ3JvdXAsIGN1cnJlbnRMaW5rKTtcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBibG9ja1ByZWZpeChibG9jaykge1xuXHRzd2l0Y2ggKGJsb2NrLnN0eWxlW01vZGlmaWVyLnN0eWxlXSkge1xuXHRcdGNhc2UgXCJoMVwiOlxuXHRcdFx0cmV0dXJuIFwiIyBcIjtcblx0XHRjYXNlIFwiaDJcIjpcblx0XHRcdHJldHVybiBcIiMjIFwiO1xuXHRcdGNhc2UgXCJoM1wiOlxuXHRcdFx0cmV0dXJuIFwiIyMjIFwiO1xuXHRcdGNhc2UgXCJoNFwiOlxuXHRcdFx0cmV0dXJuIFwiIyMjIyBcIjtcblx0XHRjYXNlIFwiaDVcIjpcblx0XHRcdHJldHVybiBcIiMjIyMjIFwiO1xuXHRcdGNhc2UgXCJoNlwiOlxuXHRcdFx0cmV0dXJuIFwiIyMjIyMjIFwiO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gXCJcIjtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFya2Rvd25TZXJpYWxpemVyKGJsb2NrczogQmxvY2tbXSkge1xuXHRyZXR1cm4gYmxvY2tzLnJlZHVjZShcblx0XHQocmVzLCBibG9jaywgaSkgPT4gcmVzICsgKGkgPyBcIlxcblxcblwiIDogXCJcIikgKyBibG9ja1ByZWZpeChibG9jaykgKyBzZXJpYWxpemVCbG9ja0NvbnRlbnQoYmxvY2spLFxuXHRcdFwiXCJcblx0KTtcbn1cbiIsImltcG9ydCB7IElTdHlsZSwgTW9kaWZpZXIgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuaW50ZXJmYWNlIElNaW5pbWFsTm9kZVN0eWxlIHtcblx0Zj86IG51bWJlcjsgLy8gYm9sZCBpdGFsaWMgdW5kZXJsaW5lIHN0cmlrZVxuXHRzPzogbnVtYmVyOyAvLyBmb250IHNpemVcblx0dD86IHN0cmluZzsgLy8gZm9udCBmYW1pbHlcblx0Yz86IHN0cmluZzsgLy8gY29sb3Jcblx0Yj86IHN0cmluZzsgLy8gYm9sZFxuXHRhPzogc3RyaW5nOyAvLyBhbmNob3Jcbn1cblxuaW50ZXJmYWNlIElNaW5pbWFsQmxvY2tTdHlsZSB7XG5cdGE/OiBudW1iZXI7IC8vIGFsaWduOyAxIC0gbGVmdCwgMiAtIGNlbnRlciwgMyAtIHJpZ2h0XG5cdGI/OiBudW1iZXI7IC8vIGJsb2NrcXVvdGU7IDFcblx0cz86IG51bWJlcjsgLy8gMSAtIGgxLCAuLi5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbmltaXplVGV4dE5vZGVTdHlsZShzdHlsZTogSVN0eWxlKTogSU1pbmltYWxOb2RlU3R5bGUge1xuXHRjb25zdCBmb3JtYXR0aW5nID1cblx0XHRzdHlsZVtNb2RpZmllci5ib2xkXSB8XG5cdFx0KHN0eWxlW01vZGlmaWVyLml0YWxpY10gPDwgMSkgfFxuXHRcdChzdHlsZVtNb2RpZmllci51bmRlcmxpbmVdIDw8IDIpIHxcblx0XHQoc3R5bGVbTW9kaWZpZXIuc3RyaWtlXSA8PCAzKTtcblx0Y29uc3QgbWluaW1hbDogSU1pbmltYWxOb2RlU3R5bGUgPSB7fTtcblx0aWYgKGZvcm1hdHRpbmcgIT09IDApIHtcblx0XHRtaW5pbWFsLmYgPSBmb3JtYXR0aW5nO1xuXHR9XG5cdGlmIChzdHlsZVtNb2RpZmllci5mb250U2l6ZV0pIHtcblx0XHRtaW5pbWFsLnMgPSBwYXJzZUludChzdHlsZVtNb2RpZmllci5mb250U2l6ZV0sIDEwKTtcblx0fVxuXHRpZiAoc3R5bGVbTW9kaWZpZXIuZm9udEZhbWlseV0pIHtcblx0XHRtaW5pbWFsLnQgPSBzdHlsZVtNb2RpZmllci5mb250RmFtaWx5XTtcblx0fVxuXHRpZiAoc3R5bGVbTW9kaWZpZXIuY29sb3JdKSB7XG5cdFx0bWluaW1hbC5jID0gc3R5bGVbTW9kaWZpZXIuY29sb3JdO1xuXHR9XG5cdGlmIChzdHlsZVtNb2RpZmllci5iYWNrZ3JvdW5kXSkge1xuXHRcdG1pbmltYWwuYiA9IHN0eWxlW01vZGlmaWVyLmJhY2tncm91bmRdO1xuXHR9XG5cdGlmIChzdHlsZVtNb2RpZmllci5saW5rXSkge1xuXHRcdG1pbmltYWwuYSA9IHN0eWxlW01vZGlmaWVyLmxpbmtdO1xuXHR9XG5cdHJldHVybiBtaW5pbWFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGV4dE5vZGVTdHlsZUZyb21NaW5pbWl6ZShtaW5pbWFsOiBJTWluaW1hbE5vZGVTdHlsZSk6IElTdHlsZSB7XG5cdGNvbnN0IHJlc3VsdDogSVN0eWxlID0ge307XG5cdGlmIChtaW5pbWFsLmYpIHtcblx0XHRpZiAobWluaW1hbC5mICYgMSkge1xuXHRcdFx0cmVzdWx0W01vZGlmaWVyLmJvbGRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKG1pbmltYWwuZiAmIDIpIHtcblx0XHRcdHJlc3VsdFtNb2RpZmllci5pdGFsaWNdID0gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKG1pbmltYWwuZiAmIDQpIHtcblx0XHRcdHJlc3VsdFtNb2RpZmllci51bmRlcmxpbmVdID0gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKG1pbmltYWwuZiAmIDgpIHtcblx0XHRcdHJlc3VsdFtNb2RpZmllci5zdHJpa2VdID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRpZiAobWluaW1hbC5zKSB7XG5cdFx0cmVzdWx0W01vZGlmaWVyLmZvbnRTaXplXSA9IG1pbmltYWwucyArIFwicHhcIjtcblx0fVxuXHRpZiAobWluaW1hbC50KSB7XG5cdFx0cmVzdWx0W01vZGlmaWVyLmZvbnRGYW1pbHldID0gbWluaW1hbC50O1xuXHR9XG5cdGlmIChtaW5pbWFsLmMpIHtcblx0XHRyZXN1bHRbTW9kaWZpZXIuY29sb3JdID0gbWluaW1hbC5jO1xuXHR9XG5cdGlmIChtaW5pbWFsLmIpIHtcblx0XHRyZXN1bHRbTW9kaWZpZXIuYmFja2dyb3VuZF0gPSBtaW5pbWFsLmI7XG5cdH1cblx0aWYgKG1pbmltYWwuYSkge1xuXHRcdHJlc3VsdFtNb2RpZmllci5saW5rXSA9IG1pbmltYWwuYTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5jb25zdCBhbGlnblRvTnVtYmVyID0ge1xuXHRsZWZ0OiAxLFxuXHRjZW50ZXI6IDIsXG5cdHJpZ2h0OiAzLFxufTtcblxuY29uc3QgbnVtYmVyVG9BbGlnbiA9IHtcblx0MTogXCJsZWZ0XCIsXG5cdDI6IFwiY2VudGVyXCIsXG5cdDM6IFwicmlnaHRcIixcbn07XG5cbmNvbnN0IHN0eWxlVG9OdW1iZXIgPSB7XG5cdGgxOiAxLFxuXHRoMjogMixcblx0aDM6IDMsXG5cdGg0OiA0LFxuXHRoNTogNSxcblx0aDY6IDYsXG59O1xuXG5jb25zdCBudW1iZXJUb1N0eWxlID0ge1xuXHQxOiBcImgxXCIsXG5cdDI6IFwiaDJcIixcblx0MzogXCJoM1wiLFxuXHQ0OiBcImg0XCIsXG5cdDU6IFwiaDVcIixcblx0NjogXCJoNlwiLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1pbmltaXplQmxvY2tTdHlsZShzdHlsZTogSVN0eWxlKTogSU1pbmltYWxCbG9ja1N0eWxlIHtcblx0Y29uc3QgbWluaW1hbDogSU1pbmltYWxCbG9ja1N0eWxlID0ge307XG5cdGlmIChzdHlsZVtNb2RpZmllci5ibG9ja3F1b3RlXSkge1xuXHRcdG1pbmltYWwuYiA9IDE7XG5cdH1cblx0aWYgKHN0eWxlW01vZGlmaWVyLnN0eWxlXSkge1xuXHRcdGNvbnN0IHZhbHVlID0gc3R5bGVUb051bWJlcltzdHlsZVtNb2RpZmllci5zdHlsZV1dO1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0bWluaW1hbC5zID0gdmFsdWU7XG5cdFx0fVxuXHR9XG5cdGlmIChzdHlsZVtNb2RpZmllci5hbGlnbl0pIHtcblx0XHRtaW5pbWFsLmEgPSBhbGlnblRvTnVtYmVyW3N0eWxlW01vZGlmaWVyLmFsaWduXV07XG5cdH1cblxuXHRyZXR1cm4gbWluaW1hbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrU3R5bGVGcm9tTWluaW1pemUobWluaW1hbDogSU1pbmltYWxCbG9ja1N0eWxlKTogSVN0eWxlIHtcblx0Y29uc3QgcmVzdWx0OiBJU3R5bGUgPSB7fTtcblx0aWYgKG1pbmltYWwuYSkge1xuXHRcdHJlc3VsdFtNb2RpZmllci5hbGlnbl0gPSBudW1iZXJUb0FsaWduW21pbmltYWwuYV07XG5cdH1cblx0aWYgKG1pbmltYWwuYikge1xuXHRcdHJlc3VsdFtNb2RpZmllci5ibG9ja3F1b3RlXSA9IHRydWU7XG5cdH1cblx0cmVzdWx0W01vZGlmaWVyLnN0eWxlXSA9IG51bWJlclRvU3R5bGVbbWluaW1hbC5zXSB8fCBcInBcIjtcblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFRleHRIYXNoKGJsb2NrSW5kZXg6IG51bWJlciwgdGV4dEluZGV4OiBudW1iZXIpIHtcblx0cmV0dXJuIGJsb2NrSW5kZXggKyBcIl9cIiArIHRleHRJbmRleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldExpbmtSZWZlcigpIHtcblx0bGV0IGluZGV4ID0gMDtcblx0cmV0dXJuICgpID0+IFwibGlua19yZWZfXCIgKyBpbmRleCsrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzaFRvSW5mbyhoYXNoID0gXCJcIikge1xuXHRpZiAoIWhhc2gpIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0cmV0dXJuIGhhc2guc3BsaXQoXCJfXCIpLm1hcCh2YWwgPT4gcGFyc2VJbnQodmFsLCAxMCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWN0aW9uSWRUb01vZGlmaWVyVmFsdWUoaWQ6IHN0cmluZykge1xuXHRyZXR1cm4gaWQuc3BsaXQoXCItXCIpLnBvcCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGV4dENvbG9yKGNvbG9yKSB7XG5cdHJldHVybiBgPHNwYW4gY2xhc3M9XCJkeGkgZHhpLWZvcm1hdC1jb2xvci10ZXh0IGRoeF9yaWNodGV4dF9fdGV4dC1jb2xvclwiIHN0eWxlPVwiYm9yZGVyLWNvbG9yOiAke2NvbG9yfTtcIj48L3NwYW4+YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRleHRTZWxlY3RDb2xvcihjb2xvcikge1xuXHRyZXR1cm4gYDxzcGFuIGNsYXNzPVwiZHhpIGR4aS1mb3JtYXQtY29sb3ItZmlsbCBkaHhfcmljaHRleHRfX2JhY2tncm91bmQtY29sb3JcIiBzdHlsZT1cImJvcmRlci1jb2xvcjogJHtjb2xvcn07XCI+PC9zcGFuPmA7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHRhcmdldCkge1xuXHRyZXR1cm4gdGFyZ2V0ICE9PSBudWxsICYmIHR5cGVvZiB0YXJnZXQgPT09IFwib2JqZWN0XCIgJiYgISh0YXJnZXQgaW5zdGFuY2VvZiBEYXRlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWwoc291cmNlLCB0YXJnZXQsIGRlZXAgPSBmYWxzZSkge1xuXHRjb25zdCBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblx0Y29uc3QgdGFyZ2V0S2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XG5cblx0aWYgKHNvdXJjZUtleXMubGVuZ3RoICE9PSB0YXJnZXRLZXlzLmxlbmd0aCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZvciAoY29uc3QgcHJvcCBvZiBzb3VyY2VLZXlzKSB7XG5cdFx0aWYgKGRlZXAgJiYgaXNPYmplY3Qoc291cmNlW3Byb3BdKSAmJiBpc09iamVjdCh0YXJnZXRbcHJvcF0pKSB7XG5cdFx0XHRpZiAoIWlzRXF1YWwoc291cmNlW3Byb3BdLCB0YXJnZXRbcHJvcF0sIGRlZXApKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHNvdXJjZVtwcm9wXSAhPT0gdGFyZ2V0W3Byb3BdKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbmludGVyZmFjZSBJT2JqZWN0IHtcblx0W2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weVdpdGhvdXQob2JqOiBJT2JqZWN0LCBmb3JiaWRkZW46IElPYmplY3QpOiBJT2JqZWN0IHtcblx0Y29uc3QgdGFyZ2V0ID0ge307XG5cblx0Zm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG5cdFx0aWYgKCFmb3JiaWRkZW4uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0dGFyZ2V0W2tleV0gPSBvYmpba2V5XTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyOiBzdHJpbmcsIHBhdHRlcm46IHN0cmluZykge1xuXHRpZiAoc3RyLmxlbmd0aCA8IHBhdHRlcm4ubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBwYXR0ZXJuLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKHN0cltpXSAhPT0gcGF0dGVybltpXSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCAqIGFzIG1hcmtlZCBmcm9tIFwibWFya2VkXCI7XG5pbXBvcnQgeyBmb250cywgZm9udFNpemVzIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQmxvY2sgfSBmcm9tIFwiLi8uLi9tb2RlbHMvQmxvY2tcIjtcbmltcG9ydCB7IFRleHROb2RlIH0gZnJvbSBcIi4vLi4vbW9kZWxzL1RleHROb2RlXCI7XG5pbXBvcnQgeyBNb2RpZmllciB9IGZyb20gXCIuLy4uL3R5cGVzXCI7XG5cbmZ1bmN0aW9uIHRhZ1RvU3R5bGUoaHRtbEVsZW1lbnQpIHtcblx0c3dpdGNoIChodG1sRWxlbWVudC5ub2RlTmFtZSkge1xuXHRcdGNhc2UgXCJCXCI6XG5cdFx0Y2FzZSBcIlNUUk9OR1wiOlxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0W01vZGlmaWVyLmJvbGRdOiB0cnVlLFxuXHRcdFx0fTtcblx0XHRjYXNlIFwiSVwiOlxuXHRcdGNhc2UgXCJFTVwiOlxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0W01vZGlmaWVyLml0YWxpY106IHRydWUsXG5cdFx0XHR9O1xuXHRcdGNhc2UgXCJVXCI6XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRbTW9kaWZpZXIudW5kZXJsaW5lXTogdHJ1ZSxcblx0XHRcdH07XG5cdFx0Y2FzZSBcIlNUUklLRVwiOlxuXHRcdGNhc2UgXCJTXCI6XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRbTW9kaWZpZXIuc3RyaWtlXTogdHJ1ZSxcblx0XHRcdH07XG5cdFx0Y2FzZSBcIkFcIjpcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFtNb2RpZmllci5saW5rXTogaHRtbEVsZW1lbnQuaHJlZixcblx0XHRcdH07XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiB7fTtcblx0fVxufVxuXG5mdW5jdGlvbiBwYXJzZVRleHROb2RlcyhodG1sRWxlbWVudDogSFRNTEVsZW1lbnQsIHRleHROb2RlczogVGV4dE5vZGVbXSwgc3R5bGUgPSB7fSkge1xuXHRpZiAoaHRtbEVsZW1lbnQubm9kZVR5cGUgPT09IGh0bWxFbGVtZW50LlRFWFRfTk9ERSkge1xuXHRcdGNvbnN0IHRleHQgPSBodG1sRWxlbWVudC50ZXh0Q29udGVudFxuXHRcdFx0LnJlcGxhY2UoLyZuYnNwOy9nLCBcIiBcIilcblx0XHRcdC5yZXBsYWNlKC8mbHQ7L2csIFwiPFwiKVxuXHRcdFx0LnJlcGxhY2UoLyZndDsvZywgXCI+XCIpO1xuXHRcdGlmICh0ZXh0LnJlcGxhY2UoL1xcbi9nLCBcIlwiKS5sZW5ndGggPT09IDApIHtcblx0XHRcdC8vIGlnbm9yZSBlbXB0eSBub2RlczogVE9ETyBmaXhcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgdGV4dE5vZGUgPSBuZXcgVGV4dE5vZGUodGV4dCwgc3R5bGUpO1xuXHRcdHRleHROb2Rlcy5wdXNoKHRleHROb2RlKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBlbGVtZW50U3R5bGUgPSB7fTtcblx0Y29uc3Qge1xuXHRcdGZvbnRTaXplLFxuXHRcdGZvbnRXZWlnaHQsXG5cdFx0Zm9udEZhbWlseSxcblx0XHRjb2xvcixcblx0XHRiYWNrZ3JvdW5kLFxuXHRcdGJhY2tncm91bmRDb2xvcixcblx0XHR0ZXh0RGVjb3JhdGlvbixcblx0XHRmb250U3R5bGUsXG5cdH0gPSBodG1sRWxlbWVudC5zdHlsZSB8fCAoe30gYXMgYW55KTtcblxuXHRjb25zdCB0YWdTdHlsZSA9IHRhZ1RvU3R5bGUoaHRtbEVsZW1lbnQpO1xuXG5cdGlmIChmb250U2l6ZSkge1xuXHRcdGVsZW1lbnRTdHlsZVtNb2RpZmllci5mb250U2l6ZV0gPSBmb250U2l6ZXNbZm9udFNpemVdID8gZm9udFNpemUgOiBcIjE0cHhcIjtcblx0fVxuXHRpZiAoZm9udFdlaWdodCkge1xuXHRcdGVsZW1lbnRTdHlsZVtNb2RpZmllci5ib2xkXSA9IGZvbnRXZWlnaHQgPT09IFwiYm9sZFwiIHx8IHBhcnNlSW50KGZvbnRXZWlnaHQsIDEwKSA+PSA2MDA7XG5cdH1cblx0aWYgKGZvbnRGYW1pbHkpIHtcblx0XHRlbGVtZW50U3R5bGVbTW9kaWZpZXIuZm9udEZhbWlseV0gPSBmb250c1tmb250RmFtaWx5XSA/IGZvbnRGYW1pbHkgOiBcIlJvYm90b1wiO1xuXHR9XG5cdGlmIChjb2xvcikge1xuXHRcdGVsZW1lbnRTdHlsZVtNb2RpZmllci5jb2xvcl0gPSBjb2xvcjtcblx0fVxuXHRpZiAoYmFja2dyb3VuZCB8fCBiYWNrZ3JvdW5kQ29sb3IpIHtcblx0XHRlbGVtZW50U3R5bGVbTW9kaWZpZXIuYmFja2dyb3VuZF0gPSBiYWNrZ3JvdW5kIHx8IGJhY2tncm91bmRDb2xvcjtcblx0fVxuXHRpZiAodGV4dERlY29yYXRpb24gPT09IFwidW5kZXJsaW5lXCIpIHtcblx0XHRlbGVtZW50U3R5bGVbTW9kaWZpZXIudW5kZXJsaW5lXSA9IHRydWU7XG5cdH1cblx0aWYgKHRleHREZWNvcmF0aW9uID09PSBcImxpbmUtdGhyb3VnaFwiKSB7XG5cdFx0ZWxlbWVudFN0eWxlW01vZGlmaWVyLnN0cmlrZV0gPSB0cnVlO1xuXHR9XG5cdGlmIChmb250U3R5bGUpIHtcblx0XHRlbGVtZW50U3R5bGVbTW9kaWZpZXIuaXRhbGljXSA9IGZvbnRTdHlsZSA9PT0gXCJpdGFsaWNcIjtcblx0fVxuXG5cdGNvbnN0IGZ1bGxTdHlsZSA9IHsgLi4uc3R5bGUsIC4uLnRhZ1N0eWxlLCAuLi5lbGVtZW50U3R5bGUgfTtcblxuXHRjb25zdCBjaGlsZHMgPSBodG1sRWxlbWVudC5jaGlsZE5vZGVzO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcy5sZW5ndGg7IGkrKykge1xuXHRcdHBhcnNlVGV4dE5vZGVzKGNoaWxkc1tpXSBhcyBIVE1MRWxlbWVudCwgdGV4dE5vZGVzLCBmdWxsU3R5bGUpO1xuXHR9XG59XG5cbmNvbnN0IGJsb2NrVGFncyA9IHtcblx0UDogXCJwXCIsXG5cdEgxOiBcImgxXCIsXG5cdEgyOiBcImgyXCIsXG5cdEgzOiBcImgzXCIsXG5cdEg0OiBcImg0XCIsXG5cdEg1OiBcImg1XCIsXG5cdEg2OiBcImg2XCIsXG59O1xuXG5mdW5jdGlvbiBnZXRCbG9ja1N0eWxlKGh0bWxFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuXHRpZiAoIWh0bWxFbGVtZW50IHx8ICFodG1sRWxlbWVudC5zdHlsZSkge1xuXHRcdHJldHVybiB7fTtcblx0fVxuXHRjb25zdCBzdHlsZSA9IHt9O1xuXHRpZiAoaHRtbEVsZW1lbnQuc3R5bGUudGV4dEFsaWduKSB7XG5cdFx0c3R5bGVbTW9kaWZpZXIuYWxpZ25dID0gaHRtbEVsZW1lbnQuc3R5bGUudGV4dEFsaWduO1xuXHR9XG5cdGlmIChodG1sRWxlbWVudC5ub2RlTmFtZSA9PT0gXCJCTE9DS1FVT1RFXCIpIHtcblx0XHRzdHlsZVtNb2RpZmllci5ibG9ja3F1b3RlXSA9IHRydWU7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQmxvY2tzKGh0bWxFbGVtZW50OiBIVE1MRWxlbWVudCwgYmxvY2tzOiBCbG9ja1tdLCBzdHlsZSA9IHt9KSB7XG5cdHN0eWxlID0geyAuLi5zdHlsZSwgLi4uZ2V0QmxvY2tTdHlsZShodG1sRWxlbWVudCkgfTtcblxuXHRpZiAoYmxvY2tUYWdzW2h0bWxFbGVtZW50Lm5vZGVOYW1lXSkge1xuXHRcdGNvbnN0IHRleHROb2RlcyA9IFtdO1xuXHRcdHBhcnNlVGV4dE5vZGVzKGh0bWxFbGVtZW50LCB0ZXh0Tm9kZXMpO1xuXHRcdGNvbnN0IGJsb2NrID0gbmV3IEJsb2NrKHRleHROb2Rlcywge1xuXHRcdFx0Li4uc3R5bGUsXG5cdFx0XHRbTW9kaWZpZXIuc3R5bGVdOiBibG9ja1RhZ3NbaHRtbEVsZW1lbnQubm9kZU5hbWVdLFxuXHRcdH0pO1xuXHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjaGlsZHMgPSBodG1sRWxlbWVudC5jaGlsZE5vZGVzO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcy5sZW5ndGg7IGkrKykge1xuXHRcdHBhcnNlQmxvY2tzKGNoaWxkc1tpXSBhcyBIVE1MRWxlbWVudCwgYmxvY2tzLCBzdHlsZSk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlcihzdHI6IHN0cmluZywgbW9kZTogXCJodG1sXCIgfCBcIm1hcmtkb3duXCIgPSBcImh0bWxcIikge1xuXHRpZiAobW9kZSA9PT0gXCJtYXJrZG93blwiKSB7XG5cdFx0c3RyID0gbWFya2VkKHN0cik7XG5cdH1cblx0Y29uc3QgaHRtbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRodG1sRWxlbWVudC5pbm5lckhUTUwgPSBzdHIucmVwbGFjZSgvPGJyXFxzKlsvXT8+L2csIFwiXFxuXCIpO1xuXHRjb25zdCBibG9ja3MgPSBbXTtcblx0cGFyc2VCbG9ja3MoaHRtbEVsZW1lbnQsIGJsb2Nrcyk7XG5cblx0aWYgKGJsb2Nrcy5sZW5ndGggPT09IDApIHtcblx0XHRjb25zdCBzdHlsZSA9IHtcblx0XHRcdFtNb2RpZmllci5zdHlsZV06IGJsb2NrVGFnc1todG1sRWxlbWVudC5ub2RlTmFtZV0gfHwgXCJwXCIsXG5cdFx0XHQuLi5nZXRCbG9ja1N0eWxlKGh0bWxFbGVtZW50KSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdGV4dE5vZGVzID0gW107XG5cdFx0cGFyc2VUZXh0Tm9kZXMoaHRtbEVsZW1lbnQsIHRleHROb2Rlcyk7XG5cdFx0Y29uc3QgYmxvY2sgPSBuZXcgQmxvY2sodGV4dE5vZGVzLCBzdHlsZSk7XG5cdFx0cmV0dXJuIFtibG9ja107XG5cdH1cblx0cmV0dXJuIGJsb2Nrcztcbn1cbiIsImV4cG9ydCBpbnRlcmZhY2UgSVNjcm9sbEhlbHBlciB7XG5cdHVwZGF0ZTogKCkgPT4gdm9pZDtcblx0c2F2ZVNjcm9sbFRvcDogKCkgPT4gdm9pZDtcblx0cmVzdG9yZVNjcm9sbFRvcDogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNjcm9sbEhlbHBlcihlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuXHRsZXQgc2Nyb2xsSGVpZ2h0ID0gZWxlbWVudC5zY3JvbGxIZWlnaHQ7XG5cdGxldCBzY3JvbGxUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcblxuXHRyZXR1cm4ge1xuXHRcdHVwZGF0ZSgpIHtcblx0XHRcdGNvbnN0IG5ld1Njcm9sbEhlaWdodCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuXHRcdFx0aWYgKG5ld1Njcm9sbEhlaWdodCA+IHNjcm9sbEhlaWdodCkge1xuXHRcdFx0XHRlbGVtZW50LnNjcm9sbFRvcCArPSBuZXdTY3JvbGxIZWlnaHQgLSBzY3JvbGxIZWlnaHQ7XG5cdFx0XHR9XG5cdFx0XHRzY3JvbGxIZWlnaHQgPSBuZXdTY3JvbGxIZWlnaHQ7XG5cdFx0fSxcblx0XHRzYXZlU2Nyb2xsVG9wKCkge1xuXHRcdFx0c2Nyb2xsVG9wID0gZWxlbWVudC5zY3JvbGxUb3A7XG5cdFx0fSxcblx0XHRyZXN0b3JlU2Nyb2xsVG9wKCkge1xuXHRcdFx0ZWxlbWVudC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG5cdFx0fSxcblx0fTtcbn1cbiIsImltcG9ydCB7IGxvY2F0ZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tIFwiLi4vbW9kZWxzL0VkaXRvclwiO1xuaW1wb3J0IHsgaGFzaFRvSW5mbyB9IGZyb20gXCIuL290aGVyXCI7XG5cbi8vIHJhbmdlIGVuZCBjYW5ub3QgYmUgc2V0IGJlZm9yZSByYW5nZSBzdGFydCwgc28gaWYgc2VsZWN0aW9uIGJhY2t3YXJkcyByYW5nZSBiZSBjb2xsYXBzZWRcbmZ1bmN0aW9uIGlzU2VsZWN0aW9uQmFja3dhcmRzKCkge1xuXHRjb25zdCB7IGFuY2hvck5vZGUsIGZvY3VzTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c09mZnNldCB9ID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuXHRjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cdHJhbmdlLnNldFN0YXJ0KGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG5cdHJhbmdlLnNldEVuZChmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KTtcblx0cmV0dXJuIHJhbmdlLmNvbGxhcHNlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlRnJvbURvbShlZGl0b3I6IEVkaXRvcikge1xuXHRjb25zdCB7IGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCwgaXNDb2xsYXBzZWQgfSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblxuXHRsZXQgbGVmdE5vZGUgPSBhbmNob3JOb2RlO1xuXHRsZXQgcmlnaHROb2RlID0gZm9jdXNOb2RlO1xuXHRsZXQgbGVmdE9mZnNldCA9IGFuY2hvck9mZnNldDtcblx0bGV0IHJpZ2h0T2Zmc2V0ID0gZm9jdXNPZmZzZXQ7XG5cblx0aWYgKGlzU2VsZWN0aW9uQmFja3dhcmRzKCkpIHtcblx0XHRbbGVmdE5vZGUsIHJpZ2h0Tm9kZV0gPSBbcmlnaHROb2RlLCBsZWZ0Tm9kZV07XG5cdFx0W2xlZnRPZmZzZXQsIHJpZ2h0T2Zmc2V0XSA9IFtyaWdodE9mZnNldCwgbGVmdE9mZnNldF07XG5cdH1cblxuXHRjb25zdCBsZWZ0S2V5ID0gbG9jYXRlKGxlZnROb2RlIGFzIGFueSwgXCJkaHhfb2Zmc2V0XCIpO1xuXHRjb25zdCByaWdodEtleSA9IGxvY2F0ZShyaWdodE5vZGUgYXMgYW55LCBcImRoeF9vZmZzZXRcIik7XG5cblx0Y29uc3QgbGVmdEluZm8gPSBoYXNoVG9JbmZvKGxlZnRLZXkpO1xuXHRjb25zdCByaWdodEluZm8gPSBoYXNoVG9JbmZvKHJpZ2h0S2V5KTtcblxuXHRsZXQgbGVmdDtcblx0bGV0IHJpZ2h0O1xuXG5cdGlmIChsZWZ0SW5mby5sZW5ndGggPT09IDIpIHtcblx0XHRpZiAobGVmdE5vZGUubm9kZVR5cGUgPT09IDMpIHtcblx0XHRcdGxlZnQgPSB7XG5cdFx0XHRcdGJsb2NrSW5kZXg6IGxlZnRJbmZvWzBdLFxuXHRcdFx0XHR0ZXh0SW5kZXg6IGxlZnRJbmZvWzFdLFxuXHRcdFx0XHRvZmZzZXQ6IGxlZnRPZmZzZXQsXG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZWZ0ID0ge1xuXHRcdFx0XHRibG9ja0luZGV4OiBsZWZ0SW5mb1swXSxcblx0XHRcdFx0dGV4dEluZGV4OiBsZWZ0SW5mb1sxXSxcblx0XHRcdFx0b2Zmc2V0OiBlZGl0b3IuYmxvY2tzW2xlZnRJbmZvWzBdXS50ZXh0Tm9kZXNbbGVmdEluZm9bMV1dLnRleHQubGVuZ3RoLFxuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSBpZiAobGVmdEluZm8ubGVuZ3RoID09PSAxKSB7XG5cdFx0aWYgKGVkaXRvci5ibG9ja3NbbGVmdEluZm9bMF1dLnRleHROb2Rlc1tsZWZ0T2Zmc2V0XSkge1xuXHRcdFx0bGVmdCA9IHtcblx0XHRcdFx0YmxvY2tJbmRleDogbGVmdEluZm9bMF0sXG5cdFx0XHRcdHRleHRJbmRleDogbGVmdE9mZnNldCxcblx0XHRcdFx0b2Zmc2V0OiAwLFxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGVmdCA9IHtcblx0XHRcdFx0YmxvY2tJbmRleDogbGVmdEluZm9bMF0sXG5cdFx0XHRcdHRleHRJbmRleDogbGVmdE9mZnNldCAtIDEsXG5cdFx0XHRcdG9mZnNldDogZWRpdG9yLmJsb2Nrc1tsZWZ0SW5mb1swXV0udGV4dE5vZGVzW2xlZnRPZmZzZXQgLSAxXS50ZXh0Lmxlbmd0aCxcblx0XHRcdH07XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGxlZnQgPSB7XG5cdFx0XHRibG9ja0luZGV4OiBsZWZ0T2Zmc2V0LFxuXHRcdFx0dGV4dEluZGV4OiAwLFxuXHRcdFx0b2Zmc2V0OiAwLFxuXHRcdH07XG5cdH1cblxuXHRpZiAoaXNDb2xsYXBzZWQpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cmFuZ2U6IGZhbHNlLFxuXHRcdFx0bGVmdCxcblx0XHR9O1xuXHR9XG5cblx0aWYgKHJpZ2h0SW5mby5sZW5ndGggPT09IDIpIHtcblx0XHRpZiAocmlnaHROb2RlLm5vZGVUeXBlID09PSAzKSB7XG5cdFx0XHRyaWdodCA9IHtcblx0XHRcdFx0YmxvY2tJbmRleDogcmlnaHRJbmZvWzBdLFxuXHRcdFx0XHR0ZXh0SW5kZXg6IHJpZ2h0SW5mb1sxXSxcblx0XHRcdFx0b2Zmc2V0OiByaWdodE9mZnNldCxcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJpZ2h0ID0ge1xuXHRcdFx0XHRibG9ja0luZGV4OiByaWdodEluZm9bMF0sXG5cdFx0XHRcdHRleHRJbmRleDogcmlnaHRJbmZvWzFdLFxuXHRcdFx0XHRvZmZzZXQ6IGVkaXRvci5ibG9ja3NbcmlnaHRJbmZvWzBdXS50ZXh0Tm9kZXNbcmlnaHRJbmZvWzFdXS50ZXh0Lmxlbmd0aCxcblx0XHRcdH07XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHJpZ2h0SW5mby5sZW5ndGggPT09IDEpIHtcblx0XHRpZiAocmlnaHRPZmZzZXQgPT09IDApIHtcblx0XHRcdHJpZ2h0ID0ge1xuXHRcdFx0XHRibG9ja0luZGV4OiByaWdodEluZm9bMF0gLSAxLFxuXHRcdFx0XHQuLi5lZGl0b3IuYmxvY2tzW3JpZ2h0SW5mb1swXSAtIDFdLmdldEJsb2NrRW5kKCksXG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyaWdodCA9IHtcblx0XHRcdFx0YmxvY2tJbmRleDogcmlnaHRJbmZvWzBdLFxuXHRcdFx0XHR0ZXh0SW5kZXg6IHJpZ2h0T2Zmc2V0IC0gMSxcblx0XHRcdFx0b2Zmc2V0OiBlZGl0b3IuYmxvY2tzW3JpZ2h0SW5mb1swXV0udGV4dE5vZGVzW3JpZ2h0T2Zmc2V0IC0gMV0udGV4dC5sZW5ndGgsXG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyaWdodCA9IHtcblx0XHRcdGJsb2NrSW5kZXg6IHJpZ2h0T2Zmc2V0IC0gMSxcblx0XHRcdC4uLmVkaXRvci5ibG9ja3NbcmlnaHRPZmZzZXQgLSAxXS5nZXRCbG9ja0VuZCgpLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGxlZnQsXG5cdFx0cmlnaHQsXG5cdFx0cmFuZ2U6IHRydWUsXG5cdH07XG59XG4iLCJpbXBvcnQgeyBCbG9jayB9IGZyb20gXCIuLi9tb2RlbHMvQmxvY2tcIjtcbmltcG9ydCB7IFRleHROb2RlIH0gZnJvbSBcIi4uL21vZGVscy9UZXh0Tm9kZVwiO1xuaW1wb3J0IHsgTW9kaWZpZXIgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZnVuY3Rpb24gdGV4dElubGluZVN0eWxlKHN0eWxlLCByYXcgPSBmYWxzZSkge1xuXHRsZXQgaW5saW5lID0gXCJcIjtcblxuXHRmb3IgKGNvbnN0IGtleSBpbiBzdHlsZSkge1xuXHRcdHN3aXRjaCAoa2V5KSB7XG5cdFx0XHRjYXNlIE1vZGlmaWVyLmJhY2tncm91bmQ6XG5cdFx0XHRcdGlubGluZSArPSBgYmFja2dyb3VuZDogJHtzdHlsZVtrZXldfTtgO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgTW9kaWZpZXIuY29sb3I6XG5cdFx0XHRcdGlubGluZSArPSBgY29sb3I6ICR7c3R5bGVba2V5XX07YDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIE1vZGlmaWVyLmZvbnRGYW1pbHk6XG5cdFx0XHRcdGlubGluZSArPSBgZm9udC1mYW1pbHk6ICR7c3R5bGVba2V5XX07YDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIE1vZGlmaWVyLmZvbnRTaXplOlxuXHRcdFx0XHRpbmxpbmUgKz0gYGZvbnQtc2l6ZTogJHtzdHlsZVtrZXldfTtgO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblx0aWYgKHJhdykge1xuXHRcdHJldHVybiBpbmxpbmU7XG5cdH1cblx0aWYgKGlubGluZSkge1xuXHRcdHJldHVybiBgIHN0eWxlPVwiJHtpbmxpbmV9XCJgO1xuXHR9XG5cdHJldHVybiBcIlwiO1xufVxuXG5mdW5jdGlvbiB0YWdXaXRoQ29udGVudCh0YWdzLCBpbmxpbmVTdHlsZSwgY29udGVudCkge1xuXHRpZiAodGFncy5sZW5ndGggPT09IDAgJiYgY29udGVudC50cmltKCkgPT09IFwiXCIpIHtcblx0XHR0YWdzLnB1c2goXCJzcGFuXCIpO1xuXHR9XG5cdGNvbnN0IG9wZW5UYWdzID0gdGFncy5yZWR1Y2UoXG5cdFx0KHJlczogc3RyaW5nLCB0YWc6IHN0cmluZywgaTogbnVtYmVyKSA9PiByZXMgKyAoaSA9PT0gMCA/IGA8JHt0YWd9JHtpbmxpbmVTdHlsZX0+YCA6IGA8JHt0YWd9PmApLFxuXHRcdFwiXCJcblx0KTtcblx0Y29uc3QgY2xvc2VUYWdzID0gdGFncy5yZWR1Y2VSaWdodCgocmVzOiBzdHJpbmcsIHRhZzogc3RyaW5nKSA9PiByZXMgKyBgPC8ke3RhZ30+YCwgXCJcIik7XG5cblx0cmV0dXJuIG9wZW5UYWdzICsgY29udGVudCArIGNsb3NlVGFncztcbn1cblxuZnVuY3Rpb24gcmVwZWF0U3RyKHN0ciwgY291bnQpIHtcblx0bGV0IHJlcyA9IFwiXCI7XG5cdHdoaWxlIChjb3VudC0tKSB7XG5cdFx0cmVzICs9IHN0cjtcblx0fVxuXHRyZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzVGV4dCh0ZXh0OiBzdHJpbmcpIHtcblx0cmV0dXJuIHRleHRcblx0XHQucmVwbGFjZSgvPC9nLCBcIiZsdDtcIilcblx0XHQucmVwbGFjZSgvPi9nLCBcIiZndDtcIilcblx0XHQucmVwbGFjZSgvXFxuL2csIFwiPGJyPlwiKVxuXHRcdC5yZXBsYWNlKC9bIF17Mix9L2csIG1hdGNoID0+IFwiIFwiICsgcmVwZWF0U3RyKFwiJm5ic3A7XCIsIG1hdGNoLmxlbmd0aCAtIDEpKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplVGV4dE5vZGUodGV4dE5vZGU6IFRleHROb2RlLCByYXcgPSBmYWxzZSkge1xuXHRjb25zdCB7IHN0eWxlLCB0ZXh0IH0gPSB0ZXh0Tm9kZTtcblxuXHRjb25zdCB0YWdzID0gW107XG5cblx0aWYgKHN0eWxlW01vZGlmaWVyLnVuZGVybGluZV0pIHtcblx0XHR0YWdzLnB1c2goXCJ1XCIpO1xuXHR9XG5cdGlmIChzdHlsZVtNb2RpZmllci5zdHJpa2VdKSB7XG5cdFx0dGFncy5wdXNoKFwic1wiKTtcblx0fVxuXHRpZiAoc3R5bGVbTW9kaWZpZXIuYm9sZF0pIHtcblx0XHR0YWdzLnB1c2goXCJzdHJvbmdcIik7XG5cdH1cblx0aWYgKHN0eWxlW01vZGlmaWVyLml0YWxpY10pIHtcblx0XHR0YWdzLnB1c2goXCJpXCIpO1xuXHR9XG5cblx0aWYgKHJhdykge1xuXHRcdHJldHVybiB7XG5cdFx0XHR0YWdzLFxuXHRcdFx0aW5saW5lOiB0ZXh0SW5saW5lU3R5bGUoc3R5bGUsIHRydWUpLFxuXHRcdFx0dGV4dDogcHJvY2Vzc1RleHQodGV4dCksXG5cdFx0fTtcblx0fVxuXG5cdGNvbnN0IGlubGluZVN0eWxlID0gdGV4dElubGluZVN0eWxlKHN0eWxlKTtcblxuXHRpZiAoaW5saW5lU3R5bGUgJiYgdGFncy5sZW5ndGggPT09IDApIHtcblx0XHR0YWdzLnB1c2goXCJzcGFuXCIpO1xuXHR9XG5cdHJldHVybiB0YWdXaXRoQ29udGVudCh0YWdzLCBpbmxpbmVTdHlsZSwgcHJvY2Vzc1RleHQodGV4dCkpO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVUZXh0Tm9kZXModGV4dE5vZGVzOiBUZXh0Tm9kZVtdKSB7XG5cdGxldCByZXMgPSBcIlwiO1xuXHRsZXQgbGlua0NvbnRlbnQgPSBcIlwiO1xuXHRsZXQgbGlua1RleHQgPSBcIlwiO1xuXHRsZXQgcHJldkxpbms7XG5cblx0Zm9yIChjb25zdCB0ZXh0Tm9kZSBvZiB0ZXh0Tm9kZXMpIHtcblx0XHRpZiAodGV4dE5vZGUuc3R5bGUubGluaykge1xuXHRcdFx0aWYgKHByZXZMaW5rID09PSB0ZXh0Tm9kZS5zdHlsZS5saW5rKSB7XG5cdFx0XHRcdGxpbmtDb250ZW50ICs9IHNlcmlhbGl6ZVRleHROb2RlKHRleHROb2RlKTtcblx0XHRcdFx0bGlua1RleHQgKz0gdGV4dE5vZGUudGV4dC5yZXBsYWNlKC9cIi9nLCBcIidcIik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsaW5rQ29udGVudCA9IHNlcmlhbGl6ZVRleHROb2RlKHRleHROb2RlKTtcblx0XHRcdFx0bGlua1RleHQgPSB0ZXh0Tm9kZS50ZXh0LnJlcGxhY2UoL1wiL2csIFwiJ1wiKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHByZXZMaW5rKSB7XG5cdFx0XHRcdHJlcyArPSB0YWdXaXRoQ29udGVudChbXCJhXCJdLCBgIGhyZWY9XCIke3ByZXZMaW5rfVwiIHRpdGxlPVwiJHtsaW5rVGV4dH1cImAsIGxpbmtDb250ZW50KTtcblx0XHRcdH1cblx0XHRcdHJlcyArPSBzZXJpYWxpemVUZXh0Tm9kZSh0ZXh0Tm9kZSk7XG5cdFx0fVxuXHRcdHByZXZMaW5rID0gdGV4dE5vZGUuc3R5bGUubGluaztcblx0fVxuXHRpZiAocHJldkxpbmspIHtcblx0XHRyZXMgKz0gdGFnV2l0aENvbnRlbnQoW1wiYVwiXSwgYCBocmVmPVwiJHtwcmV2TGlua31cIiB0aXRsZT1cIiR7bGlua1RleHR9XCJgLCBsaW5rQ29udGVudCk7XG5cdH1cblx0cmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplQmxvY2soYmxvY2s6IEJsb2NrKSB7XG5cdGxldCBpbmxpbmUgPSBcIlwiO1xuXG5cdGNvbnN0IHsgc3R5bGUsIHRleHROb2RlcyB9ID0gYmxvY2s7XG5cblx0Y29uc3QgdGFncyA9IFtdO1xuXHRpZiAoYmxvY2suc3R5bGVbTW9kaWZpZXIuYmxvY2txdW90ZV0pIHtcblx0XHR0YWdzLnB1c2goXCJibG9ja3F1b3RlXCIpO1xuXHR9XG5cdHRhZ3MucHVzaChzdHlsZVtNb2RpZmllci5zdHlsZV0gfHwgXCJwXCIpO1xuXG5cdGNvbnN0IGFsaWduID0gc3R5bGVbTW9kaWZpZXIuYWxpZ25dID8gYHRleHQtYWxpZ246ICR7c3R5bGVbTW9kaWZpZXIuYWxpZ25dfTtgIDogXCJcIjtcblxuXHRpZiAodGV4dE5vZGVzLmxlbmd0aCA9PT0gMSAmJiAhdGV4dE5vZGVzWzBdLnN0eWxlW01vZGlmaWVyLmxpbmtdKSB7XG5cdFx0Y29uc3QgcmVzID0gc2VyaWFsaXplVGV4dE5vZGUodGV4dE5vZGVzWzBdLCB0cnVlKTtcblx0XHR0YWdzLnB1c2goLi4ucmVzLnRhZ3MpO1xuXHRcdGNvbnN0IHRleHRJbmxpbmUgPSByZXMuaW5saW5lO1xuXG5cdFx0aWYgKHRleHRJbmxpbmUgfHwgYWxpZ24pIHtcblx0XHRcdGlubGluZSA9IGAgc3R5bGU9XCIke3RleHRJbmxpbmV9JHthbGlnbn1cImA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhZ1dpdGhDb250ZW50KHRhZ3MsIGlubGluZSwgcmVzLnRleHQpO1xuXHR9XG5cblx0aWYgKGFsaWduKSB7XG5cdFx0aW5saW5lID0gYCBzdHlsZT1cIiR7YWxpZ259XCJgO1xuXHR9XG5cblx0cmV0dXJuIHRhZ1dpdGhDb250ZW50KHRhZ3MsIGlubGluZSwgc2VyaWFsaXplVGV4dE5vZGVzKHRleHROb2RlcykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplcihibG9ja3M6IEJsb2NrW10pIHtcblx0cmV0dXJuIGJsb2Nrcy5yZWR1Y2UoKHJlc3VsdCwgYmxvY2spID0+IHJlc3VsdCArIHNlcmlhbGl6ZUJsb2NrKGJsb2NrKSwgXCJcIik7XG59XG4iLCJpbXBvcnQgeyBlbCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCBsb2NhbGUgZnJvbSBcIi4uL2xvY2FsZXMvZW5cIjtcbmltcG9ydCB7IElTdGF0IH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmZ1bmN0aW9uIGNoYXJzRXhsU3BhY2UodGV4dDogc3RyaW5nKTogbnVtYmVyIHtcblx0cmV0dXJuIHRleHQucmVwbGFjZSgvW1xcbiBdL2csIFwiXCIpLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gY2hhcnModGV4dDogc3RyaW5nKTogbnVtYmVyIHtcblx0cmV0dXJuIHRleHQucmVwbGFjZSgvW1xcbl0vZywgXCJcIikubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiB3b3Jkcyh0ZXh0OiBzdHJpbmcpOiBudW1iZXIge1xuXHRyZXR1cm4gdGV4dC5zcGxpdCgvW1xcbiAhLj8sOjtdKy9nKS5maWx0ZXIod29yZCA9PiB3b3JkLmxlbmd0aCA+IDApLmxlbmd0aDtcbn1cblxuY29uc3QgZGVmYXVsdFN0YXRzID0ge1xuXHR3b3Jkcyxcblx0Y2hhcnMsXG5cdGNoYXJzRXhsU3BhY2UsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdHModGV4dDogc3RyaW5nLCBjdXN0b21TdGF0cz86IElTdGF0W10pIHtcblx0aWYgKGN1c3RvbVN0YXRzKSB7XG5cdFx0Y29uc3Qgc3RhdHM6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSB7fTtcblxuXHRcdGZvciAoY29uc3QgeyBjYiwgbmFtZSB9IG9mIGN1c3RvbVN0YXRzKSB7XG5cdFx0XHRpZiAodHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0c3RhdHNbbmFtZV0gPSBjYih0ZXh0KTtcblx0XHRcdH0gZWxzZSBpZiAoIWNiICYmIG5hbWUgaW4gZGVmYXVsdFN0YXRzKSB7XG5cdFx0XHRcdHN0YXRzW25hbWVdID0gZGVmYXVsdFN0YXRzW25hbWVdKHRleHQpO1xuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgY2IgPT09IFwic3RyaW5nXCIgJiYgY2IgaW4gZGVmYXVsdFN0YXRzKSB7XG5cdFx0XHRcdHN0YXRzW25hbWVdID0gZGVmYXVsdFN0YXRzW2NiXSh0ZXh0KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHN0YXRzO1xuXHR9XG5cdHJldHVybiB7XG5cdFx0Y2hhcnM6IGRlZmF1bHRTdGF0cy5jaGFycyh0ZXh0KSxcblx0XHR3b3JkczogZGVmYXVsdFN0YXRzLndvcmRzKHRleHQpLFxuXHRcdGNoYXJzRXhsU3BhY2U6IGRlZmF1bHRTdGF0cy5jaGFyc0V4bFNwYWNlKHRleHQpLFxuXHR9O1xufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0UmVuZGVyU3RhdCgpIHtcblx0cmV0dXJuIFt7IG5hbWU6IFwiY2hhcnNcIiB9LCB7IG5hbWU6IFwiY2hhcnNFeGxTcGFjZVwiIH0sIHsgbmFtZTogXCJ3b3Jkc1wiIH1dO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhdHNSZW5kZXJlcihcblx0c3RhdHM6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0sXG5cdHN0YXRTZXF1ZW5jZTogSVN0YXRbXSA9IGdldERlZmF1bHRSZW5kZXJTdGF0KClcbik6ICgpID0+IGFueSB7XG5cdHJldHVybiAoKSA9PlxuXHRcdGVsKFxuXHRcdFx0XCJ1bC5kaHhfcmljaHRleHQtc3RhdFwiLFxuXHRcdFx0c3RhdFNlcXVlbmNlLm1hcChzdGF0ID0+XG5cdFx0XHRcdGVsKFwibGkuZGh4X3JpY2h0ZXh0LXN0YXRfX2l0ZW1cIiwgW1xuXHRcdFx0XHRcdGVsKFwic3Bhbi5kaHhfcmljaHRleHQtc3RhdF9fbmFtZVwiLCBsb2NhbGVbc3RhdC5uYW1lXSB8fCBzdGF0Lm5hbWUpLFxuXHRcdFx0XHRcdGVsKFwic3Bhbi5kaHhfcmljaHRleHQtc3RhdF9fdmFsdWVcIiwgc3RhdHNbc3RhdC5uYW1lXSksXG5cdFx0XHRcdF0pXG5cdFx0XHQpXG5cdFx0KTtcbn1cbiIsImltcG9ydCB7IGVsIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2RvbVwiO1xuaW1wb3J0IHsgZGVmYXVsdEZvbnRTaXplQnlCbG9jayB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEJsb2NrIH0gZnJvbSBcIi4uL21vZGVscy9CbG9ja1wiO1xuaW1wb3J0IHsgVGV4dE5vZGUgfSBmcm9tIFwiLi4vbW9kZWxzL1RleHROb2RlXCI7XG5pbXBvcnQgeyBJU3R5bGUsIE1vZGlmaWVyIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjVGV4dE5vZGVTdHlsZShtb2RpZmllcnM6IElTdHlsZSkge1xuXHRjb25zdCBzdHlsZTogYW55ID0ge307XG5cdGZvciAoY29uc3Qga2V5IGluIG1vZGlmaWVycykge1xuXHRcdGlmICghbW9kaWZpZXJzW2tleV0pIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRzd2l0Y2ggKGtleSkge1xuXHRcdFx0Y2FzZSBNb2RpZmllci5ib2xkOlxuXHRcdFx0XHRzdHlsZVtcImZvbnQtd2VpZ2h0XCJdID0gXCJib2xkXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBNb2RpZmllci5pdGFsaWM6XG5cdFx0XHRcdHN0eWxlW1wiZm9udC1zdHlsZVwiXSA9IFwiaXRhbGljXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBNb2RpZmllci51bmRlcmxpbmU6XG5cdFx0XHRcdGlmIChzdHlsZVtcInRleHQtZGVjb3JhdGlvblwiXSkge1xuXHRcdFx0XHRcdHN0eWxlW1widGV4dC1kZWNvcmF0aW9uXCJdICs9IFwiIHVuZGVybGluZVwiO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlW1widGV4dC1kZWNvcmF0aW9uXCJdID0gXCJ1bmRlcmxpbmVcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgTW9kaWZpZXIuc3RyaWtlOlxuXHRcdFx0XHRpZiAoc3R5bGVbXCJ0ZXh0LWRlY29yYXRpb25cIl0pIHtcblx0XHRcdFx0XHRzdHlsZVtcInRleHQtZGVjb3JhdGlvblwiXSArPSBcIiBsaW5lLXRocm91Z2hcIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVtcInRleHQtZGVjb3JhdGlvblwiXSA9IFwibGluZS10aHJvdWdoXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIE1vZGlmaWVyLmNvbG9yOlxuXHRcdFx0XHRzdHlsZS5jb2xvciA9IG1vZGlmaWVyc1trZXldO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgTW9kaWZpZXIuYmFja2dyb3VuZDpcblx0XHRcdFx0c3R5bGUuYmFja2dyb3VuZCA9IG1vZGlmaWVyc1trZXldO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgTW9kaWZpZXIuZm9udEZhbWlseTpcblx0XHRcdFx0c3R5bGVbXCJmb250LWZhbWlseVwiXSA9IG1vZGlmaWVyc1trZXldO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgTW9kaWZpZXIuZm9udFNpemU6XG5cdFx0XHRcdHN0eWxlW1wiZm9udC1zaXplXCJdID0gbW9kaWZpZXJzW2tleV07XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjQmxvY2tTdHlsZShtb2RpZmllcnM6IElTdHlsZSkge1xuXHRjb25zdCBzdHlsZTogYW55ID0ge307XG5cdGZvciAoY29uc3Qga2V5IGluIG1vZGlmaWVycykge1xuXHRcdGlmICghbW9kaWZpZXJzW2tleV0pIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRzd2l0Y2ggKGtleSkge1xuXHRcdFx0Y2FzZSBNb2RpZmllci5hbGlnbjpcblx0XHRcdFx0c3R5bGVbXCJ0ZXh0LWFsaWduXCJdID0gbW9kaWZpZXJzW2tleV07XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHlsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrU3R5bGVUb1RhZyhzdHlsZTogSVN0eWxlKSB7XG5cdGlmIChzdHlsZVtNb2RpZmllci5zdHlsZV0pIHtcblx0XHRyZXR1cm4gc3R5bGVbTW9kaWZpZXIuc3R5bGVdO1xuXHR9XG5cdHJldHVybiBcInBcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrcXVvdGVXcmFwcGVyKHN0eWxlOiBJU3R5bGUsIGJsb2NrSW5kZXg6IG51bWJlcikge1xuXHRpZiAoc3R5bGVbTW9kaWZpZXIuYmxvY2txdW90ZV0pIHtcblx0XHRyZXR1cm4gKC4uLmFyZ3MpID0+XG5cdFx0XHRlbChcblx0XHRcdFx0XCJibG9ja3F1b3RlXCIsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkaHhfb2Zmc2V0OiBibG9ja0luZGV4LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRbZWwoLi4uYXJncyldXG5cdFx0XHQpO1xuXHR9XG5cdHJldHVybiAoLi4uYXJncykgPT4gZWwoLi4uYXJncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wdXRlZE5vZGVTdHlsZSh0ZXh0Tm9kZTogVGV4dE5vZGUsIGJsb2NrOiBCbG9jaywgZGVmYXVsdE1vZGlmaWVycykge1xuXHRjb25zdCBjb21wdXRlZCA9IHt9O1xuXG5cdGZvciAoY29uc3Qga2V5IGluIHRleHROb2RlLnN0eWxlKSB7XG5cdFx0Y29tcHV0ZWRba2V5XSA9IHRleHROb2RlLnN0eWxlW2tleV07XG5cdH1cblxuXHRpZiAoIWNvbXB1dGVkW01vZGlmaWVyLmZvbnRTaXplXSkge1xuXHRcdGlmIChibG9jay5zdHlsZVtNb2RpZmllci5zdHlsZV0gJiYgYmxvY2suc3R5bGVbTW9kaWZpZXIuc3R5bGVdICE9PSBcInBcIikge1xuXHRcdFx0Y29tcHV0ZWRbTW9kaWZpZXIuZm9udFNpemVdID0gZGVmYXVsdEZvbnRTaXplQnlCbG9ja1tibG9jay5zdHlsZVtNb2RpZmllci5zdHlsZV1dO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb21wdXRlZFtNb2RpZmllci5mb250U2l6ZV0gPSBkZWZhdWx0TW9kaWZpZXJzW01vZGlmaWVyLmZvbnRTaXplXTtcblx0XHR9XG5cdH1cblxuXHRpZiAoIWNvbXB1dGVkW01vZGlmaWVyLmZvbnRGYW1pbHldKSB7XG5cdFx0Y29tcHV0ZWRbTW9kaWZpZXIuZm9udEZhbWlseV0gPSBkZWZhdWx0TW9kaWZpZXJzW01vZGlmaWVyLmZvbnRGYW1pbHldO1xuXHR9XG5cblx0cmV0dXJuIGNvbXB1dGVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRCbG9ja1N0eWxlKGJsb2NrOiBCbG9jaywgZGVmYXVsdE1vZGlmaWVycykge1xuXHRjb25zdCBjb21wdXRlZCA9IHt9O1xuXG5cdGZvciAoY29uc3Qga2V5IGluIGJsb2NrLnN0eWxlKSB7XG5cdFx0Y29tcHV0ZWRba2V5XSA9IGJsb2NrLnN0eWxlW2tleV07XG5cdH1cblxuXHRpZiAoIWNvbXB1dGVkW01vZGlmaWVyLnN0eWxlXSkge1xuXHRcdGNvbXB1dGVkW01vZGlmaWVyLnN0eWxlXSA9IGRlZmF1bHRNb2RpZmllcnNbTW9kaWZpZXIuc3R5bGVdO1xuXHR9XG5cdGlmICghY29tcHV0ZWRbTW9kaWZpZXIuYWxpZ25dKSB7XG5cdFx0Y29tcHV0ZWRbTW9kaWZpZXIuYWxpZ25dID0gZGVmYXVsdE1vZGlmaWVyc1tNb2RpZmllci5hbGlnbl07XG5cdH1cblx0aWYgKCFjb21wdXRlZFtNb2RpZmllci5ibG9ja3F1b3RlXSkge1xuXHRcdGNvbXB1dGVkW01vZGlmaWVyLmJsb2NrcXVvdGVdID0gZGVmYXVsdE1vZGlmaWVyc1tNb2RpZmllci5ibG9ja3F1b3RlXTtcblx0fVxuXG5cdHJldHVybiBjb21wdXRlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlCbG9ja1N0eWxlKHN0eWxlOiBJU3R5bGUpIHtcblx0cmV0dXJuICFzdHlsZVtNb2RpZmllci5ibG9ja3F1b3RlXSAmJiAhc3R5bGVbTW9kaWZpZXIuYWxpZ25dO1xufVxuIiwiaW1wb3J0IHsgQ29sb3JwaWNrZXIsIENvbG9ycGlja2VyRXZlbnRzIH0gZnJvbSBcIkBkaHgvdHMtY29sb3JwaWNrZXJcIjtcbmltcG9ydCB7IGxvY2F0ZU5vZGUgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vaHRtbFwiO1xuaW1wb3J0IHsgSWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcbmltcG9ydCB7IE5hdmlnYXRpb25CYXJFdmVudHMgfSBmcm9tIFwiQGRoeC90cy1uYXZiYXJcIjtcbmltcG9ydCB7IFBvcHVwIH0gZnJvbSBcIkBkaHgvdHMtcG9wdXBcIjtcbmltcG9ydCB7IFRvb2xiYXIgfSBmcm9tIFwiQGRoeC90cy10b29sYmFyXCI7XG5pbXBvcnQgeyBkZWZhdWx0RGlmZnJlbnRTdHlsZSwgZ2V0VG9vbGJhckRhdGEgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBhY3Rpb25JZFRvTW9kaWZpZXJWYWx1ZSwgc3RhcnRzV2l0aCwgdGV4dENvbG9yLCB0ZXh0U2VsZWN0Q29sb3IgfSBmcm9tIFwiLi4vaGVscGVycy9vdGhlclwiO1xuaW1wb3J0IGxvY2FsZSBmcm9tIFwiLi4vbG9jYWxlcy9lblwiO1xuaW1wb3J0IHsgRWRpdG9yIH0gZnJvbSBcIi4uL21vZGVscy9FZGl0b3JcIjtcbmltcG9ydCB7IEFjdGlvbiwgSVJpY2hUZXh0LCBNb2RpZmllciwgUmljaFRleHRFdmVudHMsIFJURVRvb2xiYXJCbG9jayB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgc3RhdHNSZW5kZXJlciB9IGZyb20gXCIuL3N0YXRpc3RpY3NcIjtcbmltcG9ydCB7IGdldENvbXB1dGVkQmxvY2tTdHlsZSwgZ2V0Q29tcHV0ZWROb2RlU3R5bGUgfSBmcm9tIFwiLi9zdHlsZXNcIjtcblxuLy8gbW92ZSB0byByaWNodGV4dCBjb25maWdcbmNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcblx0Ly8gdGV4dG5vZGUgc3R5bGVcblx0W01vZGlmaWVyLmZvbnRGYW1pbHldOiBcIlJvYm90b1wiLFxuXHRbTW9kaWZpZXIuZm9udFNpemVdOiBcIjE0cHhcIixcblx0W01vZGlmaWVyLmNvbG9yXTogXCIjNEQ0RDREXCIsXG5cdFtNb2RpZmllci5iYWNrZ3JvdW5kXTogXCIjRkZGRkZGXCIsXG5cdFtNb2RpZmllci5ib2xkXTogZmFsc2UsXG5cdFtNb2RpZmllci5pdGFsaWNdOiBmYWxzZSxcblx0W01vZGlmaWVyLnN0cmlrZV06IGZhbHNlLFxuXHRbTW9kaWZpZXIudW5kZXJsaW5lXTogZmFsc2UsXG5cdC8vIGJsb2NrIHN0eWxlXG5cdFtNb2RpZmllci5zdHlsZV06IFwicFwiLFxuXHRbTW9kaWZpZXIuYmxvY2txdW90ZV06IGZhbHNlLFxuXHRbTW9kaWZpZXIuYWxpZ25dOiBcImxlZnRcIixcbn07XG5cbmV4cG9ydCBjbGFzcyBSaWNoVGV4dFRvb2xiYXJIZWxwZXIge1xuXHRwdWJsaWMgdG9vbGJhcjogVG9vbGJhcjtcblx0cHVibGljIGNvbG9ycGlja2VyOiBDb2xvcnBpY2tlcjtcblxuXHRwcml2YXRlIF9zdGF0c1BvcHVwOiBQb3B1cDtcblx0cHJpdmF0ZSBfY29sb3JwaWNrZXJQb3B1cDogUG9wdXA7XG5cblx0cHJpdmF0ZSBfY29sb3JwaWNrZXJUYXJnZXQ6IE1vZGlmaWVyLmJhY2tncm91bmQgfCBNb2RpZmllci5jb2xvcjtcblxuXHRwcml2YXRlIF9wYXJlbnQ6IElSaWNoVGV4dDtcblx0cHJpdmF0ZSBfZWRpdG9yOiBFZGl0b3I7XG5cblx0cHJpdmF0ZSBfZGVmYXVsdFRvb2xiYXJTdGF0ZTtcblxuXHRjb25zdHJ1Y3RvcihwYXJlbnQ6IElSaWNoVGV4dCwgZWRpdG9yOiBFZGl0b3IpIHtcblx0XHR0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0dGhpcy5fZWRpdG9yID0gZWRpdG9yO1xuXG5cdFx0dGhpcy5jb2xvcnBpY2tlciA9IG5ldyBDb2xvcnBpY2tlcihudWxsKTtcblx0XHR0aGlzLl9jb2xvcnBpY2tlclBvcHVwID0gbmV3IFBvcHVwKCk7XG5cdFx0dGhpcy5fY29sb3JwaWNrZXJQb3B1cC5hdHRhY2godGhpcy5jb2xvcnBpY2tlcik7XG5cblx0XHR0aGlzLl9zdGF0c1BvcHVwID0gbmV3IFBvcHVwKCk7XG5cdFx0dGhpcy5fcGFyZW50LmV2ZW50cy5vbihSaWNoVGV4dEV2ZW50cy5jaGFuZ2UsICgpID0+IHtcblx0XHRcdGlmICh0aGlzLl9zdGF0c1BvcHVwLmlzVmlzaWJsZSgpKSB7XG5cdFx0XHRcdHRoaXMuX3N0YXRzUG9wdXAuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgeyB0b29sYmFyQmxvY2tzIH0gPSBwYXJlbnQuY29uZmlnO1xuXHRcdHRoaXMudG9vbGJhciA9IG5ldyBUb29sYmFyKG51bGwsIHtcblx0XHRcdGNzczogXCJkaHhfd2lkZ2V0LS1ib3JkZXJlZCBkaHhfd2lkZ2V0LS1iZ19ncmF5XCIsXG5cdFx0fSk7XG5cdFx0dGhpcy50b29sYmFyLmRhdGEucGFyc2UoZ2V0VG9vbGJhckRhdGEodG9vbGJhckJsb2NrcywgZGVmYXVsdFN0eWxlKSk7XG5cblx0XHR0aGlzLl9kZWZhdWx0VG9vbGJhclN0YXRlID0ge307XG5cblx0XHRmb3IgKGNvbnN0IGJsb2NrIG9mIHRvb2xiYXJCbG9ja3MpIHtcblx0XHRcdHN3aXRjaCAoYmxvY2spIHtcblx0XHRcdFx0Y2FzZSBSVEVUb29sYmFyQmxvY2suYWxpZ246XG5cdFx0XHRcdFx0dGhpcy5fZGVmYXVsdFRvb2xiYXJTdGF0ZVtNb2RpZmllci5hbGlnbl0gPSBkZWZhdWx0U3R5bGVbTW9kaWZpZXIuYWxpZ25dO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFJURVRvb2xiYXJCbG9jay5jb2xvcjpcblx0XHRcdFx0XHR0aGlzLl9kZWZhdWx0VG9vbGJhclN0YXRlW01vZGlmaWVyLmNvbG9yXSA9IGRlZmF1bHRTdHlsZVtNb2RpZmllci5jb2xvcl07XG5cdFx0XHRcdFx0dGhpcy5fZGVmYXVsdFRvb2xiYXJTdGF0ZVtNb2RpZmllci5iYWNrZ3JvdW5kXSA9IGRlZmF1bHRTdHlsZVtNb2RpZmllci5iYWNrZ3JvdW5kXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBSVEVUb29sYmFyQmxvY2suZGVjb3JhdGlvbjpcblx0XHRcdFx0XHR0aGlzLl9kZWZhdWx0VG9vbGJhclN0YXRlW01vZGlmaWVyLmJvbGRdID0gZGVmYXVsdFN0eWxlW01vZGlmaWVyLmJvbGRdO1xuXHRcdFx0XHRcdHRoaXMuX2RlZmF1bHRUb29sYmFyU3RhdGVbTW9kaWZpZXIuaXRhbGljXSA9IGRlZmF1bHRTdHlsZVtNb2RpZmllci5pdGFsaWNdO1xuXHRcdFx0XHRcdHRoaXMuX2RlZmF1bHRUb29sYmFyU3RhdGVbTW9kaWZpZXIudW5kZXJsaW5lXSA9IGRlZmF1bHRTdHlsZVtNb2RpZmllci51bmRlcmxpbmVdO1xuXHRcdFx0XHRcdHRoaXMuX2RlZmF1bHRUb29sYmFyU3RhdGVbTW9kaWZpZXIuc3RyaWtlXSA9IGRlZmF1bHRTdHlsZVtNb2RpZmllci5zdHJpa2VdO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFJURVRvb2xiYXJCbG9jay5zdHlsZTpcblx0XHRcdFx0XHR0aGlzLl9kZWZhdWx0VG9vbGJhclN0YXRlW01vZGlmaWVyLnN0eWxlXSA9IGRlZmF1bHRTdHlsZVtNb2RpZmllci5zdHlsZV07XG5cdFx0XHRcdFx0dGhpcy5fZGVmYXVsdFRvb2xiYXJTdGF0ZVtNb2RpZmllci5mb250RmFtaWx5XSA9IGRlZmF1bHRTdHlsZVtNb2RpZmllci5mb250RmFtaWx5XTtcblx0XHRcdFx0XHR0aGlzLl9kZWZhdWx0VG9vbGJhclN0YXRlW01vZGlmaWVyLmZvbnRTaXplXSA9IGRlZmF1bHRTdHlsZVtNb2RpZmllci5mb250U2l6ZV07XG5cdFx0XHRcdFx0dGhpcy5fZGVmYXVsdFRvb2xiYXJTdGF0ZVtNb2RpZmllci5ibG9ja3F1b3RlXSA9IGRlZmF1bHRTdHlsZVtNb2RpZmllci5ibG9ja3F1b3RlXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLl9pbml0RXZlbnRzKCk7XG5cdH1cblxuXHRwcml2YXRlIF9pbml0RXZlbnRzKCkge1xuXHRcdHRoaXMuX3BhcmVudC5ldmVudHMub24oUmljaFRleHRFdmVudHMuc2VsZWN0aW9uQ2hhbmdlLCAoKSA9PiB7XG5cdFx0XHR0aGlzLl91cGRhdGVTdGF0ZSgpO1xuXHRcdH0pO1xuXHRcdHRoaXMuX3BhcmVudC5ldmVudHMub24oUmljaFRleHRFdmVudHMuY2hhbmdlLCAoYWN0aW9uLCBjYW5VbmRvLCBjYW5SZWRvKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5fcGFyZW50LmNvbmZpZy50b29sYmFyQmxvY2tzLmluY2x1ZGVzKFJURVRvb2xiYXJCbG9jay51bmRvKSkge1xuXHRcdFx0XHR0aGlzLl91cGRhdGVVbmRvUmVkb1N0YXRlKGNhblVuZG8sIGNhblJlZG8pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFjdGlvbiAhPT0gQWN0aW9uLnVwZGF0ZSkge1xuXHRcdFx0XHR0aGlzLl91cGRhdGVTdGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5jb2xvcnBpY2tlci5ldmVudHMub24oQ29sb3JwaWNrZXJFdmVudHMuY2hhbmdlLCBjb2xvciA9PiB7XG5cdFx0XHR0aGlzLl9jb2xvcnBpY2tlclBvcHVwLmhpZGUoKTtcblx0XHRcdHRoaXMuX3BhcmVudC5ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5hY3Rpb24sIFtcblx0XHRcdFx0QWN0aW9uLnVwZGF0ZSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG1vZGlmaWVyOiB0aGlzLl9jb2xvcnBpY2tlclRhcmdldCxcblx0XHRcdFx0XHRtb2RpZmllclZhbHVlOiBjb2xvcixcblx0XHRcdFx0fSxcblx0XHRcdFx0dHJ1ZSxcblx0XHRcdF0pO1xuXHRcdFx0dGhpcy50b29sYmFyLmRhdGEudXBkYXRlKHRoaXMuX2NvbG9ycGlja2VyVGFyZ2V0LCB7XG5cdFx0XHRcdGh0bWw6IHRoaXMuX2NvbG9ycGlja2VyVGFyZ2V0ID09PSBNb2RpZmllci5jb2xvciA/IHRleHRDb2xvcihjb2xvcikgOiB0ZXh0U2VsZWN0Q29sb3IoY29sb3IpLFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLnRvb2xiYXIuZXZlbnRzLm9uKE5hdmlnYXRpb25CYXJFdmVudHMuY2xpY2ssIChpZCwgZSkgPT4gdGhpcy5fdG9vbGJhckFjdGlvbihpZCwgZSkpO1xuXHR9XG5cblx0cHJpdmF0ZSBfdG9vbGJhckFjdGlvbihpZDogSWQsIGUpIHtcblx0XHRjb25zdCBpdGVtID0gdGhpcy50b29sYmFyLmRhdGEuZ2V0SXRlbShpZCk7XG5cdFx0Y29uc3QgYWN0aXZlID0gIWl0ZW0uYWN0aXZlO1xuXHRcdGlkID0gaWQudG9TdHJpbmcoKTtcblxuXHRcdHN3aXRjaCAoaWQpIHtcblx0XHRcdGNhc2UgXCJib2xkXCI6XG5cdFx0XHRcdHRoaXMuX3BhcmVudC5ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5hY3Rpb24sIFtcblx0XHRcdFx0XHRBY3Rpb24udXBkYXRlLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdG1vZGlmaWVyOiBNb2RpZmllci5ib2xkLFxuXHRcdFx0XHRcdFx0bW9kaWZpZXJWYWx1ZTogYWN0aXZlLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0dHJ1ZSxcblx0XHRcdFx0XSk7XG5cdFx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShcImJvbGRcIiwgeyBhY3RpdmUgfSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInVuZGVybGluZVwiOlxuXHRcdFx0XHR0aGlzLl9wYXJlbnQuZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuYWN0aW9uLCBbXG5cdFx0XHRcdFx0QWN0aW9uLnVwZGF0ZSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRtb2RpZmllcjogTW9kaWZpZXIudW5kZXJsaW5lLFxuXHRcdFx0XHRcdFx0bW9kaWZpZXJWYWx1ZTogYWN0aXZlLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0dHJ1ZSxcblx0XHRcdFx0XSk7XG5cdFx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShcInVuZGVybGluZVwiLCB7IGFjdGl2ZSB9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiaXRhbGljXCI6XG5cdFx0XHRcdHRoaXMuX3BhcmVudC5ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5hY3Rpb24sIFtcblx0XHRcdFx0XHRBY3Rpb24udXBkYXRlLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdG1vZGlmaWVyOiBNb2RpZmllci5pdGFsaWMsXG5cdFx0XHRcdFx0XHRtb2RpZmllclZhbHVlOiBhY3RpdmUsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0cnVlLFxuXHRcdFx0XHRdKTtcblx0XHRcdFx0dGhpcy50b29sYmFyLmRhdGEudXBkYXRlKFwiaXRhbGljXCIsIHsgYWN0aXZlIH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJzdHJpa2VcIjpcblx0XHRcdFx0dGhpcy5fcGFyZW50LmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLmFjdGlvbiwgW1xuXHRcdFx0XHRcdEFjdGlvbi51cGRhdGUsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bW9kaWZpZXI6IE1vZGlmaWVyLnN0cmlrZSxcblx0XHRcdFx0XHRcdG1vZGlmaWVyVmFsdWU6IGFjdGl2ZSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHRydWUsXG5cdFx0XHRcdF0pO1xuXHRcdFx0XHR0aGlzLnRvb2xiYXIuZGF0YS51cGRhdGUoXCJzdHJpa2VcIiwgeyBhY3RpdmUgfSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImNvbG9yXCI6XG5cdFx0XHRjYXNlIFwiYmFja2dyb3VuZFwiOiB7XG5cdFx0XHRcdHRoaXMuX2NvbG9ycGlja2VyVGFyZ2V0ID0gaWQgPT09IE1vZGlmaWVyLmJhY2tncm91bmQgPyBNb2RpZmllci5iYWNrZ3JvdW5kIDogTW9kaWZpZXIuY29sb3I7XG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRDb2xvciA9IHRoaXMuX2dldENvbG9yU3RhdGUodGhpcy5fY29sb3JwaWNrZXJUYXJnZXQpO1xuXHRcdFx0XHR0aGlzLmNvbG9ycGlja2VyLnNldFZhbHVlKGN1cnJlbnRDb2xvcik7XG5cdFx0XHRcdHRoaXMuY29sb3JwaWNrZXIucGFpbnQoKTtcblx0XHRcdFx0dGhpcy5fY29sb3JwaWNrZXJQb3B1cC5zaG93KGxvY2F0ZU5vZGUoZS50YXJnZXQsIFwiZGh4X2lkXCIpIGFzIEhUTUxFbGVtZW50LCB7XG5cdFx0XHRcdFx0bW9kZTogXCJib3R0b21cIixcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSBcImxpbmtcIjpcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0dGhpcy5fcGFyZW50LmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLnNob3dMaW5rRWRpdG9yKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwicmVkb1wiOlxuXHRcdFx0XHR0aGlzLl9wYXJlbnQuZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuYWN0aW9uLCBbQWN0aW9uLnJlZG8sIG51bGwsIHRydWVdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwidW5kb1wiOlxuXHRcdFx0XHR0aGlzLl9wYXJlbnQuZXZlbnRzLmZpcmUoUmljaFRleHRFdmVudHMuYWN0aW9uLCBbQWN0aW9uLnVuZG8sIG51bGwsIHRydWVdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiY2xlYXItc3R5bGVcIjpcblx0XHRcdFx0dGhpcy5fcGFyZW50LmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLmFjdGlvbiwgW0FjdGlvbi5jbGVhciwgbnVsbCwgdHJ1ZV0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJibG9ja3F1b3RlXCI6XG5cdFx0XHRcdHRoaXMuX3BhcmVudC5ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5hY3Rpb24sIFtcblx0XHRcdFx0XHRBY3Rpb24udXBkYXRlLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdG1vZGlmaWVyOiBNb2RpZmllci5ibG9ja3F1b3RlLFxuXHRcdFx0XHRcdFx0bW9kaWZpZXJWYWx1ZTogYWN0aXZlLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0dHJ1ZSxcblx0XHRcdFx0XSk7XG5cdFx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShcImJsb2NrcXVvdGVcIiwgeyBhY3RpdmUgfSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImZ1bGxzY3JlZW5cIjpcblx0XHRcdFx0aWYgKGl0ZW0uJGZ1bGxzY3JlZW4pIHtcblx0XHRcdFx0XHR0aGlzLl9wYXJlbnQuZXhpdEZ1bGxTY3JlZW4oKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9wYXJlbnQuZnVsbFNjcmVlbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInN0YXRzXCI6IHtcblx0XHRcdFx0Y29uc3Qgbm9kZSA9IGxvY2F0ZU5vZGUoZSkgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0XHRcdGNvbnN0IGlzUmFuZ2UgPSB0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLmdldCgpLnJhbmdlO1xuXHRcdFx0XHR0aGlzLl9zdGF0c1BvcHVwLmF0dGFjaChcblx0XHRcdFx0XHRzdGF0c1JlbmRlcmVyKHRoaXMuX3BhcmVudC5nZXRTdGF0cyhpc1JhbmdlKSwgdGhpcy5fcGFyZW50LmNvbmZpZy5jdXN0b21TdGF0cylcblx0XHRcdFx0KTtcblx0XHRcdFx0dGhpcy5fc3RhdHNQb3B1cC5zaG93KG5vZGUsIHsgbW9kZTogXCJib3R0b21cIiwgY2VudGVyaW5nOiB0cnVlIH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0Y29uc3QgbW9kaWZpZXJWYWx1ZSA9IGFjdGlvbklkVG9Nb2RpZmllclZhbHVlKGlkKTtcblx0XHRcdFx0c3dpdGNoICh0cnVlKSB7XG5cdFx0XHRcdFx0Y2FzZSBzdGFydHNXaXRoKGlkLCBcImZvbnQtc2l6ZVwiKTpcblx0XHRcdFx0XHRcdGlmIChtb2RpZmllclZhbHVlID09PSBcInNpemVcIikgcmV0dXJuO1xuXHRcdFx0XHRcdFx0dGhpcy5fcGFyZW50LmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLmFjdGlvbiwgW1xuXHRcdFx0XHRcdFx0XHRBY3Rpb24udXBkYXRlLFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bW9kaWZpZXI6IE1vZGlmaWVyLmZvbnRTaXplLFxuXHRcdFx0XHRcdFx0XHRcdG1vZGlmaWVyVmFsdWU6IG1vZGlmaWVyVmFsdWUgKyBcInB4XCIsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHRydWUsXG5cdFx0XHRcdFx0XHRdKTtcblx0XHRcdFx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShNb2RpZmllci5mb250U2l6ZSwge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZTogbW9kaWZpZXJWYWx1ZSArIFwicHhcIixcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBzdGFydHNXaXRoKGlkLCBcImFsaWduXCIpOlxuXHRcdFx0XHRcdFx0dGhpcy5fcGFyZW50LmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLmFjdGlvbiwgW1xuXHRcdFx0XHRcdFx0XHRBY3Rpb24udXBkYXRlLFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bW9kaWZpZXI6IE1vZGlmaWVyLmFsaWduLFxuXHRcdFx0XHRcdFx0XHRcdG1vZGlmaWVyVmFsdWUsXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHRydWUsXG5cdFx0XHRcdFx0XHRdKTtcblx0XHRcdFx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShcImFsaWduLWxlZnRcIiwge1xuXHRcdFx0XHRcdFx0XHRhY3RpdmU6IG1vZGlmaWVyVmFsdWUgPT09IFwibGVmdFwiLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR0aGlzLnRvb2xiYXIuZGF0YS51cGRhdGUoXCJhbGlnbi1yaWdodFwiLCB7XG5cdFx0XHRcdFx0XHRcdGFjdGl2ZTogbW9kaWZpZXJWYWx1ZSA9PT0gXCJyaWdodFwiLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR0aGlzLnRvb2xiYXIuZGF0YS51cGRhdGUoXCJhbGlnbi1jZW50ZXJcIiwge1xuXHRcdFx0XHRcdFx0XHRhY3RpdmU6IG1vZGlmaWVyVmFsdWUgPT09IFwiY2VudGVyXCIsXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2Ugc3RhcnRzV2l0aChpZCwgXCJzdHlsZVwiKTpcblx0XHRcdFx0XHRcdGlmIChtb2RpZmllclZhbHVlID09PSBcInN0eWxlXCIpIHJldHVybjtcblx0XHRcdFx0XHRcdHRoaXMuX3BhcmVudC5ldmVudHMuZmlyZShSaWNoVGV4dEV2ZW50cy5hY3Rpb24sIFtcblx0XHRcdFx0XHRcdFx0QWN0aW9uLnVwZGF0ZSxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdG1vZGlmaWVyOiBNb2RpZmllci5zdHlsZSxcblx0XHRcdFx0XHRcdFx0XHRtb2RpZmllclZhbHVlLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR0cnVlLFxuXHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHR0aGlzLnRvb2xiYXIuZGF0YS51cGRhdGUoTW9kaWZpZXIuc3R5bGUsIHtcblx0XHRcdFx0XHRcdFx0dmFsdWU6IGxvY2FsZVttb2RpZmllclZhbHVlXSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBzdGFydHNXaXRoKGlkLCBcImZvbnRcIik6XG5cdFx0XHRcdFx0XHRpZiAobW9kaWZpZXJWYWx1ZSA9PT0gXCJmYW1pbHlcIikgcmV0dXJuO1xuXHRcdFx0XHRcdFx0dGhpcy5fcGFyZW50LmV2ZW50cy5maXJlKFJpY2hUZXh0RXZlbnRzLmFjdGlvbiwgW1xuXHRcdFx0XHRcdFx0XHRBY3Rpb24udXBkYXRlLFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bW9kaWZpZXI6IE1vZGlmaWVyLmZvbnRGYW1pbHksXG5cdFx0XHRcdFx0XHRcdFx0bW9kaWZpZXJWYWx1ZTogYWN0aW9uSWRUb01vZGlmaWVyVmFsdWUoaWQpLFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR0cnVlLFxuXHRcdFx0XHRcdFx0XSk7XG5cdFx0XHRcdFx0XHR0aGlzLnRvb2xiYXIuZGF0YS51cGRhdGUoTW9kaWZpZXIuZm9udEZhbWlseSwge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZTogbW9kaWZpZXJWYWx1ZSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIF91cGRhdGVTdGF0ZSgpIHtcblx0XHRjb25zdCBtb2RpZmllcnMgPSB0aGlzLl9nZXRDb21tb25Nb2RpZmllcnMoKTtcblxuXHRcdGZvciAoY29uc3Qga2V5IGluIG1vZGlmaWVycykge1xuXHRcdFx0aWYgKHRoaXMudG9vbGJhci5kYXRhLmdldEl0ZW0oa2V5KSkge1xuXHRcdFx0XHRzd2l0Y2ggKGtleSkge1xuXHRcdFx0XHRcdC8vIGJsb2NrIG1vZGlmaWVyc1xuXHRcdFx0XHRcdGNhc2UgTW9kaWZpZXIuYWxpZ246XG5cdFx0XHRcdFx0XHR0aGlzLnRvb2xiYXIuZGF0YS51cGRhdGUoXCJhbGlnbi1sZWZ0XCIsIHtcblx0XHRcdFx0XHRcdFx0YWN0aXZlOiBtb2RpZmllcnNba2V5XSA9PT0gXCJsZWZ0XCIsXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShcImFsaWduLXJpZ2h0XCIsIHtcblx0XHRcdFx0XHRcdFx0YWN0aXZlOiBtb2RpZmllcnNba2V5XSA9PT0gXCJyaWdodFwiLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR0aGlzLnRvb2xiYXIuZGF0YS51cGRhdGUoXCJhbGlnbi1jZW50ZXJcIiwge1xuXHRcdFx0XHRcdFx0XHRhY3RpdmU6IG1vZGlmaWVyc1trZXldID09PSBcImNlbnRlclwiLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIE1vZGlmaWVyLnN0eWxlOlxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuX3BhcmVudC5jb25maWcudG9vbGJhckJsb2Nrcy5pbmNsdWRlcyhSVEVUb29sYmFyQmxvY2suc3R5bGUpKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShrZXksIHsgdmFsdWU6IGxvY2FsZVttb2RpZmllcnNba2V5XV0gfSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIE1vZGlmaWVyLmJsb2NrcXVvdGU6XG5cdFx0XHRcdFx0XHR0aGlzLnRvb2xiYXIuZGF0YS51cGRhdGUoXCJibG9ja3F1b3RlXCIsIHsgYWN0aXZlOiBtb2RpZmllcnNba2V5XSB9KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdC8vIHRleHQgbW9kaWZpZXJzXG5cdFx0XHRcdFx0Y2FzZSBNb2RpZmllci5jb2xvcjpcblx0XHRcdFx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShrZXksIHtcblx0XHRcdFx0XHRcdFx0aHRtbDogdGV4dENvbG9yKG1vZGlmaWVyc1trZXldKSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBNb2RpZmllci5iYWNrZ3JvdW5kOlxuXHRcdFx0XHRcdFx0dGhpcy50b29sYmFyLmRhdGEudXBkYXRlKGtleSwge1xuXHRcdFx0XHRcdFx0XHRodG1sOiB0ZXh0U2VsZWN0Q29sb3IobW9kaWZpZXJzW2tleV0pLFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIE1vZGlmaWVyLmZvbnRGYW1pbHk6XG5cdFx0XHRcdFx0Y2FzZSBNb2RpZmllci5mb250U2l6ZTpcblx0XHRcdFx0XHRcdHRoaXMudG9vbGJhci5kYXRhLnVwZGF0ZShrZXksIHsgdmFsdWU6IG1vZGlmaWVyc1trZXldIH0pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBNb2RpZmllci5pdGFsaWM6XG5cdFx0XHRcdFx0Y2FzZSBNb2RpZmllci5ib2xkOlxuXHRcdFx0XHRcdGNhc2UgTW9kaWZpZXIudW5kZXJsaW5lOlxuXHRcdFx0XHRcdGNhc2UgTW9kaWZpZXIuc3RyaWtlOlxuXHRcdFx0XHRcdFx0dGhpcy50b29sYmFyLmRhdGEudXBkYXRlKGtleSwgeyBhY3RpdmU6IG1vZGlmaWVyc1trZXldIH0pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfdXBkYXRlVW5kb1JlZG9TdGF0ZShjYW5VbmRvOiBib29sZWFuLCBjYW5SZWRvOiBib29sZWFuKSB7XG5cdFx0aWYgKGNhblVuZG8pIHtcblx0XHRcdHRoaXMudG9vbGJhci5lbmFibGUoXCJ1bmRvXCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnRvb2xiYXIuZGlzYWJsZShcInVuZG9cIik7XG5cdFx0fVxuXHRcdGlmIChjYW5SZWRvKSB7XG5cdFx0XHR0aGlzLnRvb2xiYXIuZW5hYmxlKFwicmVkb1wiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50b29sYmFyLmRpc2FibGUoXCJyZWRvXCIpO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9nZXRDb21tb25Nb2RpZmllcnMoKSB7XG5cdFx0bGV0IGNvbW1vblRleHRTdHlsZTtcblx0XHRsZXQgY29tbW9uQmxvY2tTdHlsZTtcblxuXHRcdHRoaXMuX2VkaXRvci5lYWNoU2VsZWN0ZWROb2RlKChub2RlLCBibG9jaykgPT4ge1xuXHRcdFx0aWYgKCFjb21tb25UZXh0U3R5bGUpIHtcblx0XHRcdFx0Y29tbW9uVGV4dFN0eWxlID0gZ2V0Q29tcHV0ZWROb2RlU3R5bGUobm9kZSwgYmxvY2ssIHRoaXMuX2RlZmF1bHRUb29sYmFyU3RhdGUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkTm9kZVN0eWxlKG5vZGUsIGJsb2NrLCB0aGlzLl9kZWZhdWx0VG9vbGJhclN0YXRlKTtcblx0XHRcdGZvciAoY29uc3Qga2V5IGluIGNvbW1vblRleHRTdHlsZSkge1xuXHRcdFx0XHRpZiAoY29tbW9uVGV4dFN0eWxlW2tleV0gIT09IHN0eWxlW2tleV0pIHtcblx0XHRcdFx0XHRkZWxldGUgY29tbW9uVGV4dFN0eWxlW2tleV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLl9lZGl0b3IuZWFjaFNlbGVjdGVkQmxvY2soYmxvY2sgPT4ge1xuXHRcdFx0aWYgKCFjb21tb25CbG9ja1N0eWxlKSB7XG5cdFx0XHRcdGNvbW1vbkJsb2NrU3R5bGUgPSBnZXRDb21wdXRlZEJsb2NrU3R5bGUoYmxvY2ssIHRoaXMuX2RlZmF1bHRUb29sYmFyU3RhdGUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkQmxvY2tTdHlsZShibG9jaywgdGhpcy5fZGVmYXVsdFRvb2xiYXJTdGF0ZSk7XG5cdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBjb21tb25CbG9ja1N0eWxlKSB7XG5cdFx0XHRcdGlmIChjb21tb25CbG9ja1N0eWxlW2tleV0gIT09IHN0eWxlW2tleV0pIHtcblx0XHRcdFx0XHRkZWxldGUgY29tbW9uQmxvY2tTdHlsZVtrZXldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLmRlZmF1bHREaWZmcmVudFN0eWxlLFxuXHRcdFx0Li4uY29tbW9uQmxvY2tTdHlsZSxcblx0XHRcdC4uLmNvbW1vblRleHRTdHlsZSxcblx0XHR9O1xuXHR9XG5cdHByaXZhdGUgX2dldENvbG9yU3RhdGUobW9kaWZpZXIpIHtcblx0XHRjb25zdCBkZWZhdWx0Q29sb3IgPSBkZWZhdWx0U3R5bGVbbW9kaWZpZXJdO1xuXHRcdGxldCBpc1NhbWUgPSB0cnVlO1xuXHRcdGxldCBpbml0Q29sb3I7XG5cblx0XHR0aGlzLl9lZGl0b3IuZWFjaFNlbGVjdGVkTm9kZShub2RlID0+IHtcblx0XHRcdGNvbnN0IGNvbG9yID0gbm9kZS5zdHlsZVttb2RpZmllcl0gfHwgZGVmYXVsdENvbG9yO1xuXG5cdFx0XHRpZiAoIWluaXRDb2xvcikge1xuXHRcdFx0XHRpbml0Q29sb3IgPSBjb2xvcjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlzU2FtZSA9IGlzU2FtZSAmJiBpbml0Q29sb3IgPT09IGNvbG9yO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGlzU2FtZSA/IGluaXRDb2xvciA6IGRlZmF1bHRDb2xvcjtcblx0fVxufVxuIiwiaW1wb3J0IHsgQWN0aW9uLCBJT3BlcmF0aW9uIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGVudW0gS2V5IHtcblx0YmFja3NwYWNlID0gOCxcblx0ZW50ZXIgPSAxMyxcblx0dGFiID0gOSxcblx0ZXNjID0gMjcsXG5cdHNwYWNlID0gMzIsXG5cdGxlZnQgPSAzNyxcblx0dXAgPSAzOCxcblx0cmlnaHQgPSAzOSxcblx0ZG93biA9IDQwLFxuXHRpbnNlcnQgPSA0NSxcblx0ZGVsID0gNDYsXG5cdGN0cmwgPSAxNyxcblx0YSA9IDY1LFxuXHRiID0gNjYsXG5cdGMgPSA2Nyxcblx0cyA9IDgzLFxuXHR1ID0gODUsXG5cdHYgPSA4Nixcblx0eCA9IDg4LFxuXHR5ID0gODksXG5cdHogPSA5MCxcblx0aSA9IDczLFxufVxuXG5mdW5jdGlvbiBjdHJsS2V5KGU6IEtleWJvYXJkRXZlbnQpOiBJT3BlcmF0aW9uIHtcblx0Y29uc3Qga2V5ID0gZS53aGljaDtcblx0c3dpdGNoIChrZXkpIHtcblx0XHRjYXNlIEtleS56OlxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0YWN0aW9uOiBlLnNoaWZ0S2V5ID8gQWN0aW9uLnJlZG8gOiBBY3Rpb24udW5kbyxcblx0XHRcdH07XG5cdFx0Y2FzZSBLZXkueTpcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGFjdGlvbjogQWN0aW9uLnJlZG8sXG5cdFx0XHR9O1xuXHRcdGNhc2UgS2V5LmE6XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRhY3Rpb246IEFjdGlvbi5zZWxlY3RBbGwsXG5cdFx0XHR9O1xuXHRcdGNhc2UgS2V5LnY6XG5cdFx0Y2FzZSBLZXkueDpcblx0XHRjYXNlIEtleS5jOlxuXHRcdFx0cmV0dXJuO1xuXHRcdGNhc2UgS2V5LnU6XG5cdFx0Y2FzZSBLZXkuaTpcblx0XHRjYXNlIEtleS5iOlxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0cmV0dXJuO1xuXHR9XG5cdHJldHVybjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGtleVRvT3BlcmF0aW9uKGU6IEtleWJvYXJkRXZlbnQpOiBJT3BlcmF0aW9uIHtcblx0aWYgKGUuc2hpZnRLZXkgJiYgZS53aGljaCA9PT0gS2V5LmVudGVyKSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRhY3Rpb246IEFjdGlvbi5hZGQsXG5cdFx0XHRkYXRhOiBcIlxcblwiLFxuXHRcdH07XG5cdH1cblxuXHRzd2l0Y2ggKGUud2hpY2gpIHtcblx0XHRjYXNlIEtleS5pbnNlcnQ6XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0Y2FzZSBLZXkubGVmdDpcblx0XHRjYXNlIEtleS5yaWdodDpcblx0XHRjYXNlIEtleS5kb3duOlxuXHRcdGNhc2UgS2V5LnVwOlxuXHRcdFx0cmV0dXJuO1xuXHRcdGNhc2UgS2V5LmJhY2tzcGFjZTpcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGFjdGlvbjogQWN0aW9uLnJlbW92ZSxcblx0XHRcdFx0ZGF0YTogdHJ1ZSxcblx0XHRcdH07XG5cdFx0Y2FzZSBLZXkuZGVsOlxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0YWN0aW9uOiBBY3Rpb24ucmVtb3ZlLFxuXHRcdFx0XHRkYXRhOiBmYWxzZSxcblx0XHRcdH07XG5cdFx0Y2FzZSBLZXkuc3BhY2U6XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRhY3Rpb246IEFjdGlvbi5hZGQsXG5cdFx0XHRcdGRhdGE6IFwiIFwiLFxuXHRcdFx0fTtcblx0XHRjYXNlIEtleS5lbnRlcjpcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGFjdGlvbjogQWN0aW9uLmFkZCxcblx0XHRcdFx0ZGF0YTogeyBuZXdCbG9jazogdHJ1ZSB9LFxuXHRcdFx0fTtcblx0fVxuXG5cdGlmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSB7XG5cdFx0cmV0dXJuIGN0cmxLZXkoZSk7XG5cdH1cblxuXHRjb25zdCBjaGFyID0gZS5rZXk7XG5cdGlmIChjaGFyLmxlbmd0aCA+IDEgfHwgZS5hbHRLZXkpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdHJldHVybiB7XG5cdFx0YWN0aW9uOiBBY3Rpb24uYWRkLFxuXHRcdGRhdGE6IGNoYXIsXG5cdH07XG59XG4iLCJjb25zdCBsb2NhbGUgPSB7XG5cdGFwcGx5OiBcIkFwcGx5XCIsXG5cdHVuZG86IFwiVW5kb1wiLFxuXHRyZWRvOiBcIlJlZG9cIixcblx0c2VsZWN0Rm9udEZhbWlseTogXCJGb250XCIsXG5cdHNlbGVjdEZvbnRTaXplOiBcIkZvbnQgc2l6ZVwiLFxuXHRzZWxlY3RGb3JtYXQ6IFwiU3R5bGVcIixcblx0c2VsZWN0VGV4dENvbG9yOiBcIlRleHQgY29sb3JcIixcblx0c2VsZWN0VGV4dEJhY2tncm91bmQ6IFwiQmFja2dyb3VuZCBjb2xvclwiLFxuXHRtYXJrQm9sZDogXCJCb2xkXCIsXG5cdG1hcmtJdGFsaWM6IFwiSXRhbGljXCIsXG5cdG1hcmtTdHJpa2U6IFwiU3RyaWtlXCIsXG5cdG1hcmtVbmRlcmxpbmU6IFwiVW5kZXJsaW5lXCIsXG5cdGFsaWduTGVmdDogXCJBbGlnbiBsZWZ0XCIsXG5cdGFsaWduQ2VudGVyOiBcIkFsaWduIGNlbnRlclwiLFxuXHRhbGlnblJpZ2h0OiBcIkFsaWduIHJpZ2h0XCIsXG5cdGFkZExpbms6IFwiQWRkIGxpbmtcIixcblx0Y2xlYXJGb3JtYXQ6IFwiQ2xlYXIgZm9ybWF0dGluZ1wiLFxuXHRmdWxsc2NyZWVuOiBcIkZ1bGxzY3JlZW5cIixcblx0c3RhdHM6IFwiU3RhdGlzdGljc1wiLFxuXHRyZW1vdmVMaW5rOiBcIlJlbW92ZSBsaW5rXCIsXG5cdGVkaXQ6IFwiRWRpdFwiLFxuXHRoMTogXCJIZWFkaW5nIDFcIixcblx0aDI6IFwiSGVhZGluZyAyXCIsXG5cdGgzOiBcIkhlYWRpbmcgM1wiLFxuXHRoNDogXCJIZWFkaW5nIDRcIixcblx0aDU6IFwiSGVhZGluZyA1XCIsXG5cdGg2OiBcIkhlYWRpbmcgNlwiLFxuXHRwOiBcIk5vcm1hbCB0ZXh0XCIsXG5cdGJsb2NrcXVvdGU6IFwiQmxvY2sgcXVvdGVcIixcblx0Y2hhcnM6IFwiY2hhcnNcIixcblx0Y2hhcnNFeGxTcGFjZTogXCJDaGFyYWN0ZXJzIHdpdGhvdXQgc3BhY2VzXCIsXG5cdHdvcmRzOiBcIndvcmRzXCIsXG5cdGxpbms6IFwiTGlua1wiLFxuXHR0ZXh0OiBcIlRleHRcIixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTtcbiIsImltcG9ydCB7IGVtcHR5U3R5bGUgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSBcIi4uL2hlbHBlcnMvb3RoZXJcIjtcbmltcG9ydCB7IElTdHlsZSB9IGZyb20gXCIuLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBUZXh0Tm9kZSB9IGZyb20gXCIuL1RleHROb2RlXCI7XG5cbmV4cG9ydCBlbnVtIFNwbGl0UmVzdWx0IHtcblx0aW52YWxpZE5vZGUsXG5cdG9mZnNldFN0YXJ0LFxuXHRvZmZzZXRFbmQsXG5cdGNvbXBsZXRlLFxufVxuXG5leHBvcnQgY2xhc3MgQmxvY2sge1xuXHRwdWJsaWMgc3R5bGU6IElTdHlsZTtcblxuXHRwdWJsaWMgdGV4dE5vZGVzOiBUZXh0Tm9kZVtdO1xuXG5cdGNvbnN0cnVjdG9yKHRleHROb2Rlcz86IFRleHROb2RlW10sIHN0eWxlPzogSVN0eWxlKSB7XG5cdFx0dGhpcy5zdHlsZSA9IHN0eWxlIHx8IGVtcHR5U3R5bGU7XG5cdFx0aWYgKCF0ZXh0Tm9kZXMgfHwgdGV4dE5vZGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnRleHROb2RlcyA9IHRleHROb2Rlcztcblx0XHR9XG5cdH1cblx0Y2xlYXIoKSB7XG5cdFx0dGhpcy50ZXh0Tm9kZXMgPSBbbmV3IFRleHROb2RlKFwiXCIsIGVtcHR5U3R5bGUpXTtcblx0fVxuXHRpc0VtcHR5KCkge1xuXHRcdHJldHVybiB0aGlzLnRleHROb2Rlcy5sZW5ndGggPT09IDEgJiYgdGhpcy50ZXh0Tm9kZXNbMF0uaXNFbXB0eSgpO1xuXHR9XG5cdHNwbGl0VGV4dE5vZGUoaW5kZXg6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIpOiBTcGxpdFJlc3VsdCB7XG5cdFx0Y29uc3QgdGV4dE5vZGUgPSB0aGlzLnRleHROb2Rlc1tpbmRleF07XG5cdFx0aWYgKCF0ZXh0Tm9kZSkge1xuXHRcdFx0cmV0dXJuIFNwbGl0UmVzdWx0LmludmFsaWROb2RlO1xuXHRcdH1cblxuXHRcdGlmIChvZmZzZXQgPT09IDApIHtcblx0XHRcdHJldHVybiBTcGxpdFJlc3VsdC5vZmZzZXRTdGFydDtcblx0XHR9XG5cblx0XHRpZiAob2Zmc2V0ID49IHRleHROb2RlLnRleHQubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gU3BsaXRSZXN1bHQub2Zmc2V0RW5kO1xuXHRcdH1cblxuXHRcdGNvbnN0IHRleHQgPSB0ZXh0Tm9kZS50ZXh0LnNsaWNlKDAsIG9mZnNldCk7XG5cdFx0Y29uc3QgbmV3VGV4dCA9IHRleHROb2RlLnRleHQuc2xpY2Uob2Zmc2V0KTtcblx0XHRjb25zdCBuZXdUZXh0Tm9kZSA9IG5ldyBUZXh0Tm9kZShuZXdUZXh0LCB0ZXh0Tm9kZS5zdHlsZSk7XG5cdFx0dGV4dE5vZGUudGV4dCA9IHRleHQ7XG5cblx0XHR0aGlzLnRleHROb2Rlcy5zcGxpY2UoaW5kZXggKyAxLCAwLCBuZXdUZXh0Tm9kZSk7XG5cdFx0cmV0dXJuIFNwbGl0UmVzdWx0LmNvbXBsZXRlO1xuXHR9XG5cdHJlbW92ZU5vZGVzKGluZGV4OiBudW1iZXIsIGxlZnQ/OiBib29sZWFuKTogYm9vbGVhbiB7XG5cdFx0Ly8gdHJ1ZSBuZWVkIHRvIHJlbW92ZSBhbGwgYmxvY2ssIGZhbHNlIC0gcGFydGlhbCByZW1vdmVcblx0XHQvLyBmb3IgcmlnaHQgc2VsZWN0aW9uIC0+IHJlbW92ZSBmcm9tIDAgdG8gaW5kZXhcblx0XHQvLyBmb3IgbGVmdCBzZWxlY3Rpb24gLT4gcmVtb3ZlIGZyb20gaW5kZXggdG8gZW5kXG5cdFx0aWYgKGxlZnQpIHtcblx0XHRcdGlmIChpbmRleCA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy50ZXh0Tm9kZXMgPSB0aGlzLnRleHROb2Rlcy5zbGljZSgwLCBpbmRleCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmIChpbmRleCA9PT0gdGhpcy50ZXh0Tm9kZXMubGVuZ3RoIC0gMSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHRoaXMudGV4dE5vZGVzID0gdGhpcy50ZXh0Tm9kZXMuc2xpY2UoaW5kZXggKyAxKTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0b2Zmc2V0VG9Ob2RlUG9zaXRpb24ob2Zmc2V0KSB7XG5cdFx0aWYgKG9mZnNldCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dGV4dEluZGV4OiAwLFxuXHRcdFx0XHRvZmZzZXQ6IDAsXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGNvbnN0IHRleHROb2RlcyA9IHRoaXMudGV4dE5vZGVzO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Tm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGxlbiA9IHRleHROb2Rlc1tpXS50ZXh0Lmxlbmd0aDtcblx0XHRcdGlmIChvZmZzZXQgPD0gbGVuKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dGV4dEluZGV4OiBpLFxuXHRcdFx0XHRcdG9mZnNldCxcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdG9mZnNldCAtPSBsZW47XG5cdFx0fVxuXHR9XG5cdG5vZGVQb3NpdGlvblRvT2Zmc2V0KHRleHRJbmRleCwgb2Zmc2V0KSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0SW5kZXg7IGkrKykge1xuXHRcdFx0b2Zmc2V0ICs9IHRoaXMudGV4dE5vZGVzW2ldLnRleHQubGVuZ3RoO1xuXHRcdH1cblx0XHRyZXR1cm4gb2Zmc2V0O1xuXHR9XG5cdGdldEJsb2NrRW5kKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR0ZXh0SW5kZXg6IHRoaXMudGV4dE5vZGVzLmxlbmd0aCAtIDEsXG5cdFx0XHRvZmZzZXQ6IHRoaXMudGV4dE5vZGVzW3RoaXMudGV4dE5vZGVzLmxlbmd0aCAtIDFdLnRleHQubGVuZ3RoLFxuXHRcdH07XG5cdH1cblx0YmFsYW5jZSgpOiBib29sZWFuIHtcblx0XHQvLyByZXR1cm4gdHJ1ZSBpZiBjaGFuZ2VkXG5cdFx0Y29uc3QgdGV4dE5vZGVzID0gdGhpcy50ZXh0Tm9kZXM7XG5cdFx0Y29uc3QgbGVuID0gdGV4dE5vZGVzLmxlbmd0aDtcblx0XHRsZXQgaW5kZXggPSAxO1xuXHRcdHdoaWxlIChpbmRleCA8IHRleHROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdGlmIChpc0VxdWFsKHRleHROb2Rlc1tpbmRleCAtIDFdLnN0eWxlLCB0ZXh0Tm9kZXNbaW5kZXhdLnN0eWxlKSkge1xuXHRcdFx0XHR0ZXh0Tm9kZXNbaW5kZXggLSAxXS50ZXh0ICs9IHRleHROb2Rlc1tpbmRleF0udGV4dDtcblx0XHRcdFx0dGV4dE5vZGVzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbGVuICE9PSB0ZXh0Tm9kZXMubGVuZ3RoO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBlbXB0eVN0eWxlIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgbWFya2Rvd25TZXJpYWxpemVyIH0gZnJvbSBcIi4uL2hlbHBlcnMvbWFya2Rvd25cIjtcbmltcG9ydCB7XG5cdGJsb2NrU3R5bGVGcm9tTWluaW1pemUsXG5cdG1pbmltaXplQmxvY2tTdHlsZSxcblx0bWluaW1pemVUZXh0Tm9kZVN0eWxlLFxuXHR0ZXh0Tm9kZVN0eWxlRnJvbU1pbmltaXplLFxufSBmcm9tIFwiLi4vaGVscGVycy9taW5pbWl6ZXJcIjtcbmltcG9ydCB7IGNvcHlXaXRob3V0LCBnZXRUZXh0SGFzaCB9IGZyb20gXCIuLi9oZWxwZXJzL290aGVyXCI7XG5pbXBvcnQgeyBwYXJzZXIgfSBmcm9tIFwiLi4vaGVscGVycy9wYXJzZXJcIjtcbmltcG9ydCB7IHNlcmlhbGl6ZXIgfSBmcm9tIFwiLi4vaGVscGVycy9zZXJpYWxpemVyXCI7XG5pbXBvcnQgeyBNYW5hZ2VyIH0gZnJvbSBcIi4uL01hbmFnZXJcIjtcbmltcG9ydCB7IEFjdGlvbiwgSVJpY2hUZXh0RXZlbnRTeXN0ZW0sIElTdHlsZSwgTW9kaWZpZXIsIFJpY2hUZXh0RXZlbnRzIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBTZWxlY3Rpb25IZWxwZXIgfSBmcm9tIFwiLi8uLi9TZWxlY3Rpb25IZWxwZXJcIjtcbmltcG9ydCB7IEJsb2NrLCBTcGxpdFJlc3VsdCB9IGZyb20gXCIuL0Jsb2NrXCI7XG5pbXBvcnQgeyBSZW1vdmVUZXh0UmVzdWx0LCBUZXh0Tm9kZSB9IGZyb20gXCIuL1RleHROb2RlXCI7XG5pbXBvcnQgeyBpc0VtcHR5QmxvY2tTdHlsZSB9IGZyb20gXCIuLi9oZWxwZXJzL3N0eWxlc1wiO1xuXG5pbnRlcmZhY2UgSVRlbXBUZXh0Tm9kZSB7XG5cdG9mZnNldDogbnVtYmVyO1xuXHR0ZXh0SW5kZXg6IG51bWJlcjtcblx0YmxvY2tJbmRleDogbnVtYmVyO1xuXHRzdHlsZTogSVN0eWxlO1xufVxuXG5pbnRlcmZhY2UgSUVkaXRvckNvbmZpZyB7XG5cdGV2ZW50czogSVJpY2hUZXh0RXZlbnRTeXN0ZW07XG5cdHVpZDogc3RyaW5nO1xuXHRnZXRSb290VmlldzogKCkgPT4gYW55O1xuXHQvLyBhZnRlciBiYWxhbmNlIG5lZWQgdG8gY2FsbCByZXBhaW50XG5cdHJlcGFpbnQ6ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBFZGl0b3Ige1xuXHRwdWJsaWMgc2VsZWN0aW9uOiBTZWxlY3Rpb25IZWxwZXI7XG5cdHB1YmxpYyBtYW5hZ2VyOiBNYW5hZ2VyO1xuXG5cdHB1YmxpYyBibG9ja3M6IEJsb2NrW107XG5cblx0cHJpdmF0ZSBfZXZlbnRzOiBJUmljaFRleHRFdmVudFN5c3RlbTtcblx0cHJpdmF0ZSBfZ2V0Um9vdFZpZXc6ICgpID0+IGFueTtcblx0cHJpdmF0ZSBfcmVwYWludDogKCkgPT4gdm9pZDtcblxuXHRwcml2YXRlIF90ZW1wTm9kZTogSVRlbXBUZXh0Tm9kZTtcblxuXHRjb25zdHJ1Y3Rvcih7IGV2ZW50cywgdWlkLCBnZXRSb290VmlldywgcmVwYWludCB9OiBJRWRpdG9yQ29uZmlnKSB7XG5cdFx0dGhpcy5fZXZlbnRzID0gZXZlbnRzO1xuXHRcdHRoaXMuX3JlcGFpbnQgPSByZXBhaW50O1xuXHRcdHRoaXMuX2dldFJvb3RWaWV3ID0gZ2V0Um9vdFZpZXc7XG5cblx0XHR0aGlzLnNlbGVjdGlvbiA9IG5ldyBTZWxlY3Rpb25IZWxwZXIodGhpcywgdWlkLCBldmVudHMpO1xuXHRcdHRoaXMuY2xlYXIoKTtcblxuXHRcdHRoaXMubWFuYWdlciA9IG5ldyBNYW5hZ2VyKHRoaXMpO1xuXG5cdFx0dGhpcy5fZXZlbnRzLm9uKFJpY2hUZXh0RXZlbnRzLmNoYW5nZSwgYWN0aW9uID0+IHtcblx0XHRcdGlmIChhY3Rpb24gIT09IEFjdGlvbi51cGRhdGUpIHtcblx0XHRcdFx0dGhpcy5fdGVtcE5vZGUgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuX2V2ZW50cy5vbihSaWNoVGV4dEV2ZW50cy5zZWxlY3Rpb25DaGFuZ2UsICgpID0+IHtcblx0XHRcdHRoaXMuX3RlbXBOb2RlID0gbnVsbDtcblx0XHR9KTtcblx0fVxuXHRjbGVhcigpIHtcblx0XHR0aGlzLmJsb2NrcyA9IFtuZXcgQmxvY2soW25ldyBUZXh0Tm9kZShcIlwiLCBlbXB0eVN0eWxlKV0pXTtcblx0XHR0aGlzLnNlbGVjdGlvbi5jbGVhcigpO1xuXHR9XG5cdGdldFN0YXRlKCkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRiOiB0aGlzLmJsb2Nrcy5tYXAoYmxvY2sgPT4gKHtcblx0XHRcdFx0czogbWluaW1pemVCbG9ja1N0eWxlKGJsb2NrLnN0eWxlKSxcblx0XHRcdFx0bjogYmxvY2sudGV4dE5vZGVzLm1hcCh0ZXh0Tm9kZSA9PiAoe1xuXHRcdFx0XHRcdHM6IG1pbmltaXplVGV4dE5vZGVTdHlsZSh0ZXh0Tm9kZS5zdHlsZSksXG5cdFx0XHRcdFx0dDogdGV4dE5vZGUudGV4dCxcblx0XHRcdFx0fSkpLFxuXHRcdFx0fSkpLFxuXHRcdFx0czogdGhpcy5zZWxlY3Rpb24uZ2V0Q29tcGFjdCgpLFxuXHRcdH0pO1xuXHR9XG5cdHNldFN0YXRlKHN0YXRlOiBzdHJpbmcpIHtcblx0XHRjb25zdCByYXcgPSBKU09OLnBhcnNlKHN0YXRlKTtcblx0XHR0aGlzLmJsb2NrcyA9IHJhdy5iLm1hcCgoeyBzLCBuIH0pID0+IHtcblx0XHRcdGNvbnN0IHRleHROb2RlcyA9IG4ubWFwKChub2RlOiBhbnkpID0+IG5ldyBUZXh0Tm9kZShub2RlLnQsIHRleHROb2RlU3R5bGVGcm9tTWluaW1pemUobm9kZS5zKSkpO1xuXHRcdFx0Y29uc3QgYmxvY2sgPSBuZXcgQmxvY2sodGV4dE5vZGVzLCBibG9ja1N0eWxlRnJvbU1pbmltaXplKHMpKTtcblx0XHRcdHJldHVybiBibG9jaztcblx0XHR9KTtcblx0XHR0aGlzLnNlbGVjdGlvbi5zZXRDb21wYWN0KHJhdy5zKTtcblx0fVxuXHRwYXJzZSh2YWx1ZTogYW55LCBtb2RlOiBcImh0bWxcIiB8IFwibWFya2Rvd25cIiB8IFwiaW5uZXJcIiA9IFwiaHRtbFwiKSB7XG5cdFx0aWYgKG1vZGUgPT09IFwiaHRtbFwiIHx8IG1vZGUgPT09IFwibWFya2Rvd25cIikge1xuXHRcdFx0Y29uc3QgYmxvY2tzID0gcGFyc2VyKHZhbHVlLCBtb2RlKTtcblx0XHRcdHRoaXMuYmxvY2tzID0gYmxvY2tzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmJsb2NrcyA9IHZhbHVlLm1hcChcblx0XHRcdFx0KGJsb2NrOiBhbnkpID0+XG5cdFx0XHRcdFx0bmV3IEJsb2NrKFxuXHRcdFx0XHRcdFx0YmxvY2sudGV4dE5vZGVzLm1hcCgodGV4dE5vZGU6IGFueSkgPT4gbmV3IFRleHROb2RlKHRleHROb2RlLnRleHQsIHRleHROb2RlLnN0eWxlKSksXG5cdFx0XHRcdFx0XHRibG9jay5zdHlsZVxuXHRcdFx0XHRcdClcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHRoaXMuc2VsZWN0aW9uLnNldCh7XG5cdFx0XHRyYW5nZTogZmFsc2UsXG5cdFx0XHRsZWZ0OiB7XG5cdFx0XHRcdGJsb2NrSW5kZXg6IHRoaXMuYmxvY2tzLmxlbmd0aCAtIDEsXG5cdFx0XHRcdC4uLnRoaXMuYmxvY2tzW3RoaXMuYmxvY2tzLmxlbmd0aCAtIDFdLmdldEJsb2NrRW5kKCksXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHNlcmlhbGl6ZShtb2RlOiBcImh0bWxcIiB8IFwibWFya2Rvd25cIiB8IFwidGV4dFwiID0gXCJodG1sXCIpIHtcblx0XHR0aGlzLmJhbGFuY2UoKTtcblx0XHRpZiAobW9kZSA9PT0gXCJtYXJrZG93blwiKSB7XG5cdFx0XHRyZXR1cm4gbWFya2Rvd25TZXJpYWxpemVyKHRoaXMuYmxvY2tzKTtcblx0XHR9XG5cdFx0aWYgKG1vZGUgPT09IFwiaHRtbFwiKSB7XG5cdFx0XHRyZXR1cm4gc2VyaWFsaXplcih0aGlzLmJsb2Nrcyk7XG5cdFx0fVxuXHRcdGlmIChtb2RlID09PSBcInRleHRcIikge1xuXHRcdFx0cmV0dXJuIHRoaXMuYmxvY2tzLnJlZHVjZShcblx0XHRcdFx0KGJsb2NrVGV4dCwgYmxvY2ssIGkpID0+XG5cdFx0XHRcdFx0YmxvY2tUZXh0ICtcblx0XHRcdFx0XHQoaSA+IDAgPyBcIlxcblwiIDogXCJcIikgK1xuXHRcdFx0XHRcdGJsb2NrLnRleHROb2Rlcy5yZWR1Y2UoKHRleHQsIHRleHROb2RlKSA9PiB0ZXh0ICsgdGV4dE5vZGUudGV4dCwgXCJcIiksXG5cdFx0XHRcdFwiXCJcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdGdldFRleHRFbGVtZW50ID0gKGJsb2NrSW5kZXgsIHRleHRJbmRleCkgPT4ge1xuXHRcdGNvbnN0IGlkID0gZ2V0VGV4dEhhc2goYmxvY2tJbmRleCwgdGV4dEluZGV4KTtcblx0XHRjb25zdCByb290VmlldyA9IHRoaXMuX2dldFJvb3RWaWV3KCk7XG5cdFx0cmV0dXJuIChcblx0XHRcdHJvb3RWaWV3LnJlZnMgJiYgcm9vdFZpZXcucmVmc1tpZF0gJiYgcm9vdFZpZXcucmVmc1tpZF0uZWwgJiYgcm9vdFZpZXcucmVmc1tpZF0uZWwuY2hpbGROb2Rlc1swXVxuXHRcdCk7XG5cdH07XG5cdHJlbW92ZUJsb2NrKGluZGV4OiBudW1iZXIpIHtcblx0XHR0aGlzLmJsb2Nrcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdGlmICh0aGlzLmJsb2Nrcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHRoaXMuY2xlYXIoKTtcblx0XHR9XG5cdH1cblx0aW5zZXJ0QmxvY2soKSB7XG5cdFx0dGhpcy5fc3BsaXRDYXJyZXQoKTtcblx0XHRjb25zdCB7IHJhbmdlLCBsZWZ0IH0gPSB0aGlzLnNlbGVjdGlvbi5nZXQoKTtcblx0XHRpZiAocmFuZ2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBjdXJyZW50TGluZU5vZGVzID0gdGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS50ZXh0Tm9kZXM7XG5cdFx0bGV0IG5leHRMaW5lTm9kZXMgPSBjdXJyZW50TGluZU5vZGVzLnNwbGljZShsZWZ0LnRleHRJbmRleCArIChsZWZ0Lm9mZnNldCA/IDEgOiAwKSwgSW5maW5pdHkpOyAvLyBJbmZpbml0eSB0byByZW1vdmUgYWxsIGFmdGVyIGxlZnRcblx0XHRsZXQgbmV4dExpbmVCbG9ja1N0eWxlID0gdGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS5zdHlsZTtcblxuXHRcdGlmIChuZXh0TGluZU5vZGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0Y29uc3Qgc3R5bGUgPSB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLnRleHROb2Rlc1tsZWZ0LnRleHRJbmRleF0uc3R5bGU7XG5cdFx0XHRuZXh0TGluZU5vZGVzID0gW25ldyBUZXh0Tm9kZShcIlwiLCBjb3B5V2l0aG91dChzdHlsZSwgeyBsaW5rOiB0cnVlIH0pKV07XG5cdFx0XHRuZXh0TGluZUJsb2NrU3R5bGUgPSBjb3B5V2l0aG91dChuZXh0TGluZUJsb2NrU3R5bGUsIHtcblx0XHRcdFx0YmxvY2txdW90ZTogdHJ1ZSxcblx0XHRcdFx0c3R5bGU6IHRydWUsXG5cdFx0XHR9KTtcblx0XHRcdG5leHRMaW5lQmxvY2tTdHlsZVtNb2RpZmllci5zdHlsZV0gPSBcInBcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgbGluayA9XG5cdFx0XHRcdGN1cnJlbnRMaW5lTm9kZXNbY3VycmVudExpbmVOb2Rlcy5sZW5ndGggLSAxXSAmJlxuXHRcdFx0XHRjdXJyZW50TGluZU5vZGVzW2N1cnJlbnRMaW5lTm9kZXMubGVuZ3RoIC0gMV0uc3R5bGUubGluaztcblx0XHRcdGlmIChsaW5rKSB7XG5cdFx0XHRcdGZvciAoY29uc3QgdGV4dE5vZGUgb2YgbmV4dExpbmVOb2Rlcykge1xuXHRcdFx0XHRcdGlmICh0ZXh0Tm9kZS5zdHlsZS5saW5rID09PSBsaW5rKSB7XG5cdFx0XHRcdFx0XHR0ZXh0Tm9kZS5zdHlsZSA9IGNvcHlXaXRob3V0KHRleHROb2RlLnN0eWxlLCB7IGxpbms6IHRydWUgfSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChjdXJyZW50TGluZU5vZGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0dGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS5jbGVhcigpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGJsb2NrID0gbmV3IEJsb2NrKG5leHRMaW5lTm9kZXMsIG5leHRMaW5lQmxvY2tTdHlsZSk7XG5cdFx0dGhpcy5ibG9ja3Muc3BsaWNlKGxlZnQuYmxvY2tJbmRleCArIDEsIDAsIGJsb2NrKTtcblx0XHR0aGlzLnNlbGVjdGlvbi5zZXQoe1xuXHRcdFx0cmFuZ2UsXG5cdFx0XHRsZWZ0OiB7XG5cdFx0XHRcdG9mZnNldDogMCxcblx0XHRcdFx0dGV4dEluZGV4OiAwLFxuXHRcdFx0XHRibG9ja0luZGV4OiBsZWZ0LmJsb2NrSW5kZXggKyAxLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fVxuXHRlYWNoU2VsZWN0ZWROb2RlKGZuOiAodGV4dE5vZGU6IFRleHROb2RlLCBibG9jaz86IEJsb2NrKSA9PiBhbnkpIHtcblx0XHRjb25zdCB7IHJhbmdlLCBsZWZ0LCByaWdodCB9ID0gdGhpcy5zZWxlY3Rpb24uZ2V0KCk7XG5cblx0XHRpZiAocmFuZ2UpIHtcblx0XHRcdGZvciAobGV0IGkgPSBsZWZ0LmJsb2NrSW5kZXg7IGkgPD0gcmlnaHQuYmxvY2tJbmRleDsgaSsrKSB7XG5cdFx0XHRcdGxldCBzdGFydE5vZGUgPSAwO1xuXHRcdFx0XHRsZXQgZW5kTm9kZSA9IHRoaXMuYmxvY2tzW2ldLnRleHROb2Rlcy5sZW5ndGggLSAxO1xuXG5cdFx0XHRcdGlmIChpID09PSBsZWZ0LmJsb2NrSW5kZXgpIHtcblx0XHRcdFx0XHRzdGFydE5vZGUgPSBsZWZ0LnRleHRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaSA9PT0gcmlnaHQuYmxvY2tJbmRleCkge1xuXHRcdFx0XHRcdGVuZE5vZGUgPSByaWdodC50ZXh0SW5kZXg7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKGxldCBqID0gc3RhcnROb2RlOyBqIDw9IGVuZE5vZGU7IGorKykge1xuXHRcdFx0XHRcdGZuKHRoaXMuYmxvY2tzW2ldLnRleHROb2Rlc1tqXSwgdGhpcy5ibG9ja3NbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChsZWZ0KSB7XG5cdFx0XHRcdGZuKHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0udGV4dE5vZGVzW2xlZnQudGV4dEluZGV4XSwgdGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGVhY2hTZWxlY3RlZEJsb2NrKGZuOiAoYmxvY2s6IEJsb2NrLCBpbmRleD86IG51bWJlcikgPT4gYW55KSB7XG5cdFx0Y29uc3QgeyByYW5nZSwgbGVmdCwgcmlnaHQgfSA9IHRoaXMuc2VsZWN0aW9uLmdldCgpO1xuXG5cdFx0aWYgKHJhbmdlKSB7XG5cdFx0XHRmb3IgKGxldCBpID0gbGVmdC5ibG9ja0luZGV4OyBpIDw9IHJpZ2h0LmJsb2NrSW5kZXg7IGkrKykge1xuXHRcdFx0XHRmbih0aGlzLmJsb2Nrc1tpXSwgaSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZuKHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0pO1xuXHRcdH1cblx0fVxuXHRjb3B5KCkge1xuXHRcdGNvbnN0IHsgcmFuZ2UgfSA9IHRoaXMuc2VsZWN0aW9uLmdldCgpO1xuXG5cdFx0aWYgKCFyYW5nZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRoaXMuX3NwbGl0UmFuZ2UoKTtcblxuXHRcdGNvbnN0IGVkaXRvckNvbnRlbnQgPSBbXTtcblx0XHRsZXQgcmF3ID0gXCJcIjtcblxuXHRcdGNvbnN0IHsgbGVmdCwgcmlnaHQgfSA9IHRoaXMuc2VsZWN0aW9uLmdldCgpO1xuXHRcdHRoaXMuZWFjaFNlbGVjdGVkQmxvY2soKGJsb2NrLCBpbmRleCkgPT4ge1xuXHRcdFx0bGV0IHN0YXJ0SW5kZXggPSAwO1xuXHRcdFx0bGV0IGVuZEluZGV4ID0gYmxvY2sudGV4dE5vZGVzLmxlbmd0aCAtIDE7XG5cblx0XHRcdGNvbnN0IHRleHROb2RlcyA9IFtdO1xuXHRcdFx0ZWRpdG9yQ29udGVudC5wdXNoKHtcblx0XHRcdFx0c3R5bGU6IGJsb2NrLnN0eWxlLFxuXHRcdFx0XHR0ZXh0Tm9kZXMsXG5cdFx0XHR9KTtcblx0XHRcdGlmIChpbmRleCA9PT0gbGVmdC5ibG9ja0luZGV4KSB7XG5cdFx0XHRcdHN0YXJ0SW5kZXggPSBsZWZ0LnRleHRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGluZGV4ID09PSByaWdodC5ibG9ja0luZGV4KSB7XG5cdFx0XHRcdGVuZEluZGV4ID0gcmlnaHQudGV4dEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8PSBlbmRJbmRleDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IHRleHROb2RlID0gYmxvY2sudGV4dE5vZGVzW2ldO1xuXHRcdFx0XHR0ZXh0Tm9kZXMucHVzaCh7XG5cdFx0XHRcdFx0c3R5bGU6IHRleHROb2RlLnN0eWxlLFxuXHRcdFx0XHRcdHRleHQ6IHRleHROb2RlLnRleHQsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyYXcgKz0gdGV4dE5vZGUudGV4dDtcblx0XHRcdH1cblx0XHRcdGlmIChpbmRleCA8IHJpZ2h0LmJsb2NrSW5kZXgpIHtcblx0XHRcdFx0cmF3ICs9IFwiXFxuXCI7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbnRlbnQ6IGVkaXRvckNvbnRlbnQsXG5cdFx0XHRyYXcsXG5cdFx0fTtcblx0fVxuXHRjdXQoKSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5jb3B5KCk7XG5cdFx0dGhpcy5fc3BsaXRSYW5nZSgpO1xuXHRcdHRoaXMuX3JlbW92ZVJhbmdlKCk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cdHBhc3RlKHZhbHVlLCBtb2RlOiBcInRleHRcIiB8IFwiaW5uZXJcIiB8IFwiaHRtbFwiID0gXCJ0ZXh0XCIpIHtcblx0XHRpZiAobW9kZSA9PT0gXCJ0ZXh0XCIpIHtcblx0XHRcdHJldHVybiB0aGlzLmFkZCh2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IHsgcmFuZ2UgfSA9IHRoaXMuc2VsZWN0aW9uLmdldCgpO1xuXG5cdFx0XHRpZiAocmFuZ2UpIHtcblx0XHRcdFx0dGhpcy5fc3BsaXRSYW5nZSgpO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVSYW5nZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB7IGxlZnQgfSA9IHRoaXMuc2VsZWN0aW9uLmdldCgpO1xuXG5cdFx0XHRjb25zdCBbZmlyc3RCbG9jaywgLi4uYmxvY2tzXSA9IG1vZGUgPT09IFwiaW5uZXJcIiA/IEpTT04ucGFyc2UodmFsdWUpIDogcGFyc2VyKHZhbHVlLCBcImh0bWxcIik7XG5cblx0XHRcdGxldCBsYXN0TGluZUluZGV4O1xuXG5cdFx0XHRpZiAodGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS5pc0VtcHR5KCkpIHtcblx0XHRcdFx0Ly8gZGVzdHJveSBlbXB0eSBub2RlXG5cdFx0XHRcdHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0udGV4dE5vZGVzID0gW107XG5cdFx0XHRcdHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0uc3R5bGUgPSBmaXJzdEJsb2NrLnN0eWxlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gc3BsaXQgbm9kZSBiZWZvcmUgcGFzdGVcblx0XHRcdFx0Y29uc3Qgc3BsaXRSZXN1bHQgPSB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLnNwbGl0VGV4dE5vZGUobGVmdC50ZXh0SW5kZXgsIGxlZnQub2Zmc2V0KTtcblx0XHRcdFx0c3dpdGNoIChzcGxpdFJlc3VsdCkge1xuXHRcdFx0XHRcdGNhc2UgU3BsaXRSZXN1bHQub2Zmc2V0U3RhcnQ6XG5cdFx0XHRcdFx0XHRsYXN0TGluZUluZGV4ID0gbGVmdC50ZXh0SW5kZXg7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFNwbGl0UmVzdWx0Lm9mZnNldEVuZDpcblx0XHRcdFx0XHRjYXNlIFNwbGl0UmVzdWx0LmNvbXBsZXRlOlxuXHRcdFx0XHRcdFx0bGFzdExpbmVJbmRleCA9IGxlZnQudGV4dEluZGV4ICsgMTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRsZXQgY3VycmVudExpbmVOb2Rlcztcblx0XHRcdGxldCBsYXN0TGluZU5vZGVzO1xuXG5cdFx0XHRpZiAobGFzdExpbmVJbmRleCA+IDApIHtcblx0XHRcdFx0Y3VycmVudExpbmVOb2RlcyA9IHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0udGV4dE5vZGVzLnNsaWNlKDAsIGxhc3RMaW5lSW5kZXgpO1xuXHRcdFx0XHRsYXN0TGluZU5vZGVzID0gdGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS50ZXh0Tm9kZXMuc2xpY2UobGFzdExpbmVJbmRleCwgSW5maW5pdHkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudExpbmVOb2RlcyA9IFtdO1xuXHRcdFx0XHRsYXN0TGluZU5vZGVzID0gdGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS50ZXh0Tm9kZXM7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoY29uc3QgdGV4dE5vZGUgb2YgZmlyc3RCbG9jay50ZXh0Tm9kZXMpIHtcblx0XHRcdFx0Y3VycmVudExpbmVOb2Rlcy5wdXNoKG5ldyBUZXh0Tm9kZSh0ZXh0Tm9kZS50ZXh0LCB0ZXh0Tm9kZS5zdHlsZSkpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS50ZXh0Tm9kZXMgPSBjdXJyZW50TGluZU5vZGVzO1xuXHRcdFx0aWYgKGJsb2Nrcy5sZW5ndGgpIHtcblx0XHRcdFx0Y29uc3QgbmV3QmxvY2tzID0gYmxvY2tzLm1hcChcblx0XHRcdFx0XHRibG9jayA9PlxuXHRcdFx0XHRcdFx0bmV3IEJsb2NrKFxuXHRcdFx0XHRcdFx0XHRibG9jay50ZXh0Tm9kZXMubWFwKG5vZGUgPT4gbmV3IFRleHROb2RlKG5vZGUudGV4dCwgbm9kZS5zdHlsZSkpLFxuXHRcdFx0XHRcdFx0XHRibG9jay5zdHlsZVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdFx0XHR0aGlzLmJsb2Nrcy5zcGxpY2UobGVmdC5ibG9ja0luZGV4ICsgMSwgMCwgLi4ubmV3QmxvY2tzKTtcblx0XHRcdFx0Y29uc3QgYmxvY2tFbmQgPSB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXggKyBibG9ja3MubGVuZ3RoXS5nZXRCbG9ja0VuZCgpO1xuXHRcdFx0XHR0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXggKyBibG9ja3MubGVuZ3RoXS50ZXh0Tm9kZXMucHVzaCguLi5sYXN0TGluZU5vZGVzKTtcblx0XHRcdFx0dGhpcy5zZWxlY3Rpb24uc2V0KHtcblx0XHRcdFx0XHRyYW5nZTogZmFsc2UsXG5cdFx0XHRcdFx0bGVmdDoge1xuXHRcdFx0XHRcdFx0YmxvY2tJbmRleDogbGVmdC5ibG9ja0luZGV4ICsgYmxvY2tzLmxlbmd0aCxcblx0XHRcdFx0XHRcdC4uLmJsb2NrRW5kLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgYmxvY2tFbmQgPSB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLmdldEJsb2NrRW5kKCk7XG5cdFx0XHRcdHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0udGV4dE5vZGVzLnB1c2goLi4ubGFzdExpbmVOb2Rlcyk7XG5cdFx0XHRcdHRoaXMuc2VsZWN0aW9uLnNldCh7XG5cdFx0XHRcdFx0cmFuZ2U6IGZhbHNlLFxuXHRcdFx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0XHRcdGJsb2NrSW5kZXg6IGxlZnQuYmxvY2tJbmRleCxcblx0XHRcdFx0XHRcdC4uLmJsb2NrRW5kLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cdGFkZChkYXRhOiBhbnkpOiBib29sZWFuIHtcblx0XHRjb25zdCB7IHJhbmdlIH0gPSB0aGlzLnNlbGVjdGlvbi5nZXQoKTtcblxuXHRcdGlmIChyYW5nZSkge1xuXHRcdFx0dGhpcy5fc3BsaXRSYW5nZSgpO1xuXHRcdFx0dGhpcy5fcmVtb3ZlUmFuZ2UoKTtcblx0XHR9XG5cdFx0aWYgKGRhdGEubmV3QmxvY2spIHtcblx0XHRcdHRoaXMuaW5zZXJ0QmxvY2soKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGNvbnN0IHsgb2Zmc2V0LCBibG9ja0luZGV4LCB0ZXh0SW5kZXggfSA9IHRoaXMuc2VsZWN0aW9uLmdldCgpLmxlZnQ7XG5cdFx0aWYgKFxuXHRcdFx0dGhpcy5fdGVtcE5vZGUgJiZcblx0XHRcdHRoaXMuX3RlbXBOb2RlLm9mZnNldCA9PT0gb2Zmc2V0ICYmXG5cdFx0XHR0aGlzLl90ZW1wTm9kZS5ibG9ja0luZGV4ID09PSBibG9ja0luZGV4ICYmXG5cdFx0XHR0aGlzLl90ZW1wTm9kZS50ZXh0SW5kZXggPT09IHRleHRJbmRleFxuXHRcdCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2NyZWF0ZU5vZGVGcm9tVGVtcChkYXRhKTtcblx0XHR9XG5cdFx0Y29uc3QgdGV4dE5vZGVzID0gdGhpcy5ibG9ja3NbYmxvY2tJbmRleF0udGV4dE5vZGVzO1xuXHRcdGNvbnN0IHRleHROb2RlID0gdGV4dE5vZGVzW3RleHRJbmRleF07XG5cdFx0aWYgKFxuXHRcdFx0dGV4dE5vZGUuc3R5bGUubGluayAmJlxuXHRcdFx0dGV4dE5vZGUudGV4dC5sZW5ndGggPT09IG9mZnNldCAmJlxuXHRcdFx0KCF0ZXh0Tm9kZXNbdGV4dEluZGV4ICsgMV0gfHwgIXRleHROb2Rlc1t0ZXh0SW5kZXggKyAxXS5zdHlsZS5saW5rKVxuXHRcdCkge1xuXHRcdFx0Y29uc3QgbmV3VGV4dE5vZGUgPSBuZXcgVGV4dE5vZGUoZGF0YSwgY29weVdpdGhvdXQodGV4dE5vZGUuc3R5bGUsIHsgbGluazogdHJ1ZSB9KSk7XG5cdFx0XHR0ZXh0Tm9kZXMuc3BsaWNlKHRleHRJbmRleCArIDEsIDAsIG5ld1RleHROb2RlKTtcblx0XHRcdHRoaXMuc2VsZWN0aW9uLnNldCh7XG5cdFx0XHRcdHJhbmdlOiBmYWxzZSxcblx0XHRcdFx0bGVmdDoge1xuXHRcdFx0XHRcdG9mZnNldDogZGF0YS5sZW5ndGgsXG5cdFx0XHRcdFx0YmxvY2tJbmRleCxcblx0XHRcdFx0XHR0ZXh0SW5kZXg6IHRleHRJbmRleCArIDEsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKHRleHROb2RlLnN0eWxlLmxpbmsgJiYgb2Zmc2V0ID09PSAwKSB7XG5cdFx0XHRjb25zdCBuZXdUZXh0Tm9kZSA9IG5ldyBUZXh0Tm9kZShkYXRhLCBjb3B5V2l0aG91dCh0ZXh0Tm9kZS5zdHlsZSwgeyBsaW5rOiB0cnVlIH0pKTtcblx0XHRcdHRleHROb2Rlcy5zcGxpY2UodGV4dEluZGV4LCAwLCBuZXdUZXh0Tm9kZSk7XG5cdFx0XHR0aGlzLnNlbGVjdGlvbi5zZXQoe1xuXHRcdFx0XHRyYW5nZTogZmFsc2UsXG5cdFx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0XHRvZmZzZXQ6IGRhdGEubGVuZ3RoLFxuXHRcdFx0XHRcdGJsb2NrSW5kZXgsXG5cdFx0XHRcdFx0dGV4dEluZGV4LFxuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRleHROb2Rlc1t0ZXh0SW5kZXhdLmluc2VydChkYXRhLCBvZmZzZXQpO1xuXHRcdFx0dGhpcy5zZWxlY3Rpb24uc2V0KHtcblx0XHRcdFx0cmFuZ2U6IGZhbHNlLFxuXHRcdFx0XHRsZWZ0OiB7XG5cdFx0XHRcdFx0b2Zmc2V0OiBvZmZzZXQgKyBkYXRhLmxlbmd0aCxcblx0XHRcdFx0XHRibG9ja0luZGV4LFxuXHRcdFx0XHRcdHRleHRJbmRleCxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZW1vdmUocHJldjogYm9vbGVhbik6IGJvb2xlYW4ge1xuXHRcdGNvbnN0IHsgcmFuZ2UgfSA9IHRoaXMuc2VsZWN0aW9uLmdldCgpO1xuXG5cdFx0aWYgKHJhbmdlKSB7XG5cdFx0XHR0aGlzLl9zcGxpdFJhbmdlKCk7XG5cdFx0XHR0aGlzLl9yZW1vdmVSYW5nZSgpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLl9yZW1vdmVTeW1ib2wocHJldik7XG5cdFx0fVxuXHR9XG5cdHVwZGF0ZSh7IG1vZGlmaWVyLCBtb2RpZmllclZhbHVlIH0pOiBib29sZWFuIHtcblx0XHRjb25zdCB7IHJhbmdlLCBsZWZ0IH0gPSB0aGlzLnNlbGVjdGlvbi5nZXQoKTtcblxuXHRcdHN3aXRjaCAobW9kaWZpZXIpIHtcblx0XHRcdC8vIGJsb2NrIG1vZGlmaWVyc1xuXHRcdFx0Y2FzZSBNb2RpZmllci5hbGlnbjpcblx0XHRcdGNhc2UgTW9kaWZpZXIuc3R5bGU6XG5cdFx0XHRjYXNlIE1vZGlmaWVyLmJsb2NrcXVvdGU6XG5cdFx0XHRcdHRoaXMuZWFjaFNlbGVjdGVkQmxvY2soYmxvY2sgPT4ge1xuXHRcdFx0XHRcdGJsb2NrLnN0eWxlID0ge1xuXHRcdFx0XHRcdFx0Li4uYmxvY2suc3R5bGUsXG5cdFx0XHRcdFx0XHRbbW9kaWZpZXJdOiBtb2RpZmllclZhbHVlLFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0aWYgKG1vZGlmaWVyID09PSBNb2RpZmllci5zdHlsZSAmJiBtb2RpZmllclZhbHVlICE9PSBcInBcIikge1xuXHRcdFx0XHRcdFx0YmxvY2sudGV4dE5vZGVzLmZvckVhY2godGV4dE5vZGUgPT4ge1xuXHRcdFx0XHRcdFx0XHR0ZXh0Tm9kZS5zdHlsZSA9IGNvcHlXaXRob3V0KHRleHROb2RlLnN0eWxlLCB7XG5cdFx0XHRcdFx0XHRcdFx0W01vZGlmaWVyLmZvbnRTaXplXTogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdC8vIHRleHQgbW9kaWZlcnNcblx0XHRcdGNhc2UgTW9kaWZpZXIuc3RyaWtlOlxuXHRcdFx0Y2FzZSBNb2RpZmllci51bmRlcmxpbmU6XG5cdFx0XHRjYXNlIE1vZGlmaWVyLml0YWxpYzpcblx0XHRcdGNhc2UgTW9kaWZpZXIuYm9sZDpcblx0XHRcdGNhc2UgTW9kaWZpZXIuY29sb3I6XG5cdFx0XHRjYXNlIE1vZGlmaWVyLmJhY2tncm91bmQ6XG5cdFx0XHRjYXNlIE1vZGlmaWVyLmZvbnRGYW1pbHk6XG5cdFx0XHRjYXNlIE1vZGlmaWVyLmZvbnRTaXplOlxuXHRcdFx0XHRpZiAoIXJhbmdlKSB7XG5cdFx0XHRcdFx0dGhpcy5fY3JlYXRlVGVtcFRleHROb2RlKHsgbW9kaWZpZXIsIG1vZGlmaWVyVmFsdWUgfSk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3NwbGl0UmFuZ2UoKTtcblx0XHRcdFx0dGhpcy5lYWNoU2VsZWN0ZWROb2RlKG5vZGUgPT4ge1xuXHRcdFx0XHRcdG5vZGUuc3R5bGUgPSB7XG5cdFx0XHRcdFx0XHQuLi5ub2RlLnN0eWxlLFxuXHRcdFx0XHRcdFx0W21vZGlmaWVyXTogbW9kaWZpZXJWYWx1ZSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRjYXNlIE1vZGlmaWVyLmxpbms6IHtcblx0XHRcdFx0Y29uc3QgbGVmdFRleHROb2RlID0gdGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS50ZXh0Tm9kZXNbbGVmdC50ZXh0SW5kZXhdO1xuXHRcdFx0XHRpZiAobW9kaWZpZXIgPT09IHVuZGVmaW5lZCB8fCBsZWZ0VGV4dE5vZGUuc3R5bGUubGluayAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0dGhpcy5fZWFjaExpbmsobm9kZSA9PiB7XG5cdFx0XHRcdFx0XHRub2RlLnN0eWxlID0ge1xuXHRcdFx0XHRcdFx0XHQuLi5ub2RlLnN0eWxlLFxuXHRcdFx0XHRcdFx0XHRbbW9kaWZpZXJdOiBtb2RpZmllclZhbHVlLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAocmFuZ2UpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3NwbGl0UmFuZ2UoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5lYWNoU2VsZWN0ZWROb2RlKG5vZGUgPT4ge1xuXHRcdFx0XHRcdFx0bm9kZS5zdHlsZSA9IHtcblx0XHRcdFx0XHRcdFx0Li4ubm9kZS5zdHlsZSxcblx0XHRcdFx0XHRcdFx0W21vZGlmaWVyXTogbW9kaWZpZXJWYWx1ZSxcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGNsZWFyU3R5bGVzKCk6IGJvb2xlYW4ge1xuXHRcdGlmICghdGhpcy5zZWxlY3Rpb24uZ2V0KCkucmFuZ2UpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dGhpcy5fc3BsaXRSYW5nZSgpO1xuXHRcdHRoaXMuZWFjaFNlbGVjdGVkTm9kZShub2RlID0+IHtcblx0XHRcdG5vZGUuc3R5bGUgPSBlbXB0eVN0eWxlO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGJhbGFuY2UoKSB7XG5cdFx0Y29uc3QgeyBsZWZ0LCByaWdodCwgcmFuZ2UgfSA9IHRoaXMuc2VsZWN0aW9uLmdldCgpO1xuXHRcdGNvbnN0IGxlZnRPZmZzZXQgPSB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLm5vZGVQb3NpdGlvblRvT2Zmc2V0KGxlZnQudGV4dEluZGV4LCBsZWZ0Lm9mZnNldCk7XG5cdFx0bGV0IHJpZ2h0T2Zmc2V0O1xuXHRcdGlmIChyYW5nZSkge1xuXHRcdFx0cmlnaHRPZmZzZXQgPSB0aGlzLmJsb2Nrc1tyaWdodC5ibG9ja0luZGV4XS5ub2RlUG9zaXRpb25Ub09mZnNldChyaWdodC50ZXh0SW5kZXgsIHJpZ2h0Lm9mZnNldCk7XG5cdFx0fVxuXG5cdFx0bGV0IG5vdENoYW5nZWQgPSB0cnVlO1xuXG5cdFx0dGhpcy5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XG5cdFx0XHRpZiAoYmxvY2suYmFsYW5jZSgpKSB7XG5cdFx0XHRcdG5vdENoYW5nZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmIChub3RDaGFuZ2VkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5zZWxlY3Rpb24uc2V0KHtcblx0XHRcdHJhbmdlLFxuXHRcdFx0bGVmdDoge1xuXHRcdFx0XHRibG9ja0luZGV4OiBsZWZ0LmJsb2NrSW5kZXgsXG5cdFx0XHRcdC4uLnRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0ub2Zmc2V0VG9Ob2RlUG9zaXRpb24obGVmdE9mZnNldCksXG5cdFx0XHR9LFxuXHRcdFx0cmlnaHQ6IHJpZ2h0T2Zmc2V0ICYmIHtcblx0XHRcdFx0YmxvY2tJbmRleDogcmlnaHQuYmxvY2tJbmRleCxcblx0XHRcdFx0Li4udGhpcy5ibG9ja3NbcmlnaHQuYmxvY2tJbmRleF0ub2Zmc2V0VG9Ob2RlUG9zaXRpb24ocmlnaHRPZmZzZXQpLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHR0aGlzLl9yZXBhaW50KCk7XG5cdH1cblx0Z2V0TGlua0luZm8oKSB7XG5cdFx0bGV0IHRleHQgPSBcIlwiO1xuXHRcdGxldCBsaW5rO1xuXG5cdFx0dGhpcy5fZWFjaExpbmsodGV4dE5vZGUgPT4ge1xuXHRcdFx0dGV4dCArPSB0ZXh0Tm9kZS50ZXh0O1xuXHRcdFx0bGluayA9IHRleHROb2RlLnN0eWxlLmxpbms7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHsgdGV4dCwgbGluayB9O1xuXHR9XG5cdHVwZGF0ZUxpbmtUZXh0KHRleHQ6IHN0cmluZykge1xuXHRcdGNvbnN0IHsgbGVmdCwgcmFuZ2UgfSA9IHRoaXMuc2VsZWN0aW9uLmdldCgpO1xuXHRcdGNvbnN0IHRleHROb2RlcyA9IHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0udGV4dE5vZGVzO1xuXHRcdGNvbnN0IGxpbmsgPSB0ZXh0Tm9kZXNbbGVmdC50ZXh0SW5kZXhdLnN0eWxlLmxpbms7XG5cdFx0Y29uc3QgdGV4dE5vZGUgPSBuZXcgVGV4dE5vZGUodGV4dCwge30pO1xuXHRcdGlmIChsaW5rKSB7XG5cdFx0XHRsZXQgbGlua0xlZnRJbmRleCA9IGxlZnQudGV4dEluZGV4O1xuXHRcdFx0bGV0IGxpbmtSaWdodEluZGV4ID0gbGVmdC50ZXh0SW5kZXg7XG5cdFx0XHR3aGlsZSAodGV4dE5vZGVzW2xpbmtMZWZ0SW5kZXggLSAxXSAmJiB0ZXh0Tm9kZXNbbGlua0xlZnRJbmRleCAtIDFdLnN0eWxlLmxpbmsgPT09IGxpbmspIHtcblx0XHRcdFx0bGlua0xlZnRJbmRleC0tO1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKHRleHROb2Rlc1tsaW5rUmlnaHRJbmRleCArIDFdICYmIHRleHROb2Rlc1tsaW5rUmlnaHRJbmRleCArIDFdLnN0eWxlLmxpbmsgPT09IGxpbmspIHtcblx0XHRcdFx0bGlua1JpZ2h0SW5kZXgrKztcblx0XHRcdH1cblxuXHRcdFx0dGV4dE5vZGVzLnNwbGljZShsaW5rTGVmdEluZGV4LCBsaW5rUmlnaHRJbmRleCAtIGxpbmtMZWZ0SW5kZXggKyAxLCB0ZXh0Tm9kZSk7XG5cdFx0XHR0aGlzLnNlbGVjdGlvbi5zZXQoe1xuXHRcdFx0XHRyYW5nZTogdHJ1ZSxcblx0XHRcdFx0bGVmdDoge1xuXHRcdFx0XHRcdGJsb2NrSW5kZXg6IGxlZnQuYmxvY2tJbmRleCxcblx0XHRcdFx0XHR0ZXh0SW5kZXg6IGxpbmtMZWZ0SW5kZXgsXG5cdFx0XHRcdFx0b2Zmc2V0OiAwLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRyaWdodDoge1xuXHRcdFx0XHRcdGJsb2NrSW5kZXg6IGxlZnQuYmxvY2tJbmRleCxcblx0XHRcdFx0XHR0ZXh0SW5kZXg6IGxpbmtMZWZ0SW5kZXgsXG5cdFx0XHRcdFx0b2Zmc2V0OiB0ZXh0Lmxlbmd0aCxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAocmFuZ2UpIHtcblx0XHRcdFx0dGhpcy5fc3BsaXRSYW5nZSgpO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVSYW5nZSgpO1xuXHRcdFx0XHRjb25zdCB7IGJsb2NrSW5kZXgsIHRleHRJbmRleCB9ID0gdGhpcy5zZWxlY3Rpb24uZ2V0KCkubGVmdDtcblx0XHRcdFx0dGhpcy5ibG9ja3NbYmxvY2tJbmRleF0udGV4dE5vZGVzLnNwbGljZSh0ZXh0SW5kZXggKyAxLCAwLCB0ZXh0Tm9kZSk7XG5cdFx0XHRcdHRoaXMuc2VsZWN0aW9uLnNldCh7XG5cdFx0XHRcdFx0cmFuZ2U6IHRydWUsXG5cdFx0XHRcdFx0bGVmdDoge1xuXHRcdFx0XHRcdFx0YmxvY2tJbmRleCxcblx0XHRcdFx0XHRcdHRleHRJbmRleDogdGV4dEluZGV4ICsgMSxcblx0XHRcdFx0XHRcdG9mZnNldDogMCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHJpZ2h0OiB7XG5cdFx0XHRcdFx0XHRibG9ja0luZGV4LFxuXHRcdFx0XHRcdFx0dGV4dEluZGV4OiB0ZXh0SW5kZXggKyAxLFxuXHRcdFx0XHRcdFx0b2Zmc2V0OiB0ZXh0Lmxlbmd0aCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBpbmRleDtcblx0XHRcdFx0aWYgKHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0uaXNFbXB0eSgpKSB7XG5cdFx0XHRcdFx0dGV4dE5vZGVzLnNwbGljZSgwLCAxKTtcblx0XHRcdFx0XHRpbmRleCA9IDA7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3Qgc3BsaXRSZXN1bHQgPSB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLnNwbGl0VGV4dE5vZGUoXG5cdFx0XHRcdFx0XHRsZWZ0LnRleHRJbmRleCxcblx0XHRcdFx0XHRcdGxlZnQub2Zmc2V0XG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRpbmRleCA9IHNwbGl0UmVzdWx0ID09PSBTcGxpdFJlc3VsdC5vZmZzZXRTdGFydCA/IGxlZnQudGV4dEluZGV4IDogbGVmdC50ZXh0SW5kZXggKyAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRleHROb2Rlcy5zcGxpY2UoaW5kZXgsIDAsIHRleHROb2RlKTtcblx0XHRcdFx0dGhpcy5zZWxlY3Rpb24uc2V0KHtcblx0XHRcdFx0XHRyYW5nZTogdHJ1ZSxcblx0XHRcdFx0XHRsZWZ0OiB7XG5cdFx0XHRcdFx0XHRibG9ja0luZGV4OiBsZWZ0LmJsb2NrSW5kZXgsXG5cdFx0XHRcdFx0XHR0ZXh0SW5kZXg6IGluZGV4LFxuXHRcdFx0XHRcdFx0b2Zmc2V0OiAwLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cmlnaHQ6IHtcblx0XHRcdFx0XHRcdGJsb2NrSW5kZXg6IGxlZnQuYmxvY2tJbmRleCxcblx0XHRcdFx0XHRcdHRleHRJbmRleDogaW5kZXgsXG5cdFx0XHRcdFx0XHRvZmZzZXQ6IHRleHQubGVuZ3RoLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9zcGxpdFJhbmdlKCkge1xuXHRcdC8vIGxlZnQgc2VsZWN0aW9uIG11c3QgaGF2ZSBvZmZzZXQgPSAwXG5cdFx0Ly8gcmlnaHQgc2VsZWN0aW9uIG11c3QgaGF2ZSBvZmZzZXQgPSBlbmQgb2YgdGV4dG5vZGVcblx0XHRjb25zdCB7IHJhbmdlLCBsZWZ0LCByaWdodCB9ID0gdGhpcy5zZWxlY3Rpb24uZ2V0KCk7XG5cblx0XHRpZiAoIXJhbmdlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gMSAtIGxlZnQgYW5kIHJpZ2h0IGFyZSBzaW5nbGUgdGV4dCBub2RlXG5cdFx0aWYgKGxlZnQuYmxvY2tJbmRleCA9PT0gcmlnaHQuYmxvY2tJbmRleCAmJiBsZWZ0LnRleHRJbmRleCA9PT0gcmlnaHQudGV4dEluZGV4KSB7XG5cdFx0XHRsZXQgcmlnaHRUZXh0SW5kZXggPSBsZWZ0LnRleHRJbmRleDtcblx0XHRcdGxldCByaWdodE9mZnNldCA9IHJpZ2h0Lm9mZnNldDtcblx0XHRcdGNvbnN0IGxlZnRTcGxpdFJlc3VsdCA9IHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0uc3BsaXRUZXh0Tm9kZShsZWZ0LnRleHRJbmRleCwgbGVmdC5vZmZzZXQpO1xuXHRcdFx0Ly8gaW4gdGhpcyBjYXNlIGxlZnQgY2FudCByZXR1cm4gU3BsaXRSZXN1bHQub2Zmc2V0RW5kIGNveiB0aGlzIHRleHROb2RlIGhhcyByaWdodFxuXHRcdFx0Ly8gaWYgbm9kZSB3YXMgc3BsaXRlZCBuZWVkIHRvIHVwZGF0ZSByaWdodCB0ZXh0IGluZGV4IGFuZCByaWdodCBvZmZzZXRcblx0XHRcdGlmIChsZWZ0U3BsaXRSZXN1bHQgPT09IFNwbGl0UmVzdWx0LmNvbXBsZXRlKSB7XG5cdFx0XHRcdHJpZ2h0VGV4dEluZGV4ICs9IDE7XG5cdFx0XHRcdHJpZ2h0T2Zmc2V0IC09IGxlZnQub2Zmc2V0O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5ibG9ja3NbcmlnaHQuYmxvY2tJbmRleF0uc3BsaXRUZXh0Tm9kZShyaWdodFRleHRJbmRleCwgcmlnaHRPZmZzZXQpO1xuXHRcdFx0Y29uc3Qgc2VsZWN0aW9uID0ge1xuXHRcdFx0XHRyYW5nZSxcblx0XHRcdFx0bGVmdDoge1xuXHRcdFx0XHRcdGJsb2NrSW5kZXg6IGxlZnQuYmxvY2tJbmRleCxcblx0XHRcdFx0XHR0ZXh0SW5kZXg6IHJpZ2h0VGV4dEluZGV4LFxuXHRcdFx0XHRcdG9mZnNldDogMCxcblx0XHRcdFx0fSxcblx0XHRcdFx0cmlnaHQ6IHtcblx0XHRcdFx0XHRibG9ja0luZGV4OiByaWdodC5ibG9ja0luZGV4LFxuXHRcdFx0XHRcdHRleHRJbmRleDogcmlnaHRUZXh0SW5kZXgsXG5cdFx0XHRcdFx0b2Zmc2V0OiByaWdodE9mZnNldCxcblx0XHRcdFx0fSxcblx0XHRcdH07XG5cdFx0XHR0aGlzLnNlbGVjdGlvbi5zZXQoc2VsZWN0aW9uKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gMiAtIGxlZnQgYW5kIHJpZ2h0IGxvY2F0ZWQgaW4gb25lIGJsb2NrLCBzbyBsZWZ0IHNwbGl0IGNhbiBtb3ZlIHJpZ2h0IHBvc2l0aW9uXG5cdFx0aWYgKGxlZnQuYmxvY2tJbmRleCA9PT0gcmlnaHQuYmxvY2tJbmRleCkge1xuXHRcdFx0bGV0IGxlZnRUZXh0SW5kZXggPSBsZWZ0LnRleHRJbmRleDtcblx0XHRcdGxldCByaWdodFRleHRJbmRleCA9IHJpZ2h0LnRleHRJbmRleDtcblxuXHRcdFx0Y29uc3QgbGVmdFNwbGl0UmVzdWx0ID0gdGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS5zcGxpdFRleHROb2RlKGxlZnRUZXh0SW5kZXgsIGxlZnQub2Zmc2V0KTtcblx0XHRcdC8vIG1vdmUgc2VsZWN0aW9uIHRvIG5leHQgbm9kZVxuXHRcdFx0aWYgKGxlZnRTcGxpdFJlc3VsdCA9PT0gU3BsaXRSZXN1bHQub2Zmc2V0RW5kKSB7XG5cdFx0XHRcdGxlZnRUZXh0SW5kZXggKz0gMTtcblx0XHRcdH1cblx0XHRcdC8vIG1vdmUgc2VsZWN0aW9uIHRvIG5leHQgbm9kZSBhbmQgdXBkYXRlIHJpZ2h0IHBvc2l0aW9uXG5cdFx0XHRpZiAobGVmdFNwbGl0UmVzdWx0ID09PSBTcGxpdFJlc3VsdC5jb21wbGV0ZSkge1xuXHRcdFx0XHRyaWdodFRleHRJbmRleCArPSAxO1xuXHRcdFx0XHRsZWZ0VGV4dEluZGV4ICs9IDE7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYmxvY2tzW3JpZ2h0LmJsb2NrSW5kZXhdLnNwbGl0VGV4dE5vZGUocmlnaHRUZXh0SW5kZXgsIHJpZ2h0Lm9mZnNldCk7XG5cdFx0XHRjb25zdCBzZWxlY3Rpb24gPSB7XG5cdFx0XHRcdHJhbmdlLFxuXHRcdFx0XHRsZWZ0OiB7XG5cdFx0XHRcdFx0YmxvY2tJbmRleDogbGVmdC5ibG9ja0luZGV4LFxuXHRcdFx0XHRcdHRleHRJbmRleDogbGVmdFRleHRJbmRleCxcblx0XHRcdFx0XHRvZmZzZXQ6IDAsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJpZ2h0OiB7XG5cdFx0XHRcdFx0YmxvY2tJbmRleDogcmlnaHQuYmxvY2tJbmRleCxcblx0XHRcdFx0XHR0ZXh0SW5kZXg6IHJpZ2h0VGV4dEluZGV4LFxuXHRcdFx0XHRcdG9mZnNldDogcmlnaHQub2Zmc2V0LFxuXHRcdFx0XHR9LFxuXHRcdFx0fTtcblx0XHRcdHRoaXMuc2VsZWN0aW9uLnNldChzZWxlY3Rpb24pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQvLyAzIC0gbGVmdCBhbmQgcmlnaHQgbG9jYXRlZCBpbiBkaWZmcmVudCBibG9ja3Ncblx0XHRpZiAobGVmdC5ibG9ja0luZGV4ICE9PSByaWdodC5ibG9ja0luZGV4KSB7XG5cdFx0XHRsZXQgbGVmdFRleHRJbmRleCA9IGxlZnQudGV4dEluZGV4O1xuXHRcdFx0bGV0IGxlZnRCbG9ja0luZGV4ID0gbGVmdC5ibG9ja0luZGV4O1xuXG5cdFx0XHRjb25zdCBsZWZ0U3BsaXRSZXN1bHQgPSB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLnNwbGl0VGV4dE5vZGUobGVmdC50ZXh0SW5kZXgsIGxlZnQub2Zmc2V0KTtcblx0XHRcdHRoaXMuYmxvY2tzW3JpZ2h0LmJsb2NrSW5kZXhdLnNwbGl0VGV4dE5vZGUocmlnaHQudGV4dEluZGV4LCByaWdodC5vZmZzZXQpO1xuXG5cdFx0XHRpZiAobGVmdFNwbGl0UmVzdWx0ID09PSBTcGxpdFJlc3VsdC5vZmZzZXRFbmQpIHtcblx0XHRcdFx0Ly8gaWYgdGhpcyB0ZXh0bm9kZSBoYXZlIG5leHQgbm9kZVxuXHRcdFx0XHRpZiAodGhpcy5ibG9ja3NbbGVmdEJsb2NrSW5kZXhdLnRleHROb2Rlc1tsZWZ0VGV4dEluZGV4ICsgMV0pIHtcblx0XHRcdFx0XHRsZWZ0VGV4dEluZGV4ICs9IDE7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGVmdFRleHRJbmRleCA9IDA7XG5cdFx0XHRcdFx0bGVmdEJsb2NrSW5kZXggKz0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGxlZnRTcGxpdFJlc3VsdCA9PT0gU3BsaXRSZXN1bHQuY29tcGxldGUpIHtcblx0XHRcdFx0bGVmdFRleHRJbmRleCArPSAxO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qgc2VsZWN0aW9uID0ge1xuXHRcdFx0XHRyYW5nZSxcblx0XHRcdFx0bGVmdDoge1xuXHRcdFx0XHRcdGJsb2NrSW5kZXg6IGxlZnRCbG9ja0luZGV4LFxuXHRcdFx0XHRcdHRleHRJbmRleDogbGVmdFRleHRJbmRleCxcblx0XHRcdFx0XHRvZmZzZXQ6IDAsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJpZ2h0OiB7XG5cdFx0XHRcdFx0YmxvY2tJbmRleDogcmlnaHQuYmxvY2tJbmRleCxcblx0XHRcdFx0XHR0ZXh0SW5kZXg6IHJpZ2h0LnRleHRJbmRleCxcblx0XHRcdFx0XHRvZmZzZXQ6IHJpZ2h0Lm9mZnNldCxcblx0XHRcdFx0fSxcblx0XHRcdH07XG5cdFx0XHR0aGlzLnNlbGVjdGlvbi5zZXQoc2VsZWN0aW9uKTtcblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfc3BsaXRDYXJyZXQoKSB7XG5cdFx0Ly8gbmVlZCBmb3Igc3BsaXQgYmxvY2sgaW50byB0ZXh0IG5vZGVzXG5cdFx0Y29uc3QgeyByYW5nZSwgbGVmdCB9ID0gdGhpcy5zZWxlY3Rpb24uZ2V0KCk7XG5cblx0XHRpZiAocmFuZ2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBzcGxpdFJlc3VsdCA9IHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0uc3BsaXRUZXh0Tm9kZShsZWZ0LnRleHRJbmRleCwgbGVmdC5vZmZzZXQpO1xuXG5cdFx0aWYgKHNwbGl0UmVzdWx0ID09PSBTcGxpdFJlc3VsdC5jb21wbGV0ZSkge1xuXHRcdFx0Y29uc3Qgc2VsZWN0aW9uID0ge1xuXHRcdFx0XHRyYW5nZSxcblx0XHRcdFx0bGVmdDoge1xuXHRcdFx0XHRcdGJsb2NrSW5kZXg6IGxlZnQuYmxvY2tJbmRleCxcblx0XHRcdFx0XHR0ZXh0SW5kZXg6IGxlZnQudGV4dEluZGV4ICsgMSxcblx0XHRcdFx0XHRvZmZzZXQ6IDAsXG5cdFx0XHRcdH0sXG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5zZWxlY3Rpb24uc2V0KHNlbGVjdGlvbik7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX3JlbW92ZVJhbmdlKCkge1xuXHRcdC8vIGNhbGwgb25seSBhZnRlciBzcGxpdFJhbmdlXG5cdFx0Y29uc3QgeyBsZWZ0LCByaWdodCB9ID0gdGhpcy5zZWxlY3Rpb24uZ2V0KCk7XG5cdFx0aWYgKCFyaWdodCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5zZWxlY3Rpb24uaXNGdWxsKCkpIHtcblx0XHRcdHRoaXMuY2xlYXIoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKGxlZnQuYmxvY2tJbmRleCA9PT0gcmlnaHQuYmxvY2tJbmRleCkge1xuXHRcdFx0Ly8gc2VsZWN0aW9uIGNvbnRhaW5zIGZ1bGwgYmxvY2tcblx0XHRcdGlmIChcblx0XHRcdFx0bGVmdC50ZXh0SW5kZXggPT09IDAgJiZcblx0XHRcdFx0cmlnaHQudGV4dEluZGV4ID09PSB0aGlzLmJsb2Nrc1tyaWdodC5ibG9ja0luZGV4XS50ZXh0Tm9kZXMubGVuZ3RoIC0gMVxuXHRcdFx0KSB7XG5cdFx0XHRcdHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0uY2xlYXIoKTtcblx0XHRcdFx0dGhpcy5zZWxlY3Rpb24uc2V0KHtcblx0XHRcdFx0XHRyYW5nZTogZmFsc2UsXG5cdFx0XHRcdFx0bGVmdDoge1xuXHRcdFx0XHRcdFx0Li4ubGVmdCxcblx0XHRcdFx0XHRcdG9mZnNldDogMCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0udGV4dE5vZGVzLnNwbGljZShcblx0XHRcdFx0XHRsZWZ0LnRleHRJbmRleCxcblx0XHRcdFx0XHRyaWdodC50ZXh0SW5kZXggLSBsZWZ0LnRleHRJbmRleCArIDFcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKGxlZnQudGV4dEluZGV4ID09PSAwKSB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3Rpb24uc2V0KHtcblx0XHRcdFx0XHRcdHJhbmdlOiBmYWxzZSxcblx0XHRcdFx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0XHRcdFx0YmxvY2tJbmRleDogbGVmdC5ibG9ja0luZGV4LFxuXHRcdFx0XHRcdFx0XHR0ZXh0SW5kZXg6IDAsXG5cdFx0XHRcdFx0XHRcdG9mZnNldDogMCxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3Rpb24uc2V0KHtcblx0XHRcdFx0XHRcdHJhbmdlOiBmYWxzZSxcblx0XHRcdFx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0XHRcdFx0YmxvY2tJbmRleDogbGVmdC5ibG9ja0luZGV4LFxuXHRcdFx0XHRcdFx0XHR0ZXh0SW5kZXg6IGxlZnQudGV4dEluZGV4IC0gMSxcblx0XHRcdFx0XHRcdFx0b2Zmc2V0OiB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLnRleHROb2Rlc1tsZWZ0LnRleHRJbmRleCAtIDFdLnRleHQubGVuZ3RoLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBpc0Z1bGxMZWZ0UmVtb3ZlID0gdGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS5yZW1vdmVOb2RlcyhsZWZ0LnRleHRJbmRleCwgdHJ1ZSk7XG5cdFx0XHRjb25zdCBpc0Z1bGxSaWdodFJlbW92ZSA9IHRoaXMuYmxvY2tzW3JpZ2h0LmJsb2NrSW5kZXhdLnJlbW92ZU5vZGVzKHJpZ2h0LnRleHRJbmRleCwgZmFsc2UpO1xuXG5cdFx0XHRjb25zdCBsZWZ0QmxvY2tFbmQgPSB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLmdldEJsb2NrRW5kKCk7XG5cblx0XHRcdHN3aXRjaCAodHJ1ZSkge1xuXHRcdFx0XHRjYXNlIGlzRnVsbExlZnRSZW1vdmUgJiYgaXNGdWxsUmlnaHRSZW1vdmU6XG5cdFx0XHRcdFx0dGhpcy5ibG9ja3NbbGVmdC5ibG9ja0luZGV4XS5jbGVhcigpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGlzRnVsbExlZnRSZW1vdmUgJiYgIWlzRnVsbFJpZ2h0UmVtb3ZlOlxuXHRcdFx0XHRcdHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF0udGV4dE5vZGVzID0gdGhpcy5ibG9ja3NbcmlnaHQuYmxvY2tJbmRleF0udGV4dE5vZGVzO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICFpc0Z1bGxMZWZ0UmVtb3ZlICYmICFpc0Z1bGxSaWdodFJlbW92ZTpcblx0XHRcdFx0XHR0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLnRleHROb2Rlcy5wdXNoKC4uLnRoaXMuYmxvY2tzW3JpZ2h0LmJsb2NrSW5kZXhdLnRleHROb2Rlcyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgIWlzRnVsbExlZnRSZW1vdmUgJiYgaXNGdWxsUmlnaHRSZW1vdmU6XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAobGV0IGkgPSByaWdodC5ibG9ja0luZGV4OyBpID4gbGVmdC5ibG9ja0luZGV4OyBpLS0pIHtcblx0XHRcdFx0dGhpcy5yZW1vdmVCbG9jayhpKTsgLy8gRklYXG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc0Z1bGxMZWZ0UmVtb3ZlKSB7XG5cdFx0XHRcdHRoaXMuc2VsZWN0aW9uLnNldCh7XG5cdFx0XHRcdFx0cmFuZ2U6IGZhbHNlLFxuXHRcdFx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0XHRcdGJsb2NrSW5kZXg6IGxlZnQuYmxvY2tJbmRleCxcblx0XHRcdFx0XHRcdHRleHRJbmRleDogbGVmdC50ZXh0SW5kZXgsXG5cdFx0XHRcdFx0XHRvZmZzZXQ6IDAsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnNlbGVjdGlvbi5zZXQoe1xuXHRcdFx0XHRcdHJhbmdlOiBmYWxzZSxcblx0XHRcdFx0XHRsZWZ0OiB7XG5cdFx0XHRcdFx0XHRibG9ja0luZGV4OiBsZWZ0LmJsb2NrSW5kZXgsXG5cdFx0XHRcdFx0XHQuLi5sZWZ0QmxvY2tFbmQsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX3JlbW92ZVN5bWJvbChwcmV2OiBib29sZWFuKTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgeyBvZmZzZXQsIGJsb2NrSW5kZXgsIHRleHRJbmRleCB9ID0gdGhpcy5zZWxlY3Rpb24uZ2V0KCkubGVmdDtcblxuXHRcdGNvbnN0IHNlbGVjdGlvbiA9IHtcblx0XHRcdHJhbmdlOiBmYWxzZSxcblx0XHRcdGxlZnQ6IHsgb2Zmc2V0LCBibG9ja0luZGV4LCB0ZXh0SW5kZXggfSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgYmxvY2tFbmQgPSB0aGlzLmJsb2Nrc1tibG9ja0luZGV4XS5nZXRCbG9ja0VuZCgpO1xuXHRcdGNvbnN0IHRleHROb2RlcyA9IHRoaXMuYmxvY2tzW2Jsb2NrSW5kZXhdLnRleHROb2Rlcztcblx0XHRjb25zdCB0ZXh0Tm9kZSA9IHRleHROb2Rlc1t0ZXh0SW5kZXhdO1xuXG5cdFx0bGV0IHJlcGVhdCA9IGZhbHNlO1xuXG5cdFx0c3dpdGNoICh0cnVlKSB7XG5cdFx0XHRjYXNlIHRoaXMuYmxvY2tzW2Jsb2NrSW5kZXhdLmlzRW1wdHkoKTpcblx0XHRcdFx0aWYgKGJsb2NrSW5kZXggPT09IDAgJiYgcHJldikge1xuXHRcdFx0XHRcdGlmICghaXNFbXB0eUJsb2NrU3R5bGUodGhpcy5ibG9ja3NbMF0uc3R5bGUpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmJsb2Nrc1swXS5zdHlsZSA9IGVtcHR5U3R5bGU7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghcHJldiAmJiAhdGhpcy5ibG9ja3NbYmxvY2tJbmRleCArIDFdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMucmVtb3ZlQmxvY2soYmxvY2tJbmRleCk7XG5cdFx0XHRcdGlmIChibG9ja0luZGV4ID09PSAwKSB7XG5cdFx0XHRcdFx0c2VsZWN0aW9uLmxlZnQub2Zmc2V0ID0gMDtcblx0XHRcdFx0XHRzZWxlY3Rpb24ubGVmdC50ZXh0SW5kZXggPSAwO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmIChwcmV2KSB7XG5cdFx0XHRcdFx0XHRzZWxlY3Rpb24ubGVmdCA9IHtcblx0XHRcdFx0XHRcdFx0YmxvY2tJbmRleDogYmxvY2tJbmRleCAtIDEsXG5cdFx0XHRcdFx0XHRcdC4uLnRoaXMuYmxvY2tzW2Jsb2NrSW5kZXggLSAxXS5nZXRCbG9ja0VuZCgpLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIG9mZnNldCA9PT0gMCAmJiB0ZXh0SW5kZXggPT09IDAgJiYgcHJldjogLy8gbW92ZSBhbGwgbm9kZXMgb2YgdGhpcyBibG9jayB0byBwcmV2aW91c1xuXHRcdFx0XHRpZiAoYmxvY2tJbmRleCA9PT0gMCkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5ibG9ja3NbYmxvY2tJbmRleCAtIDFdLmlzRW1wdHkoKSkge1xuXHRcdFx0XHRcdHRoaXMuYmxvY2tzW2Jsb2NrSW5kZXggLSAxXS50ZXh0Tm9kZXMgPSB0ZXh0Tm9kZXM7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVCbG9jayhibG9ja0luZGV4KTtcblx0XHRcdFx0XHRzZWxlY3Rpb24ubGVmdCA9IHtcblx0XHRcdFx0XHRcdGJsb2NrSW5kZXg6IGJsb2NrSW5kZXggLSAxLFxuXHRcdFx0XHRcdFx0dGV4dEluZGV4OiAwLFxuXHRcdFx0XHRcdFx0b2Zmc2V0OiAwLFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgcHJldmlvdXNCbG9ja0VuZCA9IHRoaXMuYmxvY2tzW2Jsb2NrSW5kZXggLSAxXS5nZXRCbG9ja0VuZCgpO1xuXHRcdFx0XHRcdHRoaXMuYmxvY2tzW2Jsb2NrSW5kZXggLSAxXS50ZXh0Tm9kZXMgPSB0aGlzLmJsb2Nrc1tibG9ja0luZGV4IC0gMV0udGV4dE5vZGVzLmNvbmNhdChcblx0XHRcdFx0XHRcdHRleHROb2Rlc1xuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVCbG9jayhibG9ja0luZGV4KTtcblx0XHRcdFx0XHRzZWxlY3Rpb24ubGVmdCA9IHtcblx0XHRcdFx0XHRcdGJsb2NrSW5kZXg6IGJsb2NrSW5kZXggLSAxLFxuXHRcdFx0XHRcdFx0Li4ucHJldmlvdXNCbG9ja0VuZCxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBibG9ja0VuZC5vZmZzZXQgPT09IG9mZnNldCAmJiBibG9ja0VuZC50ZXh0SW5kZXggPT09IHRleHRJbmRleCAmJiAhcHJldjoge1xuXHRcdFx0XHQvLyBtb3ZlIGFsbCBub2RlcyBvZiBuZXh0IGJsb2NrIHRvIHRoaXMgYmxvY2tcblx0XHRcdFx0Y29uc3QgbmV4dEJsb2NrID0gdGhpcy5ibG9ja3NbYmxvY2tJbmRleCArIDFdO1xuXG5cdFx0XHRcdGlmICghbmV4dEJsb2NrKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG5leHRCbG9jay5pc0VtcHR5KCkpIHtcblx0XHRcdFx0XHR0aGlzLnJlbW92ZUJsb2NrKGJsb2NrSW5kZXggKyAxKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmJsb2Nrc1tibG9ja0luZGV4XS50ZXh0Tm9kZXMgPSB0aGlzLmJsb2Nrc1tibG9ja0luZGV4XS50ZXh0Tm9kZXMuY29uY2F0KFxuXHRcdFx0XHRcdG5leHRCbG9jay50ZXh0Tm9kZXNcblx0XHRcdFx0KTtcblx0XHRcdFx0dGhpcy5yZW1vdmVCbG9jayhibG9ja0luZGV4ICsgMSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0ZGVmYXVsdDoge1xuXHRcdFx0XHRjb25zdCByZW1vdmVSZXN1bHQgPSB0ZXh0Tm9kZS5yZW1vdmUob2Zmc2V0LCBwcmV2KTtcblx0XHRcdFx0c3dpdGNoIChyZW1vdmVSZXN1bHQpIHtcblx0XHRcdFx0XHRjYXNlIFJlbW92ZVRleHRSZXN1bHQubnVsbFRleHRMZW5ndGg6XG5cdFx0XHRcdFx0XHRpZiAodGV4dE5vZGVzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdFx0dGV4dE5vZGVzLnNwbGljZSh0ZXh0SW5kZXgsIDEpO1xuXHRcdFx0XHRcdFx0XHRpZiAodGV4dEluZGV4ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZWN0aW9uLmxlZnQgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRibG9ja0luZGV4LFxuXHRcdFx0XHRcdFx0XHRcdFx0dGV4dEluZGV4OiAwLFxuXHRcdFx0XHRcdFx0XHRcdFx0b2Zmc2V0OiAwLFxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZWN0aW9uLmxlZnQgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRibG9ja0luZGV4LFxuXHRcdFx0XHRcdFx0XHRcdFx0dGV4dEluZGV4OiB0ZXh0SW5kZXggLSAxLFxuXHRcdFx0XHRcdFx0XHRcdFx0b2Zmc2V0OiB0ZXh0Tm9kZXNbdGV4dEluZGV4IC0gMV0udGV4dC5sZW5ndGgsXG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGV4dE5vZGUuc3R5bGUgPSBlbXB0eVN0eWxlO1xuXHRcdFx0XHRcdFx0XHRzZWxlY3Rpb24ubGVmdCA9IHtcblx0XHRcdFx0XHRcdFx0XHR0ZXh0SW5kZXgsXG5cdFx0XHRcdFx0XHRcdFx0YmxvY2tJbmRleCxcblx0XHRcdFx0XHRcdFx0XHRvZmZzZXQ6IDAsXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFJlbW92ZVRleHRSZXN1bHQuY29tcGxldGU6XG5cdFx0XHRcdFx0XHRpZiAocHJldikge1xuXHRcdFx0XHRcdFx0XHRzZWxlY3Rpb24ubGVmdCA9IHtcblx0XHRcdFx0XHRcdFx0XHRibG9ja0luZGV4LFxuXHRcdFx0XHRcdFx0XHRcdHRleHRJbmRleCxcblx0XHRcdFx0XHRcdFx0XHRvZmZzZXQ6IG9mZnNldCAtIDEsXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFJlbW92ZVRleHRSZXN1bHQuZm9yY2VSZW1vdmVOZXh0OlxuXHRcdFx0XHRcdFx0c2VsZWN0aW9uLmxlZnQgPSB7XG5cdFx0XHRcdFx0XHRcdGJsb2NrSW5kZXgsXG5cdFx0XHRcdFx0XHRcdHRleHRJbmRleDogdGV4dEluZGV4ICsgMSxcblx0XHRcdFx0XHRcdFx0b2Zmc2V0OiAwLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdHJlcGVhdCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFJlbW92ZVRleHRSZXN1bHQuZm9yY2VSZW1vdmVQcmV2aW91czpcblx0XHRcdFx0XHRcdHNlbGVjdGlvbi5sZWZ0ID0ge1xuXHRcdFx0XHRcdFx0XHRibG9ja0luZGV4LFxuXHRcdFx0XHRcdFx0XHR0ZXh0SW5kZXg6IHRleHRJbmRleCAtIDEsXG5cdFx0XHRcdFx0XHRcdG9mZnNldDogdGV4dE5vZGVzW3RleHRJbmRleCAtIDFdLnRleHQubGVuZ3RoLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdHJlcGVhdCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuc2VsZWN0aW9uLnNldChzZWxlY3Rpb24pO1xuXHRcdGlmIChyZXBlYXQpIHtcblx0XHRcdHJldHVybiB0aGlzLl9yZW1vdmVTeW1ib2wocHJldik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cHJpdmF0ZSBfZWFjaExpbmsoZm46ICh0ZXh0Tm9kZTogVGV4dE5vZGUpID0+IGFueSkge1xuXHRcdGNvbnN0IGxlZnQgPSB0aGlzLnNlbGVjdGlvbi5nZXQoKS5sZWZ0O1xuXHRcdGNvbnN0IGxpbmsgPSB0aGlzLmJsb2Nrc1tsZWZ0LmJsb2NrSW5kZXhdLnRleHROb2Rlc1tsZWZ0LnRleHRJbmRleF0uc3R5bGUubGluaztcblx0XHRpZiAoIWxpbmspIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBibG9jayA9IHRoaXMuYmxvY2tzW2xlZnQuYmxvY2tJbmRleF07XG5cdFx0Y29uc3QgdGV4dE5vZGVzID0gYmxvY2sudGV4dE5vZGVzO1xuXG5cdFx0Y29uc3QgbGlua05vZGVzID0gW107XG5cblx0XHRmb3IgKGxldCBpID0gbGVmdC50ZXh0SW5kZXg7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRpZiAodGV4dE5vZGVzW2ldLnN0eWxlLmxpbmsgIT09IGxpbmspIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRsaW5rTm9kZXMudW5zaGlmdCh0ZXh0Tm9kZXNbaV0pO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IGkgPSBsZWZ0LnRleHRJbmRleCArIDE7IGkgPCB0ZXh0Tm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICh0ZXh0Tm9kZXNbaV0uc3R5bGUubGluayAhPT0gbGluaykge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGxpbmtOb2Rlcy5wdXNoKHRleHROb2Rlc1tpXSk7XG5cdFx0fVxuXHRcdGxpbmtOb2Rlcy5mb3JFYWNoKGZuKTtcblx0fVxuXHRwcml2YXRlIF9jcmVhdGVUZW1wVGV4dE5vZGUoeyBtb2RpZmllciwgbW9kaWZpZXJWYWx1ZSB9KSB7XG5cdFx0Y29uc3QgeyBvZmZzZXQsIGJsb2NrSW5kZXgsIHRleHRJbmRleCB9ID0gdGhpcy5zZWxlY3Rpb24uZ2V0KCkubGVmdDtcblxuXHRcdGxldCBub2RlU3R5bGU7XG5cdFx0aWYgKFxuXHRcdFx0dGhpcy5fdGVtcE5vZGUgJiZcblx0XHRcdHRoaXMuX3RlbXBOb2RlLm9mZnNldCA9PT0gb2Zmc2V0ICYmXG5cdFx0XHR0aGlzLl90ZW1wTm9kZS5ibG9ja0luZGV4ID09PSBibG9ja0luZGV4ICYmXG5cdFx0XHR0aGlzLl90ZW1wTm9kZS50ZXh0SW5kZXggPT09IHRleHRJbmRleFxuXHRcdCkge1xuXHRcdFx0bm9kZVN0eWxlID0gdGhpcy5fdGVtcE5vZGUuc3R5bGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5vZGVTdHlsZSA9IHRoaXMuYmxvY2tzW2Jsb2NrSW5kZXhdLnRleHROb2Rlc1t0ZXh0SW5kZXhdLnN0eWxlO1xuXHRcdH1cblxuXHRcdGNvbnN0IHRlbXBTdHlsZSA9IHtcblx0XHRcdC4uLm5vZGVTdHlsZSxcblx0XHRcdFttb2RpZmllcl06IG1vZGlmaWVyVmFsdWUsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHRleHROb2RlcyA9IHRoaXMuYmxvY2tzW2Jsb2NrSW5kZXhdLnRleHROb2Rlcztcblx0XHRpZiAodGVtcFN0eWxlLmxpbmsgJiYgKCF0ZXh0Tm9kZXNbdGV4dEluZGV4ICsgMV0gfHwgIXRleHROb2Rlc1t0ZXh0SW5kZXggKyAxXS5zdHlsZS5saW5rKSkge1xuXHRcdFx0ZGVsZXRlIHRlbXBTdHlsZS5saW5rO1xuXHRcdH1cblxuXHRcdHRoaXMuX3RlbXBOb2RlID0ge1xuXHRcdFx0c3R5bGU6IHRlbXBTdHlsZSxcblx0XHRcdGJsb2NrSW5kZXgsXG5cdFx0XHR0ZXh0SW5kZXgsXG5cdFx0XHRvZmZzZXQsXG5cdFx0fTtcblx0fVxuXHRwcml2YXRlIF9jcmVhdGVOb2RlRnJvbVRlbXAoZGF0YTogc3RyaW5nKSB7XG5cdFx0Y29uc3QgeyBzdHlsZSwgYmxvY2tJbmRleCwgdGV4dEluZGV4LCBvZmZzZXQgfSA9IHRoaXMuX3RlbXBOb2RlO1xuXG5cdFx0Y29uc3Qgc3BsaXRSZXN1bHQgPSB0aGlzLmJsb2Nrc1tibG9ja0luZGV4XS5zcGxpdFRleHROb2RlKHRleHRJbmRleCwgb2Zmc2V0KTtcblx0XHRjb25zdCBuZXdUZXh0SW5kZXggPSBzcGxpdFJlc3VsdCA9PT0gU3BsaXRSZXN1bHQub2Zmc2V0U3RhcnQgPyB0ZXh0SW5kZXggOiB0ZXh0SW5kZXggKyAxO1xuXHRcdGNvbnN0IHRleHROb2RlID0gbmV3IFRleHROb2RlKGRhdGEsIHN0eWxlKTtcblxuXHRcdGlmICh0aGlzLmJsb2Nrc1tibG9ja0luZGV4XS5pc0VtcHR5KCkpIHtcblx0XHRcdHRoaXMuYmxvY2tzW2Jsb2NrSW5kZXhdLnRleHROb2RlcyA9IFt0ZXh0Tm9kZV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuYmxvY2tzW2Jsb2NrSW5kZXhdLnRleHROb2Rlcy5zcGxpY2UobmV3VGV4dEluZGV4LCAwLCB0ZXh0Tm9kZSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zZWxlY3Rpb24uc2V0KHtcblx0XHRcdHJhbmdlOiBmYWxzZSxcblx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0YmxvY2tJbmRleCxcblx0XHRcdFx0dGV4dEluZGV4OiBuZXdUZXh0SW5kZXgsXG5cdFx0XHRcdG9mZnNldDogZGF0YS5sZW5ndGgsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHRcdHRoaXMuX3RlbXBOb2RlID0gbnVsbDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufVxuIiwiaW1wb3J0IHsgZW1wdHlTdHlsZSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IElTdHlsZSB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5leHBvcnQgZW51bSBSZW1vdmVUZXh0UmVzdWx0IHtcblx0dGV4dElzRW1wdHksXG5cdGNvbXBsZXRlLFxuXHRudWxsVGV4dExlbmd0aCxcblx0Zm9yY2VSZW1vdmVQcmV2aW91cyxcblx0Zm9yY2VSZW1vdmVOZXh0LFxufVxuXG5leHBvcnQgY2xhc3MgVGV4dE5vZGUge1xuXHQvLyBkbyBub3QgbXV0YXRlIHN0eWxlXG5cdHB1YmxpYyBzdHlsZTogSVN0eWxlO1xuXHRwdWJsaWMgdGV4dDogc3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKHRleHQ6IHN0cmluZywgc3R5bGU/OiBJU3R5bGUpIHtcblx0XHR0aGlzLnRleHQgPSB0ZXh0O1xuXHRcdHRoaXMuc3R5bGUgPSBzdHlsZSB8fCBlbXB0eVN0eWxlO1xuXHR9XG5cdGlzRW1wdHkoKSB7XG5cdFx0cmV0dXJuIHRoaXMudGV4dC5sZW5ndGggPT09IDA7XG5cdH1cblx0aW5zZXJ0KGRhdGE6IHN0cmluZywgb2Zmc2V0OiBudW1iZXIpIHtcblx0XHR0aGlzLnRleHQgPSB0aGlzLnRleHQuc2xpY2UoMCwgb2Zmc2V0KSArIGRhdGEgKyB0aGlzLnRleHQuc2xpY2Uob2Zmc2V0KTtcblx0fVxuXHRyZW1vdmUob2Zmc2V0OiBudW1iZXIsIHByZXY6IGJvb2xlYW4pOiBSZW1vdmVUZXh0UmVzdWx0IHtcblx0XHRpZiAodGhpcy5pc0VtcHR5KCkpIHtcblx0XHRcdHJldHVybiBSZW1vdmVUZXh0UmVzdWx0LnRleHRJc0VtcHR5O1xuXHRcdH1cblx0XHRpZiAob2Zmc2V0ID09PSAwICYmIHByZXYpIHtcblx0XHRcdHJldHVybiBSZW1vdmVUZXh0UmVzdWx0LmZvcmNlUmVtb3ZlUHJldmlvdXM7XG5cdFx0fVxuXHRcdGlmIChvZmZzZXQgPT09IHRoaXMudGV4dC5sZW5ndGggJiYgIXByZXYpIHtcblx0XHRcdHJldHVybiBSZW1vdmVUZXh0UmVzdWx0LmZvcmNlUmVtb3ZlTmV4dDtcblx0XHR9XG5cblx0XHRpZiAocHJldikge1xuXHRcdFx0dGhpcy50ZXh0ID0gdGhpcy50ZXh0LnNsaWNlKDAsIG9mZnNldCAtIDEpICsgdGhpcy50ZXh0LnNsaWNlKG9mZnNldCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBvZmZzZXQpICsgdGhpcy50ZXh0LnNsaWNlKG9mZnNldCArIDEpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnRleHQubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gUmVtb3ZlVGV4dFJlc3VsdC5udWxsVGV4dExlbmd0aDtcblx0XHR9XG5cblx0XHRyZXR1cm4gUmVtb3ZlVGV4dFJlc3VsdC5jb21wbGV0ZTtcblx0fVxufVxuIiwiaW1wb3J0IHsgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgVG9vbGJhciB9IGZyb20gXCJAZGh4L3RzLXRvb2xiYXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJTm9kZVBvc2l0aW9uIHtcblx0b2Zmc2V0OiBudW1iZXI7XG5cdHRleHRJbmRleDogbnVtYmVyO1xuXHRibG9ja0luZGV4OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3Rpb25TdGF0ZSB7XG5cdHJhbmdlPzogYm9vbGVhbjtcblx0bGVmdD86IElOb2RlUG9zaXRpb247XG5cdHJpZ2h0PzogSU5vZGVQb3NpdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUmljaFRleHQge1xuXHR0b29sYmFyOiBUb29sYmFyO1xuXHRldmVudHM6IElFdmVudFN5c3RlbTxSaWNoVGV4dEV2ZW50cz47XG5cdGNvbmZpZzogSVJpY2hUZXh0Q29uZmlnO1xuXG5cdGdldFN0YXRzKHNlbGVjdGlvbj86IGJvb2xlYW4pOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9O1xuXHRnZXRWYWx1ZShtb2RlPzogXCJodG1sXCIgfCBcIm1hcmtkb3duXCIgfCBcInRleHRcIik6IHN0cmluZztcblx0c2V0VmFsdWUodmFsdWU6IHN0cmluZywgbW9kZT86IFwiaHRtbFwiIHwgXCJtYXJrZG93blwiKTogdm9pZDtcblxuXHRmdWxsU2NyZWVuKCk6IHZvaWQ7XG5cdGV4aXRGdWxsU2NyZWVuKCk6IHZvaWQ7XG5cblx0Z2V0RWRpdG9yQVBJKCk6IElFZGl0b3JBUEk7XG5cblx0ZGVzdHJ1Y3RvcigpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0IHtcblx0bmFtZTogc3RyaW5nO1xuXHRjYj86ICgodGV4dDogc3RyaW5nKSA9PiBudW1iZXIpIHwgc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSaWNoVGV4dENvbmZpZyB7XG5cdGNzcz86IHN0cmluZztcblx0bW9kZT86IFwiZG9jdW1lbnRcIiB8IFwiY2xhc3NpY1wiO1xuXHR0b29sYmFyQmxvY2tzPzogUlRFVG9vbGJhckJsb2NrW107XG5cdGN1c3RvbVN0YXRzOiBJU3RhdFtdO1xufVxuXG5leHBvcnQgZW51bSBNb2RpZmllciB7XG5cdG5vbmUsXG5cdC8vIGJsb2NrIG1vZHNcblx0c3R5bGUgPSBcInN0eWxlXCIsXG5cdGFsaWduID0gXCJhbGlnblwiLFxuXHRibG9ja3F1b3RlID0gXCJibG9ja3F1b3RlXCIsXG5cdC8vIHRleHQgbW9kc1xuXHRib2xkID0gXCJib2xkXCIsXG5cdGl0YWxpYyA9IFwiaXRhbGljXCIsXG5cdHN0cmlrZSA9IFwic3RyaWtlXCIsXG5cdGZvbnRTaXplID0gXCJmb250LXNpemVcIixcblx0Zm9udEZhbWlseSA9IFwiZm9udC1mYW1pbHlcIixcblx0dW5kZXJsaW5lID0gXCJ1bmRlcmxpbmVcIixcblx0Y29sb3IgPSBcImNvbG9yXCIsXG5cdGJhY2tncm91bmQgPSBcImJhY2tncm91bmRcIixcblx0bGluayA9IFwibGlua1wiLFxufVxuXG5leHBvcnQgZW51bSBBY3Rpb24ge1xuXHRhZGQgPSBcImFkZFwiLFxuXHRpbm5lckFkZCA9IFwiaW5uZXJBZGRcIixcblx0cmVtb3ZlID0gXCJyZW1vdmVcIixcblx0dXBkYXRlID0gXCJ1cGRhdGVcIixcblx0dW5kbyA9IFwidW5kb1wiLFxuXHRwYXN0ZSA9IFwicGFzdGVcIixcblx0Y29weSA9IFwiY29weVwiLFxuXHRjdXQgPSBcImN1dFwiLFxuXHRyZWRvID0gXCJyZWRvXCIsXG5cdGNsZWFyID0gXCJjbGVhclwiLFxuXHRwYXJzZSA9IFwicGFyc2VcIixcblx0c2VsZWN0QWxsID0gXCJzZWxlY3RBbGxcIixcbn1cblxuZXhwb3J0IGVudW0gUlRFVG9vbGJhckJsb2NrIHtcblx0ZGVmYXVsdCA9IFwiZGVmYXVsdFwiLFxuXHR1bmRvID0gXCJ1bmRvXCIsXG5cdHN0eWxlID0gXCJzdHlsZVwiLFxuXHRkZWNvcmF0aW9uID0gXCJkZWNvcmF0aW9uXCIsXG5cdGNvbG9yID0gXCJjb2xvcnNcIixcblx0YWxpZ24gPSBcImFsaWduXCIsXG5cdGxpbmsgPSBcImxpbmtcIixcblx0Y2xlYXIgPSBcImNsZWFyXCIsXG5cdGZ1bGxzY3JlZW4gPSBcImZ1bGxzY3JlZW5cIixcblx0c3RhdHMgPSBcInN0YXRzXCIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wZXJhdGlvbiB7XG5cdGFjdGlvbjogQWN0aW9uO1xuXHRkYXRhPzogYW55O1xufVxuXG5leHBvcnQgZW51bSBSaWNoVGV4dEV2ZW50cyB7XG5cdGNoYW5nZSA9IFwiY2hhbmdlXCIsXG5cdGFjdGlvbiA9IFwiYWN0aW9uXCIsXG5cdHNlbGVjdGlvbkNoYW5nZSA9IFwic2VsZWN0aW9uY2hhbmdlXCIsXG5cdHNlbGVjdGlvblJlZnJlc2ggPSBcInNlbGVjdGlvbnJlZnJlc2hcIixcblx0c2hvd0xpbmtFZGl0b3IgPSBcInNob3dsaW5rZWRpdG9yXCIsXG5cdGNvbXBvc2l0aW9uU3RhcnQgPSBcImNvbXBvc2l0aW9uc3RhcnRcIixcblx0Y29tcG9zaXRpb25VcGRhdGUgPSBcImNvbXBvc2l0aW9udXBkYXRlXCIsXG5cdGNvbXBvc2l0aW9uRW5kID0gXCJjb21wb3NpdGlvbmVuZFwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUZXh0IHtcblx0aWQ6IHN0cmluZztcblx0dGV4dDogc3RyaW5nO1xuXHRzdHlsZXM6IElTdHlsZTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSVN0eWxlIHtcblx0W2tleTogc3RyaW5nXTogYW55O1xufVxuXG5pbnRlcmZhY2UgSUV2ZW50SGFuZGxlcnNNYXAge1xuXHRba2V5OiBzdHJpbmddOiAoLi4uYXJnczogYW55W10pID0+IGFueTtcblx0W1JpY2hUZXh0RXZlbnRzLmFjdGlvbl06IChhY3Rpb246IEFjdGlvbiwgZGF0YT86IGFueSwgcmVzdG9yZUZvY3VzPzogYm9vbGVhbikgPT4gYW55O1xuXHRbUmljaFRleHRFdmVudHMuc2hvd0xpbmtFZGl0b3JdOiAoKSA9PiB2b2lkO1xuXHRbUmljaFRleHRFdmVudHMuc2VsZWN0aW9uQ2hhbmdlXTogKHNlbGVjdGlvbjogSVNlbGVjdGlvblN0YXRlKSA9PiBhbnk7XG5cdFtSaWNoVGV4dEV2ZW50cy5zZWxlY3Rpb25SZWZyZXNoXTogKCkgPT4gdm9pZDtcblx0W1JpY2hUZXh0RXZlbnRzLmNoYW5nZV06IChhY3Rpb246IEFjdGlvbiwgY2FuVW5kbzogYm9vbGVhbiwgY2FuUmVkbzogYm9vbGVhbikgPT4gYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSaWNoVGV4dEV2ZW50U3lzdGVtIGV4dGVuZHMgSUV2ZW50U3lzdGVtPFJpY2hUZXh0RXZlbnRzPiB7XG5cdG9uPEsgZXh0ZW5kcyBrZXlvZiBJRXZlbnRIYW5kbGVyc01hcD4oXG5cdFx0ZXZlbnQ6IEssXG5cdFx0Y2FsbGJhY2s6IElFdmVudEhhbmRsZXJzTWFwW0tdLFxuXHRcdGNvbnRleHQ/OiBhbnlcblx0KTogYm9vbGVhbiB8IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFkZENvbmZpZyB7XG5cdHR5cGU6IFwiZnVsbFwiIHwgXCJ0ZXh0bm9kZVwiIHwgXCJ0ZXh0XCI7XG5cdGRhdGE6IElCbG9ja1tdIHwgc3RyaW5nIHwgSVRleHROb2RlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3Rpb25Qb3NpdGlvbiB7XG5cdHhTdGFydD86IG51bWJlcjtcblx0eVN0YXJ0PzogbnVtYmVyO1xuXHR4RW5kPzogbnVtYmVyO1xuXHR5RW5kPzogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgSVVwZGF0ZUNvbmZpZyB7XG5cdG1vZGlmaWVyOiBNb2RpZmllcjtcblx0dmFsdWU6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVGV4dE5vZGUge1xuXHR0ZXh0OiBzdHJpbmc7XG5cdHN0eWxlOiBJU3R5bGU7XG59XG5leHBvcnQgaW50ZXJmYWNlIElCbG9jayB7XG5cdHRleHROb2RlczogSVRleHROb2RlW107XG5cdHN0eWxlOiBJU3R5bGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVkaXRvckFQSSB7XG5cdGdldFBvc2l0aW9uKHNlbGVjdGlvbjogSVNlbGVjdGlvblN0YXRlKTogUHJvbWlzZTxJU2VsZWN0aW9uUG9zaXRpb24+O1xuXHRnZXRTZWxlY3Rpb24oKTogSVNlbGVjdGlvblN0YXRlO1xuXHRzZXRTZWxlY3Rpb24oc2VsZWN0aW9uOiBJU2VsZWN0aW9uU3RhdGUpOiB2b2lkO1xuXG5cdGFkZChjZmc6IElBZGRDb25maWcgfCBzdHJpbmcsIHNlbGVjdGlvbj86IElTZWxlY3Rpb25TdGF0ZSk6IGFueTtcblx0dXBkYXRlKGNmZzogSVVwZGF0ZUNvbmZpZywgc2VsZWN0aW9uPzogSVNlbGVjdGlvblN0YXRlKTogYW55O1xuXHRyZW1vdmUoc2VsZWN0aW9uPzogSVNlbGVjdGlvblN0YXRlKTogYW55O1xuXG5cdGdldE1vZGVsKCk6IElCbG9ja1tdO1xuXHRzZXRNb2RlbChibG9ja3M6IElCbG9ja1tdLCBzZWxlY3Rpb24/OiBJU2VsZWN0aW9uU3RhdGUpOiBhbnk7XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL1NsaWRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy90eXBlc1wiO1xuIiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcbmltcG9ydCB7IGNyZWF0ZSwgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBJSGFuZGxlcnMgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vdHlwZXNcIjtcbmltcG9ydCB7IEV2ZW50U3lzdGVtLCBJRXZlbnRTeXN0ZW0gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZXZlbnRzXCI7XG5pbXBvcnQgeyBLZXlNYW5hZ2VyLCBJS2V5TWFuYWdlciB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9LZXlNYW5hZ2VyXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3ZpZXdcIjtcbmltcG9ydCB7IFBvcHVwIH0gZnJvbSBcIkBkaHgvdHMtcG9wdXBcIjtcbmltcG9ydCB7IElTbGlkZXIsIFNsaWRlckV2ZW50cywgSVNsaWRlckNvbmZpZywgQWN0aXZlU2xpZGVyLCBJU2xpZGVyRXZlbnRIYW5kbGVyc01hcCB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRMYWJlbFN0eWxlIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2h0bWxcIjtcblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUsIG1pbiwgbWF4KSB7XG5cdGlmICh2YWx1ZSA8IG1pbikge1xuXHRcdHJldHVybiBtaW47XG5cdH1cblx0aWYgKHZhbHVlID4gbWF4KSB7XG5cdFx0cmV0dXJuIG1heDtcblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmFsdWUodmFsdWU6IG51bWJlcltdIHwgbnVtYmVyIHwgc3RyaW5nLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdGxldCB2YWx1ZXM7XG5cdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFsdWVzID0gW107XG5cdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHR2YWx1ZXMgPSB2YWx1ZTtcblx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcblx0XHR2YWx1ZXMgPSB2YWx1ZS5zcGxpdChcIixcIikubWFwKHYgPT4gcGFyc2VJbnQodiwgMTApKTtcblx0fSBlbHNlIHtcblx0XHR2YWx1ZXMgPSBbdmFsdWVdO1xuXHR9XG5cdHZhbHVlc1swXSA9IHZhbHVlc1swXSA9PT0gdW5kZWZpbmVkID8gbWluIDogbm9ybWFsaXplVmFsdWUodmFsdWVzWzBdLCBtaW4sIG1heCk7XG5cdHZhbHVlc1sxXSA9IHZhbHVlc1sxXSA9PT0gdW5kZWZpbmVkID8gbWF4IDogbm9ybWFsaXplVmFsdWUodmFsdWVzWzFdLCBtaW4sIG1heCk7XG5cdHJldHVybiB2YWx1ZXM7XG59XG5cbmV4cG9ydCBjbGFzcyBTbGlkZXIgZXh0ZW5kcyBWaWV3IGltcGxlbWVudHMgSVNsaWRlciB7XG5cdHB1YmxpYyBjb25maWc6IElTbGlkZXJDb25maWc7XG5cdHB1YmxpYyBldmVudHM6IElFdmVudFN5c3RlbTxTbGlkZXJFdmVudHMsIElTbGlkZXJFdmVudEhhbmRsZXJzTWFwPjtcblxuXHRwcm90ZWN0ZWQgX2hlbHBlcjogUG9wdXA7XG5cblx0cHJpdmF0ZSBfb2Zmc2V0czogeyBsZWZ0OiBudW1iZXI7IHRvcDogbnVtYmVyIH07XG5cdHByaXZhdGUgX2N1cnJlbnRQb3NpdGlvbjogbnVtYmVyO1xuXHRwcml2YXRlIF9leHRyYUN1cnJlbnRQb3NpdGlvbjogbnVtYmVyO1xuXHRwcml2YXRlIF9sZW5ndGg6IG51bWJlcjtcblx0cHJpdmF0ZSBfYXhpczogc3RyaW5nO1xuXHRwcml2YXRlIF9pc0V4dHJhQWN0aXZlOiBib29sZWFuO1xuXHRwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuXHRwcml2YXRlIF9pc01vdXNlTW92aW5nOiBib29sZWFuO1xuXHRwcml2YXRlIF9rZXlNYW5hZ2VyOiBJS2V5TWFuYWdlcjtcblx0cHJpdmF0ZSBfaGFuZGxlcnM6IElIYW5kbGVycztcblx0cHJpdmF0ZSBfcG9zc2libGVSYW5nZTogW251bWJlciwgbnVtYmVyXTtcblx0cHJpdmF0ZSBfZmluZE5ld0RpcmVjdGlvbjogbnVtYmVyO1xuXHRwcml2YXRlIF9tb3VzZUluOiBib29sZWFuO1xuXHRwcml2YXRlIF9mb2N1c0luOiBib29sZWFuO1xuXHRwcml2YXRlIF90b29sdGlwOiBIVE1MRWxlbWVudDtcblx0cHJpdmF0ZSBfYWN0aXZlVG9vbHRpcDogQWN0aXZlU2xpZGVyO1xuXG5cdGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBzdHJpbmcsIGNvbmZpZzogSVNsaWRlckNvbmZpZykge1xuXHRcdHN1cGVyKFxuXHRcdFx0Y29udGFpbmVyLFxuXHRcdFx0ZXh0ZW5kKFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bW9kZTogXCJob3Jpem9udGFsXCIsXG5cdFx0XHRcdFx0bWluOiAwLFxuXHRcdFx0XHRcdG1heDogMTAwLFxuXHRcdFx0XHRcdHN0ZXA6IDEsXG5cdFx0XHRcdFx0dG9vbHRpcDogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0Y29uZmlnXG5cdFx0XHQpXG5cdFx0KTtcblx0XHR0aGlzLmNvbmZpZy5oZWxwTWVzc2FnZSA9IHRoaXMuY29uZmlnLmhlbHBNZXNzYWdlIHx8IHRoaXMuY29uZmlnLmhlbHA7IC8vIFRPRE86IHJlbW92ZSBzdWl0ZV83LjBcblx0XHRpZiAodGhpcy5jb25maWcudGh1bWJMYWJlbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLmNvbmZpZy50b29sdGlwID0gdGhpcy5jb25maWcudGh1bWJMYWJlbDsgLy8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdH1cblx0XHRpZiAodGhpcy5jb25maWcubGFiZWxJbmxpbmUpIHtcblx0XHRcdHRoaXMuY29uZmlnLmxhYmVsUG9zaXRpb24gPSBcImxlZnRcIjsgLy8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdH1cblx0XHR0aGlzLmV2ZW50cyA9IG5ldyBFdmVudFN5c3RlbSh0aGlzKTtcblx0XHR0aGlzLl9heGlzID0gdGhpcy5jb25maWcubW9kZSA9PT0gXCJob3Jpem9udGFsXCIgPyBcImNsaWVudFhcIiA6IFwiY2xpZW50WVwiO1xuXHRcdHRoaXMuX2luaXRTdGFydFBvc2l0aW9uKCk7XG5cdFx0dGhpcy5fa2V5TWFuYWdlciA9IG5ldyBLZXlNYW5hZ2VyKCgpID0+IHtcblx0XHRcdGNvbnN0IGFjdGl2ZUVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0XHRcdGNvbnN0IGVsZW1lbnQgPSB0aGlzLmdldFJvb3RWaWV3KCkucmVmc1t0aGlzLl9pc0V4dHJhQWN0aXZlID8gXCJleHRyYVJ1bm5lclwiIDogXCJydW5uZXJcIl0/LmVsO1xuXHRcdFx0cmV0dXJuIGFjdGl2ZUVsID09PSBlbGVtZW50O1xuXHRcdH0pO1xuXHRcdHRoaXMuX2luaXRIb3RrZXlzKCk7XG5cdFx0Y29uc3Qgdk5vZGUgPSBjcmVhdGUoe1xuXHRcdFx0cmVuZGVyOiAoKSA9PiB0aGlzLl9kcmF3KCksXG5cdFx0XHRob29rczoge1xuXHRcdFx0XHRkaWRNb3VudDogKCkgPT4gdGhpcy5fY2FsY1NsaWRlclBvc2l0aW9uKCksXG5cdFx0XHRcdGRpZFJlZHJhdzogKCkgPT4gdGhpcy5fY2FsY1NsaWRlclBvc2l0aW9uKCksXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHRcdHRoaXMuX2luaXRIYW5kbGVycygpO1xuXHRcdHRoaXMubW91bnQoY29udGFpbmVyLCB2Tm9kZSk7XG5cdH1cblx0ZGlzYWJsZSgpOiB2b2lkIHtcblx0XHR0aGlzLl9kaXNhYmxlZCA9IHRydWU7XG5cdFx0dGhpcy5wYWludCgpO1xuXHR9XG5cdGVuYWJsZSgpOiB2b2lkIHtcblx0XHR0aGlzLl9kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRpc0Rpc2FibGVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLl9kaXNhYmxlZDtcblx0fVxuXHRmb2N1cyhleHRyYT86IGJvb2xlYW4pOiB2b2lkIHtcblx0XHR0aGlzLmdldFJvb3RWaWV3KCkucmVmc1tleHRyYSA/IFwiZXh0cmFSdW5uZXJcIiA6IFwicnVubmVyXCJdLmVsLmZvY3VzKCk7XG5cdH1cblx0Ymx1cigpOiB2b2lkIHtcblx0XHR0aGlzLmdldFJvb3RWaWV3KCkucmVmc1t0aGlzLl9pc0V4dHJhQWN0aXZlID8gXCJleHRyYVJ1bm5lclwiIDogXCJydW5uZXJcIl0uZWwuYmx1cigpO1xuXHR9XG5cdGdldFZhbHVlKCk6IG51bWJlcltdIHtcblx0XHRsZXQgcmVzO1xuXHRcdGlmICh0aGlzLmNvbmZpZy5yYW5nZSkge1xuXHRcdFx0Y29uc3QgYSA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX2N1cnJlbnRQb3NpdGlvbik7XG5cdFx0XHRjb25zdCBiID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fZXh0cmFDdXJyZW50UG9zaXRpb24pO1xuXHRcdFx0cmVzID0gYSA8IGIgPyBbYSwgYl0gOiBbYiwgYV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlcyA9IFt0aGlzLl9nZXRWYWx1ZSh0aGlzLl9jdXJyZW50UG9zaXRpb24pXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXHRzZXRWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgbnVtYmVyW10pIHtcblx0XHRjb25zdCBvbGQgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9jdXJyZW50UG9zaXRpb24pO1xuXHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAxKSB7XG5cdFx0XHRjb25zdCBvbGRFeHRyYSA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX2V4dHJhQ3VycmVudFBvc2l0aW9uKTtcblx0XHRcdHRoaXMuX3NldFZhbHVlKHZhbHVlWzBdLCBmYWxzZSk7XG5cdFx0XHR0aGlzLmV2ZW50cy5maXJlKFNsaWRlckV2ZW50cy5jaGFuZ2UsIFt2YWx1ZVswXSwgb2xkLCBmYWxzZV0pO1xuXHRcdFx0dGhpcy5fc2V0VmFsdWUodmFsdWVbMV0sIHRydWUpO1xuXHRcdFx0dGhpcy5ldmVudHMuZmlyZShTbGlkZXJFdmVudHMuY2hhbmdlLCBbdmFsdWVbMV0sIG9sZEV4dHJhLCB0cnVlXSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSBhcyBzdHJpbmcpO1xuXHRcdFx0aWYgKCFpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0dGhpcy5fc2V0VmFsdWUodmFsdWUpO1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKFNsaWRlckV2ZW50cy5jaGFuZ2UsIFt2YWx1ZSwgb2xkLCBmYWxzZV0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdFwiV3JvbmcgdmFsdWUgdHlwZSwgZm9yIG1vcmUgaW5mbyBjaGVjayBkb2N1bWVudGF0aW9uIGh0dHBzOi8vZG9jcy5kaHRtbHguY29tL3N1aXRlL3NsaWRlcl9fYXBpX19zbGlkZXJfc2V0dmFsdWVfbWV0aG9kLmh0bWxcIlxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLnBhaW50KCk7XG5cdH1cblx0ZGVzdHJ1Y3RvcigpIHtcblx0XHR0aGlzLl9rZXlNYW5hZ2VyICYmIHRoaXMuX2tleU1hbmFnZXIuZGVzdHJ1Y3RvcigpO1xuXHRcdGRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5fdG9vbHRpcCkgJiYgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLl90b29sdGlwKTtcblx0XHR0aGlzLl90b29sdGlwID0gbnVsbDtcblx0XHR0aGlzLnVubW91bnQoKTtcblx0fVxuXHRwcml2YXRlIF9jYWxjU2xpZGVyUG9zaXRpb24oKSB7XG5cdFx0Y29uc3Qgcm9vdCA9IHRoaXMuZ2V0Um9vdFZpZXcoKTtcblx0XHRpZiAoIXJvb3QpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgdHJhY2tlcjogSFRNTEVsZW1lbnQgPSByb290LnJlZnMudHJhY2suZWw7XG5cdFx0Y29uc3QgcmVjdCA9IHRyYWNrZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0dGhpcy5fb2Zmc2V0cyA9IHtcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdFx0fTtcblx0XHR0aGlzLl9sZW5ndGggPSB0aGlzLmNvbmZpZy5tb2RlID09PSBcImhvcml6b250YWxcIiA/IHJlY3Qud2lkdGggOiByZWN0LmhlaWdodDtcblx0fVxuXHRwcml2YXRlIF9pbml0SG90a2V5cygpIHtcblx0XHRjb25zdCBoYW5kbGVycyA9IHtcblx0XHRcdGFycm93TGVmdDogZSA9PiB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhpcy5fbW92ZSgtdGhpcy5jb25maWcuc3RlcCwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X3NsaWRlcl9fdGh1bWItLWV4dHJhXCIpKTtcblx0XHRcdH0sXG5cdFx0XHRhcnJvd1JpZ2h0OiBlID0+IHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR0aGlzLl9tb3ZlKHRoaXMuY29uZmlnLnN0ZXAsIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImRoeF9zbGlkZXJfX3RodW1iLS1leHRyYVwiKSk7XG5cdFx0XHR9LFxuXHRcdFx0YXJyb3dVcDogZSA9PiB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhpcy5fbW92ZSh0aGlzLmNvbmZpZy5zdGVwLCBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJkaHhfc2xpZGVyX190aHVtYi0tZXh0cmFcIikpO1xuXHRcdFx0fSxcblx0XHRcdGFycm93RG93bjogZSA9PiB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhpcy5fbW92ZSgtdGhpcy5jb25maWcuc3RlcCwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X3NsaWRlcl9fdGh1bWItLWV4dHJhXCIpKTtcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGZvciAoY29uc3Qga2V5IGluIGhhbmRsZXJzKSB7XG5cdFx0XHR0aGlzLl9rZXlNYW5hZ2VyLmFkZEhvdEtleShrZXksIGhhbmRsZXJzW2tleV0pO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIF9tb3ZlKHZhbHVlOiBudW1iZXIsIGZvckV4dHJhPzogYm9vbGVhbikge1xuXHRcdGlmICh0aGlzLmNvbmZpZy5pbnZlcnNlKSB7XG5cdFx0XHR2YWx1ZSA9IC12YWx1ZTtcblx0XHR9XG5cdFx0Y29uc3QgeyBtYXgsIG1pbiB9ID0gdGhpcy5jb25maWc7XG5cdFx0Y29uc3Qgb2xkVmFsdWUgPSBmb3JFeHRyYVxuXHRcdFx0PyB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9leHRyYUN1cnJlbnRQb3NpdGlvbilcblx0XHRcdDogdGhpcy5fZ2V0VmFsdWUodGhpcy5fY3VycmVudFBvc2l0aW9uKTtcblx0XHRsZXQgbmV3VmFsdWUgPSBvbGRWYWx1ZSArIHZhbHVlO1xuXG5cdFx0dGhpcy5fc2V0VmFsdWUob2xkVmFsdWUgKyB2YWx1ZSwgZm9yRXh0cmEpO1xuXHRcdGlmIChuZXdWYWx1ZSA+IG1heCB8fCBuZXdWYWx1ZSA8IG1pbikge1xuXHRcdFx0bmV3VmFsdWUgPSBvbGRWYWx1ZTtcblx0XHR9XG5cdFx0dGhpcy5ldmVudHMuZmlyZShTbGlkZXJFdmVudHMuY2hhbmdlLCBbbmV3VmFsdWUsIG9sZFZhbHVlLCBmb3JFeHRyYV0pO1xuXHRcdHRoaXMucGFpbnQoKTtcblx0fVxuXHRwcml2YXRlIF9pbml0U3RhcnRQb3NpdGlvbigpIHtcblx0XHRjb25zdCB7IG1heCwgbWluLCByYW5nZSB9ID0gdGhpcy5jb25maWc7XG5cdFx0Y29uc3QgW3ZhbHVlLCBleHRyYVZhbHVlXSA9IHBhcnNlVmFsdWUodGhpcy5jb25maWcudmFsdWUsIHRoaXMuY29uZmlnLm1pbiwgdGhpcy5jb25maWcubWF4KTtcblxuXHRcdHRoaXMuX2N1cnJlbnRQb3NpdGlvbiA9ICgodmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbikpICogMTAwO1xuXHRcdGlmIChyYW5nZSkge1xuXHRcdFx0dGhpcy5fZXh0cmFDdXJyZW50UG9zaXRpb24gPSAoKG1heCAtIGV4dHJhVmFsdWUpIC8gKG1heCAtIG1pbikpICogMTAwO1xuXHRcdH1cblx0XHR0aGlzLl9jdXJyZW50UG9zaXRpb24gPSAoKHZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pKSAqIDEwMDtcblx0XHRpZiAocmFuZ2UpIHtcblx0XHRcdHRoaXMuX2V4dHJhQ3VycmVudFBvc2l0aW9uID0gKChleHRyYVZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pKSAqIDEwMDtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2lzSW52ZXJzZSgpKSB7XG5cdFx0XHR0aGlzLl9jdXJyZW50UG9zaXRpb24gPSAxMDAgLSB0aGlzLl9jdXJyZW50UG9zaXRpb247XG5cdFx0XHRpZiAocmFuZ2UpIHtcblx0XHRcdFx0dGhpcy5fZXh0cmFDdXJyZW50UG9zaXRpb24gPSAxMDAgLSB0aGlzLl9leHRyYUN1cnJlbnRQb3NpdGlvbjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfZ2V0VmFsdWUodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG5cdFx0aWYgKHRoaXMuX2lzSW52ZXJzZSgpKSB7XG5cdFx0XHR2YWx1ZSA9IDEwMCAtIHZhbHVlO1xuXHRcdH1cblx0XHRjb25zdCB7IG1pbiwgbWF4LCBzdGVwIH0gPSB0aGlzLmNvbmZpZztcblx0XHRpZiAodmFsdWUgPT09IDEwMCkge1xuXHRcdFx0cmV0dXJuIG1heDtcblx0XHR9XG5cdFx0aWYgKHZhbHVlID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gbWluO1xuXHRcdH1cblx0XHRjb25zdCB2YWwgPSAodmFsdWUgKiAobWF4IC0gbWluKSkgLyAxMDA7XG5cdFx0Y29uc3QgcmVtYWluID0gdmFsICUgc3RlcDtcblx0XHRjb25zdCByb3VuZGVyID0gcmVtYWluID49IHN0ZXAgLyAyID8gc3RlcCA6IDA7XG5cdFx0Y29uc3QgcmVzdWx0ID0gTnVtYmVyKG1pbikgKyBOdW1iZXIodmFsKSAtIHJlbWFpbiArIHJvdW5kZXI7XG5cdFx0cmV0dXJuICtyZXN1bHQudG9GaXhlZCg1KTtcblx0fVxuXHRwcml2YXRlIF9zZXRWYWx1ZSh2YWw6IG51bWJlciwgZm9yRXh0cmEgPSBmYWxzZSkge1xuXHRcdGNvbnN0IHsgbWF4LCBtaW4gfSA9IHRoaXMuY29uZmlnO1xuXHRcdGlmICh2YWwgPiBtYXggfHwgdmFsIDwgbWluKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGNvbnN0IHJhd1ZhbHVlID0gKCh2YWwgLSBtaW4pIC8gKG1heCAtIG1pbikpICogMTAwO1xuXHRcdGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5faXNJbnZlcnNlKCkgPyAxMDAgLSByYXdWYWx1ZSA6IHJhd1ZhbHVlO1xuXHRcdGlmIChmb3JFeHRyYSkge1xuXHRcdFx0dGhpcy5fZXh0cmFDdXJyZW50UG9zaXRpb24gPSBuZXdWYWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fY3VycmVudFBvc2l0aW9uID0gbmV3VmFsdWU7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX2luaXRIYW5kbGVycygpIHtcblx0XHRjb25zdCBzbGlkZXJNb3ZlID0gKGU6IE1vdXNlRXZlbnQgJiBUb3VjaEV2ZW50KTogdm9pZCA9PiB7XG5cdFx0XHQhZS50YXJnZXRUb3VjaGVzICYmIGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IGUudGFyZ2V0VG91Y2hlcyA/IGUudGFyZ2V0VG91Y2hlc1swXVt0aGlzLl9heGlzXSA6IGVbdGhpcy5fYXhpc107XG5cdFx0XHRjb25zdCB4ID0gKChjdXJyZW50UG9zaXRpb24gLSB0aGlzLl9nZXRCZWdpbmluZygpKSAvIHRoaXMuX2xlbmd0aCkgKiAxMDA7XG5cdFx0XHRpZiAodGhpcy5fZmluZE5ld0RpcmVjdGlvbikge1xuXHRcdFx0XHRpZiAoTWF0aC5hYnModGhpcy5fY3VycmVudFBvc2l0aW9uIC0geCkgPCAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh4ID4gdGhpcy5fY3VycmVudFBvc2l0aW9uKSB7XG5cdFx0XHRcdFx0dGhpcy5fcG9zc2libGVSYW5nZSA9IFt0aGlzLl9jdXJyZW50UG9zaXRpb24sIDEwMF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fcG9zc2libGVSYW5nZSA9IFswLCB0aGlzLl9jdXJyZW50UG9zaXRpb25dO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2ZpbmROZXdEaXJlY3Rpb24gPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2luU2lkZSh4KSkge1xuXHRcdFx0XHR0aGlzLl91cGRhdGVQb3NpdGlvbih4LCB0aGlzLl9pc0V4dHJhQWN0aXZlKTtcblx0XHRcdH1cblx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHR9O1xuXHRcdGNvbnN0IHNsaWRlckVuZCA9IChlOiBNb3VzZUV2ZW50ICYgVG91Y2hFdmVudCk6IHZvaWQgPT4ge1xuXHRcdFx0dGhpcy5ldmVudHMuZmlyZShTbGlkZXJFdmVudHMubW91c2V1cCwgW2VdKTtcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9pc01vdXNlTW92aW5nID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHRcdH0sIDQpO1xuXHRcdFx0aWYgKCFlLnRhcmdldFRvdWNoZXMpIHtcblx0XHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgc2xpZGVyRW5kIGFzIGFueSk7XG5cdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgc2xpZGVyTW92ZSBhcyBhbnkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHNsaWRlckVuZCBhcyBhbnkpO1xuXHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHNsaWRlck1vdmUgYXMgYW55KTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGNvbnN0IHNsaWRlclN0YXJ0ID0gKGU6IFRvdWNoRXZlbnQgfCBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XG5cdFx0XHRpZiAodGhpcy5fZGlzYWJsZWQgfHwgZS53aGljaCA9PT0gMykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmV2ZW50cy5maXJlKFNsaWRlckV2ZW50cy5tb3VzZWRvd24sIFtlXSk7XG5cblx0XHRcdHRoaXMuX2lzTW91c2VNb3ZpbmcgPSB0cnVlO1xuXHRcdFx0bGV0IGFjdGl2ZTtcblx0XHRcdGlmICgoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdC5jb250YWlucyhcImRoeF9zbGlkZXJfX3RodW1iLS1leHRyYVwiKSkge1xuXHRcdFx0XHR0aGlzLl9pc0V4dHJhQWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0YWN0aXZlID0gdGhpcy5fZXh0cmFDdXJyZW50UG9zaXRpb247XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9pc0V4dHJhQWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdGFjdGl2ZSA9IHRoaXMuX2N1cnJlbnRQb3NpdGlvbjtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2ZpbmROZXdEaXJlY3Rpb24gPSBudWxsO1xuXHRcdFx0Ly8gZGVmaW5lIHBvc3NpYmxlIHJhbmdlXG5cdFx0XHRpZiAodGhpcy5jb25maWcucmFuZ2UpIHtcblx0XHRcdFx0Y29uc3QgW21vcmUsIGxlc3NdID1cblx0XHRcdFx0XHR0aGlzLl9jdXJyZW50UG9zaXRpb24gPiB0aGlzLl9leHRyYUN1cnJlbnRQb3NpdGlvblxuXHRcdFx0XHRcdFx0PyBbdGhpcy5fY3VycmVudFBvc2l0aW9uLCB0aGlzLl9leHRyYUN1cnJlbnRQb3NpdGlvbl1cblx0XHRcdFx0XHRcdDogW3RoaXMuX2V4dHJhQ3VycmVudFBvc2l0aW9uLCB0aGlzLl9jdXJyZW50UG9zaXRpb25dO1xuXHRcdFx0XHRpZiAodGhpcy5fY3VycmVudFBvc2l0aW9uID09PSB0aGlzLl9leHRyYUN1cnJlbnRQb3NpdGlvbikge1xuXHRcdFx0XHRcdHRoaXMuX2ZpbmROZXdEaXJlY3Rpb24gPSBhY3RpdmU7XG5cdFx0XHRcdFx0dGhpcy5fcG9zc2libGVSYW5nZSA9IFswLCAxMDBdO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGFjdGl2ZSA8IG1vcmUpIHtcblx0XHRcdFx0XHR0aGlzLl9wb3NzaWJsZVJhbmdlID0gWzAsIG1vcmVdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX3Bvc3NpYmxlUmFuZ2UgPSBbbGVzcywgMTAwXTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fcG9zc2libGVSYW5nZSA9IFswLCAxMDBdO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0aWYgKHRoaXMuY29uZmlnLmhlbHBNZXNzYWdlKSB7XG5cdFx0XHR0aGlzLl9oZWxwZXIgPSBuZXcgUG9wdXAoe1xuXHRcdFx0XHRjc3M6IFwiZGh4X3Rvb2x0aXAgZGh4X3Rvb2x0aXAtLWZvcmNlZCBkaHhfdG9vbHRpcC0tbGlnaHRcIixcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5faGVscGVyLmF0dGFjaEhUTUwodGhpcy5jb25maWcuaGVscE1lc3NhZ2UpO1xuXHRcdH1cblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdHNob3dIZWxwZXI6IGUgPT4ge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdHRoaXMuX2hlbHBlci5zaG93KGUudGFyZ2V0KTtcblx0XHRcdH0sXG5cdFx0XHRvbm1vdXNlZG93bjogKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0c2xpZGVyU3RhcnQoZSk7XG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgc2xpZGVyTW92ZSBhcyBhbnkpO1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBzbGlkZXJFbmQgYXMgYW55KTtcblx0XHRcdH0sXG5cdFx0XHRvbnRvdWNoc3RhcnQ6IChlOiBUb3VjaEV2ZW50KSA9PiB7XG5cdFx0XHRcdHRoaXMuX3NldFRvb2x0aXAoZSk7XG5cdFx0XHRcdHRoaXMuX21vdXNlSW4gPSBmYWxzZTtcblx0XHRcdFx0c2xpZGVyU3RhcnQoZSk7XG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgc2xpZGVyTW92ZSBhcyBhbnkpO1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgc2xpZGVyRW5kIGFzIGFueSk7XG5cdFx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHRcdH0sXG5cdFx0XHRvbnRvdWNoZW5kOiAoZTogRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5fc2V0VG9vbHRpcChlKTtcblx0XHRcdFx0dGhpcy5fbW91c2VJbiA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHR9LFxuXHRcdFx0b25sYWJlbENsaWNrOiAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHJlZnMgPSB0aGlzLmdldFJvb3RWaWV3KCkucmVmcztcblx0XHRcdFx0cmVmcy5ydW5uZXIuZWwuZm9jdXMoKTtcblx0XHRcdH0sXG5cdFx0XHRvbmNsaWNrOiAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5fZGlzYWJsZWQgfHwgdGhpcy5faXNNb3VzZU1vdmluZyB8fCBlLndoaWNoID09PSAzKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IHggPSAoKGVbdGhpcy5fYXhpc10gLSB0aGlzLl9nZXRCZWdpbmluZygpKSAvIHRoaXMuX2xlbmd0aCkgKiAxMDA7XG5cdFx0XHRcdGNvbnN0IHJlZnMgPSB0aGlzLmdldFJvb3RWaWV3KCkucmVmcztcblx0XHRcdFx0aWYgKHRoaXMuY29uZmlnLnJhbmdlKSB7XG5cdFx0XHRcdFx0Y29uc3QgZGlzdCA9IE1hdGguYWJzKHRoaXMuX2N1cnJlbnRQb3NpdGlvbiAtIHgpO1xuXHRcdFx0XHRcdGNvbnN0IGV4dHJhRGlzdCA9IE1hdGguYWJzKHRoaXMuX2V4dHJhQ3VycmVudFBvc2l0aW9uIC0geCk7XG5cdFx0XHRcdFx0aWYgKGRpc3QgPCBleHRyYURpc3QpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3VwZGF0ZVBvc2l0aW9uKHgsIGZhbHNlKTtcblx0XHRcdFx0XHRcdHJlZnMucnVubmVyLmVsLmZvY3VzKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMuX3VwZGF0ZVBvc2l0aW9uKHgsIHRydWUpO1xuXHRcdFx0XHRcdFx0cmVmcy5leHRyYVJ1bm5lci5lbC5mb2N1cygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl91cGRhdGVQb3NpdGlvbih4LCBmYWxzZSk7XG5cdFx0XHRcdFx0cmVmcy5ydW5uZXIuZWwuZm9jdXMoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnBhaW50KCk7XG5cdFx0XHR9LFxuXHRcdFx0b25tb3VzZW92ZXI6IChlOiBFdmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9zZXRUb29sdGlwKGUpO1xuXHRcdFx0XHR0aGlzLl9tb3VzZUluID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdFx0fSxcblx0XHRcdG9ubW91c2VvdXQ6IChlOiBFdmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9zZXRUb29sdGlwKGUpO1xuXHRcdFx0XHR0aGlzLl9tb3VzZUluID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHRcdH0sXG5cdFx0XHRvbmZvY3VzOiAoZTogRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5fc2V0VG9vbHRpcChlKTtcblx0XHRcdFx0dGhpcy5fZm9jdXNJbiA9IHRydWU7XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoU2xpZGVyRXZlbnRzLmZvY3VzLCBbXSk7XG5cdFx0XHRcdHRoaXMucGFpbnQoKTtcblx0XHRcdH0sXG5cdFx0XHRvbmJsdXI6IChlOiBFdmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9zZXRUb29sdGlwKGUpO1xuXHRcdFx0XHR0aGlzLl9mb2N1c0luID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoU2xpZGVyRXZlbnRzLmJsdXIsIFtdKTtcblx0XHRcdFx0dGhpcy5wYWludCgpO1xuXHRcdFx0fSxcblx0XHRcdG9ua2V5ZG93bjogKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShTbGlkZXJFdmVudHMua2V5ZG93biwgW2VdKTtcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXHRwcml2YXRlIF9nZXRCZWdpbmluZygpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLmNvbmZpZy5tb2RlID09PSBcImhvcml6b250YWxcIlxuXHRcdFx0PyB0aGlzLl9vZmZzZXRzLmxlZnQgLSB3aW5kb3cucGFnZVhPZmZzZXRcblx0XHRcdDogdGhpcy5fb2Zmc2V0cy50b3AgLSB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cdH1cblx0cHJpdmF0ZSBfaW5TaWRlKHg6IG51bWJlcikge1xuXHRcdGNvbnN0IHJhbmdlID0gdGhpcy5fcG9zc2libGVSYW5nZTtcblx0XHRpZiAoeCA8IHJhbmdlWzBdKSB7XG5cdFx0XHR0aGlzLl91cGRhdGVQb3NpdGlvbihyYW5nZVswXSwgdGhpcy5faXNFeHRyYUFjdGl2ZSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICh4ID4gcmFuZ2VbMV0pIHtcblx0XHRcdHRoaXMuX3VwZGF0ZVBvc2l0aW9uKHJhbmdlWzFdLCB0aGlzLl9pc0V4dHJhQWN0aXZlKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cHJpdmF0ZSBfdXBkYXRlUG9zaXRpb24oeDogbnVtYmVyLCBleHRyYSA9IGZhbHNlKSB7XG5cdFx0aWYgKHggPiAxMDApIHtcblx0XHRcdHggPSAxMDA7XG5cdFx0fVxuXHRcdGlmICh4IDwgMCkge1xuXHRcdFx0eCA9IDA7XG5cdFx0fVxuXHRcdGNvbnN0IHsgbWF4LCBtaW4gfSA9IHRoaXMuY29uZmlnO1xuXHRcdGNvbnN0IHBvc2l0aW9uID0gZXh0cmEgPyB0aGlzLl9leHRyYUN1cnJlbnRQb3NpdGlvbiA6IHRoaXMuX2N1cnJlbnRQb3NpdGlvbjtcblx0XHRjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX2dldFZhbHVlKHBvc2l0aW9uKTtcblx0XHRjb25zdCBuZXdWYWx1ZSA9IHRoaXMuX2dldFZhbHVlKHgpO1xuXHRcdGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgcmF3VmFsdWUgPSAoKG5ld1ZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pKSAqIDEwMDtcblx0XHRjb25zdCB2YWx1ZSA9IHRoaXMuX2lzSW52ZXJzZSgpID8gMTAwIC0gcmF3VmFsdWUgOiByYXdWYWx1ZTtcblx0XHRpZiAoZXh0cmEpIHtcblx0XHRcdHRoaXMuX2V4dHJhQ3VycmVudFBvc2l0aW9uID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2N1cnJlbnRQb3NpdGlvbiA9IHZhbHVlO1xuXHRcdH1cblx0XHR0aGlzLmV2ZW50cy5maXJlKFNsaWRlckV2ZW50cy5jaGFuZ2UsIFtuZXdWYWx1ZSwgb2xkVmFsdWUsIGV4dHJhXSk7XG5cdH1cblx0cHJpdmF0ZSBfZ2V0UnVubmVyU3R5bGUoZm9yRXh0cmEgPSBmYWxzZSkge1xuXHRcdGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuY29uZmlnLm1vZGUgPT09IFwiaG9yaXpvbnRhbFwiID8gXCJsZWZ0XCIgOiBcInRvcFwiO1xuXHRcdGNvbnN0IHBvcyA9IGZvckV4dHJhID8gdGhpcy5fZXh0cmFDdXJyZW50UG9zaXRpb24gOiB0aGlzLl9jdXJyZW50UG9zaXRpb247XG5cdFx0cmV0dXJuIHtcblx0XHRcdFtkaXJlY3Rpb25dOiBwb3MgKyBcIiVcIixcblx0XHR9O1xuXHR9XG5cdHByaXZhdGUgX2lzSW52ZXJzZSgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0KHRoaXMuY29uZmlnLmludmVyc2UgJiYgdGhpcy5jb25maWcubW9kZSA9PT0gXCJob3Jpem9udGFsXCIpIHx8XG5cdFx0XHQoIXRoaXMuY29uZmlnLmludmVyc2UgJiYgdGhpcy5jb25maWcubW9kZSA9PT0gXCJ2ZXJ0aWNhbFwiKVxuXHRcdCk7XG5cdH1cblx0cHJpdmF0ZSBfZ2V0UnVubmVyQ3NzKGZvckV4dHJhID0gZmFsc2UpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0XCJkaHhfc2xpZGVyX190aHVtYlwiICtcblx0XHRcdChmb3JFeHRyYSA/IFwiIGRoeF9zbGlkZXJfX3RodW1iLS1leHRyYVwiIDogXCJcIikgK1xuXHRcdFx0KHRoaXMuX2lzTW91c2VNb3ZpbmcgJiYgKChmb3JFeHRyYSAmJiB0aGlzLl9pc0V4dHJhQWN0aXZlKSB8fCAoIWZvckV4dHJhICYmICF0aGlzLl9pc0V4dHJhQWN0aXZlKSlcblx0XHRcdFx0PyBcIiBkaHhfc2xpZGVyX190aHVtYi0tYWN0aXZlXCJcblx0XHRcdFx0OiBcIlwiKSArXG5cdFx0XHQodGhpcy5fZGlzYWJsZWQgPyBcIiBkaHhfc2xpZGVyX190aHVtYi0tZGlzYWJsZWRcIiA6IFwiXCIpICtcblx0XHRcdCh0aGlzLl9pc051bGxhYmxlKGZvckV4dHJhID8gdGhpcy5fZXh0cmFDdXJyZW50UG9zaXRpb24gOiB0aGlzLl9jdXJyZW50UG9zaXRpb24pICYmXG5cdFx0XHQhdGhpcy5jb25maWcucmFuZ2Vcblx0XHRcdFx0PyBcIiBkaHhfc2xpZGVyX190aHVtYi0tbnVsbGFibGVcIlxuXHRcdFx0XHQ6IFwiXCIpXG5cdFx0KTtcblx0fVxuXHRwcml2YXRlIF9kcmF3KCkge1xuXHRcdGNvbnN0IHsgbGFiZWxQb3NpdGlvbiwgbW9kZSwgaGlkZGVuTGFiZWwsIHRpY2ssIG1ham9yVGljaywgY3NzLCBoZWxwTWVzc2FnZSB9ID0gdGhpcy5jb25maWc7XG5cblx0XHRjb25zdCBsYWJlbFN0eWxlID0gZ2V0TGFiZWxTdHlsZSh7IC4uLnRoaXMuY29uZmlnLCByZXF1aXJlZDogZmFsc2UgfSk7XG5cdFx0aWYgKHRoaXMuX3Rvb2x0aXAgJiYgKCF0aGlzLl9tb3VzZUluIHx8ICF0aGlzLl9mb2N1c0luIHx8ICF0aGlzLl9pc01vdXNlTW92aW5nKSkge1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLl90b29sdGlwKSAmJiBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuX3Rvb2x0aXApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWwoXG5cdFx0XHRcImRpdlwiLFxuXHRcdFx0e1xuXHRcdFx0XHRjbGFzczpcblx0XHRcdFx0XHRcImRoeF9zbGlkZXJcIiArXG5cdFx0XHRcdFx0XCIgZGh4X3NsaWRlci0tbW9kZV9cIiArXG5cdFx0XHRcdFx0bW9kZSArXG5cdFx0XHRcdFx0KGxhYmVsUG9zaXRpb24gPT09IFwibGVmdFwiID8gXCIgZGh4X3NsaWRlci0tbGFiZWwtaW5saW5lXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0KGhpZGRlbkxhYmVsID8gXCIgZGh4X3NsaWRlci0tbGFiZWxfc3JcIiA6IFwiXCIpICtcblx0XHRcdFx0XHQodGljayA/IFwiIGRoeF9zbGlkZXItLXRpY2tzXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0KG1ham9yVGljayA/IFwiIGRoeF9zbGlkZXItLW1ham9yLXRpY2tzXCIgOiBcIlwiKSArXG5cdFx0XHRcdFx0KGNzcyA/IFwiIFwiICsgY3NzIDogXCJcIikgK1xuXHRcdFx0XHRcdCh0aGlzLl9kaXNhYmxlZCA/IFwiIGRoeF9zbGlkZXItLWRpc2FibGVkXCIgOiBcIlwiKSxcblx0XHRcdH0sXG5cdFx0XHRbXG5cdFx0XHRcdGxhYmVsU3R5bGVcblx0XHRcdFx0XHQ/IGVsKFxuXHRcdFx0XHRcdFx0XHRcImxhYmVsLmRoeF9sYWJlbC5kaHhfc2xpZGVyX19sYWJlbFwiLFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0c3R5bGU6IGxhYmVsU3R5bGUuc3R5bGUsXG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3M6IGhlbHBNZXNzYWdlID8gXCJkaHhfbGFiZWwtLXdpdGgtaGVscFwiIDogXCJcIixcblx0XHRcdFx0XHRcdFx0XHRvbmNsaWNrOiB0aGlzLl9oYW5kbGVycy5vbmxhYmVsQ2xpY2ssXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdGhlbHBNZXNzYWdlXG5cdFx0XHRcdFx0XHRcdFx0PyBbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsU3R5bGUubGFiZWwgJiYgZWwoXCJzcGFuLmRoeF9sYWJlbF9faG9sZGVyXCIsIGxhYmVsU3R5bGUubGFiZWwpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbChcInNwYW4uZGh4X2xhYmVsLWhlbHAuZHhpLmR4aS1oZWxwLWNpcmNsZS1vdXRsaW5lXCIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0YWJpbmRleDogXCIwXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cm9sZTogXCJidXR0b25cIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvbmNsaWNrOiB0aGlzLl9oYW5kbGVycy5zaG93SGVscGVyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHRcdFx0XHQgIF1cblx0XHRcdFx0XHRcdFx0XHQ6IGxhYmVsU3R5bGUubGFiZWxcblx0XHRcdFx0XHQgIClcblx0XHRcdFx0XHQ6IG51bGwsXG5cdFx0XHRcdHRoaXMuX2RyYXdTbGlkZXIoKSxcblx0XHRcdF1cblx0XHQpO1xuXHR9XG5cdHByaXZhdGUgX2RyYXdTbGlkZXIoKSB7XG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCIuZGh4X3dpZGdldC5kaHhfc2xpZGVyX190cmFjay1ob2xkZXJcIixcblx0XHRcdHtcblx0XHRcdFx0ZGh4X3dpZGdldF9pZDogdGhpcy5fdWlkLFxuXHRcdFx0fSxcblx0XHRcdFtcblx0XHRcdFx0ZWwoXG5cdFx0XHRcdFx0XCIuZGh4X3NsaWRlcl9fdHJhY2tcIixcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRfcmVmOiBcInRyYWNrXCIsXG5cdFx0XHRcdFx0XHRvbm1vdXNlb3ZlcjogdGhpcy5faGFuZGxlcnMub25tb3VzZW92ZXIsXG5cdFx0XHRcdFx0XHRvbm1vdXNlb3V0OiB0aGlzLl9oYW5kbGVycy5vbm1vdXNlb3V0LFxuXHRcdFx0XHRcdFx0b25jbGljazogdGhpcy5faGFuZGxlcnMub25jbGljayxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdHRoaXMuX2dldERldGVjdG9yKCksXG5cdFx0XHRcdFx0XHRlbChcImRpdlwiLCB7XG5cdFx0XHRcdFx0XHRcdF9yZWY6IFwicnVubmVyXCIsXG5cdFx0XHRcdFx0XHRcdGNsYXNzOiB0aGlzLl9nZXRSdW5uZXJDc3MoKSxcblx0XHRcdFx0XHRcdFx0b250b3VjaHN0YXJ0OiB0aGlzLl9oYW5kbGVycy5vbnRvdWNoc3RhcnQsXG5cdFx0XHRcdFx0XHRcdG9udG91Y2hlbmQ6IHRoaXMuX2hhbmRsZXJzLm9udG91Y2hlbmQsXG5cdFx0XHRcdFx0XHRcdG9ubW91c2Vkb3duOiB0aGlzLl9oYW5kbGVycy5vbm1vdXNlZG93bixcblx0XHRcdFx0XHRcdFx0b25mb2N1czogdGhpcy5faGFuZGxlcnMub25mb2N1cyxcblx0XHRcdFx0XHRcdFx0b25ibHVyOiB0aGlzLl9oYW5kbGVycy5vbmJsdXIsXG5cdFx0XHRcdFx0XHRcdG9ua2V5ZG93bjogdGhpcy5faGFuZGxlcnMub25rZXlkb3duLFxuXHRcdFx0XHRcdFx0XHRzdHlsZTogdGhpcy5fZ2V0UnVubmVyU3R5bGUoKSxcblx0XHRcdFx0XHRcdFx0dGFiaW5kZXg6IDAsXG5cdFx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHRcdHRoaXMuY29uZmlnLnRvb2x0aXAgJiYgKHRoaXMuX21vdXNlSW4gfHwgdGhpcy5fZm9jdXNJbiB8fCB0aGlzLl9pc01vdXNlTW92aW5nKVxuXHRcdFx0XHRcdFx0XHQ/IHRoaXMuX2RyYXdUb29sdGlwKClcblx0XHRcdFx0XHRcdFx0OiBudWxsLFxuXHRcdFx0XHRcdFx0dGhpcy5jb25maWcudG9vbHRpcCAmJlxuXHRcdFx0XHRcdFx0dGhpcy5jb25maWcucmFuZ2UgJiZcblx0XHRcdFx0XHRcdCh0aGlzLl9tb3VzZUluIHx8IHRoaXMuX2ZvY3VzSW4gfHwgdGhpcy5faXNNb3VzZU1vdmluZylcblx0XHRcdFx0XHRcdFx0PyB0aGlzLl9kcmF3VG9vbHRpcCh0cnVlKVxuXHRcdFx0XHRcdFx0XHQ6IG51bGwsXG5cdFx0XHRcdFx0XHR0aGlzLmNvbmZpZy5yYW5nZVxuXHRcdFx0XHRcdFx0XHQ/IGVsKFwiZGl2XCIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdF9yZWY6IFwiZXh0cmFSdW5uZXJcIixcblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzOiB0aGlzLl9nZXRSdW5uZXJDc3ModHJ1ZSksXG5cdFx0XHRcdFx0XHRcdFx0XHRvbnRvdWNoc3RhcnQ6IHRoaXMuX2hhbmRsZXJzLm9udG91Y2hzdGFydCxcblx0XHRcdFx0XHRcdFx0XHRcdG9udG91Y2hlbmQ6IHRoaXMuX2hhbmRsZXJzLm9udG91Y2hlbmQsXG5cdFx0XHRcdFx0XHRcdFx0XHRvbm1vdXNlZG93bjogdGhpcy5faGFuZGxlcnMub25tb3VzZWRvd24sXG5cdFx0XHRcdFx0XHRcdFx0XHRvbmZvY3VzOiB0aGlzLl9oYW5kbGVycy5vbmZvY3VzLFxuXHRcdFx0XHRcdFx0XHRcdFx0b25ibHVyOiB0aGlzLl9oYW5kbGVycy5vbmJsdXIsXG5cdFx0XHRcdFx0XHRcdFx0XHRvbmtleWRvd246IHRoaXMuX2hhbmRsZXJzLm9ua2V5ZG93bixcblx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlOiB0aGlzLl9nZXRSdW5uZXJTdHlsZSh0cnVlKSxcblx0XHRcdFx0XHRcdFx0XHRcdHRhYmluZGV4OiAwLFxuXHRcdFx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdFx0XHRdXG5cdFx0XHRcdCksXG5cdFx0XHRcdHRoaXMuY29uZmlnLnRpY2sgPyB0aGlzLl9kcmF3VGlja3MoKSA6IG51bGwsXG5cdFx0XHRdXG5cdFx0KTtcblx0fVxuXHRwcml2YXRlIF9nZXREZXRlY3RvcigpIHtcblx0XHRpZiAodGhpcy5fZGlzYWJsZWQpIHtcblx0XHRcdHJldHVybiBlbChcIi5kaHhfc2xpZGVyX19yYW5nZVwiKTtcblx0XHR9XG5cblx0XHRjb25zdCBkaXJlY3Rpb24gPSB0aGlzLmNvbmZpZy5tb2RlID09PSBcImhvcml6b250YWxcIiA/IFwibGVmdFwiIDogXCJ0b3BcIjtcblx0XHRjb25zdCBzaXplID0gdGhpcy5jb25maWcubW9kZSA9PT0gXCJob3Jpem9udGFsXCIgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiO1xuXHRcdGlmICh0aGlzLmNvbmZpZy5yYW5nZSkge1xuXHRcdFx0Y29uc3QgW21vcmUsIGxlc3NdID1cblx0XHRcdFx0dGhpcy5fY3VycmVudFBvc2l0aW9uID4gdGhpcy5fZXh0cmFDdXJyZW50UG9zaXRpb25cblx0XHRcdFx0XHQ/IFt0aGlzLl9jdXJyZW50UG9zaXRpb24sIHRoaXMuX2V4dHJhQ3VycmVudFBvc2l0aW9uXVxuXHRcdFx0XHRcdDogW3RoaXMuX2V4dHJhQ3VycmVudFBvc2l0aW9uLCB0aGlzLl9jdXJyZW50UG9zaXRpb25dO1xuXHRcdFx0cmV0dXJuIGVsKFwiLmRoeF9zbGlkZXJfX3JhbmdlXCIsIHtcblx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRbZGlyZWN0aW9uXTogbGVzcyArIFwiJVwiLFxuXHRcdFx0XHRcdFtzaXplXTogbW9yZSAtIGxlc3MgKyBcIiVcIixcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAodGhpcy5faXNJbnZlcnNlKCkpIHtcblx0XHRcdHJldHVybiBlbChcIi5kaHhfc2xpZGVyX19yYW5nZVwiLCB7XG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0W2RpcmVjdGlvbl06IHRoaXMuX2N1cnJlbnRQb3NpdGlvbiArIFwiJVwiLFxuXHRcdFx0XHRcdFtzaXplXTogMTAwIC0gdGhpcy5fY3VycmVudFBvc2l0aW9uICsgXCIlXCIsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsKFwiLmRoeF9zbGlkZXJfX3JhbmdlXCIsIHtcblx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFtkaXJlY3Rpb25dOiAwLFxuXHRcdFx0XHRbc2l6ZV06IHRoaXMuX2N1cnJlbnRQb3NpdGlvbiArIFwiJVwiLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fVxuXHRwcml2YXRlIF9kcmF3VG9vbHRpcChmb3JFeHRyYSA9IGZhbHNlKSB7XG5cdFx0aWYgKHRoaXMuX2FjdGl2ZVRvb2x0aXAgPT09IFwibm9uZVwiIHx8ICF0aGlzLmdldFJvb3RWaWV3KCkpIHJldHVybjtcblxuXHRcdGNvbnN0IHBvcyA9XG5cdFx0XHR0aGlzLl9hY3RpdmVUb29sdGlwID09PSBcImV4dHJhVG9vbHRpcFwiID8gdGhpcy5fZXh0cmFDdXJyZW50UG9zaXRpb24gOiB0aGlzLl9jdXJyZW50UG9zaXRpb247XG5cdFx0Y29uc3QgZGlyZWN0aW9uID0gdGhpcy5jb25maWcubW9kZSA9PT0gXCJob3Jpem9udGFsXCIgPyBcImxlZnRcIiA6IFwidG9wXCI7XG5cdFx0bGV0IGNsYXNzTmFtZU1vZGlmaWVycyA9IFwiXCI7XG5cblx0XHRpZiAoKGZvckV4dHJhICYmIHRoaXMuX2lzRXh0cmFBY3RpdmUpIHx8ICghZm9yRXh0cmEgJiYgIXRoaXMuX2lzRXh0cmFBY3RpdmUpKSB7XG5cdFx0XHRjbGFzc05hbWVNb2RpZmllcnMgKz0gXCIgZGh4X3NsaWRlcl9fdGh1bWItbGFiZWwtLWFjdGl2ZVwiO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuX3Rvb2x0aXApIHtcblx0XHRcdHRoaXMuX3Rvb2x0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGNvb3JkcyA9XG5cdFx0XHR0aGlzLl9hY3RpdmVUb29sdGlwID09PSBcInRvb2x0aXBcIlxuXHRcdFx0XHQ/IHRoaXMuZ2V0Um9vdFZpZXcoKS5yZWZzLnJ1bm5lci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXHRcdFx0XHQ6IHRoaXMuZ2V0Um9vdFZpZXcoKS5yZWZzLmV4dHJhUnVubmVyLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0dGhpcy5fdG9vbHRpcC5jbGFzc05hbWUgPSBcImRoeF9zbGlkZXJfX3RodW1iLWxhYmVsXCIgKyBjbGFzc05hbWVNb2RpZmllcnM7XG5cdFx0dGhpcy5fdG9vbHRpcC5zdHlsZS5sZWZ0ID0gY29vcmRzLnggKyAoZGlyZWN0aW9uID09PSBcImxlZnRcIiA/IDYgOiAtMzApICsgd2luZG93LnBhZ2VYT2Zmc2V0ICsgXCJweFwiO1xuXHRcdHRoaXMuX3Rvb2x0aXAuc3R5bGUudG9wID0gY29vcmRzLnkgKyAoZGlyZWN0aW9uID09PSBcImxlZnRcIiA/IC0zMCA6IDYpICsgd2luZG93LnBhZ2VZT2Zmc2V0ICsgXCJweFwiO1xuXG5cdFx0dGhpcy5fdG9vbHRpcC5pbm5lclRleHQgPSB0aGlzLl9nZXRWYWx1ZShwb3MpLnRvU3RyaW5nKCk7XG5cblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX3Rvb2x0aXApO1xuXHR9XG5cdHByaXZhdGUgX2dldFRpY2tzKCkge1xuXHRcdGNvbnN0IHsgbWF4LCBtaW4sIHN0ZXAsIHRpY2ssIG1ham9yVGljayB9ID0gdGhpcy5jb25maWc7XG5cdFx0Y29uc3QgbGVuID0gbWF4IC0gbWluO1xuXHRcdGNvbnN0IHRpY2tMZW5ndGggPSAoc3RlcCAqIHRpY2spIC8gbGVuO1xuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IFtdO1xuXHRcdGxldCBsZW5ndGggPSAwO1xuXHRcdGxldCBpbmRleCA9IDA7XG5cblx0XHR3aGlsZSAobGVuZ3RoIDwgMSkge1xuXHRcdFx0Y29uc3QgdGlja1ZhbHVlID0gKyhOdW1iZXIobWluKSArIGxlbmd0aCAqIGxlbikudG9GaXhlZCg1KTtcblx0XHRcdGNvbnN0IGlzTXVsdGlwbGUgPSBpbmRleCAlIG1ham9yVGljayA9PT0gMDtcblx0XHRcdHBvc2l0aW9ucy5wdXNoKHtcblx0XHRcdFx0cG9zaXRpb246ICh0aGlzLl9pc0ludmVyc2UoKSA/ICgxIC0gbGVuZ3RoKSAqIDEwMCA6IGxlbmd0aCAqIDEwMCkgKyBcIiVcIixcblx0XHRcdFx0aXNNdWx0aXBsZSxcblx0XHRcdFx0bGFiZWw6XG5cdFx0XHRcdFx0aXNNdWx0aXBsZSAmJiB0eXBlb2YgdGhpcy5jb25maWcudGlja1RlbXBsYXRlID09PSBcImZ1bmN0aW9uXCJcblx0XHRcdFx0XHRcdD8gdGhpcy5jb25maWcudGlja1RlbXBsYXRlKHRpY2tWYWx1ZSlcblx0XHRcdFx0XHRcdDogbnVsbCxcblx0XHRcdH0pO1xuXHRcdFx0bGVuZ3RoICs9IHRpY2tMZW5ndGg7XG5cdFx0XHRpbmRleCsrO1xuXHRcdH1cblx0XHRwb3NpdGlvbnMucHVzaCh7XG5cdFx0XHRwb3NpdGlvbjogKHRoaXMuX2lzSW52ZXJzZSgpID8gMCA6IDEwMCkgKyBcIiVcIixcblx0XHRcdGlzTXVsdGlwbGU6IHRydWUsXG5cdFx0XHRsYWJlbDogdHlwZW9mIHRoaXMuY29uZmlnLnRpY2tUZW1wbGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5jb25maWcudGlja1RlbXBsYXRlKG1heCkgOiBudWxsLFxuXHRcdH0pO1xuXHRcdHJldHVybiBwb3NpdGlvbnM7XG5cdH1cblx0cHJpdmF0ZSBfZHJhd1RpY2tzKCkge1xuXHRcdGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuY29uZmlnLm1vZGUgPT09IFwiaG9yaXpvbnRhbFwiID8gXCJsZWZ0XCIgOiBcInRvcFwiO1xuXHRcdHJldHVybiBlbChcblx0XHRcdFwiLmRoeF9zbGlkZXJfX3RpY2tzLWhvbGRlclwiLFxuXHRcdFx0dGhpcy5fZ2V0VGlja3MoKS5tYXAodGljayA9PlxuXHRcdFx0XHRlbChcblx0XHRcdFx0XHRcImRpdlwiLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGNsYXNzOiBcImRoeF9zbGlkZXJfX3RpY2tcIiArICh0aWNrLmlzTXVsdGlwbGUgPyBcIiBkaHhfc2xpZGVyX190aWNrLS1tYWpvclwiIDogXCJcIiksXG5cdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRbZGlyZWN0aW9uXTogdGljay5wb3NpdGlvbixcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0aWNrLmxhYmVsICE9PSB1bmRlZmluZWQgPyBbZWwoXCIuZGh4X3NsaWRlcl9fdGljay1sYWJlbFwiLCB0aWNrLmxhYmVsKV0gOiBudWxsXG5cdFx0XHRcdClcblx0XHRcdClcblx0XHQpO1xuXHR9XG5cdHByaXZhdGUgX2lzTnVsbGFibGUodmFsdWUpIHtcblx0XHRpZiAodGhpcy5faXNJbnZlcnNlKCkpIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gMTAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IDA7XG5cdFx0fVxuXHR9XG5cdHByaXZhdGUgX3NldFRvb2x0aXAoZSk6IHZvaWQge1xuXHRcdGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJkaHhfc2xpZGVyX190aHVtYi0tZXh0cmFcIikpIHtcblx0XHRcdHRoaXMuX2FjdGl2ZVRvb2x0aXAgPSBcImV4dHJhVG9vbHRpcFwiO1xuXHRcdH0gZWxzZSBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGh4X3NsaWRlcl9fdGh1bWJcIikpIHtcblx0XHRcdHRoaXMuX2FjdGl2ZVRvb2x0aXAgPSBcInRvb2x0aXBcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fYWN0aXZlVG9vbHRpcCA9IFwibm9uZVwiO1xuXHRcdH1cblx0fVxufVxuIiwiZXhwb3J0IHR5cGUgRGlyZWN0aW9uID0gXCJ2ZXJ0aWNhbFwiIHwgXCJob3Jpem9udGFsXCI7XG5cbmV4cG9ydCB0eXBlIEFjdGl2ZVNsaWRlciA9IFwidG9vbHRpcFwiIHwgXCJleHRyYVRvb2x0aXBcIiB8IFwibm9uZVwiO1xuZXhwb3J0IGludGVyZmFjZSBJU2xpZGVyIHtcblx0Y29uZmlnOiBJU2xpZGVyQ29uZmlnO1xuXG5cdHBhaW50KCk6IHZvaWQ7XG5cdGRlc3RydWN0b3IoKTogdm9pZDtcblx0Z2V0VmFsdWUoKTogbnVtYmVyW107XG5cdHNldFZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBudW1iZXJbXSk6IHZvaWQ7XG5cdGRpc2FibGUoKTogdm9pZDtcblx0ZW5hYmxlKCk6IHZvaWQ7XG5cdGlzRGlzYWJsZWQoKTogYm9vbGVhbjtcblx0Zm9jdXMoZXh0cmE/OiBib29sZWFuKTogdm9pZDtcblx0Ymx1cigpOiB2b2lkO1xufVxuXG5leHBvcnQgZW51bSBTbGlkZXJFdmVudHMge1xuXHRjaGFuZ2UgPSBcImNoYW5nZVwiLFxuXHRmb2N1cyA9IFwiZm9jdXNcIixcblx0Ymx1ciA9IFwiYmx1clwiLFxuXHRrZXlkb3duID0gXCJrZXlkb3duXCIsXG5cdG1vdXNlZG93biA9IFwibW91c2Vkb3duXCIsXG5cdG1vdXNldXAgPSBcIm1vdXNldXBcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2xpZGVyRXZlbnRIYW5kbGVyc01hcCB7XG5cdFtrZXk6IHN0cmluZ106ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuXHRbU2xpZGVyRXZlbnRzLmNoYW5nZV06ICh2YWx1ZTogbnVtYmVyLCBvbGRWYWx1ZTogbnVtYmVyLCBpc1JhbmdlOiBib29sZWFuKSA9PiB2b2lkO1xuXHRbU2xpZGVyRXZlbnRzLmZvY3VzXTogKCkgPT4gdm9pZDtcblx0W1NsaWRlckV2ZW50cy5ibHVyXTogKCkgPT4gdm9pZDtcblx0W1NsaWRlckV2ZW50cy5rZXlkb3duXTogKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB2b2lkO1xuXHRbU2xpZGVyRXZlbnRzLm1vdXNlZG93bl06IChldmVudDogRXZlbnQpID0+IHZvaWQ7XG5cdFtTbGlkZXJFdmVudHMubW91c2V1cF06IChldmVudDogRXZlbnQpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIElMYWJlbFBvc2l0aW9uID0gXCJsZWZ0XCIgfCBcInRvcFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTbGlkZXJDb25maWcge1xuXHRtaW46IG51bWJlcjtcblx0bWF4OiBudW1iZXI7XG5cdHN0ZXA6IG51bWJlcjtcblx0bW9kZT86IERpcmVjdGlvbjtcblx0cmFuZ2U/OiBib29sZWFuO1xuXHR2YWx1ZT86IG51bWJlcltdIHwgbnVtYmVyIHwgc3RyaW5nO1xuXHRpbnZlcnNlPzogYm9vbGVhbjtcblx0dG9vbHRpcD86IGJvb2xlYW47XG5cdGNzcz86IHN0cmluZztcblx0dGljaz86IG51bWJlcjtcblx0dGlja1RlbXBsYXRlPzogKHBvc2l0aW9uOiBudW1iZXIpID0+IHN0cmluZztcblx0bWFqb3JUaWNrPzogbnVtYmVyO1xuXHRsYWJlbD86IHN0cmluZztcblx0cmVxdWlyZWQ/OiBib29sZWFuO1xuXHRoZWxwTWVzc2FnZT86IHN0cmluZztcblx0bGFiZWxQb3NpdGlvbj86IElMYWJlbFBvc2l0aW9uO1xuXHRsYWJlbFdpZHRoPzogc3RyaW5nIHwgbnVtYmVyO1xuXHRoaWRkZW5MYWJlbD86IGJvb2xlYW47XG5cblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRoZWxwPzogc3RyaW5nO1xuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdHRodW1iTGFiZWw/OiBib29sZWFuO1xuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGxhYmVsSW5saW5lPzogYm9vbGVhbjtcbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL3NvdXJjZXMvVGltZXBpY2tlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy90eXBlc1wiO1xuIiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2NvcmVcIjtcbmltcG9ydCB7IGNyZWF0ZSwgZWwgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZG9tXCI7XG5pbXBvcnQgeyBFdmVudFN5c3RlbSwgSUV2ZW50U3lzdGVtIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL2V2ZW50c1wiO1xuaW1wb3J0IHsgSUhhbmRsZXJzIH0gZnJvbSBcIkBkaHgvdHMtY29tbW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBWaWV3LCB0b1ZpZXdMaWtlLCBJVmlldyB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi92aWV3XCI7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tIFwiQGRoeC90cy1sYXlvdXRcIjtcbmltcG9ydCB7IFNsaWRlciwgU2xpZGVyRXZlbnRzIH0gZnJvbSBcIkBkaHgvdHMtc2xpZGVyXCI7XG5pbXBvcnQgbG9jYWxlIGZyb20gXCIuL2xvY2FsZXMvZW5cIjtcbmltcG9ydCB7IGlzVGltZUNoZWNrIH0gZnJvbSBcIi4vaGVscGVyXCI7XG5pbXBvcnQge1xuXHRUaW1lcGlja2VyRXZlbnRzLFxuXHRJVGltZXBpY2tlckNvbmZpZyxcblx0SVRpbWVwaWNrZXIsXG5cdElUaW1lT2JqZWN0LFxuXHRJVGltZXBpY2tlckhhbmRsZXJzTWFwLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgaXNGaXJlZm94LCBpc1NhZmFyaSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHZhbHVlOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcblx0aWYgKGlzTmFOKHZhbHVlKSkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cdHJldHVybiBNYXRoLm1pbihtYXgsIE1hdGgubWF4KDAsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBUaW1lcGlja2VyIGV4dGVuZHMgVmlldyBpbXBsZW1lbnRzIElUaW1lcGlja2VyIHtcblx0cHVibGljIGNvbmZpZzogSVRpbWVwaWNrZXJDb25maWc7XG5cdHB1YmxpYyBldmVudHM6IElFdmVudFN5c3RlbTxUaW1lcGlja2VyRXZlbnRzLCBJVGltZXBpY2tlckhhbmRsZXJzTWFwPjtcblx0cHVibGljIGxheW91dDogTGF5b3V0O1xuXHRwcml2YXRlIF9ob3Vyc1NsaWRlcjogU2xpZGVyO1xuXHRwcml2YXRlIF9taW51dGVzU2xpZGVyOiBTbGlkZXI7XG5cdHByaXZhdGUgX2lucHV0c1ZpZXc6IElWaWV3O1xuXHRwcml2YXRlIF90aW1lOiBJVGltZU9iamVjdDtcblx0cHJpdmF0ZSBfaGFuZGxlcnM6IElIYW5kbGVycztcblx0cHJpdmF0ZSBfb3V0ZXJIYW5kbGVycztcblxuXHRjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50IHwgc3RyaW5nLCBjb25maWc6IElUaW1lcGlja2VyQ29uZmlnID0ge30pIHtcblx0XHRzdXBlcihcblx0XHRcdGNvbnRhaW5lcixcblx0XHRcdGV4dGVuZChcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRpbWVGb3JtYXQ6IDI0LFxuXHRcdFx0XHRcdGNvbnRyb2xzOiBmYWxzZSxcblx0XHRcdFx0XHR2YWx1ZUZvcm1hdDogXCJzdHJpbmdcIixcblx0XHRcdFx0XHRhY3Rpb25zOiBmYWxzZSwgLy8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRjb25maWdcblx0XHRcdClcblx0XHQpO1xuXHRcdHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50U3lzdGVtKHRoaXMpO1xuXHRcdHRoaXMuX3RpbWUgPSB7XG5cdFx0XHRob3VyOiAwLFxuXHRcdFx0bWludXRlOiAwLFxuXHRcdFx0QU06IHRydWUsXG5cdFx0fTtcblx0XHRpZiAodGhpcy5jb25maWcudGltZUZvcm1hdCA9PT0gMTIpIHtcblx0XHRcdHRoaXMuX3RpbWUuaG91ciA9IDEyO1xuXHRcdH1cblx0XHR0aGlzLmNvbmZpZy5jb250cm9scyA9IHRoaXMuY29uZmlnLmNvbnRyb2xzIHx8IHRoaXMuY29uZmlnLmFjdGlvbnM7IC8vIFRPRE86IHJlbW92ZSBzdWl0ZV83LjBcblx0XHR0aGlzLmNvbmZpZy52YWx1ZSAmJiB0aGlzLl9zZXRWYWx1ZSh0aGlzLmNvbmZpZy52YWx1ZSk7XG5cblx0XHR0aGlzLl9pbml0VUkoY29udGFpbmVyKTtcblx0XHR0aGlzLl9pbml0SGFuZGxlcnMoKTtcblx0XHR0aGlzLl9pbml0RXZlbnRzKCk7XG5cdH1cblx0Z2V0VmFsdWU8VCBleHRlbmRzIGJvb2xlYW4gPSBmYWxzZT4oYXNPQmplY3Q/OiBUKTogVCBleHRlbmRzIHRydWUgPyBJVGltZU9iamVjdCA6IHN0cmluZyB7XG5cdFx0aWYgKHRoaXMuY29uZmlnLnRpbWVGb3JtYXQgPT09IDEyKSB0aGlzLl90aW1lLmhvdXIgPSB0aGlzLl90aW1lLmhvdXIgJSAxMiB8fCAxMjtcblx0XHRjb25zdCB7IGhvdXI6IGgsIG1pbnV0ZTogbSwgQU06IGlzQU0gfSA9IHRoaXMuX3RpbWU7XG5cdFx0aWYgKGFzT0JqZWN0KSB7XG5cdFx0XHRjb25zdCBvYmo6IHsgaG91cjogbnVtYmVyOyBtaW51dGU6IG51bWJlcjsgQU0/OiBib29sZWFuIH0gPSB7XG5cdFx0XHRcdGhvdXI6IGgsXG5cdFx0XHRcdG1pbnV0ZTogbSxcblx0XHRcdH07XG5cdFx0XHRpZiAodGhpcy5jb25maWcudGltZUZvcm1hdCA9PT0gMTIpIHtcblx0XHRcdFx0b2JqLkFNID0gaXNBTTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmogYXMgYW55O1xuXHRcdH1cblx0XHRyZXR1cm4gKChoIDwgMTAgPyBcIjBcIiArIGggOiBoKSArXG5cdFx0XHRcIjpcIiArXG5cdFx0XHQobSA8IDEwID8gXCIwXCIgKyBtIDogbSkgK1xuXHRcdFx0KHRoaXMuY29uZmlnLnRpbWVGb3JtYXQgPT09IDEyID8gKGlzQU0gPyBcIkFNXCIgOiBcIlBNXCIpIDogXCJcIikpIGFzIGFueTtcblx0fVxuXHRzZXRWYWx1ZSh2YWx1ZTogRGF0ZSB8IG51bWJlciB8IHN0cmluZyB8IGFueVtdIHwgSVRpbWVPYmplY3QpOiB2b2lkIHtcblx0XHR0aGlzLl9zZXRWYWx1ZSh2YWx1ZSk7XG5cdFx0dGhpcy5faG91cnNTbGlkZXIuc2V0VmFsdWUodGhpcy5fdGltZS5ob3VyKTtcblx0XHR0aGlzLl9taW51dGVzU2xpZGVyLnNldFZhbHVlKHRoaXMuX3RpbWUubWludXRlKTtcblxuXHRcdHRoaXMuX2lucHV0c1ZpZXcucGFpbnQoKTtcblx0fVxuXHRjbGVhcigpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5jb25maWcudGltZUZvcm1hdCA9PT0gMjQpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWUoXCIwMDowMFwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZShcIjEyOjAwQU1cIik7XG5cdFx0fVxuXHR9XG5cdGRlc3RydWN0b3IoKTogdm9pZCB7XG5cdFx0dGhpcy5fbWludXRlc1NsaWRlciAmJiB0aGlzLl9taW51dGVzU2xpZGVyLmRlc3RydWN0b3IoKTtcblx0XHR0aGlzLl9ob3Vyc1NsaWRlciAmJiB0aGlzLl9ob3Vyc1NsaWRlci5kZXN0cnVjdG9yKCk7XG5cdFx0dGhpcy5ldmVudHMgJiYgdGhpcy5ldmVudHMuY2xlYXIoKTtcblx0XHR0aGlzLmxheW91dCAmJiB0aGlzLmxheW91dC5kZXN0cnVjdG9yKCk7XG5cblx0XHR0aGlzLmNvbmZpZyA9IHRoaXMuZXZlbnRzID0gbnVsbDtcblx0XHR0aGlzLl9oYW5kbGVycyA9IHRoaXMuX3RpbWUgPSB0aGlzLl9pbnB1dHNWaWV3ID0gdGhpcy5fbWludXRlc1NsaWRlciA9IHRoaXMuX2hvdXJzU2xpZGVyID0gbnVsbDtcblx0XHR0aGlzLnVubW91bnQoKTtcblx0fVxuXHRnZXRSb290VmlldygpIHtcblx0XHRyZXR1cm4gdGhpcy5sYXlvdXQuZ2V0Um9vdFZpZXcoKTtcblx0fVxuXHRwcml2YXRlIF9zZXRWYWx1ZSh2YWx1ZTogRGF0ZSB8IG51bWJlciB8IHN0cmluZyB8IGFueVtdIHwgSVRpbWVPYmplY3QpOiBJVGltZU9iamVjdCB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuXHRcdGxldCBtID0gMDtcblx0XHRsZXQgaCA9IDA7XG5cdFx0bGV0IGlzUE06IGJvb2xlYW47XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuXHRcdFx0dmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG5cdFx0fVxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdG0gPSB2YWx1ZS5nZXRNaW51dGVzKCk7XG5cdFx0XHRoID0gdmFsdWUuZ2V0SG91cnMoKTtcblx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRoID0gdmFsaWRhdGUodmFsdWVbMF0sIDIzKTtcblx0XHRcdG0gPSB2YWxpZGF0ZSh2YWx1ZVsxXSwgNTkpO1xuXHRcdFx0aWYgKHZhbHVlWzJdICYmIHZhbHVlWzJdLnRvTG93ZXJDYXNlKCkgPT09IFwicG1cIikge1xuXHRcdFx0XHRpc1BNID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0Y29uc3QgbWF0Y2hlcyA9IHZhbHVlLm1hdGNoKC9cXGQrL2cpO1xuXHRcdFx0aCA9IHZhbGlkYXRlKCttYXRjaGVzWzBdLCAyMyk7XG5cdFx0XHRtID0gdmFsaWRhdGUoK21hdGNoZXNbMV0sIDU5KTtcblx0XHRcdGlmICh2YWx1ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwicG1cIikpIHtcblx0XHRcdFx0aXNQTSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuXHRcdFx0dmFsdWUuaGFzT3duUHJvcGVydHkoXCJob3VyXCIpICYmXG5cdFx0XHR2YWx1ZS5oYXNPd25Qcm9wZXJ0eShcIm1pbnV0ZVwiKVxuXHRcdCkge1xuXHRcdFx0aCA9IHZhbHVlLmhvdXI7XG5cdFx0XHRtID0gdmFsdWUubWludXRlO1xuXHRcdFx0aXNQTSA9ICF2YWx1ZS5BTTtcblx0XHR9XG5cdFx0aWYgKGlzUE0gJiYgaCA8IDEyKSB7XG5cdFx0XHRoICs9IDEyO1xuXHRcdH1cblx0XHRpZiAodGhpcy5jb25maWcudGltZUZvcm1hdCA9PT0gMTIgJiYgIWlzVGltZUNoZWNrKHZhbHVlKSAmJiBoID49IDEyKSBpc1BNID0gdHJ1ZTtcblxuXHRcdHJldHVybiAodGhpcy5fdGltZSA9IHtcblx0XHRcdGhvdXI6IGgsXG5cdFx0XHRtaW51dGU6IG0sXG5cdFx0XHRBTTogIWlzUE0sXG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBfaW5pdFVJKGNvbnRhaW5lcikge1xuXHRcdGNvbnN0IGxheW91dENvbmZpZyA9IHtcblx0XHRcdGdyYXZpdHk6IGZhbHNlLFxuXHRcdFx0Y3NzOlxuXHRcdFx0XHRcImRoeF93aWRnZXQgZGh4X3RpbWVwaWNrZXIgXCIgK1xuXHRcdFx0XHQodGhpcy5jb25maWcuY3NzID8gdGhpcy5jb25maWcuY3NzIDogXCJcIikgK1xuXHRcdFx0XHQodGhpcy5jb25maWcuY29udHJvbHMgPyBcIiBkaHhfdGltZXBpY2tlci0td2l0aC1jb250cm9sc1wiIDogXCJcIiksXG5cdFx0XHRyb3dzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZDogXCJ0aW1lcGlja2VyXCIsXG5cdFx0XHRcdFx0Y3NzOiBcImRoeF90aW1lcGlja2VyX19pbnB1dHNcIixcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlkOiBcImhvdXItc2xpZGVyXCIsXG5cdFx0XHRcdFx0Y3NzOiBcImRoeF90aW1lcGlja2VyX19ob3VyXCIsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZDogXCJtaW51dGUtc2xpZGVyXCIsXG5cdFx0XHRcdFx0Y3NzOiBcImRoeF90aW1lcGlja2VyX19taW51dGVcIixcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fTtcblx0XHRpZiAodGhpcy5jb25maWcuY29udHJvbHMpIHtcblx0XHRcdGxheW91dENvbmZpZy5yb3dzLnVuc2hpZnQoe1xuXHRcdFx0XHRpZDogXCJjbG9zZS1hY3Rpb25cIixcblx0XHRcdFx0Y3NzOiBcImRoeF90aW1lcGlja2VyX19jbG9zZVwiLFxuXHRcdFx0fSk7XG5cdFx0XHRsYXlvdXRDb25maWcucm93cy5wdXNoKHtcblx0XHRcdFx0aWQ6IFwic2F2ZS1hY3Rpb25cIixcblx0XHRcdFx0Y3NzOiBcImRoeF90aW1lcGlja2VyX19zYXZlXCIsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Y29uc3QgbGF5b3V0ID0gKHRoaXMubGF5b3V0ID0gbmV3IExheW91dChjb250YWluZXIsIGxheW91dENvbmZpZykpO1xuXG5cdFx0Y29uc3QgdGltZXBpY2tlciA9IGNyZWF0ZSh7XG5cdFx0XHRyZW5kZXI6ICgpID0+IHRoaXMuX2RyYXcoKSxcblx0XHR9KTtcblx0XHRjb25zdCBpbnB1dHNWaWV3ID0gKHRoaXMuX2lucHV0c1ZpZXcgPSB0b1ZpZXdMaWtlKHRpbWVwaWNrZXIpKTtcblxuXHRcdGNvbnN0IG1TbGlkZXIgPSAodGhpcy5fbWludXRlc1NsaWRlciA9IG5ldyBTbGlkZXIobnVsbCwge1xuXHRcdFx0bWluOiAwLFxuXHRcdFx0bWF4OiA1OSxcblx0XHRcdHN0ZXA6IDEsXG5cdFx0XHR0b29sdGlwOiBmYWxzZSxcblx0XHRcdGxhYmVsUG9zaXRpb246IFwidG9wXCIsXG5cdFx0XHRsYWJlbDogbG9jYWxlLm1pbnV0ZXMsXG5cdFx0XHR2YWx1ZTogdGhpcy5jb25maWcudmFsdWUgPyB0aGlzLl90aW1lLm1pbnV0ZSA6IDAsXG5cdFx0fSkpO1xuXG5cdFx0Y29uc3QgaFNsaWRlciA9ICh0aGlzLl9ob3Vyc1NsaWRlciA9IG5ldyBTbGlkZXIobnVsbCwge1xuXHRcdFx0bWluOiAwLFxuXHRcdFx0bWF4OiAyMyxcblx0XHRcdHN0ZXA6IDEsXG5cdFx0XHR0b29sdGlwOiBmYWxzZSxcblx0XHRcdGxhYmVsUG9zaXRpb246IFwidG9wXCIsXG5cdFx0XHRsYWJlbDogbG9jYWxlLmhvdXJzLFxuXHRcdFx0dmFsdWU6IHRoaXMuY29uZmlnLnZhbHVlID8gKHRoaXMuX3RpbWUuaG91ciA9PT0gMTIgJiYgdGhpcy5fdGltZS5BTSA/IDAgOiB0aGlzLl90aW1lLmhvdXIpIDogMCxcblx0XHR9KSk7XG5cblx0XHRsYXlvdXQuZ2V0Q2VsbChcInRpbWVwaWNrZXJcIikuYXR0YWNoKGlucHV0c1ZpZXcpO1xuXHRcdGxheW91dC5nZXRDZWxsKFwiaG91ci1zbGlkZXJcIikuYXR0YWNoKGhTbGlkZXIpO1xuXHRcdGxheW91dC5nZXRDZWxsKFwibWludXRlLXNsaWRlclwiKS5hdHRhY2gobVNsaWRlcik7XG5cblx0XHRpZiAodGhpcy5jb25maWcuY29udHJvbHMpIHtcblx0XHRcdGNvbnN0IHNhdmUgPSAoKSA9PiB7XG5cdFx0XHRcdHJldHVybiBlbChcblx0XHRcdFx0XHRcImJ1dHRvbi5kaHhfdGltZXBpY2tlcl9fYnV0dG9uLXNhdmUuZGh4X2J1dHRvbi5kaHhfYnV0dG9uLS12aWV3X2ZsYXQuZGh4X2J1dHRvbi0tY29sb3JfcHJpbWFyeS5kaHhfYnV0dG9uLS1zaXplX3NtYWxsLmRoeF9idXR0b24tLWNpcmNsZS5kaHhfYnV0dG9uLS13aWR0aF9mdWxsXCIsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0b25jbGljazogdGhpcy5fb3V0ZXJIYW5kbGVycy5zYXZlLFxuXHRcdFx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGxvY2FsZS5zYXZlXG5cdFx0XHRcdCk7XG5cdFx0XHR9O1xuXHRcdFx0Y29uc3QgY2xvc2UgPSAoKSA9PiB7XG5cdFx0XHRcdHJldHVybiBlbChcblx0XHRcdFx0XHRcImJ1dHRvbi5kaHhfdGltZXBpY2tlcl9fYnV0dG9uLWNsb3NlLmRoeF9idXR0b24uZGh4X2J1dHRvbi0tdmlld19saW5rLmRoeF9idXR0b24tLXNpemVfbWVkaXVtLmRoeF9idXR0b24tLXZpZXdfbGluay5kaHhfYnV0dG9uLS1jb2xvcl9zZWNvbmRhcnkuZGh4X2J1dHRvbi0taWNvbi5kaHhfYnV0dG9uLS1jaXJjbGVcIixcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRfcmVmOiBcImNsb3NlXCIsXG5cdFx0XHRcdFx0XHRvbmNsaWNrOiB0aGlzLl9vdXRlckhhbmRsZXJzLmNsb3NlLFxuXHRcdFx0XHRcdFx0dHlwZTogXCJidXR0b25cIixcblx0XHRcdFx0XHRcdFwiYXJpYS1sYWJlbFwiOiBcImNsb3NlIHRpbWVwaWNrZXJcIixcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFtlbChcInNwYW4uZGh4X2J1dHRvbl9faWNvbi5keGkuZHhpLWNsb3NlXCIpXVxuXHRcdFx0XHQpO1xuXHRcdFx0fTtcblx0XHRcdGxheW91dC5nZXRDZWxsKFwic2F2ZS1hY3Rpb25cIikuYXR0YWNoKHNhdmUpO1xuXHRcdFx0bGF5b3V0LmdldENlbGwoXCJjbG9zZS1hY3Rpb25cIikuYXR0YWNoKGNsb3NlKTtcblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBfaW5pdEhhbmRsZXJzKCkge1xuXHRcdGNvbnN0IHNldE1pbnV0ZXMgPSAoZWxlbWVudDogSFRNTElucHV0RWxlbWVudCkgPT4ge1xuXHRcdFx0Y29uc3QgbWluID0gdmFsaWRhdGUocGFyc2VJbnQoZWxlbWVudC52YWx1ZSwgMTApLCA1OSk7XG5cdFx0XHRlbGVtZW50LnZhbHVlID0gbWluLnRvU3RyaW5nKCk7XG5cdFx0XHR0aGlzLl9taW51dGVzU2xpZGVyLnNldFZhbHVlKG1pbik7XG5cdFx0fTtcblx0XHRjb25zdCBzZXRIb3VycyA9IChlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50KSA9PiB7XG5cdFx0XHRjb25zdCBob3VyID0gdmFsaWRhdGUocGFyc2VJbnQoZWxlbWVudC52YWx1ZSwgMTApLCAyMyk7XG5cdFx0XHRlbGVtZW50LnZhbHVlID0gaG91ci50b1N0cmluZygpO1xuXHRcdFx0dGhpcy5fbWludXRlc1NsaWRlci5zZXRWYWx1ZShob3VyKTtcblx0XHR9O1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0b25jaGFuZ2U6IHtcblx0XHRcdFx0XCIuZGh4X3RpbWVwaWNrZXItaW5wdXQtLWhvdXJcIjogZSA9PiBzZXRIb3VycyhlLnRhcmdldCksXG5cdFx0XHRcdFwiLmRoeF90aW1lcGlja2VyLWlucHV0LS1taW51dGVzXCI6IGUgPT4gc2V0TWludXRlcyhlLnRhcmdldCksXG5cdFx0XHR9LFxuXHRcdFx0b25pbnB1dDoge1xuXHRcdFx0XHRcIi5kaHhfdGltZXBpY2tlci1pbnB1dC0taG91clwiOiBlID0+IHtcblx0XHRcdFx0XHRpZiAoIWlzU2FmYXJpKCkgJiYgIWlzRmlyZWZveCgpKSByZXR1cm47XG5cdFx0XHRcdFx0c2V0SG91cnMoZS50YXJnZXQpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIi5kaHhfdGltZXBpY2tlci1pbnB1dC0tbWludXRlc1wiOiBlID0+IHtcblx0XHRcdFx0XHRpZiAoIWlzU2FmYXJpKCkgJiYgIWlzRmlyZWZveCgpKSByZXR1cm47XG5cdFx0XHRcdFx0c2V0TWludXRlcyhlLnRhcmdldCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH07XG5cdFx0dGhpcy5fb3V0ZXJIYW5kbGVycyA9IHtcblx0XHRcdGNsb3NlOiAoKSA9PiB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQhdGhpcy5ldmVudHMuZmlyZShUaW1lcGlja2VyRXZlbnRzLmJlZm9yZUNsb3NlLCBbXG5cdFx0XHRcdFx0XHR0aGlzLmdldFZhbHVlKHRoaXMuY29uZmlnLnZhbHVlRm9ybWF0ID09PSBcInRpbWVPYmplY3RcIiksXG5cdFx0XHRcdFx0XSlcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoVGltZXBpY2tlckV2ZW50cy5hZnRlckNsb3NlLCBbXG5cdFx0XHRcdFx0dGhpcy5nZXRWYWx1ZSh0aGlzLmNvbmZpZy52YWx1ZUZvcm1hdCA9PT0gXCJ0aW1lT2JqZWN0XCIpLFxuXHRcdFx0XHRdKTtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShUaW1lcGlja2VyRXZlbnRzLmNsb3NlLCBbXSk7IC8vIFRPRE86IHJlbW92ZSBzdWl0ZV83LjBcblx0XHRcdH0sXG5cdFx0XHRzYXZlOiAoKSA9PiB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQhdGhpcy5ldmVudHMuZmlyZShUaW1lcGlja2VyRXZlbnRzLmJlZm9yZUFwcGx5LCBbXG5cdFx0XHRcdFx0XHR0aGlzLmdldFZhbHVlKHRoaXMuY29uZmlnLnZhbHVlRm9ybWF0ID09PSBcInRpbWVPYmplY3RcIiksXG5cdFx0XHRcdFx0XSlcblx0XHRcdFx0KVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0dGhpcy5ldmVudHMuZmlyZShUaW1lcGlja2VyRXZlbnRzLmFmdGVyQXBwbHksIFtcblx0XHRcdFx0XHR0aGlzLmdldFZhbHVlKHRoaXMuY29uZmlnLnZhbHVlRm9ybWF0ID09PSBcInRpbWVPYmplY3RcIiksXG5cdFx0XHRcdF0pO1xuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKFRpbWVwaWNrZXJFdmVudHMuYXBwbHksIFt0aGlzLmdldFZhbHVlKCldKTsgLy8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdFx0XHR0aGlzLmV2ZW50cy5maXJlKFRpbWVwaWNrZXJFdmVudHMuc2F2ZSwgW3RoaXMuX3RpbWVdKTsgLy8gVE9ETzogcmVtb3ZlIHN1aXRlXzcuMFxuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG5cdHByaXZhdGUgX2luaXRFdmVudHMoKSB7XG5cdFx0dGhpcy5faG91cnNTbGlkZXIuZXZlbnRzLm9uKFNsaWRlckV2ZW50cy5jaGFuZ2UsIHZhbHVlID0+IHtcblx0XHRcdGlmICh2YWx1ZSA8IHRoaXMuX2hvdXJzU2xpZGVyLmNvbmZpZy5taW4gfHwgdmFsdWUgPiB0aGlzLl9ob3Vyc1NsaWRlci5jb25maWcubWF4KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmNvbmZpZy50aW1lRm9ybWF0ID09PSAxMikge1xuXHRcdFx0XHR0aGlzLl90aW1lLkFNID0gdmFsdWUgPCAxMjtcblx0XHRcdFx0dGhpcy5fdGltZS5ob3VyID0gdmFsdWUgJSAxMiB8fCAxMjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3RpbWUuaG91ciA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5ldmVudHMuZmlyZShUaW1lcGlja2VyRXZlbnRzLmNoYW5nZSwgW1xuXHRcdFx0XHR0aGlzLmdldFZhbHVlKHRoaXMuY29uZmlnLnZhbHVlRm9ybWF0ID09PSBcInRpbWVPYmplY3RcIiksXG5cdFx0XHRdKTtcblx0XHRcdHRoaXMuX2lucHV0c1ZpZXcucGFpbnQoKTtcblx0XHR9KTtcblx0XHR0aGlzLl9taW51dGVzU2xpZGVyLmV2ZW50cy5vbihTbGlkZXJFdmVudHMuY2hhbmdlLCB2YWx1ZSA9PiB7XG5cdFx0XHRpZiAodmFsdWUgPCB0aGlzLl9taW51dGVzU2xpZGVyLmNvbmZpZy5taW4gfHwgdmFsdWUgPiB0aGlzLl9taW51dGVzU2xpZGVyLmNvbmZpZy5tYXgpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fdGltZS5taW51dGUgPSB2YWx1ZTtcblx0XHRcdHRoaXMuZXZlbnRzLmZpcmUoVGltZXBpY2tlckV2ZW50cy5jaGFuZ2UsIFtcblx0XHRcdFx0dGhpcy5nZXRWYWx1ZSh0aGlzLmNvbmZpZy52YWx1ZUZvcm1hdCA9PT0gXCJ0aW1lT2JqZWN0XCIpLFxuXHRcdFx0XSk7XG5cdFx0XHR0aGlzLl9pbnB1dHNWaWV3LnBhaW50KCk7XG5cdFx0fSk7XG5cdH1cblx0cHJpdmF0ZSBfZHJhdygpIHtcblx0XHRyZXR1cm4gZWwoXG5cdFx0XHRcIi5kaHhfdGltZXBpY2tlci1pbnB1dHNcIixcblx0XHRcdHtcblx0XHRcdFx0Li4udGhpcy5faGFuZGxlcnMsXG5cdFx0XHR9LFxuXHRcdFx0W1xuXHRcdFx0XHRlbChcImlucHV0LmRoeF90aW1lcGlja2VyLWlucHV0LmRoeF90aW1lcGlja2VyLWlucHV0LS1ob3VyXCIsIHtcblx0XHRcdFx0XHRfa2V5OiBcImhvdXJcIixcblx0XHRcdFx0XHRfcmVmOiBcImhvdXJcIixcblx0XHRcdFx0XHR2YWx1ZTpcblx0XHRcdFx0XHRcdHRoaXMuZ2V0VmFsdWUodHJ1ZSkuaG91ci50b1N0cmluZygpLmxlbmd0aCA+IDFcblx0XHRcdFx0XHRcdFx0PyB0aGlzLmdldFZhbHVlKHRydWUpLmhvdXJcblx0XHRcdFx0XHRcdFx0OiBcIjBcIiArIHRoaXMuZ2V0VmFsdWUodHJ1ZSkuaG91cixcblx0XHRcdFx0XHRcImFyaWEtbGFiZWxcIjogXCJob3Vyc1wiLFxuXHRcdFx0XHR9KSxcblx0XHRcdFx0ZWwoXCJzcGFuLmRoeF90aW1lcGlja2VyLWRlbGltZXJcIiwgXCI6XCIpLFxuXHRcdFx0XHRlbChcImlucHV0LmRoeF90aW1lcGlja2VyLWlucHV0LmRoeF90aW1lcGlja2VyLWlucHV0LS1taW51dGVzXCIsIHtcblx0XHRcdFx0XHRfa2V5OiBcIm1pbnV0ZVwiLFxuXHRcdFx0XHRcdHZhbHVlOlxuXHRcdFx0XHRcdFx0dGhpcy5nZXRWYWx1ZSh0cnVlKS5taW51dGUudG9TdHJpbmcoKS5sZW5ndGggPiAxXG5cdFx0XHRcdFx0XHRcdD8gdGhpcy5nZXRWYWx1ZSh0cnVlKS5taW51dGVcblx0XHRcdFx0XHRcdFx0OiBcIjBcIiArIHRoaXMuZ2V0VmFsdWUodHJ1ZSkubWludXRlLFxuXHRcdFx0XHRcdFwiYXJpYS1sYWJlbFwiOiBcIm1pbnV0ZXNcIixcblx0XHRcdFx0fSksXG5cdFx0XHRcdHRoaXMuY29uZmlnLnRpbWVGb3JtYXQgPT09IDEyXG5cdFx0XHRcdFx0PyBlbChcIi5kaHhfdGltZXBpY2tlci1hbXBtXCIsIHRoaXMuX3RpbWUuQU0gPyBcIkFNXCIgOiBcIlBNXCIpXG5cdFx0XHRcdFx0OiBudWxsLFxuXHRcdFx0XVxuXHRcdCk7XG5cdH1cbn1cbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byByZXNvbHZlIGNvbmZsaWN0cyB3aXRoIHRoZSB0aW1lIHNldHRpbmcgZm9yIHRoZSAxMiBob3VyIGZvcm1hdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGltZUNoZWNrKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcblx0cmV0dXJuIC8oXjEyOlswLTVdWzAtOV0/QU0kKS9pLnRlc3QodmFsdWUpO1xufVxuIiwiY29uc3QgbG9jYWxlID0ge1xuXHRob3VyczogXCJIb3Vyc1wiLFxuXHRtaW51dGVzOiBcIk1pbnV0ZXNcIixcblx0c2F2ZTogXCJTYXZlXCIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7XG4iLCJpbXBvcnQgeyBJRXZlbnRTeXN0ZW0gfSBmcm9tIFwiQGRoeC90cy1jb21tb24vZXZlbnRzXCI7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tIFwiQGRoeC90cy1sYXlvdXRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJVGltZXBpY2tlckNvbmZpZyB7XG5cdGNzcz86IHN0cmluZztcblx0dGltZUZvcm1hdD86IDEyIHwgMjQ7XG5cdGNvbnRyb2xzPzogYm9vbGVhbjtcblx0dmFsdWU/OiBEYXRlIHwgbnVtYmVyIHwgc3RyaW5nIHwgYW55W10gfCBJVGltZU9iamVjdDtcblx0dmFsdWVGb3JtYXQ/OiBcInN0cmluZ1wiIHwgXCJ0aW1lT2JqZWN0XCI7XG5cblx0LyoqIEBkZXByZWNhdGVkIFNlZSBhIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZG9jcy5kaHRtbHguY29tLyAqL1xuXHRhY3Rpb25zPzogYm9vbGVhbjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSVRpbWVwaWNrZXIge1xuXHRjb25maWc6IElUaW1lcGlja2VyQ29uZmlnO1xuXHRldmVudHM6IElFdmVudFN5c3RlbTxUaW1lcGlja2VyRXZlbnRzLCBJVGltZXBpY2tlckhhbmRsZXJzTWFwPjtcblx0bGF5b3V0OiBMYXlvdXQ7XG5cblx0cGFpbnQoKTogdm9pZDtcblx0Z2V0VmFsdWUoYXNPQmplY3Q/OiBib29sZWFuKTogSVRpbWVPYmplY3QgfCBzdHJpbmc7XG5cdHNldFZhbHVlKHZhbHVlOiBEYXRlIHwgbnVtYmVyIHwgc3RyaW5nIHwgYW55W10gfCBJVGltZU9iamVjdCk6IHZvaWQ7XG5cdGNsZWFyKCk6IHZvaWQ7XG5cdGRlc3RydWN0b3IoKTogdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSVRpbWVPYmplY3Qge1xuXHRob3VyOiBudW1iZXI7XG5cdG1pbnV0ZTogbnVtYmVyO1xuXHRBTT86IGJvb2xlYW47XG59XG5leHBvcnQgZW51bSBUaW1lcGlja2VyRXZlbnRzIHtcblx0Y2hhbmdlID0gXCJjaGFuZ2VcIixcblx0YmVmb3JlQXBwbHkgPSBcImJlZm9yZUFwcGx5XCIsXG5cdGFmdGVyQXBwbHkgPSBcImFmdGVyQXBwbHlcIixcblx0YmVmb3JlQ2xvc2UgPSBcImJlZm9yZUNsb3NlXCIsXG5cdGFmdGVyQ2xvc2UgPSBcImFmdGVyQ2xvc2VcIixcblxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGFwcGx5ID0gXCJhcHBseVwiLFxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdGNsb3NlID0gXCJjbG9zZVwiLFxuXHQvKiogQGRlcHJlY2F0ZWQgU2VlIGEgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9kb2NzLmRodG1seC5jb20vICovXG5cdHNhdmUgPSBcInNhdmVcIixcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSVRpbWVwaWNrZXJIYW5kbGVyc01hcCB7XG5cdFtrZXk6IHN0cmluZ106ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuXHRbVGltZXBpY2tlckV2ZW50cy5jaGFuZ2VdOiAodmFsdWU6IHN0cmluZyB8IElUaW1lT2JqZWN0KSA9PiB2b2lkO1xuXHRbVGltZXBpY2tlckV2ZW50cy5iZWZvcmVBcHBseV06ICh2YWx1ZTogc3RyaW5nIHwgSVRpbWVPYmplY3QpID0+IGJvb2xlYW4gfCB2b2lkO1xuXHRbVGltZXBpY2tlckV2ZW50cy5hZnRlckFwcGx5XTogKHZhbHVlOiBzdHJpbmcgfCBJVGltZU9iamVjdCkgPT4gdm9pZDtcblx0W1RpbWVwaWNrZXJFdmVudHMuYmVmb3JlQ2xvc2VdOiAodmFsdWU6IHN0cmluZyB8IElUaW1lT2JqZWN0KSA9PiBib29sZWFuIHwgdm9pZDtcblx0W1RpbWVwaWNrZXJFdmVudHMuYWZ0ZXJDbG9zZV06ICh2YWx1ZTogc3RyaW5nIHwgSVRpbWVPYmplY3QpID0+IHZvaWQ7XG5cblx0W1RpbWVwaWNrZXJFdmVudHMuYXBwbHldOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcblx0W1RpbWVwaWNrZXJFdmVudHMuY2xvc2VdOiAoKSA9PiBhbnk7XG5cdFtUaW1lcGlja2VyRXZlbnRzLnNhdmVdOiAodmFsdWU/OiBJVGltZU9iamVjdCkgPT4gYW55O1xufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vc291cmNlcy9Ub29sYmFyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb3VyY2VzL1Byb1Rvb2xiYXJcIjtcbiIsImltcG9ydCB7IFRvb2xiYXIsIElUb29sYmFyIH0gZnJvbSBcIi4vVG9vbGJhclwiO1xuaW1wb3J0IHsgU2Nyb2xsVmlldyB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9TY3JvbGxWaWV3XCI7XG5pbXBvcnQgeyBlbCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IGxvY2F0ZU5vZGUgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vaHRtbFwiO1xuaW1wb3J0IHsgdG9vbHRpcCwgUG9zaXRpb24gfSBmcm9tIFwiQGRoeC90cy1tZXNzYWdlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb1Rvb2xiYXIgZXh0ZW5kcyBJVG9vbGJhciB7XG5cdHNjcm9sbFZpZXc6IFNjcm9sbFZpZXc7XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9Ub29sYmFyIGV4dGVuZHMgVG9vbGJhciBpbXBsZW1lbnRzIElQcm9Ub29sYmFyIHtcblx0c2Nyb2xsVmlldzogU2Nyb2xsVmlldztcblxuXHRjb25zdHJ1Y3RvcihlbGVtZW50Pzogc3RyaW5nIHwgSFRNTEVsZW1lbnQsIGNvbmZpZz8pIHtcblx0XHRzdXBlcihlbGVtZW50LCBjb25maWcpO1xuXHRcdHRoaXMuc2Nyb2xsVmlldyA9IG5ldyBTY3JvbGxWaWV3KCgpID0+IHRoaXMuZ2V0Um9vdFZpZXcoKSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2RyYXcoZWxlbWVudCkge1xuXHRcdGNvbnN0IGdldEFyaWFBdHRycyA9IGVsZW1lbnQgPT4gKHtcblx0XHRcdHJvbGU6IFwidG9vbGJhclwiLFxuXHRcdFx0XCJhcmlhLWxhYmVsXCI6IGVsZW1lbnQgfHwgXCJcIixcblx0XHR9KTtcblxuXHRcdGNvbnN0IHRvb2xiYXJIZWlnaHQgPSB0aGlzLmRhdGEuZ2V0TGVuZ3RoKClcblx0XHRcdD8gdGhpcy5kYXRhLnJlZHVjZSgocmVzdWx0LCBpdGVtKSA9PiB7XG5cdFx0XHRcdFx0c3dpdGNoIChpdGVtLnR5cGUpIHtcblx0XHRcdFx0XHRcdGNhc2UgXCJ0aXRsZVwiOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdCA/IDIwIDogcmVzdWx0O1xuXHRcdFx0XHRcdFx0Y2FzZSBcImJ1dHRvblwiOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaXRlbS5zaXplID09PSBcInNtYWxsXCIgJiYgKCFyZXN1bHQgfHwgcmVzdWx0IDw9IDI4KSA/IDI4IDogcmVzdWx0IHx8IDMyO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIDMyO1xuXHRcdFx0XHRcdH1cblx0XHRcdCAgfSwgMCkgKyAyNFxuXHRcdFx0OiBudWxsO1xuXG5cdFx0Y29uc3QgbmF2QmFyID0gW1xuXHRcdFx0ZWwoXG5cdFx0XHRcdFwidWwuZGh4X25hdmJhci5kaHhfbmF2YmFyLS1ob3Jpem9udGFsXCIsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkaHhfd2lkZ2V0X2lkOiB0aGlzLl91aWQsXG5cdFx0XHRcdFx0dGFiaW5kZXg6IDAsXG5cdFx0XHRcdFx0Li4uZ2V0QXJpYUF0dHJzKGVsZW1lbnQpLFxuXHRcdFx0XHRcdG9uY2xpY2s6IHRoaXMuX2hhbmRsZXJzLm9uY2xpY2ssXG5cdFx0XHRcdFx0b25tb3VzZWRvd246IHRoaXMuX2hhbmRsZXJzLm9ubW91c2Vkb3duLFxuXHRcdFx0XHRcdG9uaW5wdXQ6IHRoaXMuX2hhbmRsZXJzLmlucHV0LFxuXHRcdFx0XHRcdG9ubW91c2VvdmVyOiB0aGlzLl9oYW5kbGVycy50b29sdGlwLFxuXHRcdFx0XHRcdF9ob29rczoge1xuXHRcdFx0XHRcdFx0ZGlkSW5zZXJ0OiBub2RlID0+IHtcblx0XHRcdFx0XHRcdFx0bm9kZS5lbC5hZGRFdmVudExpc3RlbmVyKFxuXHRcdFx0XHRcdFx0XHRcdFwia2V5dXBcIixcblx0XHRcdFx0XHRcdFx0XHRlID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChlLndoaWNoICE9PSA5KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGVsZW0gPSBsb2NhdGVOb2RlKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFlbGVtKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGlkID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJkaHhfaWRcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBpdGVtID0gdGhpcy5kYXRhLmdldEl0ZW0oaWQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGl0ZW0udG9vbHRpcCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0b29sdGlwKGl0ZW0udG9vbHRpcCwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGU6IGVsZW0gYXMgSFRNTEVsZW1lbnQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cG9zaXRpb246IFBvc2l0aW9uLmJvdHRvbSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmb3JjZTogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoaXMuZGF0YS5tYXAoaXRlbSA9PiB0aGlzLl9mYWN0b3J5KGl0ZW0pLCB0aGlzLmRhdGEuZ2V0Um9vdCgpLCBmYWxzZSlcblx0XHRcdCksXG5cdFx0XTtcblxuXHRcdHJldHVybiBlbChcblx0XHRcdFwibmF2LmRoeF93aWRnZXQuZGh4X3Rvb2xiYXJcIixcblx0XHRcdHtcblx0XHRcdFx0c3R5bGU6IHsgaGVpZ2h0OiB0b29sYmFySGVpZ2h0IH0sXG5cdFx0XHRcdGNsYXNzOiB0aGlzLmNvbmZpZy5jc3MgPyB0aGlzLmNvbmZpZy5jc3MgOiBcIlwiLFxuXHRcdFx0fSxcblx0XHRcdHRoaXMuc2Nyb2xsVmlldyAmJiB0aGlzLnNjcm9sbFZpZXcuY29uZmlnLmVuYWJsZVxuXHRcdFx0XHQ/IFtdLmNvbmNhdCh0aGlzLnNjcm9sbFZpZXcucmVuZGVyKG5hdkJhcikpXG5cdFx0XHRcdDogbmF2QmFyXG5cdFx0KTtcblx0fVxufVxuIiwiaW1wb3J0IHsgZXh0ZW5kLCBpc0RlZmluZWQgfSBmcm9tIFwiQGRoeC90cy1jb21tb24vY29yZVwiO1xuaW1wb3J0IHsgY3JlYXRlLCBlbCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9kb21cIjtcbmltcG9ydCB7IGxvY2F0ZSwgbG9jYXRlTm9kZSB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi9odG1sXCI7XG5pbXBvcnQgeyBJZCB9IGZyb20gXCJAZGh4L3RzLWNvbW1vbi90eXBlc1wiO1xuaW1wb3J0IHsgVHJlZUNvbGxlY3Rpb24gfSBmcm9tIFwiQGRoeC90cy1kYXRhXCI7XG5pbXBvcnQgeyBQb3NpdGlvbiwgdG9vbHRpcCB9IGZyb20gXCJAZGh4L3RzLW1lc3NhZ2VcIjtcbmltcG9ydCB7XG5cdGNyZWF0ZUZhY3RvcnksXG5cdElTdGF0ZSxcblx0TmF2YmFyLFxuXHRJTmF2YmFyLFxuXHRJQnV0dG9uLFxuXHRJSW1hZ2VCdXR0b24sXG5cdElTZWxlY3RCdXR0b24sXG5cdElJbnB1dCxcblx0SVNlcGFyYXRvcixcblx0SVNwYWNlcixcblx0SVRpdGxlLFxuXHRJQ3VzdG9tSFRNTCxcblx0SU5hdkl0ZW0sXG5cdElNZW51SXRlbSxcblx0SURhdGVQaWNrZXIsXG59IGZyb20gXCJAZGh4L3RzLW5hdmJhclwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElUb29sYmFyQ29uZmlnIHtcblx0Y3NzPzogc3RyaW5nO1xuXHRtZW51Q3NzPzogc3RyaW5nO1xuXHRkYXRhPzogYW55W10gfCBUcmVlQ29sbGVjdGlvbjxJVG9vbGJhckVsZW1lbnQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUb29sYmFyIGV4dGVuZHMgSU5hdmJhciB7XG5cdGRhdGE6IFRyZWVDb2xsZWN0aW9uPElUb29sYmFyRWxlbWVudD47XG5cdGNvbmZpZzogSVRvb2xiYXJDb25maWc7XG5cblx0Z2V0U3RhdGUoaWQ/OiBJZCk6IElTdGF0ZTtcblx0c2V0U3RhdGUoc3RhdGU6IElTdGF0ZSk6IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIElUb29sYmFyRWxlbWVudCA9XG5cdHwgSUJ1dHRvblxuXHR8IElJbWFnZUJ1dHRvblxuXHR8IElTZWxlY3RCdXR0b25cblx0fCBJSW5wdXRcblx0fCBJU2VwYXJhdG9yXG5cdHwgSVNwYWNlclxuXHR8IElUaXRsZVxuXHR8IElDdXN0b21IVE1MXG5cdHwgSU5hdkl0ZW1cblx0fCBJTWVudUl0ZW1cblx0fCBJRGF0ZVBpY2tlcjtcblxuZXhwb3J0IGNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBOYXZiYXI8SVRvb2xiYXJFbGVtZW50PiBpbXBsZW1lbnRzIElUb29sYmFyIHtcblx0ZGF0YTogVHJlZUNvbGxlY3Rpb248SVRvb2xiYXJFbGVtZW50Pjtcblx0Y29uZmlnOiBJVG9vbGJhckNvbmZpZztcblxuXHRjb25zdHJ1Y3RvcihlbGVtZW50Pzogc3RyaW5nIHwgSFRNTEVsZW1lbnQsIGNvbmZpZz8pIHtcblx0XHRzdXBlcihcblx0XHRcdGVsZW1lbnQsXG5cdFx0XHRleHRlbmQoXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRuYXZpZ2F0aW9uVHlwZTogXCJjbGlja1wiLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRjb25maWdcblx0XHRcdClcblx0XHQpO1xuXG5cdFx0dGhpcy5fY3VycmVudFJvb3QgPSBudWxsO1xuXHRcdGNvbnN0IHJlbmRlciA9ICgpID0+IHRoaXMuX2RyYXcoZWxlbWVudCk7XG5cdFx0dGhpcy5tb3VudChlbGVtZW50LCBjcmVhdGUoeyByZW5kZXIgfSkpO1xuXHR9XG5cdGdldFN0YXRlKGlkPzogSWQpOiBJU3RhdGUge1xuXHRcdGlmIChpc0RlZmluZWQoaWQpICYmICF0aGlzLmRhdGEuZ2V0SXRlbShpZCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3Qgc3RhdGUgPSB7fTtcblx0XHR0aGlzLmRhdGEuZWFjaENoaWxkKFxuXHRcdFx0dGhpcy5kYXRhLmdldFJvb3QoKSxcblx0XHRcdGl0ZW0gPT4ge1xuXHRcdFx0XHRpZiAoKGl0ZW0gYXMgYW55KS50d29TdGF0ZSAmJiAhaXRlbS5ncm91cCkge1xuXHRcdFx0XHRcdHN0YXRlW2l0ZW0uaWRdID0gKGl0ZW0gYXMgYW55KS5hY3RpdmU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBcImlucHV0XCIgfHwgaXRlbS50eXBlID09PSBcInNlbGVjdEJ1dHRvblwiKSB7XG5cdFx0XHRcdFx0c3RhdGVbaXRlbS5pZF0gPSBpdGVtLnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZmFsc2Vcblx0XHQpO1xuXHRcdGZvciAoY29uc3Qga2V5IGluIHRoaXMuX2dyb3Vwcykge1xuXHRcdFx0aWYgKHRoaXMuX2dyb3Vwc1trZXldLmFjdGl2ZSkge1xuXHRcdFx0XHRzdGF0ZVtrZXldID0gdGhpcy5fZ3JvdXBzW2tleV0uYWN0aXZlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoaWQpIHtcblx0XHRcdHJldHVybiBzdGF0ZVtpZF07XG5cdFx0fVxuXHRcdHJldHVybiBzdGF0ZTtcblx0fVxuXHRzZXRTdGF0ZShzdGF0ZTogSVN0YXRlKTogdm9pZCB7XG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gc3RhdGUpIHtcblx0XHRcdGlmICh0aGlzLl9ncm91cHMgJiYgdGhpcy5fZ3JvdXBzW2tleV0pIHtcblx0XHRcdFx0aWYgKHRoaXMuX2dyb3Vwc1trZXldLmFjdGl2ZSkge1xuXHRcdFx0XHRcdHRoaXMuZGF0YS51cGRhdGUodGhpcy5fZ3JvdXBzW2tleV0uYWN0aXZlLCB7IGFjdGl2ZTogZmFsc2UgfSk7XG5cdFx0XHRcdFx0dGhpcy5fZ3JvdXBzW2tleV0uYWN0aXZlID0gc3RhdGVba2V5XTtcblx0XHRcdFx0XHR0aGlzLmRhdGEudXBkYXRlKHN0YXRlW2tleV0sIHsgYWN0aXZlOiB0cnVlIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCBpdGVtID0gdGhpcy5kYXRhLmdldEl0ZW0oa2V5KTtcblx0XHRcdFx0aWYgKGl0ZW0udHlwZSA9PT0gXCJpbnB1dFwiIHx8IGl0ZW0udHlwZSA9PT0gXCJzZWxlY3RCdXR0b25cIikge1xuXHRcdFx0XHRcdHRoaXMuZGF0YS51cGRhdGUoa2V5LCB7IHZhbHVlOiBzdGF0ZVtrZXldIH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuZGF0YS51cGRhdGUoa2V5LCB7IGFjdGl2ZTogc3RhdGVba2V5XSB9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRwcm90ZWN0ZWQgX2N1c3RvbUhhbmRsZXJzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRpbnB1dDogKGU6IEV2ZW50KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlkID0gbG9jYXRlKGUpO1xuXHRcdFx0XHR0aGlzLmRhdGEudXBkYXRlKGlkLCB7IHZhbHVlOiAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgfSk7XG5cdFx0XHR9LFxuXHRcdFx0dG9vbHRpcDogKGU6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0Y29uc3QgZWxlbSA9IGxvY2F0ZU5vZGUoZSk7XG5cdFx0XHRcdGlmICghZWxlbSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBpZCA9IGVsZW0uZ2V0QXR0cmlidXRlKFwiZGh4X2lkXCIpO1xuXHRcdFx0XHRjb25zdCBpdGVtID0gdGhpcy5kYXRhLmdldEl0ZW0oaWQpO1xuXHRcdFx0XHRpZiAoaXRlbS50b29sdGlwKSB7XG5cdFx0XHRcdFx0dG9vbHRpcChpdGVtLnRvb2x0aXAsIHtcblx0XHRcdFx0XHRcdG5vZGU6IGVsZW0gYXMgSFRNTEVsZW1lbnQsXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogUG9zaXRpb24uYm90dG9tLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cblx0cHJvdGVjdGVkIF9nZXRGYWN0b3J5KCkge1xuXHRcdHJldHVybiBjcmVhdGVGYWN0b3J5KHtcblx0XHRcdHdpZGdldDogdGhpcyxcblx0XHRcdGRlZmF1bHRUeXBlOiBcIm5hdkl0ZW1cIixcblx0XHRcdGFsbG93ZWRUeXBlczogW1xuXHRcdFx0XHRcImJ1dHRvblwiLFxuXHRcdFx0XHRcImltYWdlQnV0dG9uXCIsXG5cdFx0XHRcdFwic2VsZWN0QnV0dG9uXCIsXG5cdFx0XHRcdFwibmF2SXRlbVwiLFxuXHRcdFx0XHRcIm1lbnVJdGVtXCIsXG5cdFx0XHRcdFwic2VwYXJhdG9yXCIsXG5cdFx0XHRcdFwic3BhY2VyXCIsXG5cdFx0XHRcdFwidGl0bGVcIixcblx0XHRcdFx0XCJpbnB1dFwiLFxuXHRcdFx0XHRcImN1c3RvbUhUTUxcIixcblx0XHRcdFx0XCJkYXRlUGlja2VyXCIsXG5cblx0XHRcdFx0XCJjdXN0b21IVE1MQnV0dG9uXCIsXG5cdFx0XHRdLFxuXHRcdFx0d2lkZ2V0TmFtZTogXCJ0b29sYmFyXCIsXG5cdFx0fSk7XG5cdH1cblx0cHJvdGVjdGVkIF9kcmF3KGVsZW1lbnQpIHtcblx0XHRjb25zdCBnZXRBcmlhQXR0cnMgPSBlbGVtZW50ID0+ICh7XG5cdFx0XHRyb2xlOiBcInRvb2xiYXJcIixcblx0XHRcdFwiYXJpYS1sYWJlbFwiOiBlbGVtZW50IHx8IFwiXCIsIC8vIHRvIGRpZmZlciB0b29sYmFycyBpZiB0aGVyZSBhcmUgMiBvciBtb3JlIG9uIHBhZ2Vcblx0XHR9KTtcblxuXHRcdGNvbnN0IHRvb2xiYXJIZWlnaHQgPSB0aGlzLmRhdGEuZ2V0TGVuZ3RoKClcblx0XHRcdD8gdGhpcy5kYXRhLnJlZHVjZSgocmVzdWx0LCBpdGVtKSA9PiB7XG5cdFx0XHRcdFx0c3dpdGNoIChpdGVtLnR5cGUpIHtcblx0XHRcdFx0XHRcdGNhc2UgXCJ0aXRsZVwiOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdCA/IDIwIDogcmVzdWx0O1xuXHRcdFx0XHRcdFx0Y2FzZSBcImJ1dHRvblwiOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaXRlbS5zaXplID09PSBcInNtYWxsXCIgJiYgKCFyZXN1bHQgfHwgcmVzdWx0IDw9IDI4KSA/IDI4IDogcmVzdWx0IHx8IDMyO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIDMyO1xuXHRcdFx0XHRcdH1cblx0XHRcdCAgfSwgMCkgKyAyNFxuXHRcdFx0OiBudWxsO1xuXG5cdFx0cmV0dXJuIGVsKFxuXHRcdFx0XCJuYXYuZGh4X3dpZGdldC5kaHhfdG9vbGJhclwiLFxuXHRcdFx0e1xuXHRcdFx0XHRzdHlsZTogeyBoZWlnaHQ6IHRvb2xiYXJIZWlnaHQgfSxcblx0XHRcdFx0Y2xhc3M6IHRoaXMuY29uZmlnLmNzcyA/IHRoaXMuY29uZmlnLmNzcyA6IFwiXCIsXG5cdFx0XHR9LFxuXHRcdFx0W1xuXHRcdFx0XHRlbChcblx0XHRcdFx0XHRcInVsLmRoeF9uYXZiYXIuZGh4X25hdmJhci0taG9yaXpvbnRhbFwiLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRoeF93aWRnZXRfaWQ6IHRoaXMuX3VpZCxcblx0XHRcdFx0XHRcdHRhYmluZGV4OiAwLFxuXHRcdFx0XHRcdFx0Li4uZ2V0QXJpYUF0dHJzKGVsZW1lbnQpLFxuXHRcdFx0XHRcdFx0b25jbGljazogdGhpcy5faGFuZGxlcnMub25jbGljayxcblx0XHRcdFx0XHRcdG9ubW91c2Vkb3duOiB0aGlzLl9oYW5kbGVycy5vbm1vdXNlZG93bixcblx0XHRcdFx0XHRcdG9uaW5wdXQ6IHRoaXMuX2hhbmRsZXJzLmlucHV0LFxuXHRcdFx0XHRcdFx0b25tb3VzZW92ZXI6IHRoaXMuX2hhbmRsZXJzLnRvb2x0aXAsXG5cdFx0XHRcdFx0XHRfaG9va3M6IHtcblx0XHRcdFx0XHRcdFx0ZGlkSW5zZXJ0OiBub2RlID0+IHtcblx0XHRcdFx0XHRcdFx0XHRub2RlLmVsLmFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0XHRcdFx0XHRcdFx0XHRcImtleXVwXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRlID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGUud2hpY2ggIT09IDkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgZWxlbSA9IGxvY2F0ZU5vZGUoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICghZWxlbSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBpZCA9IGVsZW0uZ2V0QXR0cmlidXRlKFwiZGh4X2lkXCIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBpdGVtID0gdGhpcy5kYXRhLmdldEl0ZW0oaWQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoaXRlbS50b29sdGlwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dG9vbHRpcChpdGVtLnRvb2x0aXAsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGU6IGVsZW0gYXMgSFRNTEVsZW1lbnQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogUG9zaXRpb24uYm90dG9tLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yY2U6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0aGlzLmRhdGEubWFwKGl0ZW0gPT4gdGhpcy5fZmFjdG9yeShpdGVtKSwgdGhpcy5kYXRhLmdldFJvb3QoKSwgZmFsc2UpXG5cdFx0XHRcdCksXG5cdFx0XHRdXG5cdFx0KTtcblx0fVxuXHRwcm90ZWN0ZWQgX2dldE1vZGUoaXRlbSwgcm9vdCk6IFwicmlnaHRcIiB8IFwiYm90dG9tXCIge1xuXHRcdHJldHVybiBpdGVtLmlkID09PSByb290ID8gXCJib3R0b21cIiA6IFwicmlnaHRcIjtcblx0fVxuXHRwcm90ZWN0ZWQgX2Nsb3NlKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcblx0XHR0aGlzLl9hY3RpdmVQb3NpdGlvbiA9IG51bGw7XG5cdFx0dGhpcy5fY3VycmVudFJvb3QgPSBudWxsO1xuXHRcdHN1cGVyLl9jbG9zZShlKTtcblx0fVxuXHRwcm90ZWN0ZWQgX3NldFJvb3QoaWQ6IElkKSB7XG5cdFx0aWYgKHRoaXMuZGF0YS5nZXRQYXJlbnQoaWQpID09PSB0aGlzLmRhdGEuZ2V0Um9vdCgpKSB7XG5cdFx0XHR0aGlzLl9jdXJyZW50Um9vdCA9IGlkO1xuXHRcdH1cblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==